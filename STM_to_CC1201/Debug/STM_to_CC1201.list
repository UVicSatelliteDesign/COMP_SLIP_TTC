
STM_to_CC1201.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008264  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019c8  08008504  08008504  00009504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009ecc  08009ecc  0000aecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009ed4  08009ed4  0000aed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009ed8  08009ed8  0000aed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  24000000  08009edc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002ac  24000088  08009f64  0000b088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000334  08009f64  0000b334  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b088  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015b99  00000000  00000000  0000b0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c9a  00000000  00000000  00020c4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f08  00000000  00000000  000238f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b81  00000000  00000000  000247f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000384f5  00000000  00000000  00025379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000163f4  00000000  00000000  0005d86e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015ef72  00000000  00000000  00073c62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d2bd4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004564  00000000  00000000  001d2c18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006a  00000000  00000000  001d717c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080084ec 	.word	0x080084ec

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	080084ec 	.word	0x080084ec

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <CC1201_FastTxOn>:
    printf("[DEBUG] CC1201_SoftReset about to return: %d\n\r", result);
    return result;
}

HAL_StatusTypeDef CC1201_FastTxOn(uint8_t *status_byte)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_FAST_TX_ON, status_byte);
 80006b4:	6879      	ldr	r1, [r7, #4]
 80006b6:	2031      	movs	r0, #49	@ 0x31
 80006b8:	f000 f988 	bl	80009cc <CC1201_SendStrobe>
 80006bc:	4603      	mov	r3, r0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <CC1201_CalFreqSynth>:
{
    return CC1201_SendStrobe(CC1201_STROBE_OSC_OFF, status_byte);
}

HAL_StatusTypeDef CC1201_CalFreqSynth(uint8_t *status_byte)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_CAL_FREQ_SYNTH, status_byte);
 80006ce:	6879      	ldr	r1, [r7, #4]
 80006d0:	2033      	movs	r0, #51	@ 0x33
 80006d2:	f000 f97b 	bl	80009cc <CC1201_SendStrobe>
 80006d6:	4603      	mov	r3, r0
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <CC1201_EnterRxMode>:

HAL_StatusTypeDef CC1201_EnterRxMode(uint8_t *status_byte)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_RX, status_byte);
 80006e8:	6879      	ldr	r1, [r7, #4]
 80006ea:	2034      	movs	r0, #52	@ 0x34
 80006ec:	f000 f96e 	bl	80009cc <CC1201_SendStrobe>
 80006f0:	4603      	mov	r3, r0
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <CC1201_EnterTxMode>:

HAL_StatusTypeDef CC1201_EnterTxMode(uint8_t *status_byte)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b082      	sub	sp, #8
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_TX, status_byte);
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	2035      	movs	r0, #53	@ 0x35
 8000706:	f000 f961 	bl	80009cc <CC1201_SendStrobe>
 800070a:	4603      	mov	r3, r0
}
 800070c:	4618      	mov	r0, r3
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <CC1201_EnterIdleMode>:

HAL_StatusTypeDef CC1201_EnterIdleMode(uint8_t *status_byte)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_IDLE, status_byte);
 800071c:	6879      	ldr	r1, [r7, #4]
 800071e:	2036      	movs	r0, #54	@ 0x36
 8000720:	f000 f954 	bl	80009cc <CC1201_SendStrobe>
 8000724:	4603      	mov	r3, r0
}
 8000726:	4618      	mov	r0, r3
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <CC1201_Nop>:
{
    return CC1201_SendStrobe(CC1201_STROBE_WOR_RESET, status_byte);
}

HAL_StatusTypeDef CC1201_Nop(uint8_t *status_byte)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
    printf("[DEBUG] Entered CC1201_Nop function\n\r");
 8000738:	4809      	ldr	r0, [pc, #36]	@ (8000760 <CC1201_Nop+0x30>)
 800073a:	f007 f86b 	bl	8007814 <iprintf>
    HAL_StatusTypeDef result = CC1201_SendStrobe(CC1201_STROBE_NOP, status_byte);
 800073e:	6879      	ldr	r1, [r7, #4]
 8000740:	203d      	movs	r0, #61	@ 0x3d
 8000742:	f000 f943 	bl	80009cc <CC1201_SendStrobe>
 8000746:	4603      	mov	r3, r0
 8000748:	73fb      	strb	r3, [r7, #15]
    printf("[DEBUG] CC1201_Nop about to return: %d\n\r", result);
 800074a:	7bfb      	ldrb	r3, [r7, #15]
 800074c:	4619      	mov	r1, r3
 800074e:	4805      	ldr	r0, [pc, #20]	@ (8000764 <CC1201_Nop+0x34>)
 8000750:	f007 f860 	bl	8007814 <iprintf>
    return result;
 8000754:	7bfb      	ldrb	r3, [r7, #15]
}
 8000756:	4618      	mov	r0, r3
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	08008560 	.word	0x08008560
 8000764:	08008588 	.word	0x08008588

08000768 <CC1201_ReadStatus>:
 * @param reg_addr The address of the register to read. The read bit (MSB) will be set internally.
 * @param read_data Pointer to a uint8_t where the read data will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadStatus(uint16_t reg_addr, uint8_t *read_data)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af02      	add	r7, sp, #8
 800076e:	4603      	mov	r3, r0
 8000770:	6039      	str	r1, [r7, #0]
 8000772:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[4];
    uint8_t rx_buffer[4];
    uint8_t buffer_size;

    if (reg_addr > 0xFF) {
 8000774:	88fb      	ldrh	r3, [r7, #6]
 8000776:	2bff      	cmp	r3, #255	@ 0xff
 8000778:	d909      	bls.n	800078e <CC1201_ReadStatus+0x26>
        // Extended register single read: first byte is 0x2F with R/W bit set
        tx_buffer[0] = 0x2F | CC1201_READ_BIT; // Extended register READ command
 800077a:	23af      	movs	r3, #175	@ 0xaf
 800077c:	743b      	strb	r3, [r7, #16]
        tx_buffer[1] = (uint8_t)(reg_addr & 0xFF); // Low byte of address
 800077e:	88fb      	ldrh	r3, [r7, #6]
 8000780:	b2db      	uxtb	r3, r3
 8000782:	747b      	strb	r3, [r7, #17]
        tx_buffer[2] = 0x00; // Dummy byte for reading
 8000784:	2300      	movs	r3, #0
 8000786:	74bb      	strb	r3, [r7, #18]
        buffer_size = 3;
 8000788:	2303      	movs	r3, #3
 800078a:	75fb      	strb	r3, [r7, #23]
 800078c:	e009      	b.n	80007a2 <CC1201_ReadStatus+0x3a>
    } else {
        // Standard register
        tx_buffer[0] = (uint8_t)reg_addr | CC1201_READ_BIT;
 800078e:	88fb      	ldrh	r3, [r7, #6]
 8000790:	b2db      	uxtb	r3, r3
 8000792:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000796:	b2db      	uxtb	r3, r3
 8000798:	743b      	strb	r3, [r7, #16]
        tx_buffer[1] = 0x00; // Dummy byte for reading
 800079a:	2300      	movs	r3, #0
 800079c:	747b      	strb	r3, [r7, #17]
        buffer_size = 2;
 800079e:	2302      	movs	r3, #2
 80007a0:	75fb      	strb	r3, [r7, #23]
    }

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007a8:	481a      	ldr	r0, [pc, #104]	@ (8000814 <CC1201_ReadStatus+0xac>)
 80007aa:	f002 f8f7 	bl	800299c <HAL_GPIO_WritePin>
    volatile uint32_t spin;
    for (spin = 0; spin < 200; ++spin) { __NOP(); }
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	e003      	b.n	80007bc <CC1201_ReadStatus+0x54>
 80007b4:	bf00      	nop
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	3301      	adds	r3, #1
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	2bc7      	cmp	r3, #199	@ 0xc7
 80007c0:	d9f8      	bls.n	80007b4 <CC1201_ReadStatus+0x4c>

    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, tx_buffer, rx_buffer, buffer_size, 1000);
 80007c2:	7dfb      	ldrb	r3, [r7, #23]
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	f107 020c 	add.w	r2, r7, #12
 80007ca:	f107 0110 	add.w	r1, r7, #16
 80007ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007d2:	9000      	str	r0, [sp, #0]
 80007d4:	4810      	ldr	r0, [pc, #64]	@ (8000818 <CC1201_ReadStatus+0xb0>)
 80007d6:	f005 f89f 	bl	8005918 <HAL_SPI_TransmitReceive>
 80007da:	4603      	mov	r3, r0
 80007dc:	75bb      	strb	r3, [r7, #22]

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 80007de:	2201      	movs	r2, #1
 80007e0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007e4:	480b      	ldr	r0, [pc, #44]	@ (8000814 <CC1201_ReadStatus+0xac>)
 80007e6:	f002 f8d9 	bl	800299c <HAL_GPIO_WritePin>

    if (status == HAL_OK) {
 80007ea:	7dbb      	ldrb	r3, [r7, #22]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d10c      	bne.n	800080a <CC1201_ReadStatus+0xa2>
        if (read_data != NULL) {
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d009      	beq.n	800080a <CC1201_ReadStatus+0xa2>
            if (reg_addr > 0xFF) {
 80007f6:	88fb      	ldrh	r3, [r7, #6]
 80007f8:	2bff      	cmp	r3, #255	@ 0xff
 80007fa:	d903      	bls.n	8000804 <CC1201_ReadStatus+0x9c>
                *read_data = rx_buffer[2]; // Extended register data
 80007fc:	7bba      	ldrb	r2, [r7, #14]
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	701a      	strb	r2, [r3, #0]
 8000802:	e002      	b.n	800080a <CC1201_ReadStatus+0xa2>
            } else {
                *read_data = rx_buffer[1]; // Standard register data
 8000804:	7b7a      	ldrb	r2, [r7, #13]
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return status;
 800080a:	7dbb      	ldrb	r3, [r7, #22]
}
 800080c:	4618      	mov	r0, r3
 800080e:	3718      	adds	r7, #24
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	58021000 	.word	0x58021000
 8000818:	240000b8 	.word	0x240000b8

0800081c <CC1201_ReadMARCState>:
 *
 * @param marc_state Pointer to a uint8_t where the MARCSTATE value will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadMARCState(uint8_t *marc_state)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_MARCSTATE, marc_state);
 8000824:	6879      	ldr	r1, [r7, #4]
 8000826:	f642 7073 	movw	r0, #12147	@ 0x2f73
 800082a:	f7ff ff9d 	bl	8000768 <CC1201_ReadStatus>
 800082e:	4603      	mov	r3, r0
}
 8000830:	4618      	mov	r0, r3
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <CC1201_GetNumRXBytes>:
 *
 * @param num_bytes Pointer to a uint8_t where the number of RX bytes will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_GetNumRXBytes(uint8_t *num_bytes)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_NUM_RXBYTES, num_bytes);
 8000840:	6879      	ldr	r1, [r7, #4]
 8000842:	f642 707a 	movw	r0, #12154	@ 0x2f7a
 8000846:	f7ff ff8f 	bl	8000768 <CC1201_ReadStatus>
 800084a:	4603      	mov	r3, r0
}
 800084c:	4618      	mov	r0, r3
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <CC1201_WriteTxFifo>:
 * @param length Number of bytes to write.
 * @param status_byte Pointer to store the status byte returned.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteTxFifo(uint8_t *data, uint8_t length, uint8_t *status_byte)
{
 8000854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000858:	b08f      	sub	sp, #60	@ 0x3c
 800085a:	af02      	add	r7, sp, #8
 800085c:	6178      	str	r0, [r7, #20]
 800085e:	460b      	mov	r3, r1
 8000860:	60fa      	str	r2, [r7, #12]
 8000862:	74fb      	strb	r3, [r7, #19]
 8000864:	466b      	mov	r3, sp
 8000866:	461e      	mov	r6, r3
    if (data == NULL || status_byte == NULL || length == 0) {
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d005      	beq.n	800087a <CC1201_WriteTxFifo+0x26>
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d002      	beq.n	800087a <CC1201_WriteTxFifo+0x26>
 8000874:	7cfb      	ldrb	r3, [r7, #19]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d101      	bne.n	800087e <CC1201_WriteTxFifo+0x2a>
        return HAL_ERROR;
 800087a:	2301      	movs	r3, #1
 800087c:	e08a      	b.n	8000994 <CC1201_WriteTxFifo+0x140>
    }
    
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[2 + length]; // Command + address + data
 800087e:	7cfb      	ldrb	r3, [r7, #19]
 8000880:	1c99      	adds	r1, r3, #2
 8000882:	1e4b      	subs	r3, r1, #1
 8000884:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000886:	460a      	mov	r2, r1
 8000888:	2300      	movs	r3, #0
 800088a:	603a      	str	r2, [r7, #0]
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	f04f 0200 	mov.w	r2, #0
 8000892:	f04f 0300 	mov.w	r3, #0
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	00c3      	lsls	r3, r0, #3
 800089a:	6838      	ldr	r0, [r7, #0]
 800089c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80008a0:	6838      	ldr	r0, [r7, #0]
 80008a2:	00c2      	lsls	r2, r0, #3
 80008a4:	460a      	mov	r2, r1
 80008a6:	2300      	movs	r3, #0
 80008a8:	4692      	mov	sl, r2
 80008aa:	469b      	mov	fp, r3
 80008ac:	f04f 0200 	mov.w	r2, #0
 80008b0:	f04f 0300 	mov.w	r3, #0
 80008b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80008b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80008bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80008c0:	460b      	mov	r3, r1
 80008c2:	3307      	adds	r3, #7
 80008c4:	08db      	lsrs	r3, r3, #3
 80008c6:	00db      	lsls	r3, r3, #3
 80008c8:	ebad 0d03 	sub.w	sp, sp, r3
 80008cc:	ab02      	add	r3, sp, #8
 80008ce:	3300      	adds	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t rx_buffer[2 + length];
 80008d2:	7cfb      	ldrb	r3, [r7, #19]
 80008d4:	1c99      	adds	r1, r3, #2
 80008d6:	1e4b      	subs	r3, r1, #1
 80008d8:	623b      	str	r3, [r7, #32]
 80008da:	460a      	mov	r2, r1
 80008dc:	2300      	movs	r3, #0
 80008de:	4690      	mov	r8, r2
 80008e0:	4699      	mov	r9, r3
 80008e2:	f04f 0200 	mov.w	r2, #0
 80008e6:	f04f 0300 	mov.w	r3, #0
 80008ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80008ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80008f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80008f6:	460a      	mov	r2, r1
 80008f8:	2300      	movs	r3, #0
 80008fa:	4614      	mov	r4, r2
 80008fc:	461d      	mov	r5, r3
 80008fe:	f04f 0200 	mov.w	r2, #0
 8000902:	f04f 0300 	mov.w	r3, #0
 8000906:	00eb      	lsls	r3, r5, #3
 8000908:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800090c:	00e2      	lsls	r2, r4, #3
 800090e:	460b      	mov	r3, r1
 8000910:	3307      	adds	r3, #7
 8000912:	08db      	lsrs	r3, r3, #3
 8000914:	00db      	lsls	r3, r3, #3
 8000916:	ebad 0d03 	sub.w	sp, sp, r3
 800091a:	ab02      	add	r3, sp, #8
 800091c:	3300      	adds	r3, #0
 800091e:	61fb      	str	r3, [r7, #28]
    
    // Build command: burst write to TX FIFO (0x3F | 0x40)
    tx_buffer[0] = 0x7F; // TX FIFO burst write
 8000920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000922:	227f      	movs	r2, #127	@ 0x7f
 8000924:	701a      	strb	r2, [r3, #0]
    
    // Copy data to transmit buffer
    for (uint8_t i = 0; i < length; i++) {
 8000926:	2300      	movs	r3, #0
 8000928:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800092c:	e00e      	b.n	800094c <CC1201_WriteTxFifo+0xf8>
        tx_buffer[1 + i] = data[i];
 800092e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000932:	697a      	ldr	r2, [r7, #20]
 8000934:	441a      	add	r2, r3
 8000936:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800093a:	3301      	adds	r3, #1
 800093c:	7811      	ldrb	r1, [r2, #0]
 800093e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000940:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < length; i++) {
 8000942:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000946:	3301      	adds	r3, #1
 8000948:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800094c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000950:	7cfb      	ldrb	r3, [r7, #19]
 8000952:	429a      	cmp	r2, r3
 8000954:	d3eb      	bcc.n	800092e <CC1201_WriteTxFifo+0xda>
    }
    
    // Pull CS low to start SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800095c:	4810      	ldr	r0, [pc, #64]	@ (80009a0 <CC1201_WriteTxFifo+0x14c>)
 800095e:	f002 f81d 	bl	800299c <HAL_GPIO_WritePin>
    
    // Perform SPI transaction
    status = HAL_SPI_TransmitReceive(&hspi4, tx_buffer, rx_buffer, length + 1, HAL_MAX_DELAY);
 8000962:	7cfb      	ldrb	r3, [r7, #19]
 8000964:	b29b      	uxth	r3, r3
 8000966:	3301      	adds	r3, #1
 8000968:	b29b      	uxth	r3, r3
 800096a:	f04f 32ff 	mov.w	r2, #4294967295
 800096e:	9200      	str	r2, [sp, #0]
 8000970:	69fa      	ldr	r2, [r7, #28]
 8000972:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000974:	480b      	ldr	r0, [pc, #44]	@ (80009a4 <CC1201_WriteTxFifo+0x150>)
 8000976:	f004 ffcf 	bl	8005918 <HAL_SPI_TransmitReceive>
 800097a:	4603      	mov	r3, r0
 800097c:	76fb      	strb	r3, [r7, #27]
    
    // Pull CS high to end SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 800097e:	2201      	movs	r2, #1
 8000980:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000984:	4806      	ldr	r0, [pc, #24]	@ (80009a0 <CC1201_WriteTxFifo+0x14c>)
 8000986:	f002 f809 	bl	800299c <HAL_GPIO_WritePin>
    
    // Store status byte (first received byte)
    *status_byte = rx_buffer[0];
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	781a      	ldrb	r2, [r3, #0]
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	701a      	strb	r2, [r3, #0]
    
    return status;
 8000992:	7efb      	ldrb	r3, [r7, #27]
 8000994:	46b5      	mov	sp, r6
}
 8000996:	4618      	mov	r0, r3
 8000998:	3734      	adds	r7, #52	@ 0x34
 800099a:	46bd      	mov	sp, r7
 800099c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009a0:	58021000 	.word	0x58021000
 80009a4:	240000b8 	.word	0x240000b8

080009a8 <CC1201_WriteSingleTxFifo>:
 * @param data Single byte to write to TX FIFO.
 * @param status_byte Pointer to store the status byte returned.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteSingleTxFifo(uint8_t data, uint8_t *status_byte)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	6039      	str	r1, [r7, #0]
 80009b2:	71fb      	strb	r3, [r7, #7]
    return CC1201_WriteTxFifo(&data, 1, status_byte);
 80009b4:	1dfb      	adds	r3, r7, #7
 80009b6:	683a      	ldr	r2, [r7, #0]
 80009b8:	2101      	movs	r1, #1
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff ff4a 	bl	8000854 <CC1201_WriteTxFifo>
 80009c0:	4603      	mov	r3, r0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <CC1201_SendStrobe>:
 * @param status_byte Pointer to a uint8_t where the status byte received from the CC1201 will be stored.
 *                    Can be NULL if the status byte is not needed.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_SendStrobe(uint8_t strobe_command, uint8_t *status_byte)
{
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b087      	sub	sp, #28
 80009d0:	af02      	add	r7, sp, #8
 80009d2:	4603      	mov	r3, r0
 80009d4:	6039      	str	r1, [r7, #0]
 80009d6:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;
    uint8_t rx_data;

    // Early readiness check to avoid blocking if SPI not initialized yet
    HAL_SPI_StateTypeDef spi_state = HAL_SPI_GetState(&CC1201_SPI_HANDLE);
 80009d8:	4832      	ldr	r0, [pc, #200]	@ (8000aa4 <CC1201_SendStrobe+0xd8>)
 80009da:	f005 fcd7 	bl	800638c <HAL_SPI_GetState>
 80009de:	4603      	mov	r3, r0
 80009e0:	73fb      	strb	r3, [r7, #15]
    printf("[DEBUG] Enter CC1201_SendStrobe cmd=0x%02X, SPI state=%d\n\r", strobe_command, (int)spi_state);
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	4619      	mov	r1, r3
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
 80009e8:	461a      	mov	r2, r3
 80009ea:	482f      	ldr	r0, [pc, #188]	@ (8000aa8 <CC1201_SendStrobe+0xdc>)
 80009ec:	f006 ff12 	bl	8007814 <iprintf>
    if (spi_state != HAL_SPI_STATE_READY) {
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d00a      	beq.n	8000a0c <CC1201_SendStrobe+0x40>
        printf("[DEBUG] SPI not ready, skipping strobe\n\r");
 80009f6:	482d      	ldr	r0, [pc, #180]	@ (8000aac <CC1201_SendStrobe+0xe0>)
 80009f8:	f006 ff0c 	bl	8007814 <iprintf>
        if (status_byte) { *status_byte = 0x00; }
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d002      	beq.n	8000a08 <CC1201_SendStrobe+0x3c>
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	2200      	movs	r2, #0
 8000a06:	701a      	strb	r2, [r3, #0]
        return HAL_ERROR;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	e046      	b.n	8000a9a <CC1201_SendStrobe+0xce>
    }

    // Ensure SPI is ready and CS is toggled with brief gaps
    printf("[DEBUG] SPI state before CS low: %d\n\r", (int)HAL_SPI_GetState(&CC1201_SPI_HANDLE));
 8000a0c:	4825      	ldr	r0, [pc, #148]	@ (8000aa4 <CC1201_SendStrobe+0xd8>)
 8000a0e:	f005 fcbd 	bl	800638c <HAL_SPI_GetState>
 8000a12:	4603      	mov	r3, r0
 8000a14:	4619      	mov	r1, r3
 8000a16:	4826      	ldr	r0, [pc, #152]	@ (8000ab0 <CC1201_SendStrobe+0xe4>)
 8000a18:	f006 fefc 	bl	8007814 <iprintf>
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a22:	4824      	ldr	r0, [pc, #144]	@ (8000ab4 <CC1201_SendStrobe+0xe8>)
 8000a24:	f001 ffba 	bl	800299c <HAL_GPIO_WritePin>
    
    // Small CS setup delay without relying on SysTick (avoid HAL_Delay hang if tick not running)
    volatile uint32_t i;
    for (i = 0; i < 300; ++i) {
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	e003      	b.n	8000a36 <CC1201_SendStrobe+0x6a>
        __NOP();
 8000a2e:	bf00      	nop
    for (i = 0; i < 300; ++i) {
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	3301      	adds	r3, #1
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000a3c:	d3f7      	bcc.n	8000a2e <CC1201_SendStrobe+0x62>
    }

    // Perform SPI transaction
    printf("[DEBUG] About to SPI strobe 0x%02X (SPI state=%d)\n\r", strobe_command, (int)HAL_SPI_GetState(&CC1201_SPI_HANDLE));
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	461c      	mov	r4, r3
 8000a42:	4818      	ldr	r0, [pc, #96]	@ (8000aa4 <CC1201_SendStrobe+0xd8>)
 8000a44:	f005 fca2 	bl	800638c <HAL_SPI_GetState>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	4621      	mov	r1, r4
 8000a4e:	481a      	ldr	r0, [pc, #104]	@ (8000ab8 <CC1201_SendStrobe+0xec>)
 8000a50:	f006 fee0 	bl	8007814 <iprintf>
    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, &strobe_command, &rx_data, 1, 1000);
 8000a54:	f107 020d 	add.w	r2, r7, #13
 8000a58:	1df9      	adds	r1, r7, #7
 8000a5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a5e:	9300      	str	r3, [sp, #0]
 8000a60:	2301      	movs	r3, #1
 8000a62:	4810      	ldr	r0, [pc, #64]	@ (8000aa4 <CC1201_SendStrobe+0xd8>)
 8000a64:	f004 ff58 	bl	8005918 <HAL_SPI_TransmitReceive>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	73bb      	strb	r3, [r7, #14]
    printf("[DEBUG] CC1201_SendStrobe 0x%02X -> HAL=%d, statusByte=0x%02X\n\r", strobe_command, status, rx_data);
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	4619      	mov	r1, r3
 8000a70:	7bba      	ldrb	r2, [r7, #14]
 8000a72:	7b7b      	ldrb	r3, [r7, #13]
 8000a74:	4811      	ldr	r0, [pc, #68]	@ (8000abc <CC1201_SendStrobe+0xf0>)
 8000a76:	f006 fecd 	bl	8007814 <iprintf>
    
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a80:	480c      	ldr	r0, [pc, #48]	@ (8000ab4 <CC1201_SendStrobe+0xe8>)
 8000a82:	f001 ff8b 	bl	800299c <HAL_GPIO_WritePin>
    
    if (status == HAL_OK) {
 8000a86:	7bbb      	ldrb	r3, [r7, #14]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d105      	bne.n	8000a98 <CC1201_SendStrobe+0xcc>
        if (status_byte != NULL) {
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d002      	beq.n	8000a98 <CC1201_SendStrobe+0xcc>
            *status_byte = rx_data;
 8000a92:	7b7a      	ldrb	r2, [r7, #13]
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	701a      	strb	r2, [r3, #0]
        }
    }
    return status;
 8000a98:	7bbb      	ldrb	r3, [r7, #14]
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3714      	adds	r7, #20
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd90      	pop	{r4, r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	240000b8 	.word	0x240000b8
 8000aa8:	080085e4 	.word	0x080085e4
 8000aac:	08008620 	.word	0x08008620
 8000ab0:	0800864c 	.word	0x0800864c
 8000ab4:	58021000 	.word	0x58021000
 8000ab8:	08008674 	.word	0x08008674
 8000abc:	080086a8 	.word	0x080086a8

08000ac0 <print_cc1201_status>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Function to decode and print CC1201 status
void print_cc1201_status(uint8_t status_byte, const char* context) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	6039      	str	r1, [r7, #0]
 8000aca:	71fb      	strb	r3, [r7, #7]
    uint8_t radio_state = (status_byte >> 4) & 0x0F;
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	091b      	lsrs	r3, r3, #4
 8000ad0:	73fb      	strb	r3, [r7, #15]
    uint8_t fifo_bytes = status_byte & 0x0F;
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	f003 030f 	and.w	r3, r3, #15
 8000ad8:	73bb      	strb	r3, [r7, #14]
    
    printf("  %s: Status=0x%02X, State=0x%X", context, status_byte, radio_state);
 8000ada:	79fa      	ldrb	r2, [r7, #7]
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
 8000ade:	6839      	ldr	r1, [r7, #0]
 8000ae0:	4823      	ldr	r0, [pc, #140]	@ (8000b70 <print_cc1201_status+0xb0>)
 8000ae2:	f006 fe97 	bl	8007814 <iprintf>
    switch(radio_state) {
 8000ae6:	7bfb      	ldrb	r3, [r7, #15]
 8000ae8:	2b07      	cmp	r3, #7
 8000aea:	d833      	bhi.n	8000b54 <print_cc1201_status+0x94>
 8000aec:	a201      	add	r2, pc, #4	@ (adr r2, 8000af4 <print_cc1201_status+0x34>)
 8000aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af2:	bf00      	nop
 8000af4:	08000b15 	.word	0x08000b15
 8000af8:	08000b1d 	.word	0x08000b1d
 8000afc:	08000b25 	.word	0x08000b25
 8000b00:	08000b2d 	.word	0x08000b2d
 8000b04:	08000b35 	.word	0x08000b35
 8000b08:	08000b3d 	.word	0x08000b3d
 8000b0c:	08000b45 	.word	0x08000b45
 8000b10:	08000b4d 	.word	0x08000b4d
        case 0x0: printf("(IDLE)"); break;
 8000b14:	4817      	ldr	r0, [pc, #92]	@ (8000b74 <print_cc1201_status+0xb4>)
 8000b16:	f006 fe7d 	bl	8007814 <iprintf>
 8000b1a:	e01f      	b.n	8000b5c <print_cc1201_status+0x9c>
        case 0x1: printf("(RX)"); break;
 8000b1c:	4816      	ldr	r0, [pc, #88]	@ (8000b78 <print_cc1201_status+0xb8>)
 8000b1e:	f006 fe79 	bl	8007814 <iprintf>
 8000b22:	e01b      	b.n	8000b5c <print_cc1201_status+0x9c>
        case 0x2: printf("(TX)"); break;
 8000b24:	4815      	ldr	r0, [pc, #84]	@ (8000b7c <print_cc1201_status+0xbc>)
 8000b26:	f006 fe75 	bl	8007814 <iprintf>
 8000b2a:	e017      	b.n	8000b5c <print_cc1201_status+0x9c>
        case 0x3: printf("(FSTXON)"); break;
 8000b2c:	4814      	ldr	r0, [pc, #80]	@ (8000b80 <print_cc1201_status+0xc0>)
 8000b2e:	f006 fe71 	bl	8007814 <iprintf>
 8000b32:	e013      	b.n	8000b5c <print_cc1201_status+0x9c>
        case 0x4: printf("(CALIBRATE)"); break;
 8000b34:	4813      	ldr	r0, [pc, #76]	@ (8000b84 <print_cc1201_status+0xc4>)
 8000b36:	f006 fe6d 	bl	8007814 <iprintf>
 8000b3a:	e00f      	b.n	8000b5c <print_cc1201_status+0x9c>
        case 0x5: printf("(SETTLING)"); break;
 8000b3c:	4812      	ldr	r0, [pc, #72]	@ (8000b88 <print_cc1201_status+0xc8>)
 8000b3e:	f006 fe69 	bl	8007814 <iprintf>
 8000b42:	e00b      	b.n	8000b5c <print_cc1201_status+0x9c>
        case 0x6: printf("(RX_FIFO_ERR)"); break;
 8000b44:	4811      	ldr	r0, [pc, #68]	@ (8000b8c <print_cc1201_status+0xcc>)
 8000b46:	f006 fe65 	bl	8007814 <iprintf>
 8000b4a:	e007      	b.n	8000b5c <print_cc1201_status+0x9c>
        case 0x7: printf("(TX_FIFO_ERR)"); break;
 8000b4c:	4810      	ldr	r0, [pc, #64]	@ (8000b90 <print_cc1201_status+0xd0>)
 8000b4e:	f006 fe61 	bl	8007814 <iprintf>
 8000b52:	e003      	b.n	8000b5c <print_cc1201_status+0x9c>
        default: printf("(UNKNOWN)"); break;
 8000b54:	480f      	ldr	r0, [pc, #60]	@ (8000b94 <print_cc1201_status+0xd4>)
 8000b56:	f006 fe5d 	bl	8007814 <iprintf>
 8000b5a:	bf00      	nop
    }
    printf(", FIFO=%d\n\r", fifo_bytes);
 8000b5c:	7bbb      	ldrb	r3, [r7, #14]
 8000b5e:	4619      	mov	r1, r3
 8000b60:	480d      	ldr	r0, [pc, #52]	@ (8000b98 <print_cc1201_status+0xd8>)
 8000b62:	f006 fe57 	bl	8007814 <iprintf>
}
 8000b66:	bf00      	nop
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	08008740 	.word	0x08008740
 8000b74:	08008760 	.word	0x08008760
 8000b78:	08008768 	.word	0x08008768
 8000b7c:	08008770 	.word	0x08008770
 8000b80:	08008778 	.word	0x08008778
 8000b84:	08008784 	.word	0x08008784
 8000b88:	08008790 	.word	0x08008790
 8000b8c:	0800879c 	.word	0x0800879c
 8000b90:	080087ac 	.word	0x080087ac
 8000b94:	080087bc 	.word	0x080087bc
 8000b98:	080087c8 	.word	0x080087c8

08000b9c <test_state_changes>:
    
    printf("=== BUFFER TEST COMPLETE ===\n\r");
}

// Test 2: State Change Operations
void test_state_changes(void) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
    printf("\n=== TEST 2: STATE CHANGE OPERATIONS ===\n\r");
 8000ba2:	489b      	ldr	r0, [pc, #620]	@ (8000e10 <test_state_changes+0x274>)
 8000ba4:	f006 fe36 	bl	8007814 <iprintf>
    
    HAL_StatusTypeDef status;
    uint8_t status_byte = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	75bb      	strb	r3, [r7, #22]
    uint8_t marc_state = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	757b      	strb	r3, [r7, #21]
    
    // Temporarily skip full configuration to verify state transitions first
    printf("Skipping full configuration for quick state test...\n\r");
 8000bb0:	4898      	ldr	r0, [pc, #608]	@ (8000e14 <test_state_changes+0x278>)
 8000bb2:	f006 fe2f 	bl	8007814 <iprintf>
    // Optionally perform a single SCAL only
    status = CC1201_CalFreqSynth(&status_byte);
 8000bb6:	f107 0316 	add.w	r3, r7, #22
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fd83 	bl	80006c6 <CC1201_CalFreqSynth>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	75fb      	strb	r3, [r7, #23]
    printf("  SCAL only: HAL=%d ", status);
 8000bc4:	7dfb      	ldrb	r3, [r7, #23]
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4893      	ldr	r0, [pc, #588]	@ (8000e18 <test_state_changes+0x27c>)
 8000bca:	f006 fe23 	bl	8007814 <iprintf>
    if (status == HAL_OK) { print_cc1201_status(status_byte, "SCAL"); }
 8000bce:	7dfb      	ldrb	r3, [r7, #23]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d104      	bne.n	8000bde <test_state_changes+0x42>
 8000bd4:	7dbb      	ldrb	r3, [r7, #22]
 8000bd6:	4991      	ldr	r1, [pc, #580]	@ (8000e1c <test_state_changes+0x280>)
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff ff71 	bl	8000ac0 <print_cc1201_status>
    // Avoid HAL_Delay here in case SysTick is impacted; use a small busy wait
    for (volatile uint32_t d = 0; d < 50000; ++d) { __NOP(); }
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	e003      	b.n	8000bec <test_state_changes+0x50>
 8000be4:	bf00      	nop
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	3301      	adds	r3, #1
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d9f6      	bls.n	8000be4 <test_state_changes+0x48>
    printf("Proceeding to IDLE test...\n\r");
 8000bf6:	488a      	ldr	r0, [pc, #552]	@ (8000e20 <test_state_changes+0x284>)
 8000bf8:	f006 fe0c 	bl	8007814 <iprintf>
    
    // Test 1: IDLE State
    printf("1. Testing IDLE State:\n\r");
 8000bfc:	4889      	ldr	r0, [pc, #548]	@ (8000e24 <test_state_changes+0x288>)
 8000bfe:	f006 fe09 	bl	8007814 <iprintf>
    status = CC1201_EnterIdleMode(&status_byte);
 8000c02:	f107 0316 	add.w	r3, r7, #22
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fd84 	bl	8000714 <CC1201_EnterIdleMode>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	75fb      	strb	r3, [r7, #23]
    printf("  Enter IDLE: HAL=%d ", status);
 8000c10:	7dfb      	ldrb	r3, [r7, #23]
 8000c12:	4619      	mov	r1, r3
 8000c14:	4884      	ldr	r0, [pc, #528]	@ (8000e28 <test_state_changes+0x28c>)
 8000c16:	f006 fdfd 	bl	8007814 <iprintf>
    if (status == HAL_OK) {
 8000c1a:	7dfb      	ldrb	r3, [r7, #23]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d10e      	bne.n	8000c3e <test_state_changes+0xa2>
        print_cc1201_status(status_byte, "IDLE");
 8000c20:	7dbb      	ldrb	r3, [r7, #22]
 8000c22:	4982      	ldr	r1, [pc, #520]	@ (8000e2c <test_state_changes+0x290>)
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff4b 	bl	8000ac0 <print_cc1201_status>
        CC1201_ReadMARCState(&marc_state);
 8000c2a:	f107 0315 	add.w	r3, r7, #21
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fdf4 	bl	800081c <CC1201_ReadMARCState>
        printf("  MARC State: 0x%02X\n\r", marc_state);
 8000c34:	7d7b      	ldrb	r3, [r7, #21]
 8000c36:	4619      	mov	r1, r3
 8000c38:	487d      	ldr	r0, [pc, #500]	@ (8000e30 <test_state_changes+0x294>)
 8000c3a:	f006 fdeb 	bl	8007814 <iprintf>
    }
    // Small pause without HAL_Delay
    for (volatile uint32_t d = 0; d < 50000; ++d) { __NOP(); }
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	e003      	b.n	8000c4c <test_state_changes+0xb0>
 8000c44:	bf00      	nop
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d9f6      	bls.n	8000c44 <test_state_changes+0xa8>
    
    // Test 2: RX State
    printf("\n2. Testing RX State:\n\r");
 8000c56:	4877      	ldr	r0, [pc, #476]	@ (8000e34 <test_state_changes+0x298>)
 8000c58:	f006 fddc 	bl	8007814 <iprintf>
    status = CC1201_EnterRxMode(&status_byte);
 8000c5c:	f107 0316 	add.w	r3, r7, #22
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fd3d 	bl	80006e0 <CC1201_EnterRxMode>
 8000c66:	4603      	mov	r3, r0
 8000c68:	75fb      	strb	r3, [r7, #23]
    printf("  Enter RX: HAL=%d ", status);
 8000c6a:	7dfb      	ldrb	r3, [r7, #23]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4872      	ldr	r0, [pc, #456]	@ (8000e38 <test_state_changes+0x29c>)
 8000c70:	f006 fdd0 	bl	8007814 <iprintf>
    if (status == HAL_OK) {
 8000c74:	7dfb      	ldrb	r3, [r7, #23]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d119      	bne.n	8000cae <test_state_changes+0x112>
        print_cc1201_status(status_byte, "RX");
 8000c7a:	7dbb      	ldrb	r3, [r7, #22]
 8000c7c:	496f      	ldr	r1, [pc, #444]	@ (8000e3c <test_state_changes+0x2a0>)
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff ff1e 	bl	8000ac0 <print_cc1201_status>
        for (volatile uint32_t d = 0; d < 200000; ++d) { __NOP(); }
 8000c84:	2300      	movs	r3, #0
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	e003      	b.n	8000c92 <test_state_changes+0xf6>
 8000c8a:	bf00      	nop
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	4a6a      	ldr	r2, [pc, #424]	@ (8000e40 <test_state_changes+0x2a4>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d9f7      	bls.n	8000c8a <test_state_changes+0xee>
        CC1201_ReadMARCState(&marc_state);
 8000c9a:	f107 0315 	add.w	r3, r7, #21
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fdbc 	bl	800081c <CC1201_ReadMARCState>
        printf("  MARC State after delay: 0x%02X\n\r", marc_state);
 8000ca4:	7d7b      	ldrb	r3, [r7, #21]
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4866      	ldr	r0, [pc, #408]	@ (8000e44 <test_state_changes+0x2a8>)
 8000caa:	f006 fdb3 	bl	8007814 <iprintf>
    }
    
    // Test 3: Return to IDLE from RX
    printf("\n3. Testing IDLE from RX:\n\r");
 8000cae:	4866      	ldr	r0, [pc, #408]	@ (8000e48 <test_state_changes+0x2ac>)
 8000cb0:	f006 fdb0 	bl	8007814 <iprintf>
    status = CC1201_EnterIdleMode(&status_byte);
 8000cb4:	f107 0316 	add.w	r3, r7, #22
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fd2b 	bl	8000714 <CC1201_EnterIdleMode>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	75fb      	strb	r3, [r7, #23]
    printf("  RX->IDLE: HAL=%d ", status);
 8000cc2:	7dfb      	ldrb	r3, [r7, #23]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4861      	ldr	r0, [pc, #388]	@ (8000e4c <test_state_changes+0x2b0>)
 8000cc8:	f006 fda4 	bl	8007814 <iprintf>
    if (status == HAL_OK) {
 8000ccc:	7dfb      	ldrb	r3, [r7, #23]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d104      	bne.n	8000cdc <test_state_changes+0x140>
        print_cc1201_status(status_byte, "RX_TO_IDLE");
 8000cd2:	7dbb      	ldrb	r3, [r7, #22]
 8000cd4:	495e      	ldr	r1, [pc, #376]	@ (8000e50 <test_state_changes+0x2b4>)
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fef2 	bl	8000ac0 <print_cc1201_status>
    }
    for (volatile uint32_t d = 0; d < 50000; ++d) { __NOP(); }
 8000cdc:	2300      	movs	r3, #0
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	e003      	b.n	8000cea <test_state_changes+0x14e>
 8000ce2:	bf00      	nop
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d9f6      	bls.n	8000ce2 <test_state_changes+0x146>
    
    // Test 4: TX State
    printf("\n4. Testing TX State:\n\r");
 8000cf4:	4857      	ldr	r0, [pc, #348]	@ (8000e54 <test_state_changes+0x2b8>)
 8000cf6:	f006 fd8d 	bl	8007814 <iprintf>
    // Ensure at least one byte is present in TX FIFO to avoid immediate underflow
    CC1201_WriteSingleTxFifo(0xAA, &status_byte);
 8000cfa:	f107 0316 	add.w	r3, r7, #22
 8000cfe:	4619      	mov	r1, r3
 8000d00:	20aa      	movs	r0, #170	@ 0xaa
 8000d02:	f7ff fe51 	bl	80009a8 <CC1201_WriteSingleTxFifo>
    print_cc1201_status(status_byte, "TX_FIFO_PRIME");
 8000d06:	7dbb      	ldrb	r3, [r7, #22]
 8000d08:	4953      	ldr	r1, [pc, #332]	@ (8000e58 <test_state_changes+0x2bc>)
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fed8 	bl	8000ac0 <print_cc1201_status>
    status = CC1201_EnterTxMode(&status_byte);
 8000d10:	f107 0316 	add.w	r3, r7, #22
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fcf0 	bl	80006fa <CC1201_EnterTxMode>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	75fb      	strb	r3, [r7, #23]
    printf("  Enter TX: HAL=%d ", status);
 8000d1e:	7dfb      	ldrb	r3, [r7, #23]
 8000d20:	4619      	mov	r1, r3
 8000d22:	484e      	ldr	r0, [pc, #312]	@ (8000e5c <test_state_changes+0x2c0>)
 8000d24:	f006 fd76 	bl	8007814 <iprintf>
    if (status == HAL_OK) {
 8000d28:	7dfb      	ldrb	r3, [r7, #23]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d11a      	bne.n	8000d64 <test_state_changes+0x1c8>
        print_cc1201_status(status_byte, "TX");
 8000d2e:	7dbb      	ldrb	r3, [r7, #22]
 8000d30:	494b      	ldr	r1, [pc, #300]	@ (8000e60 <test_state_changes+0x2c4>)
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fec4 	bl	8000ac0 <print_cc1201_status>
        for (volatile uint32_t d = 0; d < 50000; ++d) { __NOP(); }
 8000d38:	2300      	movs	r3, #0
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	e003      	b.n	8000d46 <test_state_changes+0x1aa>
 8000d3e:	bf00      	nop
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	3301      	adds	r3, #1
 8000d44:	603b      	str	r3, [r7, #0]
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d9f6      	bls.n	8000d3e <test_state_changes+0x1a2>
        CC1201_ReadMARCState(&marc_state);
 8000d50:	f107 0315 	add.w	r3, r7, #21
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fd61 	bl	800081c <CC1201_ReadMARCState>
        printf("  MARC State in TX: 0x%02X\n\r", marc_state);
 8000d5a:	7d7b      	ldrb	r3, [r7, #21]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4841      	ldr	r0, [pc, #260]	@ (8000e64 <test_state_changes+0x2c8>)
 8000d60:	f006 fd58 	bl	8007814 <iprintf>
    }
    
    // Test 5: Return to IDLE from TX
    printf("\n5. Testing IDLE from TX:\n\r");
 8000d64:	4840      	ldr	r0, [pc, #256]	@ (8000e68 <test_state_changes+0x2cc>)
 8000d66:	f006 fd55 	bl	8007814 <iprintf>
    status = CC1201_EnterIdleMode(&status_byte);
 8000d6a:	f107 0316 	add.w	r3, r7, #22
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fcd0 	bl	8000714 <CC1201_EnterIdleMode>
 8000d74:	4603      	mov	r3, r0
 8000d76:	75fb      	strb	r3, [r7, #23]
    printf("  TX->IDLE: HAL=%d ", status);
 8000d78:	7dfb      	ldrb	r3, [r7, #23]
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	483b      	ldr	r0, [pc, #236]	@ (8000e6c <test_state_changes+0x2d0>)
 8000d7e:	f006 fd49 	bl	8007814 <iprintf>
    if (status == HAL_OK) {
 8000d82:	7dfb      	ldrb	r3, [r7, #23]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d104      	bne.n	8000d92 <test_state_changes+0x1f6>
        print_cc1201_status(status_byte, "TX_TO_IDLE");
 8000d88:	7dbb      	ldrb	r3, [r7, #22]
 8000d8a:	4939      	ldr	r1, [pc, #228]	@ (8000e70 <test_state_changes+0x2d4>)
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fe97 	bl	8000ac0 <print_cc1201_status>
    }
    
    // Test 6: Fast TX On (FSTXON state)
    printf("\n6. Testing Fast TX On (FSTXON):\n\r");
 8000d92:	4838      	ldr	r0, [pc, #224]	@ (8000e74 <test_state_changes+0x2d8>)
 8000d94:	f006 fd3e 	bl	8007814 <iprintf>
    status = CC1201_FastTxOn(&status_byte);
 8000d98:	f107 0316 	add.w	r3, r7, #22
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fc85 	bl	80006ac <CC1201_FastTxOn>
 8000da2:	4603      	mov	r3, r0
 8000da4:	75fb      	strb	r3, [r7, #23]
    printf("  Fast TX On: HAL=%d ", status);
 8000da6:	7dfb      	ldrb	r3, [r7, #23]
 8000da8:	4619      	mov	r1, r3
 8000daa:	4833      	ldr	r0, [pc, #204]	@ (8000e78 <test_state_changes+0x2dc>)
 8000dac:	f006 fd32 	bl	8007814 <iprintf>
    if (status == HAL_OK) {
 8000db0:	7dfb      	ldrb	r3, [r7, #23]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d10e      	bne.n	8000dd4 <test_state_changes+0x238>
        print_cc1201_status(status_byte, "FSTXON");
 8000db6:	7dbb      	ldrb	r3, [r7, #22]
 8000db8:	4930      	ldr	r1, [pc, #192]	@ (8000e7c <test_state_changes+0x2e0>)
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fe80 	bl	8000ac0 <print_cc1201_status>
        CC1201_ReadMARCState(&marc_state);
 8000dc0:	f107 0315 	add.w	r3, r7, #21
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fd29 	bl	800081c <CC1201_ReadMARCState>
        printf("  MARC State in FSTXON: 0x%02X\n\r", marc_state);
 8000dca:	7d7b      	ldrb	r3, [r7, #21]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	482c      	ldr	r0, [pc, #176]	@ (8000e80 <test_state_changes+0x2e4>)
 8000dd0:	f006 fd20 	bl	8007814 <iprintf>
    }
    
    // Return to IDLE
    printf("\n7. Final return to IDLE:\n\r");
 8000dd4:	482b      	ldr	r0, [pc, #172]	@ (8000e84 <test_state_changes+0x2e8>)
 8000dd6:	f006 fd1d 	bl	8007814 <iprintf>
    status = CC1201_EnterIdleMode(&status_byte);
 8000dda:	f107 0316 	add.w	r3, r7, #22
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fc98 	bl	8000714 <CC1201_EnterIdleMode>
 8000de4:	4603      	mov	r3, r0
 8000de6:	75fb      	strb	r3, [r7, #23]
    printf("  Final IDLE: HAL=%d ", status);
 8000de8:	7dfb      	ldrb	r3, [r7, #23]
 8000dea:	4619      	mov	r1, r3
 8000dec:	4826      	ldr	r0, [pc, #152]	@ (8000e88 <test_state_changes+0x2ec>)
 8000dee:	f006 fd11 	bl	8007814 <iprintf>
    if (status == HAL_OK) {
 8000df2:	7dfb      	ldrb	r3, [r7, #23]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d104      	bne.n	8000e02 <test_state_changes+0x266>
        print_cc1201_status(status_byte, "FINAL_IDLE");
 8000df8:	7dbb      	ldrb	r3, [r7, #22]
 8000dfa:	4924      	ldr	r1, [pc, #144]	@ (8000e8c <test_state_changes+0x2f0>)
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fe5f 	bl	8000ac0 <print_cc1201_status>
    }
    
    printf("=== STATE CHANGE TEST COMPLETE ===\n\r");
 8000e02:	4823      	ldr	r0, [pc, #140]	@ (8000e90 <test_state_changes+0x2f4>)
 8000e04:	f006 fd06 	bl	8007814 <iprintf>
}
 8000e08:	bf00      	nop
 8000e0a:	3718      	adds	r7, #24
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	080094a8 	.word	0x080094a8
 8000e14:	080094d4 	.word	0x080094d4
 8000e18:	0800950c 	.word	0x0800950c
 8000e1c:	08009524 	.word	0x08009524
 8000e20:	0800952c 	.word	0x0800952c
 8000e24:	0800954c 	.word	0x0800954c
 8000e28:	08009568 	.word	0x08009568
 8000e2c:	08009580 	.word	0x08009580
 8000e30:	08009588 	.word	0x08009588
 8000e34:	080095a0 	.word	0x080095a0
 8000e38:	080095b8 	.word	0x080095b8
 8000e3c:	080095cc 	.word	0x080095cc
 8000e40:	00030d3f 	.word	0x00030d3f
 8000e44:	080095d0 	.word	0x080095d0
 8000e48:	080095f4 	.word	0x080095f4
 8000e4c:	08009610 	.word	0x08009610
 8000e50:	08009624 	.word	0x08009624
 8000e54:	08009630 	.word	0x08009630
 8000e58:	08009648 	.word	0x08009648
 8000e5c:	08009658 	.word	0x08009658
 8000e60:	0800966c 	.word	0x0800966c
 8000e64:	08009670 	.word	0x08009670
 8000e68:	08009690 	.word	0x08009690
 8000e6c:	080096ac 	.word	0x080096ac
 8000e70:	080096c0 	.word	0x080096c0
 8000e74:	080096cc 	.word	0x080096cc
 8000e78:	080096f0 	.word	0x080096f0
 8000e7c:	08009708 	.word	0x08009708
 8000e80:	08009710 	.word	0x08009710
 8000e84:	08009734 	.word	0x08009734
 8000e88:	08009750 	.word	0x08009750
 8000e8c:	08009768 	.word	0x08009768
 8000e90:	08009774 	.word	0x08009774

08000e94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000e9a:	f000 f9ef 	bl	800127c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9e:	f000 fefd 	bl	8001c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea2:	f000 f86d 	bl	8000f80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea6:	f000 f92d 	bl	8001104 <MX_GPIO_Init>
  MX_SPI4_Init();
 8000eaa:	f000 f8d5 	bl	8001058 <MX_SPI4_Init>
  // Basic hardware initialization completed

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f000 fc9e 	bl	80017f0 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	f000 fc9b 	bl	80017f0 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000eba:	2002      	movs	r0, #2
 8000ebc:	f000 fc98 	bl	80017f0 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f000 fd88 	bl	80019d8 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000ec8:	4b26      	ldr	r3, [pc, #152]	@ (8000f64 <main+0xd0>)
 8000eca:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ece:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000ed0:	4b24      	ldr	r3, [pc, #144]	@ (8000f64 <main+0xd0>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000ed6:	4b23      	ldr	r3, [pc, #140]	@ (8000f64 <main+0xd0>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000edc:	4b21      	ldr	r3, [pc, #132]	@ (8000f64 <main+0xd0>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000ee2:	4b20      	ldr	r3, [pc, #128]	@ (8000f64 <main+0xd0>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000ee8:	491e      	ldr	r1, [pc, #120]	@ (8000f64 <main+0xd0>)
 8000eea:	2000      	movs	r0, #0
 8000eec:	f000 fdf8 	bl	8001ae0 <BSP_COM_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <main+0x66>
  {
    Error_Handler();
 8000ef6:	f000 fa01 	bl	80012fc <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8000efa:	481b      	ldr	r0, [pc, #108]	@ (8000f68 <main+0xd4>)
 8000efc:	f006 fc8a 	bl	8007814 <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8000f00:	2000      	movs	r0, #0
 8000f02:	f000 fceb 	bl	80018dc <BSP_LED_On>
  
  // Now that UART is initialized, start CC1201 testing
  printf("\n=== CC1201 COMMUNICATION SYSTEM STARTUP ===\n\r");
 8000f06:	4819      	ldr	r0, [pc, #100]	@ (8000f6c <main+0xd8>)
 8000f08:	f006 fc84 	bl	8007814 <iprintf>

  uint8_t test_status = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef nop_result = CC1201_Nop(&test_status);
 8000f10:	1dbb      	adds	r3, r7, #6
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fc0c 	bl	8000730 <CC1201_Nop>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	71fb      	strb	r3, [r7, #7]
  
  printf("NOP returned - HAL: %d, Status: 0x%02X\n\r", nop_result, test_status);
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	79ba      	ldrb	r2, [r7, #6]
 8000f20:	4619      	mov	r1, r3
 8000f22:	4813      	ldr	r0, [pc, #76]	@ (8000f70 <main+0xdc>)
 8000f24:	f006 fc76 	bl	8007814 <iprintf>
  
  if (nop_result == HAL_OK) {
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d109      	bne.n	8000f42 <main+0xae>
      printf("Basic CC1201 communication working!\n\r");
 8000f2e:	4811      	ldr	r0, [pc, #68]	@ (8000f74 <main+0xe0>)
 8000f30:	f006 fc70 	bl	8007814 <iprintf>
      BSP_LED_Off(LED_RED);
 8000f34:	2002      	movs	r0, #2
 8000f36:	f000 fcfb 	bl	8001930 <BSP_LED_Off>
      BSP_LED_On(LED_GREEN);
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	f000 fcce 	bl	80018dc <BSP_LED_On>
 8000f40:	e008      	b.n	8000f54 <main+0xc0>
  } else {
      printf("CC1201 communication failed!\n\r");
 8000f42:	480d      	ldr	r0, [pc, #52]	@ (8000f78 <main+0xe4>)
 8000f44:	f006 fc66 	bl	8007814 <iprintf>
      BSP_LED_Off(LED_GREEN);
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f000 fcf1 	bl	8001930 <BSP_LED_Off>
      BSP_LED_On(LED_RED);
 8000f4e:	2002      	movs	r0, #2
 8000f50:	f000 fcc4 	bl	80018dc <BSP_LED_On>
  }

  // Quick path: run state changes test immediately
  printf("\n=== RUNNING QUICK STATE TESTS ===\n\r");
 8000f54:	4809      	ldr	r0, [pc, #36]	@ (8000f7c <main+0xe8>)
 8000f56:	f006 fc5d 	bl	8007814 <iprintf>
  test_state_changes();
 8000f5a:	f7ff fe1f 	bl	8000b9c <test_state_changes>
  // #endif

  /* USER CODE END BSP */
    /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f5e:	bf00      	nop
 8000f60:	e7fd      	b.n	8000f5e <main+0xca>
 8000f62:	bf00      	nop
 8000f64:	240000a4 	.word	0x240000a4
 8000f68:	08009cfc 	.word	0x08009cfc
 8000f6c:	08009d18 	.word	0x08009d18
 8000f70:	08009d48 	.word	0x08009d48
 8000f74:	08009d74 	.word	0x08009d74
 8000f78:	08009d9c 	.word	0x08009d9c
 8000f7c:	08009dbc 	.word	0x08009dbc

08000f80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b09c      	sub	sp, #112	@ 0x70
 8000f84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f8a:	224c      	movs	r2, #76	@ 0x4c
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f006 fc95 	bl	80078be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	2220      	movs	r2, #32
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f006 fc8f 	bl	80078be <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000fa0:	2002      	movs	r0, #2
 8000fa2:	f001 fd49 	bl	8002a38 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	603b      	str	r3, [r7, #0]
 8000faa:	4b29      	ldr	r3, [pc, #164]	@ (8001050 <SystemClock_Config+0xd0>)
 8000fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fae:	4a28      	ldr	r2, [pc, #160]	@ (8001050 <SystemClock_Config+0xd0>)
 8000fb0:	f023 0301 	bic.w	r3, r3, #1
 8000fb4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000fb6:	4b26      	ldr	r3, [pc, #152]	@ (8001050 <SystemClock_Config+0xd0>)
 8000fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	603b      	str	r3, [r7, #0]
 8000fc0:	4b24      	ldr	r3, [pc, #144]	@ (8001054 <SystemClock_Config+0xd4>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000fc8:	4a22      	ldr	r2, [pc, #136]	@ (8001054 <SystemClock_Config+0xd4>)
 8000fca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fce:	6193      	str	r3, [r2, #24]
 8000fd0:	4b20      	ldr	r3, [pc, #128]	@ (8001054 <SystemClock_Config+0xd4>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fd8:	603b      	str	r3, [r7, #0]
 8000fda:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fdc:	bf00      	nop
 8000fde:	4b1d      	ldr	r3, [pc, #116]	@ (8001054 <SystemClock_Config+0xd4>)
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fe6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000fea:	d1f8      	bne.n	8000fde <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fec:	2302      	movs	r3, #2
 8000fee:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ff4:	2340      	movs	r3, #64	@ 0x40
 8000ff6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001000:	4618      	mov	r0, r3
 8001002:	f001 fd53 	bl	8002aac <HAL_RCC_OscConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800100c:	f000 f976 	bl	80012fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001010:	233f      	movs	r3, #63	@ 0x3f
 8001012:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001014:	2300      	movs	r3, #0
 8001016:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800101c:	2300      	movs	r3, #0
 800101e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001024:	2300      	movs	r3, #0
 8001026:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001028:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800102c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800102e:	2300      	movs	r3, #0
 8001030:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	2101      	movs	r1, #1
 8001036:	4618      	mov	r0, r3
 8001038:	f002 f992 	bl	8003360 <HAL_RCC_ClockConfig>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001042:	f000 f95b 	bl	80012fc <Error_Handler>
  }
}
 8001046:	bf00      	nop
 8001048:	3770      	adds	r7, #112	@ 0x70
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	58000400 	.word	0x58000400
 8001054:	58024800 	.word	0x58024800

08001058 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800105c:	4b27      	ldr	r3, [pc, #156]	@ (80010fc <MX_SPI4_Init+0xa4>)
 800105e:	4a28      	ldr	r2, [pc, #160]	@ (8001100 <MX_SPI4_Init+0xa8>)
 8001060:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001062:	4b26      	ldr	r3, [pc, #152]	@ (80010fc <MX_SPI4_Init+0xa4>)
 8001064:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001068:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800106a:	4b24      	ldr	r3, [pc, #144]	@ (80010fc <MX_SPI4_Init+0xa4>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001070:	4b22      	ldr	r3, [pc, #136]	@ (80010fc <MX_SPI4_Init+0xa4>)
 8001072:	2207      	movs	r2, #7
 8001074:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001076:	4b21      	ldr	r3, [pc, #132]	@ (80010fc <MX_SPI4_Init+0xa4>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800107c:	4b1f      	ldr	r3, [pc, #124]	@ (80010fc <MX_SPI4_Init+0xa4>)
 800107e:	2200      	movs	r2, #0
 8001080:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001082:	4b1e      	ldr	r3, [pc, #120]	@ (80010fc <MX_SPI4_Init+0xa4>)
 8001084:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001088:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800108a:	4b1c      	ldr	r3, [pc, #112]	@ (80010fc <MX_SPI4_Init+0xa4>)
 800108c:	2200      	movs	r2, #0
 800108e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001090:	4b1a      	ldr	r3, [pc, #104]	@ (80010fc <MX_SPI4_Init+0xa4>)
 8001092:	2200      	movs	r2, #0
 8001094:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001096:	4b19      	ldr	r3, [pc, #100]	@ (80010fc <MX_SPI4_Init+0xa4>)
 8001098:	2200      	movs	r2, #0
 800109a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800109c:	4b17      	ldr	r3, [pc, #92]	@ (80010fc <MX_SPI4_Init+0xa4>)
 800109e:	2200      	movs	r2, #0
 80010a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80010a2:	4b16      	ldr	r3, [pc, #88]	@ (80010fc <MX_SPI4_Init+0xa4>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010a8:	4b14      	ldr	r3, [pc, #80]	@ (80010fc <MX_SPI4_Init+0xa4>)
 80010aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010ae:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80010b0:	4b12      	ldr	r3, [pc, #72]	@ (80010fc <MX_SPI4_Init+0xa4>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80010b6:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <MX_SPI4_Init+0xa4>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010bc:	4b0f      	ldr	r3, [pc, #60]	@ (80010fc <MX_SPI4_Init+0xa4>)
 80010be:	2200      	movs	r2, #0
 80010c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80010c2:	4b0e      	ldr	r3, [pc, #56]	@ (80010fc <MX_SPI4_Init+0xa4>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80010c8:	4b0c      	ldr	r3, [pc, #48]	@ (80010fc <MX_SPI4_Init+0xa4>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80010ce:	4b0b      	ldr	r3, [pc, #44]	@ (80010fc <MX_SPI4_Init+0xa4>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80010d4:	4b09      	ldr	r3, [pc, #36]	@ (80010fc <MX_SPI4_Init+0xa4>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80010da:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <MX_SPI4_Init+0xa4>)
 80010dc:	2200      	movs	r2, #0
 80010de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80010e0:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <MX_SPI4_Init+0xa4>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80010e6:	4805      	ldr	r0, [pc, #20]	@ (80010fc <MX_SPI4_Init+0xa4>)
 80010e8:	f004 faf2 	bl	80056d0 <HAL_SPI_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 80010f2:	f000 f903 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	240000b8 	.word	0x240000b8
 8001100:	40013400 	.word	0x40013400

08001104 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	@ 0x28
 8001108:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
 8001118:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800111a:	4b37      	ldr	r3, [pc, #220]	@ (80011f8 <MX_GPIO_Init+0xf4>)
 800111c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001120:	4a35      	ldr	r2, [pc, #212]	@ (80011f8 <MX_GPIO_Init+0xf4>)
 8001122:	f043 0304 	orr.w	r3, r3, #4
 8001126:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800112a:	4b33      	ldr	r3, [pc, #204]	@ (80011f8 <MX_GPIO_Init+0xf4>)
 800112c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001130:	f003 0304 	and.w	r3, r3, #4
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001138:	4b2f      	ldr	r3, [pc, #188]	@ (80011f8 <MX_GPIO_Init+0xf4>)
 800113a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800113e:	4a2e      	ldr	r2, [pc, #184]	@ (80011f8 <MX_GPIO_Init+0xf4>)
 8001140:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001144:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001148:	4b2b      	ldr	r3, [pc, #172]	@ (80011f8 <MX_GPIO_Init+0xf4>)
 800114a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800114e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001156:	4b28      	ldr	r3, [pc, #160]	@ (80011f8 <MX_GPIO_Init+0xf4>)
 8001158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800115c:	4a26      	ldr	r2, [pc, #152]	@ (80011f8 <MX_GPIO_Init+0xf4>)
 800115e:	f043 0310 	orr.w	r3, r3, #16
 8001162:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001166:	4b24      	ldr	r3, [pc, #144]	@ (80011f8 <MX_GPIO_Init+0xf4>)
 8001168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800116c:	f003 0310 	and.w	r3, r3, #16
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001174:	4b20      	ldr	r3, [pc, #128]	@ (80011f8 <MX_GPIO_Init+0xf4>)
 8001176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800117a:	4a1f      	ldr	r2, [pc, #124]	@ (80011f8 <MX_GPIO_Init+0xf4>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001184:	4b1c      	ldr	r3, [pc, #112]	@ (80011f8 <MX_GPIO_Init+0xf4>)
 8001186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001192:	4b19      	ldr	r3, [pc, #100]	@ (80011f8 <MX_GPIO_Init+0xf4>)
 8001194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001198:	4a17      	ldr	r2, [pc, #92]	@ (80011f8 <MX_GPIO_Init+0xf4>)
 800119a:	f043 0308 	orr.w	r3, r3, #8
 800119e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011a2:	4b15      	ldr	r3, [pc, #84]	@ (80011f8 <MX_GPIO_Init+0xf4>)
 80011a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a8:	f003 0308 	and.w	r3, r3, #8
 80011ac:	603b      	str	r3, [r7, #0]
 80011ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PD5 (CC1201 Interrupt) */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011b0:	2320      	movs	r3, #32
 80011b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011b4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4619      	mov	r1, r3
 80011c4:	480d      	ldr	r0, [pc, #52]	@ (80011fc <MX_GPIO_Init+0xf8>)
 80011c6:	f001 fa39 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 (CC1201 Reset) */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011ca:	2310      	movs	r3, #16
 80011cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	4619      	mov	r1, r3
 80011e0:	4806      	ldr	r0, [pc, #24]	@ (80011fc <MX_GPIO_Init+0xf8>)
 80011e2:	f001 fa2b 	bl	800263c <HAL_GPIO_Init>
  
  // Set reset pin HIGH (inactive) by default
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 80011e6:	2201      	movs	r2, #1
 80011e8:	2110      	movs	r1, #16
 80011ea:	4804      	ldr	r0, [pc, #16]	@ (80011fc <MX_GPIO_Init+0xf8>)
 80011ec:	f001 fbd6 	bl	800299c <HAL_GPIO_WritePin>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011f0:	bf00      	nop
 80011f2:	3728      	adds	r7, #40	@ 0x28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	58024400 	.word	0x58024400
 80011fc:	58020c00 	.word	0x58020c00

08001200 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_5)
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	2b20      	cmp	r3, #32
 800120e:	d129      	bne.n	8001264 <HAL_GPIO_EXTI_Callback+0x64>
    {
        // Handle CC1201 interrupt
        printf("CC1201 Interrupt Triggered!\n\r");
 8001210:	4816      	ldr	r0, [pc, #88]	@ (800126c <HAL_GPIO_EXTI_Callback+0x6c>)
 8001212:	f006 faff 	bl	8007814 <iprintf>
        
        // Read MARC state to see what caused the interrupt
        uint8_t marc_state = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	73fb      	strb	r3, [r7, #15]
        if (CC1201_ReadMARCState(&marc_state) == HAL_OK) {
 800121a:	f107 030f 	add.w	r3, r7, #15
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff fafc 	bl	800081c <CC1201_ReadMARCState>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d104      	bne.n	8001234 <HAL_GPIO_EXTI_Callback+0x34>
            printf("MARC State during interrupt: 0x%02X\n\r", marc_state);
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	4619      	mov	r1, r3
 800122e:	4810      	ldr	r0, [pc, #64]	@ (8001270 <HAL_GPIO_EXTI_Callback+0x70>)
 8001230:	f006 faf0 	bl	8007814 <iprintf>
        }
        
        // Check if there are bytes in RX FIFO
        uint8_t rx_bytes = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	73bb      	strb	r3, [r7, #14]
        if (CC1201_GetNumRXBytes(&rx_bytes) == HAL_OK) {
 8001238:	f107 030e 	add.w	r3, r7, #14
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff fafb 	bl	8000838 <CC1201_GetNumRXBytes>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d10a      	bne.n	800125e <HAL_GPIO_EXTI_Callback+0x5e>
            printf("RX Bytes available: %d\n\r", rx_bytes);
 8001248:	7bbb      	ldrb	r3, [r7, #14]
 800124a:	4619      	mov	r1, r3
 800124c:	4809      	ldr	r0, [pc, #36]	@ (8001274 <HAL_GPIO_EXTI_Callback+0x74>)
 800124e:	f006 fae1 	bl	8007814 <iprintf>
            if (rx_bytes > 0) {
 8001252:	7bbb      	ldrb	r3, [r7, #14]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d002      	beq.n	800125e <HAL_GPIO_EXTI_Callback+0x5e>
                // Could read FIFO data here if needed
                printf("Data received in RX FIFO!\n\r");
 8001258:	4807      	ldr	r0, [pc, #28]	@ (8001278 <HAL_GPIO_EXTI_Callback+0x78>)
 800125a:	f006 fadb 	bl	8007814 <iprintf>
            }
        }
        
        // Toggle LED to indicate interrupt
        BSP_LED_Toggle(LED_GREEN);
 800125e:	2000      	movs	r0, #0
 8001260:	f000 fb90 	bl	8001984 <BSP_LED_Toggle>
    }
}
 8001264:	bf00      	nop
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	08009de4 	.word	0x08009de4
 8001270:	08009e04 	.word	0x08009e04
 8001274:	08009e2c 	.word	0x08009e2c
 8001278:	08009e48 	.word	0x08009e48

0800127c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001282:	463b      	mov	r3, r7
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800128e:	f000 feb3 	bl	8001ff8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001292:	2301      	movs	r3, #1
 8001294:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001296:	2300      	movs	r3, #0
 8001298:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800129e:	231f      	movs	r3, #31
 80012a0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80012a2:	2387      	movs	r3, #135	@ 0x87
 80012a4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80012aa:	2300      	movs	r3, #0
 80012ac:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80012ae:	2301      	movs	r3, #1
 80012b0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80012b2:	2301      	movs	r3, #1
 80012b4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80012be:	463b      	mov	r3, r7
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 fed1 	bl	8002068 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80012c6:	2004      	movs	r0, #4
 80012c8:	f000 feae 	bl	8002028 <HAL_MPU_Enable>

}
 80012cc:	bf00      	nop
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d102      	bne.n	80012ea <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 80012e4:	4b04      	ldr	r3, [pc, #16]	@ (80012f8 <BSP_PB_Callback+0x24>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	601a      	str	r2, [r3, #0]
  }
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	240000b4 	.word	0x240000b4

080012fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001300:	b672      	cpsid	i
}
 8001302:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <Error_Handler+0x8>

08001308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130e:	4b0a      	ldr	r3, [pc, #40]	@ (8001338 <HAL_MspInit+0x30>)
 8001310:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001314:	4a08      	ldr	r2, [pc, #32]	@ (8001338 <HAL_MspInit+0x30>)
 8001316:	f043 0302 	orr.w	r3, r3, #2
 800131a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800131e:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <HAL_MspInit+0x30>)
 8001320:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	58024400 	.word	0x58024400

0800133c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b0ba      	sub	sp, #232	@ 0xe8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001354:	f107 0310 	add.w	r3, r7, #16
 8001358:	22c0      	movs	r2, #192	@ 0xc0
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f006 faae 	bl	80078be <memset>
  if(hspi->Instance==SPI4)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a37      	ldr	r2, [pc, #220]	@ (8001444 <HAL_SPI_MspInit+0x108>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d166      	bne.n	800143a <HAL_SPI_MspInit+0xfe>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 800136c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001370:	f04f 0300 	mov.w	r3, #0
 8001374:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001378:	2300      	movs	r3, #0
 800137a:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800137c:	f107 0310 	add.w	r3, r7, #16
 8001380:	4618      	mov	r0, r3
 8001382:	f002 fb79 	bl	8003a78 <HAL_RCCEx_PeriphCLKConfig>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800138c:	f7ff ffb6 	bl	80012fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001390:	4b2d      	ldr	r3, [pc, #180]	@ (8001448 <HAL_SPI_MspInit+0x10c>)
 8001392:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001396:	4a2c      	ldr	r2, [pc, #176]	@ (8001448 <HAL_SPI_MspInit+0x10c>)
 8001398:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800139c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80013a0:	4b29      	ldr	r3, [pc, #164]	@ (8001448 <HAL_SPI_MspInit+0x10c>)
 80013a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80013a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ae:	4b26      	ldr	r3, [pc, #152]	@ (8001448 <HAL_SPI_MspInit+0x10c>)
 80013b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013b4:	4a24      	ldr	r2, [pc, #144]	@ (8001448 <HAL_SPI_MspInit+0x10c>)
 80013b6:	f043 0310 	orr.w	r3, r3, #16
 80013ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013be:	4b22      	ldr	r3, [pc, #136]	@ (8001448 <HAL_SPI_MspInit+0x10c>)
 80013c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c4:	f003 0310 	and.w	r3, r3, #16
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	68bb      	ldr	r3, [r7, #8]
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    
    // Configure SPI pins (SCK, MISO, MOSI) 
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80013cc:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80013d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d4:	2302      	movs	r3, #2
 80013d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;  // Increased speed
 80013e0:	2302      	movs	r3, #2
 80013e2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80013e6:	2305      	movs	r3, #5
 80013e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013ec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013f0:	4619      	mov	r1, r3
 80013f2:	4816      	ldr	r0, [pc, #88]	@ (800144c <HAL_SPI_MspInit+0x110>)
 80013f4:	f001 f922 	bl	800263c <HAL_GPIO_Init>
    
    // Configure PE11 as manual CS (GPIO output)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80013f8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80013fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001400:	2301      	movs	r3, #1
 8001402:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800140c:	2302      	movs	r3, #2
 800140e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001412:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001416:	4619      	mov	r1, r3
 8001418:	480c      	ldr	r0, [pc, #48]	@ (800144c <HAL_SPI_MspInit+0x110>)
 800141a:	f001 f90f 	bl	800263c <HAL_GPIO_Init>
    
    // Set CS high (inactive) by default
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 800141e:	2201      	movs	r2, #1
 8001420:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001424:	4809      	ldr	r0, [pc, #36]	@ (800144c <HAL_SPI_MspInit+0x110>)
 8001426:	f001 fab9 	bl	800299c <HAL_GPIO_WritePin>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	2100      	movs	r1, #0
 800142e:	2054      	movs	r0, #84	@ 0x54
 8001430:	f000 fdad 	bl	8001f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001434:	2054      	movs	r0, #84	@ 0x54
 8001436:	f000 fdc4 	bl	8001fc2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI4_MspInit 1 */

  }

}
 800143a:	bf00      	nop
 800143c:	37e8      	adds	r7, #232	@ 0xe8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40013400 	.word	0x40013400
 8001448:	58024400 	.word	0x58024400
 800144c:	58021000 	.word	0x58021000

08001450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <NMI_Handler+0x4>

08001458 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <HardFault_Handler+0x4>

08001460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001464:	bf00      	nop
 8001466:	e7fd      	b.n	8001464 <MemManage_Handler+0x4>

08001468 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800146c:	bf00      	nop
 800146e:	e7fd      	b.n	800146c <BusFault_Handler+0x4>

08001470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001474:	bf00      	nop
 8001476:	e7fd      	b.n	8001474 <UsageFault_Handler+0x4>

08001478 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a6:	f000 fc6b 	bl	8001d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}

080014ae <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80014b2:	2000      	movs	r0, #0
 80014b4:	f000 fb02 	bl	8001abc <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}

080014bc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80014c0:	2020      	movs	r0, #32
 80014c2:	f001 fa9e 	bl	8002a02 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80014d0:	4802      	ldr	r0, [pc, #8]	@ (80014dc <SPI4_IRQHandler+0x10>)
 80014d2:	f004 fd5b 	bl	8005f8c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	240000b8 	.word	0x240000b8

080014e0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	e00a      	b.n	8001508 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014f2:	f3af 8000 	nop.w
 80014f6:	4601      	mov	r1, r0
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	1c5a      	adds	r2, r3, #1
 80014fc:	60ba      	str	r2, [r7, #8]
 80014fe:	b2ca      	uxtb	r2, r1
 8001500:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	3301      	adds	r3, #1
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	697a      	ldr	r2, [r7, #20]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	429a      	cmp	r2, r3
 800150e:	dbf0      	blt.n	80014f2 <_read+0x12>
  }

  return len;
 8001510:	687b      	ldr	r3, [r7, #4]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b086      	sub	sp, #24
 800151e:	af00      	add	r7, sp, #0
 8001520:	60f8      	str	r0, [r7, #12]
 8001522:	60b9      	str	r1, [r7, #8]
 8001524:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
 800152a:	e009      	b.n	8001540 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	1c5a      	adds	r2, r3, #1
 8001530:	60ba      	str	r2, [r7, #8]
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f000 fb35 	bl	8001ba4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	3301      	adds	r3, #1
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	429a      	cmp	r2, r3
 8001546:	dbf1      	blt.n	800152c <_write+0x12>
  }
  return len;
 8001548:	687b      	ldr	r3, [r7, #4]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <_close>:

int _close(int file)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800155a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800157a:	605a      	str	r2, [r3, #4]
  return 0;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <_isatty>:

int _isatty(int file)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001592:	2301      	movs	r3, #1
}
 8001594:	4618      	mov	r0, r3
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3714      	adds	r7, #20
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
	...

080015bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015c4:	4a14      	ldr	r2, [pc, #80]	@ (8001618 <_sbrk+0x5c>)
 80015c6:	4b15      	ldr	r3, [pc, #84]	@ (800161c <_sbrk+0x60>)
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d0:	4b13      	ldr	r3, [pc, #76]	@ (8001620 <_sbrk+0x64>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d102      	bne.n	80015de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015d8:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <_sbrk+0x64>)
 80015da:	4a12      	ldr	r2, [pc, #72]	@ (8001624 <_sbrk+0x68>)
 80015dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015de:	4b10      	ldr	r3, [pc, #64]	@ (8001620 <_sbrk+0x64>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d207      	bcs.n	80015fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015ec:	f006 f9b6 	bl	800795c <__errno>
 80015f0:	4603      	mov	r3, r0
 80015f2:	220c      	movs	r2, #12
 80015f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015f6:	f04f 33ff 	mov.w	r3, #4294967295
 80015fa:	e009      	b.n	8001610 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015fc:	4b08      	ldr	r3, [pc, #32]	@ (8001620 <_sbrk+0x64>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001602:	4b07      	ldr	r3, [pc, #28]	@ (8001620 <_sbrk+0x64>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	4a05      	ldr	r2, [pc, #20]	@ (8001620 <_sbrk+0x64>)
 800160c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800160e:	68fb      	ldr	r3, [r7, #12]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	24080000 	.word	0x24080000
 800161c:	00000400 	.word	0x00000400
 8001620:	24000140 	.word	0x24000140
 8001624:	24000338 	.word	0x24000338

08001628 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800162c:	4b43      	ldr	r3, [pc, #268]	@ (800173c <SystemInit+0x114>)
 800162e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001632:	4a42      	ldr	r2, [pc, #264]	@ (800173c <SystemInit+0x114>)
 8001634:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001638:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800163c:	4b40      	ldr	r3, [pc, #256]	@ (8001740 <SystemInit+0x118>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 030f 	and.w	r3, r3, #15
 8001644:	2b06      	cmp	r3, #6
 8001646:	d807      	bhi.n	8001658 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001648:	4b3d      	ldr	r3, [pc, #244]	@ (8001740 <SystemInit+0x118>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f023 030f 	bic.w	r3, r3, #15
 8001650:	4a3b      	ldr	r2, [pc, #236]	@ (8001740 <SystemInit+0x118>)
 8001652:	f043 0307 	orr.w	r3, r3, #7
 8001656:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001658:	4b3a      	ldr	r3, [pc, #232]	@ (8001744 <SystemInit+0x11c>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a39      	ldr	r2, [pc, #228]	@ (8001744 <SystemInit+0x11c>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001664:	4b37      	ldr	r3, [pc, #220]	@ (8001744 <SystemInit+0x11c>)
 8001666:	2200      	movs	r2, #0
 8001668:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800166a:	4b36      	ldr	r3, [pc, #216]	@ (8001744 <SystemInit+0x11c>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	4935      	ldr	r1, [pc, #212]	@ (8001744 <SystemInit+0x11c>)
 8001670:	4b35      	ldr	r3, [pc, #212]	@ (8001748 <SystemInit+0x120>)
 8001672:	4013      	ands	r3, r2
 8001674:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001676:	4b32      	ldr	r3, [pc, #200]	@ (8001740 <SystemInit+0x118>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0308 	and.w	r3, r3, #8
 800167e:	2b00      	cmp	r3, #0
 8001680:	d007      	beq.n	8001692 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001682:	4b2f      	ldr	r3, [pc, #188]	@ (8001740 <SystemInit+0x118>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f023 030f 	bic.w	r3, r3, #15
 800168a:	4a2d      	ldr	r2, [pc, #180]	@ (8001740 <SystemInit+0x118>)
 800168c:	f043 0307 	orr.w	r3, r3, #7
 8001690:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001692:	4b2c      	ldr	r3, [pc, #176]	@ (8001744 <SystemInit+0x11c>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001698:	4b2a      	ldr	r3, [pc, #168]	@ (8001744 <SystemInit+0x11c>)
 800169a:	2200      	movs	r2, #0
 800169c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800169e:	4b29      	ldr	r3, [pc, #164]	@ (8001744 <SystemInit+0x11c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80016a4:	4b27      	ldr	r3, [pc, #156]	@ (8001744 <SystemInit+0x11c>)
 80016a6:	4a29      	ldr	r2, [pc, #164]	@ (800174c <SystemInit+0x124>)
 80016a8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80016aa:	4b26      	ldr	r3, [pc, #152]	@ (8001744 <SystemInit+0x11c>)
 80016ac:	4a28      	ldr	r2, [pc, #160]	@ (8001750 <SystemInit+0x128>)
 80016ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80016b0:	4b24      	ldr	r3, [pc, #144]	@ (8001744 <SystemInit+0x11c>)
 80016b2:	4a28      	ldr	r2, [pc, #160]	@ (8001754 <SystemInit+0x12c>)
 80016b4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80016b6:	4b23      	ldr	r3, [pc, #140]	@ (8001744 <SystemInit+0x11c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80016bc:	4b21      	ldr	r3, [pc, #132]	@ (8001744 <SystemInit+0x11c>)
 80016be:	4a25      	ldr	r2, [pc, #148]	@ (8001754 <SystemInit+0x12c>)
 80016c0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80016c2:	4b20      	ldr	r3, [pc, #128]	@ (8001744 <SystemInit+0x11c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80016c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001744 <SystemInit+0x11c>)
 80016ca:	4a22      	ldr	r2, [pc, #136]	@ (8001754 <SystemInit+0x12c>)
 80016cc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80016ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001744 <SystemInit+0x11c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001744 <SystemInit+0x11c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a1a      	ldr	r2, [pc, #104]	@ (8001744 <SystemInit+0x11c>)
 80016da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016de:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80016e0:	4b18      	ldr	r3, [pc, #96]	@ (8001744 <SystemInit+0x11c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80016e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001758 <SystemInit+0x130>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	4b1c      	ldr	r3, [pc, #112]	@ (800175c <SystemInit+0x134>)
 80016ec:	4013      	ands	r3, r2
 80016ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80016f2:	d202      	bcs.n	80016fa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80016f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001760 <SystemInit+0x138>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80016fa:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <SystemInit+0x11c>)
 80016fc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001700:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d113      	bne.n	8001730 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001708:	4b0e      	ldr	r3, [pc, #56]	@ (8001744 <SystemInit+0x11c>)
 800170a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800170e:	4a0d      	ldr	r2, [pc, #52]	@ (8001744 <SystemInit+0x11c>)
 8001710:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001714:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001718:	4b12      	ldr	r3, [pc, #72]	@ (8001764 <SystemInit+0x13c>)
 800171a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800171e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001720:	4b08      	ldr	r3, [pc, #32]	@ (8001744 <SystemInit+0x11c>)
 8001722:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001726:	4a07      	ldr	r2, [pc, #28]	@ (8001744 <SystemInit+0x11c>)
 8001728:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800172c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000ed00 	.word	0xe000ed00
 8001740:	52002000 	.word	0x52002000
 8001744:	58024400 	.word	0x58024400
 8001748:	eaf6ed7f 	.word	0xeaf6ed7f
 800174c:	02020200 	.word	0x02020200
 8001750:	01ff0000 	.word	0x01ff0000
 8001754:	01010280 	.word	0x01010280
 8001758:	5c001000 	.word	0x5c001000
 800175c:	ffff0000 	.word	0xffff0000
 8001760:	51008108 	.word	0x51008108
 8001764:	52004000 	.word	0x52004000

08001768 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800176c:	4b09      	ldr	r3, [pc, #36]	@ (8001794 <ExitRun0Mode+0x2c>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	4a08      	ldr	r2, [pc, #32]	@ (8001794 <ExitRun0Mode+0x2c>)
 8001772:	f043 0302 	orr.w	r3, r3, #2
 8001776:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001778:	bf00      	nop
 800177a:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <ExitRun0Mode+0x2c>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0f9      	beq.n	800177a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001786:	bf00      	nop
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	58024800 	.word	0x58024800

08001798 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001798:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80017d4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800179c:	f7ff ffe4 	bl	8001768 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80017a0:	f7ff ff42 	bl	8001628 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a4:	480c      	ldr	r0, [pc, #48]	@ (80017d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017a6:	490d      	ldr	r1, [pc, #52]	@ (80017dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017a8:	4a0d      	ldr	r2, [pc, #52]	@ (80017e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017ac:	e002      	b.n	80017b4 <LoopCopyDataInit>

080017ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b2:	3304      	adds	r3, #4

080017b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b8:	d3f9      	bcc.n	80017ae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ba:	4a0a      	ldr	r2, [pc, #40]	@ (80017e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017bc:	4c0a      	ldr	r4, [pc, #40]	@ (80017e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c0:	e001      	b.n	80017c6 <LoopFillZerobss>

080017c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c4:	3204      	adds	r2, #4

080017c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c8:	d3fb      	bcc.n	80017c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ca:	f006 f8cd 	bl	8007968 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ce:	f7ff fb61 	bl	8000e94 <main>
  bx  lr
 80017d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017d4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80017d8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017dc:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 80017e0:	08009edc 	.word	0x08009edc
  ldr r2, =_sbss
 80017e4:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 80017e8:	24000334 	.word	0x24000334

080017ec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017ec:	e7fe      	b.n	80017ec <ADC3_IRQHandler>
	...

080017f0 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08c      	sub	sp, #48	@ 0x30
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d009      	beq.n	8001818 <BSP_LED_Init+0x28>
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d006      	beq.n	8001818 <BSP_LED_Init+0x28>
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	2b02      	cmp	r3, #2
 800180e:	d003      	beq.n	8001818 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001810:	f06f 0301 	mvn.w	r3, #1
 8001814:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001816:	e055      	b.n	80018c4 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10f      	bne.n	800183e <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 800181e:	4b2c      	ldr	r3, [pc, #176]	@ (80018d0 <BSP_LED_Init+0xe0>)
 8001820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001824:	4a2a      	ldr	r2, [pc, #168]	@ (80018d0 <BSP_LED_Init+0xe0>)
 8001826:	f043 0302 	orr.w	r3, r3, #2
 800182a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800182e:	4b28      	ldr	r3, [pc, #160]	@ (80018d0 <BSP_LED_Init+0xe0>)
 8001830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	e021      	b.n	8001882 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d10f      	bne.n	8001864 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001844:	4b22      	ldr	r3, [pc, #136]	@ (80018d0 <BSP_LED_Init+0xe0>)
 8001846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800184a:	4a21      	ldr	r2, [pc, #132]	@ (80018d0 <BSP_LED_Init+0xe0>)
 800184c:	f043 0310 	orr.w	r3, r3, #16
 8001850:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001854:	4b1e      	ldr	r3, [pc, #120]	@ (80018d0 <BSP_LED_Init+0xe0>)
 8001856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800185a:	f003 0310 	and.w	r3, r3, #16
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	e00e      	b.n	8001882 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001864:	4b1a      	ldr	r3, [pc, #104]	@ (80018d0 <BSP_LED_Init+0xe0>)
 8001866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800186a:	4a19      	ldr	r2, [pc, #100]	@ (80018d0 <BSP_LED_Init+0xe0>)
 800186c:	f043 0302 	orr.w	r3, r3, #2
 8001870:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001874:	4b16      	ldr	r3, [pc, #88]	@ (80018d0 <BSP_LED_Init+0xe0>)
 8001876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	4a13      	ldr	r2, [pc, #76]	@ (80018d4 <BSP_LED_Init+0xe4>)
 8001886:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800188a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800188c:	2301      	movs	r3, #1
 800188e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001894:	2303      	movs	r3, #3
 8001896:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	4a0f      	ldr	r2, [pc, #60]	@ (80018d8 <BSP_LED_Init+0xe8>)
 800189c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a0:	f107 0218 	add.w	r2, r7, #24
 80018a4:	4611      	mov	r1, r2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 fec8 	bl	800263c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	4a0a      	ldr	r2, [pc, #40]	@ (80018d8 <BSP_LED_Init+0xe8>)
 80018b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	4a07      	ldr	r2, [pc, #28]	@ (80018d4 <BSP_LED_Init+0xe4>)
 80018b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018bc:	2200      	movs	r2, #0
 80018be:	4619      	mov	r1, r3
 80018c0:	f001 f86c 	bl	800299c <HAL_GPIO_WritePin>
  }

  return ret;
 80018c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3730      	adds	r7, #48	@ 0x30
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	58024400 	.word	0x58024400
 80018d4:	08009e74 	.word	0x08009e74
 80018d8:	2400000c 	.word	0x2400000c

080018dc <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d009      	beq.n	8001904 <BSP_LED_On+0x28>
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d006      	beq.n	8001904 <BSP_LED_On+0x28>
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d003      	beq.n	8001904 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80018fc:	f06f 0301 	mvn.w	r3, #1
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	e00b      	b.n	800191c <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	4a08      	ldr	r2, [pc, #32]	@ (8001928 <BSP_LED_On+0x4c>)
 8001908:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	4a07      	ldr	r2, [pc, #28]	@ (800192c <BSP_LED_On+0x50>)
 8001910:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001914:	2201      	movs	r2, #1
 8001916:	4619      	mov	r1, r3
 8001918:	f001 f840 	bl	800299c <HAL_GPIO_WritePin>
  }

  return ret;
 800191c:	68fb      	ldr	r3, [r7, #12]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	2400000c 	.word	0x2400000c
 800192c:	08009e74 	.word	0x08009e74

08001930 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d009      	beq.n	8001958 <BSP_LED_Off+0x28>
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d006      	beq.n	8001958 <BSP_LED_Off+0x28>
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	2b02      	cmp	r3, #2
 800194e:	d003      	beq.n	8001958 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001950:	f06f 0301 	mvn.w	r3, #1
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	e00b      	b.n	8001970 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	4a08      	ldr	r2, [pc, #32]	@ (800197c <BSP_LED_Off+0x4c>)
 800195c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	4a07      	ldr	r2, [pc, #28]	@ (8001980 <BSP_LED_Off+0x50>)
 8001964:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001968:	2200      	movs	r2, #0
 800196a:	4619      	mov	r1, r3
 800196c:	f001 f816 	bl	800299c <HAL_GPIO_WritePin>
  }

  return ret;
 8001970:	68fb      	ldr	r3, [r7, #12]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	2400000c 	.word	0x2400000c
 8001980:	08009e74 	.word	0x08009e74

08001984 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d009      	beq.n	80019ac <BSP_LED_Toggle+0x28>
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d006      	beq.n	80019ac <BSP_LED_Toggle+0x28>
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d003      	beq.n	80019ac <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80019a4:	f06f 0301 	mvn.w	r3, #1
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	e00b      	b.n	80019c4 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	4a08      	ldr	r2, [pc, #32]	@ (80019d0 <BSP_LED_Toggle+0x4c>)
 80019b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	4907      	ldr	r1, [pc, #28]	@ (80019d4 <BSP_LED_Toggle+0x50>)
 80019b8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80019bc:	4619      	mov	r1, r3
 80019be:	4610      	mov	r0, r2
 80019c0:	f001 f805 	bl	80029ce <HAL_GPIO_TogglePin>
  }

  return ret;
 80019c4:	68fb      	ldr	r3, [r7, #12]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	2400000c 	.word	0x2400000c
 80019d4:	08009e74 	.word	0x08009e74

080019d8 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b088      	sub	sp, #32
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	460a      	mov	r2, r1
 80019e2:	71fb      	strb	r3, [r7, #7]
 80019e4:	4613      	mov	r3, r2
 80019e6:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80019e8:	4b2e      	ldr	r3, [pc, #184]	@ (8001aa4 <BSP_PB_Init+0xcc>)
 80019ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019ee:	4a2d      	ldr	r2, [pc, #180]	@ (8001aa4 <BSP_PB_Init+0xcc>)
 80019f0:	f043 0304 	orr.w	r3, r3, #4
 80019f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019f8:	4b2a      	ldr	r3, [pc, #168]	@ (8001aa4 <BSP_PB_Init+0xcc>)
 80019fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019fe:	f003 0304 	and.w	r3, r3, #4
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001a06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a0a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a10:	2302      	movs	r3, #2
 8001a12:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001a14:	79bb      	ldrb	r3, [r7, #6]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10c      	bne.n	8001a34 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	4a21      	ldr	r2, [pc, #132]	@ (8001aa8 <BSP_PB_Init+0xd0>)
 8001a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a26:	f107 020c 	add.w	r2, r7, #12
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f000 fe05 	bl	800263c <HAL_GPIO_Init>
 8001a32:	e031      	b.n	8001a98 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001a34:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a38:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	4a1a      	ldr	r2, [pc, #104]	@ (8001aa8 <BSP_PB_Init+0xd0>)
 8001a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a42:	f107 020c 	add.w	r2, r7, #12
 8001a46:	4611      	mov	r1, r2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f000 fdf7 	bl	800263c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	4a16      	ldr	r2, [pc, #88]	@ (8001aac <BSP_PB_Init+0xd4>)
 8001a54:	441a      	add	r2, r3
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	4915      	ldr	r1, [pc, #84]	@ (8001ab0 <BSP_PB_Init+0xd8>)
 8001a5a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4610      	mov	r0, r2
 8001a62:	f000 fda6 	bl	80025b2 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	4a10      	ldr	r2, [pc, #64]	@ (8001aac <BSP_PB_Init+0xd4>)
 8001a6c:	1898      	adds	r0, r3, r2
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	4a10      	ldr	r2, [pc, #64]	@ (8001ab4 <BSP_PB_Init+0xdc>)
 8001a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a76:	461a      	mov	r2, r3
 8001a78:	2100      	movs	r1, #0
 8001a7a:	f000 fd7b 	bl	8002574 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001a7e:	2028      	movs	r0, #40	@ 0x28
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab8 <BSP_PB_Init+0xe0>)
 8001a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	f000 fa7f 	bl	8001f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001a90:	2328      	movs	r3, #40	@ 0x28
 8001a92:	4618      	mov	r0, r3
 8001a94:	f000 fa95 	bl	8001fc2 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3720      	adds	r7, #32
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	58024400 	.word	0x58024400
 8001aa8:	24000018 	.word	0x24000018
 8001aac:	24000144 	.word	0x24000144
 8001ab0:	08009e7c 	.word	0x08009e7c
 8001ab4:	2400001c 	.word	0x2400001c
 8001ab8:	24000020 	.word	0x24000020

08001abc <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	4a04      	ldr	r2, [pc, #16]	@ (8001adc <BSP_PB_IRQHandler+0x20>)
 8001acc:	4413      	add	r3, r2
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 fd84 	bl	80025dc <HAL_EXTI_IRQHandler>
}
 8001ad4:	bf00      	nop
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	24000144 	.word	0x24000144

08001ae0 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	6039      	str	r1, [r7, #0]
 8001aea:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001af6:	f06f 0301 	mvn.w	r3, #1
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	e018      	b.n	8001b30 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	2294      	movs	r2, #148	@ 0x94
 8001b02:	fb02 f303 	mul.w	r3, r2, r3
 8001b06:	4a0d      	ldr	r2, [pc, #52]	@ (8001b3c <BSP_COM_Init+0x5c>)
 8001b08:	4413      	add	r3, r2
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 f86e 	bl	8001bec <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	2294      	movs	r2, #148	@ 0x94
 8001b14:	fb02 f303 	mul.w	r3, r2, r3
 8001b18:	4a08      	ldr	r2, [pc, #32]	@ (8001b3c <BSP_COM_Init+0x5c>)
 8001b1a:	4413      	add	r3, r2
 8001b1c:	6839      	ldr	r1, [r7, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 f80e 	bl	8001b40 <MX_USART3_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d002      	beq.n	8001b30 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001b2a:	f06f 0303 	mvn.w	r3, #3
 8001b2e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001b30:	68fb      	ldr	r3, [r7, #12]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	2400014c 	.word	0x2400014c

08001b40 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001b4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ba0 <MX_USART3_Init+0x60>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	220c      	movs	r2, #12
 8001b5e:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	895b      	ldrh	r3, [r3, #10]
 8001b64:	461a      	mov	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	891b      	ldrh	r3, [r3, #8]
 8001b76:	461a      	mov	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	899b      	ldrh	r3, [r3, #12]
 8001b80:	461a      	mov	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001b8c:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f004 fd0d 	bl	80065ae <HAL_UART_Init>
 8001b94:	4603      	mov	r3, r0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	24000008 	.word	0x24000008

08001ba4 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001bac:	4b09      	ldr	r3, [pc, #36]	@ (8001bd4 <__io_putchar+0x30>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	2394      	movs	r3, #148	@ 0x94
 8001bb4:	fb02 f303 	mul.w	r3, r2, r3
 8001bb8:	4a07      	ldr	r2, [pc, #28]	@ (8001bd8 <__io_putchar+0x34>)
 8001bba:	1898      	adds	r0, r3, r2
 8001bbc:	1d39      	adds	r1, r7, #4
 8001bbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f004 fd4d 	bl	8006662 <HAL_UART_Transmit>
  return ch;
 8001bc8:	687b      	ldr	r3, [r7, #4]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	240001e0 	.word	0x240001e0
 8001bd8:	2400014c 	.word	0x2400014c

08001bdc <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001be0:	2000      	movs	r0, #0
 8001be2:	f7ff fb77 	bl	80012d4 <BSP_PB_Callback>
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08a      	sub	sp, #40	@ 0x28
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001bf4:	4b27      	ldr	r3, [pc, #156]	@ (8001c94 <COM1_MspInit+0xa8>)
 8001bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bfa:	4a26      	ldr	r2, [pc, #152]	@ (8001c94 <COM1_MspInit+0xa8>)
 8001bfc:	f043 0308 	orr.w	r3, r3, #8
 8001c00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c04:	4b23      	ldr	r3, [pc, #140]	@ (8001c94 <COM1_MspInit+0xa8>)
 8001c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	613b      	str	r3, [r7, #16]
 8001c10:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001c12:	4b20      	ldr	r3, [pc, #128]	@ (8001c94 <COM1_MspInit+0xa8>)
 8001c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c18:	4a1e      	ldr	r2, [pc, #120]	@ (8001c94 <COM1_MspInit+0xa8>)
 8001c1a:	f043 0308 	orr.w	r3, r3, #8
 8001c1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c22:	4b1c      	ldr	r3, [pc, #112]	@ (8001c94 <COM1_MspInit+0xa8>)
 8001c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c28:	f003 0308 	and.w	r3, r3, #8
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001c30:	4b18      	ldr	r3, [pc, #96]	@ (8001c94 <COM1_MspInit+0xa8>)
 8001c32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c36:	4a17      	ldr	r2, [pc, #92]	@ (8001c94 <COM1_MspInit+0xa8>)
 8001c38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c3c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c40:	4b14      	ldr	r3, [pc, #80]	@ (8001c94 <COM1_MspInit+0xa8>)
 8001c42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c4a:	60bb      	str	r3, [r7, #8]
 8001c4c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8001c4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c52:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001c54:	2302      	movs	r3, #2
 8001c56:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001c60:	2307      	movs	r3, #7
 8001c62:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	4619      	mov	r1, r3
 8001c6a:	480b      	ldr	r0, [pc, #44]	@ (8001c98 <COM1_MspInit+0xac>)
 8001c6c:	f000 fce6 	bl	800263c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001c70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c74:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001c7a:	2307      	movs	r3, #7
 8001c7c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001c7e:	f107 0314 	add.w	r3, r7, #20
 8001c82:	4619      	mov	r1, r3
 8001c84:	4804      	ldr	r0, [pc, #16]	@ (8001c98 <COM1_MspInit+0xac>)
 8001c86:	f000 fcd9 	bl	800263c <HAL_GPIO_Init>
}
 8001c8a:	bf00      	nop
 8001c8c:	3728      	adds	r7, #40	@ 0x28
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	58024400 	.word	0x58024400
 8001c98:	58020c00 	.word	0x58020c00

08001c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca2:	2003      	movs	r0, #3
 8001ca4:	f000 f968 	bl	8001f78 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ca8:	f001 fd10 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 8001cac:	4602      	mov	r2, r0
 8001cae:	4b15      	ldr	r3, [pc, #84]	@ (8001d04 <HAL_Init+0x68>)
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	0a1b      	lsrs	r3, r3, #8
 8001cb4:	f003 030f 	and.w	r3, r3, #15
 8001cb8:	4913      	ldr	r1, [pc, #76]	@ (8001d08 <HAL_Init+0x6c>)
 8001cba:	5ccb      	ldrb	r3, [r1, r3]
 8001cbc:	f003 031f 	and.w	r3, r3, #31
 8001cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001d04 <HAL_Init+0x68>)
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	4a0e      	ldr	r2, [pc, #56]	@ (8001d08 <HAL_Init+0x6c>)
 8001cd0:	5cd3      	ldrb	r3, [r2, r3]
 8001cd2:	f003 031f 	and.w	r3, r3, #31
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cdc:	4a0b      	ldr	r2, [pc, #44]	@ (8001d0c <HAL_Init+0x70>)
 8001cde:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ce0:	4a0b      	ldr	r2, [pc, #44]	@ (8001d10 <HAL_Init+0x74>)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	f000 f814 	bl	8001d14 <HAL_InitTick>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e002      	b.n	8001cfc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001cf6:	f7ff fb07 	bl	8001308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	58024400 	.word	0x58024400
 8001d08:	08009e64 	.word	0x08009e64
 8001d0c:	24000004 	.word	0x24000004
 8001d10:	24000000 	.word	0x24000000

08001d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001d1c:	4b15      	ldr	r3, [pc, #84]	@ (8001d74 <HAL_InitTick+0x60>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e021      	b.n	8001d6c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d28:	4b13      	ldr	r3, [pc, #76]	@ (8001d78 <HAL_InitTick+0x64>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	4b11      	ldr	r3, [pc, #68]	@ (8001d74 <HAL_InitTick+0x60>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	4619      	mov	r1, r3
 8001d32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f000 f94d 	bl	8001fde <HAL_SYSTICK_Config>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e00e      	b.n	8001d6c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b0f      	cmp	r3, #15
 8001d52:	d80a      	bhi.n	8001d6a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d54:	2200      	movs	r2, #0
 8001d56:	6879      	ldr	r1, [r7, #4]
 8001d58:	f04f 30ff 	mov.w	r0, #4294967295
 8001d5c:	f000 f917 	bl	8001f8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d60:	4a06      	ldr	r2, [pc, #24]	@ (8001d7c <HAL_InitTick+0x68>)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
 8001d68:	e000      	b.n	8001d6c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	24000028 	.word	0x24000028
 8001d78:	24000000 	.word	0x24000000
 8001d7c:	24000024 	.word	0x24000024

08001d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d84:	4b06      	ldr	r3, [pc, #24]	@ (8001da0 <HAL_IncTick+0x20>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <HAL_IncTick+0x24>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4413      	add	r3, r2
 8001d90:	4a04      	ldr	r2, [pc, #16]	@ (8001da4 <HAL_IncTick+0x24>)
 8001d92:	6013      	str	r3, [r2, #0]
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	24000028 	.word	0x24000028
 8001da4:	240001e4 	.word	0x240001e4

08001da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  return uwTick;
 8001dac:	4b03      	ldr	r3, [pc, #12]	@ (8001dbc <HAL_GetTick+0x14>)
 8001dae:	681b      	ldr	r3, [r3, #0]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	240001e4 	.word	0x240001e4

08001dc0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001dc4:	4b03      	ldr	r3, [pc, #12]	@ (8001dd4 <HAL_GetREVID+0x14>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	0c1b      	lsrs	r3, r3, #16
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	5c001000 	.word	0x5c001000

08001dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de8:	4b0b      	ldr	r3, [pc, #44]	@ (8001e18 <__NVIC_SetPriorityGrouping+0x40>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001df4:	4013      	ands	r3, r2
 8001df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e00:	4b06      	ldr	r3, [pc, #24]	@ (8001e1c <__NVIC_SetPriorityGrouping+0x44>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e06:	4a04      	ldr	r2, [pc, #16]	@ (8001e18 <__NVIC_SetPriorityGrouping+0x40>)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	60d3      	str	r3, [r2, #12]
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000ed00 	.word	0xe000ed00
 8001e1c:	05fa0000 	.word	0x05fa0000

08001e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e24:	4b04      	ldr	r3, [pc, #16]	@ (8001e38 <__NVIC_GetPriorityGrouping+0x18>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	0a1b      	lsrs	r3, r3, #8
 8001e2a:	f003 0307 	and.w	r3, r3, #7
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	db0b      	blt.n	8001e66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e4e:	88fb      	ldrh	r3, [r7, #6]
 8001e50:	f003 021f 	and.w	r2, r3, #31
 8001e54:	4907      	ldr	r1, [pc, #28]	@ (8001e74 <__NVIC_EnableIRQ+0x38>)
 8001e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e5a:	095b      	lsrs	r3, r3, #5
 8001e5c:	2001      	movs	r0, #1
 8001e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	e000e100 	.word	0xe000e100

08001e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	6039      	str	r1, [r7, #0]
 8001e82:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	db0a      	blt.n	8001ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	490c      	ldr	r1, [pc, #48]	@ (8001ec4 <__NVIC_SetPriority+0x4c>)
 8001e92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e96:	0112      	lsls	r2, r2, #4
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	440b      	add	r3, r1
 8001e9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ea0:	e00a      	b.n	8001eb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	4908      	ldr	r1, [pc, #32]	@ (8001ec8 <__NVIC_SetPriority+0x50>)
 8001ea8:	88fb      	ldrh	r3, [r7, #6]
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	3b04      	subs	r3, #4
 8001eb0:	0112      	lsls	r2, r2, #4
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	761a      	strb	r2, [r3, #24]
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	e000e100 	.word	0xe000e100
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b089      	sub	sp, #36	@ 0x24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f1c3 0307 	rsb	r3, r3, #7
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	bf28      	it	cs
 8001eea:	2304      	movcs	r3, #4
 8001eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	2b06      	cmp	r3, #6
 8001ef4:	d902      	bls.n	8001efc <NVIC_EncodePriority+0x30>
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	3b03      	subs	r3, #3
 8001efa:	e000      	b.n	8001efe <NVIC_EncodePriority+0x32>
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f00:	f04f 32ff 	mov.w	r2, #4294967295
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43da      	mvns	r2, r3
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	401a      	ands	r2, r3
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f14:	f04f 31ff 	mov.w	r1, #4294967295
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1e:	43d9      	mvns	r1, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f24:	4313      	orrs	r3, r2
         );
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3724      	adds	r7, #36	@ 0x24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
	...

08001f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f44:	d301      	bcc.n	8001f4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f46:	2301      	movs	r3, #1
 8001f48:	e00f      	b.n	8001f6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f74 <SysTick_Config+0x40>)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f52:	210f      	movs	r1, #15
 8001f54:	f04f 30ff 	mov.w	r0, #4294967295
 8001f58:	f7ff ff8e 	bl	8001e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f5c:	4b05      	ldr	r3, [pc, #20]	@ (8001f74 <SysTick_Config+0x40>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f62:	4b04      	ldr	r3, [pc, #16]	@ (8001f74 <SysTick_Config+0x40>)
 8001f64:	2207      	movs	r2, #7
 8001f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	e000e010 	.word	0xe000e010

08001f78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7ff ff29 	bl	8001dd8 <__NVIC_SetPriorityGrouping>
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b086      	sub	sp, #24
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	4603      	mov	r3, r0
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	607a      	str	r2, [r7, #4]
 8001f9a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f9c:	f7ff ff40 	bl	8001e20 <__NVIC_GetPriorityGrouping>
 8001fa0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	68b9      	ldr	r1, [r7, #8]
 8001fa6:	6978      	ldr	r0, [r7, #20]
 8001fa8:	f7ff ff90 	bl	8001ecc <NVIC_EncodePriority>
 8001fac:	4602      	mov	r2, r0
 8001fae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff ff5f 	bl	8001e78 <__NVIC_SetPriority>
}
 8001fba:	bf00      	nop
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	4603      	mov	r3, r0
 8001fca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff33 	bl	8001e3c <__NVIC_EnableIRQ>
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff ffa4 	bl	8001f34 <SysTick_Config>
 8001fec:	4603      	mov	r3, r0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001ffc:	f3bf 8f5f 	dmb	sy
}
 8002000:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002002:	4b07      	ldr	r3, [pc, #28]	@ (8002020 <HAL_MPU_Disable+0x28>)
 8002004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002006:	4a06      	ldr	r2, [pc, #24]	@ (8002020 <HAL_MPU_Disable+0x28>)
 8002008:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800200c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800200e:	4b05      	ldr	r3, [pc, #20]	@ (8002024 <HAL_MPU_Disable+0x2c>)
 8002010:	2200      	movs	r2, #0
 8002012:	605a      	str	r2, [r3, #4]
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	e000ed00 	.word	0xe000ed00
 8002024:	e000ed90 	.word	0xe000ed90

08002028 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002030:	4a0b      	ldr	r2, [pc, #44]	@ (8002060 <HAL_MPU_Enable+0x38>)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800203a:	4b0a      	ldr	r3, [pc, #40]	@ (8002064 <HAL_MPU_Enable+0x3c>)
 800203c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203e:	4a09      	ldr	r2, [pc, #36]	@ (8002064 <HAL_MPU_Enable+0x3c>)
 8002040:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002044:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002046:	f3bf 8f4f 	dsb	sy
}
 800204a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800204c:	f3bf 8f6f 	isb	sy
}
 8002050:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	e000ed90 	.word	0xe000ed90
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	785a      	ldrb	r2, [r3, #1]
 8002074:	4b1b      	ldr	r3, [pc, #108]	@ (80020e4 <HAL_MPU_ConfigRegion+0x7c>)
 8002076:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002078:	4b1a      	ldr	r3, [pc, #104]	@ (80020e4 <HAL_MPU_ConfigRegion+0x7c>)
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	4a19      	ldr	r2, [pc, #100]	@ (80020e4 <HAL_MPU_ConfigRegion+0x7c>)
 800207e:	f023 0301 	bic.w	r3, r3, #1
 8002082:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002084:	4a17      	ldr	r2, [pc, #92]	@ (80020e4 <HAL_MPU_ConfigRegion+0x7c>)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	7b1b      	ldrb	r3, [r3, #12]
 8002090:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	7adb      	ldrb	r3, [r3, #11]
 8002096:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002098:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	7a9b      	ldrb	r3, [r3, #10]
 800209e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80020a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	7b5b      	ldrb	r3, [r3, #13]
 80020a6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80020a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	7b9b      	ldrb	r3, [r3, #14]
 80020ae:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80020b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	7bdb      	ldrb	r3, [r3, #15]
 80020b6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80020b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	7a5b      	ldrb	r3, [r3, #9]
 80020be:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80020c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	7a1b      	ldrb	r3, [r3, #8]
 80020c6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80020c8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	7812      	ldrb	r2, [r2, #0]
 80020ce:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80020d0:	4a04      	ldr	r2, [pc, #16]	@ (80020e4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80020d2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80020d4:	6113      	str	r3, [r2, #16]
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	e000ed90 	.word	0xe000ed90

080020e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e237      	b.n	800256a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d004      	beq.n	8002110 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2280      	movs	r2, #128	@ 0x80
 800210a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e22c      	b.n	800256a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a5c      	ldr	r2, [pc, #368]	@ (8002288 <HAL_DMA_Abort_IT+0x1a0>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d04a      	beq.n	80021b0 <HAL_DMA_Abort_IT+0xc8>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a5b      	ldr	r2, [pc, #364]	@ (800228c <HAL_DMA_Abort_IT+0x1a4>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d045      	beq.n	80021b0 <HAL_DMA_Abort_IT+0xc8>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a59      	ldr	r2, [pc, #356]	@ (8002290 <HAL_DMA_Abort_IT+0x1a8>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d040      	beq.n	80021b0 <HAL_DMA_Abort_IT+0xc8>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a58      	ldr	r2, [pc, #352]	@ (8002294 <HAL_DMA_Abort_IT+0x1ac>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d03b      	beq.n	80021b0 <HAL_DMA_Abort_IT+0xc8>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a56      	ldr	r2, [pc, #344]	@ (8002298 <HAL_DMA_Abort_IT+0x1b0>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d036      	beq.n	80021b0 <HAL_DMA_Abort_IT+0xc8>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a55      	ldr	r2, [pc, #340]	@ (800229c <HAL_DMA_Abort_IT+0x1b4>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d031      	beq.n	80021b0 <HAL_DMA_Abort_IT+0xc8>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a53      	ldr	r2, [pc, #332]	@ (80022a0 <HAL_DMA_Abort_IT+0x1b8>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d02c      	beq.n	80021b0 <HAL_DMA_Abort_IT+0xc8>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a52      	ldr	r2, [pc, #328]	@ (80022a4 <HAL_DMA_Abort_IT+0x1bc>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d027      	beq.n	80021b0 <HAL_DMA_Abort_IT+0xc8>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a50      	ldr	r2, [pc, #320]	@ (80022a8 <HAL_DMA_Abort_IT+0x1c0>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d022      	beq.n	80021b0 <HAL_DMA_Abort_IT+0xc8>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a4f      	ldr	r2, [pc, #316]	@ (80022ac <HAL_DMA_Abort_IT+0x1c4>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d01d      	beq.n	80021b0 <HAL_DMA_Abort_IT+0xc8>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a4d      	ldr	r2, [pc, #308]	@ (80022b0 <HAL_DMA_Abort_IT+0x1c8>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d018      	beq.n	80021b0 <HAL_DMA_Abort_IT+0xc8>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a4c      	ldr	r2, [pc, #304]	@ (80022b4 <HAL_DMA_Abort_IT+0x1cc>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d013      	beq.n	80021b0 <HAL_DMA_Abort_IT+0xc8>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a4a      	ldr	r2, [pc, #296]	@ (80022b8 <HAL_DMA_Abort_IT+0x1d0>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d00e      	beq.n	80021b0 <HAL_DMA_Abort_IT+0xc8>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a49      	ldr	r2, [pc, #292]	@ (80022bc <HAL_DMA_Abort_IT+0x1d4>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d009      	beq.n	80021b0 <HAL_DMA_Abort_IT+0xc8>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a47      	ldr	r2, [pc, #284]	@ (80022c0 <HAL_DMA_Abort_IT+0x1d8>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d004      	beq.n	80021b0 <HAL_DMA_Abort_IT+0xc8>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a46      	ldr	r2, [pc, #280]	@ (80022c4 <HAL_DMA_Abort_IT+0x1dc>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d101      	bne.n	80021b4 <HAL_DMA_Abort_IT+0xcc>
 80021b0:	2301      	movs	r3, #1
 80021b2:	e000      	b.n	80021b6 <HAL_DMA_Abort_IT+0xce>
 80021b4:	2300      	movs	r3, #0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 8086 	beq.w	80022c8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2204      	movs	r2, #4
 80021c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a2f      	ldr	r2, [pc, #188]	@ (8002288 <HAL_DMA_Abort_IT+0x1a0>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d04a      	beq.n	8002264 <HAL_DMA_Abort_IT+0x17c>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a2e      	ldr	r2, [pc, #184]	@ (800228c <HAL_DMA_Abort_IT+0x1a4>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d045      	beq.n	8002264 <HAL_DMA_Abort_IT+0x17c>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a2c      	ldr	r2, [pc, #176]	@ (8002290 <HAL_DMA_Abort_IT+0x1a8>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d040      	beq.n	8002264 <HAL_DMA_Abort_IT+0x17c>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a2b      	ldr	r2, [pc, #172]	@ (8002294 <HAL_DMA_Abort_IT+0x1ac>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d03b      	beq.n	8002264 <HAL_DMA_Abort_IT+0x17c>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a29      	ldr	r2, [pc, #164]	@ (8002298 <HAL_DMA_Abort_IT+0x1b0>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d036      	beq.n	8002264 <HAL_DMA_Abort_IT+0x17c>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a28      	ldr	r2, [pc, #160]	@ (800229c <HAL_DMA_Abort_IT+0x1b4>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d031      	beq.n	8002264 <HAL_DMA_Abort_IT+0x17c>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a26      	ldr	r2, [pc, #152]	@ (80022a0 <HAL_DMA_Abort_IT+0x1b8>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d02c      	beq.n	8002264 <HAL_DMA_Abort_IT+0x17c>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a25      	ldr	r2, [pc, #148]	@ (80022a4 <HAL_DMA_Abort_IT+0x1bc>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d027      	beq.n	8002264 <HAL_DMA_Abort_IT+0x17c>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a23      	ldr	r2, [pc, #140]	@ (80022a8 <HAL_DMA_Abort_IT+0x1c0>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d022      	beq.n	8002264 <HAL_DMA_Abort_IT+0x17c>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a22      	ldr	r2, [pc, #136]	@ (80022ac <HAL_DMA_Abort_IT+0x1c4>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d01d      	beq.n	8002264 <HAL_DMA_Abort_IT+0x17c>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a20      	ldr	r2, [pc, #128]	@ (80022b0 <HAL_DMA_Abort_IT+0x1c8>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d018      	beq.n	8002264 <HAL_DMA_Abort_IT+0x17c>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a1f      	ldr	r2, [pc, #124]	@ (80022b4 <HAL_DMA_Abort_IT+0x1cc>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d013      	beq.n	8002264 <HAL_DMA_Abort_IT+0x17c>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a1d      	ldr	r2, [pc, #116]	@ (80022b8 <HAL_DMA_Abort_IT+0x1d0>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d00e      	beq.n	8002264 <HAL_DMA_Abort_IT+0x17c>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a1c      	ldr	r2, [pc, #112]	@ (80022bc <HAL_DMA_Abort_IT+0x1d4>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d009      	beq.n	8002264 <HAL_DMA_Abort_IT+0x17c>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a1a      	ldr	r2, [pc, #104]	@ (80022c0 <HAL_DMA_Abort_IT+0x1d8>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d004      	beq.n	8002264 <HAL_DMA_Abort_IT+0x17c>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a19      	ldr	r2, [pc, #100]	@ (80022c4 <HAL_DMA_Abort_IT+0x1dc>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d108      	bne.n	8002276 <HAL_DMA_Abort_IT+0x18e>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 0201 	bic.w	r2, r2, #1
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	e178      	b.n	8002568 <HAL_DMA_Abort_IT+0x480>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0201 	bic.w	r2, r2, #1
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	e16f      	b.n	8002568 <HAL_DMA_Abort_IT+0x480>
 8002288:	40020010 	.word	0x40020010
 800228c:	40020028 	.word	0x40020028
 8002290:	40020040 	.word	0x40020040
 8002294:	40020058 	.word	0x40020058
 8002298:	40020070 	.word	0x40020070
 800229c:	40020088 	.word	0x40020088
 80022a0:	400200a0 	.word	0x400200a0
 80022a4:	400200b8 	.word	0x400200b8
 80022a8:	40020410 	.word	0x40020410
 80022ac:	40020428 	.word	0x40020428
 80022b0:	40020440 	.word	0x40020440
 80022b4:	40020458 	.word	0x40020458
 80022b8:	40020470 	.word	0x40020470
 80022bc:	40020488 	.word	0x40020488
 80022c0:	400204a0 	.word	0x400204a0
 80022c4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 020e 	bic.w	r2, r2, #14
 80022d6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a6c      	ldr	r2, [pc, #432]	@ (8002490 <HAL_DMA_Abort_IT+0x3a8>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d04a      	beq.n	8002378 <HAL_DMA_Abort_IT+0x290>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a6b      	ldr	r2, [pc, #428]	@ (8002494 <HAL_DMA_Abort_IT+0x3ac>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d045      	beq.n	8002378 <HAL_DMA_Abort_IT+0x290>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a69      	ldr	r2, [pc, #420]	@ (8002498 <HAL_DMA_Abort_IT+0x3b0>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d040      	beq.n	8002378 <HAL_DMA_Abort_IT+0x290>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a68      	ldr	r2, [pc, #416]	@ (800249c <HAL_DMA_Abort_IT+0x3b4>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d03b      	beq.n	8002378 <HAL_DMA_Abort_IT+0x290>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a66      	ldr	r2, [pc, #408]	@ (80024a0 <HAL_DMA_Abort_IT+0x3b8>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d036      	beq.n	8002378 <HAL_DMA_Abort_IT+0x290>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a65      	ldr	r2, [pc, #404]	@ (80024a4 <HAL_DMA_Abort_IT+0x3bc>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d031      	beq.n	8002378 <HAL_DMA_Abort_IT+0x290>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a63      	ldr	r2, [pc, #396]	@ (80024a8 <HAL_DMA_Abort_IT+0x3c0>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d02c      	beq.n	8002378 <HAL_DMA_Abort_IT+0x290>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a62      	ldr	r2, [pc, #392]	@ (80024ac <HAL_DMA_Abort_IT+0x3c4>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d027      	beq.n	8002378 <HAL_DMA_Abort_IT+0x290>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a60      	ldr	r2, [pc, #384]	@ (80024b0 <HAL_DMA_Abort_IT+0x3c8>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d022      	beq.n	8002378 <HAL_DMA_Abort_IT+0x290>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a5f      	ldr	r2, [pc, #380]	@ (80024b4 <HAL_DMA_Abort_IT+0x3cc>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d01d      	beq.n	8002378 <HAL_DMA_Abort_IT+0x290>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a5d      	ldr	r2, [pc, #372]	@ (80024b8 <HAL_DMA_Abort_IT+0x3d0>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d018      	beq.n	8002378 <HAL_DMA_Abort_IT+0x290>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a5c      	ldr	r2, [pc, #368]	@ (80024bc <HAL_DMA_Abort_IT+0x3d4>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d013      	beq.n	8002378 <HAL_DMA_Abort_IT+0x290>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a5a      	ldr	r2, [pc, #360]	@ (80024c0 <HAL_DMA_Abort_IT+0x3d8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d00e      	beq.n	8002378 <HAL_DMA_Abort_IT+0x290>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a59      	ldr	r2, [pc, #356]	@ (80024c4 <HAL_DMA_Abort_IT+0x3dc>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d009      	beq.n	8002378 <HAL_DMA_Abort_IT+0x290>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a57      	ldr	r2, [pc, #348]	@ (80024c8 <HAL_DMA_Abort_IT+0x3e0>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d004      	beq.n	8002378 <HAL_DMA_Abort_IT+0x290>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a56      	ldr	r2, [pc, #344]	@ (80024cc <HAL_DMA_Abort_IT+0x3e4>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d108      	bne.n	800238a <HAL_DMA_Abort_IT+0x2a2>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 0201 	bic.w	r2, r2, #1
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	e007      	b.n	800239a <HAL_DMA_Abort_IT+0x2b2>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 0201 	bic.w	r2, r2, #1
 8002398:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a3c      	ldr	r2, [pc, #240]	@ (8002490 <HAL_DMA_Abort_IT+0x3a8>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d072      	beq.n	800248a <HAL_DMA_Abort_IT+0x3a2>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a3a      	ldr	r2, [pc, #232]	@ (8002494 <HAL_DMA_Abort_IT+0x3ac>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d06d      	beq.n	800248a <HAL_DMA_Abort_IT+0x3a2>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a39      	ldr	r2, [pc, #228]	@ (8002498 <HAL_DMA_Abort_IT+0x3b0>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d068      	beq.n	800248a <HAL_DMA_Abort_IT+0x3a2>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a37      	ldr	r2, [pc, #220]	@ (800249c <HAL_DMA_Abort_IT+0x3b4>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d063      	beq.n	800248a <HAL_DMA_Abort_IT+0x3a2>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a36      	ldr	r2, [pc, #216]	@ (80024a0 <HAL_DMA_Abort_IT+0x3b8>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d05e      	beq.n	800248a <HAL_DMA_Abort_IT+0x3a2>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a34      	ldr	r2, [pc, #208]	@ (80024a4 <HAL_DMA_Abort_IT+0x3bc>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d059      	beq.n	800248a <HAL_DMA_Abort_IT+0x3a2>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a33      	ldr	r2, [pc, #204]	@ (80024a8 <HAL_DMA_Abort_IT+0x3c0>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d054      	beq.n	800248a <HAL_DMA_Abort_IT+0x3a2>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a31      	ldr	r2, [pc, #196]	@ (80024ac <HAL_DMA_Abort_IT+0x3c4>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d04f      	beq.n	800248a <HAL_DMA_Abort_IT+0x3a2>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a30      	ldr	r2, [pc, #192]	@ (80024b0 <HAL_DMA_Abort_IT+0x3c8>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d04a      	beq.n	800248a <HAL_DMA_Abort_IT+0x3a2>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a2e      	ldr	r2, [pc, #184]	@ (80024b4 <HAL_DMA_Abort_IT+0x3cc>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d045      	beq.n	800248a <HAL_DMA_Abort_IT+0x3a2>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a2d      	ldr	r2, [pc, #180]	@ (80024b8 <HAL_DMA_Abort_IT+0x3d0>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d040      	beq.n	800248a <HAL_DMA_Abort_IT+0x3a2>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a2b      	ldr	r2, [pc, #172]	@ (80024bc <HAL_DMA_Abort_IT+0x3d4>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d03b      	beq.n	800248a <HAL_DMA_Abort_IT+0x3a2>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a2a      	ldr	r2, [pc, #168]	@ (80024c0 <HAL_DMA_Abort_IT+0x3d8>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d036      	beq.n	800248a <HAL_DMA_Abort_IT+0x3a2>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a28      	ldr	r2, [pc, #160]	@ (80024c4 <HAL_DMA_Abort_IT+0x3dc>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d031      	beq.n	800248a <HAL_DMA_Abort_IT+0x3a2>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a27      	ldr	r2, [pc, #156]	@ (80024c8 <HAL_DMA_Abort_IT+0x3e0>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d02c      	beq.n	800248a <HAL_DMA_Abort_IT+0x3a2>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a25      	ldr	r2, [pc, #148]	@ (80024cc <HAL_DMA_Abort_IT+0x3e4>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d027      	beq.n	800248a <HAL_DMA_Abort_IT+0x3a2>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a24      	ldr	r2, [pc, #144]	@ (80024d0 <HAL_DMA_Abort_IT+0x3e8>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d022      	beq.n	800248a <HAL_DMA_Abort_IT+0x3a2>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a22      	ldr	r2, [pc, #136]	@ (80024d4 <HAL_DMA_Abort_IT+0x3ec>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d01d      	beq.n	800248a <HAL_DMA_Abort_IT+0x3a2>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a21      	ldr	r2, [pc, #132]	@ (80024d8 <HAL_DMA_Abort_IT+0x3f0>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d018      	beq.n	800248a <HAL_DMA_Abort_IT+0x3a2>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a1f      	ldr	r2, [pc, #124]	@ (80024dc <HAL_DMA_Abort_IT+0x3f4>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d013      	beq.n	800248a <HAL_DMA_Abort_IT+0x3a2>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a1e      	ldr	r2, [pc, #120]	@ (80024e0 <HAL_DMA_Abort_IT+0x3f8>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d00e      	beq.n	800248a <HAL_DMA_Abort_IT+0x3a2>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a1c      	ldr	r2, [pc, #112]	@ (80024e4 <HAL_DMA_Abort_IT+0x3fc>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d009      	beq.n	800248a <HAL_DMA_Abort_IT+0x3a2>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a1b      	ldr	r2, [pc, #108]	@ (80024e8 <HAL_DMA_Abort_IT+0x400>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d004      	beq.n	800248a <HAL_DMA_Abort_IT+0x3a2>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a19      	ldr	r2, [pc, #100]	@ (80024ec <HAL_DMA_Abort_IT+0x404>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d132      	bne.n	80024f0 <HAL_DMA_Abort_IT+0x408>
 800248a:	2301      	movs	r3, #1
 800248c:	e031      	b.n	80024f2 <HAL_DMA_Abort_IT+0x40a>
 800248e:	bf00      	nop
 8002490:	40020010 	.word	0x40020010
 8002494:	40020028 	.word	0x40020028
 8002498:	40020040 	.word	0x40020040
 800249c:	40020058 	.word	0x40020058
 80024a0:	40020070 	.word	0x40020070
 80024a4:	40020088 	.word	0x40020088
 80024a8:	400200a0 	.word	0x400200a0
 80024ac:	400200b8 	.word	0x400200b8
 80024b0:	40020410 	.word	0x40020410
 80024b4:	40020428 	.word	0x40020428
 80024b8:	40020440 	.word	0x40020440
 80024bc:	40020458 	.word	0x40020458
 80024c0:	40020470 	.word	0x40020470
 80024c4:	40020488 	.word	0x40020488
 80024c8:	400204a0 	.word	0x400204a0
 80024cc:	400204b8 	.word	0x400204b8
 80024d0:	58025408 	.word	0x58025408
 80024d4:	5802541c 	.word	0x5802541c
 80024d8:	58025430 	.word	0x58025430
 80024dc:	58025444 	.word	0x58025444
 80024e0:	58025458 	.word	0x58025458
 80024e4:	5802546c 	.word	0x5802546c
 80024e8:	58025480 	.word	0x58025480
 80024ec:	58025494 	.word	0x58025494
 80024f0:	2300      	movs	r3, #0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d028      	beq.n	8002548 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002500:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002504:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800250a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002510:	f003 031f 	and.w	r3, r3, #31
 8002514:	2201      	movs	r2, #1
 8002516:	409a      	lsls	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002524:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00c      	beq.n	8002548 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002538:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800253c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002546:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop

08002574 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8002574:	b480      	push	{r7}
 8002576:	b087      	sub	sp, #28
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	460b      	mov	r3, r1
 800257e:	607a      	str	r2, [r7, #4]
 8002580:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002582:	2300      	movs	r3, #0
 8002584:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e00a      	b.n	80025a6 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8002590:	7afb      	ldrb	r3, [r7, #11]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d103      	bne.n	800259e <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	605a      	str	r2, [r3, #4]
      break;
 800259c:	e002      	b.n	80025a4 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	75fb      	strb	r3, [r7, #23]
      break;
 80025a2:	bf00      	nop
  }

  return status;
 80025a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	371c      	adds	r7, #28
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
 80025ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e003      	b.n	80025ce <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80025cc:	2300      	movs	r3, #0
  }
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
	...

080025dc <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	0c1b      	lsrs	r3, r3, #16
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 031f 	and.w	r3, r3, #31
 80025f8:	2201      	movs	r2, #1
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	011a      	lsls	r2, r3, #4
 8002604:	4b0c      	ldr	r3, [pc, #48]	@ (8002638 <HAL_EXTI_IRQHandler+0x5c>)
 8002606:	4413      	add	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	4013      	ands	r3, r2
 8002612:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d009      	beq.n	800262e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d002      	beq.n	800262e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	4798      	blx	r3
    }
  }
}
 800262e:	bf00      	nop
 8002630:	3718      	adds	r7, #24
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	58000088 	.word	0x58000088

0800263c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800263c:	b480      	push	{r7}
 800263e:	b089      	sub	sp, #36	@ 0x24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002646:	2300      	movs	r3, #0
 8002648:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800264a:	4b89      	ldr	r3, [pc, #548]	@ (8002870 <HAL_GPIO_Init+0x234>)
 800264c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800264e:	e194      	b.n	800297a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	2101      	movs	r1, #1
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	fa01 f303 	lsl.w	r3, r1, r3
 800265c:	4013      	ands	r3, r2
 800265e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 8186 	beq.w	8002974 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 0303 	and.w	r3, r3, #3
 8002670:	2b01      	cmp	r3, #1
 8002672:	d005      	beq.n	8002680 <HAL_GPIO_Init+0x44>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 0303 	and.w	r3, r3, #3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d130      	bne.n	80026e2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	2203      	movs	r2, #3
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026b6:	2201      	movs	r2, #1
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43db      	mvns	r3, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4013      	ands	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	091b      	lsrs	r3, r3, #4
 80026cc:	f003 0201 	and.w	r2, r3, #1
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	d017      	beq.n	800271e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	2203      	movs	r2, #3
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43db      	mvns	r3, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4013      	ands	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	689a      	ldr	r2, [r3, #8]
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4313      	orrs	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d123      	bne.n	8002772 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	08da      	lsrs	r2, r3, #3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	3208      	adds	r2, #8
 8002732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002736:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	220f      	movs	r2, #15
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43db      	mvns	r3, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4013      	ands	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	691a      	ldr	r2, [r3, #16]
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4313      	orrs	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	08da      	lsrs	r2, r3, #3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3208      	adds	r2, #8
 800276c:	69b9      	ldr	r1, [r7, #24]
 800276e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	2203      	movs	r2, #3
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43db      	mvns	r3, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4013      	ands	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f003 0203 	and.w	r2, r3, #3
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f000 80e0 	beq.w	8002974 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002874 <HAL_GPIO_Init+0x238>)
 80027b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80027ba:	4a2e      	ldr	r2, [pc, #184]	@ (8002874 <HAL_GPIO_Init+0x238>)
 80027bc:	f043 0302 	orr.w	r3, r3, #2
 80027c0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80027c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002874 <HAL_GPIO_Init+0x238>)
 80027c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027d2:	4a29      	ldr	r2, [pc, #164]	@ (8002878 <HAL_GPIO_Init+0x23c>)
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	089b      	lsrs	r3, r3, #2
 80027d8:	3302      	adds	r3, #2
 80027da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	f003 0303 	and.w	r3, r3, #3
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	220f      	movs	r2, #15
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	43db      	mvns	r3, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4013      	ands	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a20      	ldr	r2, [pc, #128]	@ (800287c <HAL_GPIO_Init+0x240>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d052      	beq.n	80028a4 <HAL_GPIO_Init+0x268>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a1f      	ldr	r2, [pc, #124]	@ (8002880 <HAL_GPIO_Init+0x244>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d031      	beq.n	800286a <HAL_GPIO_Init+0x22e>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a1e      	ldr	r2, [pc, #120]	@ (8002884 <HAL_GPIO_Init+0x248>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d02b      	beq.n	8002866 <HAL_GPIO_Init+0x22a>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a1d      	ldr	r2, [pc, #116]	@ (8002888 <HAL_GPIO_Init+0x24c>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d025      	beq.n	8002862 <HAL_GPIO_Init+0x226>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a1c      	ldr	r2, [pc, #112]	@ (800288c <HAL_GPIO_Init+0x250>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d01f      	beq.n	800285e <HAL_GPIO_Init+0x222>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a1b      	ldr	r2, [pc, #108]	@ (8002890 <HAL_GPIO_Init+0x254>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d019      	beq.n	800285a <HAL_GPIO_Init+0x21e>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a1a      	ldr	r2, [pc, #104]	@ (8002894 <HAL_GPIO_Init+0x258>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d013      	beq.n	8002856 <HAL_GPIO_Init+0x21a>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a19      	ldr	r2, [pc, #100]	@ (8002898 <HAL_GPIO_Init+0x25c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d00d      	beq.n	8002852 <HAL_GPIO_Init+0x216>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a18      	ldr	r2, [pc, #96]	@ (800289c <HAL_GPIO_Init+0x260>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d007      	beq.n	800284e <HAL_GPIO_Init+0x212>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a17      	ldr	r2, [pc, #92]	@ (80028a0 <HAL_GPIO_Init+0x264>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d101      	bne.n	800284a <HAL_GPIO_Init+0x20e>
 8002846:	2309      	movs	r3, #9
 8002848:	e02d      	b.n	80028a6 <HAL_GPIO_Init+0x26a>
 800284a:	230a      	movs	r3, #10
 800284c:	e02b      	b.n	80028a6 <HAL_GPIO_Init+0x26a>
 800284e:	2308      	movs	r3, #8
 8002850:	e029      	b.n	80028a6 <HAL_GPIO_Init+0x26a>
 8002852:	2307      	movs	r3, #7
 8002854:	e027      	b.n	80028a6 <HAL_GPIO_Init+0x26a>
 8002856:	2306      	movs	r3, #6
 8002858:	e025      	b.n	80028a6 <HAL_GPIO_Init+0x26a>
 800285a:	2305      	movs	r3, #5
 800285c:	e023      	b.n	80028a6 <HAL_GPIO_Init+0x26a>
 800285e:	2304      	movs	r3, #4
 8002860:	e021      	b.n	80028a6 <HAL_GPIO_Init+0x26a>
 8002862:	2303      	movs	r3, #3
 8002864:	e01f      	b.n	80028a6 <HAL_GPIO_Init+0x26a>
 8002866:	2302      	movs	r3, #2
 8002868:	e01d      	b.n	80028a6 <HAL_GPIO_Init+0x26a>
 800286a:	2301      	movs	r3, #1
 800286c:	e01b      	b.n	80028a6 <HAL_GPIO_Init+0x26a>
 800286e:	bf00      	nop
 8002870:	58000080 	.word	0x58000080
 8002874:	58024400 	.word	0x58024400
 8002878:	58000400 	.word	0x58000400
 800287c:	58020000 	.word	0x58020000
 8002880:	58020400 	.word	0x58020400
 8002884:	58020800 	.word	0x58020800
 8002888:	58020c00 	.word	0x58020c00
 800288c:	58021000 	.word	0x58021000
 8002890:	58021400 	.word	0x58021400
 8002894:	58021800 	.word	0x58021800
 8002898:	58021c00 	.word	0x58021c00
 800289c:	58022000 	.word	0x58022000
 80028a0:	58022400 	.word	0x58022400
 80028a4:	2300      	movs	r3, #0
 80028a6:	69fa      	ldr	r2, [r7, #28]
 80028a8:	f002 0203 	and.w	r2, r2, #3
 80028ac:	0092      	lsls	r2, r2, #2
 80028ae:	4093      	lsls	r3, r2
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028b6:	4938      	ldr	r1, [pc, #224]	@ (8002998 <HAL_GPIO_Init+0x35c>)
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	089b      	lsrs	r3, r3, #2
 80028bc:	3302      	adds	r3, #2
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	43db      	mvns	r3, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4013      	ands	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80028ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80028f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	4313      	orrs	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002918:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	43db      	mvns	r3, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4013      	ands	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	4313      	orrs	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	43db      	mvns	r3, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4013      	ands	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	4313      	orrs	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	3301      	adds	r3, #1
 8002978:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	fa22 f303 	lsr.w	r3, r2, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	f47f ae63 	bne.w	8002650 <HAL_GPIO_Init+0x14>
  }
}
 800298a:	bf00      	nop
 800298c:	bf00      	nop
 800298e:	3724      	adds	r7, #36	@ 0x24
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	58000400 	.word	0x58000400

0800299c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	460b      	mov	r3, r1
 80029a6:	807b      	strh	r3, [r7, #2]
 80029a8:	4613      	mov	r3, r2
 80029aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029ac:	787b      	ldrb	r3, [r7, #1]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029b2:	887a      	ldrh	r2, [r7, #2]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80029b8:	e003      	b.n	80029c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80029ba:	887b      	ldrh	r3, [r7, #2]
 80029bc:	041a      	lsls	r2, r3, #16
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	619a      	str	r2, [r3, #24]
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b085      	sub	sp, #20
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	460b      	mov	r3, r1
 80029d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029e0:	887a      	ldrh	r2, [r7, #2]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	4013      	ands	r3, r2
 80029e6:	041a      	lsls	r2, r3, #16
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	43d9      	mvns	r1, r3
 80029ec:	887b      	ldrh	r3, [r7, #2]
 80029ee:	400b      	ands	r3, r1
 80029f0:	431a      	orrs	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	619a      	str	r2, [r3, #24]
}
 80029f6:	bf00      	nop
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	4603      	mov	r3, r0
 8002a0a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002a0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a10:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002a14:	88fb      	ldrh	r3, [r7, #6]
 8002a16:	4013      	ands	r3, r2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d008      	beq.n	8002a2e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a20:	88fb      	ldrh	r3, [r7, #6]
 8002a22:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a26:	88fb      	ldrh	r3, [r7, #6]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fe fbe9 	bl	8001200 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002a2e:	bf00      	nop
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
	...

08002a38 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002a40:	4b19      	ldr	r3, [pc, #100]	@ (8002aa8 <HAL_PWREx_ConfigSupply+0x70>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d00a      	beq.n	8002a62 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002a4c:	4b16      	ldr	r3, [pc, #88]	@ (8002aa8 <HAL_PWREx_ConfigSupply+0x70>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d001      	beq.n	8002a5e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e01f      	b.n	8002a9e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	e01d      	b.n	8002a9e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002a62:	4b11      	ldr	r3, [pc, #68]	@ (8002aa8 <HAL_PWREx_ConfigSupply+0x70>)
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f023 0207 	bic.w	r2, r3, #7
 8002a6a:	490f      	ldr	r1, [pc, #60]	@ (8002aa8 <HAL_PWREx_ConfigSupply+0x70>)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002a72:	f7ff f999 	bl	8001da8 <HAL_GetTick>
 8002a76:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a78:	e009      	b.n	8002a8e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002a7a:	f7ff f995 	bl	8001da8 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a88:	d901      	bls.n	8002a8e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e007      	b.n	8002a9e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a8e:	4b06      	ldr	r3, [pc, #24]	@ (8002aa8 <HAL_PWREx_ConfigSupply+0x70>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a9a:	d1ee      	bne.n	8002a7a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	58024800 	.word	0x58024800

08002aac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08c      	sub	sp, #48	@ 0x30
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d102      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	f000 bc48 	b.w	8003350 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 8088 	beq.w	8002bde <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ace:	4b99      	ldr	r3, [pc, #612]	@ (8002d34 <HAL_RCC_OscConfig+0x288>)
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ad8:	4b96      	ldr	r3, [pc, #600]	@ (8002d34 <HAL_RCC_OscConfig+0x288>)
 8002ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002adc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ae0:	2b10      	cmp	r3, #16
 8002ae2:	d007      	beq.n	8002af4 <HAL_RCC_OscConfig+0x48>
 8002ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ae6:	2b18      	cmp	r3, #24
 8002ae8:	d111      	bne.n	8002b0e <HAL_RCC_OscConfig+0x62>
 8002aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d10c      	bne.n	8002b0e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af4:	4b8f      	ldr	r3, [pc, #572]	@ (8002d34 <HAL_RCC_OscConfig+0x288>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d06d      	beq.n	8002bdc <HAL_RCC_OscConfig+0x130>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d169      	bne.n	8002bdc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	f000 bc21 	b.w	8003350 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b16:	d106      	bne.n	8002b26 <HAL_RCC_OscConfig+0x7a>
 8002b18:	4b86      	ldr	r3, [pc, #536]	@ (8002d34 <HAL_RCC_OscConfig+0x288>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a85      	ldr	r2, [pc, #532]	@ (8002d34 <HAL_RCC_OscConfig+0x288>)
 8002b1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b22:	6013      	str	r3, [r2, #0]
 8002b24:	e02e      	b.n	8002b84 <HAL_RCC_OscConfig+0xd8>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10c      	bne.n	8002b48 <HAL_RCC_OscConfig+0x9c>
 8002b2e:	4b81      	ldr	r3, [pc, #516]	@ (8002d34 <HAL_RCC_OscConfig+0x288>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a80      	ldr	r2, [pc, #512]	@ (8002d34 <HAL_RCC_OscConfig+0x288>)
 8002b34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	4b7e      	ldr	r3, [pc, #504]	@ (8002d34 <HAL_RCC_OscConfig+0x288>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a7d      	ldr	r2, [pc, #500]	@ (8002d34 <HAL_RCC_OscConfig+0x288>)
 8002b40:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	e01d      	b.n	8002b84 <HAL_RCC_OscConfig+0xd8>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b50:	d10c      	bne.n	8002b6c <HAL_RCC_OscConfig+0xc0>
 8002b52:	4b78      	ldr	r3, [pc, #480]	@ (8002d34 <HAL_RCC_OscConfig+0x288>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a77      	ldr	r2, [pc, #476]	@ (8002d34 <HAL_RCC_OscConfig+0x288>)
 8002b58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	4b75      	ldr	r3, [pc, #468]	@ (8002d34 <HAL_RCC_OscConfig+0x288>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a74      	ldr	r2, [pc, #464]	@ (8002d34 <HAL_RCC_OscConfig+0x288>)
 8002b64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	e00b      	b.n	8002b84 <HAL_RCC_OscConfig+0xd8>
 8002b6c:	4b71      	ldr	r3, [pc, #452]	@ (8002d34 <HAL_RCC_OscConfig+0x288>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a70      	ldr	r2, [pc, #448]	@ (8002d34 <HAL_RCC_OscConfig+0x288>)
 8002b72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b76:	6013      	str	r3, [r2, #0]
 8002b78:	4b6e      	ldr	r3, [pc, #440]	@ (8002d34 <HAL_RCC_OscConfig+0x288>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a6d      	ldr	r2, [pc, #436]	@ (8002d34 <HAL_RCC_OscConfig+0x288>)
 8002b7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d013      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8c:	f7ff f90c 	bl	8001da8 <HAL_GetTick>
 8002b90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b94:	f7ff f908 	bl	8001da8 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b64      	cmp	r3, #100	@ 0x64
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e3d4      	b.n	8003350 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ba6:	4b63      	ldr	r3, [pc, #396]	@ (8002d34 <HAL_RCC_OscConfig+0x288>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0f0      	beq.n	8002b94 <HAL_RCC_OscConfig+0xe8>
 8002bb2:	e014      	b.n	8002bde <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb4:	f7ff f8f8 	bl	8001da8 <HAL_GetTick>
 8002bb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bbc:	f7ff f8f4 	bl	8001da8 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b64      	cmp	r3, #100	@ 0x64
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e3c0      	b.n	8003350 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002bce:	4b59      	ldr	r3, [pc, #356]	@ (8002d34 <HAL_RCC_OscConfig+0x288>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f0      	bne.n	8002bbc <HAL_RCC_OscConfig+0x110>
 8002bda:	e000      	b.n	8002bde <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 80ca 	beq.w	8002d80 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bec:	4b51      	ldr	r3, [pc, #324]	@ (8002d34 <HAL_RCC_OscConfig+0x288>)
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002bf4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002bf6:	4b4f      	ldr	r3, [pc, #316]	@ (8002d34 <HAL_RCC_OscConfig+0x288>)
 8002bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bfa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d007      	beq.n	8002c12 <HAL_RCC_OscConfig+0x166>
 8002c02:	6a3b      	ldr	r3, [r7, #32]
 8002c04:	2b18      	cmp	r3, #24
 8002c06:	d156      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x20a>
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d151      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c12:	4b48      	ldr	r3, [pc, #288]	@ (8002d34 <HAL_RCC_OscConfig+0x288>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0304 	and.w	r3, r3, #4
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d005      	beq.n	8002c2a <HAL_RCC_OscConfig+0x17e>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e392      	b.n	8003350 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c2a:	4b42      	ldr	r3, [pc, #264]	@ (8002d34 <HAL_RCC_OscConfig+0x288>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f023 0219 	bic.w	r2, r3, #25
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	493f      	ldr	r1, [pc, #252]	@ (8002d34 <HAL_RCC_OscConfig+0x288>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3c:	f7ff f8b4 	bl	8001da8 <HAL_GetTick>
 8002c40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c44:	f7ff f8b0 	bl	8001da8 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e37c      	b.n	8003350 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c56:	4b37      	ldr	r3, [pc, #220]	@ (8002d34 <HAL_RCC_OscConfig+0x288>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0304 	and.w	r3, r3, #4
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0f0      	beq.n	8002c44 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c62:	f7ff f8ad 	bl	8001dc0 <HAL_GetREVID>
 8002c66:	4603      	mov	r3, r0
 8002c68:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d817      	bhi.n	8002ca0 <HAL_RCC_OscConfig+0x1f4>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	2b40      	cmp	r3, #64	@ 0x40
 8002c76:	d108      	bne.n	8002c8a <HAL_RCC_OscConfig+0x1de>
 8002c78:	4b2e      	ldr	r3, [pc, #184]	@ (8002d34 <HAL_RCC_OscConfig+0x288>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002c80:	4a2c      	ldr	r2, [pc, #176]	@ (8002d34 <HAL_RCC_OscConfig+0x288>)
 8002c82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c86:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c88:	e07a      	b.n	8002d80 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c8a:	4b2a      	ldr	r3, [pc, #168]	@ (8002d34 <HAL_RCC_OscConfig+0x288>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	031b      	lsls	r3, r3, #12
 8002c98:	4926      	ldr	r1, [pc, #152]	@ (8002d34 <HAL_RCC_OscConfig+0x288>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c9e:	e06f      	b.n	8002d80 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca0:	4b24      	ldr	r3, [pc, #144]	@ (8002d34 <HAL_RCC_OscConfig+0x288>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	061b      	lsls	r3, r3, #24
 8002cae:	4921      	ldr	r1, [pc, #132]	@ (8002d34 <HAL_RCC_OscConfig+0x288>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cb4:	e064      	b.n	8002d80 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d047      	beq.n	8002d4e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002cbe:	4b1d      	ldr	r3, [pc, #116]	@ (8002d34 <HAL_RCC_OscConfig+0x288>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f023 0219 	bic.w	r2, r3, #25
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	491a      	ldr	r1, [pc, #104]	@ (8002d34 <HAL_RCC_OscConfig+0x288>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd0:	f7ff f86a 	bl	8001da8 <HAL_GetTick>
 8002cd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cd8:	f7ff f866 	bl	8001da8 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e332      	b.n	8003350 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cea:	4b12      	ldr	r3, [pc, #72]	@ (8002d34 <HAL_RCC_OscConfig+0x288>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0304 	and.w	r3, r3, #4
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0f0      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf6:	f7ff f863 	bl	8001dc0 <HAL_GetREVID>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d819      	bhi.n	8002d38 <HAL_RCC_OscConfig+0x28c>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	2b40      	cmp	r3, #64	@ 0x40
 8002d0a:	d108      	bne.n	8002d1e <HAL_RCC_OscConfig+0x272>
 8002d0c:	4b09      	ldr	r3, [pc, #36]	@ (8002d34 <HAL_RCC_OscConfig+0x288>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002d14:	4a07      	ldr	r2, [pc, #28]	@ (8002d34 <HAL_RCC_OscConfig+0x288>)
 8002d16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d1a:	6053      	str	r3, [r2, #4]
 8002d1c:	e030      	b.n	8002d80 <HAL_RCC_OscConfig+0x2d4>
 8002d1e:	4b05      	ldr	r3, [pc, #20]	@ (8002d34 <HAL_RCC_OscConfig+0x288>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	031b      	lsls	r3, r3, #12
 8002d2c:	4901      	ldr	r1, [pc, #4]	@ (8002d34 <HAL_RCC_OscConfig+0x288>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	604b      	str	r3, [r1, #4]
 8002d32:	e025      	b.n	8002d80 <HAL_RCC_OscConfig+0x2d4>
 8002d34:	58024400 	.word	0x58024400
 8002d38:	4b9a      	ldr	r3, [pc, #616]	@ (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	061b      	lsls	r3, r3, #24
 8002d46:	4997      	ldr	r1, [pc, #604]	@ (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	604b      	str	r3, [r1, #4]
 8002d4c:	e018      	b.n	8002d80 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d4e:	4b95      	ldr	r3, [pc, #596]	@ (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a94      	ldr	r2, [pc, #592]	@ (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002d54:	f023 0301 	bic.w	r3, r3, #1
 8002d58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5a:	f7ff f825 	bl	8001da8 <HAL_GetTick>
 8002d5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d62:	f7ff f821 	bl	8001da8 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e2ed      	b.n	8003350 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d74:	4b8b      	ldr	r3, [pc, #556]	@ (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1f0      	bne.n	8002d62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0310 	and.w	r3, r3, #16
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 80a9 	beq.w	8002ee0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d8e:	4b85      	ldr	r3, [pc, #532]	@ (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d96:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d98:	4b82      	ldr	r3, [pc, #520]	@ (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d9c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d007      	beq.n	8002db4 <HAL_RCC_OscConfig+0x308>
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	2b18      	cmp	r3, #24
 8002da8:	d13a      	bne.n	8002e20 <HAL_RCC_OscConfig+0x374>
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f003 0303 	and.w	r3, r3, #3
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d135      	bne.n	8002e20 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002db4:	4b7b      	ldr	r3, [pc, #492]	@ (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d005      	beq.n	8002dcc <HAL_RCC_OscConfig+0x320>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	2b80      	cmp	r3, #128	@ 0x80
 8002dc6:	d001      	beq.n	8002dcc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e2c1      	b.n	8003350 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002dcc:	f7fe fff8 	bl	8001dc0 <HAL_GetREVID>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d817      	bhi.n	8002e0a <HAL_RCC_OscConfig+0x35e>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	2b20      	cmp	r3, #32
 8002de0:	d108      	bne.n	8002df4 <HAL_RCC_OscConfig+0x348>
 8002de2:	4b70      	ldr	r3, [pc, #448]	@ (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002dea:	4a6e      	ldr	r2, [pc, #440]	@ (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002dec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002df0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002df2:	e075      	b.n	8002ee0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002df4:	4b6b      	ldr	r3, [pc, #428]	@ (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	069b      	lsls	r3, r3, #26
 8002e02:	4968      	ldr	r1, [pc, #416]	@ (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e08:	e06a      	b.n	8002ee0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e0a:	4b66      	ldr	r3, [pc, #408]	@ (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	061b      	lsls	r3, r3, #24
 8002e18:	4962      	ldr	r1, [pc, #392]	@ (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e1e:	e05f      	b.n	8002ee0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d042      	beq.n	8002eae <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002e28:	4b5e      	ldr	r3, [pc, #376]	@ (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a5d      	ldr	r2, [pc, #372]	@ (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002e2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e34:	f7fe ffb8 	bl	8001da8 <HAL_GetTick>
 8002e38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002e3c:	f7fe ffb4 	bl	8001da8 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e280      	b.n	8003350 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e4e:	4b55      	ldr	r3, [pc, #340]	@ (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0f0      	beq.n	8002e3c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e5a:	f7fe ffb1 	bl	8001dc0 <HAL_GetREVID>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d817      	bhi.n	8002e98 <HAL_RCC_OscConfig+0x3ec>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	2b20      	cmp	r3, #32
 8002e6e:	d108      	bne.n	8002e82 <HAL_RCC_OscConfig+0x3d6>
 8002e70:	4b4c      	ldr	r3, [pc, #304]	@ (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002e78:	4a4a      	ldr	r2, [pc, #296]	@ (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002e7a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002e7e:	6053      	str	r3, [r2, #4]
 8002e80:	e02e      	b.n	8002ee0 <HAL_RCC_OscConfig+0x434>
 8002e82:	4b48      	ldr	r3, [pc, #288]	@ (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	069b      	lsls	r3, r3, #26
 8002e90:	4944      	ldr	r1, [pc, #272]	@ (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	604b      	str	r3, [r1, #4]
 8002e96:	e023      	b.n	8002ee0 <HAL_RCC_OscConfig+0x434>
 8002e98:	4b42      	ldr	r3, [pc, #264]	@ (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	061b      	lsls	r3, r3, #24
 8002ea6:	493f      	ldr	r1, [pc, #252]	@ (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	60cb      	str	r3, [r1, #12]
 8002eac:	e018      	b.n	8002ee0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002eae:	4b3d      	ldr	r3, [pc, #244]	@ (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a3c      	ldr	r2, [pc, #240]	@ (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002eb4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002eb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eba:	f7fe ff75 	bl	8001da8 <HAL_GetTick>
 8002ebe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002ec2:	f7fe ff71 	bl	8001da8 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e23d      	b.n	8003350 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ed4:	4b33      	ldr	r3, [pc, #204]	@ (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1f0      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d036      	beq.n	8002f5a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d019      	beq.n	8002f28 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ef4:	4b2b      	ldr	r3, [pc, #172]	@ (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002ef6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ef8:	4a2a      	ldr	r2, [pc, #168]	@ (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002efa:	f043 0301 	orr.w	r3, r3, #1
 8002efe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f00:	f7fe ff52 	bl	8001da8 <HAL_GetTick>
 8002f04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f08:	f7fe ff4e 	bl	8001da8 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e21a      	b.n	8003350 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f1a:	4b22      	ldr	r3, [pc, #136]	@ (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002f1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCC_OscConfig+0x45c>
 8002f26:	e018      	b.n	8002f5a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f28:	4b1e      	ldr	r3, [pc, #120]	@ (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002f2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002f2e:	f023 0301 	bic.w	r3, r3, #1
 8002f32:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f34:	f7fe ff38 	bl	8001da8 <HAL_GetTick>
 8002f38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f3c:	f7fe ff34 	bl	8001da8 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e200      	b.n	8003350 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f4e:	4b15      	ldr	r3, [pc, #84]	@ (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002f50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f0      	bne.n	8002f3c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0320 	and.w	r3, r3, #32
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d039      	beq.n	8002fda <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d01c      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a0c      	ldr	r2, [pc, #48]	@ (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002f74:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002f78:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f7a:	f7fe ff15 	bl	8001da8 <HAL_GetTick>
 8002f7e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f82:	f7fe ff11 	bl	8001da8 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e1dd      	b.n	8003350 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f94:	4b03      	ldr	r3, [pc, #12]	@ (8002fa4 <HAL_RCC_OscConfig+0x4f8>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0f0      	beq.n	8002f82 <HAL_RCC_OscConfig+0x4d6>
 8002fa0:	e01b      	b.n	8002fda <HAL_RCC_OscConfig+0x52e>
 8002fa2:	bf00      	nop
 8002fa4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fa8:	4b9b      	ldr	r3, [pc, #620]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a9a      	ldr	r2, [pc, #616]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 8002fae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002fb2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002fb4:	f7fe fef8 	bl	8001da8 <HAL_GetTick>
 8002fb8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fbc:	f7fe fef4 	bl	8001da8 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e1c0      	b.n	8003350 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002fce:	4b92      	ldr	r3, [pc, #584]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1f0      	bne.n	8002fbc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0304 	and.w	r3, r3, #4
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 8081 	beq.w	80030ea <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002fe8:	4b8c      	ldr	r3, [pc, #560]	@ (800321c <HAL_RCC_OscConfig+0x770>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a8b      	ldr	r2, [pc, #556]	@ (800321c <HAL_RCC_OscConfig+0x770>)
 8002fee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ff2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ff4:	f7fe fed8 	bl	8001da8 <HAL_GetTick>
 8002ff8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ffc:	f7fe fed4 	bl	8001da8 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b64      	cmp	r3, #100	@ 0x64
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e1a0      	b.n	8003350 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800300e:	4b83      	ldr	r3, [pc, #524]	@ (800321c <HAL_RCC_OscConfig+0x770>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003016:	2b00      	cmp	r3, #0
 8003018:	d0f0      	beq.n	8002ffc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d106      	bne.n	8003030 <HAL_RCC_OscConfig+0x584>
 8003022:	4b7d      	ldr	r3, [pc, #500]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 8003024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003026:	4a7c      	ldr	r2, [pc, #496]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 8003028:	f043 0301 	orr.w	r3, r3, #1
 800302c:	6713      	str	r3, [r2, #112]	@ 0x70
 800302e:	e02d      	b.n	800308c <HAL_RCC_OscConfig+0x5e0>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10c      	bne.n	8003052 <HAL_RCC_OscConfig+0x5a6>
 8003038:	4b77      	ldr	r3, [pc, #476]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 800303a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800303c:	4a76      	ldr	r2, [pc, #472]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 800303e:	f023 0301 	bic.w	r3, r3, #1
 8003042:	6713      	str	r3, [r2, #112]	@ 0x70
 8003044:	4b74      	ldr	r3, [pc, #464]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 8003046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003048:	4a73      	ldr	r2, [pc, #460]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 800304a:	f023 0304 	bic.w	r3, r3, #4
 800304e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003050:	e01c      	b.n	800308c <HAL_RCC_OscConfig+0x5e0>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2b05      	cmp	r3, #5
 8003058:	d10c      	bne.n	8003074 <HAL_RCC_OscConfig+0x5c8>
 800305a:	4b6f      	ldr	r3, [pc, #444]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 800305c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800305e:	4a6e      	ldr	r2, [pc, #440]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 8003060:	f043 0304 	orr.w	r3, r3, #4
 8003064:	6713      	str	r3, [r2, #112]	@ 0x70
 8003066:	4b6c      	ldr	r3, [pc, #432]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 8003068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800306a:	4a6b      	ldr	r2, [pc, #428]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	6713      	str	r3, [r2, #112]	@ 0x70
 8003072:	e00b      	b.n	800308c <HAL_RCC_OscConfig+0x5e0>
 8003074:	4b68      	ldr	r3, [pc, #416]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 8003076:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003078:	4a67      	ldr	r2, [pc, #412]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 800307a:	f023 0301 	bic.w	r3, r3, #1
 800307e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003080:	4b65      	ldr	r3, [pc, #404]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 8003082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003084:	4a64      	ldr	r2, [pc, #400]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 8003086:	f023 0304 	bic.w	r3, r3, #4
 800308a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d015      	beq.n	80030c0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003094:	f7fe fe88 	bl	8001da8 <HAL_GetTick>
 8003098:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800309a:	e00a      	b.n	80030b2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800309c:	f7fe fe84 	bl	8001da8 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e14e      	b.n	8003350 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030b2:	4b59      	ldr	r3, [pc, #356]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 80030b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0ee      	beq.n	800309c <HAL_RCC_OscConfig+0x5f0>
 80030be:	e014      	b.n	80030ea <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c0:	f7fe fe72 	bl	8001da8 <HAL_GetTick>
 80030c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030c6:	e00a      	b.n	80030de <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c8:	f7fe fe6e 	bl	8001da8 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e138      	b.n	8003350 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030de:	4b4e      	ldr	r3, [pc, #312]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 80030e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1ee      	bne.n	80030c8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 812d 	beq.w	800334e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80030f4:	4b48      	ldr	r3, [pc, #288]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80030fc:	2b18      	cmp	r3, #24
 80030fe:	f000 80bd 	beq.w	800327c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003106:	2b02      	cmp	r3, #2
 8003108:	f040 809e 	bne.w	8003248 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800310c:	4b42      	ldr	r3, [pc, #264]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a41      	ldr	r2, [pc, #260]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 8003112:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003116:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003118:	f7fe fe46 	bl	8001da8 <HAL_GetTick>
 800311c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003120:	f7fe fe42 	bl	8001da8 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e10e      	b.n	8003350 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003132:	4b39      	ldr	r3, [pc, #228]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f0      	bne.n	8003120 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800313e:	4b36      	ldr	r3, [pc, #216]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 8003140:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003142:	4b37      	ldr	r3, [pc, #220]	@ (8003220 <HAL_RCC_OscConfig+0x774>)
 8003144:	4013      	ands	r3, r2
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800314e:	0112      	lsls	r2, r2, #4
 8003150:	430a      	orrs	r2, r1
 8003152:	4931      	ldr	r1, [pc, #196]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 8003154:	4313      	orrs	r3, r2
 8003156:	628b      	str	r3, [r1, #40]	@ 0x28
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315c:	3b01      	subs	r3, #1
 800315e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003166:	3b01      	subs	r3, #1
 8003168:	025b      	lsls	r3, r3, #9
 800316a:	b29b      	uxth	r3, r3
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003172:	3b01      	subs	r3, #1
 8003174:	041b      	lsls	r3, r3, #16
 8003176:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003180:	3b01      	subs	r3, #1
 8003182:	061b      	lsls	r3, r3, #24
 8003184:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003188:	4923      	ldr	r1, [pc, #140]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 800318a:	4313      	orrs	r3, r2
 800318c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800318e:	4b22      	ldr	r3, [pc, #136]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 8003190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003192:	4a21      	ldr	r2, [pc, #132]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 8003194:	f023 0301 	bic.w	r3, r3, #1
 8003198:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800319a:	4b1f      	ldr	r3, [pc, #124]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 800319c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800319e:	4b21      	ldr	r3, [pc, #132]	@ (8003224 <HAL_RCC_OscConfig+0x778>)
 80031a0:	4013      	ands	r3, r2
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80031a6:	00d2      	lsls	r2, r2, #3
 80031a8:	491b      	ldr	r1, [pc, #108]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80031ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 80031b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b2:	f023 020c 	bic.w	r2, r3, #12
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ba:	4917      	ldr	r1, [pc, #92]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80031c0:	4b15      	ldr	r3, [pc, #84]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 80031c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c4:	f023 0202 	bic.w	r2, r3, #2
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031cc:	4912      	ldr	r1, [pc, #72]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80031d2:	4b11      	ldr	r3, [pc, #68]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 80031d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d6:	4a10      	ldr	r2, [pc, #64]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 80031d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031de:	4b0e      	ldr	r3, [pc, #56]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 80031e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e2:	4a0d      	ldr	r2, [pc, #52]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 80031e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80031ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 80031ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 80031f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80031f6:	4b08      	ldr	r3, [pc, #32]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 80031f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031fa:	4a07      	ldr	r2, [pc, #28]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 80031fc:	f043 0301 	orr.w	r3, r3, #1
 8003200:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003202:	4b05      	ldr	r3, [pc, #20]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a04      	ldr	r2, [pc, #16]	@ (8003218 <HAL_RCC_OscConfig+0x76c>)
 8003208:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800320c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320e:	f7fe fdcb 	bl	8001da8 <HAL_GetTick>
 8003212:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003214:	e011      	b.n	800323a <HAL_RCC_OscConfig+0x78e>
 8003216:	bf00      	nop
 8003218:	58024400 	.word	0x58024400
 800321c:	58024800 	.word	0x58024800
 8003220:	fffffc0c 	.word	0xfffffc0c
 8003224:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003228:	f7fe fdbe 	bl	8001da8 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e08a      	b.n	8003350 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800323a:	4b47      	ldr	r3, [pc, #284]	@ (8003358 <HAL_RCC_OscConfig+0x8ac>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0f0      	beq.n	8003228 <HAL_RCC_OscConfig+0x77c>
 8003246:	e082      	b.n	800334e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003248:	4b43      	ldr	r3, [pc, #268]	@ (8003358 <HAL_RCC_OscConfig+0x8ac>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a42      	ldr	r2, [pc, #264]	@ (8003358 <HAL_RCC_OscConfig+0x8ac>)
 800324e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003252:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003254:	f7fe fda8 	bl	8001da8 <HAL_GetTick>
 8003258:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800325c:	f7fe fda4 	bl	8001da8 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e070      	b.n	8003350 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800326e:	4b3a      	ldr	r3, [pc, #232]	@ (8003358 <HAL_RCC_OscConfig+0x8ac>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f0      	bne.n	800325c <HAL_RCC_OscConfig+0x7b0>
 800327a:	e068      	b.n	800334e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800327c:	4b36      	ldr	r3, [pc, #216]	@ (8003358 <HAL_RCC_OscConfig+0x8ac>)
 800327e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003280:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003282:	4b35      	ldr	r3, [pc, #212]	@ (8003358 <HAL_RCC_OscConfig+0x8ac>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003286:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328c:	2b01      	cmp	r3, #1
 800328e:	d031      	beq.n	80032f4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	f003 0203 	and.w	r2, r3, #3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800329a:	429a      	cmp	r2, r3
 800329c:	d12a      	bne.n	80032f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	091b      	lsrs	r3, r3, #4
 80032a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d122      	bne.n	80032f4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d11a      	bne.n	80032f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	0a5b      	lsrs	r3, r3, #9
 80032c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ca:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d111      	bne.n	80032f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	0c1b      	lsrs	r3, r3, #16
 80032d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80032de:	429a      	cmp	r2, r3
 80032e0:	d108      	bne.n	80032f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	0e1b      	lsrs	r3, r3, #24
 80032e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d001      	beq.n	80032f8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e02b      	b.n	8003350 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80032f8:	4b17      	ldr	r3, [pc, #92]	@ (8003358 <HAL_RCC_OscConfig+0x8ac>)
 80032fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032fc:	08db      	lsrs	r3, r3, #3
 80032fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003302:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	429a      	cmp	r2, r3
 800330c:	d01f      	beq.n	800334e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800330e:	4b12      	ldr	r3, [pc, #72]	@ (8003358 <HAL_RCC_OscConfig+0x8ac>)
 8003310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003312:	4a11      	ldr	r2, [pc, #68]	@ (8003358 <HAL_RCC_OscConfig+0x8ac>)
 8003314:	f023 0301 	bic.w	r3, r3, #1
 8003318:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800331a:	f7fe fd45 	bl	8001da8 <HAL_GetTick>
 800331e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003320:	bf00      	nop
 8003322:	f7fe fd41 	bl	8001da8 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332a:	4293      	cmp	r3, r2
 800332c:	d0f9      	beq.n	8003322 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800332e:	4b0a      	ldr	r3, [pc, #40]	@ (8003358 <HAL_RCC_OscConfig+0x8ac>)
 8003330:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003332:	4b0a      	ldr	r3, [pc, #40]	@ (800335c <HAL_RCC_OscConfig+0x8b0>)
 8003334:	4013      	ands	r3, r2
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800333a:	00d2      	lsls	r2, r2, #3
 800333c:	4906      	ldr	r1, [pc, #24]	@ (8003358 <HAL_RCC_OscConfig+0x8ac>)
 800333e:	4313      	orrs	r3, r2
 8003340:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003342:	4b05      	ldr	r3, [pc, #20]	@ (8003358 <HAL_RCC_OscConfig+0x8ac>)
 8003344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003346:	4a04      	ldr	r2, [pc, #16]	@ (8003358 <HAL_RCC_OscConfig+0x8ac>)
 8003348:	f043 0301 	orr.w	r3, r3, #1
 800334c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3730      	adds	r7, #48	@ 0x30
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	58024400 	.word	0x58024400
 800335c:	ffff0007 	.word	0xffff0007

08003360 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e19c      	b.n	80036ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003374:	4b8a      	ldr	r3, [pc, #552]	@ (80035a0 <HAL_RCC_ClockConfig+0x240>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 030f 	and.w	r3, r3, #15
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d910      	bls.n	80033a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003382:	4b87      	ldr	r3, [pc, #540]	@ (80035a0 <HAL_RCC_ClockConfig+0x240>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f023 020f 	bic.w	r2, r3, #15
 800338a:	4985      	ldr	r1, [pc, #532]	@ (80035a0 <HAL_RCC_ClockConfig+0x240>)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	4313      	orrs	r3, r2
 8003390:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003392:	4b83      	ldr	r3, [pc, #524]	@ (80035a0 <HAL_RCC_ClockConfig+0x240>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 030f 	and.w	r3, r3, #15
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	429a      	cmp	r2, r3
 800339e:	d001      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e184      	b.n	80036ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d010      	beq.n	80033d2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691a      	ldr	r2, [r3, #16]
 80033b4:	4b7b      	ldr	r3, [pc, #492]	@ (80035a4 <HAL_RCC_ClockConfig+0x244>)
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033bc:	429a      	cmp	r2, r3
 80033be:	d908      	bls.n	80033d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033c0:	4b78      	ldr	r3, [pc, #480]	@ (80035a4 <HAL_RCC_ClockConfig+0x244>)
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	4975      	ldr	r1, [pc, #468]	@ (80035a4 <HAL_RCC_ClockConfig+0x244>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0308 	and.w	r3, r3, #8
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d010      	beq.n	8003400 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	695a      	ldr	r2, [r3, #20]
 80033e2:	4b70      	ldr	r3, [pc, #448]	@ (80035a4 <HAL_RCC_ClockConfig+0x244>)
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d908      	bls.n	8003400 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80033ee:	4b6d      	ldr	r3, [pc, #436]	@ (80035a4 <HAL_RCC_ClockConfig+0x244>)
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	496a      	ldr	r1, [pc, #424]	@ (80035a4 <HAL_RCC_ClockConfig+0x244>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0310 	and.w	r3, r3, #16
 8003408:	2b00      	cmp	r3, #0
 800340a:	d010      	beq.n	800342e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	699a      	ldr	r2, [r3, #24]
 8003410:	4b64      	ldr	r3, [pc, #400]	@ (80035a4 <HAL_RCC_ClockConfig+0x244>)
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003418:	429a      	cmp	r2, r3
 800341a:	d908      	bls.n	800342e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800341c:	4b61      	ldr	r3, [pc, #388]	@ (80035a4 <HAL_RCC_ClockConfig+0x244>)
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	495e      	ldr	r1, [pc, #376]	@ (80035a4 <HAL_RCC_ClockConfig+0x244>)
 800342a:	4313      	orrs	r3, r2
 800342c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0320 	and.w	r3, r3, #32
 8003436:	2b00      	cmp	r3, #0
 8003438:	d010      	beq.n	800345c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69da      	ldr	r2, [r3, #28]
 800343e:	4b59      	ldr	r3, [pc, #356]	@ (80035a4 <HAL_RCC_ClockConfig+0x244>)
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003446:	429a      	cmp	r2, r3
 8003448:	d908      	bls.n	800345c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800344a:	4b56      	ldr	r3, [pc, #344]	@ (80035a4 <HAL_RCC_ClockConfig+0x244>)
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	4953      	ldr	r1, [pc, #332]	@ (80035a4 <HAL_RCC_ClockConfig+0x244>)
 8003458:	4313      	orrs	r3, r2
 800345a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d010      	beq.n	800348a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	4b4d      	ldr	r3, [pc, #308]	@ (80035a4 <HAL_RCC_ClockConfig+0x244>)
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	f003 030f 	and.w	r3, r3, #15
 8003474:	429a      	cmp	r2, r3
 8003476:	d908      	bls.n	800348a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003478:	4b4a      	ldr	r3, [pc, #296]	@ (80035a4 <HAL_RCC_ClockConfig+0x244>)
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	f023 020f 	bic.w	r2, r3, #15
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	4947      	ldr	r1, [pc, #284]	@ (80035a4 <HAL_RCC_ClockConfig+0x244>)
 8003486:	4313      	orrs	r3, r2
 8003488:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d055      	beq.n	8003542 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003496:	4b43      	ldr	r3, [pc, #268]	@ (80035a4 <HAL_RCC_ClockConfig+0x244>)
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	4940      	ldr	r1, [pc, #256]	@ (80035a4 <HAL_RCC_ClockConfig+0x244>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d107      	bne.n	80034c0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034b0:	4b3c      	ldr	r3, [pc, #240]	@ (80035a4 <HAL_RCC_ClockConfig+0x244>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d121      	bne.n	8003500 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e0f6      	b.n	80036ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	2b03      	cmp	r3, #3
 80034c6:	d107      	bne.n	80034d8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034c8:	4b36      	ldr	r3, [pc, #216]	@ (80035a4 <HAL_RCC_ClockConfig+0x244>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d115      	bne.n	8003500 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e0ea      	b.n	80036ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d107      	bne.n	80034f0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034e0:	4b30      	ldr	r3, [pc, #192]	@ (80035a4 <HAL_RCC_ClockConfig+0x244>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d109      	bne.n	8003500 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e0de      	b.n	80036ae <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034f0:	4b2c      	ldr	r3, [pc, #176]	@ (80035a4 <HAL_RCC_ClockConfig+0x244>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e0d6      	b.n	80036ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003500:	4b28      	ldr	r3, [pc, #160]	@ (80035a4 <HAL_RCC_ClockConfig+0x244>)
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	f023 0207 	bic.w	r2, r3, #7
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	4925      	ldr	r1, [pc, #148]	@ (80035a4 <HAL_RCC_ClockConfig+0x244>)
 800350e:	4313      	orrs	r3, r2
 8003510:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003512:	f7fe fc49 	bl	8001da8 <HAL_GetTick>
 8003516:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003518:	e00a      	b.n	8003530 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800351a:	f7fe fc45 	bl	8001da8 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003528:	4293      	cmp	r3, r2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e0be      	b.n	80036ae <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003530:	4b1c      	ldr	r3, [pc, #112]	@ (80035a4 <HAL_RCC_ClockConfig+0x244>)
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	429a      	cmp	r2, r3
 8003540:	d1eb      	bne.n	800351a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d010      	beq.n	8003570 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68da      	ldr	r2, [r3, #12]
 8003552:	4b14      	ldr	r3, [pc, #80]	@ (80035a4 <HAL_RCC_ClockConfig+0x244>)
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	429a      	cmp	r2, r3
 800355c:	d208      	bcs.n	8003570 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800355e:	4b11      	ldr	r3, [pc, #68]	@ (80035a4 <HAL_RCC_ClockConfig+0x244>)
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	f023 020f 	bic.w	r2, r3, #15
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	490e      	ldr	r1, [pc, #56]	@ (80035a4 <HAL_RCC_ClockConfig+0x244>)
 800356c:	4313      	orrs	r3, r2
 800356e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003570:	4b0b      	ldr	r3, [pc, #44]	@ (80035a0 <HAL_RCC_ClockConfig+0x240>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 030f 	and.w	r3, r3, #15
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	429a      	cmp	r2, r3
 800357c:	d214      	bcs.n	80035a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800357e:	4b08      	ldr	r3, [pc, #32]	@ (80035a0 <HAL_RCC_ClockConfig+0x240>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f023 020f 	bic.w	r2, r3, #15
 8003586:	4906      	ldr	r1, [pc, #24]	@ (80035a0 <HAL_RCC_ClockConfig+0x240>)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	4313      	orrs	r3, r2
 800358c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800358e:	4b04      	ldr	r3, [pc, #16]	@ (80035a0 <HAL_RCC_ClockConfig+0x240>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 030f 	and.w	r3, r3, #15
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	429a      	cmp	r2, r3
 800359a:	d005      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e086      	b.n	80036ae <HAL_RCC_ClockConfig+0x34e>
 80035a0:	52002000 	.word	0x52002000
 80035a4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d010      	beq.n	80035d6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691a      	ldr	r2, [r3, #16]
 80035b8:	4b3f      	ldr	r3, [pc, #252]	@ (80036b8 <HAL_RCC_ClockConfig+0x358>)
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d208      	bcs.n	80035d6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80035c4:	4b3c      	ldr	r3, [pc, #240]	@ (80036b8 <HAL_RCC_ClockConfig+0x358>)
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	4939      	ldr	r1, [pc, #228]	@ (80036b8 <HAL_RCC_ClockConfig+0x358>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0308 	and.w	r3, r3, #8
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d010      	beq.n	8003604 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695a      	ldr	r2, [r3, #20]
 80035e6:	4b34      	ldr	r3, [pc, #208]	@ (80036b8 <HAL_RCC_ClockConfig+0x358>)
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d208      	bcs.n	8003604 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80035f2:	4b31      	ldr	r3, [pc, #196]	@ (80036b8 <HAL_RCC_ClockConfig+0x358>)
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	492e      	ldr	r1, [pc, #184]	@ (80036b8 <HAL_RCC_ClockConfig+0x358>)
 8003600:	4313      	orrs	r3, r2
 8003602:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0310 	and.w	r3, r3, #16
 800360c:	2b00      	cmp	r3, #0
 800360e:	d010      	beq.n	8003632 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	699a      	ldr	r2, [r3, #24]
 8003614:	4b28      	ldr	r3, [pc, #160]	@ (80036b8 <HAL_RCC_ClockConfig+0x358>)
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800361c:	429a      	cmp	r2, r3
 800361e:	d208      	bcs.n	8003632 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003620:	4b25      	ldr	r3, [pc, #148]	@ (80036b8 <HAL_RCC_ClockConfig+0x358>)
 8003622:	69db      	ldr	r3, [r3, #28]
 8003624:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	4922      	ldr	r1, [pc, #136]	@ (80036b8 <HAL_RCC_ClockConfig+0x358>)
 800362e:	4313      	orrs	r3, r2
 8003630:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0320 	and.w	r3, r3, #32
 800363a:	2b00      	cmp	r3, #0
 800363c:	d010      	beq.n	8003660 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	69da      	ldr	r2, [r3, #28]
 8003642:	4b1d      	ldr	r3, [pc, #116]	@ (80036b8 <HAL_RCC_ClockConfig+0x358>)
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800364a:	429a      	cmp	r2, r3
 800364c:	d208      	bcs.n	8003660 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800364e:	4b1a      	ldr	r3, [pc, #104]	@ (80036b8 <HAL_RCC_ClockConfig+0x358>)
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	4917      	ldr	r1, [pc, #92]	@ (80036b8 <HAL_RCC_ClockConfig+0x358>)
 800365c:	4313      	orrs	r3, r2
 800365e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003660:	f000 f834 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 8003664:	4602      	mov	r2, r0
 8003666:	4b14      	ldr	r3, [pc, #80]	@ (80036b8 <HAL_RCC_ClockConfig+0x358>)
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	0a1b      	lsrs	r3, r3, #8
 800366c:	f003 030f 	and.w	r3, r3, #15
 8003670:	4912      	ldr	r1, [pc, #72]	@ (80036bc <HAL_RCC_ClockConfig+0x35c>)
 8003672:	5ccb      	ldrb	r3, [r1, r3]
 8003674:	f003 031f 	and.w	r3, r3, #31
 8003678:	fa22 f303 	lsr.w	r3, r2, r3
 800367c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800367e:	4b0e      	ldr	r3, [pc, #56]	@ (80036b8 <HAL_RCC_ClockConfig+0x358>)
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	4a0d      	ldr	r2, [pc, #52]	@ (80036bc <HAL_RCC_ClockConfig+0x35c>)
 8003688:	5cd3      	ldrb	r3, [r2, r3]
 800368a:	f003 031f 	and.w	r3, r3, #31
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	fa22 f303 	lsr.w	r3, r2, r3
 8003694:	4a0a      	ldr	r2, [pc, #40]	@ (80036c0 <HAL_RCC_ClockConfig+0x360>)
 8003696:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003698:	4a0a      	ldr	r2, [pc, #40]	@ (80036c4 <HAL_RCC_ClockConfig+0x364>)
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800369e:	4b0a      	ldr	r3, [pc, #40]	@ (80036c8 <HAL_RCC_ClockConfig+0x368>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fe fb36 	bl	8001d14 <HAL_InitTick>
 80036a8:	4603      	mov	r3, r0
 80036aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80036ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3718      	adds	r7, #24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	58024400 	.word	0x58024400
 80036bc:	08009e64 	.word	0x08009e64
 80036c0:	24000004 	.word	0x24000004
 80036c4:	24000000 	.word	0x24000000
 80036c8:	24000024 	.word	0x24000024

080036cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b089      	sub	sp, #36	@ 0x24
 80036d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036d2:	4bb3      	ldr	r3, [pc, #716]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036da:	2b18      	cmp	r3, #24
 80036dc:	f200 8155 	bhi.w	800398a <HAL_RCC_GetSysClockFreq+0x2be>
 80036e0:	a201      	add	r2, pc, #4	@ (adr r2, 80036e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80036e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e6:	bf00      	nop
 80036e8:	0800374d 	.word	0x0800374d
 80036ec:	0800398b 	.word	0x0800398b
 80036f0:	0800398b 	.word	0x0800398b
 80036f4:	0800398b 	.word	0x0800398b
 80036f8:	0800398b 	.word	0x0800398b
 80036fc:	0800398b 	.word	0x0800398b
 8003700:	0800398b 	.word	0x0800398b
 8003704:	0800398b 	.word	0x0800398b
 8003708:	08003773 	.word	0x08003773
 800370c:	0800398b 	.word	0x0800398b
 8003710:	0800398b 	.word	0x0800398b
 8003714:	0800398b 	.word	0x0800398b
 8003718:	0800398b 	.word	0x0800398b
 800371c:	0800398b 	.word	0x0800398b
 8003720:	0800398b 	.word	0x0800398b
 8003724:	0800398b 	.word	0x0800398b
 8003728:	08003779 	.word	0x08003779
 800372c:	0800398b 	.word	0x0800398b
 8003730:	0800398b 	.word	0x0800398b
 8003734:	0800398b 	.word	0x0800398b
 8003738:	0800398b 	.word	0x0800398b
 800373c:	0800398b 	.word	0x0800398b
 8003740:	0800398b 	.word	0x0800398b
 8003744:	0800398b 	.word	0x0800398b
 8003748:	0800377f 	.word	0x0800377f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800374c:	4b94      	ldr	r3, [pc, #592]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0320 	and.w	r3, r3, #32
 8003754:	2b00      	cmp	r3, #0
 8003756:	d009      	beq.n	800376c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003758:	4b91      	ldr	r3, [pc, #580]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	08db      	lsrs	r3, r3, #3
 800375e:	f003 0303 	and.w	r3, r3, #3
 8003762:	4a90      	ldr	r2, [pc, #576]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003764:	fa22 f303 	lsr.w	r3, r2, r3
 8003768:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800376a:	e111      	b.n	8003990 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800376c:	4b8d      	ldr	r3, [pc, #564]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800376e:	61bb      	str	r3, [r7, #24]
      break;
 8003770:	e10e      	b.n	8003990 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003772:	4b8d      	ldr	r3, [pc, #564]	@ (80039a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003774:	61bb      	str	r3, [r7, #24]
      break;
 8003776:	e10b      	b.n	8003990 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003778:	4b8c      	ldr	r3, [pc, #560]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 800377a:	61bb      	str	r3, [r7, #24]
      break;
 800377c:	e108      	b.n	8003990 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800377e:	4b88      	ldr	r3, [pc, #544]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003782:	f003 0303 	and.w	r3, r3, #3
 8003786:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003788:	4b85      	ldr	r3, [pc, #532]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800378a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800378c:	091b      	lsrs	r3, r3, #4
 800378e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003792:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003794:	4b82      	ldr	r3, [pc, #520]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800379e:	4b80      	ldr	r3, [pc, #512]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037a2:	08db      	lsrs	r3, r3, #3
 80037a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	fb02 f303 	mul.w	r3, r2, r3
 80037ae:	ee07 3a90 	vmov	s15, r3
 80037b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037b6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 80e1 	beq.w	8003984 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	f000 8083 	beq.w	80038d0 <HAL_RCC_GetSysClockFreq+0x204>
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	f200 80a1 	bhi.w	8003914 <HAL_RCC_GetSysClockFreq+0x248>
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d003      	beq.n	80037e0 <HAL_RCC_GetSysClockFreq+0x114>
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d056      	beq.n	800388c <HAL_RCC_GetSysClockFreq+0x1c0>
 80037de:	e099      	b.n	8003914 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037e0:	4b6f      	ldr	r3, [pc, #444]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0320 	and.w	r3, r3, #32
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d02d      	beq.n	8003848 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80037ec:	4b6c      	ldr	r3, [pc, #432]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	08db      	lsrs	r3, r3, #3
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	4a6b      	ldr	r2, [pc, #428]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80037f8:	fa22 f303 	lsr.w	r3, r2, r3
 80037fc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	ee07 3a90 	vmov	s15, r3
 8003804:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	ee07 3a90 	vmov	s15, r3
 800380e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003816:	4b62      	ldr	r3, [pc, #392]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800381e:	ee07 3a90 	vmov	s15, r3
 8003822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003826:	ed97 6a02 	vldr	s12, [r7, #8]
 800382a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80039b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800382e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003836:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800383a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800383e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003842:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003846:	e087      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	ee07 3a90 	vmov	s15, r3
 800384e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003852:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80039b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800385a:	4b51      	ldr	r3, [pc, #324]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800385e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003862:	ee07 3a90 	vmov	s15, r3
 8003866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800386a:	ed97 6a02 	vldr	s12, [r7, #8]
 800386e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80039b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800387a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800387e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003886:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800388a:	e065      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	ee07 3a90 	vmov	s15, r3
 8003892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003896:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80039b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800389a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800389e:	4b40      	ldr	r3, [pc, #256]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038a6:	ee07 3a90 	vmov	s15, r3
 80038aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80038b2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80039b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038ce:	e043      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	ee07 3a90 	vmov	s15, r3
 80038d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038da:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80039bc <HAL_RCC_GetSysClockFreq+0x2f0>
 80038de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038e2:	4b2f      	ldr	r3, [pc, #188]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ea:	ee07 3a90 	vmov	s15, r3
 80038ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80038f6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80039b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003902:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800390a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800390e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003912:	e021      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	ee07 3a90 	vmov	s15, r3
 800391a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800391e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80039b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003926:	4b1e      	ldr	r3, [pc, #120]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800392e:	ee07 3a90 	vmov	s15, r3
 8003932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003936:	ed97 6a02 	vldr	s12, [r7, #8]
 800393a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80039b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800393e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003946:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800394a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800394e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003952:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003956:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003958:	4b11      	ldr	r3, [pc, #68]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800395a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395c:	0a5b      	lsrs	r3, r3, #9
 800395e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003962:	3301      	adds	r3, #1
 8003964:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	ee07 3a90 	vmov	s15, r3
 800396c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003970:	edd7 6a07 	vldr	s13, [r7, #28]
 8003974:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003978:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800397c:	ee17 3a90 	vmov	r3, s15
 8003980:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003982:	e005      	b.n	8003990 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003984:	2300      	movs	r3, #0
 8003986:	61bb      	str	r3, [r7, #24]
      break;
 8003988:	e002      	b.n	8003990 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800398a:	4b07      	ldr	r3, [pc, #28]	@ (80039a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800398c:	61bb      	str	r3, [r7, #24]
      break;
 800398e:	bf00      	nop
  }

  return sysclockfreq;
 8003990:	69bb      	ldr	r3, [r7, #24]
}
 8003992:	4618      	mov	r0, r3
 8003994:	3724      	adds	r7, #36	@ 0x24
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	58024400 	.word	0x58024400
 80039a4:	03d09000 	.word	0x03d09000
 80039a8:	003d0900 	.word	0x003d0900
 80039ac:	017d7840 	.word	0x017d7840
 80039b0:	46000000 	.word	0x46000000
 80039b4:	4c742400 	.word	0x4c742400
 80039b8:	4a742400 	.word	0x4a742400
 80039bc:	4bbebc20 	.word	0x4bbebc20

080039c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80039c6:	f7ff fe81 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 80039ca:	4602      	mov	r2, r0
 80039cc:	4b10      	ldr	r3, [pc, #64]	@ (8003a10 <HAL_RCC_GetHCLKFreq+0x50>)
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	0a1b      	lsrs	r3, r3, #8
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	490f      	ldr	r1, [pc, #60]	@ (8003a14 <HAL_RCC_GetHCLKFreq+0x54>)
 80039d8:	5ccb      	ldrb	r3, [r1, r3]
 80039da:	f003 031f 	and.w	r3, r3, #31
 80039de:	fa22 f303 	lsr.w	r3, r2, r3
 80039e2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80039e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003a10 <HAL_RCC_GetHCLKFreq+0x50>)
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	f003 030f 	and.w	r3, r3, #15
 80039ec:	4a09      	ldr	r2, [pc, #36]	@ (8003a14 <HAL_RCC_GetHCLKFreq+0x54>)
 80039ee:	5cd3      	ldrb	r3, [r2, r3]
 80039f0:	f003 031f 	and.w	r3, r3, #31
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	fa22 f303 	lsr.w	r3, r2, r3
 80039fa:	4a07      	ldr	r2, [pc, #28]	@ (8003a18 <HAL_RCC_GetHCLKFreq+0x58>)
 80039fc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80039fe:	4a07      	ldr	r2, [pc, #28]	@ (8003a1c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003a04:	4b04      	ldr	r3, [pc, #16]	@ (8003a18 <HAL_RCC_GetHCLKFreq+0x58>)
 8003a06:	681b      	ldr	r3, [r3, #0]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	58024400 	.word	0x58024400
 8003a14:	08009e64 	.word	0x08009e64
 8003a18:	24000004 	.word	0x24000004
 8003a1c:	24000000 	.word	0x24000000

08003a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003a24:	f7ff ffcc 	bl	80039c0 <HAL_RCC_GetHCLKFreq>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	4b06      	ldr	r3, [pc, #24]	@ (8003a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	091b      	lsrs	r3, r3, #4
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	4904      	ldr	r1, [pc, #16]	@ (8003a48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a36:	5ccb      	ldrb	r3, [r1, r3]
 8003a38:	f003 031f 	and.w	r3, r3, #31
 8003a3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	58024400 	.word	0x58024400
 8003a48:	08009e64 	.word	0x08009e64

08003a4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003a50:	f7ff ffb6 	bl	80039c0 <HAL_RCC_GetHCLKFreq>
 8003a54:	4602      	mov	r2, r0
 8003a56:	4b06      	ldr	r3, [pc, #24]	@ (8003a70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	0a1b      	lsrs	r3, r3, #8
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	4904      	ldr	r1, [pc, #16]	@ (8003a74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a62:	5ccb      	ldrb	r3, [r1, r3]
 8003a64:	f003 031f 	and.w	r3, r3, #31
 8003a68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	58024400 	.word	0x58024400
 8003a74:	08009e64 	.word	0x08009e64

08003a78 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a7c:	b0ca      	sub	sp, #296	@ 0x128
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a84:	2300      	movs	r3, #0
 8003a86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a98:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003a9c:	2500      	movs	r5, #0
 8003a9e:	ea54 0305 	orrs.w	r3, r4, r5
 8003aa2:	d049      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003aaa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003aae:	d02f      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003ab0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ab4:	d828      	bhi.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003ab6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003aba:	d01a      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003abc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ac0:	d822      	bhi.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003ac6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003aca:	d007      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003acc:	e01c      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ace:	4bb8      	ldr	r3, [pc, #736]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad2:	4ab7      	ldr	r2, [pc, #732]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ad4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ad8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003ada:	e01a      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae0:	3308      	adds	r3, #8
 8003ae2:	2102      	movs	r1, #2
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f001 fc8f 	bl	8005408 <RCCEx_PLL2_Config>
 8003aea:	4603      	mov	r3, r0
 8003aec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003af0:	e00f      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af6:	3328      	adds	r3, #40	@ 0x28
 8003af8:	2102      	movs	r1, #2
 8003afa:	4618      	mov	r0, r3
 8003afc:	f001 fd36 	bl	800556c <RCCEx_PLL3_Config>
 8003b00:	4603      	mov	r3, r0
 8003b02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003b06:	e004      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b0e:	e000      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003b10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10a      	bne.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003b1a:	4ba5      	ldr	r3, [pc, #660]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b1e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b28:	4aa1      	ldr	r2, [pc, #644]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b2a:	430b      	orrs	r3, r1
 8003b2c:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b2e:	e003      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b40:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003b44:	f04f 0900 	mov.w	r9, #0
 8003b48:	ea58 0309 	orrs.w	r3, r8, r9
 8003b4c:	d047      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b54:	2b04      	cmp	r3, #4
 8003b56:	d82a      	bhi.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003b58:	a201      	add	r2, pc, #4	@ (adr r2, 8003b60 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5e:	bf00      	nop
 8003b60:	08003b75 	.word	0x08003b75
 8003b64:	08003b83 	.word	0x08003b83
 8003b68:	08003b99 	.word	0x08003b99
 8003b6c:	08003bb7 	.word	0x08003bb7
 8003b70:	08003bb7 	.word	0x08003bb7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b74:	4b8e      	ldr	r3, [pc, #568]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b78:	4a8d      	ldr	r2, [pc, #564]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b80:	e01a      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b86:	3308      	adds	r3, #8
 8003b88:	2100      	movs	r1, #0
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f001 fc3c 	bl	8005408 <RCCEx_PLL2_Config>
 8003b90:	4603      	mov	r3, r0
 8003b92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b96:	e00f      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b9c:	3328      	adds	r3, #40	@ 0x28
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f001 fce3 	bl	800556c <RCCEx_PLL3_Config>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bac:	e004      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bb4:	e000      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003bb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10a      	bne.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bc0:	4b7b      	ldr	r3, [pc, #492]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bc4:	f023 0107 	bic.w	r1, r3, #7
 8003bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bce:	4a78      	ldr	r2, [pc, #480]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bd0:	430b      	orrs	r3, r1
 8003bd2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003bd4:	e003      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003bea:	f04f 0b00 	mov.w	fp, #0
 8003bee:	ea5a 030b 	orrs.w	r3, sl, fp
 8003bf2:	d04c      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bfe:	d030      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003c00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c04:	d829      	bhi.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003c06:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c08:	d02d      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003c0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c0c:	d825      	bhi.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003c0e:	2b80      	cmp	r3, #128	@ 0x80
 8003c10:	d018      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003c12:	2b80      	cmp	r3, #128	@ 0x80
 8003c14:	d821      	bhi.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d002      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003c1a:	2b40      	cmp	r3, #64	@ 0x40
 8003c1c:	d007      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003c1e:	e01c      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c20:	4b63      	ldr	r3, [pc, #396]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c24:	4a62      	ldr	r2, [pc, #392]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003c2c:	e01c      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c32:	3308      	adds	r3, #8
 8003c34:	2100      	movs	r1, #0
 8003c36:	4618      	mov	r0, r3
 8003c38:	f001 fbe6 	bl	8005408 <RCCEx_PLL2_Config>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003c42:	e011      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c48:	3328      	adds	r3, #40	@ 0x28
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f001 fc8d 	bl	800556c <RCCEx_PLL3_Config>
 8003c52:	4603      	mov	r3, r0
 8003c54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003c58:	e006      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c60:	e002      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003c62:	bf00      	nop
 8003c64:	e000      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003c66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10a      	bne.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003c70:	4b4f      	ldr	r3, [pc, #316]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c74:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c7e:	4a4c      	ldr	r2, [pc, #304]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c80:	430b      	orrs	r3, r1
 8003c82:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c84:	e003      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c96:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003c9a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003ca4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003ca8:	460b      	mov	r3, r1
 8003caa:	4313      	orrs	r3, r2
 8003cac:	d053      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003cb6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003cba:	d035      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003cbc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003cc0:	d82e      	bhi.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003cc2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003cc6:	d031      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003cc8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003ccc:	d828      	bhi.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003cce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cd2:	d01a      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003cd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cd8:	d822      	bhi.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003cde:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ce2:	d007      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003ce4:	e01c      	b.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ce6:	4b32      	ldr	r3, [pc, #200]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cea:	4a31      	ldr	r2, [pc, #196]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cf0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cf2:	e01c      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf8:	3308      	adds	r3, #8
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f001 fb83 	bl	8005408 <RCCEx_PLL2_Config>
 8003d02:	4603      	mov	r3, r0
 8003d04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003d08:	e011      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d0e:	3328      	adds	r3, #40	@ 0x28
 8003d10:	2100      	movs	r1, #0
 8003d12:	4618      	mov	r0, r3
 8003d14:	f001 fc2a 	bl	800556c <RCCEx_PLL3_Config>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d1e:	e006      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d26:	e002      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003d28:	bf00      	nop
 8003d2a:	e000      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003d2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10b      	bne.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003d36:	4b1e      	ldr	r3, [pc, #120]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d3a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003d46:	4a1a      	ldr	r2, [pc, #104]	@ (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d48:	430b      	orrs	r3, r1
 8003d4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d4c:	e003      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003d62:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003d66:	2300      	movs	r3, #0
 8003d68:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003d6c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003d70:	460b      	mov	r3, r1
 8003d72:	4313      	orrs	r3, r2
 8003d74:	d056      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d7a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003d7e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d82:	d038      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003d84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d88:	d831      	bhi.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003d8a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d8e:	d034      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003d90:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003d94:	d82b      	bhi.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003d96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d9a:	d01d      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003d9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003da0:	d825      	bhi.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d006      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003da6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003daa:	d00a      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003dac:	e01f      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003dae:	bf00      	nop
 8003db0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003db4:	4ba2      	ldr	r3, [pc, #648]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db8:	4aa1      	ldr	r2, [pc, #644]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003dc0:	e01c      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc6:	3308      	adds	r3, #8
 8003dc8:	2100      	movs	r1, #0
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f001 fb1c 	bl	8005408 <RCCEx_PLL2_Config>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003dd6:	e011      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ddc:	3328      	adds	r3, #40	@ 0x28
 8003dde:	2100      	movs	r1, #0
 8003de0:	4618      	mov	r0, r3
 8003de2:	f001 fbc3 	bl	800556c <RCCEx_PLL3_Config>
 8003de6:	4603      	mov	r3, r0
 8003de8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003dec:	e006      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003df4:	e002      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003df6:	bf00      	nop
 8003df8:	e000      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003dfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10b      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003e04:	4b8e      	ldr	r3, [pc, #568]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e08:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e10:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003e14:	4a8a      	ldr	r2, [pc, #552]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e16:	430b      	orrs	r3, r1
 8003e18:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e1a:	e003      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003e30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003e34:	2300      	movs	r3, #0
 8003e36:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003e3a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003e3e:	460b      	mov	r3, r1
 8003e40:	4313      	orrs	r3, r2
 8003e42:	d03a      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e4a:	2b30      	cmp	r3, #48	@ 0x30
 8003e4c:	d01f      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003e4e:	2b30      	cmp	r3, #48	@ 0x30
 8003e50:	d819      	bhi.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003e52:	2b20      	cmp	r3, #32
 8003e54:	d00c      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003e56:	2b20      	cmp	r3, #32
 8003e58:	d815      	bhi.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d019      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003e5e:	2b10      	cmp	r3, #16
 8003e60:	d111      	bne.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e62:	4b77      	ldr	r3, [pc, #476]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e66:	4a76      	ldr	r2, [pc, #472]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003e6e:	e011      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e74:	3308      	adds	r3, #8
 8003e76:	2102      	movs	r1, #2
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f001 fac5 	bl	8005408 <RCCEx_PLL2_Config>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003e84:	e006      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e8c:	e002      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003e8e:	bf00      	nop
 8003e90:	e000      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003e92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10a      	bne.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003e9c:	4b68      	ldr	r3, [pc, #416]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ea0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eaa:	4a65      	ldr	r2, [pc, #404]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003eac:	430b      	orrs	r3, r1
 8003eae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003eb0:	e003      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003ec6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003eca:	2300      	movs	r3, #0
 8003ecc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003ed0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	d051      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ede:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ee0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ee4:	d035      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003ee6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003eea:	d82e      	bhi.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003eec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ef0:	d031      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003ef2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ef6:	d828      	bhi.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ef8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003efc:	d01a      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003efe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f02:	d822      	bhi.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003f08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f0c:	d007      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003f0e:	e01c      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f10:	4b4b      	ldr	r3, [pc, #300]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f14:	4a4a      	ldr	r2, [pc, #296]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f1c:	e01c      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f22:	3308      	adds	r3, #8
 8003f24:	2100      	movs	r1, #0
 8003f26:	4618      	mov	r0, r3
 8003f28:	f001 fa6e 	bl	8005408 <RCCEx_PLL2_Config>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f32:	e011      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f38:	3328      	adds	r3, #40	@ 0x28
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f001 fb15 	bl	800556c <RCCEx_PLL3_Config>
 8003f42:	4603      	mov	r3, r0
 8003f44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f48:	e006      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f50:	e002      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003f52:	bf00      	nop
 8003f54:	e000      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003f56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10a      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003f60:	4b37      	ldr	r3, [pc, #220]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f64:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f6e:	4a34      	ldr	r2, [pc, #208]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f70:	430b      	orrs	r3, r1
 8003f72:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f74:	e003      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f86:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003f8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003f8e:	2300      	movs	r3, #0
 8003f90:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003f94:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003f98:	460b      	mov	r3, r1
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	d056      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fa4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fa8:	d033      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003faa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fae:	d82c      	bhi.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003fb0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003fb4:	d02f      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003fb6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003fba:	d826      	bhi.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003fbc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003fc0:	d02b      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003fc2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003fc6:	d820      	bhi.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003fc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003fcc:	d012      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003fce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003fd2:	d81a      	bhi.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d022      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003fd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fdc:	d115      	bne.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fe2:	3308      	adds	r3, #8
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f001 fa0e 	bl	8005408 <RCCEx_PLL2_Config>
 8003fec:	4603      	mov	r3, r0
 8003fee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ff2:	e015      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff8:	3328      	adds	r3, #40	@ 0x28
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f001 fab5 	bl	800556c <RCCEx_PLL3_Config>
 8004002:	4603      	mov	r3, r0
 8004004:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004008:	e00a      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004010:	e006      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004012:	bf00      	nop
 8004014:	e004      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004016:	bf00      	nop
 8004018:	e002      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800401a:	bf00      	nop
 800401c:	e000      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800401e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004020:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10d      	bne.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004028:	4b05      	ldr	r3, [pc, #20]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800402a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800402c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004034:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004036:	4a02      	ldr	r2, [pc, #8]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004038:	430b      	orrs	r3, r1
 800403a:	6513      	str	r3, [r2, #80]	@ 0x50
 800403c:	e006      	b.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800403e:	bf00      	nop
 8004040:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004044:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004048:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800404c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004054:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004058:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800405c:	2300      	movs	r3, #0
 800405e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004062:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004066:	460b      	mov	r3, r1
 8004068:	4313      	orrs	r3, r2
 800406a:	d055      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800406c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004070:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004074:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004078:	d033      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800407a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800407e:	d82c      	bhi.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004080:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004084:	d02f      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004086:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800408a:	d826      	bhi.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x662>
 800408c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004090:	d02b      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004092:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004096:	d820      	bhi.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004098:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800409c:	d012      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800409e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040a2:	d81a      	bhi.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x662>
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d022      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x676>
 80040a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040ac:	d115      	bne.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b2:	3308      	adds	r3, #8
 80040b4:	2101      	movs	r1, #1
 80040b6:	4618      	mov	r0, r3
 80040b8:	f001 f9a6 	bl	8005408 <RCCEx_PLL2_Config>
 80040bc:	4603      	mov	r3, r0
 80040be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80040c2:	e015      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c8:	3328      	adds	r3, #40	@ 0x28
 80040ca:	2101      	movs	r1, #1
 80040cc:	4618      	mov	r0, r3
 80040ce:	f001 fa4d 	bl	800556c <RCCEx_PLL3_Config>
 80040d2:	4603      	mov	r3, r0
 80040d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80040d8:	e00a      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040e0:	e006      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80040e2:	bf00      	nop
 80040e4:	e004      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80040e6:	bf00      	nop
 80040e8:	e002      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80040ea:	bf00      	nop
 80040ec:	e000      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80040ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10b      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80040f8:	4ba3      	ldr	r3, [pc, #652]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040fc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004104:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004108:	4a9f      	ldr	r2, [pc, #636]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800410a:	430b      	orrs	r3, r1
 800410c:	6593      	str	r3, [r2, #88]	@ 0x58
 800410e:	e003      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004110:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004114:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800411c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004120:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004124:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004128:	2300      	movs	r3, #0
 800412a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800412e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004132:	460b      	mov	r3, r1
 8004134:	4313      	orrs	r3, r2
 8004136:	d037      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800413c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800413e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004142:	d00e      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004144:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004148:	d816      	bhi.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800414a:	2b00      	cmp	r3, #0
 800414c:	d018      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800414e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004152:	d111      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004154:	4b8c      	ldr	r3, [pc, #560]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004158:	4a8b      	ldr	r2, [pc, #556]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800415a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800415e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004160:	e00f      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004166:	3308      	adds	r3, #8
 8004168:	2101      	movs	r1, #1
 800416a:	4618      	mov	r0, r3
 800416c:	f001 f94c 	bl	8005408 <RCCEx_PLL2_Config>
 8004170:	4603      	mov	r3, r0
 8004172:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004176:	e004      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800417e:	e000      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004180:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004182:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10a      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800418a:	4b7f      	ldr	r3, [pc, #508]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800418c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800418e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004198:	4a7b      	ldr	r2, [pc, #492]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800419a:	430b      	orrs	r3, r1
 800419c:	6513      	str	r3, [r2, #80]	@ 0x50
 800419e:	e003      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80041a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80041b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041b8:	2300      	movs	r3, #0
 80041ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80041be:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80041c2:	460b      	mov	r3, r1
 80041c4:	4313      	orrs	r3, r2
 80041c6:	d039      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80041c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041ce:	2b03      	cmp	r3, #3
 80041d0:	d81c      	bhi.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x794>
 80041d2:	a201      	add	r2, pc, #4	@ (adr r2, 80041d8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80041d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d8:	08004215 	.word	0x08004215
 80041dc:	080041e9 	.word	0x080041e9
 80041e0:	080041f7 	.word	0x080041f7
 80041e4:	08004215 	.word	0x08004215
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041e8:	4b67      	ldr	r3, [pc, #412]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ec:	4a66      	ldr	r2, [pc, #408]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80041f4:	e00f      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80041f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041fa:	3308      	adds	r3, #8
 80041fc:	2102      	movs	r1, #2
 80041fe:	4618      	mov	r0, r3
 8004200:	f001 f902 	bl	8005408 <RCCEx_PLL2_Config>
 8004204:	4603      	mov	r3, r0
 8004206:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800420a:	e004      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004212:	e000      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004214:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004216:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10a      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800421e:	4b5a      	ldr	r3, [pc, #360]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004222:	f023 0103 	bic.w	r1, r3, #3
 8004226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800422a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800422c:	4a56      	ldr	r2, [pc, #344]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800422e:	430b      	orrs	r3, r1
 8004230:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004232:	e003      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004234:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004238:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800423c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004244:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004248:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800424c:	2300      	movs	r3, #0
 800424e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004252:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004256:	460b      	mov	r3, r1
 8004258:	4313      	orrs	r3, r2
 800425a:	f000 809f 	beq.w	800439c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800425e:	4b4b      	ldr	r3, [pc, #300]	@ (800438c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a4a      	ldr	r2, [pc, #296]	@ (800438c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004264:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004268:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800426a:	f7fd fd9d 	bl	8001da8 <HAL_GetTick>
 800426e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004272:	e00b      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004274:	f7fd fd98 	bl	8001da8 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	2b64      	cmp	r3, #100	@ 0x64
 8004282:	d903      	bls.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800428a:	e005      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800428c:	4b3f      	ldr	r3, [pc, #252]	@ (800438c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0ed      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004298:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800429c:	2b00      	cmp	r3, #0
 800429e:	d179      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80042a0:	4b39      	ldr	r3, [pc, #228]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042a2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80042a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80042ac:	4053      	eors	r3, r2
 80042ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d015      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042b6:	4b34      	ldr	r3, [pc, #208]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042be:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042c2:	4b31      	ldr	r3, [pc, #196]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042c6:	4a30      	ldr	r2, [pc, #192]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042cc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042ce:	4b2e      	ldr	r3, [pc, #184]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d2:	4a2d      	ldr	r2, [pc, #180]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042d8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80042da:	4a2b      	ldr	r2, [pc, #172]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80042e0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80042e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80042ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042ee:	d118      	bne.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f0:	f7fd fd5a 	bl	8001da8 <HAL_GetTick>
 80042f4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042f8:	e00d      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042fa:	f7fd fd55 	bl	8001da8 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004304:	1ad2      	subs	r2, r2, r3
 8004306:	f241 3388 	movw	r3, #5000	@ 0x1388
 800430a:	429a      	cmp	r2, r3
 800430c:	d903      	bls.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004314:	e005      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004316:	4b1c      	ldr	r3, [pc, #112]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0eb      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004322:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004326:	2b00      	cmp	r3, #0
 8004328:	d129      	bne.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800432a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800432e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004332:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004336:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800433a:	d10e      	bne.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800433c:	4b12      	ldr	r3, [pc, #72]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004348:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800434c:	091a      	lsrs	r2, r3, #4
 800434e:	4b10      	ldr	r3, [pc, #64]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004350:	4013      	ands	r3, r2
 8004352:	4a0d      	ldr	r2, [pc, #52]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004354:	430b      	orrs	r3, r1
 8004356:	6113      	str	r3, [r2, #16]
 8004358:	e005      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800435a:	4b0b      	ldr	r3, [pc, #44]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	4a0a      	ldr	r2, [pc, #40]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004360:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004364:	6113      	str	r3, [r2, #16]
 8004366:	4b08      	ldr	r3, [pc, #32]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004368:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800436a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800436e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004372:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004376:	4a04      	ldr	r2, [pc, #16]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004378:	430b      	orrs	r3, r1
 800437a:	6713      	str	r3, [r2, #112]	@ 0x70
 800437c:	e00e      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800437e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004382:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004386:	e009      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004388:	58024400 	.word	0x58024400
 800438c:	58024800 	.word	0x58024800
 8004390:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004394:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004398:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800439c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a4:	f002 0301 	and.w	r3, r2, #1
 80043a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80043ac:	2300      	movs	r3, #0
 80043ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80043b2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80043b6:	460b      	mov	r3, r1
 80043b8:	4313      	orrs	r3, r2
 80043ba:	f000 8089 	beq.w	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80043be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043c4:	2b28      	cmp	r3, #40	@ 0x28
 80043c6:	d86b      	bhi.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80043c8:	a201      	add	r2, pc, #4	@ (adr r2, 80043d0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80043ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ce:	bf00      	nop
 80043d0:	080044a9 	.word	0x080044a9
 80043d4:	080044a1 	.word	0x080044a1
 80043d8:	080044a1 	.word	0x080044a1
 80043dc:	080044a1 	.word	0x080044a1
 80043e0:	080044a1 	.word	0x080044a1
 80043e4:	080044a1 	.word	0x080044a1
 80043e8:	080044a1 	.word	0x080044a1
 80043ec:	080044a1 	.word	0x080044a1
 80043f0:	08004475 	.word	0x08004475
 80043f4:	080044a1 	.word	0x080044a1
 80043f8:	080044a1 	.word	0x080044a1
 80043fc:	080044a1 	.word	0x080044a1
 8004400:	080044a1 	.word	0x080044a1
 8004404:	080044a1 	.word	0x080044a1
 8004408:	080044a1 	.word	0x080044a1
 800440c:	080044a1 	.word	0x080044a1
 8004410:	0800448b 	.word	0x0800448b
 8004414:	080044a1 	.word	0x080044a1
 8004418:	080044a1 	.word	0x080044a1
 800441c:	080044a1 	.word	0x080044a1
 8004420:	080044a1 	.word	0x080044a1
 8004424:	080044a1 	.word	0x080044a1
 8004428:	080044a1 	.word	0x080044a1
 800442c:	080044a1 	.word	0x080044a1
 8004430:	080044a9 	.word	0x080044a9
 8004434:	080044a1 	.word	0x080044a1
 8004438:	080044a1 	.word	0x080044a1
 800443c:	080044a1 	.word	0x080044a1
 8004440:	080044a1 	.word	0x080044a1
 8004444:	080044a1 	.word	0x080044a1
 8004448:	080044a1 	.word	0x080044a1
 800444c:	080044a1 	.word	0x080044a1
 8004450:	080044a9 	.word	0x080044a9
 8004454:	080044a1 	.word	0x080044a1
 8004458:	080044a1 	.word	0x080044a1
 800445c:	080044a1 	.word	0x080044a1
 8004460:	080044a1 	.word	0x080044a1
 8004464:	080044a1 	.word	0x080044a1
 8004468:	080044a1 	.word	0x080044a1
 800446c:	080044a1 	.word	0x080044a1
 8004470:	080044a9 	.word	0x080044a9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004478:	3308      	adds	r3, #8
 800447a:	2101      	movs	r1, #1
 800447c:	4618      	mov	r0, r3
 800447e:	f000 ffc3 	bl	8005408 <RCCEx_PLL2_Config>
 8004482:	4603      	mov	r3, r0
 8004484:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004488:	e00f      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800448a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800448e:	3328      	adds	r3, #40	@ 0x28
 8004490:	2101      	movs	r1, #1
 8004492:	4618      	mov	r0, r3
 8004494:	f001 f86a 	bl	800556c <RCCEx_PLL3_Config>
 8004498:	4603      	mov	r3, r0
 800449a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800449e:	e004      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044a6:	e000      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80044a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10a      	bne.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80044b2:	4bbf      	ldr	r3, [pc, #764]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80044ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044c0:	4abb      	ldr	r2, [pc, #748]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044c2:	430b      	orrs	r3, r1
 80044c4:	6553      	str	r3, [r2, #84]	@ 0x54
 80044c6:	e003      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80044d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d8:	f002 0302 	and.w	r3, r2, #2
 80044dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044e0:	2300      	movs	r3, #0
 80044e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80044e6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80044ea:	460b      	mov	r3, r1
 80044ec:	4313      	orrs	r3, r2
 80044ee:	d041      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80044f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044f6:	2b05      	cmp	r3, #5
 80044f8:	d824      	bhi.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80044fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004500 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80044fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004500:	0800454d 	.word	0x0800454d
 8004504:	08004519 	.word	0x08004519
 8004508:	0800452f 	.word	0x0800452f
 800450c:	0800454d 	.word	0x0800454d
 8004510:	0800454d 	.word	0x0800454d
 8004514:	0800454d 	.word	0x0800454d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800451c:	3308      	adds	r3, #8
 800451e:	2101      	movs	r1, #1
 8004520:	4618      	mov	r0, r3
 8004522:	f000 ff71 	bl	8005408 <RCCEx_PLL2_Config>
 8004526:	4603      	mov	r3, r0
 8004528:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800452c:	e00f      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800452e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004532:	3328      	adds	r3, #40	@ 0x28
 8004534:	2101      	movs	r1, #1
 8004536:	4618      	mov	r0, r3
 8004538:	f001 f818 	bl	800556c <RCCEx_PLL3_Config>
 800453c:	4603      	mov	r3, r0
 800453e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004542:	e004      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800454a:	e000      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800454c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800454e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10a      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004556:	4b96      	ldr	r3, [pc, #600]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800455a:	f023 0107 	bic.w	r1, r3, #7
 800455e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004562:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004564:	4a92      	ldr	r2, [pc, #584]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004566:	430b      	orrs	r3, r1
 8004568:	6553      	str	r3, [r2, #84]	@ 0x54
 800456a:	e003      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800456c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004570:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457c:	f002 0304 	and.w	r3, r2, #4
 8004580:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004584:	2300      	movs	r3, #0
 8004586:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800458a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800458e:	460b      	mov	r3, r1
 8004590:	4313      	orrs	r3, r2
 8004592:	d044      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004598:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800459c:	2b05      	cmp	r3, #5
 800459e:	d825      	bhi.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80045a0:	a201      	add	r2, pc, #4	@ (adr r2, 80045a8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80045a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a6:	bf00      	nop
 80045a8:	080045f5 	.word	0x080045f5
 80045ac:	080045c1 	.word	0x080045c1
 80045b0:	080045d7 	.word	0x080045d7
 80045b4:	080045f5 	.word	0x080045f5
 80045b8:	080045f5 	.word	0x080045f5
 80045bc:	080045f5 	.word	0x080045f5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c4:	3308      	adds	r3, #8
 80045c6:	2101      	movs	r1, #1
 80045c8:	4618      	mov	r0, r3
 80045ca:	f000 ff1d 	bl	8005408 <RCCEx_PLL2_Config>
 80045ce:	4603      	mov	r3, r0
 80045d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80045d4:	e00f      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045da:	3328      	adds	r3, #40	@ 0x28
 80045dc:	2101      	movs	r1, #1
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 ffc4 	bl	800556c <RCCEx_PLL3_Config>
 80045e4:	4603      	mov	r3, r0
 80045e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80045ea:	e004      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045f2:	e000      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80045f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10b      	bne.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045fe:	4b6c      	ldr	r3, [pc, #432]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004602:	f023 0107 	bic.w	r1, r3, #7
 8004606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800460a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800460e:	4a68      	ldr	r2, [pc, #416]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004610:	430b      	orrs	r3, r1
 8004612:	6593      	str	r3, [r2, #88]	@ 0x58
 8004614:	e003      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004616:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800461a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800461e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004626:	f002 0320 	and.w	r3, r2, #32
 800462a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800462e:	2300      	movs	r3, #0
 8004630:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004634:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004638:	460b      	mov	r3, r1
 800463a:	4313      	orrs	r3, r2
 800463c:	d055      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800463e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004646:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800464a:	d033      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800464c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004650:	d82c      	bhi.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004656:	d02f      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004658:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800465c:	d826      	bhi.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800465e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004662:	d02b      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004664:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004668:	d820      	bhi.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800466a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800466e:	d012      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004670:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004674:	d81a      	bhi.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004676:	2b00      	cmp	r3, #0
 8004678:	d022      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800467a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800467e:	d115      	bne.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004684:	3308      	adds	r3, #8
 8004686:	2100      	movs	r1, #0
 8004688:	4618      	mov	r0, r3
 800468a:	f000 febd 	bl	8005408 <RCCEx_PLL2_Config>
 800468e:	4603      	mov	r3, r0
 8004690:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004694:	e015      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800469a:	3328      	adds	r3, #40	@ 0x28
 800469c:	2102      	movs	r1, #2
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 ff64 	bl	800556c <RCCEx_PLL3_Config>
 80046a4:	4603      	mov	r3, r0
 80046a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80046aa:	e00a      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046b2:	e006      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80046b4:	bf00      	nop
 80046b6:	e004      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80046b8:	bf00      	nop
 80046ba:	e002      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80046bc:	bf00      	nop
 80046be:	e000      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80046c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10b      	bne.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046ca:	4b39      	ldr	r3, [pc, #228]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ce:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80046d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046da:	4a35      	ldr	r2, [pc, #212]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046dc:	430b      	orrs	r3, r1
 80046de:	6553      	str	r3, [r2, #84]	@ 0x54
 80046e0:	e003      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80046ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80046f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80046fa:	2300      	movs	r3, #0
 80046fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004700:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004704:	460b      	mov	r3, r1
 8004706:	4313      	orrs	r3, r2
 8004708:	d058      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800470a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800470e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004712:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004716:	d033      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004718:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800471c:	d82c      	bhi.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800471e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004722:	d02f      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004724:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004728:	d826      	bhi.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800472a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800472e:	d02b      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004730:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004734:	d820      	bhi.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004736:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800473a:	d012      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800473c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004740:	d81a      	bhi.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004742:	2b00      	cmp	r3, #0
 8004744:	d022      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004746:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800474a:	d115      	bne.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800474c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004750:	3308      	adds	r3, #8
 8004752:	2100      	movs	r1, #0
 8004754:	4618      	mov	r0, r3
 8004756:	f000 fe57 	bl	8005408 <RCCEx_PLL2_Config>
 800475a:	4603      	mov	r3, r0
 800475c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004760:	e015      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004766:	3328      	adds	r3, #40	@ 0x28
 8004768:	2102      	movs	r1, #2
 800476a:	4618      	mov	r0, r3
 800476c:	f000 fefe 	bl	800556c <RCCEx_PLL3_Config>
 8004770:	4603      	mov	r3, r0
 8004772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004776:	e00a      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800477e:	e006      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004780:	bf00      	nop
 8004782:	e004      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004784:	bf00      	nop
 8004786:	e002      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004788:	bf00      	nop
 800478a:	e000      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800478c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800478e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10e      	bne.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004796:	4b06      	ldr	r3, [pc, #24]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800479a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800479e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80047a6:	4a02      	ldr	r2, [pc, #8]	@ (80047b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80047a8:	430b      	orrs	r3, r1
 80047aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80047ac:	e006      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80047ae:	bf00      	nop
 80047b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80047bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80047c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80047cc:	2300      	movs	r3, #0
 80047ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80047d2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80047d6:	460b      	mov	r3, r1
 80047d8:	4313      	orrs	r3, r2
 80047da:	d055      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80047dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80047e4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80047e8:	d033      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80047ea:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80047ee:	d82c      	bhi.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80047f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047f4:	d02f      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80047f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047fa:	d826      	bhi.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80047fc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004800:	d02b      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004802:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004806:	d820      	bhi.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004808:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800480c:	d012      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800480e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004812:	d81a      	bhi.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004814:	2b00      	cmp	r3, #0
 8004816:	d022      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004818:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800481c:	d115      	bne.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800481e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004822:	3308      	adds	r3, #8
 8004824:	2100      	movs	r1, #0
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fdee 	bl	8005408 <RCCEx_PLL2_Config>
 800482c:	4603      	mov	r3, r0
 800482e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004832:	e015      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004838:	3328      	adds	r3, #40	@ 0x28
 800483a:	2102      	movs	r1, #2
 800483c:	4618      	mov	r0, r3
 800483e:	f000 fe95 	bl	800556c <RCCEx_PLL3_Config>
 8004842:	4603      	mov	r3, r0
 8004844:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004848:	e00a      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004850:	e006      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004852:	bf00      	nop
 8004854:	e004      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004856:	bf00      	nop
 8004858:	e002      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800485a:	bf00      	nop
 800485c:	e000      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800485e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004860:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10b      	bne.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004868:	4ba1      	ldr	r3, [pc, #644]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800486a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800486c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004874:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004878:	4a9d      	ldr	r2, [pc, #628]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800487a:	430b      	orrs	r3, r1
 800487c:	6593      	str	r3, [r2, #88]	@ 0x58
 800487e:	e003      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004880:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004884:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800488c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004890:	f002 0308 	and.w	r3, r2, #8
 8004894:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004898:	2300      	movs	r3, #0
 800489a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800489e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80048a2:	460b      	mov	r3, r1
 80048a4:	4313      	orrs	r3, r2
 80048a6:	d01e      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80048a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048b4:	d10c      	bne.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80048b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ba:	3328      	adds	r3, #40	@ 0x28
 80048bc:	2102      	movs	r1, #2
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 fe54 	bl	800556c <RCCEx_PLL3_Config>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d002      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80048d0:	4b87      	ldr	r3, [pc, #540]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048d4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80048d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048e0:	4a83      	ldr	r2, [pc, #524]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048e2:	430b      	orrs	r3, r1
 80048e4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ee:	f002 0310 	and.w	r3, r2, #16
 80048f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80048f6:	2300      	movs	r3, #0
 80048f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80048fc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004900:	460b      	mov	r3, r1
 8004902:	4313      	orrs	r3, r2
 8004904:	d01e      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800490a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800490e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004912:	d10c      	bne.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004918:	3328      	adds	r3, #40	@ 0x28
 800491a:	2102      	movs	r1, #2
 800491c:	4618      	mov	r0, r3
 800491e:	f000 fe25 	bl	800556c <RCCEx_PLL3_Config>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d002      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800492e:	4b70      	ldr	r3, [pc, #448]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004932:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800493a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800493e:	4a6c      	ldr	r2, [pc, #432]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004940:	430b      	orrs	r3, r1
 8004942:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004950:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004954:	2300      	movs	r3, #0
 8004956:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800495a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800495e:	460b      	mov	r3, r1
 8004960:	4313      	orrs	r3, r2
 8004962:	d03e      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004968:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800496c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004970:	d022      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004972:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004976:	d81b      	bhi.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004978:	2b00      	cmp	r3, #0
 800497a:	d003      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800497c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004980:	d00b      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004982:	e015      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004988:	3308      	adds	r3, #8
 800498a:	2100      	movs	r1, #0
 800498c:	4618      	mov	r0, r3
 800498e:	f000 fd3b 	bl	8005408 <RCCEx_PLL2_Config>
 8004992:	4603      	mov	r3, r0
 8004994:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004998:	e00f      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800499a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800499e:	3328      	adds	r3, #40	@ 0x28
 80049a0:	2102      	movs	r1, #2
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 fde2 	bl	800556c <RCCEx_PLL3_Config>
 80049a8:	4603      	mov	r3, r0
 80049aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80049ae:	e004      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049b6:	e000      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80049b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10b      	bne.n	80049da <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049c2:	4b4b      	ldr	r3, [pc, #300]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049c6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80049ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80049d2:	4a47      	ldr	r2, [pc, #284]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049d4:	430b      	orrs	r3, r1
 80049d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80049d8:	e003      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80049e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ea:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80049ee:	67bb      	str	r3, [r7, #120]	@ 0x78
 80049f0:	2300      	movs	r3, #0
 80049f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80049f4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80049f8:	460b      	mov	r3, r1
 80049fa:	4313      	orrs	r3, r2
 80049fc:	d03b      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80049fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a06:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a0a:	d01f      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004a0c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a10:	d818      	bhi.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004a12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a16:	d003      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004a18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a1c:	d007      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004a1e:	e011      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a20:	4b33      	ldr	r3, [pc, #204]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a24:	4a32      	ldr	r2, [pc, #200]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004a2c:	e00f      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a32:	3328      	adds	r3, #40	@ 0x28
 8004a34:	2101      	movs	r1, #1
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 fd98 	bl	800556c <RCCEx_PLL3_Config>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004a42:	e004      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a4a:	e000      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004a4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10b      	bne.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a56:	4b26      	ldr	r3, [pc, #152]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a5a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a66:	4a22      	ldr	r2, [pc, #136]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a68:	430b      	orrs	r3, r1
 8004a6a:	6553      	str	r3, [r2, #84]	@ 0x54
 8004a6c:	e003      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004a82:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a84:	2300      	movs	r3, #0
 8004a86:	677b      	str	r3, [r7, #116]	@ 0x74
 8004a88:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	d034      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d003      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004a9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aa0:	d007      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004aa2:	e011      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aa4:	4b12      	ldr	r3, [pc, #72]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa8:	4a11      	ldr	r2, [pc, #68]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004aaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004aae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004ab0:	e00e      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab6:	3308      	adds	r3, #8
 8004ab8:	2102      	movs	r1, #2
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 fca4 	bl	8005408 <RCCEx_PLL2_Config>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004ac6:	e003      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ace:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ad0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10d      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004ad8:	4b05      	ldr	r3, [pc, #20]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ada:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004adc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ae4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ae6:	4a02      	ldr	r2, [pc, #8]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ae8:	430b      	orrs	r3, r1
 8004aea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004aec:	e006      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004aee:	bf00      	nop
 8004af0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004af8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b04:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004b08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b0e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004b12:	460b      	mov	r3, r1
 8004b14:	4313      	orrs	r3, r2
 8004b16:	d00c      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b1c:	3328      	adds	r3, #40	@ 0x28
 8004b1e:	2102      	movs	r1, #2
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 fd23 	bl	800556c <RCCEx_PLL3_Config>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d002      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b3a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004b3e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b40:	2300      	movs	r3, #0
 8004b42:	667b      	str	r3, [r7, #100]	@ 0x64
 8004b44:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004b48:	460b      	mov	r3, r1
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	d038      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b5a:	d018      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004b5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b60:	d811      	bhi.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004b62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b66:	d014      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004b68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b6c:	d80b      	bhi.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d011      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004b72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b76:	d106      	bne.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b78:	4bc3      	ldr	r3, [pc, #780]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b7c:	4ac2      	ldr	r2, [pc, #776]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004b84:	e008      	b.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b8c:	e004      	b.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004b8e:	bf00      	nop
 8004b90:	e002      	b.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004b92:	bf00      	nop
 8004b94:	e000      	b.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004b96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10b      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ba0:	4bb9      	ldr	r3, [pc, #740]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ba4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bb0:	4ab5      	ldr	r2, [pc, #724]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bb2:	430b      	orrs	r3, r1
 8004bb4:	6553      	str	r3, [r2, #84]	@ 0x54
 8004bb6:	e003      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004bcc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004bce:	2300      	movs	r3, #0
 8004bd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004bd2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	d009      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004bdc:	4baa      	ldr	r3, [pc, #680]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004be0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004be8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bea:	4aa7      	ldr	r2, [pc, #668]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bec:	430b      	orrs	r3, r1
 8004bee:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004bfc:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bfe:	2300      	movs	r3, #0
 8004c00:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c02:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004c06:	460b      	mov	r3, r1
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	d00a      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004c0c:	4b9e      	ldr	r3, [pc, #632]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c18:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004c1c:	4a9a      	ldr	r2, [pc, #616]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c1e:	430b      	orrs	r3, r1
 8004c20:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c30:	2300      	movs	r3, #0
 8004c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c34:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004c38:	460b      	mov	r3, r1
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	d009      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c3e:	4b92      	ldr	r3, [pc, #584]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c42:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c4c:	4a8e      	ldr	r2, [pc, #568]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c4e:	430b      	orrs	r3, r1
 8004c50:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004c5e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c60:	2300      	movs	r3, #0
 8004c62:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c64:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004c68:	460b      	mov	r3, r1
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	d00e      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c6e:	4b86      	ldr	r3, [pc, #536]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	4a85      	ldr	r2, [pc, #532]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c74:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004c78:	6113      	str	r3, [r2, #16]
 8004c7a:	4b83      	ldr	r3, [pc, #524]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c7c:	6919      	ldr	r1, [r3, #16]
 8004c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c82:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004c86:	4a80      	ldr	r2, [pc, #512]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004c88:	430b      	orrs	r3, r1
 8004c8a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c94:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004c98:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c9e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	d009      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004ca8:	4b77      	ldr	r3, [pc, #476]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004caa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cac:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cb6:	4a74      	ldr	r2, [pc, #464]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cb8:	430b      	orrs	r3, r1
 8004cba:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004cc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cca:	2300      	movs	r3, #0
 8004ccc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cce:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	d00a      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004cd8:	4b6b      	ldr	r3, [pc, #428]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cdc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ce8:	4a67      	ldr	r2, [pc, #412]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cea:	430b      	orrs	r3, r1
 8004cec:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d00:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004d04:	460b      	mov	r3, r1
 8004d06:	4313      	orrs	r3, r2
 8004d08:	d011      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d0e:	3308      	adds	r3, #8
 8004d10:	2100      	movs	r1, #0
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 fb78 	bl	8005408 <RCCEx_PLL2_Config>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d36:	2100      	movs	r1, #0
 8004d38:	6239      	str	r1, [r7, #32]
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d40:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004d44:	460b      	mov	r3, r1
 8004d46:	4313      	orrs	r3, r2
 8004d48:	d011      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d4e:	3308      	adds	r3, #8
 8004d50:	2101      	movs	r1, #1
 8004d52:	4618      	mov	r0, r3
 8004d54:	f000 fb58 	bl	8005408 <RCCEx_PLL2_Config>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d003      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d76:	2100      	movs	r1, #0
 8004d78:	61b9      	str	r1, [r7, #24]
 8004d7a:	f003 0304 	and.w	r3, r3, #4
 8004d7e:	61fb      	str	r3, [r7, #28]
 8004d80:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004d84:	460b      	mov	r3, r1
 8004d86:	4313      	orrs	r3, r2
 8004d88:	d011      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d8e:	3308      	adds	r3, #8
 8004d90:	2102      	movs	r1, #2
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 fb38 	bl	8005408 <RCCEx_PLL2_Config>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004daa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db6:	2100      	movs	r1, #0
 8004db8:	6139      	str	r1, [r7, #16]
 8004dba:	f003 0308 	and.w	r3, r3, #8
 8004dbe:	617b      	str	r3, [r7, #20]
 8004dc0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	d011      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dce:	3328      	adds	r3, #40	@ 0x28
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 fbca 	bl	800556c <RCCEx_PLL3_Config>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004dde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004de6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df6:	2100      	movs	r1, #0
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	f003 0310 	and.w	r3, r3, #16
 8004dfe:	60fb      	str	r3, [r7, #12]
 8004e00:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004e04:	460b      	mov	r3, r1
 8004e06:	4313      	orrs	r3, r2
 8004e08:	d011      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e0e:	3328      	adds	r3, #40	@ 0x28
 8004e10:	2101      	movs	r1, #1
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 fbaa 	bl	800556c <RCCEx_PLL3_Config>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004e1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d003      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e36:	2100      	movs	r1, #0
 8004e38:	6039      	str	r1, [r7, #0]
 8004e3a:	f003 0320 	and.w	r3, r3, #32
 8004e3e:	607b      	str	r3, [r7, #4]
 8004e40:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004e44:	460b      	mov	r3, r1
 8004e46:	4313      	orrs	r3, r2
 8004e48:	d011      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e4e:	3328      	adds	r3, #40	@ 0x28
 8004e50:	2102      	movs	r1, #2
 8004e52:	4618      	mov	r0, r3
 8004e54:	f000 fb8a 	bl	800556c <RCCEx_PLL3_Config>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004e6e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004e76:	2300      	movs	r3, #0
 8004e78:	e000      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004e82:	46bd      	mov	sp, r7
 8004e84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e88:	58024400 	.word	0x58024400

08004e8c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004e90:	f7fe fd96 	bl	80039c0 <HAL_RCC_GetHCLKFreq>
 8004e94:	4602      	mov	r2, r0
 8004e96:	4b06      	ldr	r3, [pc, #24]	@ (8004eb0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	091b      	lsrs	r3, r3, #4
 8004e9c:	f003 0307 	and.w	r3, r3, #7
 8004ea0:	4904      	ldr	r1, [pc, #16]	@ (8004eb4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004ea2:	5ccb      	ldrb	r3, [r1, r3]
 8004ea4:	f003 031f 	and.w	r3, r3, #31
 8004ea8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	58024400 	.word	0x58024400
 8004eb4:	08009e64 	.word	0x08009e64

08004eb8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b089      	sub	sp, #36	@ 0x24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ec0:	4ba1      	ldr	r3, [pc, #644]	@ (8005148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec4:	f003 0303 	and.w	r3, r3, #3
 8004ec8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004eca:	4b9f      	ldr	r3, [pc, #636]	@ (8005148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ece:	0b1b      	lsrs	r3, r3, #12
 8004ed0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ed4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004ed6:	4b9c      	ldr	r3, [pc, #624]	@ (8005148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eda:	091b      	lsrs	r3, r3, #4
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004ee2:	4b99      	ldr	r3, [pc, #612]	@ (8005148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee6:	08db      	lsrs	r3, r3, #3
 8004ee8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	fb02 f303 	mul.w	r3, r2, r3
 8004ef2:	ee07 3a90 	vmov	s15, r3
 8004ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004efa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 8111 	beq.w	8005128 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	f000 8083 	beq.w	8005014 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	f200 80a1 	bhi.w	8005058 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d056      	beq.n	8004fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004f22:	e099      	b.n	8005058 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f24:	4b88      	ldr	r3, [pc, #544]	@ (8005148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0320 	and.w	r3, r3, #32
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d02d      	beq.n	8004f8c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f30:	4b85      	ldr	r3, [pc, #532]	@ (8005148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	08db      	lsrs	r3, r3, #3
 8004f36:	f003 0303 	and.w	r3, r3, #3
 8004f3a:	4a84      	ldr	r2, [pc, #528]	@ (800514c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f40:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	ee07 3a90 	vmov	s15, r3
 8004f48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	ee07 3a90 	vmov	s15, r3
 8004f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f5a:	4b7b      	ldr	r3, [pc, #492]	@ (8005148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f62:	ee07 3a90 	vmov	s15, r3
 8004f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f6e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005150 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f86:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004f8a:	e087      	b.n	800509c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	ee07 3a90 	vmov	s15, r3
 8004f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f96:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005154 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f9e:	4b6a      	ldr	r3, [pc, #424]	@ (8005148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fa6:	ee07 3a90 	vmov	s15, r3
 8004faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fae:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fb2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005150 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fce:	e065      	b.n	800509c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	ee07 3a90 	vmov	s15, r3
 8004fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fda:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005158 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fe2:	4b59      	ldr	r3, [pc, #356]	@ (8005148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fea:	ee07 3a90 	vmov	s15, r3
 8004fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ff2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ff6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005150 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005002:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800500a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800500e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005012:	e043      	b.n	800509c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	ee07 3a90 	vmov	s15, r3
 800501a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800501e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800515c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005026:	4b48      	ldr	r3, [pc, #288]	@ (8005148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800502a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800502e:	ee07 3a90 	vmov	s15, r3
 8005032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005036:	ed97 6a03 	vldr	s12, [r7, #12]
 800503a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005150 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800503e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005046:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800504a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800504e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005052:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005056:	e021      	b.n	800509c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	ee07 3a90 	vmov	s15, r3
 800505e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005062:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005158 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800506a:	4b37      	ldr	r3, [pc, #220]	@ (8005148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800506c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800506e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005072:	ee07 3a90 	vmov	s15, r3
 8005076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800507a:	ed97 6a03 	vldr	s12, [r7, #12]
 800507e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005150 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800508a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800508e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005096:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800509a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800509c:	4b2a      	ldr	r3, [pc, #168]	@ (8005148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800509e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a0:	0a5b      	lsrs	r3, r3, #9
 80050a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050a6:	ee07 3a90 	vmov	s15, r3
 80050aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80050ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050c2:	ee17 2a90 	vmov	r2, s15
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80050ca:	4b1f      	ldr	r3, [pc, #124]	@ (8005148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ce:	0c1b      	lsrs	r3, r3, #16
 80050d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050d4:	ee07 3a90 	vmov	s15, r3
 80050d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80050e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050f0:	ee17 2a90 	vmov	r2, s15
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80050f8:	4b13      	ldr	r3, [pc, #76]	@ (8005148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050fc:	0e1b      	lsrs	r3, r3, #24
 80050fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005102:	ee07 3a90 	vmov	s15, r3
 8005106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800510a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800510e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005112:	edd7 6a07 	vldr	s13, [r7, #28]
 8005116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800511a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800511e:	ee17 2a90 	vmov	r2, s15
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005126:	e008      	b.n	800513a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	609a      	str	r2, [r3, #8]
}
 800513a:	bf00      	nop
 800513c:	3724      	adds	r7, #36	@ 0x24
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	58024400 	.word	0x58024400
 800514c:	03d09000 	.word	0x03d09000
 8005150:	46000000 	.word	0x46000000
 8005154:	4c742400 	.word	0x4c742400
 8005158:	4a742400 	.word	0x4a742400
 800515c:	4bbebc20 	.word	0x4bbebc20

08005160 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005160:	b480      	push	{r7}
 8005162:	b089      	sub	sp, #36	@ 0x24
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005168:	4ba1      	ldr	r3, [pc, #644]	@ (80053f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800516a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800516c:	f003 0303 	and.w	r3, r3, #3
 8005170:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005172:	4b9f      	ldr	r3, [pc, #636]	@ (80053f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005176:	0d1b      	lsrs	r3, r3, #20
 8005178:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800517c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800517e:	4b9c      	ldr	r3, [pc, #624]	@ (80053f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005182:	0a1b      	lsrs	r3, r3, #8
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800518a:	4b99      	ldr	r3, [pc, #612]	@ (80053f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800518c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800518e:	08db      	lsrs	r3, r3, #3
 8005190:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	fb02 f303 	mul.w	r3, r2, r3
 800519a:	ee07 3a90 	vmov	s15, r3
 800519e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f000 8111 	beq.w	80053d0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	f000 8083 	beq.w	80052bc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	f200 80a1 	bhi.w	8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d003      	beq.n	80051cc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d056      	beq.n	8005278 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80051ca:	e099      	b.n	8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051cc:	4b88      	ldr	r3, [pc, #544]	@ (80053f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0320 	and.w	r3, r3, #32
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d02d      	beq.n	8005234 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051d8:	4b85      	ldr	r3, [pc, #532]	@ (80053f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	08db      	lsrs	r3, r3, #3
 80051de:	f003 0303 	and.w	r3, r3, #3
 80051e2:	4a84      	ldr	r2, [pc, #528]	@ (80053f4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80051e4:	fa22 f303 	lsr.w	r3, r2, r3
 80051e8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	ee07 3a90 	vmov	s15, r3
 80051f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	ee07 3a90 	vmov	s15, r3
 80051fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005202:	4b7b      	ldr	r3, [pc, #492]	@ (80053f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800520a:	ee07 3a90 	vmov	s15, r3
 800520e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005212:	ed97 6a03 	vldr	s12, [r7, #12]
 8005216:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80053f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800521a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800521e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005222:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800522a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800522e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005232:	e087      	b.n	8005344 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	ee07 3a90 	vmov	s15, r3
 800523a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800523e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80053fc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005246:	4b6a      	ldr	r3, [pc, #424]	@ (80053f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800524e:	ee07 3a90 	vmov	s15, r3
 8005252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005256:	ed97 6a03 	vldr	s12, [r7, #12]
 800525a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80053f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800525e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005266:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800526a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800526e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005272:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005276:	e065      	b.n	8005344 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	ee07 3a90 	vmov	s15, r3
 800527e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005282:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005400 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800528a:	4b59      	ldr	r3, [pc, #356]	@ (80053f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800528c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800528e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005292:	ee07 3a90 	vmov	s15, r3
 8005296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800529a:	ed97 6a03 	vldr	s12, [r7, #12]
 800529e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80053f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052ba:	e043      	b.n	8005344 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	ee07 3a90 	vmov	s15, r3
 80052c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052c6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005404 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80052ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ce:	4b48      	ldr	r3, [pc, #288]	@ (80053f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052d6:	ee07 3a90 	vmov	s15, r3
 80052da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052de:	ed97 6a03 	vldr	s12, [r7, #12]
 80052e2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80053f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80052e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052fe:	e021      	b.n	8005344 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	ee07 3a90 	vmov	s15, r3
 8005306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800530a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005400 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800530e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005312:	4b37      	ldr	r3, [pc, #220]	@ (80053f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800531a:	ee07 3a90 	vmov	s15, r3
 800531e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005322:	ed97 6a03 	vldr	s12, [r7, #12]
 8005326:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80053f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800532a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800532e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005332:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800533a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800533e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005342:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005344:	4b2a      	ldr	r3, [pc, #168]	@ (80053f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005348:	0a5b      	lsrs	r3, r3, #9
 800534a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800534e:	ee07 3a90 	vmov	s15, r3
 8005352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005356:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800535a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800535e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005362:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800536a:	ee17 2a90 	vmov	r2, s15
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005372:	4b1f      	ldr	r3, [pc, #124]	@ (80053f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005376:	0c1b      	lsrs	r3, r3, #16
 8005378:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800537c:	ee07 3a90 	vmov	s15, r3
 8005380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005384:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005388:	ee37 7a87 	vadd.f32	s14, s15, s14
 800538c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005390:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005394:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005398:	ee17 2a90 	vmov	r2, s15
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80053a0:	4b13      	ldr	r3, [pc, #76]	@ (80053f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a4:	0e1b      	lsrs	r3, r3, #24
 80053a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053aa:	ee07 3a90 	vmov	s15, r3
 80053ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80053b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80053ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80053be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053c6:	ee17 2a90 	vmov	r2, s15
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80053ce:	e008      	b.n	80053e2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	609a      	str	r2, [r3, #8]
}
 80053e2:	bf00      	nop
 80053e4:	3724      	adds	r7, #36	@ 0x24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	58024400 	.word	0x58024400
 80053f4:	03d09000 	.word	0x03d09000
 80053f8:	46000000 	.word	0x46000000
 80053fc:	4c742400 	.word	0x4c742400
 8005400:	4a742400 	.word	0x4a742400
 8005404:	4bbebc20 	.word	0x4bbebc20

08005408 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005412:	2300      	movs	r3, #0
 8005414:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005416:	4b53      	ldr	r3, [pc, #332]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 8005418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800541a:	f003 0303 	and.w	r3, r3, #3
 800541e:	2b03      	cmp	r3, #3
 8005420:	d101      	bne.n	8005426 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e099      	b.n	800555a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005426:	4b4f      	ldr	r3, [pc, #316]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a4e      	ldr	r2, [pc, #312]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 800542c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005430:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005432:	f7fc fcb9 	bl	8001da8 <HAL_GetTick>
 8005436:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005438:	e008      	b.n	800544c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800543a:	f7fc fcb5 	bl	8001da8 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2b02      	cmp	r3, #2
 8005446:	d901      	bls.n	800544c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e086      	b.n	800555a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800544c:	4b45      	ldr	r3, [pc, #276]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1f0      	bne.n	800543a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005458:	4b42      	ldr	r3, [pc, #264]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 800545a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800545c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	031b      	lsls	r3, r3, #12
 8005466:	493f      	ldr	r1, [pc, #252]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 8005468:	4313      	orrs	r3, r2
 800546a:	628b      	str	r3, [r1, #40]	@ 0x28
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	3b01      	subs	r3, #1
 8005472:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	3b01      	subs	r3, #1
 800547c:	025b      	lsls	r3, r3, #9
 800547e:	b29b      	uxth	r3, r3
 8005480:	431a      	orrs	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	3b01      	subs	r3, #1
 8005488:	041b      	lsls	r3, r3, #16
 800548a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800548e:	431a      	orrs	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	3b01      	subs	r3, #1
 8005496:	061b      	lsls	r3, r3, #24
 8005498:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800549c:	4931      	ldr	r1, [pc, #196]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80054a2:	4b30      	ldr	r3, [pc, #192]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 80054a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	492d      	ldr	r1, [pc, #180]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80054b4:	4b2b      	ldr	r3, [pc, #172]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 80054b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b8:	f023 0220 	bic.w	r2, r3, #32
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	4928      	ldr	r1, [pc, #160]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80054c6:	4b27      	ldr	r3, [pc, #156]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 80054c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ca:	4a26      	ldr	r2, [pc, #152]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 80054cc:	f023 0310 	bic.w	r3, r3, #16
 80054d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80054d2:	4b24      	ldr	r3, [pc, #144]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 80054d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054d6:	4b24      	ldr	r3, [pc, #144]	@ (8005568 <RCCEx_PLL2_Config+0x160>)
 80054d8:	4013      	ands	r3, r2
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	69d2      	ldr	r2, [r2, #28]
 80054de:	00d2      	lsls	r2, r2, #3
 80054e0:	4920      	ldr	r1, [pc, #128]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80054e6:	4b1f      	ldr	r3, [pc, #124]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 80054e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ea:	4a1e      	ldr	r2, [pc, #120]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 80054ec:	f043 0310 	orr.w	r3, r3, #16
 80054f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d106      	bne.n	8005506 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80054f8:	4b1a      	ldr	r3, [pc, #104]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 80054fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054fc:	4a19      	ldr	r2, [pc, #100]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 80054fe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005502:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005504:	e00f      	b.n	8005526 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d106      	bne.n	800551a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800550c:	4b15      	ldr	r3, [pc, #84]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 800550e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005510:	4a14      	ldr	r2, [pc, #80]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 8005512:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005516:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005518:	e005      	b.n	8005526 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800551a:	4b12      	ldr	r3, [pc, #72]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 800551c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800551e:	4a11      	ldr	r2, [pc, #68]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 8005520:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005524:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005526:	4b0f      	ldr	r3, [pc, #60]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a0e      	ldr	r2, [pc, #56]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 800552c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005530:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005532:	f7fc fc39 	bl	8001da8 <HAL_GetTick>
 8005536:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005538:	e008      	b.n	800554c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800553a:	f7fc fc35 	bl	8001da8 <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	2b02      	cmp	r3, #2
 8005546:	d901      	bls.n	800554c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e006      	b.n	800555a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800554c:	4b05      	ldr	r3, [pc, #20]	@ (8005564 <RCCEx_PLL2_Config+0x15c>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d0f0      	beq.n	800553a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005558:	7bfb      	ldrb	r3, [r7, #15]
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	58024400 	.word	0x58024400
 8005568:	ffff0007 	.word	0xffff0007

0800556c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005576:	2300      	movs	r3, #0
 8005578:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800557a:	4b53      	ldr	r3, [pc, #332]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 800557c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800557e:	f003 0303 	and.w	r3, r3, #3
 8005582:	2b03      	cmp	r3, #3
 8005584:	d101      	bne.n	800558a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e099      	b.n	80056be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800558a:	4b4f      	ldr	r3, [pc, #316]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a4e      	ldr	r2, [pc, #312]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005590:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005594:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005596:	f7fc fc07 	bl	8001da8 <HAL_GetTick>
 800559a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800559c:	e008      	b.n	80055b0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800559e:	f7fc fc03 	bl	8001da8 <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d901      	bls.n	80055b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e086      	b.n	80056be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80055b0:	4b45      	ldr	r3, [pc, #276]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1f0      	bne.n	800559e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80055bc:	4b42      	ldr	r3, [pc, #264]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 80055be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	051b      	lsls	r3, r3, #20
 80055ca:	493f      	ldr	r1, [pc, #252]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	628b      	str	r3, [r1, #40]	@ 0x28
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	3b01      	subs	r3, #1
 80055d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	3b01      	subs	r3, #1
 80055e0:	025b      	lsls	r3, r3, #9
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	431a      	orrs	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	3b01      	subs	r3, #1
 80055ec:	041b      	lsls	r3, r3, #16
 80055ee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80055f2:	431a      	orrs	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	3b01      	subs	r3, #1
 80055fa:	061b      	lsls	r3, r3, #24
 80055fc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005600:	4931      	ldr	r1, [pc, #196]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005602:	4313      	orrs	r3, r2
 8005604:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005606:	4b30      	ldr	r3, [pc, #192]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800560a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	492d      	ldr	r1, [pc, #180]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005614:	4313      	orrs	r3, r2
 8005616:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005618:	4b2b      	ldr	r3, [pc, #172]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 800561a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800561c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	4928      	ldr	r1, [pc, #160]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005626:	4313      	orrs	r3, r2
 8005628:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800562a:	4b27      	ldr	r3, [pc, #156]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 800562c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800562e:	4a26      	ldr	r2, [pc, #152]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005630:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005634:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005636:	4b24      	ldr	r3, [pc, #144]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005638:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800563a:	4b24      	ldr	r3, [pc, #144]	@ (80056cc <RCCEx_PLL3_Config+0x160>)
 800563c:	4013      	ands	r3, r2
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	69d2      	ldr	r2, [r2, #28]
 8005642:	00d2      	lsls	r2, r2, #3
 8005644:	4920      	ldr	r1, [pc, #128]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005646:	4313      	orrs	r3, r2
 8005648:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800564a:	4b1f      	ldr	r3, [pc, #124]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 800564c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800564e:	4a1e      	ldr	r2, [pc, #120]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005654:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d106      	bne.n	800566a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800565c:	4b1a      	ldr	r3, [pc, #104]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 800565e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005660:	4a19      	ldr	r2, [pc, #100]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005662:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005666:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005668:	e00f      	b.n	800568a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d106      	bne.n	800567e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005670:	4b15      	ldr	r3, [pc, #84]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005674:	4a14      	ldr	r2, [pc, #80]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005676:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800567a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800567c:	e005      	b.n	800568a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800567e:	4b12      	ldr	r3, [pc, #72]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005682:	4a11      	ldr	r2, [pc, #68]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005684:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005688:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800568a:	4b0f      	ldr	r3, [pc, #60]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a0e      	ldr	r2, [pc, #56]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 8005690:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005694:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005696:	f7fc fb87 	bl	8001da8 <HAL_GetTick>
 800569a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800569c:	e008      	b.n	80056b0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800569e:	f7fc fb83 	bl	8001da8 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d901      	bls.n	80056b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e006      	b.n	80056be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80056b0:	4b05      	ldr	r3, [pc, #20]	@ (80056c8 <RCCEx_PLL3_Config+0x15c>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d0f0      	beq.n	800569e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80056bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	58024400 	.word	0x58024400
 80056cc:	ffff0007 	.word	0xffff0007

080056d0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e10f      	b.n	8005902 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a87      	ldr	r2, [pc, #540]	@ (800590c <HAL_SPI_Init+0x23c>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d00f      	beq.n	8005712 <HAL_SPI_Init+0x42>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a86      	ldr	r2, [pc, #536]	@ (8005910 <HAL_SPI_Init+0x240>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d00a      	beq.n	8005712 <HAL_SPI_Init+0x42>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a84      	ldr	r2, [pc, #528]	@ (8005914 <HAL_SPI_Init+0x244>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d005      	beq.n	8005712 <HAL_SPI_Init+0x42>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	2b0f      	cmp	r3, #15
 800570c:	d901      	bls.n	8005712 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e0f7      	b.n	8005902 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 ff30 	bl	8006578 <SPI_GetPacketSize>
 8005718:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a7b      	ldr	r2, [pc, #492]	@ (800590c <HAL_SPI_Init+0x23c>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d00c      	beq.n	800573e <HAL_SPI_Init+0x6e>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a79      	ldr	r2, [pc, #484]	@ (8005910 <HAL_SPI_Init+0x240>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d007      	beq.n	800573e <HAL_SPI_Init+0x6e>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a78      	ldr	r2, [pc, #480]	@ (8005914 <HAL_SPI_Init+0x244>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d002      	beq.n	800573e <HAL_SPI_Init+0x6e>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2b08      	cmp	r3, #8
 800573c:	d811      	bhi.n	8005762 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005742:	4a72      	ldr	r2, [pc, #456]	@ (800590c <HAL_SPI_Init+0x23c>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d009      	beq.n	800575c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a70      	ldr	r2, [pc, #448]	@ (8005910 <HAL_SPI_Init+0x240>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d004      	beq.n	800575c <HAL_SPI_Init+0x8c>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a6f      	ldr	r2, [pc, #444]	@ (8005914 <HAL_SPI_Init+0x244>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d104      	bne.n	8005766 <HAL_SPI_Init+0x96>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2b10      	cmp	r3, #16
 8005760:	d901      	bls.n	8005766 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e0cd      	b.n	8005902 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d106      	bne.n	8005780 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f7fb fdde 	bl	800133c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f022 0201 	bic.w	r2, r2, #1
 8005796:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80057a2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057ac:	d119      	bne.n	80057e2 <HAL_SPI_Init+0x112>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057b6:	d103      	bne.n	80057c0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d008      	beq.n	80057d2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10c      	bne.n	80057e2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80057cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057d0:	d107      	bne.n	80057e2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80057e0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00f      	beq.n	800580e <HAL_SPI_Init+0x13e>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	2b06      	cmp	r3, #6
 80057f4:	d90b      	bls.n	800580e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	430a      	orrs	r2, r1
 800580a:	601a      	str	r2, [r3, #0]
 800580c:	e007      	b.n	800581e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800581c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	69da      	ldr	r2, [r3, #28]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005826:	431a      	orrs	r2, r3
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	431a      	orrs	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005830:	ea42 0103 	orr.w	r1, r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	68da      	ldr	r2, [r3, #12]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005848:	431a      	orrs	r2, r3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800584e:	431a      	orrs	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	699b      	ldr	r3, [r3, #24]
 8005854:	431a      	orrs	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	431a      	orrs	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	431a      	orrs	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	431a      	orrs	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	431a      	orrs	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005872:	431a      	orrs	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	431a      	orrs	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800587e:	ea42 0103 	orr.w	r1, r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	430a      	orrs	r2, r1
 800588c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d113      	bne.n	80058be <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058a8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80058bc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 0201 	bic.w	r2, r2, #1
 80058cc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00a      	beq.n	80058f0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	430a      	orrs	r2, r1
 80058ee:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	40013000 	.word	0x40013000
 8005910:	40003800 	.word	0x40003800
 8005914:	40003c00 	.word	0x40003c00

08005918 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b08e      	sub	sp, #56	@ 0x38
 800591c:	af02      	add	r7, sp, #8
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
 8005924:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3320      	adds	r3, #32
 800592c:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	3330      	adds	r3, #48	@ 0x30
 8005934:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800593a:	095b      	lsrs	r3, r3, #5
 800593c:	b29b      	uxth	r3, r3
 800593e:	3301      	adds	r3, #1
 8005940:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005942:	f7fc fa31 	bl	8001da8 <HAL_GetTick>
 8005946:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8005948:	887b      	ldrh	r3, [r7, #2]
 800594a:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800594c:	887b      	ldrh	r3, [r7, #2]
 800594e:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b01      	cmp	r3, #1
 800595a:	d001      	beq.n	8005960 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800595c:	2302      	movs	r3, #2
 800595e:	e310      	b.n	8005f82 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d005      	beq.n	8005972 <HAL_SPI_TransmitReceive+0x5a>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d002      	beq.n	8005972 <HAL_SPI_TransmitReceive+0x5a>
 800596c:	887b      	ldrh	r3, [r7, #2]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e305      	b.n	8005f82 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800597c:	2b01      	cmp	r3, #1
 800597e:	d101      	bne.n	8005984 <HAL_SPI_TransmitReceive+0x6c>
 8005980:	2302      	movs	r3, #2
 8005982:	e2fe      	b.n	8005f82 <HAL_SPI_TransmitReceive+0x66a>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2205      	movs	r2, #5
 8005990:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	887a      	ldrh	r2, [r7, #2]
 80059a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	887a      	ldrh	r2, [r7, #2]
 80059ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	887a      	ldrh	r2, [r7, #2]
 80059bc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	887a      	ldrh	r2, [r7, #2]
 80059c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68da      	ldr	r2, [r3, #12]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 80059e2:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a70      	ldr	r2, [pc, #448]	@ (8005bac <HAL_SPI_TransmitReceive+0x294>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d009      	beq.n	8005a02 <HAL_SPI_TransmitReceive+0xea>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a6f      	ldr	r2, [pc, #444]	@ (8005bb0 <HAL_SPI_TransmitReceive+0x298>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d004      	beq.n	8005a02 <HAL_SPI_TransmitReceive+0xea>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a6d      	ldr	r2, [pc, #436]	@ (8005bb4 <HAL_SPI_TransmitReceive+0x29c>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d102      	bne.n	8005a08 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8005a02:	2310      	movs	r3, #16
 8005a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a06:	e001      	b.n	8005a0c <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8005a08:	2308      	movs	r3, #8
 8005a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685a      	ldr	r2, [r3, #4]
 8005a12:	4b69      	ldr	r3, [pc, #420]	@ (8005bb8 <HAL_SPI_TransmitReceive+0x2a0>)
 8005a14:	4013      	ands	r3, r2
 8005a16:	8879      	ldrh	r1, [r7, #2]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	6812      	ldr	r2, [r2, #0]
 8005a1c:	430b      	orrs	r3, r1
 8005a1e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f042 0201 	orr.w	r2, r2, #1
 8005a2e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a38:	d107      	bne.n	8005a4a <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	2b0f      	cmp	r3, #15
 8005a50:	f240 80a2 	bls.w	8005b98 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8005a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a56:	089b      	lsrs	r3, r3, #2
 8005a58:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005a5a:	e094      	b.n	8005b86 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	f003 0302 	and.w	r3, r3, #2
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d120      	bne.n	8005aac <HAL_SPI_TransmitReceive+0x194>
 8005a6a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d01d      	beq.n	8005aac <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005a70:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005a72:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a76:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d217      	bcs.n	8005aac <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6812      	ldr	r2, [r2, #0]
 8005a86:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a8c:	1d1a      	adds	r2, r3, #4
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005aaa:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005ab4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d065      	beq.n	8005b86 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	695b      	ldr	r3, [r3, #20]
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d118      	bne.n	8005afa <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ad0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005ad2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ad8:	1d1a      	adds	r2, r3, #4
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005af6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005af8:	e045      	b.n	8005b86 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005afa:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005afc:	8bfb      	ldrh	r3, [r7, #30]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d21d      	bcs.n	8005b3e <HAL_SPI_TransmitReceive+0x226>
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d018      	beq.n	8005b3e <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b14:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005b16:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b1c:	1d1a      	adds	r2, r3, #4
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b3a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005b3c:	e023      	b.n	8005b86 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b3e:	f7fc f933 	bl	8001da8 <HAL_GetTick>
 8005b42:	4602      	mov	r2, r0
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d803      	bhi.n	8005b56 <HAL_SPI_TransmitReceive+0x23e>
 8005b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b54:	d102      	bne.n	8005b5c <HAL_SPI_TransmitReceive+0x244>
 8005b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d114      	bne.n	8005b86 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f000 fc3d 	bl	80063dc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b68:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e1fd      	b.n	8005f82 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005b86:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f47f af67 	bne.w	8005a5c <HAL_SPI_TransmitReceive+0x144>
 8005b8e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f47f af63 	bne.w	8005a5c <HAL_SPI_TransmitReceive+0x144>
 8005b96:	e1ce      	b.n	8005f36 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	2b07      	cmp	r3, #7
 8005b9e:	f240 81c2 	bls.w	8005f26 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8005ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ba4:	085b      	lsrs	r3, r3, #1
 8005ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005ba8:	e0c9      	b.n	8005d3e <HAL_SPI_TransmitReceive+0x426>
 8005baa:	bf00      	nop
 8005bac:	40013000 	.word	0x40013000
 8005bb0:	40003800 	.word	0x40003800
 8005bb4:	40003c00 	.word	0x40003c00
 8005bb8:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	f003 0302 	and.w	r3, r3, #2
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d11f      	bne.n	8005c0a <HAL_SPI_TransmitReceive+0x2f2>
 8005bca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d01c      	beq.n	8005c0a <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005bd0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005bd2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bd6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d216      	bcs.n	8005c0a <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005be0:	881a      	ldrh	r2, [r3, #0]
 8005be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be4:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bea:	1c9a      	adds	r2, r3, #2
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005c08:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005c12:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f000 8092 	beq.w	8005d3e <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	695b      	ldr	r3, [r3, #20]
 8005c20:	f003 0301 	and.w	r3, r3, #1
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d118      	bne.n	8005c5a <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c2c:	6a3a      	ldr	r2, [r7, #32]
 8005c2e:	8812      	ldrh	r2, [r2, #0]
 8005c30:	b292      	uxth	r2, r2
 8005c32:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c38:	1c9a      	adds	r2, r3, #2
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	3b01      	subs	r3, #1
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005c56:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005c58:	e071      	b.n	8005d3e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005c5a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005c5c:	8bfb      	ldrh	r3, [r7, #30]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d228      	bcs.n	8005cb4 <HAL_SPI_TransmitReceive+0x39c>
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d023      	beq.n	8005cb4 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c70:	6a3a      	ldr	r2, [r7, #32]
 8005c72:	8812      	ldrh	r2, [r2, #0]
 8005c74:	b292      	uxth	r2, r2
 8005c76:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c7c:	1c9a      	adds	r2, r3, #2
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c86:	6a3a      	ldr	r2, [r7, #32]
 8005c88:	8812      	ldrh	r2, [r2, #0]
 8005c8a:	b292      	uxth	r2, r2
 8005c8c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c92:	1c9a      	adds	r2, r3, #2
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	3b02      	subs	r3, #2
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005cb0:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005cb2:	e044      	b.n	8005d3e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8005cb4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d11d      	bne.n	8005cf6 <HAL_SPI_TransmitReceive+0x3de>
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d018      	beq.n	8005cf6 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cc8:	6a3a      	ldr	r2, [r7, #32]
 8005cca:	8812      	ldrh	r2, [r2, #0]
 8005ccc:	b292      	uxth	r2, r2
 8005cce:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cd4:	1c9a      	adds	r2, r3, #2
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005cf2:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005cf4:	e023      	b.n	8005d3e <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cf6:	f7fc f857 	bl	8001da8 <HAL_GetTick>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d803      	bhi.n	8005d0e <HAL_SPI_TransmitReceive+0x3f6>
 8005d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d0c:	d102      	bne.n	8005d14 <HAL_SPI_TransmitReceive+0x3fc>
 8005d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d114      	bne.n	8005d3e <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f000 fb61 	bl	80063dc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d20:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e121      	b.n	8005f82 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005d3e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f47f af3b 	bne.w	8005bbc <HAL_SPI_TransmitReceive+0x2a4>
 8005d46:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f47f af37 	bne.w	8005bbc <HAL_SPI_TransmitReceive+0x2a4>
 8005d4e:	e0f2      	b.n	8005f36 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	f003 0302 	and.w	r3, r3, #2
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d121      	bne.n	8005da2 <HAL_SPI_TransmitReceive+0x48a>
 8005d5e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d01e      	beq.n	8005da2 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005d64:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005d66:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d6a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d218      	bcs.n	8005da2 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	3320      	adds	r3, #32
 8005d7a:	7812      	ldrb	r2, [r2, #0]
 8005d7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d82:	1c5a      	adds	r2, r3, #1
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	3b01      	subs	r3, #1
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005da0:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005daa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 80ba 	beq.w	8005f26 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	695b      	ldr	r3, [r3, #20]
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d11b      	bne.n	8005df8 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005dcc:	7812      	ldrb	r2, [r2, #0]
 8005dce:	b2d2      	uxtb	r2, r2
 8005dd0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005dd6:	1c5a      	adds	r2, r3, #1
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	3b01      	subs	r3, #1
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005df4:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005df6:	e096      	b.n	8005f26 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005df8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005dfa:	8bfb      	ldrh	r3, [r7, #30]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d24a      	bcs.n	8005e96 <HAL_SPI_TransmitReceive+0x57e>
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d045      	beq.n	8005e96 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e16:	7812      	ldrb	r2, [r2, #0]
 8005e18:	b2d2      	uxtb	r2, r2
 8005e1a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e20:	1c5a      	adds	r2, r3, #1
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e32:	7812      	ldrb	r2, [r2, #0]
 8005e34:	b2d2      	uxtb	r2, r2
 8005e36:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e3c:	1c5a      	adds	r2, r3, #1
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e4e:	7812      	ldrb	r2, [r2, #0]
 8005e50:	b2d2      	uxtb	r2, r2
 8005e52:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e58:	1c5a      	adds	r2, r3, #1
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e6a:	7812      	ldrb	r2, [r2, #0]
 8005e6c:	b2d2      	uxtb	r2, r2
 8005e6e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e74:	1c5a      	adds	r2, r3, #1
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	3b04      	subs	r3, #4
 8005e84:	b29a      	uxth	r2, r3
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005e92:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005e94:	e047      	b.n	8005f26 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8005e96:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005e98:	2b03      	cmp	r3, #3
 8005e9a:	d820      	bhi.n	8005ede <HAL_SPI_TransmitReceive+0x5c6>
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d01b      	beq.n	8005ede <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005eb2:	7812      	ldrb	r2, [r2, #0]
 8005eb4:	b2d2      	uxtb	r2, r2
 8005eb6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ebc:	1c5a      	adds	r2, r3, #1
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005eda:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005edc:	e023      	b.n	8005f26 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ede:	f7fb ff63 	bl	8001da8 <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d803      	bhi.n	8005ef6 <HAL_SPI_TransmitReceive+0x5de>
 8005eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef4:	d102      	bne.n	8005efc <HAL_SPI_TransmitReceive+0x5e4>
 8005ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d114      	bne.n	8005f26 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f000 fa6d 	bl	80063dc <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f08:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e02d      	b.n	8005f82 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005f26:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f47f af11 	bne.w	8005d50 <HAL_SPI_TransmitReceive+0x438>
 8005f2e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f47f af0d 	bne.w	8005d50 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	9300      	str	r3, [sp, #0]
 8005f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	2108      	movs	r1, #8
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f000 faeb 	bl	800651c <SPI_WaitOnFlagUntilTimeout>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d007      	beq.n	8005f5c <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f52:	f043 0220 	orr.w	r2, r3, #32
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f000 fa3d 	bl	80063dc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d001      	beq.n	8005f80 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e000      	b.n	8005f82 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8005f80:	2300      	movs	r3, #0
  }
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3730      	adds	r7, #48	@ 0x30
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop

08005f8c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b08a      	sub	sp, #40	@ 0x28
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8005fa4:	6a3a      	ldr	r2, [r7, #32]
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	4013      	ands	r3, r2
 8005faa:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005fbe:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	3330      	adds	r3, #48	@ 0x30
 8005fc6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d010      	beq.n	8005ff4 <HAL_SPI_IRQHandler+0x68>
 8005fd2:	6a3b      	ldr	r3, [r7, #32]
 8005fd4:	f003 0308 	and.w	r3, r3, #8
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00b      	beq.n	8005ff4 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	699a      	ldr	r2, [r3, #24]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fea:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 f9c3 	bl	8006378 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8005ff2:	e192      	b.n	800631a <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d113      	bne.n	8006026 <HAL_SPI_IRQHandler+0x9a>
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	f003 0320 	and.w	r3, r3, #32
 8006004:	2b00      	cmp	r3, #0
 8006006:	d10e      	bne.n	8006026 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800600e:	2b00      	cmp	r3, #0
 8006010:	d009      	beq.n	8006026 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	4798      	blx	r3
    hspi->RxISR(hspi);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	4798      	blx	r3
    handled = 1UL;
 8006022:	2301      	movs	r3, #1
 8006024:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800602c:	2b00      	cmp	r3, #0
 800602e:	d10f      	bne.n	8006050 <HAL_SPI_IRQHandler+0xc4>
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	f003 0301 	and.w	r3, r3, #1
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00a      	beq.n	8006050 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8006040:	2b00      	cmp	r3, #0
 8006042:	d105      	bne.n	8006050 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	4798      	blx	r3
    handled = 1UL;
 800604c:	2301      	movs	r3, #1
 800604e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	f003 0320 	and.w	r3, r3, #32
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10f      	bne.n	800607a <HAL_SPI_IRQHandler+0xee>
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	f003 0302 	and.w	r3, r3, #2
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00a      	beq.n	800607a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800606a:	2b00      	cmp	r3, #0
 800606c:	d105      	bne.n	800607a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	4798      	blx	r3
    handled = 1UL;
 8006076:	2301      	movs	r3, #1
 8006078:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800607a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607c:	2b00      	cmp	r3, #0
 800607e:	f040 8147 	bne.w	8006310 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	f003 0308 	and.w	r3, r3, #8
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 808b 	beq.w	80061a4 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	699a      	ldr	r2, [r3, #24]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f042 0208 	orr.w	r2, r2, #8
 800609c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	699a      	ldr	r2, [r3, #24]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f042 0210 	orr.w	r2, r2, #16
 80060ac:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	699a      	ldr	r2, [r3, #24]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060bc:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	691a      	ldr	r2, [r3, #16]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f022 0208 	bic.w	r2, r2, #8
 80060cc:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d13d      	bne.n	8006158 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80060dc:	e036      	b.n	800614c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	2b0f      	cmp	r3, #15
 80060e4:	d90b      	bls.n	80060fe <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060ee:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80060f0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060f6:	1d1a      	adds	r2, r3, #4
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	665a      	str	r2, [r3, #100]	@ 0x64
 80060fc:	e01d      	b.n	800613a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	2b07      	cmp	r3, #7
 8006104:	d90b      	bls.n	800611e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	8812      	ldrh	r2, [r2, #0]
 800610e:	b292      	uxth	r2, r2
 8006110:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006116:	1c9a      	adds	r2, r3, #2
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	665a      	str	r2, [r3, #100]	@ 0x64
 800611c:	e00d      	b.n	800613a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800612a:	7812      	ldrb	r2, [r2, #0]
 800612c:	b2d2      	uxtb	r2, r2
 800612e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006134:	1c5a      	adds	r2, r3, #1
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006140:	b29b      	uxth	r3, r3
 8006142:	3b01      	subs	r3, #1
 8006144:	b29a      	uxth	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006152:	b29b      	uxth	r3, r3
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1c2      	bne.n	80060de <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 f93f 	bl	80063dc <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800616c:	2b00      	cmp	r3, #0
 800616e:	d003      	beq.n	8006178 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 f8f7 	bl	8006364 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006176:	e0d0      	b.n	800631a <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8006178:	7cfb      	ldrb	r3, [r7, #19]
 800617a:	2b05      	cmp	r3, #5
 800617c:	d103      	bne.n	8006186 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f8e6 	bl	8006350 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8006184:	e0c6      	b.n	8006314 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8006186:	7cfb      	ldrb	r3, [r7, #19]
 8006188:	2b04      	cmp	r3, #4
 800618a:	d103      	bne.n	8006194 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 f8d5 	bl	800633c <HAL_SPI_RxCpltCallback>
    return;
 8006192:	e0bf      	b.n	8006314 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8006194:	7cfb      	ldrb	r3, [r7, #19]
 8006196:	2b03      	cmp	r3, #3
 8006198:	f040 80bc 	bne.w	8006314 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 f8c3 	bl	8006328 <HAL_SPI_TxCpltCallback>
    return;
 80061a2:	e0b7      	b.n	8006314 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f000 80b5 	beq.w	800631a <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00f      	beq.n	80061da <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061c0:	f043 0204 	orr.w	r2, r3, #4
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	699a      	ldr	r2, [r3, #24]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80061d8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00f      	beq.n	8006204 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061ea:	f043 0201 	orr.w	r2, r3, #1
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	699a      	ldr	r2, [r3, #24]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006202:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00f      	beq.n	800622e <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006214:	f043 0208 	orr.w	r2, r3, #8
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	699a      	ldr	r2, [r3, #24]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800622c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	f003 0320 	and.w	r3, r3, #32
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00f      	beq.n	8006258 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800623e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	699a      	ldr	r2, [r3, #24]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f042 0220 	orr.w	r2, r2, #32
 8006256:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800625e:	2b00      	cmp	r3, #0
 8006260:	d05a      	beq.n	8006318 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f022 0201 	bic.w	r2, r2, #1
 8006270:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	6919      	ldr	r1, [r3, #16]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	4b28      	ldr	r3, [pc, #160]	@ (8006320 <HAL_SPI_IRQHandler+0x394>)
 800627e:	400b      	ands	r3, r1
 8006280:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006288:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800628c:	d138      	bne.n	8006300 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	689a      	ldr	r2, [r3, #8]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800629c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d013      	beq.n	80062ce <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062aa:	4a1e      	ldr	r2, [pc, #120]	@ (8006324 <HAL_SPI_IRQHandler+0x398>)
 80062ac:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7fb ff18 	bl	80020e8 <HAL_DMA_Abort_IT>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d007      	beq.n	80062ce <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062c4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d020      	beq.n	8006318 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80062da:	4a12      	ldr	r2, [pc, #72]	@ (8006324 <HAL_SPI_IRQHandler+0x398>)
 80062dc:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7fb ff00 	bl	80020e8 <HAL_DMA_Abort_IT>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d014      	beq.n	8006318 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062f4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80062fe:	e00b      	b.n	8006318 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 f82b 	bl	8006364 <HAL_SPI_ErrorCallback>
    return;
 800630e:	e003      	b.n	8006318 <HAL_SPI_IRQHandler+0x38c>
    return;
 8006310:	bf00      	nop
 8006312:	e002      	b.n	800631a <HAL_SPI_IRQHandler+0x38e>
    return;
 8006314:	bf00      	nop
 8006316:	e000      	b.n	800631a <HAL_SPI_IRQHandler+0x38e>
    return;
 8006318:	bf00      	nop
  }
}
 800631a:	3728      	adds	r7, #40	@ 0x28
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	fffffc94 	.word	0xfffffc94
 8006324:	080063a9 	.word	0x080063a9

08006328 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006330:	bf00      	nop
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800639a:	b2db      	uxtb	r3, r3
}
 800639c:	4618      	mov	r0, r3
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f7ff ffc8 	bl	8006364 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80063d4:	bf00      	nop
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	699a      	ldr	r2, [r3, #24]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f042 0208 	orr.w	r2, r2, #8
 80063fa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	699a      	ldr	r2, [r3, #24]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f042 0210 	orr.w	r2, r2, #16
 800640a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f022 0201 	bic.w	r2, r2, #1
 800641a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6919      	ldr	r1, [r3, #16]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	4b3c      	ldr	r3, [pc, #240]	@ (8006518 <SPI_CloseTransfer+0x13c>)
 8006428:	400b      	ands	r3, r1
 800642a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	689a      	ldr	r2, [r3, #8]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800643a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006442:	b2db      	uxtb	r3, r3
 8006444:	2b04      	cmp	r3, #4
 8006446:	d014      	beq.n	8006472 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f003 0320 	and.w	r3, r3, #32
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00f      	beq.n	8006472 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006458:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	699a      	ldr	r2, [r3, #24]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f042 0220 	orr.w	r2, r2, #32
 8006470:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b03      	cmp	r3, #3
 800647c:	d014      	beq.n	80064a8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00f      	beq.n	80064a8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800648e:	f043 0204 	orr.w	r2, r3, #4
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	699a      	ldr	r2, [r3, #24]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064a6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00f      	beq.n	80064d2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064b8:	f043 0201 	orr.w	r2, r3, #1
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	699a      	ldr	r2, [r3, #24]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064d0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00f      	beq.n	80064fc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064e2:	f043 0208 	orr.w	r2, r3, #8
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	699a      	ldr	r2, [r3, #24]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80064fa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800650c:	bf00      	nop
 800650e:	3714      	adds	r7, #20
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr
 8006518:	fffffc90 	.word	0xfffffc90

0800651c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	603b      	str	r3, [r7, #0]
 8006528:	4613      	mov	r3, r2
 800652a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800652c:	e010      	b.n	8006550 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800652e:	f7fb fc3b 	bl	8001da8 <HAL_GetTick>
 8006532:	4602      	mov	r2, r0
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	683a      	ldr	r2, [r7, #0]
 800653a:	429a      	cmp	r2, r3
 800653c:	d803      	bhi.n	8006546 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006544:	d102      	bne.n	800654c <SPI_WaitOnFlagUntilTimeout+0x30>
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d101      	bne.n	8006550 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e00f      	b.n	8006570 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	695a      	ldr	r2, [r3, #20]
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	4013      	ands	r3, r2
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	429a      	cmp	r2, r3
 800655e:	bf0c      	ite	eq
 8006560:	2301      	moveq	r3, #1
 8006562:	2300      	movne	r3, #0
 8006564:	b2db      	uxtb	r3, r3
 8006566:	461a      	mov	r2, r3
 8006568:	79fb      	ldrb	r3, [r7, #7]
 800656a:	429a      	cmp	r2, r3
 800656c:	d0df      	beq.n	800652e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006584:	095b      	lsrs	r3, r3, #5
 8006586:	3301      	adds	r3, #1
 8006588:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	3301      	adds	r3, #1
 8006590:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	3307      	adds	r3, #7
 8006596:	08db      	lsrs	r3, r3, #3
 8006598:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	fb02 f303 	mul.w	r3, r2, r3
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3714      	adds	r7, #20
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr

080065ae <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b082      	sub	sp, #8
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d101      	bne.n	80065c0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e042      	b.n	8006646 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d106      	bne.n	80065d8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 f83b 	bl	800664e <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2224      	movs	r2, #36	@ 0x24
 80065dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f022 0201 	bic.w	r2, r2, #1
 80065ee:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d002      	beq.n	80065fe <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 fe29 	bl	8007250 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f8be 	bl	8006780 <UART_SetConfig>
 8006604:	4603      	mov	r3, r0
 8006606:	2b01      	cmp	r3, #1
 8006608:	d101      	bne.n	800660e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e01b      	b.n	8006646 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	685a      	ldr	r2, [r3, #4]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800661c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	689a      	ldr	r2, [r3, #8]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800662c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f042 0201 	orr.w	r2, r2, #1
 800663c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 fea8 	bl	8007394 <UART_CheckIdleState>
 8006644:	4603      	mov	r3, r0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3708      	adds	r7, #8
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800664e:	b480      	push	{r7}
 8006650:	b083      	sub	sp, #12
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8006656:	bf00      	nop
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr

08006662 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b08a      	sub	sp, #40	@ 0x28
 8006666:	af02      	add	r7, sp, #8
 8006668:	60f8      	str	r0, [r7, #12]
 800666a:	60b9      	str	r1, [r7, #8]
 800666c:	603b      	str	r3, [r7, #0]
 800666e:	4613      	mov	r3, r2
 8006670:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006678:	2b20      	cmp	r3, #32
 800667a:	d17b      	bne.n	8006774 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d002      	beq.n	8006688 <HAL_UART_Transmit+0x26>
 8006682:	88fb      	ldrh	r3, [r7, #6]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d101      	bne.n	800668c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e074      	b.n	8006776 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2221      	movs	r2, #33	@ 0x21
 8006698:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800669c:	f7fb fb84 	bl	8001da8 <HAL_GetTick>
 80066a0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	88fa      	ldrh	r2, [r7, #6]
 80066a6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	88fa      	ldrh	r2, [r7, #6]
 80066ae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066ba:	d108      	bne.n	80066ce <HAL_UART_Transmit+0x6c>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d104      	bne.n	80066ce <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80066c4:	2300      	movs	r3, #0
 80066c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	61bb      	str	r3, [r7, #24]
 80066cc:	e003      	b.n	80066d6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066d2:	2300      	movs	r3, #0
 80066d4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80066d6:	e030      	b.n	800673a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	9300      	str	r3, [sp, #0]
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	2200      	movs	r2, #0
 80066e0:	2180      	movs	r1, #128	@ 0x80
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f000 ff00 	bl	80074e8 <UART_WaitOnFlagUntilTimeout>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d005      	beq.n	80066fa <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2220      	movs	r2, #32
 80066f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e03d      	b.n	8006776 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d10b      	bne.n	8006718 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	881b      	ldrh	r3, [r3, #0]
 8006704:	461a      	mov	r2, r3
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800670e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	3302      	adds	r3, #2
 8006714:	61bb      	str	r3, [r7, #24]
 8006716:	e007      	b.n	8006728 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	781a      	ldrb	r2, [r3, #0]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	3301      	adds	r3, #1
 8006726:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800672e:	b29b      	uxth	r3, r3
 8006730:	3b01      	subs	r3, #1
 8006732:	b29a      	uxth	r2, r3
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006740:	b29b      	uxth	r3, r3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1c8      	bne.n	80066d8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	9300      	str	r3, [sp, #0]
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	2200      	movs	r2, #0
 800674e:	2140      	movs	r1, #64	@ 0x40
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	f000 fec9 	bl	80074e8 <UART_WaitOnFlagUntilTimeout>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d005      	beq.n	8006768 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2220      	movs	r2, #32
 8006760:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e006      	b.n	8006776 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2220      	movs	r2, #32
 800676c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006770:	2300      	movs	r3, #0
 8006772:	e000      	b.n	8006776 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006774:	2302      	movs	r3, #2
  }
}
 8006776:	4618      	mov	r0, r3
 8006778:	3720      	adds	r7, #32
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
	...

08006780 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006784:	b092      	sub	sp, #72	@ 0x48
 8006786:	af00      	add	r7, sp, #0
 8006788:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800678a:	2300      	movs	r3, #0
 800678c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	689a      	ldr	r2, [r3, #8]
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	431a      	orrs	r2, r3
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	431a      	orrs	r2, r3
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	69db      	ldr	r3, [r3, #28]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	4bbe      	ldr	r3, [pc, #760]	@ (8006aa8 <UART_SetConfig+0x328>)
 80067b0:	4013      	ands	r3, r2
 80067b2:	697a      	ldr	r2, [r7, #20]
 80067b4:	6812      	ldr	r2, [r2, #0]
 80067b6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80067b8:	430b      	orrs	r3, r1
 80067ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	68da      	ldr	r2, [r3, #12]
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	430a      	orrs	r2, r1
 80067d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4ab3      	ldr	r2, [pc, #716]	@ (8006aac <UART_SetConfig+0x32c>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d004      	beq.n	80067ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067e8:	4313      	orrs	r3, r2
 80067ea:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	689a      	ldr	r2, [r3, #8]
 80067f2:	4baf      	ldr	r3, [pc, #700]	@ (8006ab0 <UART_SetConfig+0x330>)
 80067f4:	4013      	ands	r3, r2
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	6812      	ldr	r2, [r2, #0]
 80067fa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80067fc:	430b      	orrs	r3, r1
 80067fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006806:	f023 010f 	bic.w	r1, r3, #15
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	430a      	orrs	r2, r1
 8006814:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4aa6      	ldr	r2, [pc, #664]	@ (8006ab4 <UART_SetConfig+0x334>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d177      	bne.n	8006910 <UART_SetConfig+0x190>
 8006820:	4ba5      	ldr	r3, [pc, #660]	@ (8006ab8 <UART_SetConfig+0x338>)
 8006822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006824:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006828:	2b28      	cmp	r3, #40	@ 0x28
 800682a:	d86d      	bhi.n	8006908 <UART_SetConfig+0x188>
 800682c:	a201      	add	r2, pc, #4	@ (adr r2, 8006834 <UART_SetConfig+0xb4>)
 800682e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006832:	bf00      	nop
 8006834:	080068d9 	.word	0x080068d9
 8006838:	08006909 	.word	0x08006909
 800683c:	08006909 	.word	0x08006909
 8006840:	08006909 	.word	0x08006909
 8006844:	08006909 	.word	0x08006909
 8006848:	08006909 	.word	0x08006909
 800684c:	08006909 	.word	0x08006909
 8006850:	08006909 	.word	0x08006909
 8006854:	080068e1 	.word	0x080068e1
 8006858:	08006909 	.word	0x08006909
 800685c:	08006909 	.word	0x08006909
 8006860:	08006909 	.word	0x08006909
 8006864:	08006909 	.word	0x08006909
 8006868:	08006909 	.word	0x08006909
 800686c:	08006909 	.word	0x08006909
 8006870:	08006909 	.word	0x08006909
 8006874:	080068e9 	.word	0x080068e9
 8006878:	08006909 	.word	0x08006909
 800687c:	08006909 	.word	0x08006909
 8006880:	08006909 	.word	0x08006909
 8006884:	08006909 	.word	0x08006909
 8006888:	08006909 	.word	0x08006909
 800688c:	08006909 	.word	0x08006909
 8006890:	08006909 	.word	0x08006909
 8006894:	080068f1 	.word	0x080068f1
 8006898:	08006909 	.word	0x08006909
 800689c:	08006909 	.word	0x08006909
 80068a0:	08006909 	.word	0x08006909
 80068a4:	08006909 	.word	0x08006909
 80068a8:	08006909 	.word	0x08006909
 80068ac:	08006909 	.word	0x08006909
 80068b0:	08006909 	.word	0x08006909
 80068b4:	080068f9 	.word	0x080068f9
 80068b8:	08006909 	.word	0x08006909
 80068bc:	08006909 	.word	0x08006909
 80068c0:	08006909 	.word	0x08006909
 80068c4:	08006909 	.word	0x08006909
 80068c8:	08006909 	.word	0x08006909
 80068cc:	08006909 	.word	0x08006909
 80068d0:	08006909 	.word	0x08006909
 80068d4:	08006901 	.word	0x08006901
 80068d8:	2301      	movs	r3, #1
 80068da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068de:	e222      	b.n	8006d26 <UART_SetConfig+0x5a6>
 80068e0:	2304      	movs	r3, #4
 80068e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068e6:	e21e      	b.n	8006d26 <UART_SetConfig+0x5a6>
 80068e8:	2308      	movs	r3, #8
 80068ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ee:	e21a      	b.n	8006d26 <UART_SetConfig+0x5a6>
 80068f0:	2310      	movs	r3, #16
 80068f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068f6:	e216      	b.n	8006d26 <UART_SetConfig+0x5a6>
 80068f8:	2320      	movs	r3, #32
 80068fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068fe:	e212      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006900:	2340      	movs	r3, #64	@ 0x40
 8006902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006906:	e20e      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006908:	2380      	movs	r3, #128	@ 0x80
 800690a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800690e:	e20a      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a69      	ldr	r2, [pc, #420]	@ (8006abc <UART_SetConfig+0x33c>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d130      	bne.n	800697c <UART_SetConfig+0x1fc>
 800691a:	4b67      	ldr	r3, [pc, #412]	@ (8006ab8 <UART_SetConfig+0x338>)
 800691c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800691e:	f003 0307 	and.w	r3, r3, #7
 8006922:	2b05      	cmp	r3, #5
 8006924:	d826      	bhi.n	8006974 <UART_SetConfig+0x1f4>
 8006926:	a201      	add	r2, pc, #4	@ (adr r2, 800692c <UART_SetConfig+0x1ac>)
 8006928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800692c:	08006945 	.word	0x08006945
 8006930:	0800694d 	.word	0x0800694d
 8006934:	08006955 	.word	0x08006955
 8006938:	0800695d 	.word	0x0800695d
 800693c:	08006965 	.word	0x08006965
 8006940:	0800696d 	.word	0x0800696d
 8006944:	2300      	movs	r3, #0
 8006946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800694a:	e1ec      	b.n	8006d26 <UART_SetConfig+0x5a6>
 800694c:	2304      	movs	r3, #4
 800694e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006952:	e1e8      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006954:	2308      	movs	r3, #8
 8006956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800695a:	e1e4      	b.n	8006d26 <UART_SetConfig+0x5a6>
 800695c:	2310      	movs	r3, #16
 800695e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006962:	e1e0      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006964:	2320      	movs	r3, #32
 8006966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800696a:	e1dc      	b.n	8006d26 <UART_SetConfig+0x5a6>
 800696c:	2340      	movs	r3, #64	@ 0x40
 800696e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006972:	e1d8      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006974:	2380      	movs	r3, #128	@ 0x80
 8006976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800697a:	e1d4      	b.n	8006d26 <UART_SetConfig+0x5a6>
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a4f      	ldr	r2, [pc, #316]	@ (8006ac0 <UART_SetConfig+0x340>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d130      	bne.n	80069e8 <UART_SetConfig+0x268>
 8006986:	4b4c      	ldr	r3, [pc, #304]	@ (8006ab8 <UART_SetConfig+0x338>)
 8006988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800698a:	f003 0307 	and.w	r3, r3, #7
 800698e:	2b05      	cmp	r3, #5
 8006990:	d826      	bhi.n	80069e0 <UART_SetConfig+0x260>
 8006992:	a201      	add	r2, pc, #4	@ (adr r2, 8006998 <UART_SetConfig+0x218>)
 8006994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006998:	080069b1 	.word	0x080069b1
 800699c:	080069b9 	.word	0x080069b9
 80069a0:	080069c1 	.word	0x080069c1
 80069a4:	080069c9 	.word	0x080069c9
 80069a8:	080069d1 	.word	0x080069d1
 80069ac:	080069d9 	.word	0x080069d9
 80069b0:	2300      	movs	r3, #0
 80069b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069b6:	e1b6      	b.n	8006d26 <UART_SetConfig+0x5a6>
 80069b8:	2304      	movs	r3, #4
 80069ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069be:	e1b2      	b.n	8006d26 <UART_SetConfig+0x5a6>
 80069c0:	2308      	movs	r3, #8
 80069c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069c6:	e1ae      	b.n	8006d26 <UART_SetConfig+0x5a6>
 80069c8:	2310      	movs	r3, #16
 80069ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ce:	e1aa      	b.n	8006d26 <UART_SetConfig+0x5a6>
 80069d0:	2320      	movs	r3, #32
 80069d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069d6:	e1a6      	b.n	8006d26 <UART_SetConfig+0x5a6>
 80069d8:	2340      	movs	r3, #64	@ 0x40
 80069da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069de:	e1a2      	b.n	8006d26 <UART_SetConfig+0x5a6>
 80069e0:	2380      	movs	r3, #128	@ 0x80
 80069e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069e6:	e19e      	b.n	8006d26 <UART_SetConfig+0x5a6>
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a35      	ldr	r2, [pc, #212]	@ (8006ac4 <UART_SetConfig+0x344>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d130      	bne.n	8006a54 <UART_SetConfig+0x2d4>
 80069f2:	4b31      	ldr	r3, [pc, #196]	@ (8006ab8 <UART_SetConfig+0x338>)
 80069f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069f6:	f003 0307 	and.w	r3, r3, #7
 80069fa:	2b05      	cmp	r3, #5
 80069fc:	d826      	bhi.n	8006a4c <UART_SetConfig+0x2cc>
 80069fe:	a201      	add	r2, pc, #4	@ (adr r2, 8006a04 <UART_SetConfig+0x284>)
 8006a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a04:	08006a1d 	.word	0x08006a1d
 8006a08:	08006a25 	.word	0x08006a25
 8006a0c:	08006a2d 	.word	0x08006a2d
 8006a10:	08006a35 	.word	0x08006a35
 8006a14:	08006a3d 	.word	0x08006a3d
 8006a18:	08006a45 	.word	0x08006a45
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a22:	e180      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006a24:	2304      	movs	r3, #4
 8006a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a2a:	e17c      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006a2c:	2308      	movs	r3, #8
 8006a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a32:	e178      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006a34:	2310      	movs	r3, #16
 8006a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a3a:	e174      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006a3c:	2320      	movs	r3, #32
 8006a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a42:	e170      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006a44:	2340      	movs	r3, #64	@ 0x40
 8006a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a4a:	e16c      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006a4c:	2380      	movs	r3, #128	@ 0x80
 8006a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a52:	e168      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a1b      	ldr	r2, [pc, #108]	@ (8006ac8 <UART_SetConfig+0x348>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d142      	bne.n	8006ae4 <UART_SetConfig+0x364>
 8006a5e:	4b16      	ldr	r3, [pc, #88]	@ (8006ab8 <UART_SetConfig+0x338>)
 8006a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a62:	f003 0307 	and.w	r3, r3, #7
 8006a66:	2b05      	cmp	r3, #5
 8006a68:	d838      	bhi.n	8006adc <UART_SetConfig+0x35c>
 8006a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a70 <UART_SetConfig+0x2f0>)
 8006a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a70:	08006a89 	.word	0x08006a89
 8006a74:	08006a91 	.word	0x08006a91
 8006a78:	08006a99 	.word	0x08006a99
 8006a7c:	08006aa1 	.word	0x08006aa1
 8006a80:	08006acd 	.word	0x08006acd
 8006a84:	08006ad5 	.word	0x08006ad5
 8006a88:	2300      	movs	r3, #0
 8006a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a8e:	e14a      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006a90:	2304      	movs	r3, #4
 8006a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a96:	e146      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006a98:	2308      	movs	r3, #8
 8006a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a9e:	e142      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006aa0:	2310      	movs	r3, #16
 8006aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aa6:	e13e      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006aa8:	cfff69f3 	.word	0xcfff69f3
 8006aac:	58000c00 	.word	0x58000c00
 8006ab0:	11fff4ff 	.word	0x11fff4ff
 8006ab4:	40011000 	.word	0x40011000
 8006ab8:	58024400 	.word	0x58024400
 8006abc:	40004400 	.word	0x40004400
 8006ac0:	40004800 	.word	0x40004800
 8006ac4:	40004c00 	.word	0x40004c00
 8006ac8:	40005000 	.word	0x40005000
 8006acc:	2320      	movs	r3, #32
 8006ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ad2:	e128      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006ad4:	2340      	movs	r3, #64	@ 0x40
 8006ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ada:	e124      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006adc:	2380      	movs	r3, #128	@ 0x80
 8006ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ae2:	e120      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4acb      	ldr	r2, [pc, #812]	@ (8006e18 <UART_SetConfig+0x698>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d176      	bne.n	8006bdc <UART_SetConfig+0x45c>
 8006aee:	4bcb      	ldr	r3, [pc, #812]	@ (8006e1c <UART_SetConfig+0x69c>)
 8006af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006af2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006af6:	2b28      	cmp	r3, #40	@ 0x28
 8006af8:	d86c      	bhi.n	8006bd4 <UART_SetConfig+0x454>
 8006afa:	a201      	add	r2, pc, #4	@ (adr r2, 8006b00 <UART_SetConfig+0x380>)
 8006afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b00:	08006ba5 	.word	0x08006ba5
 8006b04:	08006bd5 	.word	0x08006bd5
 8006b08:	08006bd5 	.word	0x08006bd5
 8006b0c:	08006bd5 	.word	0x08006bd5
 8006b10:	08006bd5 	.word	0x08006bd5
 8006b14:	08006bd5 	.word	0x08006bd5
 8006b18:	08006bd5 	.word	0x08006bd5
 8006b1c:	08006bd5 	.word	0x08006bd5
 8006b20:	08006bad 	.word	0x08006bad
 8006b24:	08006bd5 	.word	0x08006bd5
 8006b28:	08006bd5 	.word	0x08006bd5
 8006b2c:	08006bd5 	.word	0x08006bd5
 8006b30:	08006bd5 	.word	0x08006bd5
 8006b34:	08006bd5 	.word	0x08006bd5
 8006b38:	08006bd5 	.word	0x08006bd5
 8006b3c:	08006bd5 	.word	0x08006bd5
 8006b40:	08006bb5 	.word	0x08006bb5
 8006b44:	08006bd5 	.word	0x08006bd5
 8006b48:	08006bd5 	.word	0x08006bd5
 8006b4c:	08006bd5 	.word	0x08006bd5
 8006b50:	08006bd5 	.word	0x08006bd5
 8006b54:	08006bd5 	.word	0x08006bd5
 8006b58:	08006bd5 	.word	0x08006bd5
 8006b5c:	08006bd5 	.word	0x08006bd5
 8006b60:	08006bbd 	.word	0x08006bbd
 8006b64:	08006bd5 	.word	0x08006bd5
 8006b68:	08006bd5 	.word	0x08006bd5
 8006b6c:	08006bd5 	.word	0x08006bd5
 8006b70:	08006bd5 	.word	0x08006bd5
 8006b74:	08006bd5 	.word	0x08006bd5
 8006b78:	08006bd5 	.word	0x08006bd5
 8006b7c:	08006bd5 	.word	0x08006bd5
 8006b80:	08006bc5 	.word	0x08006bc5
 8006b84:	08006bd5 	.word	0x08006bd5
 8006b88:	08006bd5 	.word	0x08006bd5
 8006b8c:	08006bd5 	.word	0x08006bd5
 8006b90:	08006bd5 	.word	0x08006bd5
 8006b94:	08006bd5 	.word	0x08006bd5
 8006b98:	08006bd5 	.word	0x08006bd5
 8006b9c:	08006bd5 	.word	0x08006bd5
 8006ba0:	08006bcd 	.word	0x08006bcd
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006baa:	e0bc      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006bac:	2304      	movs	r3, #4
 8006bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bb2:	e0b8      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006bb4:	2308      	movs	r3, #8
 8006bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bba:	e0b4      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006bbc:	2310      	movs	r3, #16
 8006bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bc2:	e0b0      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006bc4:	2320      	movs	r3, #32
 8006bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bca:	e0ac      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006bcc:	2340      	movs	r3, #64	@ 0x40
 8006bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bd2:	e0a8      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006bd4:	2380      	movs	r3, #128	@ 0x80
 8006bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bda:	e0a4      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a8f      	ldr	r2, [pc, #572]	@ (8006e20 <UART_SetConfig+0x6a0>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d130      	bne.n	8006c48 <UART_SetConfig+0x4c8>
 8006be6:	4b8d      	ldr	r3, [pc, #564]	@ (8006e1c <UART_SetConfig+0x69c>)
 8006be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bea:	f003 0307 	and.w	r3, r3, #7
 8006bee:	2b05      	cmp	r3, #5
 8006bf0:	d826      	bhi.n	8006c40 <UART_SetConfig+0x4c0>
 8006bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8006bf8 <UART_SetConfig+0x478>)
 8006bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf8:	08006c11 	.word	0x08006c11
 8006bfc:	08006c19 	.word	0x08006c19
 8006c00:	08006c21 	.word	0x08006c21
 8006c04:	08006c29 	.word	0x08006c29
 8006c08:	08006c31 	.word	0x08006c31
 8006c0c:	08006c39 	.word	0x08006c39
 8006c10:	2300      	movs	r3, #0
 8006c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c16:	e086      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006c18:	2304      	movs	r3, #4
 8006c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c1e:	e082      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006c20:	2308      	movs	r3, #8
 8006c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c26:	e07e      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006c28:	2310      	movs	r3, #16
 8006c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c2e:	e07a      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006c30:	2320      	movs	r3, #32
 8006c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c36:	e076      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006c38:	2340      	movs	r3, #64	@ 0x40
 8006c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c3e:	e072      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006c40:	2380      	movs	r3, #128	@ 0x80
 8006c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c46:	e06e      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a75      	ldr	r2, [pc, #468]	@ (8006e24 <UART_SetConfig+0x6a4>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d130      	bne.n	8006cb4 <UART_SetConfig+0x534>
 8006c52:	4b72      	ldr	r3, [pc, #456]	@ (8006e1c <UART_SetConfig+0x69c>)
 8006c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c56:	f003 0307 	and.w	r3, r3, #7
 8006c5a:	2b05      	cmp	r3, #5
 8006c5c:	d826      	bhi.n	8006cac <UART_SetConfig+0x52c>
 8006c5e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c64 <UART_SetConfig+0x4e4>)
 8006c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c64:	08006c7d 	.word	0x08006c7d
 8006c68:	08006c85 	.word	0x08006c85
 8006c6c:	08006c8d 	.word	0x08006c8d
 8006c70:	08006c95 	.word	0x08006c95
 8006c74:	08006c9d 	.word	0x08006c9d
 8006c78:	08006ca5 	.word	0x08006ca5
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c82:	e050      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006c84:	2304      	movs	r3, #4
 8006c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c8a:	e04c      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006c8c:	2308      	movs	r3, #8
 8006c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c92:	e048      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006c94:	2310      	movs	r3, #16
 8006c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c9a:	e044      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006c9c:	2320      	movs	r3, #32
 8006c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ca2:	e040      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006ca4:	2340      	movs	r3, #64	@ 0x40
 8006ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006caa:	e03c      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006cac:	2380      	movs	r3, #128	@ 0x80
 8006cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cb2:	e038      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a5b      	ldr	r2, [pc, #364]	@ (8006e28 <UART_SetConfig+0x6a8>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d130      	bne.n	8006d20 <UART_SetConfig+0x5a0>
 8006cbe:	4b57      	ldr	r3, [pc, #348]	@ (8006e1c <UART_SetConfig+0x69c>)
 8006cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cc2:	f003 0307 	and.w	r3, r3, #7
 8006cc6:	2b05      	cmp	r3, #5
 8006cc8:	d826      	bhi.n	8006d18 <UART_SetConfig+0x598>
 8006cca:	a201      	add	r2, pc, #4	@ (adr r2, 8006cd0 <UART_SetConfig+0x550>)
 8006ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd0:	08006ce9 	.word	0x08006ce9
 8006cd4:	08006cf1 	.word	0x08006cf1
 8006cd8:	08006cf9 	.word	0x08006cf9
 8006cdc:	08006d01 	.word	0x08006d01
 8006ce0:	08006d09 	.word	0x08006d09
 8006ce4:	08006d11 	.word	0x08006d11
 8006ce8:	2302      	movs	r3, #2
 8006cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cee:	e01a      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006cf0:	2304      	movs	r3, #4
 8006cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cf6:	e016      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006cf8:	2308      	movs	r3, #8
 8006cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cfe:	e012      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006d00:	2310      	movs	r3, #16
 8006d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d06:	e00e      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006d08:	2320      	movs	r3, #32
 8006d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d0e:	e00a      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006d10:	2340      	movs	r3, #64	@ 0x40
 8006d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d16:	e006      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006d18:	2380      	movs	r3, #128	@ 0x80
 8006d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d1e:	e002      	b.n	8006d26 <UART_SetConfig+0x5a6>
 8006d20:	2380      	movs	r3, #128	@ 0x80
 8006d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a3f      	ldr	r2, [pc, #252]	@ (8006e28 <UART_SetConfig+0x6a8>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	f040 80f8 	bne.w	8006f22 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d32:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006d36:	2b20      	cmp	r3, #32
 8006d38:	dc46      	bgt.n	8006dc8 <UART_SetConfig+0x648>
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	f2c0 8082 	blt.w	8006e44 <UART_SetConfig+0x6c4>
 8006d40:	3b02      	subs	r3, #2
 8006d42:	2b1e      	cmp	r3, #30
 8006d44:	d87e      	bhi.n	8006e44 <UART_SetConfig+0x6c4>
 8006d46:	a201      	add	r2, pc, #4	@ (adr r2, 8006d4c <UART_SetConfig+0x5cc>)
 8006d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d4c:	08006dcf 	.word	0x08006dcf
 8006d50:	08006e45 	.word	0x08006e45
 8006d54:	08006dd7 	.word	0x08006dd7
 8006d58:	08006e45 	.word	0x08006e45
 8006d5c:	08006e45 	.word	0x08006e45
 8006d60:	08006e45 	.word	0x08006e45
 8006d64:	08006de7 	.word	0x08006de7
 8006d68:	08006e45 	.word	0x08006e45
 8006d6c:	08006e45 	.word	0x08006e45
 8006d70:	08006e45 	.word	0x08006e45
 8006d74:	08006e45 	.word	0x08006e45
 8006d78:	08006e45 	.word	0x08006e45
 8006d7c:	08006e45 	.word	0x08006e45
 8006d80:	08006e45 	.word	0x08006e45
 8006d84:	08006df7 	.word	0x08006df7
 8006d88:	08006e45 	.word	0x08006e45
 8006d8c:	08006e45 	.word	0x08006e45
 8006d90:	08006e45 	.word	0x08006e45
 8006d94:	08006e45 	.word	0x08006e45
 8006d98:	08006e45 	.word	0x08006e45
 8006d9c:	08006e45 	.word	0x08006e45
 8006da0:	08006e45 	.word	0x08006e45
 8006da4:	08006e45 	.word	0x08006e45
 8006da8:	08006e45 	.word	0x08006e45
 8006dac:	08006e45 	.word	0x08006e45
 8006db0:	08006e45 	.word	0x08006e45
 8006db4:	08006e45 	.word	0x08006e45
 8006db8:	08006e45 	.word	0x08006e45
 8006dbc:	08006e45 	.word	0x08006e45
 8006dc0:	08006e45 	.word	0x08006e45
 8006dc4:	08006e37 	.word	0x08006e37
 8006dc8:	2b40      	cmp	r3, #64	@ 0x40
 8006dca:	d037      	beq.n	8006e3c <UART_SetConfig+0x6bc>
 8006dcc:	e03a      	b.n	8006e44 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006dce:	f7fe f85d 	bl	8004e8c <HAL_RCCEx_GetD3PCLK1Freq>
 8006dd2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006dd4:	e03c      	b.n	8006e50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7fe f86c 	bl	8004eb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006de4:	e034      	b.n	8006e50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006de6:	f107 0318 	add.w	r3, r7, #24
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7fe f9b8 	bl	8005160 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006df4:	e02c      	b.n	8006e50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006df6:	4b09      	ldr	r3, [pc, #36]	@ (8006e1c <UART_SetConfig+0x69c>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 0320 	and.w	r3, r3, #32
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d016      	beq.n	8006e30 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006e02:	4b06      	ldr	r3, [pc, #24]	@ (8006e1c <UART_SetConfig+0x69c>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	08db      	lsrs	r3, r3, #3
 8006e08:	f003 0303 	and.w	r3, r3, #3
 8006e0c:	4a07      	ldr	r2, [pc, #28]	@ (8006e2c <UART_SetConfig+0x6ac>)
 8006e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006e14:	e01c      	b.n	8006e50 <UART_SetConfig+0x6d0>
 8006e16:	bf00      	nop
 8006e18:	40011400 	.word	0x40011400
 8006e1c:	58024400 	.word	0x58024400
 8006e20:	40007800 	.word	0x40007800
 8006e24:	40007c00 	.word	0x40007c00
 8006e28:	58000c00 	.word	0x58000c00
 8006e2c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006e30:	4b9d      	ldr	r3, [pc, #628]	@ (80070a8 <UART_SetConfig+0x928>)
 8006e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e34:	e00c      	b.n	8006e50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006e36:	4b9d      	ldr	r3, [pc, #628]	@ (80070ac <UART_SetConfig+0x92c>)
 8006e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e3a:	e009      	b.n	8006e50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e42:	e005      	b.n	8006e50 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006e44:	2300      	movs	r3, #0
 8006e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006e4e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f000 81de 	beq.w	8007214 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e5c:	4a94      	ldr	r2, [pc, #592]	@ (80070b0 <UART_SetConfig+0x930>)
 8006e5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e62:	461a      	mov	r2, r3
 8006e64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e66:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e6a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	685a      	ldr	r2, [r3, #4]
 8006e70:	4613      	mov	r3, r2
 8006e72:	005b      	lsls	r3, r3, #1
 8006e74:	4413      	add	r3, r2
 8006e76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d305      	bcc.n	8006e88 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d903      	bls.n	8006e90 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006e8e:	e1c1      	b.n	8007214 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e92:	2200      	movs	r2, #0
 8006e94:	60bb      	str	r3, [r7, #8]
 8006e96:	60fa      	str	r2, [r7, #12]
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e9c:	4a84      	ldr	r2, [pc, #528]	@ (80070b0 <UART_SetConfig+0x930>)
 8006e9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	603b      	str	r3, [r7, #0]
 8006ea8:	607a      	str	r2, [r7, #4]
 8006eaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006eae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006eb2:	f7f9 fa65 	bl	8000380 <__aeabi_uldivmod>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	460b      	mov	r3, r1
 8006eba:	4610      	mov	r0, r2
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	f04f 0200 	mov.w	r2, #0
 8006ec2:	f04f 0300 	mov.w	r3, #0
 8006ec6:	020b      	lsls	r3, r1, #8
 8006ec8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006ecc:	0202      	lsls	r2, r0, #8
 8006ece:	6979      	ldr	r1, [r7, #20]
 8006ed0:	6849      	ldr	r1, [r1, #4]
 8006ed2:	0849      	lsrs	r1, r1, #1
 8006ed4:	2000      	movs	r0, #0
 8006ed6:	460c      	mov	r4, r1
 8006ed8:	4605      	mov	r5, r0
 8006eda:	eb12 0804 	adds.w	r8, r2, r4
 8006ede:	eb43 0905 	adc.w	r9, r3, r5
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	469a      	mov	sl, r3
 8006eea:	4693      	mov	fp, r2
 8006eec:	4652      	mov	r2, sl
 8006eee:	465b      	mov	r3, fp
 8006ef0:	4640      	mov	r0, r8
 8006ef2:	4649      	mov	r1, r9
 8006ef4:	f7f9 fa44 	bl	8000380 <__aeabi_uldivmod>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	460b      	mov	r3, r1
 8006efc:	4613      	mov	r3, r2
 8006efe:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f06:	d308      	bcc.n	8006f1a <UART_SetConfig+0x79a>
 8006f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f0e:	d204      	bcs.n	8006f1a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f16:	60da      	str	r2, [r3, #12]
 8006f18:	e17c      	b.n	8007214 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006f20:	e178      	b.n	8007214 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	69db      	ldr	r3, [r3, #28]
 8006f26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f2a:	f040 80c5 	bne.w	80070b8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006f2e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006f32:	2b20      	cmp	r3, #32
 8006f34:	dc48      	bgt.n	8006fc8 <UART_SetConfig+0x848>
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	db7b      	blt.n	8007032 <UART_SetConfig+0x8b2>
 8006f3a:	2b20      	cmp	r3, #32
 8006f3c:	d879      	bhi.n	8007032 <UART_SetConfig+0x8b2>
 8006f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8006f44 <UART_SetConfig+0x7c4>)
 8006f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f44:	08006fcf 	.word	0x08006fcf
 8006f48:	08006fd7 	.word	0x08006fd7
 8006f4c:	08007033 	.word	0x08007033
 8006f50:	08007033 	.word	0x08007033
 8006f54:	08006fdf 	.word	0x08006fdf
 8006f58:	08007033 	.word	0x08007033
 8006f5c:	08007033 	.word	0x08007033
 8006f60:	08007033 	.word	0x08007033
 8006f64:	08006fef 	.word	0x08006fef
 8006f68:	08007033 	.word	0x08007033
 8006f6c:	08007033 	.word	0x08007033
 8006f70:	08007033 	.word	0x08007033
 8006f74:	08007033 	.word	0x08007033
 8006f78:	08007033 	.word	0x08007033
 8006f7c:	08007033 	.word	0x08007033
 8006f80:	08007033 	.word	0x08007033
 8006f84:	08006fff 	.word	0x08006fff
 8006f88:	08007033 	.word	0x08007033
 8006f8c:	08007033 	.word	0x08007033
 8006f90:	08007033 	.word	0x08007033
 8006f94:	08007033 	.word	0x08007033
 8006f98:	08007033 	.word	0x08007033
 8006f9c:	08007033 	.word	0x08007033
 8006fa0:	08007033 	.word	0x08007033
 8006fa4:	08007033 	.word	0x08007033
 8006fa8:	08007033 	.word	0x08007033
 8006fac:	08007033 	.word	0x08007033
 8006fb0:	08007033 	.word	0x08007033
 8006fb4:	08007033 	.word	0x08007033
 8006fb8:	08007033 	.word	0x08007033
 8006fbc:	08007033 	.word	0x08007033
 8006fc0:	08007033 	.word	0x08007033
 8006fc4:	08007025 	.word	0x08007025
 8006fc8:	2b40      	cmp	r3, #64	@ 0x40
 8006fca:	d02e      	beq.n	800702a <UART_SetConfig+0x8aa>
 8006fcc:	e031      	b.n	8007032 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fce:	f7fc fd27 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 8006fd2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006fd4:	e033      	b.n	800703e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fd6:	f7fc fd39 	bl	8003a4c <HAL_RCC_GetPCLK2Freq>
 8006fda:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006fdc:	e02f      	b.n	800703e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7fd ff68 	bl	8004eb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fec:	e027      	b.n	800703e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fee:	f107 0318 	add.w	r3, r7, #24
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7fe f8b4 	bl	8005160 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ffc:	e01f      	b.n	800703e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ffe:	4b2d      	ldr	r3, [pc, #180]	@ (80070b4 <UART_SetConfig+0x934>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 0320 	and.w	r3, r3, #32
 8007006:	2b00      	cmp	r3, #0
 8007008:	d009      	beq.n	800701e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800700a:	4b2a      	ldr	r3, [pc, #168]	@ (80070b4 <UART_SetConfig+0x934>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	08db      	lsrs	r3, r3, #3
 8007010:	f003 0303 	and.w	r3, r3, #3
 8007014:	4a24      	ldr	r2, [pc, #144]	@ (80070a8 <UART_SetConfig+0x928>)
 8007016:	fa22 f303 	lsr.w	r3, r2, r3
 800701a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800701c:	e00f      	b.n	800703e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800701e:	4b22      	ldr	r3, [pc, #136]	@ (80070a8 <UART_SetConfig+0x928>)
 8007020:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007022:	e00c      	b.n	800703e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007024:	4b21      	ldr	r3, [pc, #132]	@ (80070ac <UART_SetConfig+0x92c>)
 8007026:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007028:	e009      	b.n	800703e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800702a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800702e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007030:	e005      	b.n	800703e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007032:	2300      	movs	r3, #0
 8007034:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800703c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800703e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007040:	2b00      	cmp	r3, #0
 8007042:	f000 80e7 	beq.w	8007214 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800704a:	4a19      	ldr	r2, [pc, #100]	@ (80070b0 <UART_SetConfig+0x930>)
 800704c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007050:	461a      	mov	r2, r3
 8007052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007054:	fbb3 f3f2 	udiv	r3, r3, r2
 8007058:	005a      	lsls	r2, r3, #1
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	085b      	lsrs	r3, r3, #1
 8007060:	441a      	add	r2, r3
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	fbb2 f3f3 	udiv	r3, r2, r3
 800706a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800706c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800706e:	2b0f      	cmp	r3, #15
 8007070:	d916      	bls.n	80070a0 <UART_SetConfig+0x920>
 8007072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007074:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007078:	d212      	bcs.n	80070a0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800707a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800707c:	b29b      	uxth	r3, r3
 800707e:	f023 030f 	bic.w	r3, r3, #15
 8007082:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007086:	085b      	lsrs	r3, r3, #1
 8007088:	b29b      	uxth	r3, r3
 800708a:	f003 0307 	and.w	r3, r3, #7
 800708e:	b29a      	uxth	r2, r3
 8007090:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007092:	4313      	orrs	r3, r2
 8007094:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800709c:	60da      	str	r2, [r3, #12]
 800709e:	e0b9      	b.n	8007214 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80070a6:	e0b5      	b.n	8007214 <UART_SetConfig+0xa94>
 80070a8:	03d09000 	.word	0x03d09000
 80070ac:	003d0900 	.word	0x003d0900
 80070b0:	08009e80 	.word	0x08009e80
 80070b4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80070b8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80070bc:	2b20      	cmp	r3, #32
 80070be:	dc49      	bgt.n	8007154 <UART_SetConfig+0x9d4>
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	db7c      	blt.n	80071be <UART_SetConfig+0xa3e>
 80070c4:	2b20      	cmp	r3, #32
 80070c6:	d87a      	bhi.n	80071be <UART_SetConfig+0xa3e>
 80070c8:	a201      	add	r2, pc, #4	@ (adr r2, 80070d0 <UART_SetConfig+0x950>)
 80070ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ce:	bf00      	nop
 80070d0:	0800715b 	.word	0x0800715b
 80070d4:	08007163 	.word	0x08007163
 80070d8:	080071bf 	.word	0x080071bf
 80070dc:	080071bf 	.word	0x080071bf
 80070e0:	0800716b 	.word	0x0800716b
 80070e4:	080071bf 	.word	0x080071bf
 80070e8:	080071bf 	.word	0x080071bf
 80070ec:	080071bf 	.word	0x080071bf
 80070f0:	0800717b 	.word	0x0800717b
 80070f4:	080071bf 	.word	0x080071bf
 80070f8:	080071bf 	.word	0x080071bf
 80070fc:	080071bf 	.word	0x080071bf
 8007100:	080071bf 	.word	0x080071bf
 8007104:	080071bf 	.word	0x080071bf
 8007108:	080071bf 	.word	0x080071bf
 800710c:	080071bf 	.word	0x080071bf
 8007110:	0800718b 	.word	0x0800718b
 8007114:	080071bf 	.word	0x080071bf
 8007118:	080071bf 	.word	0x080071bf
 800711c:	080071bf 	.word	0x080071bf
 8007120:	080071bf 	.word	0x080071bf
 8007124:	080071bf 	.word	0x080071bf
 8007128:	080071bf 	.word	0x080071bf
 800712c:	080071bf 	.word	0x080071bf
 8007130:	080071bf 	.word	0x080071bf
 8007134:	080071bf 	.word	0x080071bf
 8007138:	080071bf 	.word	0x080071bf
 800713c:	080071bf 	.word	0x080071bf
 8007140:	080071bf 	.word	0x080071bf
 8007144:	080071bf 	.word	0x080071bf
 8007148:	080071bf 	.word	0x080071bf
 800714c:	080071bf 	.word	0x080071bf
 8007150:	080071b1 	.word	0x080071b1
 8007154:	2b40      	cmp	r3, #64	@ 0x40
 8007156:	d02e      	beq.n	80071b6 <UART_SetConfig+0xa36>
 8007158:	e031      	b.n	80071be <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800715a:	f7fc fc61 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 800715e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007160:	e033      	b.n	80071ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007162:	f7fc fc73 	bl	8003a4c <HAL_RCC_GetPCLK2Freq>
 8007166:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007168:	e02f      	b.n	80071ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800716a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800716e:	4618      	mov	r0, r3
 8007170:	f7fd fea2 	bl	8004eb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007176:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007178:	e027      	b.n	80071ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800717a:	f107 0318 	add.w	r3, r7, #24
 800717e:	4618      	mov	r0, r3
 8007180:	f7fd ffee 	bl	8005160 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007188:	e01f      	b.n	80071ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800718a:	4b2d      	ldr	r3, [pc, #180]	@ (8007240 <UART_SetConfig+0xac0>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 0320 	and.w	r3, r3, #32
 8007192:	2b00      	cmp	r3, #0
 8007194:	d009      	beq.n	80071aa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007196:	4b2a      	ldr	r3, [pc, #168]	@ (8007240 <UART_SetConfig+0xac0>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	08db      	lsrs	r3, r3, #3
 800719c:	f003 0303 	and.w	r3, r3, #3
 80071a0:	4a28      	ldr	r2, [pc, #160]	@ (8007244 <UART_SetConfig+0xac4>)
 80071a2:	fa22 f303 	lsr.w	r3, r2, r3
 80071a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80071a8:	e00f      	b.n	80071ca <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80071aa:	4b26      	ldr	r3, [pc, #152]	@ (8007244 <UART_SetConfig+0xac4>)
 80071ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071ae:	e00c      	b.n	80071ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80071b0:	4b25      	ldr	r3, [pc, #148]	@ (8007248 <UART_SetConfig+0xac8>)
 80071b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071b4:	e009      	b.n	80071ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071bc:	e005      	b.n	80071ca <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80071be:	2300      	movs	r3, #0
 80071c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80071c8:	bf00      	nop
    }

    if (pclk != 0U)
 80071ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d021      	beq.n	8007214 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d4:	4a1d      	ldr	r2, [pc, #116]	@ (800724c <UART_SetConfig+0xacc>)
 80071d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071da:	461a      	mov	r2, r3
 80071dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071de:	fbb3 f2f2 	udiv	r2, r3, r2
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	085b      	lsrs	r3, r3, #1
 80071e8:	441a      	add	r2, r3
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80071f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f6:	2b0f      	cmp	r3, #15
 80071f8:	d909      	bls.n	800720e <UART_SetConfig+0xa8e>
 80071fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007200:	d205      	bcs.n	800720e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007204:	b29a      	uxth	r2, r3
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	60da      	str	r2, [r3, #12]
 800720c:	e002      	b.n	8007214 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	2201      	movs	r2, #1
 8007218:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	2201      	movs	r2, #1
 8007220:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	2200      	movs	r2, #0
 8007228:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	2200      	movs	r2, #0
 800722e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007230:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007234:	4618      	mov	r0, r3
 8007236:	3748      	adds	r7, #72	@ 0x48
 8007238:	46bd      	mov	sp, r7
 800723a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800723e:	bf00      	nop
 8007240:	58024400 	.word	0x58024400
 8007244:	03d09000 	.word	0x03d09000
 8007248:	003d0900 	.word	0x003d0900
 800724c:	08009e80 	.word	0x08009e80

08007250 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800725c:	f003 0308 	and.w	r3, r3, #8
 8007260:	2b00      	cmp	r3, #0
 8007262:	d00a      	beq.n	800727a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	430a      	orrs	r2, r1
 8007278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800727e:	f003 0301 	and.w	r3, r3, #1
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00a      	beq.n	800729c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	430a      	orrs	r2, r1
 800729a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072a0:	f003 0302 	and.w	r3, r3, #2
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00a      	beq.n	80072be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	430a      	orrs	r2, r1
 80072bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072c2:	f003 0304 	and.w	r3, r3, #4
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00a      	beq.n	80072e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	430a      	orrs	r2, r1
 80072de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072e4:	f003 0310 	and.w	r3, r3, #16
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00a      	beq.n	8007302 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	430a      	orrs	r2, r1
 8007300:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007306:	f003 0320 	and.w	r3, r3, #32
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00a      	beq.n	8007324 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	430a      	orrs	r2, r1
 8007322:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800732c:	2b00      	cmp	r3, #0
 800732e:	d01a      	beq.n	8007366 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	430a      	orrs	r2, r1
 8007344:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800734a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800734e:	d10a      	bne.n	8007366 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	430a      	orrs	r2, r1
 8007364:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800736a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00a      	beq.n	8007388 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	430a      	orrs	r2, r1
 8007386:	605a      	str	r2, [r3, #4]
  }
}
 8007388:	bf00      	nop
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b098      	sub	sp, #96	@ 0x60
 8007398:	af02      	add	r7, sp, #8
 800739a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80073a4:	f7fa fd00 	bl	8001da8 <HAL_GetTick>
 80073a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 0308 	and.w	r3, r3, #8
 80073b4:	2b08      	cmp	r3, #8
 80073b6:	d12f      	bne.n	8007418 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80073bc:	9300      	str	r3, [sp, #0]
 80073be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073c0:	2200      	movs	r2, #0
 80073c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f88e 	bl	80074e8 <UART_WaitOnFlagUntilTimeout>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d022      	beq.n	8007418 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073da:	e853 3f00 	ldrex	r3, [r3]
 80073de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80073e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	461a      	mov	r2, r3
 80073ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80073f2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80073f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073f8:	e841 2300 	strex	r3, r2, [r1]
 80073fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80073fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1e6      	bne.n	80073d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2220      	movs	r2, #32
 8007408:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007414:	2303      	movs	r3, #3
 8007416:	e063      	b.n	80074e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 0304 	and.w	r3, r3, #4
 8007422:	2b04      	cmp	r3, #4
 8007424:	d149      	bne.n	80074ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007426:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800742a:	9300      	str	r3, [sp, #0]
 800742c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800742e:	2200      	movs	r2, #0
 8007430:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 f857 	bl	80074e8 <UART_WaitOnFlagUntilTimeout>
 800743a:	4603      	mov	r3, r0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d03c      	beq.n	80074ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007448:	e853 3f00 	ldrex	r3, [r3]
 800744c:	623b      	str	r3, [r7, #32]
   return(result);
 800744e:	6a3b      	ldr	r3, [r7, #32]
 8007450:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007454:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	461a      	mov	r2, r3
 800745c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800745e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007460:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007462:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007464:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007466:	e841 2300 	strex	r3, r2, [r1]
 800746a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800746c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1e6      	bne.n	8007440 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	3308      	adds	r3, #8
 8007478:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	e853 3f00 	ldrex	r3, [r3]
 8007480:	60fb      	str	r3, [r7, #12]
   return(result);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f023 0301 	bic.w	r3, r3, #1
 8007488:	64bb      	str	r3, [r7, #72]	@ 0x48
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	3308      	adds	r3, #8
 8007490:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007492:	61fa      	str	r2, [r7, #28]
 8007494:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007496:	69b9      	ldr	r1, [r7, #24]
 8007498:	69fa      	ldr	r2, [r7, #28]
 800749a:	e841 2300 	strex	r3, r2, [r1]
 800749e:	617b      	str	r3, [r7, #20]
   return(result);
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d1e5      	bne.n	8007472 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2220      	movs	r2, #32
 80074aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074b6:	2303      	movs	r3, #3
 80074b8:	e012      	b.n	80074e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2220      	movs	r2, #32
 80074be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2220      	movs	r2, #32
 80074c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3758      	adds	r7, #88	@ 0x58
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	603b      	str	r3, [r7, #0]
 80074f4:	4613      	mov	r3, r2
 80074f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074f8:	e04f      	b.n	800759a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007500:	d04b      	beq.n	800759a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007502:	f7fa fc51 	bl	8001da8 <HAL_GetTick>
 8007506:	4602      	mov	r2, r0
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	1ad3      	subs	r3, r2, r3
 800750c:	69ba      	ldr	r2, [r7, #24]
 800750e:	429a      	cmp	r2, r3
 8007510:	d302      	bcc.n	8007518 <UART_WaitOnFlagUntilTimeout+0x30>
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d101      	bne.n	800751c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007518:	2303      	movs	r3, #3
 800751a:	e04e      	b.n	80075ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 0304 	and.w	r3, r3, #4
 8007526:	2b00      	cmp	r3, #0
 8007528:	d037      	beq.n	800759a <UART_WaitOnFlagUntilTimeout+0xb2>
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	2b80      	cmp	r3, #128	@ 0x80
 800752e:	d034      	beq.n	800759a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	2b40      	cmp	r3, #64	@ 0x40
 8007534:	d031      	beq.n	800759a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	69db      	ldr	r3, [r3, #28]
 800753c:	f003 0308 	and.w	r3, r3, #8
 8007540:	2b08      	cmp	r3, #8
 8007542:	d110      	bne.n	8007566 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2208      	movs	r2, #8
 800754a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f000 f839 	bl	80075c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2208      	movs	r2, #8
 8007556:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e029      	b.n	80075ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	69db      	ldr	r3, [r3, #28]
 800756c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007570:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007574:	d111      	bne.n	800759a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800757e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f000 f81f 	bl	80075c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2220      	movs	r2, #32
 800758a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007596:	2303      	movs	r3, #3
 8007598:	e00f      	b.n	80075ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	69da      	ldr	r2, [r3, #28]
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	4013      	ands	r3, r2
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	bf0c      	ite	eq
 80075aa:	2301      	moveq	r3, #1
 80075ac:	2300      	movne	r3, #0
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	461a      	mov	r2, r3
 80075b2:	79fb      	ldrb	r3, [r7, #7]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d0a0      	beq.n	80074fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
	...

080075c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b095      	sub	sp, #84	@ 0x54
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075d4:	e853 3f00 	ldrex	r3, [r3]
 80075d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80075da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	461a      	mov	r2, r3
 80075e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80075ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80075f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80075f2:	e841 2300 	strex	r3, r2, [r1]
 80075f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80075f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1e6      	bne.n	80075cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	3308      	adds	r3, #8
 8007604:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007606:	6a3b      	ldr	r3, [r7, #32]
 8007608:	e853 3f00 	ldrex	r3, [r3]
 800760c:	61fb      	str	r3, [r7, #28]
   return(result);
 800760e:	69fa      	ldr	r2, [r7, #28]
 8007610:	4b1e      	ldr	r3, [pc, #120]	@ (800768c <UART_EndRxTransfer+0xc8>)
 8007612:	4013      	ands	r3, r2
 8007614:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	3308      	adds	r3, #8
 800761c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800761e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007620:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007622:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007624:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007626:	e841 2300 	strex	r3, r2, [r1]
 800762a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800762c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1e5      	bne.n	80075fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007636:	2b01      	cmp	r3, #1
 8007638:	d118      	bne.n	800766c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	e853 3f00 	ldrex	r3, [r3]
 8007646:	60bb      	str	r3, [r7, #8]
   return(result);
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	f023 0310 	bic.w	r3, r3, #16
 800764e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	461a      	mov	r2, r3
 8007656:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007658:	61bb      	str	r3, [r7, #24]
 800765a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765c:	6979      	ldr	r1, [r7, #20]
 800765e:	69ba      	ldr	r2, [r7, #24]
 8007660:	e841 2300 	strex	r3, r2, [r1]
 8007664:	613b      	str	r3, [r7, #16]
   return(result);
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d1e6      	bne.n	800763a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2220      	movs	r2, #32
 8007670:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007680:	bf00      	nop
 8007682:	3754      	adds	r7, #84	@ 0x54
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr
 800768c:	effffffe 	.word	0xeffffffe

08007690 <std>:
 8007690:	2300      	movs	r3, #0
 8007692:	b510      	push	{r4, lr}
 8007694:	4604      	mov	r4, r0
 8007696:	e9c0 3300 	strd	r3, r3, [r0]
 800769a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800769e:	6083      	str	r3, [r0, #8]
 80076a0:	8181      	strh	r1, [r0, #12]
 80076a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80076a4:	81c2      	strh	r2, [r0, #14]
 80076a6:	6183      	str	r3, [r0, #24]
 80076a8:	4619      	mov	r1, r3
 80076aa:	2208      	movs	r2, #8
 80076ac:	305c      	adds	r0, #92	@ 0x5c
 80076ae:	f000 f906 	bl	80078be <memset>
 80076b2:	4b0d      	ldr	r3, [pc, #52]	@ (80076e8 <std+0x58>)
 80076b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80076b6:	4b0d      	ldr	r3, [pc, #52]	@ (80076ec <std+0x5c>)
 80076b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80076ba:	4b0d      	ldr	r3, [pc, #52]	@ (80076f0 <std+0x60>)
 80076bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80076be:	4b0d      	ldr	r3, [pc, #52]	@ (80076f4 <std+0x64>)
 80076c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80076c2:	4b0d      	ldr	r3, [pc, #52]	@ (80076f8 <std+0x68>)
 80076c4:	6224      	str	r4, [r4, #32]
 80076c6:	429c      	cmp	r4, r3
 80076c8:	d006      	beq.n	80076d8 <std+0x48>
 80076ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80076ce:	4294      	cmp	r4, r2
 80076d0:	d002      	beq.n	80076d8 <std+0x48>
 80076d2:	33d0      	adds	r3, #208	@ 0xd0
 80076d4:	429c      	cmp	r4, r3
 80076d6:	d105      	bne.n	80076e4 <std+0x54>
 80076d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80076dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076e0:	f000 b966 	b.w	80079b0 <__retarget_lock_init_recursive>
 80076e4:	bd10      	pop	{r4, pc}
 80076e6:	bf00      	nop
 80076e8:	08007839 	.word	0x08007839
 80076ec:	0800785b 	.word	0x0800785b
 80076f0:	08007893 	.word	0x08007893
 80076f4:	080078b7 	.word	0x080078b7
 80076f8:	240001e8 	.word	0x240001e8

080076fc <stdio_exit_handler>:
 80076fc:	4a02      	ldr	r2, [pc, #8]	@ (8007708 <stdio_exit_handler+0xc>)
 80076fe:	4903      	ldr	r1, [pc, #12]	@ (800770c <stdio_exit_handler+0x10>)
 8007700:	4803      	ldr	r0, [pc, #12]	@ (8007710 <stdio_exit_handler+0x14>)
 8007702:	f000 b869 	b.w	80077d8 <_fwalk_sglue>
 8007706:	bf00      	nop
 8007708:	2400002c 	.word	0x2400002c
 800770c:	0800824d 	.word	0x0800824d
 8007710:	2400003c 	.word	0x2400003c

08007714 <cleanup_stdio>:
 8007714:	6841      	ldr	r1, [r0, #4]
 8007716:	4b0c      	ldr	r3, [pc, #48]	@ (8007748 <cleanup_stdio+0x34>)
 8007718:	4299      	cmp	r1, r3
 800771a:	b510      	push	{r4, lr}
 800771c:	4604      	mov	r4, r0
 800771e:	d001      	beq.n	8007724 <cleanup_stdio+0x10>
 8007720:	f000 fd94 	bl	800824c <_fflush_r>
 8007724:	68a1      	ldr	r1, [r4, #8]
 8007726:	4b09      	ldr	r3, [pc, #36]	@ (800774c <cleanup_stdio+0x38>)
 8007728:	4299      	cmp	r1, r3
 800772a:	d002      	beq.n	8007732 <cleanup_stdio+0x1e>
 800772c:	4620      	mov	r0, r4
 800772e:	f000 fd8d 	bl	800824c <_fflush_r>
 8007732:	68e1      	ldr	r1, [r4, #12]
 8007734:	4b06      	ldr	r3, [pc, #24]	@ (8007750 <cleanup_stdio+0x3c>)
 8007736:	4299      	cmp	r1, r3
 8007738:	d004      	beq.n	8007744 <cleanup_stdio+0x30>
 800773a:	4620      	mov	r0, r4
 800773c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007740:	f000 bd84 	b.w	800824c <_fflush_r>
 8007744:	bd10      	pop	{r4, pc}
 8007746:	bf00      	nop
 8007748:	240001e8 	.word	0x240001e8
 800774c:	24000250 	.word	0x24000250
 8007750:	240002b8 	.word	0x240002b8

08007754 <global_stdio_init.part.0>:
 8007754:	b510      	push	{r4, lr}
 8007756:	4b0b      	ldr	r3, [pc, #44]	@ (8007784 <global_stdio_init.part.0+0x30>)
 8007758:	4c0b      	ldr	r4, [pc, #44]	@ (8007788 <global_stdio_init.part.0+0x34>)
 800775a:	4a0c      	ldr	r2, [pc, #48]	@ (800778c <global_stdio_init.part.0+0x38>)
 800775c:	601a      	str	r2, [r3, #0]
 800775e:	4620      	mov	r0, r4
 8007760:	2200      	movs	r2, #0
 8007762:	2104      	movs	r1, #4
 8007764:	f7ff ff94 	bl	8007690 <std>
 8007768:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800776c:	2201      	movs	r2, #1
 800776e:	2109      	movs	r1, #9
 8007770:	f7ff ff8e 	bl	8007690 <std>
 8007774:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007778:	2202      	movs	r2, #2
 800777a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800777e:	2112      	movs	r1, #18
 8007780:	f7ff bf86 	b.w	8007690 <std>
 8007784:	24000320 	.word	0x24000320
 8007788:	240001e8 	.word	0x240001e8
 800778c:	080076fd 	.word	0x080076fd

08007790 <__sfp_lock_acquire>:
 8007790:	4801      	ldr	r0, [pc, #4]	@ (8007798 <__sfp_lock_acquire+0x8>)
 8007792:	f000 b90e 	b.w	80079b2 <__retarget_lock_acquire_recursive>
 8007796:	bf00      	nop
 8007798:	24000329 	.word	0x24000329

0800779c <__sfp_lock_release>:
 800779c:	4801      	ldr	r0, [pc, #4]	@ (80077a4 <__sfp_lock_release+0x8>)
 800779e:	f000 b909 	b.w	80079b4 <__retarget_lock_release_recursive>
 80077a2:	bf00      	nop
 80077a4:	24000329 	.word	0x24000329

080077a8 <__sinit>:
 80077a8:	b510      	push	{r4, lr}
 80077aa:	4604      	mov	r4, r0
 80077ac:	f7ff fff0 	bl	8007790 <__sfp_lock_acquire>
 80077b0:	6a23      	ldr	r3, [r4, #32]
 80077b2:	b11b      	cbz	r3, 80077bc <__sinit+0x14>
 80077b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077b8:	f7ff bff0 	b.w	800779c <__sfp_lock_release>
 80077bc:	4b04      	ldr	r3, [pc, #16]	@ (80077d0 <__sinit+0x28>)
 80077be:	6223      	str	r3, [r4, #32]
 80077c0:	4b04      	ldr	r3, [pc, #16]	@ (80077d4 <__sinit+0x2c>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1f5      	bne.n	80077b4 <__sinit+0xc>
 80077c8:	f7ff ffc4 	bl	8007754 <global_stdio_init.part.0>
 80077cc:	e7f2      	b.n	80077b4 <__sinit+0xc>
 80077ce:	bf00      	nop
 80077d0:	08007715 	.word	0x08007715
 80077d4:	24000320 	.word	0x24000320

080077d8 <_fwalk_sglue>:
 80077d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077dc:	4607      	mov	r7, r0
 80077de:	4688      	mov	r8, r1
 80077e0:	4614      	mov	r4, r2
 80077e2:	2600      	movs	r6, #0
 80077e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077e8:	f1b9 0901 	subs.w	r9, r9, #1
 80077ec:	d505      	bpl.n	80077fa <_fwalk_sglue+0x22>
 80077ee:	6824      	ldr	r4, [r4, #0]
 80077f0:	2c00      	cmp	r4, #0
 80077f2:	d1f7      	bne.n	80077e4 <_fwalk_sglue+0xc>
 80077f4:	4630      	mov	r0, r6
 80077f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077fa:	89ab      	ldrh	r3, [r5, #12]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d907      	bls.n	8007810 <_fwalk_sglue+0x38>
 8007800:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007804:	3301      	adds	r3, #1
 8007806:	d003      	beq.n	8007810 <_fwalk_sglue+0x38>
 8007808:	4629      	mov	r1, r5
 800780a:	4638      	mov	r0, r7
 800780c:	47c0      	blx	r8
 800780e:	4306      	orrs	r6, r0
 8007810:	3568      	adds	r5, #104	@ 0x68
 8007812:	e7e9      	b.n	80077e8 <_fwalk_sglue+0x10>

08007814 <iprintf>:
 8007814:	b40f      	push	{r0, r1, r2, r3}
 8007816:	b507      	push	{r0, r1, r2, lr}
 8007818:	4906      	ldr	r1, [pc, #24]	@ (8007834 <iprintf+0x20>)
 800781a:	ab04      	add	r3, sp, #16
 800781c:	6808      	ldr	r0, [r1, #0]
 800781e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007822:	6881      	ldr	r1, [r0, #8]
 8007824:	9301      	str	r3, [sp, #4]
 8007826:	f000 f9e9 	bl	8007bfc <_vfiprintf_r>
 800782a:	b003      	add	sp, #12
 800782c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007830:	b004      	add	sp, #16
 8007832:	4770      	bx	lr
 8007834:	24000038 	.word	0x24000038

08007838 <__sread>:
 8007838:	b510      	push	{r4, lr}
 800783a:	460c      	mov	r4, r1
 800783c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007840:	f000 f868 	bl	8007914 <_read_r>
 8007844:	2800      	cmp	r0, #0
 8007846:	bfab      	itete	ge
 8007848:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800784a:	89a3      	ldrhlt	r3, [r4, #12]
 800784c:	181b      	addge	r3, r3, r0
 800784e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007852:	bfac      	ite	ge
 8007854:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007856:	81a3      	strhlt	r3, [r4, #12]
 8007858:	bd10      	pop	{r4, pc}

0800785a <__swrite>:
 800785a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800785e:	461f      	mov	r7, r3
 8007860:	898b      	ldrh	r3, [r1, #12]
 8007862:	05db      	lsls	r3, r3, #23
 8007864:	4605      	mov	r5, r0
 8007866:	460c      	mov	r4, r1
 8007868:	4616      	mov	r6, r2
 800786a:	d505      	bpl.n	8007878 <__swrite+0x1e>
 800786c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007870:	2302      	movs	r3, #2
 8007872:	2200      	movs	r2, #0
 8007874:	f000 f83c 	bl	80078f0 <_lseek_r>
 8007878:	89a3      	ldrh	r3, [r4, #12]
 800787a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800787e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007882:	81a3      	strh	r3, [r4, #12]
 8007884:	4632      	mov	r2, r6
 8007886:	463b      	mov	r3, r7
 8007888:	4628      	mov	r0, r5
 800788a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800788e:	f000 b853 	b.w	8007938 <_write_r>

08007892 <__sseek>:
 8007892:	b510      	push	{r4, lr}
 8007894:	460c      	mov	r4, r1
 8007896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800789a:	f000 f829 	bl	80078f0 <_lseek_r>
 800789e:	1c43      	adds	r3, r0, #1
 80078a0:	89a3      	ldrh	r3, [r4, #12]
 80078a2:	bf15      	itete	ne
 80078a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80078a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80078aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80078ae:	81a3      	strheq	r3, [r4, #12]
 80078b0:	bf18      	it	ne
 80078b2:	81a3      	strhne	r3, [r4, #12]
 80078b4:	bd10      	pop	{r4, pc}

080078b6 <__sclose>:
 80078b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ba:	f000 b809 	b.w	80078d0 <_close_r>

080078be <memset>:
 80078be:	4402      	add	r2, r0
 80078c0:	4603      	mov	r3, r0
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d100      	bne.n	80078c8 <memset+0xa>
 80078c6:	4770      	bx	lr
 80078c8:	f803 1b01 	strb.w	r1, [r3], #1
 80078cc:	e7f9      	b.n	80078c2 <memset+0x4>
	...

080078d0 <_close_r>:
 80078d0:	b538      	push	{r3, r4, r5, lr}
 80078d2:	4d06      	ldr	r5, [pc, #24]	@ (80078ec <_close_r+0x1c>)
 80078d4:	2300      	movs	r3, #0
 80078d6:	4604      	mov	r4, r0
 80078d8:	4608      	mov	r0, r1
 80078da:	602b      	str	r3, [r5, #0]
 80078dc:	f7f9 fe39 	bl	8001552 <_close>
 80078e0:	1c43      	adds	r3, r0, #1
 80078e2:	d102      	bne.n	80078ea <_close_r+0x1a>
 80078e4:	682b      	ldr	r3, [r5, #0]
 80078e6:	b103      	cbz	r3, 80078ea <_close_r+0x1a>
 80078e8:	6023      	str	r3, [r4, #0]
 80078ea:	bd38      	pop	{r3, r4, r5, pc}
 80078ec:	24000324 	.word	0x24000324

080078f0 <_lseek_r>:
 80078f0:	b538      	push	{r3, r4, r5, lr}
 80078f2:	4d07      	ldr	r5, [pc, #28]	@ (8007910 <_lseek_r+0x20>)
 80078f4:	4604      	mov	r4, r0
 80078f6:	4608      	mov	r0, r1
 80078f8:	4611      	mov	r1, r2
 80078fa:	2200      	movs	r2, #0
 80078fc:	602a      	str	r2, [r5, #0]
 80078fe:	461a      	mov	r2, r3
 8007900:	f7f9 fe4e 	bl	80015a0 <_lseek>
 8007904:	1c43      	adds	r3, r0, #1
 8007906:	d102      	bne.n	800790e <_lseek_r+0x1e>
 8007908:	682b      	ldr	r3, [r5, #0]
 800790a:	b103      	cbz	r3, 800790e <_lseek_r+0x1e>
 800790c:	6023      	str	r3, [r4, #0]
 800790e:	bd38      	pop	{r3, r4, r5, pc}
 8007910:	24000324 	.word	0x24000324

08007914 <_read_r>:
 8007914:	b538      	push	{r3, r4, r5, lr}
 8007916:	4d07      	ldr	r5, [pc, #28]	@ (8007934 <_read_r+0x20>)
 8007918:	4604      	mov	r4, r0
 800791a:	4608      	mov	r0, r1
 800791c:	4611      	mov	r1, r2
 800791e:	2200      	movs	r2, #0
 8007920:	602a      	str	r2, [r5, #0]
 8007922:	461a      	mov	r2, r3
 8007924:	f7f9 fddc 	bl	80014e0 <_read>
 8007928:	1c43      	adds	r3, r0, #1
 800792a:	d102      	bne.n	8007932 <_read_r+0x1e>
 800792c:	682b      	ldr	r3, [r5, #0]
 800792e:	b103      	cbz	r3, 8007932 <_read_r+0x1e>
 8007930:	6023      	str	r3, [r4, #0]
 8007932:	bd38      	pop	{r3, r4, r5, pc}
 8007934:	24000324 	.word	0x24000324

08007938 <_write_r>:
 8007938:	b538      	push	{r3, r4, r5, lr}
 800793a:	4d07      	ldr	r5, [pc, #28]	@ (8007958 <_write_r+0x20>)
 800793c:	4604      	mov	r4, r0
 800793e:	4608      	mov	r0, r1
 8007940:	4611      	mov	r1, r2
 8007942:	2200      	movs	r2, #0
 8007944:	602a      	str	r2, [r5, #0]
 8007946:	461a      	mov	r2, r3
 8007948:	f7f9 fde7 	bl	800151a <_write>
 800794c:	1c43      	adds	r3, r0, #1
 800794e:	d102      	bne.n	8007956 <_write_r+0x1e>
 8007950:	682b      	ldr	r3, [r5, #0]
 8007952:	b103      	cbz	r3, 8007956 <_write_r+0x1e>
 8007954:	6023      	str	r3, [r4, #0]
 8007956:	bd38      	pop	{r3, r4, r5, pc}
 8007958:	24000324 	.word	0x24000324

0800795c <__errno>:
 800795c:	4b01      	ldr	r3, [pc, #4]	@ (8007964 <__errno+0x8>)
 800795e:	6818      	ldr	r0, [r3, #0]
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	24000038 	.word	0x24000038

08007968 <__libc_init_array>:
 8007968:	b570      	push	{r4, r5, r6, lr}
 800796a:	4d0d      	ldr	r5, [pc, #52]	@ (80079a0 <__libc_init_array+0x38>)
 800796c:	4c0d      	ldr	r4, [pc, #52]	@ (80079a4 <__libc_init_array+0x3c>)
 800796e:	1b64      	subs	r4, r4, r5
 8007970:	10a4      	asrs	r4, r4, #2
 8007972:	2600      	movs	r6, #0
 8007974:	42a6      	cmp	r6, r4
 8007976:	d109      	bne.n	800798c <__libc_init_array+0x24>
 8007978:	4d0b      	ldr	r5, [pc, #44]	@ (80079a8 <__libc_init_array+0x40>)
 800797a:	4c0c      	ldr	r4, [pc, #48]	@ (80079ac <__libc_init_array+0x44>)
 800797c:	f000 fdb6 	bl	80084ec <_init>
 8007980:	1b64      	subs	r4, r4, r5
 8007982:	10a4      	asrs	r4, r4, #2
 8007984:	2600      	movs	r6, #0
 8007986:	42a6      	cmp	r6, r4
 8007988:	d105      	bne.n	8007996 <__libc_init_array+0x2e>
 800798a:	bd70      	pop	{r4, r5, r6, pc}
 800798c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007990:	4798      	blx	r3
 8007992:	3601      	adds	r6, #1
 8007994:	e7ee      	b.n	8007974 <__libc_init_array+0xc>
 8007996:	f855 3b04 	ldr.w	r3, [r5], #4
 800799a:	4798      	blx	r3
 800799c:	3601      	adds	r6, #1
 800799e:	e7f2      	b.n	8007986 <__libc_init_array+0x1e>
 80079a0:	08009ed4 	.word	0x08009ed4
 80079a4:	08009ed4 	.word	0x08009ed4
 80079a8:	08009ed4 	.word	0x08009ed4
 80079ac:	08009ed8 	.word	0x08009ed8

080079b0 <__retarget_lock_init_recursive>:
 80079b0:	4770      	bx	lr

080079b2 <__retarget_lock_acquire_recursive>:
 80079b2:	4770      	bx	lr

080079b4 <__retarget_lock_release_recursive>:
 80079b4:	4770      	bx	lr
	...

080079b8 <_free_r>:
 80079b8:	b538      	push	{r3, r4, r5, lr}
 80079ba:	4605      	mov	r5, r0
 80079bc:	2900      	cmp	r1, #0
 80079be:	d041      	beq.n	8007a44 <_free_r+0x8c>
 80079c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079c4:	1f0c      	subs	r4, r1, #4
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	bfb8      	it	lt
 80079ca:	18e4      	addlt	r4, r4, r3
 80079cc:	f000 f8e0 	bl	8007b90 <__malloc_lock>
 80079d0:	4a1d      	ldr	r2, [pc, #116]	@ (8007a48 <_free_r+0x90>)
 80079d2:	6813      	ldr	r3, [r2, #0]
 80079d4:	b933      	cbnz	r3, 80079e4 <_free_r+0x2c>
 80079d6:	6063      	str	r3, [r4, #4]
 80079d8:	6014      	str	r4, [r2, #0]
 80079da:	4628      	mov	r0, r5
 80079dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079e0:	f000 b8dc 	b.w	8007b9c <__malloc_unlock>
 80079e4:	42a3      	cmp	r3, r4
 80079e6:	d908      	bls.n	80079fa <_free_r+0x42>
 80079e8:	6820      	ldr	r0, [r4, #0]
 80079ea:	1821      	adds	r1, r4, r0
 80079ec:	428b      	cmp	r3, r1
 80079ee:	bf01      	itttt	eq
 80079f0:	6819      	ldreq	r1, [r3, #0]
 80079f2:	685b      	ldreq	r3, [r3, #4]
 80079f4:	1809      	addeq	r1, r1, r0
 80079f6:	6021      	streq	r1, [r4, #0]
 80079f8:	e7ed      	b.n	80079d6 <_free_r+0x1e>
 80079fa:	461a      	mov	r2, r3
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	b10b      	cbz	r3, 8007a04 <_free_r+0x4c>
 8007a00:	42a3      	cmp	r3, r4
 8007a02:	d9fa      	bls.n	80079fa <_free_r+0x42>
 8007a04:	6811      	ldr	r1, [r2, #0]
 8007a06:	1850      	adds	r0, r2, r1
 8007a08:	42a0      	cmp	r0, r4
 8007a0a:	d10b      	bne.n	8007a24 <_free_r+0x6c>
 8007a0c:	6820      	ldr	r0, [r4, #0]
 8007a0e:	4401      	add	r1, r0
 8007a10:	1850      	adds	r0, r2, r1
 8007a12:	4283      	cmp	r3, r0
 8007a14:	6011      	str	r1, [r2, #0]
 8007a16:	d1e0      	bne.n	80079da <_free_r+0x22>
 8007a18:	6818      	ldr	r0, [r3, #0]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	6053      	str	r3, [r2, #4]
 8007a1e:	4408      	add	r0, r1
 8007a20:	6010      	str	r0, [r2, #0]
 8007a22:	e7da      	b.n	80079da <_free_r+0x22>
 8007a24:	d902      	bls.n	8007a2c <_free_r+0x74>
 8007a26:	230c      	movs	r3, #12
 8007a28:	602b      	str	r3, [r5, #0]
 8007a2a:	e7d6      	b.n	80079da <_free_r+0x22>
 8007a2c:	6820      	ldr	r0, [r4, #0]
 8007a2e:	1821      	adds	r1, r4, r0
 8007a30:	428b      	cmp	r3, r1
 8007a32:	bf04      	itt	eq
 8007a34:	6819      	ldreq	r1, [r3, #0]
 8007a36:	685b      	ldreq	r3, [r3, #4]
 8007a38:	6063      	str	r3, [r4, #4]
 8007a3a:	bf04      	itt	eq
 8007a3c:	1809      	addeq	r1, r1, r0
 8007a3e:	6021      	streq	r1, [r4, #0]
 8007a40:	6054      	str	r4, [r2, #4]
 8007a42:	e7ca      	b.n	80079da <_free_r+0x22>
 8007a44:	bd38      	pop	{r3, r4, r5, pc}
 8007a46:	bf00      	nop
 8007a48:	24000330 	.word	0x24000330

08007a4c <sbrk_aligned>:
 8007a4c:	b570      	push	{r4, r5, r6, lr}
 8007a4e:	4e0f      	ldr	r6, [pc, #60]	@ (8007a8c <sbrk_aligned+0x40>)
 8007a50:	460c      	mov	r4, r1
 8007a52:	6831      	ldr	r1, [r6, #0]
 8007a54:	4605      	mov	r5, r0
 8007a56:	b911      	cbnz	r1, 8007a5e <sbrk_aligned+0x12>
 8007a58:	f000 fcb4 	bl	80083c4 <_sbrk_r>
 8007a5c:	6030      	str	r0, [r6, #0]
 8007a5e:	4621      	mov	r1, r4
 8007a60:	4628      	mov	r0, r5
 8007a62:	f000 fcaf 	bl	80083c4 <_sbrk_r>
 8007a66:	1c43      	adds	r3, r0, #1
 8007a68:	d103      	bne.n	8007a72 <sbrk_aligned+0x26>
 8007a6a:	f04f 34ff 	mov.w	r4, #4294967295
 8007a6e:	4620      	mov	r0, r4
 8007a70:	bd70      	pop	{r4, r5, r6, pc}
 8007a72:	1cc4      	adds	r4, r0, #3
 8007a74:	f024 0403 	bic.w	r4, r4, #3
 8007a78:	42a0      	cmp	r0, r4
 8007a7a:	d0f8      	beq.n	8007a6e <sbrk_aligned+0x22>
 8007a7c:	1a21      	subs	r1, r4, r0
 8007a7e:	4628      	mov	r0, r5
 8007a80:	f000 fca0 	bl	80083c4 <_sbrk_r>
 8007a84:	3001      	adds	r0, #1
 8007a86:	d1f2      	bne.n	8007a6e <sbrk_aligned+0x22>
 8007a88:	e7ef      	b.n	8007a6a <sbrk_aligned+0x1e>
 8007a8a:	bf00      	nop
 8007a8c:	2400032c 	.word	0x2400032c

08007a90 <_malloc_r>:
 8007a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a94:	1ccd      	adds	r5, r1, #3
 8007a96:	f025 0503 	bic.w	r5, r5, #3
 8007a9a:	3508      	adds	r5, #8
 8007a9c:	2d0c      	cmp	r5, #12
 8007a9e:	bf38      	it	cc
 8007aa0:	250c      	movcc	r5, #12
 8007aa2:	2d00      	cmp	r5, #0
 8007aa4:	4606      	mov	r6, r0
 8007aa6:	db01      	blt.n	8007aac <_malloc_r+0x1c>
 8007aa8:	42a9      	cmp	r1, r5
 8007aaa:	d904      	bls.n	8007ab6 <_malloc_r+0x26>
 8007aac:	230c      	movs	r3, #12
 8007aae:	6033      	str	r3, [r6, #0]
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ab6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007b8c <_malloc_r+0xfc>
 8007aba:	f000 f869 	bl	8007b90 <__malloc_lock>
 8007abe:	f8d8 3000 	ldr.w	r3, [r8]
 8007ac2:	461c      	mov	r4, r3
 8007ac4:	bb44      	cbnz	r4, 8007b18 <_malloc_r+0x88>
 8007ac6:	4629      	mov	r1, r5
 8007ac8:	4630      	mov	r0, r6
 8007aca:	f7ff ffbf 	bl	8007a4c <sbrk_aligned>
 8007ace:	1c43      	adds	r3, r0, #1
 8007ad0:	4604      	mov	r4, r0
 8007ad2:	d158      	bne.n	8007b86 <_malloc_r+0xf6>
 8007ad4:	f8d8 4000 	ldr.w	r4, [r8]
 8007ad8:	4627      	mov	r7, r4
 8007ada:	2f00      	cmp	r7, #0
 8007adc:	d143      	bne.n	8007b66 <_malloc_r+0xd6>
 8007ade:	2c00      	cmp	r4, #0
 8007ae0:	d04b      	beq.n	8007b7a <_malloc_r+0xea>
 8007ae2:	6823      	ldr	r3, [r4, #0]
 8007ae4:	4639      	mov	r1, r7
 8007ae6:	4630      	mov	r0, r6
 8007ae8:	eb04 0903 	add.w	r9, r4, r3
 8007aec:	f000 fc6a 	bl	80083c4 <_sbrk_r>
 8007af0:	4581      	cmp	r9, r0
 8007af2:	d142      	bne.n	8007b7a <_malloc_r+0xea>
 8007af4:	6821      	ldr	r1, [r4, #0]
 8007af6:	1a6d      	subs	r5, r5, r1
 8007af8:	4629      	mov	r1, r5
 8007afa:	4630      	mov	r0, r6
 8007afc:	f7ff ffa6 	bl	8007a4c <sbrk_aligned>
 8007b00:	3001      	adds	r0, #1
 8007b02:	d03a      	beq.n	8007b7a <_malloc_r+0xea>
 8007b04:	6823      	ldr	r3, [r4, #0]
 8007b06:	442b      	add	r3, r5
 8007b08:	6023      	str	r3, [r4, #0]
 8007b0a:	f8d8 3000 	ldr.w	r3, [r8]
 8007b0e:	685a      	ldr	r2, [r3, #4]
 8007b10:	bb62      	cbnz	r2, 8007b6c <_malloc_r+0xdc>
 8007b12:	f8c8 7000 	str.w	r7, [r8]
 8007b16:	e00f      	b.n	8007b38 <_malloc_r+0xa8>
 8007b18:	6822      	ldr	r2, [r4, #0]
 8007b1a:	1b52      	subs	r2, r2, r5
 8007b1c:	d420      	bmi.n	8007b60 <_malloc_r+0xd0>
 8007b1e:	2a0b      	cmp	r2, #11
 8007b20:	d917      	bls.n	8007b52 <_malloc_r+0xc2>
 8007b22:	1961      	adds	r1, r4, r5
 8007b24:	42a3      	cmp	r3, r4
 8007b26:	6025      	str	r5, [r4, #0]
 8007b28:	bf18      	it	ne
 8007b2a:	6059      	strne	r1, [r3, #4]
 8007b2c:	6863      	ldr	r3, [r4, #4]
 8007b2e:	bf08      	it	eq
 8007b30:	f8c8 1000 	streq.w	r1, [r8]
 8007b34:	5162      	str	r2, [r4, r5]
 8007b36:	604b      	str	r3, [r1, #4]
 8007b38:	4630      	mov	r0, r6
 8007b3a:	f000 f82f 	bl	8007b9c <__malloc_unlock>
 8007b3e:	f104 000b 	add.w	r0, r4, #11
 8007b42:	1d23      	adds	r3, r4, #4
 8007b44:	f020 0007 	bic.w	r0, r0, #7
 8007b48:	1ac2      	subs	r2, r0, r3
 8007b4a:	bf1c      	itt	ne
 8007b4c:	1a1b      	subne	r3, r3, r0
 8007b4e:	50a3      	strne	r3, [r4, r2]
 8007b50:	e7af      	b.n	8007ab2 <_malloc_r+0x22>
 8007b52:	6862      	ldr	r2, [r4, #4]
 8007b54:	42a3      	cmp	r3, r4
 8007b56:	bf0c      	ite	eq
 8007b58:	f8c8 2000 	streq.w	r2, [r8]
 8007b5c:	605a      	strne	r2, [r3, #4]
 8007b5e:	e7eb      	b.n	8007b38 <_malloc_r+0xa8>
 8007b60:	4623      	mov	r3, r4
 8007b62:	6864      	ldr	r4, [r4, #4]
 8007b64:	e7ae      	b.n	8007ac4 <_malloc_r+0x34>
 8007b66:	463c      	mov	r4, r7
 8007b68:	687f      	ldr	r7, [r7, #4]
 8007b6a:	e7b6      	b.n	8007ada <_malloc_r+0x4a>
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	42a3      	cmp	r3, r4
 8007b72:	d1fb      	bne.n	8007b6c <_malloc_r+0xdc>
 8007b74:	2300      	movs	r3, #0
 8007b76:	6053      	str	r3, [r2, #4]
 8007b78:	e7de      	b.n	8007b38 <_malloc_r+0xa8>
 8007b7a:	230c      	movs	r3, #12
 8007b7c:	6033      	str	r3, [r6, #0]
 8007b7e:	4630      	mov	r0, r6
 8007b80:	f000 f80c 	bl	8007b9c <__malloc_unlock>
 8007b84:	e794      	b.n	8007ab0 <_malloc_r+0x20>
 8007b86:	6005      	str	r5, [r0, #0]
 8007b88:	e7d6      	b.n	8007b38 <_malloc_r+0xa8>
 8007b8a:	bf00      	nop
 8007b8c:	24000330 	.word	0x24000330

08007b90 <__malloc_lock>:
 8007b90:	4801      	ldr	r0, [pc, #4]	@ (8007b98 <__malloc_lock+0x8>)
 8007b92:	f7ff bf0e 	b.w	80079b2 <__retarget_lock_acquire_recursive>
 8007b96:	bf00      	nop
 8007b98:	24000328 	.word	0x24000328

08007b9c <__malloc_unlock>:
 8007b9c:	4801      	ldr	r0, [pc, #4]	@ (8007ba4 <__malloc_unlock+0x8>)
 8007b9e:	f7ff bf09 	b.w	80079b4 <__retarget_lock_release_recursive>
 8007ba2:	bf00      	nop
 8007ba4:	24000328 	.word	0x24000328

08007ba8 <__sfputc_r>:
 8007ba8:	6893      	ldr	r3, [r2, #8]
 8007baa:	3b01      	subs	r3, #1
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	b410      	push	{r4}
 8007bb0:	6093      	str	r3, [r2, #8]
 8007bb2:	da08      	bge.n	8007bc6 <__sfputc_r+0x1e>
 8007bb4:	6994      	ldr	r4, [r2, #24]
 8007bb6:	42a3      	cmp	r3, r4
 8007bb8:	db01      	blt.n	8007bbe <__sfputc_r+0x16>
 8007bba:	290a      	cmp	r1, #10
 8007bbc:	d103      	bne.n	8007bc6 <__sfputc_r+0x1e>
 8007bbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bc2:	f000 bb6b 	b.w	800829c <__swbuf_r>
 8007bc6:	6813      	ldr	r3, [r2, #0]
 8007bc8:	1c58      	adds	r0, r3, #1
 8007bca:	6010      	str	r0, [r2, #0]
 8007bcc:	7019      	strb	r1, [r3, #0]
 8007bce:	4608      	mov	r0, r1
 8007bd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bd4:	4770      	bx	lr

08007bd6 <__sfputs_r>:
 8007bd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bd8:	4606      	mov	r6, r0
 8007bda:	460f      	mov	r7, r1
 8007bdc:	4614      	mov	r4, r2
 8007bde:	18d5      	adds	r5, r2, r3
 8007be0:	42ac      	cmp	r4, r5
 8007be2:	d101      	bne.n	8007be8 <__sfputs_r+0x12>
 8007be4:	2000      	movs	r0, #0
 8007be6:	e007      	b.n	8007bf8 <__sfputs_r+0x22>
 8007be8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bec:	463a      	mov	r2, r7
 8007bee:	4630      	mov	r0, r6
 8007bf0:	f7ff ffda 	bl	8007ba8 <__sfputc_r>
 8007bf4:	1c43      	adds	r3, r0, #1
 8007bf6:	d1f3      	bne.n	8007be0 <__sfputs_r+0xa>
 8007bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007bfc <_vfiprintf_r>:
 8007bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c00:	460d      	mov	r5, r1
 8007c02:	b09d      	sub	sp, #116	@ 0x74
 8007c04:	4614      	mov	r4, r2
 8007c06:	4698      	mov	r8, r3
 8007c08:	4606      	mov	r6, r0
 8007c0a:	b118      	cbz	r0, 8007c14 <_vfiprintf_r+0x18>
 8007c0c:	6a03      	ldr	r3, [r0, #32]
 8007c0e:	b90b      	cbnz	r3, 8007c14 <_vfiprintf_r+0x18>
 8007c10:	f7ff fdca 	bl	80077a8 <__sinit>
 8007c14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c16:	07d9      	lsls	r1, r3, #31
 8007c18:	d405      	bmi.n	8007c26 <_vfiprintf_r+0x2a>
 8007c1a:	89ab      	ldrh	r3, [r5, #12]
 8007c1c:	059a      	lsls	r2, r3, #22
 8007c1e:	d402      	bmi.n	8007c26 <_vfiprintf_r+0x2a>
 8007c20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c22:	f7ff fec6 	bl	80079b2 <__retarget_lock_acquire_recursive>
 8007c26:	89ab      	ldrh	r3, [r5, #12]
 8007c28:	071b      	lsls	r3, r3, #28
 8007c2a:	d501      	bpl.n	8007c30 <_vfiprintf_r+0x34>
 8007c2c:	692b      	ldr	r3, [r5, #16]
 8007c2e:	b99b      	cbnz	r3, 8007c58 <_vfiprintf_r+0x5c>
 8007c30:	4629      	mov	r1, r5
 8007c32:	4630      	mov	r0, r6
 8007c34:	f000 fb70 	bl	8008318 <__swsetup_r>
 8007c38:	b170      	cbz	r0, 8007c58 <_vfiprintf_r+0x5c>
 8007c3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c3c:	07dc      	lsls	r4, r3, #31
 8007c3e:	d504      	bpl.n	8007c4a <_vfiprintf_r+0x4e>
 8007c40:	f04f 30ff 	mov.w	r0, #4294967295
 8007c44:	b01d      	add	sp, #116	@ 0x74
 8007c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c4a:	89ab      	ldrh	r3, [r5, #12]
 8007c4c:	0598      	lsls	r0, r3, #22
 8007c4e:	d4f7      	bmi.n	8007c40 <_vfiprintf_r+0x44>
 8007c50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c52:	f7ff feaf 	bl	80079b4 <__retarget_lock_release_recursive>
 8007c56:	e7f3      	b.n	8007c40 <_vfiprintf_r+0x44>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c5c:	2320      	movs	r3, #32
 8007c5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c62:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c66:	2330      	movs	r3, #48	@ 0x30
 8007c68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007e18 <_vfiprintf_r+0x21c>
 8007c6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c70:	f04f 0901 	mov.w	r9, #1
 8007c74:	4623      	mov	r3, r4
 8007c76:	469a      	mov	sl, r3
 8007c78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c7c:	b10a      	cbz	r2, 8007c82 <_vfiprintf_r+0x86>
 8007c7e:	2a25      	cmp	r2, #37	@ 0x25
 8007c80:	d1f9      	bne.n	8007c76 <_vfiprintf_r+0x7a>
 8007c82:	ebba 0b04 	subs.w	fp, sl, r4
 8007c86:	d00b      	beq.n	8007ca0 <_vfiprintf_r+0xa4>
 8007c88:	465b      	mov	r3, fp
 8007c8a:	4622      	mov	r2, r4
 8007c8c:	4629      	mov	r1, r5
 8007c8e:	4630      	mov	r0, r6
 8007c90:	f7ff ffa1 	bl	8007bd6 <__sfputs_r>
 8007c94:	3001      	adds	r0, #1
 8007c96:	f000 80a7 	beq.w	8007de8 <_vfiprintf_r+0x1ec>
 8007c9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c9c:	445a      	add	r2, fp
 8007c9e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ca0:	f89a 3000 	ldrb.w	r3, [sl]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	f000 809f 	beq.w	8007de8 <_vfiprintf_r+0x1ec>
 8007caa:	2300      	movs	r3, #0
 8007cac:	f04f 32ff 	mov.w	r2, #4294967295
 8007cb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cb4:	f10a 0a01 	add.w	sl, sl, #1
 8007cb8:	9304      	str	r3, [sp, #16]
 8007cba:	9307      	str	r3, [sp, #28]
 8007cbc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007cc0:	931a      	str	r3, [sp, #104]	@ 0x68
 8007cc2:	4654      	mov	r4, sl
 8007cc4:	2205      	movs	r2, #5
 8007cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cca:	4853      	ldr	r0, [pc, #332]	@ (8007e18 <_vfiprintf_r+0x21c>)
 8007ccc:	f7f8 fb08 	bl	80002e0 <memchr>
 8007cd0:	9a04      	ldr	r2, [sp, #16]
 8007cd2:	b9d8      	cbnz	r0, 8007d0c <_vfiprintf_r+0x110>
 8007cd4:	06d1      	lsls	r1, r2, #27
 8007cd6:	bf44      	itt	mi
 8007cd8:	2320      	movmi	r3, #32
 8007cda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007cde:	0713      	lsls	r3, r2, #28
 8007ce0:	bf44      	itt	mi
 8007ce2:	232b      	movmi	r3, #43	@ 0x2b
 8007ce4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ce8:	f89a 3000 	ldrb.w	r3, [sl]
 8007cec:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cee:	d015      	beq.n	8007d1c <_vfiprintf_r+0x120>
 8007cf0:	9a07      	ldr	r2, [sp, #28]
 8007cf2:	4654      	mov	r4, sl
 8007cf4:	2000      	movs	r0, #0
 8007cf6:	f04f 0c0a 	mov.w	ip, #10
 8007cfa:	4621      	mov	r1, r4
 8007cfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d00:	3b30      	subs	r3, #48	@ 0x30
 8007d02:	2b09      	cmp	r3, #9
 8007d04:	d94b      	bls.n	8007d9e <_vfiprintf_r+0x1a2>
 8007d06:	b1b0      	cbz	r0, 8007d36 <_vfiprintf_r+0x13a>
 8007d08:	9207      	str	r2, [sp, #28]
 8007d0a:	e014      	b.n	8007d36 <_vfiprintf_r+0x13a>
 8007d0c:	eba0 0308 	sub.w	r3, r0, r8
 8007d10:	fa09 f303 	lsl.w	r3, r9, r3
 8007d14:	4313      	orrs	r3, r2
 8007d16:	9304      	str	r3, [sp, #16]
 8007d18:	46a2      	mov	sl, r4
 8007d1a:	e7d2      	b.n	8007cc2 <_vfiprintf_r+0xc6>
 8007d1c:	9b03      	ldr	r3, [sp, #12]
 8007d1e:	1d19      	adds	r1, r3, #4
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	9103      	str	r1, [sp, #12]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	bfbb      	ittet	lt
 8007d28:	425b      	neglt	r3, r3
 8007d2a:	f042 0202 	orrlt.w	r2, r2, #2
 8007d2e:	9307      	strge	r3, [sp, #28]
 8007d30:	9307      	strlt	r3, [sp, #28]
 8007d32:	bfb8      	it	lt
 8007d34:	9204      	strlt	r2, [sp, #16]
 8007d36:	7823      	ldrb	r3, [r4, #0]
 8007d38:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d3a:	d10a      	bne.n	8007d52 <_vfiprintf_r+0x156>
 8007d3c:	7863      	ldrb	r3, [r4, #1]
 8007d3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d40:	d132      	bne.n	8007da8 <_vfiprintf_r+0x1ac>
 8007d42:	9b03      	ldr	r3, [sp, #12]
 8007d44:	1d1a      	adds	r2, r3, #4
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	9203      	str	r2, [sp, #12]
 8007d4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d4e:	3402      	adds	r4, #2
 8007d50:	9305      	str	r3, [sp, #20]
 8007d52:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007e28 <_vfiprintf_r+0x22c>
 8007d56:	7821      	ldrb	r1, [r4, #0]
 8007d58:	2203      	movs	r2, #3
 8007d5a:	4650      	mov	r0, sl
 8007d5c:	f7f8 fac0 	bl	80002e0 <memchr>
 8007d60:	b138      	cbz	r0, 8007d72 <_vfiprintf_r+0x176>
 8007d62:	9b04      	ldr	r3, [sp, #16]
 8007d64:	eba0 000a 	sub.w	r0, r0, sl
 8007d68:	2240      	movs	r2, #64	@ 0x40
 8007d6a:	4082      	lsls	r2, r0
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	3401      	adds	r4, #1
 8007d70:	9304      	str	r3, [sp, #16]
 8007d72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d76:	4829      	ldr	r0, [pc, #164]	@ (8007e1c <_vfiprintf_r+0x220>)
 8007d78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d7c:	2206      	movs	r2, #6
 8007d7e:	f7f8 faaf 	bl	80002e0 <memchr>
 8007d82:	2800      	cmp	r0, #0
 8007d84:	d03f      	beq.n	8007e06 <_vfiprintf_r+0x20a>
 8007d86:	4b26      	ldr	r3, [pc, #152]	@ (8007e20 <_vfiprintf_r+0x224>)
 8007d88:	bb1b      	cbnz	r3, 8007dd2 <_vfiprintf_r+0x1d6>
 8007d8a:	9b03      	ldr	r3, [sp, #12]
 8007d8c:	3307      	adds	r3, #7
 8007d8e:	f023 0307 	bic.w	r3, r3, #7
 8007d92:	3308      	adds	r3, #8
 8007d94:	9303      	str	r3, [sp, #12]
 8007d96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d98:	443b      	add	r3, r7
 8007d9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d9c:	e76a      	b.n	8007c74 <_vfiprintf_r+0x78>
 8007d9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007da2:	460c      	mov	r4, r1
 8007da4:	2001      	movs	r0, #1
 8007da6:	e7a8      	b.n	8007cfa <_vfiprintf_r+0xfe>
 8007da8:	2300      	movs	r3, #0
 8007daa:	3401      	adds	r4, #1
 8007dac:	9305      	str	r3, [sp, #20]
 8007dae:	4619      	mov	r1, r3
 8007db0:	f04f 0c0a 	mov.w	ip, #10
 8007db4:	4620      	mov	r0, r4
 8007db6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dba:	3a30      	subs	r2, #48	@ 0x30
 8007dbc:	2a09      	cmp	r2, #9
 8007dbe:	d903      	bls.n	8007dc8 <_vfiprintf_r+0x1cc>
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d0c6      	beq.n	8007d52 <_vfiprintf_r+0x156>
 8007dc4:	9105      	str	r1, [sp, #20]
 8007dc6:	e7c4      	b.n	8007d52 <_vfiprintf_r+0x156>
 8007dc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007dcc:	4604      	mov	r4, r0
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e7f0      	b.n	8007db4 <_vfiprintf_r+0x1b8>
 8007dd2:	ab03      	add	r3, sp, #12
 8007dd4:	9300      	str	r3, [sp, #0]
 8007dd6:	462a      	mov	r2, r5
 8007dd8:	4b12      	ldr	r3, [pc, #72]	@ (8007e24 <_vfiprintf_r+0x228>)
 8007dda:	a904      	add	r1, sp, #16
 8007ddc:	4630      	mov	r0, r6
 8007dde:	f3af 8000 	nop.w
 8007de2:	4607      	mov	r7, r0
 8007de4:	1c78      	adds	r0, r7, #1
 8007de6:	d1d6      	bne.n	8007d96 <_vfiprintf_r+0x19a>
 8007de8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007dea:	07d9      	lsls	r1, r3, #31
 8007dec:	d405      	bmi.n	8007dfa <_vfiprintf_r+0x1fe>
 8007dee:	89ab      	ldrh	r3, [r5, #12]
 8007df0:	059a      	lsls	r2, r3, #22
 8007df2:	d402      	bmi.n	8007dfa <_vfiprintf_r+0x1fe>
 8007df4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007df6:	f7ff fddd 	bl	80079b4 <__retarget_lock_release_recursive>
 8007dfa:	89ab      	ldrh	r3, [r5, #12]
 8007dfc:	065b      	lsls	r3, r3, #25
 8007dfe:	f53f af1f 	bmi.w	8007c40 <_vfiprintf_r+0x44>
 8007e02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e04:	e71e      	b.n	8007c44 <_vfiprintf_r+0x48>
 8007e06:	ab03      	add	r3, sp, #12
 8007e08:	9300      	str	r3, [sp, #0]
 8007e0a:	462a      	mov	r2, r5
 8007e0c:	4b05      	ldr	r3, [pc, #20]	@ (8007e24 <_vfiprintf_r+0x228>)
 8007e0e:	a904      	add	r1, sp, #16
 8007e10:	4630      	mov	r0, r6
 8007e12:	f000 f879 	bl	8007f08 <_printf_i>
 8007e16:	e7e4      	b.n	8007de2 <_vfiprintf_r+0x1e6>
 8007e18:	08009e98 	.word	0x08009e98
 8007e1c:	08009ea2 	.word	0x08009ea2
 8007e20:	00000000 	.word	0x00000000
 8007e24:	08007bd7 	.word	0x08007bd7
 8007e28:	08009e9e 	.word	0x08009e9e

08007e2c <_printf_common>:
 8007e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e30:	4616      	mov	r6, r2
 8007e32:	4698      	mov	r8, r3
 8007e34:	688a      	ldr	r2, [r1, #8]
 8007e36:	690b      	ldr	r3, [r1, #16]
 8007e38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	bfb8      	it	lt
 8007e40:	4613      	movlt	r3, r2
 8007e42:	6033      	str	r3, [r6, #0]
 8007e44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007e48:	4607      	mov	r7, r0
 8007e4a:	460c      	mov	r4, r1
 8007e4c:	b10a      	cbz	r2, 8007e52 <_printf_common+0x26>
 8007e4e:	3301      	adds	r3, #1
 8007e50:	6033      	str	r3, [r6, #0]
 8007e52:	6823      	ldr	r3, [r4, #0]
 8007e54:	0699      	lsls	r1, r3, #26
 8007e56:	bf42      	ittt	mi
 8007e58:	6833      	ldrmi	r3, [r6, #0]
 8007e5a:	3302      	addmi	r3, #2
 8007e5c:	6033      	strmi	r3, [r6, #0]
 8007e5e:	6825      	ldr	r5, [r4, #0]
 8007e60:	f015 0506 	ands.w	r5, r5, #6
 8007e64:	d106      	bne.n	8007e74 <_printf_common+0x48>
 8007e66:	f104 0a19 	add.w	sl, r4, #25
 8007e6a:	68e3      	ldr	r3, [r4, #12]
 8007e6c:	6832      	ldr	r2, [r6, #0]
 8007e6e:	1a9b      	subs	r3, r3, r2
 8007e70:	42ab      	cmp	r3, r5
 8007e72:	dc26      	bgt.n	8007ec2 <_printf_common+0x96>
 8007e74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007e78:	6822      	ldr	r2, [r4, #0]
 8007e7a:	3b00      	subs	r3, #0
 8007e7c:	bf18      	it	ne
 8007e7e:	2301      	movne	r3, #1
 8007e80:	0692      	lsls	r2, r2, #26
 8007e82:	d42b      	bmi.n	8007edc <_printf_common+0xb0>
 8007e84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007e88:	4641      	mov	r1, r8
 8007e8a:	4638      	mov	r0, r7
 8007e8c:	47c8      	blx	r9
 8007e8e:	3001      	adds	r0, #1
 8007e90:	d01e      	beq.n	8007ed0 <_printf_common+0xa4>
 8007e92:	6823      	ldr	r3, [r4, #0]
 8007e94:	6922      	ldr	r2, [r4, #16]
 8007e96:	f003 0306 	and.w	r3, r3, #6
 8007e9a:	2b04      	cmp	r3, #4
 8007e9c:	bf02      	ittt	eq
 8007e9e:	68e5      	ldreq	r5, [r4, #12]
 8007ea0:	6833      	ldreq	r3, [r6, #0]
 8007ea2:	1aed      	subeq	r5, r5, r3
 8007ea4:	68a3      	ldr	r3, [r4, #8]
 8007ea6:	bf0c      	ite	eq
 8007ea8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007eac:	2500      	movne	r5, #0
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	bfc4      	itt	gt
 8007eb2:	1a9b      	subgt	r3, r3, r2
 8007eb4:	18ed      	addgt	r5, r5, r3
 8007eb6:	2600      	movs	r6, #0
 8007eb8:	341a      	adds	r4, #26
 8007eba:	42b5      	cmp	r5, r6
 8007ebc:	d11a      	bne.n	8007ef4 <_printf_common+0xc8>
 8007ebe:	2000      	movs	r0, #0
 8007ec0:	e008      	b.n	8007ed4 <_printf_common+0xa8>
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	4652      	mov	r2, sl
 8007ec6:	4641      	mov	r1, r8
 8007ec8:	4638      	mov	r0, r7
 8007eca:	47c8      	blx	r9
 8007ecc:	3001      	adds	r0, #1
 8007ece:	d103      	bne.n	8007ed8 <_printf_common+0xac>
 8007ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ed8:	3501      	adds	r5, #1
 8007eda:	e7c6      	b.n	8007e6a <_printf_common+0x3e>
 8007edc:	18e1      	adds	r1, r4, r3
 8007ede:	1c5a      	adds	r2, r3, #1
 8007ee0:	2030      	movs	r0, #48	@ 0x30
 8007ee2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007ee6:	4422      	add	r2, r4
 8007ee8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007eec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007ef0:	3302      	adds	r3, #2
 8007ef2:	e7c7      	b.n	8007e84 <_printf_common+0x58>
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	4622      	mov	r2, r4
 8007ef8:	4641      	mov	r1, r8
 8007efa:	4638      	mov	r0, r7
 8007efc:	47c8      	blx	r9
 8007efe:	3001      	adds	r0, #1
 8007f00:	d0e6      	beq.n	8007ed0 <_printf_common+0xa4>
 8007f02:	3601      	adds	r6, #1
 8007f04:	e7d9      	b.n	8007eba <_printf_common+0x8e>
	...

08007f08 <_printf_i>:
 8007f08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f0c:	7e0f      	ldrb	r7, [r1, #24]
 8007f0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007f10:	2f78      	cmp	r7, #120	@ 0x78
 8007f12:	4691      	mov	r9, r2
 8007f14:	4680      	mov	r8, r0
 8007f16:	460c      	mov	r4, r1
 8007f18:	469a      	mov	sl, r3
 8007f1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007f1e:	d807      	bhi.n	8007f30 <_printf_i+0x28>
 8007f20:	2f62      	cmp	r7, #98	@ 0x62
 8007f22:	d80a      	bhi.n	8007f3a <_printf_i+0x32>
 8007f24:	2f00      	cmp	r7, #0
 8007f26:	f000 80d1 	beq.w	80080cc <_printf_i+0x1c4>
 8007f2a:	2f58      	cmp	r7, #88	@ 0x58
 8007f2c:	f000 80b8 	beq.w	80080a0 <_printf_i+0x198>
 8007f30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007f38:	e03a      	b.n	8007fb0 <_printf_i+0xa8>
 8007f3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007f3e:	2b15      	cmp	r3, #21
 8007f40:	d8f6      	bhi.n	8007f30 <_printf_i+0x28>
 8007f42:	a101      	add	r1, pc, #4	@ (adr r1, 8007f48 <_printf_i+0x40>)
 8007f44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f48:	08007fa1 	.word	0x08007fa1
 8007f4c:	08007fb5 	.word	0x08007fb5
 8007f50:	08007f31 	.word	0x08007f31
 8007f54:	08007f31 	.word	0x08007f31
 8007f58:	08007f31 	.word	0x08007f31
 8007f5c:	08007f31 	.word	0x08007f31
 8007f60:	08007fb5 	.word	0x08007fb5
 8007f64:	08007f31 	.word	0x08007f31
 8007f68:	08007f31 	.word	0x08007f31
 8007f6c:	08007f31 	.word	0x08007f31
 8007f70:	08007f31 	.word	0x08007f31
 8007f74:	080080b3 	.word	0x080080b3
 8007f78:	08007fdf 	.word	0x08007fdf
 8007f7c:	0800806d 	.word	0x0800806d
 8007f80:	08007f31 	.word	0x08007f31
 8007f84:	08007f31 	.word	0x08007f31
 8007f88:	080080d5 	.word	0x080080d5
 8007f8c:	08007f31 	.word	0x08007f31
 8007f90:	08007fdf 	.word	0x08007fdf
 8007f94:	08007f31 	.word	0x08007f31
 8007f98:	08007f31 	.word	0x08007f31
 8007f9c:	08008075 	.word	0x08008075
 8007fa0:	6833      	ldr	r3, [r6, #0]
 8007fa2:	1d1a      	adds	r2, r3, #4
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	6032      	str	r2, [r6, #0]
 8007fa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007fac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e09c      	b.n	80080ee <_printf_i+0x1e6>
 8007fb4:	6833      	ldr	r3, [r6, #0]
 8007fb6:	6820      	ldr	r0, [r4, #0]
 8007fb8:	1d19      	adds	r1, r3, #4
 8007fba:	6031      	str	r1, [r6, #0]
 8007fbc:	0606      	lsls	r6, r0, #24
 8007fbe:	d501      	bpl.n	8007fc4 <_printf_i+0xbc>
 8007fc0:	681d      	ldr	r5, [r3, #0]
 8007fc2:	e003      	b.n	8007fcc <_printf_i+0xc4>
 8007fc4:	0645      	lsls	r5, r0, #25
 8007fc6:	d5fb      	bpl.n	8007fc0 <_printf_i+0xb8>
 8007fc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007fcc:	2d00      	cmp	r5, #0
 8007fce:	da03      	bge.n	8007fd8 <_printf_i+0xd0>
 8007fd0:	232d      	movs	r3, #45	@ 0x2d
 8007fd2:	426d      	negs	r5, r5
 8007fd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007fd8:	4858      	ldr	r0, [pc, #352]	@ (800813c <_printf_i+0x234>)
 8007fda:	230a      	movs	r3, #10
 8007fdc:	e011      	b.n	8008002 <_printf_i+0xfa>
 8007fde:	6821      	ldr	r1, [r4, #0]
 8007fe0:	6833      	ldr	r3, [r6, #0]
 8007fe2:	0608      	lsls	r0, r1, #24
 8007fe4:	f853 5b04 	ldr.w	r5, [r3], #4
 8007fe8:	d402      	bmi.n	8007ff0 <_printf_i+0xe8>
 8007fea:	0649      	lsls	r1, r1, #25
 8007fec:	bf48      	it	mi
 8007fee:	b2ad      	uxthmi	r5, r5
 8007ff0:	2f6f      	cmp	r7, #111	@ 0x6f
 8007ff2:	4852      	ldr	r0, [pc, #328]	@ (800813c <_printf_i+0x234>)
 8007ff4:	6033      	str	r3, [r6, #0]
 8007ff6:	bf14      	ite	ne
 8007ff8:	230a      	movne	r3, #10
 8007ffa:	2308      	moveq	r3, #8
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008002:	6866      	ldr	r6, [r4, #4]
 8008004:	60a6      	str	r6, [r4, #8]
 8008006:	2e00      	cmp	r6, #0
 8008008:	db05      	blt.n	8008016 <_printf_i+0x10e>
 800800a:	6821      	ldr	r1, [r4, #0]
 800800c:	432e      	orrs	r6, r5
 800800e:	f021 0104 	bic.w	r1, r1, #4
 8008012:	6021      	str	r1, [r4, #0]
 8008014:	d04b      	beq.n	80080ae <_printf_i+0x1a6>
 8008016:	4616      	mov	r6, r2
 8008018:	fbb5 f1f3 	udiv	r1, r5, r3
 800801c:	fb03 5711 	mls	r7, r3, r1, r5
 8008020:	5dc7      	ldrb	r7, [r0, r7]
 8008022:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008026:	462f      	mov	r7, r5
 8008028:	42bb      	cmp	r3, r7
 800802a:	460d      	mov	r5, r1
 800802c:	d9f4      	bls.n	8008018 <_printf_i+0x110>
 800802e:	2b08      	cmp	r3, #8
 8008030:	d10b      	bne.n	800804a <_printf_i+0x142>
 8008032:	6823      	ldr	r3, [r4, #0]
 8008034:	07df      	lsls	r7, r3, #31
 8008036:	d508      	bpl.n	800804a <_printf_i+0x142>
 8008038:	6923      	ldr	r3, [r4, #16]
 800803a:	6861      	ldr	r1, [r4, #4]
 800803c:	4299      	cmp	r1, r3
 800803e:	bfde      	ittt	le
 8008040:	2330      	movle	r3, #48	@ 0x30
 8008042:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008046:	f106 36ff 	addle.w	r6, r6, #4294967295
 800804a:	1b92      	subs	r2, r2, r6
 800804c:	6122      	str	r2, [r4, #16]
 800804e:	f8cd a000 	str.w	sl, [sp]
 8008052:	464b      	mov	r3, r9
 8008054:	aa03      	add	r2, sp, #12
 8008056:	4621      	mov	r1, r4
 8008058:	4640      	mov	r0, r8
 800805a:	f7ff fee7 	bl	8007e2c <_printf_common>
 800805e:	3001      	adds	r0, #1
 8008060:	d14a      	bne.n	80080f8 <_printf_i+0x1f0>
 8008062:	f04f 30ff 	mov.w	r0, #4294967295
 8008066:	b004      	add	sp, #16
 8008068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800806c:	6823      	ldr	r3, [r4, #0]
 800806e:	f043 0320 	orr.w	r3, r3, #32
 8008072:	6023      	str	r3, [r4, #0]
 8008074:	4832      	ldr	r0, [pc, #200]	@ (8008140 <_printf_i+0x238>)
 8008076:	2778      	movs	r7, #120	@ 0x78
 8008078:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800807c:	6823      	ldr	r3, [r4, #0]
 800807e:	6831      	ldr	r1, [r6, #0]
 8008080:	061f      	lsls	r7, r3, #24
 8008082:	f851 5b04 	ldr.w	r5, [r1], #4
 8008086:	d402      	bmi.n	800808e <_printf_i+0x186>
 8008088:	065f      	lsls	r7, r3, #25
 800808a:	bf48      	it	mi
 800808c:	b2ad      	uxthmi	r5, r5
 800808e:	6031      	str	r1, [r6, #0]
 8008090:	07d9      	lsls	r1, r3, #31
 8008092:	bf44      	itt	mi
 8008094:	f043 0320 	orrmi.w	r3, r3, #32
 8008098:	6023      	strmi	r3, [r4, #0]
 800809a:	b11d      	cbz	r5, 80080a4 <_printf_i+0x19c>
 800809c:	2310      	movs	r3, #16
 800809e:	e7ad      	b.n	8007ffc <_printf_i+0xf4>
 80080a0:	4826      	ldr	r0, [pc, #152]	@ (800813c <_printf_i+0x234>)
 80080a2:	e7e9      	b.n	8008078 <_printf_i+0x170>
 80080a4:	6823      	ldr	r3, [r4, #0]
 80080a6:	f023 0320 	bic.w	r3, r3, #32
 80080aa:	6023      	str	r3, [r4, #0]
 80080ac:	e7f6      	b.n	800809c <_printf_i+0x194>
 80080ae:	4616      	mov	r6, r2
 80080b0:	e7bd      	b.n	800802e <_printf_i+0x126>
 80080b2:	6833      	ldr	r3, [r6, #0]
 80080b4:	6825      	ldr	r5, [r4, #0]
 80080b6:	6961      	ldr	r1, [r4, #20]
 80080b8:	1d18      	adds	r0, r3, #4
 80080ba:	6030      	str	r0, [r6, #0]
 80080bc:	062e      	lsls	r6, r5, #24
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	d501      	bpl.n	80080c6 <_printf_i+0x1be>
 80080c2:	6019      	str	r1, [r3, #0]
 80080c4:	e002      	b.n	80080cc <_printf_i+0x1c4>
 80080c6:	0668      	lsls	r0, r5, #25
 80080c8:	d5fb      	bpl.n	80080c2 <_printf_i+0x1ba>
 80080ca:	8019      	strh	r1, [r3, #0]
 80080cc:	2300      	movs	r3, #0
 80080ce:	6123      	str	r3, [r4, #16]
 80080d0:	4616      	mov	r6, r2
 80080d2:	e7bc      	b.n	800804e <_printf_i+0x146>
 80080d4:	6833      	ldr	r3, [r6, #0]
 80080d6:	1d1a      	adds	r2, r3, #4
 80080d8:	6032      	str	r2, [r6, #0]
 80080da:	681e      	ldr	r6, [r3, #0]
 80080dc:	6862      	ldr	r2, [r4, #4]
 80080de:	2100      	movs	r1, #0
 80080e0:	4630      	mov	r0, r6
 80080e2:	f7f8 f8fd 	bl	80002e0 <memchr>
 80080e6:	b108      	cbz	r0, 80080ec <_printf_i+0x1e4>
 80080e8:	1b80      	subs	r0, r0, r6
 80080ea:	6060      	str	r0, [r4, #4]
 80080ec:	6863      	ldr	r3, [r4, #4]
 80080ee:	6123      	str	r3, [r4, #16]
 80080f0:	2300      	movs	r3, #0
 80080f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080f6:	e7aa      	b.n	800804e <_printf_i+0x146>
 80080f8:	6923      	ldr	r3, [r4, #16]
 80080fa:	4632      	mov	r2, r6
 80080fc:	4649      	mov	r1, r9
 80080fe:	4640      	mov	r0, r8
 8008100:	47d0      	blx	sl
 8008102:	3001      	adds	r0, #1
 8008104:	d0ad      	beq.n	8008062 <_printf_i+0x15a>
 8008106:	6823      	ldr	r3, [r4, #0]
 8008108:	079b      	lsls	r3, r3, #30
 800810a:	d413      	bmi.n	8008134 <_printf_i+0x22c>
 800810c:	68e0      	ldr	r0, [r4, #12]
 800810e:	9b03      	ldr	r3, [sp, #12]
 8008110:	4298      	cmp	r0, r3
 8008112:	bfb8      	it	lt
 8008114:	4618      	movlt	r0, r3
 8008116:	e7a6      	b.n	8008066 <_printf_i+0x15e>
 8008118:	2301      	movs	r3, #1
 800811a:	4632      	mov	r2, r6
 800811c:	4649      	mov	r1, r9
 800811e:	4640      	mov	r0, r8
 8008120:	47d0      	blx	sl
 8008122:	3001      	adds	r0, #1
 8008124:	d09d      	beq.n	8008062 <_printf_i+0x15a>
 8008126:	3501      	adds	r5, #1
 8008128:	68e3      	ldr	r3, [r4, #12]
 800812a:	9903      	ldr	r1, [sp, #12]
 800812c:	1a5b      	subs	r3, r3, r1
 800812e:	42ab      	cmp	r3, r5
 8008130:	dcf2      	bgt.n	8008118 <_printf_i+0x210>
 8008132:	e7eb      	b.n	800810c <_printf_i+0x204>
 8008134:	2500      	movs	r5, #0
 8008136:	f104 0619 	add.w	r6, r4, #25
 800813a:	e7f5      	b.n	8008128 <_printf_i+0x220>
 800813c:	08009ea9 	.word	0x08009ea9
 8008140:	08009eba 	.word	0x08009eba

08008144 <__sflush_r>:
 8008144:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800814c:	0716      	lsls	r6, r2, #28
 800814e:	4605      	mov	r5, r0
 8008150:	460c      	mov	r4, r1
 8008152:	d454      	bmi.n	80081fe <__sflush_r+0xba>
 8008154:	684b      	ldr	r3, [r1, #4]
 8008156:	2b00      	cmp	r3, #0
 8008158:	dc02      	bgt.n	8008160 <__sflush_r+0x1c>
 800815a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800815c:	2b00      	cmp	r3, #0
 800815e:	dd48      	ble.n	80081f2 <__sflush_r+0xae>
 8008160:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008162:	2e00      	cmp	r6, #0
 8008164:	d045      	beq.n	80081f2 <__sflush_r+0xae>
 8008166:	2300      	movs	r3, #0
 8008168:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800816c:	682f      	ldr	r7, [r5, #0]
 800816e:	6a21      	ldr	r1, [r4, #32]
 8008170:	602b      	str	r3, [r5, #0]
 8008172:	d030      	beq.n	80081d6 <__sflush_r+0x92>
 8008174:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008176:	89a3      	ldrh	r3, [r4, #12]
 8008178:	0759      	lsls	r1, r3, #29
 800817a:	d505      	bpl.n	8008188 <__sflush_r+0x44>
 800817c:	6863      	ldr	r3, [r4, #4]
 800817e:	1ad2      	subs	r2, r2, r3
 8008180:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008182:	b10b      	cbz	r3, 8008188 <__sflush_r+0x44>
 8008184:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008186:	1ad2      	subs	r2, r2, r3
 8008188:	2300      	movs	r3, #0
 800818a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800818c:	6a21      	ldr	r1, [r4, #32]
 800818e:	4628      	mov	r0, r5
 8008190:	47b0      	blx	r6
 8008192:	1c43      	adds	r3, r0, #1
 8008194:	89a3      	ldrh	r3, [r4, #12]
 8008196:	d106      	bne.n	80081a6 <__sflush_r+0x62>
 8008198:	6829      	ldr	r1, [r5, #0]
 800819a:	291d      	cmp	r1, #29
 800819c:	d82b      	bhi.n	80081f6 <__sflush_r+0xb2>
 800819e:	4a2a      	ldr	r2, [pc, #168]	@ (8008248 <__sflush_r+0x104>)
 80081a0:	40ca      	lsrs	r2, r1
 80081a2:	07d6      	lsls	r6, r2, #31
 80081a4:	d527      	bpl.n	80081f6 <__sflush_r+0xb2>
 80081a6:	2200      	movs	r2, #0
 80081a8:	6062      	str	r2, [r4, #4]
 80081aa:	04d9      	lsls	r1, r3, #19
 80081ac:	6922      	ldr	r2, [r4, #16]
 80081ae:	6022      	str	r2, [r4, #0]
 80081b0:	d504      	bpl.n	80081bc <__sflush_r+0x78>
 80081b2:	1c42      	adds	r2, r0, #1
 80081b4:	d101      	bne.n	80081ba <__sflush_r+0x76>
 80081b6:	682b      	ldr	r3, [r5, #0]
 80081b8:	b903      	cbnz	r3, 80081bc <__sflush_r+0x78>
 80081ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80081bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80081be:	602f      	str	r7, [r5, #0]
 80081c0:	b1b9      	cbz	r1, 80081f2 <__sflush_r+0xae>
 80081c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80081c6:	4299      	cmp	r1, r3
 80081c8:	d002      	beq.n	80081d0 <__sflush_r+0x8c>
 80081ca:	4628      	mov	r0, r5
 80081cc:	f7ff fbf4 	bl	80079b8 <_free_r>
 80081d0:	2300      	movs	r3, #0
 80081d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80081d4:	e00d      	b.n	80081f2 <__sflush_r+0xae>
 80081d6:	2301      	movs	r3, #1
 80081d8:	4628      	mov	r0, r5
 80081da:	47b0      	blx	r6
 80081dc:	4602      	mov	r2, r0
 80081de:	1c50      	adds	r0, r2, #1
 80081e0:	d1c9      	bne.n	8008176 <__sflush_r+0x32>
 80081e2:	682b      	ldr	r3, [r5, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d0c6      	beq.n	8008176 <__sflush_r+0x32>
 80081e8:	2b1d      	cmp	r3, #29
 80081ea:	d001      	beq.n	80081f0 <__sflush_r+0xac>
 80081ec:	2b16      	cmp	r3, #22
 80081ee:	d11e      	bne.n	800822e <__sflush_r+0xea>
 80081f0:	602f      	str	r7, [r5, #0]
 80081f2:	2000      	movs	r0, #0
 80081f4:	e022      	b.n	800823c <__sflush_r+0xf8>
 80081f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081fa:	b21b      	sxth	r3, r3
 80081fc:	e01b      	b.n	8008236 <__sflush_r+0xf2>
 80081fe:	690f      	ldr	r7, [r1, #16]
 8008200:	2f00      	cmp	r7, #0
 8008202:	d0f6      	beq.n	80081f2 <__sflush_r+0xae>
 8008204:	0793      	lsls	r3, r2, #30
 8008206:	680e      	ldr	r6, [r1, #0]
 8008208:	bf08      	it	eq
 800820a:	694b      	ldreq	r3, [r1, #20]
 800820c:	600f      	str	r7, [r1, #0]
 800820e:	bf18      	it	ne
 8008210:	2300      	movne	r3, #0
 8008212:	eba6 0807 	sub.w	r8, r6, r7
 8008216:	608b      	str	r3, [r1, #8]
 8008218:	f1b8 0f00 	cmp.w	r8, #0
 800821c:	dde9      	ble.n	80081f2 <__sflush_r+0xae>
 800821e:	6a21      	ldr	r1, [r4, #32]
 8008220:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008222:	4643      	mov	r3, r8
 8008224:	463a      	mov	r2, r7
 8008226:	4628      	mov	r0, r5
 8008228:	47b0      	blx	r6
 800822a:	2800      	cmp	r0, #0
 800822c:	dc08      	bgt.n	8008240 <__sflush_r+0xfc>
 800822e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008232:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008236:	81a3      	strh	r3, [r4, #12]
 8008238:	f04f 30ff 	mov.w	r0, #4294967295
 800823c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008240:	4407      	add	r7, r0
 8008242:	eba8 0800 	sub.w	r8, r8, r0
 8008246:	e7e7      	b.n	8008218 <__sflush_r+0xd4>
 8008248:	20400001 	.word	0x20400001

0800824c <_fflush_r>:
 800824c:	b538      	push	{r3, r4, r5, lr}
 800824e:	690b      	ldr	r3, [r1, #16]
 8008250:	4605      	mov	r5, r0
 8008252:	460c      	mov	r4, r1
 8008254:	b913      	cbnz	r3, 800825c <_fflush_r+0x10>
 8008256:	2500      	movs	r5, #0
 8008258:	4628      	mov	r0, r5
 800825a:	bd38      	pop	{r3, r4, r5, pc}
 800825c:	b118      	cbz	r0, 8008266 <_fflush_r+0x1a>
 800825e:	6a03      	ldr	r3, [r0, #32]
 8008260:	b90b      	cbnz	r3, 8008266 <_fflush_r+0x1a>
 8008262:	f7ff faa1 	bl	80077a8 <__sinit>
 8008266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d0f3      	beq.n	8008256 <_fflush_r+0xa>
 800826e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008270:	07d0      	lsls	r0, r2, #31
 8008272:	d404      	bmi.n	800827e <_fflush_r+0x32>
 8008274:	0599      	lsls	r1, r3, #22
 8008276:	d402      	bmi.n	800827e <_fflush_r+0x32>
 8008278:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800827a:	f7ff fb9a 	bl	80079b2 <__retarget_lock_acquire_recursive>
 800827e:	4628      	mov	r0, r5
 8008280:	4621      	mov	r1, r4
 8008282:	f7ff ff5f 	bl	8008144 <__sflush_r>
 8008286:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008288:	07da      	lsls	r2, r3, #31
 800828a:	4605      	mov	r5, r0
 800828c:	d4e4      	bmi.n	8008258 <_fflush_r+0xc>
 800828e:	89a3      	ldrh	r3, [r4, #12]
 8008290:	059b      	lsls	r3, r3, #22
 8008292:	d4e1      	bmi.n	8008258 <_fflush_r+0xc>
 8008294:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008296:	f7ff fb8d 	bl	80079b4 <__retarget_lock_release_recursive>
 800829a:	e7dd      	b.n	8008258 <_fflush_r+0xc>

0800829c <__swbuf_r>:
 800829c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829e:	460e      	mov	r6, r1
 80082a0:	4614      	mov	r4, r2
 80082a2:	4605      	mov	r5, r0
 80082a4:	b118      	cbz	r0, 80082ae <__swbuf_r+0x12>
 80082a6:	6a03      	ldr	r3, [r0, #32]
 80082a8:	b90b      	cbnz	r3, 80082ae <__swbuf_r+0x12>
 80082aa:	f7ff fa7d 	bl	80077a8 <__sinit>
 80082ae:	69a3      	ldr	r3, [r4, #24]
 80082b0:	60a3      	str	r3, [r4, #8]
 80082b2:	89a3      	ldrh	r3, [r4, #12]
 80082b4:	071a      	lsls	r2, r3, #28
 80082b6:	d501      	bpl.n	80082bc <__swbuf_r+0x20>
 80082b8:	6923      	ldr	r3, [r4, #16]
 80082ba:	b943      	cbnz	r3, 80082ce <__swbuf_r+0x32>
 80082bc:	4621      	mov	r1, r4
 80082be:	4628      	mov	r0, r5
 80082c0:	f000 f82a 	bl	8008318 <__swsetup_r>
 80082c4:	b118      	cbz	r0, 80082ce <__swbuf_r+0x32>
 80082c6:	f04f 37ff 	mov.w	r7, #4294967295
 80082ca:	4638      	mov	r0, r7
 80082cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082ce:	6823      	ldr	r3, [r4, #0]
 80082d0:	6922      	ldr	r2, [r4, #16]
 80082d2:	1a98      	subs	r0, r3, r2
 80082d4:	6963      	ldr	r3, [r4, #20]
 80082d6:	b2f6      	uxtb	r6, r6
 80082d8:	4283      	cmp	r3, r0
 80082da:	4637      	mov	r7, r6
 80082dc:	dc05      	bgt.n	80082ea <__swbuf_r+0x4e>
 80082de:	4621      	mov	r1, r4
 80082e0:	4628      	mov	r0, r5
 80082e2:	f7ff ffb3 	bl	800824c <_fflush_r>
 80082e6:	2800      	cmp	r0, #0
 80082e8:	d1ed      	bne.n	80082c6 <__swbuf_r+0x2a>
 80082ea:	68a3      	ldr	r3, [r4, #8]
 80082ec:	3b01      	subs	r3, #1
 80082ee:	60a3      	str	r3, [r4, #8]
 80082f0:	6823      	ldr	r3, [r4, #0]
 80082f2:	1c5a      	adds	r2, r3, #1
 80082f4:	6022      	str	r2, [r4, #0]
 80082f6:	701e      	strb	r6, [r3, #0]
 80082f8:	6962      	ldr	r2, [r4, #20]
 80082fa:	1c43      	adds	r3, r0, #1
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d004      	beq.n	800830a <__swbuf_r+0x6e>
 8008300:	89a3      	ldrh	r3, [r4, #12]
 8008302:	07db      	lsls	r3, r3, #31
 8008304:	d5e1      	bpl.n	80082ca <__swbuf_r+0x2e>
 8008306:	2e0a      	cmp	r6, #10
 8008308:	d1df      	bne.n	80082ca <__swbuf_r+0x2e>
 800830a:	4621      	mov	r1, r4
 800830c:	4628      	mov	r0, r5
 800830e:	f7ff ff9d 	bl	800824c <_fflush_r>
 8008312:	2800      	cmp	r0, #0
 8008314:	d0d9      	beq.n	80082ca <__swbuf_r+0x2e>
 8008316:	e7d6      	b.n	80082c6 <__swbuf_r+0x2a>

08008318 <__swsetup_r>:
 8008318:	b538      	push	{r3, r4, r5, lr}
 800831a:	4b29      	ldr	r3, [pc, #164]	@ (80083c0 <__swsetup_r+0xa8>)
 800831c:	4605      	mov	r5, r0
 800831e:	6818      	ldr	r0, [r3, #0]
 8008320:	460c      	mov	r4, r1
 8008322:	b118      	cbz	r0, 800832c <__swsetup_r+0x14>
 8008324:	6a03      	ldr	r3, [r0, #32]
 8008326:	b90b      	cbnz	r3, 800832c <__swsetup_r+0x14>
 8008328:	f7ff fa3e 	bl	80077a8 <__sinit>
 800832c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008330:	0719      	lsls	r1, r3, #28
 8008332:	d422      	bmi.n	800837a <__swsetup_r+0x62>
 8008334:	06da      	lsls	r2, r3, #27
 8008336:	d407      	bmi.n	8008348 <__swsetup_r+0x30>
 8008338:	2209      	movs	r2, #9
 800833a:	602a      	str	r2, [r5, #0]
 800833c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008340:	81a3      	strh	r3, [r4, #12]
 8008342:	f04f 30ff 	mov.w	r0, #4294967295
 8008346:	e033      	b.n	80083b0 <__swsetup_r+0x98>
 8008348:	0758      	lsls	r0, r3, #29
 800834a:	d512      	bpl.n	8008372 <__swsetup_r+0x5a>
 800834c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800834e:	b141      	cbz	r1, 8008362 <__swsetup_r+0x4a>
 8008350:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008354:	4299      	cmp	r1, r3
 8008356:	d002      	beq.n	800835e <__swsetup_r+0x46>
 8008358:	4628      	mov	r0, r5
 800835a:	f7ff fb2d 	bl	80079b8 <_free_r>
 800835e:	2300      	movs	r3, #0
 8008360:	6363      	str	r3, [r4, #52]	@ 0x34
 8008362:	89a3      	ldrh	r3, [r4, #12]
 8008364:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008368:	81a3      	strh	r3, [r4, #12]
 800836a:	2300      	movs	r3, #0
 800836c:	6063      	str	r3, [r4, #4]
 800836e:	6923      	ldr	r3, [r4, #16]
 8008370:	6023      	str	r3, [r4, #0]
 8008372:	89a3      	ldrh	r3, [r4, #12]
 8008374:	f043 0308 	orr.w	r3, r3, #8
 8008378:	81a3      	strh	r3, [r4, #12]
 800837a:	6923      	ldr	r3, [r4, #16]
 800837c:	b94b      	cbnz	r3, 8008392 <__swsetup_r+0x7a>
 800837e:	89a3      	ldrh	r3, [r4, #12]
 8008380:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008384:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008388:	d003      	beq.n	8008392 <__swsetup_r+0x7a>
 800838a:	4621      	mov	r1, r4
 800838c:	4628      	mov	r0, r5
 800838e:	f000 f84f 	bl	8008430 <__smakebuf_r>
 8008392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008396:	f013 0201 	ands.w	r2, r3, #1
 800839a:	d00a      	beq.n	80083b2 <__swsetup_r+0x9a>
 800839c:	2200      	movs	r2, #0
 800839e:	60a2      	str	r2, [r4, #8]
 80083a0:	6962      	ldr	r2, [r4, #20]
 80083a2:	4252      	negs	r2, r2
 80083a4:	61a2      	str	r2, [r4, #24]
 80083a6:	6922      	ldr	r2, [r4, #16]
 80083a8:	b942      	cbnz	r2, 80083bc <__swsetup_r+0xa4>
 80083aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80083ae:	d1c5      	bne.n	800833c <__swsetup_r+0x24>
 80083b0:	bd38      	pop	{r3, r4, r5, pc}
 80083b2:	0799      	lsls	r1, r3, #30
 80083b4:	bf58      	it	pl
 80083b6:	6962      	ldrpl	r2, [r4, #20]
 80083b8:	60a2      	str	r2, [r4, #8]
 80083ba:	e7f4      	b.n	80083a6 <__swsetup_r+0x8e>
 80083bc:	2000      	movs	r0, #0
 80083be:	e7f7      	b.n	80083b0 <__swsetup_r+0x98>
 80083c0:	24000038 	.word	0x24000038

080083c4 <_sbrk_r>:
 80083c4:	b538      	push	{r3, r4, r5, lr}
 80083c6:	4d06      	ldr	r5, [pc, #24]	@ (80083e0 <_sbrk_r+0x1c>)
 80083c8:	2300      	movs	r3, #0
 80083ca:	4604      	mov	r4, r0
 80083cc:	4608      	mov	r0, r1
 80083ce:	602b      	str	r3, [r5, #0]
 80083d0:	f7f9 f8f4 	bl	80015bc <_sbrk>
 80083d4:	1c43      	adds	r3, r0, #1
 80083d6:	d102      	bne.n	80083de <_sbrk_r+0x1a>
 80083d8:	682b      	ldr	r3, [r5, #0]
 80083da:	b103      	cbz	r3, 80083de <_sbrk_r+0x1a>
 80083dc:	6023      	str	r3, [r4, #0]
 80083de:	bd38      	pop	{r3, r4, r5, pc}
 80083e0:	24000324 	.word	0x24000324

080083e4 <__swhatbuf_r>:
 80083e4:	b570      	push	{r4, r5, r6, lr}
 80083e6:	460c      	mov	r4, r1
 80083e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083ec:	2900      	cmp	r1, #0
 80083ee:	b096      	sub	sp, #88	@ 0x58
 80083f0:	4615      	mov	r5, r2
 80083f2:	461e      	mov	r6, r3
 80083f4:	da0d      	bge.n	8008412 <__swhatbuf_r+0x2e>
 80083f6:	89a3      	ldrh	r3, [r4, #12]
 80083f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80083fc:	f04f 0100 	mov.w	r1, #0
 8008400:	bf14      	ite	ne
 8008402:	2340      	movne	r3, #64	@ 0x40
 8008404:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008408:	2000      	movs	r0, #0
 800840a:	6031      	str	r1, [r6, #0]
 800840c:	602b      	str	r3, [r5, #0]
 800840e:	b016      	add	sp, #88	@ 0x58
 8008410:	bd70      	pop	{r4, r5, r6, pc}
 8008412:	466a      	mov	r2, sp
 8008414:	f000 f848 	bl	80084a8 <_fstat_r>
 8008418:	2800      	cmp	r0, #0
 800841a:	dbec      	blt.n	80083f6 <__swhatbuf_r+0x12>
 800841c:	9901      	ldr	r1, [sp, #4]
 800841e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008422:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008426:	4259      	negs	r1, r3
 8008428:	4159      	adcs	r1, r3
 800842a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800842e:	e7eb      	b.n	8008408 <__swhatbuf_r+0x24>

08008430 <__smakebuf_r>:
 8008430:	898b      	ldrh	r3, [r1, #12]
 8008432:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008434:	079d      	lsls	r5, r3, #30
 8008436:	4606      	mov	r6, r0
 8008438:	460c      	mov	r4, r1
 800843a:	d507      	bpl.n	800844c <__smakebuf_r+0x1c>
 800843c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008440:	6023      	str	r3, [r4, #0]
 8008442:	6123      	str	r3, [r4, #16]
 8008444:	2301      	movs	r3, #1
 8008446:	6163      	str	r3, [r4, #20]
 8008448:	b003      	add	sp, #12
 800844a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800844c:	ab01      	add	r3, sp, #4
 800844e:	466a      	mov	r2, sp
 8008450:	f7ff ffc8 	bl	80083e4 <__swhatbuf_r>
 8008454:	9f00      	ldr	r7, [sp, #0]
 8008456:	4605      	mov	r5, r0
 8008458:	4639      	mov	r1, r7
 800845a:	4630      	mov	r0, r6
 800845c:	f7ff fb18 	bl	8007a90 <_malloc_r>
 8008460:	b948      	cbnz	r0, 8008476 <__smakebuf_r+0x46>
 8008462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008466:	059a      	lsls	r2, r3, #22
 8008468:	d4ee      	bmi.n	8008448 <__smakebuf_r+0x18>
 800846a:	f023 0303 	bic.w	r3, r3, #3
 800846e:	f043 0302 	orr.w	r3, r3, #2
 8008472:	81a3      	strh	r3, [r4, #12]
 8008474:	e7e2      	b.n	800843c <__smakebuf_r+0xc>
 8008476:	89a3      	ldrh	r3, [r4, #12]
 8008478:	6020      	str	r0, [r4, #0]
 800847a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800847e:	81a3      	strh	r3, [r4, #12]
 8008480:	9b01      	ldr	r3, [sp, #4]
 8008482:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008486:	b15b      	cbz	r3, 80084a0 <__smakebuf_r+0x70>
 8008488:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800848c:	4630      	mov	r0, r6
 800848e:	f000 f81d 	bl	80084cc <_isatty_r>
 8008492:	b128      	cbz	r0, 80084a0 <__smakebuf_r+0x70>
 8008494:	89a3      	ldrh	r3, [r4, #12]
 8008496:	f023 0303 	bic.w	r3, r3, #3
 800849a:	f043 0301 	orr.w	r3, r3, #1
 800849e:	81a3      	strh	r3, [r4, #12]
 80084a0:	89a3      	ldrh	r3, [r4, #12]
 80084a2:	431d      	orrs	r5, r3
 80084a4:	81a5      	strh	r5, [r4, #12]
 80084a6:	e7cf      	b.n	8008448 <__smakebuf_r+0x18>

080084a8 <_fstat_r>:
 80084a8:	b538      	push	{r3, r4, r5, lr}
 80084aa:	4d07      	ldr	r5, [pc, #28]	@ (80084c8 <_fstat_r+0x20>)
 80084ac:	2300      	movs	r3, #0
 80084ae:	4604      	mov	r4, r0
 80084b0:	4608      	mov	r0, r1
 80084b2:	4611      	mov	r1, r2
 80084b4:	602b      	str	r3, [r5, #0]
 80084b6:	f7f9 f858 	bl	800156a <_fstat>
 80084ba:	1c43      	adds	r3, r0, #1
 80084bc:	d102      	bne.n	80084c4 <_fstat_r+0x1c>
 80084be:	682b      	ldr	r3, [r5, #0]
 80084c0:	b103      	cbz	r3, 80084c4 <_fstat_r+0x1c>
 80084c2:	6023      	str	r3, [r4, #0]
 80084c4:	bd38      	pop	{r3, r4, r5, pc}
 80084c6:	bf00      	nop
 80084c8:	24000324 	.word	0x24000324

080084cc <_isatty_r>:
 80084cc:	b538      	push	{r3, r4, r5, lr}
 80084ce:	4d06      	ldr	r5, [pc, #24]	@ (80084e8 <_isatty_r+0x1c>)
 80084d0:	2300      	movs	r3, #0
 80084d2:	4604      	mov	r4, r0
 80084d4:	4608      	mov	r0, r1
 80084d6:	602b      	str	r3, [r5, #0]
 80084d8:	f7f9 f857 	bl	800158a <_isatty>
 80084dc:	1c43      	adds	r3, r0, #1
 80084de:	d102      	bne.n	80084e6 <_isatty_r+0x1a>
 80084e0:	682b      	ldr	r3, [r5, #0]
 80084e2:	b103      	cbz	r3, 80084e6 <_isatty_r+0x1a>
 80084e4:	6023      	str	r3, [r4, #0]
 80084e6:	bd38      	pop	{r3, r4, r5, pc}
 80084e8:	24000324 	.word	0x24000324

080084ec <_init>:
 80084ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ee:	bf00      	nop
 80084f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084f2:	bc08      	pop	{r3}
 80084f4:	469e      	mov	lr, r3
 80084f6:	4770      	bx	lr

080084f8 <_fini>:
 80084f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084fa:	bf00      	nop
 80084fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084fe:	bc08      	pop	{r3}
 8008500:	469e      	mov	lr, r3
 8008502:	4770      	bx	lr
