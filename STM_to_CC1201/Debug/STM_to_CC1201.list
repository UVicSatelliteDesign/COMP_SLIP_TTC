
STM_to_CC1201.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009348  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017f0  080095e8  080095e8  0000a5e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800add8  0800add8  0000bdd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ade0  0800ade0  0000bde0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ade4  0800ade4  0000bde4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  24000000  0800ade8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002ac  24000088  0800ae70  0000c088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000334  0800ae70  0000c334  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c088  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015a86  00000000  00000000  0000c0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c82  00000000  00000000  00021b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f08  00000000  00000000  000247c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b7e  00000000  00000000  000256c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000384f1  00000000  00000000  00026246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000162d1  00000000  00000000  0005e737  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015ef4a  00000000  00000000  00074a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d3952  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000455c  00000000  00000000  001d3998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000051  00000000  00000000  001d7ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080095d0 	.word	0x080095d0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	080095d0 	.word	0x080095d0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <CC1201_SoftReset>:

// Read bit for register addresses
#define CC1201_READ_BIT                 0x80

HAL_StatusTypeDef CC1201_SoftReset(uint8_t *status_byte)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    printf("[DEBUG] Entered CC1201_SoftReset function\n\r");
 80006b4:	4809      	ldr	r0, [pc, #36]	@ (80006dc <CC1201_SoftReset+0x30>)
 80006b6:	f008 f91f 	bl	80088f8 <iprintf>
    HAL_StatusTypeDef result = CC1201_SendStrobe(CC1201_STROBE_SOFT_RESET, status_byte);
 80006ba:	6879      	ldr	r1, [r7, #4]
 80006bc:	2030      	movs	r0, #48	@ 0x30
 80006be:	f000 faab 	bl	8000c18 <CC1201_SendStrobe>
 80006c2:	4603      	mov	r3, r0
 80006c4:	73fb      	strb	r3, [r7, #15]
    printf("[DEBUG] CC1201_SoftReset about to return: %d\n\r", result);
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	4619      	mov	r1, r3
 80006ca:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <CC1201_SoftReset+0x34>)
 80006cc:	f008 f914 	bl	80088f8 <iprintf>
    return result;
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	080095e8 	.word	0x080095e8
 80006e0:	08009614 	.word	0x08009614

080006e4 <CC1201_FastTxOn>:

HAL_StatusTypeDef CC1201_FastTxOn(uint8_t *status_byte)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_FAST_TX_ON, status_byte);
 80006ec:	6879      	ldr	r1, [r7, #4]
 80006ee:	2031      	movs	r0, #49	@ 0x31
 80006f0:	f000 fa92 	bl	8000c18 <CC1201_SendStrobe>
 80006f4:	4603      	mov	r3, r0
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <CC1201_EnterRxMode>:
{
    return CC1201_SendStrobe(CC1201_STROBE_CAL_FREQ_SYNTH, status_byte);
}

HAL_StatusTypeDef CC1201_EnterRxMode(uint8_t *status_byte)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	b082      	sub	sp, #8
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_RX, status_byte);
 8000706:	6879      	ldr	r1, [r7, #4]
 8000708:	2034      	movs	r0, #52	@ 0x34
 800070a:	f000 fa85 	bl	8000c18 <CC1201_SendStrobe>
 800070e:	4603      	mov	r3, r0
}
 8000710:	4618      	mov	r0, r3
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <CC1201_EnterTxMode>:

HAL_StatusTypeDef CC1201_EnterTxMode(uint8_t *status_byte)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_TX, status_byte);
 8000720:	6879      	ldr	r1, [r7, #4]
 8000722:	2035      	movs	r0, #53	@ 0x35
 8000724:	f000 fa78 	bl	8000c18 <CC1201_SendStrobe>
 8000728:	4603      	mov	r3, r0
}
 800072a:	4618      	mov	r0, r3
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <CC1201_EnterIdleMode>:

HAL_StatusTypeDef CC1201_EnterIdleMode(uint8_t *status_byte)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	b082      	sub	sp, #8
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_IDLE, status_byte);
 800073a:	6879      	ldr	r1, [r7, #4]
 800073c:	2036      	movs	r0, #54	@ 0x36
 800073e:	f000 fa6b 	bl	8000c18 <CC1201_SendStrobe>
 8000742:	4603      	mov	r3, r0
}
 8000744:	4618      	mov	r0, r3
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <CC1201_FlushRxFifo>:
{
    return CC1201_SendStrobe(CC1201_STROBE_SLEEP, status_byte);
}

HAL_StatusTypeDef CC1201_FlushRxFifo(uint8_t *status_byte)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_FLUSH_RX, status_byte);
 8000754:	6879      	ldr	r1, [r7, #4]
 8000756:	203a      	movs	r0, #58	@ 0x3a
 8000758:	f000 fa5e 	bl	8000c18 <CC1201_SendStrobe>
 800075c:	4603      	mov	r3, r0
}
 800075e:	4618      	mov	r0, r3
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <CC1201_FlushTxFifo>:

HAL_StatusTypeDef CC1201_FlushTxFifo(uint8_t *status_byte)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b082      	sub	sp, #8
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_FLUSH_TX, status_byte);
 800076e:	6879      	ldr	r1, [r7, #4]
 8000770:	203b      	movs	r0, #59	@ 0x3b
 8000772:	f000 fa51 	bl	8000c18 <CC1201_SendStrobe>
 8000776:	4603      	mov	r3, r0
}
 8000778:	4618      	mov	r0, r3
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <CC1201_Nop>:
{
    return CC1201_SendStrobe(CC1201_STROBE_WOR_RESET, status_byte);
}

HAL_StatusTypeDef CC1201_Nop(uint8_t *status_byte)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
    printf("[DEBUG] Entered CC1201_Nop function\n\r");
 8000788:	4809      	ldr	r0, [pc, #36]	@ (80007b0 <CC1201_Nop+0x30>)
 800078a:	f008 f8b5 	bl	80088f8 <iprintf>
    HAL_StatusTypeDef result = CC1201_SendStrobe(CC1201_STROBE_NOP, status_byte);
 800078e:	6879      	ldr	r1, [r7, #4]
 8000790:	203d      	movs	r0, #61	@ 0x3d
 8000792:	f000 fa41 	bl	8000c18 <CC1201_SendStrobe>
 8000796:	4603      	mov	r3, r0
 8000798:	73fb      	strb	r3, [r7, #15]
    printf("[DEBUG] CC1201_Nop about to return: %d\n\r", result);
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	4619      	mov	r1, r3
 800079e:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <CC1201_Nop+0x34>)
 80007a0:	f008 f8aa 	bl	80088f8 <iprintf>
    return result;
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	08009644 	.word	0x08009644
 80007b4:	0800966c 	.word	0x0800966c

080007b8 <CC1201_ReadStatus>:
 * @param reg_addr The address of the register to read. The read bit (MSB) will be set internally.
 * @param read_data Pointer to a uint8_t where the read data will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadStatus(uint16_t reg_addr, uint8_t *read_data)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b088      	sub	sp, #32
 80007bc:	af02      	add	r7, sp, #8
 80007be:	4603      	mov	r3, r0
 80007c0:	6039      	str	r1, [r7, #0]
 80007c2:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[4];
    uint8_t rx_buffer[4];
    uint8_t buffer_size;

    if (reg_addr > 0xFF) {
 80007c4:	88fb      	ldrh	r3, [r7, #6]
 80007c6:	2bff      	cmp	r3, #255	@ 0xff
 80007c8:	d909      	bls.n	80007de <CC1201_ReadStatus+0x26>
        // Extended register (burst access)
        tx_buffer[0] = 0x2F; // Extended register access command
 80007ca:	232f      	movs	r3, #47	@ 0x2f
 80007cc:	743b      	strb	r3, [r7, #16]
        tx_buffer[1] = (uint8_t)(reg_addr & 0xFF); // Low byte of address
 80007ce:	88fb      	ldrh	r3, [r7, #6]
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	747b      	strb	r3, [r7, #17]
        tx_buffer[2] = 0x00; // Dummy byte for reading
 80007d4:	2300      	movs	r3, #0
 80007d6:	74bb      	strb	r3, [r7, #18]
        buffer_size = 3;
 80007d8:	2303      	movs	r3, #3
 80007da:	75fb      	strb	r3, [r7, #23]
 80007dc:	e009      	b.n	80007f2 <CC1201_ReadStatus+0x3a>
    } else {
        // Standard register
        tx_buffer[0] = (uint8_t)reg_addr | CC1201_READ_BIT;
 80007de:	88fb      	ldrh	r3, [r7, #6]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	743b      	strb	r3, [r7, #16]
        tx_buffer[1] = 0x00; // Dummy byte for reading
 80007ea:	2300      	movs	r3, #0
 80007ec:	747b      	strb	r3, [r7, #17]
        buffer_size = 2;
 80007ee:	2302      	movs	r3, #2
 80007f0:	75fb      	strb	r3, [r7, #23]
    }

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 80007f2:	2200      	movs	r2, #0
 80007f4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007f8:	4815      	ldr	r0, [pc, #84]	@ (8000850 <CC1201_ReadStatus+0x98>)
 80007fa:	f002 ff61 	bl	80036c0 <HAL_GPIO_WritePin>

    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, tx_buffer, rx_buffer, buffer_size, HAL_MAX_DELAY);
 80007fe:	7dfb      	ldrb	r3, [r7, #23]
 8000800:	b29b      	uxth	r3, r3
 8000802:	f107 020c 	add.w	r2, r7, #12
 8000806:	f107 0110 	add.w	r1, r7, #16
 800080a:	f04f 30ff 	mov.w	r0, #4294967295
 800080e:	9000      	str	r0, [sp, #0]
 8000810:	4810      	ldr	r0, [pc, #64]	@ (8000854 <CC1201_ReadStatus+0x9c>)
 8000812:	f006 f901 	bl	8006a18 <HAL_SPI_TransmitReceive>
 8000816:	4603      	mov	r3, r0
 8000818:	75bb      	strb	r3, [r7, #22]

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 800081a:	2201      	movs	r2, #1
 800081c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000820:	480b      	ldr	r0, [pc, #44]	@ (8000850 <CC1201_ReadStatus+0x98>)
 8000822:	f002 ff4d 	bl	80036c0 <HAL_GPIO_WritePin>

    if (status == HAL_OK) {
 8000826:	7dbb      	ldrb	r3, [r7, #22]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d10c      	bne.n	8000846 <CC1201_ReadStatus+0x8e>
        if (read_data != NULL) {
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d009      	beq.n	8000846 <CC1201_ReadStatus+0x8e>
            if (reg_addr > 0xFF) {
 8000832:	88fb      	ldrh	r3, [r7, #6]
 8000834:	2bff      	cmp	r3, #255	@ 0xff
 8000836:	d903      	bls.n	8000840 <CC1201_ReadStatus+0x88>
                *read_data = rx_buffer[2]; // Extended register data
 8000838:	7bba      	ldrb	r2, [r7, #14]
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	701a      	strb	r2, [r3, #0]
 800083e:	e002      	b.n	8000846 <CC1201_ReadStatus+0x8e>
            } else {
                *read_data = rx_buffer[1]; // Standard register data
 8000840:	7b7a      	ldrb	r2, [r7, #13]
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return status;
 8000846:	7dbb      	ldrb	r3, [r7, #22]
}
 8000848:	4618      	mov	r0, r3
 800084a:	3718      	adds	r7, #24
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	58021000 	.word	0x58021000
 8000854:	240000b8 	.word	0x240000b8

08000858 <CC1201_WriteRegister>:
 * @param reg_addr The address of the register to write to.
 * @param write_data The byte of data to write to the register.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteRegister(uint16_t reg_addr, uint8_t write_data)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	460a      	mov	r2, r1
 8000862:	80fb      	strh	r3, [r7, #6]
 8000864:	4613      	mov	r3, r2
 8000866:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[4];
    uint8_t buffer_size;

    if (reg_addr > 0xFF) {
 8000868:	88fb      	ldrh	r3, [r7, #6]
 800086a:	2bff      	cmp	r3, #255	@ 0xff
 800086c:	d909      	bls.n	8000882 <CC1201_WriteRegister+0x2a>
        // Extended register (burst access)
        tx_buffer[0] = 0x2F; // Extended register access command  
 800086e:	232f      	movs	r3, #47	@ 0x2f
 8000870:	723b      	strb	r3, [r7, #8]
        tx_buffer[1] = (uint8_t)(reg_addr & 0xFF); // Low byte of address
 8000872:	88fb      	ldrh	r3, [r7, #6]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	727b      	strb	r3, [r7, #9]
        tx_buffer[2] = write_data; // Data to write
 8000878:	797b      	ldrb	r3, [r7, #5]
 800087a:	72bb      	strb	r3, [r7, #10]
        buffer_size = 3;
 800087c:	2303      	movs	r3, #3
 800087e:	73fb      	strb	r3, [r7, #15]
 8000880:	e006      	b.n	8000890 <CC1201_WriteRegister+0x38>
    } else {
        // Standard register
        tx_buffer[0] = (uint8_t)reg_addr; // Register address
 8000882:	88fb      	ldrh	r3, [r7, #6]
 8000884:	b2db      	uxtb	r3, r3
 8000886:	723b      	strb	r3, [r7, #8]
        tx_buffer[1] = write_data; // Data to write
 8000888:	797b      	ldrb	r3, [r7, #5]
 800088a:	727b      	strb	r3, [r7, #9]
        buffer_size = 2;
 800088c:	2302      	movs	r3, #2
 800088e:	73fb      	strb	r3, [r7, #15]
    }

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 8000890:	2200      	movs	r2, #0
 8000892:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000896:	480c      	ldr	r0, [pc, #48]	@ (80008c8 <CC1201_WriteRegister+0x70>)
 8000898:	f002 ff12 	bl	80036c0 <HAL_GPIO_WritePin>

    status = HAL_SPI_Transmit(&CC1201_SPI_HANDLE, tx_buffer, buffer_size, HAL_MAX_DELAY);
 800089c:	7bfb      	ldrb	r3, [r7, #15]
 800089e:	b29a      	uxth	r2, r3
 80008a0:	f107 0108 	add.w	r1, r7, #8
 80008a4:	f04f 33ff 	mov.w	r3, #4294967295
 80008a8:	4808      	ldr	r0, [pc, #32]	@ (80008cc <CC1201_WriteRegister+0x74>)
 80008aa:	f005 fec7 	bl	800663c <HAL_SPI_Transmit>
 80008ae:	4603      	mov	r3, r0
 80008b0:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 80008b2:	2201      	movs	r2, #1
 80008b4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008b8:	4803      	ldr	r0, [pc, #12]	@ (80008c8 <CC1201_WriteRegister+0x70>)
 80008ba:	f002 ff01 	bl	80036c0 <HAL_GPIO_WritePin>

    return status;
 80008be:	7bbb      	ldrb	r3, [r7, #14]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3710      	adds	r7, #16
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	58021000 	.word	0x58021000
 80008cc:	240000b8 	.word	0x240000b8

080008d0 <CC1201_ReadMARCState>:
 *
 * @param marc_state Pointer to a uint8_t where the MARCSTATE value will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadMARCState(uint8_t *marc_state)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_MARCSTATE, marc_state);
 80008d8:	6879      	ldr	r1, [r7, #4]
 80008da:	f642 7073 	movw	r0, #12147	@ 0x2f73
 80008de:	f7ff ff6b 	bl	80007b8 <CC1201_ReadStatus>
 80008e2:	4603      	mov	r3, r0
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <CC1201_GetNumRXBytes>:
 *
 * @param num_bytes Pointer to a uint8_t where the number of RX bytes will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_GetNumRXBytes(uint8_t *num_bytes)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_NUM_RXBYTES, num_bytes);
 80008f4:	6879      	ldr	r1, [r7, #4]
 80008f6:	f642 707a 	movw	r0, #12154	@ 0x2f7a
 80008fa:	f7ff ff5d 	bl	80007b8 <CC1201_ReadStatus>
 80008fe:	4603      	mov	r3, r0
}
 8000900:	4618      	mov	r0, r3
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <CC1201_GetNumTXBytes>:
 *
 * @param num_bytes Pointer to a uint8_t where the number of TX bytes will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_GetNumTXBytes(uint8_t *num_bytes)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_NUM_TXBYTES, num_bytes);
 8000910:	6879      	ldr	r1, [r7, #4]
 8000912:	f642 707b 	movw	r0, #12155	@ 0x2f7b
 8000916:	f7ff ff4f 	bl	80007b8 <CC1201_ReadStatus>
 800091a:	4603      	mov	r3, r0
}
 800091c:	4618      	mov	r0, r3
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <CC1201_WriteTxFifo>:
 * @param length Number of bytes to write.
 * @param status_byte Pointer to store the status byte returned.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteTxFifo(uint8_t *data, uint8_t length, uint8_t *status_byte)
{
 8000924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000928:	b08f      	sub	sp, #60	@ 0x3c
 800092a:	af02      	add	r7, sp, #8
 800092c:	6178      	str	r0, [r7, #20]
 800092e:	460b      	mov	r3, r1
 8000930:	60fa      	str	r2, [r7, #12]
 8000932:	74fb      	strb	r3, [r7, #19]
 8000934:	466b      	mov	r3, sp
 8000936:	461e      	mov	r6, r3
    if (data == NULL || status_byte == NULL || length == 0) {
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d005      	beq.n	800094a <CC1201_WriteTxFifo+0x26>
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d002      	beq.n	800094a <CC1201_WriteTxFifo+0x26>
 8000944:	7cfb      	ldrb	r3, [r7, #19]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d101      	bne.n	800094e <CC1201_WriteTxFifo+0x2a>
        return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
 800094c:	e08a      	b.n	8000a64 <CC1201_WriteTxFifo+0x140>
    }
    
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[2 + length]; // Command + address + data
 800094e:	7cfb      	ldrb	r3, [r7, #19]
 8000950:	1c99      	adds	r1, r3, #2
 8000952:	1e4b      	subs	r3, r1, #1
 8000954:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000956:	460a      	mov	r2, r1
 8000958:	2300      	movs	r3, #0
 800095a:	603a      	str	r2, [r7, #0]
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	f04f 0200 	mov.w	r2, #0
 8000962:	f04f 0300 	mov.w	r3, #0
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	00c3      	lsls	r3, r0, #3
 800096a:	6838      	ldr	r0, [r7, #0]
 800096c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000970:	6838      	ldr	r0, [r7, #0]
 8000972:	00c2      	lsls	r2, r0, #3
 8000974:	460a      	mov	r2, r1
 8000976:	2300      	movs	r3, #0
 8000978:	4692      	mov	sl, r2
 800097a:	469b      	mov	fp, r3
 800097c:	f04f 0200 	mov.w	r2, #0
 8000980:	f04f 0300 	mov.w	r3, #0
 8000984:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000988:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800098c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000990:	460b      	mov	r3, r1
 8000992:	3307      	adds	r3, #7
 8000994:	08db      	lsrs	r3, r3, #3
 8000996:	00db      	lsls	r3, r3, #3
 8000998:	ebad 0d03 	sub.w	sp, sp, r3
 800099c:	ab02      	add	r3, sp, #8
 800099e:	3300      	adds	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t rx_buffer[2 + length];
 80009a2:	7cfb      	ldrb	r3, [r7, #19]
 80009a4:	1c99      	adds	r1, r3, #2
 80009a6:	1e4b      	subs	r3, r1, #1
 80009a8:	623b      	str	r3, [r7, #32]
 80009aa:	460a      	mov	r2, r1
 80009ac:	2300      	movs	r3, #0
 80009ae:	4690      	mov	r8, r2
 80009b0:	4699      	mov	r9, r3
 80009b2:	f04f 0200 	mov.w	r2, #0
 80009b6:	f04f 0300 	mov.w	r3, #0
 80009ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80009be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80009c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80009c6:	460a      	mov	r2, r1
 80009c8:	2300      	movs	r3, #0
 80009ca:	4614      	mov	r4, r2
 80009cc:	461d      	mov	r5, r3
 80009ce:	f04f 0200 	mov.w	r2, #0
 80009d2:	f04f 0300 	mov.w	r3, #0
 80009d6:	00eb      	lsls	r3, r5, #3
 80009d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80009dc:	00e2      	lsls	r2, r4, #3
 80009de:	460b      	mov	r3, r1
 80009e0:	3307      	adds	r3, #7
 80009e2:	08db      	lsrs	r3, r3, #3
 80009e4:	00db      	lsls	r3, r3, #3
 80009e6:	ebad 0d03 	sub.w	sp, sp, r3
 80009ea:	ab02      	add	r3, sp, #8
 80009ec:	3300      	adds	r3, #0
 80009ee:	61fb      	str	r3, [r7, #28]
    
    // Build command: burst write to TX FIFO (0x3F | 0x40)
    tx_buffer[0] = 0x7F; // TX FIFO burst write
 80009f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009f2:	227f      	movs	r2, #127	@ 0x7f
 80009f4:	701a      	strb	r2, [r3, #0]
    
    // Copy data to transmit buffer
    for (uint8_t i = 0; i < length; i++) {
 80009f6:	2300      	movs	r3, #0
 80009f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80009fc:	e00e      	b.n	8000a1c <CC1201_WriteTxFifo+0xf8>
        tx_buffer[1 + i] = data[i];
 80009fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a02:	697a      	ldr	r2, [r7, #20]
 8000a04:	441a      	add	r2, r3
 8000a06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	7811      	ldrb	r1, [r2, #0]
 8000a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a10:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < length; i++) {
 8000a12:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a16:	3301      	adds	r3, #1
 8000a18:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000a1c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000a20:	7cfb      	ldrb	r3, [r7, #19]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d3eb      	bcc.n	80009fe <CC1201_WriteTxFifo+0xda>
    }
    
    // Pull CS low to start SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a2c:	4810      	ldr	r0, [pc, #64]	@ (8000a70 <CC1201_WriteTxFifo+0x14c>)
 8000a2e:	f002 fe47 	bl	80036c0 <HAL_GPIO_WritePin>
    
    // Perform SPI transaction
    status = HAL_SPI_TransmitReceive(&hspi4, tx_buffer, rx_buffer, length + 1, HAL_MAX_DELAY);
 8000a32:	7cfb      	ldrb	r3, [r7, #19]
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	3301      	adds	r3, #1
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a3e:	9200      	str	r2, [sp, #0]
 8000a40:	69fa      	ldr	r2, [r7, #28]
 8000a42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000a44:	480b      	ldr	r0, [pc, #44]	@ (8000a74 <CC1201_WriteTxFifo+0x150>)
 8000a46:	f005 ffe7 	bl	8006a18 <HAL_SPI_TransmitReceive>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	76fb      	strb	r3, [r7, #27]
    
    // Pull CS high to end SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 8000a4e:	2201      	movs	r2, #1
 8000a50:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a54:	4806      	ldr	r0, [pc, #24]	@ (8000a70 <CC1201_WriteTxFifo+0x14c>)
 8000a56:	f002 fe33 	bl	80036c0 <HAL_GPIO_WritePin>
    
    // Store status byte (first received byte)
    *status_byte = rx_buffer[0];
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	781a      	ldrb	r2, [r3, #0]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	701a      	strb	r2, [r3, #0]
    
    return status;
 8000a62:	7efb      	ldrb	r3, [r7, #27]
 8000a64:	46b5      	mov	sp, r6
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3734      	adds	r7, #52	@ 0x34
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a70:	58021000 	.word	0x58021000
 8000a74:	240000b8 	.word	0x240000b8

08000a78 <CC1201_ReadRxFifo>:
 * @param length Number of bytes to read.
 * @param status_byte Pointer to store the status byte returned.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadRxFifo(uint8_t *data, uint8_t length, uint8_t *status_byte)
{
 8000a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a7c:	b08f      	sub	sp, #60	@ 0x3c
 8000a7e:	af02      	add	r7, sp, #8
 8000a80:	6178      	str	r0, [r7, #20]
 8000a82:	460b      	mov	r3, r1
 8000a84:	60fa      	str	r2, [r7, #12]
 8000a86:	74fb      	strb	r3, [r7, #19]
 8000a88:	466b      	mov	r3, sp
 8000a8a:	461e      	mov	r6, r3
    if (data == NULL || status_byte == NULL || length == 0) {
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d005      	beq.n	8000a9e <CC1201_ReadRxFifo+0x26>
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d002      	beq.n	8000a9e <CC1201_ReadRxFifo+0x26>
 8000a98:	7cfb      	ldrb	r3, [r7, #19]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d101      	bne.n	8000aa2 <CC1201_ReadRxFifo+0x2a>
        return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e09d      	b.n	8000bde <CC1201_ReadRxFifo+0x166>
    }
    
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[1 + length]; // Command + dummy bytes
 8000aa2:	7cfb      	ldrb	r3, [r7, #19]
 8000aa4:	1c59      	adds	r1, r3, #1
 8000aa6:	1e4b      	subs	r3, r1, #1
 8000aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000aaa:	460a      	mov	r2, r1
 8000aac:	2300      	movs	r3, #0
 8000aae:	603a      	str	r2, [r7, #0]
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	f04f 0200 	mov.w	r2, #0
 8000ab6:	f04f 0300 	mov.w	r3, #0
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	00c3      	lsls	r3, r0, #3
 8000abe:	6838      	ldr	r0, [r7, #0]
 8000ac0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000ac4:	6838      	ldr	r0, [r7, #0]
 8000ac6:	00c2      	lsls	r2, r0, #3
 8000ac8:	460a      	mov	r2, r1
 8000aca:	2300      	movs	r3, #0
 8000acc:	4692      	mov	sl, r2
 8000ace:	469b      	mov	fp, r3
 8000ad0:	f04f 0200 	mov.w	r2, #0
 8000ad4:	f04f 0300 	mov.w	r3, #0
 8000ad8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000adc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000ae0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	3307      	adds	r3, #7
 8000ae8:	08db      	lsrs	r3, r3, #3
 8000aea:	00db      	lsls	r3, r3, #3
 8000aec:	ebad 0d03 	sub.w	sp, sp, r3
 8000af0:	ab02      	add	r3, sp, #8
 8000af2:	3300      	adds	r3, #0
 8000af4:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t rx_buffer[1 + length];
 8000af6:	7cfb      	ldrb	r3, [r7, #19]
 8000af8:	1c59      	adds	r1, r3, #1
 8000afa:	1e4b      	subs	r3, r1, #1
 8000afc:	623b      	str	r3, [r7, #32]
 8000afe:	460a      	mov	r2, r1
 8000b00:	2300      	movs	r3, #0
 8000b02:	4690      	mov	r8, r2
 8000b04:	4699      	mov	r9, r3
 8000b06:	f04f 0200 	mov.w	r2, #0
 8000b0a:	f04f 0300 	mov.w	r3, #0
 8000b0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000b12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000b16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000b1a:	460a      	mov	r2, r1
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	4614      	mov	r4, r2
 8000b20:	461d      	mov	r5, r3
 8000b22:	f04f 0200 	mov.w	r2, #0
 8000b26:	f04f 0300 	mov.w	r3, #0
 8000b2a:	00eb      	lsls	r3, r5, #3
 8000b2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000b30:	00e2      	lsls	r2, r4, #3
 8000b32:	460b      	mov	r3, r1
 8000b34:	3307      	adds	r3, #7
 8000b36:	08db      	lsrs	r3, r3, #3
 8000b38:	00db      	lsls	r3, r3, #3
 8000b3a:	ebad 0d03 	sub.w	sp, sp, r3
 8000b3e:	ab02      	add	r3, sp, #8
 8000b40:	3300      	adds	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
    
    // Build command: burst read from RX FIFO (0x3F | 0x80 | 0x40)
    tx_buffer[0] = 0xFF; // RX FIFO burst read
 8000b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b46:	22ff      	movs	r2, #255	@ 0xff
 8000b48:	701a      	strb	r2, [r3, #0]
    
    // Fill with dummy bytes for reading
    for (uint8_t i = 1; i <= length; i++) {
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000b50:	e009      	b.n	8000b66 <CC1201_ReadRxFifo+0xee>
        tx_buffer[i] = 0x00;
 8000b52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b58:	2100      	movs	r1, #0
 8000b5a:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 1; i <= length; i++) {
 8000b5c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b60:	3301      	adds	r3, #1
 8000b62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000b66:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000b6a:	7cfb      	ldrb	r3, [r7, #19]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d9f0      	bls.n	8000b52 <CC1201_ReadRxFifo+0xda>
    }
    
    // Pull CS low to start SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b76:	481d      	ldr	r0, [pc, #116]	@ (8000bec <CC1201_ReadRxFifo+0x174>)
 8000b78:	f002 fda2 	bl	80036c0 <HAL_GPIO_WritePin>
    
    // Perform SPI transaction
    status = HAL_SPI_TransmitReceive(&hspi4, tx_buffer, rx_buffer, length + 1, HAL_MAX_DELAY);
 8000b7c:	7cfb      	ldrb	r3, [r7, #19]
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	3301      	adds	r3, #1
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	f04f 32ff 	mov.w	r2, #4294967295
 8000b88:	9200      	str	r2, [sp, #0]
 8000b8a:	69fa      	ldr	r2, [r7, #28]
 8000b8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000b8e:	4818      	ldr	r0, [pc, #96]	@ (8000bf0 <CC1201_ReadRxFifo+0x178>)
 8000b90:	f005 ff42 	bl	8006a18 <HAL_SPI_TransmitReceive>
 8000b94:	4603      	mov	r3, r0
 8000b96:	76fb      	strb	r3, [r7, #27]
    
    // Pull CS high to end SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b9e:	4813      	ldr	r0, [pc, #76]	@ (8000bec <CC1201_ReadRxFifo+0x174>)
 8000ba0:	f002 fd8e 	bl	80036c0 <HAL_GPIO_WritePin>
    
    // Store status byte (first received byte)
    *status_byte = rx_buffer[0];
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	781a      	ldrb	r2, [r3, #0]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	701a      	strb	r2, [r3, #0]
    
    // Copy received data
    for (uint8_t i = 0; i < length; i++) {
 8000bac:	2300      	movs	r3, #0
 8000bae:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000bb2:	e00e      	b.n	8000bd2 <CC1201_ReadRxFifo+0x15a>
        data[i] = rx_buffer[1 + i];
 8000bb4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000bb8:	1c5a      	adds	r2, r3, #1
 8000bba:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000bbe:	6979      	ldr	r1, [r7, #20]
 8000bc0:	440b      	add	r3, r1
 8000bc2:	69f9      	ldr	r1, [r7, #28]
 8000bc4:	5c8a      	ldrb	r2, [r1, r2]
 8000bc6:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < length; i++) {
 8000bc8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000bcc:	3301      	adds	r3, #1
 8000bce:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000bd2:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000bd6:	7cfb      	ldrb	r3, [r7, #19]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d3eb      	bcc.n	8000bb4 <CC1201_ReadRxFifo+0x13c>
    }
    
    return status;
 8000bdc:	7efb      	ldrb	r3, [r7, #27]
 8000bde:	46b5      	mov	sp, r6
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3734      	adds	r7, #52	@ 0x34
 8000be4:	46bd      	mov	sp, r7
 8000be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bea:	bf00      	nop
 8000bec:	58021000 	.word	0x58021000
 8000bf0:	240000b8 	.word	0x240000b8

08000bf4 <CC1201_WriteSingleTxFifo>:
 * @param data Single byte to write to TX FIFO.
 * @param status_byte Pointer to store the status byte returned.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteSingleTxFifo(uint8_t data, uint8_t *status_byte)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	71fb      	strb	r3, [r7, #7]
    return CC1201_WriteTxFifo(&data, 1, status_byte);
 8000c00:	1dfb      	adds	r3, r7, #7
 8000c02:	683a      	ldr	r2, [r7, #0]
 8000c04:	2101      	movs	r1, #1
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fe8c 	bl	8000924 <CC1201_WriteTxFifo>
 8000c0c:	4603      	mov	r3, r0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <CC1201_SendStrobe>:
 * @param status_byte Pointer to a uint8_t where the status byte received from the CC1201 will be stored.
 *                    Can be NULL if the status byte is not needed.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_SendStrobe(uint8_t strobe_command, uint8_t *status_byte)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af02      	add	r7, sp, #8
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;
    uint8_t rx_data;

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 8000c24:	2200      	movs	r2, #0
 8000c26:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c2a:	4813      	ldr	r0, [pc, #76]	@ (8000c78 <CC1201_SendStrobe+0x60>)
 8000c2c:	f002 fd48 	bl	80036c0 <HAL_GPIO_WritePin>
    
    // Small delay to ensure CS is stable
    HAL_Delay(1);
 8000c30:	2001      	movs	r0, #1
 8000c32:	f001 ff1b 	bl	8002a6c <HAL_Delay>

    // Perform SPI transaction
    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, &strobe_command, &rx_data, 1, 1000);
 8000c36:	f107 020e 	add.w	r2, r7, #14
 8000c3a:	1df9      	adds	r1, r7, #7
 8000c3c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c40:	9300      	str	r3, [sp, #0]
 8000c42:	2301      	movs	r3, #1
 8000c44:	480d      	ldr	r0, [pc, #52]	@ (8000c7c <CC1201_SendStrobe+0x64>)
 8000c46:	f005 fee7 	bl	8006a18 <HAL_SPI_TransmitReceive>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	73fb      	strb	r3, [r7, #15]
    
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 8000c4e:	2201      	movs	r2, #1
 8000c50:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c54:	4808      	ldr	r0, [pc, #32]	@ (8000c78 <CC1201_SendStrobe+0x60>)
 8000c56:	f002 fd33 	bl	80036c0 <HAL_GPIO_WritePin>
    
    if (status == HAL_OK) {
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d105      	bne.n	8000c6c <CC1201_SendStrobe+0x54>
        if (status_byte != NULL) {
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d002      	beq.n	8000c6c <CC1201_SendStrobe+0x54>
            *status_byte = rx_data;
 8000c66:	7bba      	ldrb	r2, [r7, #14]
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	701a      	strb	r2, [r3, #0]
        }
    }
    return status;
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	58021000 	.word	0x58021000
 8000c7c:	240000b8 	.word	0x240000b8

08000c80 <print_cc1201_status>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Function to decode and print CC1201 status
void print_cc1201_status(uint8_t status_byte, const char* context) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	6039      	str	r1, [r7, #0]
 8000c8a:	71fb      	strb	r3, [r7, #7]
    uint8_t radio_state = (status_byte >> 4) & 0x0F;
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	091b      	lsrs	r3, r3, #4
 8000c90:	73fb      	strb	r3, [r7, #15]
    uint8_t fifo_bytes = status_byte & 0x0F;
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	f003 030f 	and.w	r3, r3, #15
 8000c98:	73bb      	strb	r3, [r7, #14]
    
    printf("  %s: Status=0x%02X, State=0x%X", context, status_byte, radio_state);
 8000c9a:	79fa      	ldrb	r2, [r7, #7]
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	6839      	ldr	r1, [r7, #0]
 8000ca0:	4823      	ldr	r0, [pc, #140]	@ (8000d30 <print_cc1201_status+0xb0>)
 8000ca2:	f007 fe29 	bl	80088f8 <iprintf>
    switch(radio_state) {
 8000ca6:	7bfb      	ldrb	r3, [r7, #15]
 8000ca8:	2b07      	cmp	r3, #7
 8000caa:	d833      	bhi.n	8000d14 <print_cc1201_status+0x94>
 8000cac:	a201      	add	r2, pc, #4	@ (adr r2, 8000cb4 <print_cc1201_status+0x34>)
 8000cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb2:	bf00      	nop
 8000cb4:	08000cd5 	.word	0x08000cd5
 8000cb8:	08000cdd 	.word	0x08000cdd
 8000cbc:	08000ce5 	.word	0x08000ce5
 8000cc0:	08000ced 	.word	0x08000ced
 8000cc4:	08000cf5 	.word	0x08000cf5
 8000cc8:	08000cfd 	.word	0x08000cfd
 8000ccc:	08000d05 	.word	0x08000d05
 8000cd0:	08000d0d 	.word	0x08000d0d
        case 0x0: printf("(IDLE)"); break;
 8000cd4:	4817      	ldr	r0, [pc, #92]	@ (8000d34 <print_cc1201_status+0xb4>)
 8000cd6:	f007 fe0f 	bl	80088f8 <iprintf>
 8000cda:	e01f      	b.n	8000d1c <print_cc1201_status+0x9c>
        case 0x1: printf("(RX)"); break;
 8000cdc:	4816      	ldr	r0, [pc, #88]	@ (8000d38 <print_cc1201_status+0xb8>)
 8000cde:	f007 fe0b 	bl	80088f8 <iprintf>
 8000ce2:	e01b      	b.n	8000d1c <print_cc1201_status+0x9c>
        case 0x2: printf("(TX)"); break;
 8000ce4:	4815      	ldr	r0, [pc, #84]	@ (8000d3c <print_cc1201_status+0xbc>)
 8000ce6:	f007 fe07 	bl	80088f8 <iprintf>
 8000cea:	e017      	b.n	8000d1c <print_cc1201_status+0x9c>
        case 0x3: printf("(FSTXON)"); break;
 8000cec:	4814      	ldr	r0, [pc, #80]	@ (8000d40 <print_cc1201_status+0xc0>)
 8000cee:	f007 fe03 	bl	80088f8 <iprintf>
 8000cf2:	e013      	b.n	8000d1c <print_cc1201_status+0x9c>
        case 0x4: printf("(CALIBRATE)"); break;
 8000cf4:	4813      	ldr	r0, [pc, #76]	@ (8000d44 <print_cc1201_status+0xc4>)
 8000cf6:	f007 fdff 	bl	80088f8 <iprintf>
 8000cfa:	e00f      	b.n	8000d1c <print_cc1201_status+0x9c>
        case 0x5: printf("(SETTLING)"); break;
 8000cfc:	4812      	ldr	r0, [pc, #72]	@ (8000d48 <print_cc1201_status+0xc8>)
 8000cfe:	f007 fdfb 	bl	80088f8 <iprintf>
 8000d02:	e00b      	b.n	8000d1c <print_cc1201_status+0x9c>
        case 0x6: printf("(RX_FIFO_ERR)"); break;
 8000d04:	4811      	ldr	r0, [pc, #68]	@ (8000d4c <print_cc1201_status+0xcc>)
 8000d06:	f007 fdf7 	bl	80088f8 <iprintf>
 8000d0a:	e007      	b.n	8000d1c <print_cc1201_status+0x9c>
        case 0x7: printf("(TX_FIFO_ERR)"); break;
 8000d0c:	4810      	ldr	r0, [pc, #64]	@ (8000d50 <print_cc1201_status+0xd0>)
 8000d0e:	f007 fdf3 	bl	80088f8 <iprintf>
 8000d12:	e003      	b.n	8000d1c <print_cc1201_status+0x9c>
        default: printf("(UNKNOWN)"); break;
 8000d14:	480f      	ldr	r0, [pc, #60]	@ (8000d54 <print_cc1201_status+0xd4>)
 8000d16:	f007 fdef 	bl	80088f8 <iprintf>
 8000d1a:	bf00      	nop
    }
    printf(", FIFO=%d\n\r", fifo_bytes);
 8000d1c:	7bbb      	ldrb	r3, [r7, #14]
 8000d1e:	4619      	mov	r1, r3
 8000d20:	480d      	ldr	r0, [pc, #52]	@ (8000d58 <print_cc1201_status+0xd8>)
 8000d22:	f007 fde9 	bl	80088f8 <iprintf>
}
 8000d26:	bf00      	nop
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	08009698 	.word	0x08009698
 8000d34:	080096b8 	.word	0x080096b8
 8000d38:	080096c0 	.word	0x080096c0
 8000d3c:	080096c8 	.word	0x080096c8
 8000d40:	080096d0 	.word	0x080096d0
 8000d44:	080096dc 	.word	0x080096dc
 8000d48:	080096e8 	.word	0x080096e8
 8000d4c:	080096f4 	.word	0x080096f4
 8000d50:	08009704 	.word	0x08009704
 8000d54:	08009714 	.word	0x08009714
 8000d58:	08009720 	.word	0x08009720

08000d5c <cc1201_hardware_reset>:

// Hardware Reset Function
void cc1201_hardware_reset(void) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
    printf("  Performing hardware reset...\n\r");
 8000d60:	480b      	ldr	r0, [pc, #44]	@ (8000d90 <cc1201_hardware_reset+0x34>)
 8000d62:	f007 fdc9 	bl	80088f8 <iprintf>
    
    // Pull reset pin LOW (active reset)
    HAL_GPIO_WritePin(CC1201_RESET_PORT, CC1201_RESET_PIN, GPIO_PIN_RESET);
 8000d66:	2200      	movs	r2, #0
 8000d68:	2110      	movs	r1, #16
 8000d6a:	480a      	ldr	r0, [pc, #40]	@ (8000d94 <cc1201_hardware_reset+0x38>)
 8000d6c:	f002 fca8 	bl	80036c0 <HAL_GPIO_WritePin>
    HAL_Delay(10); // Hold reset for 10ms
 8000d70:	200a      	movs	r0, #10
 8000d72:	f001 fe7b 	bl	8002a6c <HAL_Delay>
    
    // Release reset pin HIGH (inactive)
    HAL_GPIO_WritePin(CC1201_RESET_PORT, CC1201_RESET_PIN, GPIO_PIN_SET);
 8000d76:	2201      	movs	r2, #1
 8000d78:	2110      	movs	r1, #16
 8000d7a:	4806      	ldr	r0, [pc, #24]	@ (8000d94 <cc1201_hardware_reset+0x38>)
 8000d7c:	f002 fca0 	bl	80036c0 <HAL_GPIO_WritePin>
    HAL_Delay(50); // Wait for reset to complete
 8000d80:	2032      	movs	r0, #50	@ 0x32
 8000d82:	f001 fe73 	bl	8002a6c <HAL_Delay>
    
    printf("  Hardware reset complete\n\r");
 8000d86:	4804      	ldr	r0, [pc, #16]	@ (8000d98 <cc1201_hardware_reset+0x3c>)
 8000d88:	f007 fdb6 	bl	80088f8 <iprintf>
}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	0800972c 	.word	0x0800972c
 8000d94:	58020c00 	.word	0x58020c00
 8000d98:	08009750 	.word	0x08009750

08000d9c <cc1201_power_up_sequence>:

// CC1201 Power-up and Reset Sequence  
void cc1201_power_up_sequence(void) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
    printf("\n=== CC1201 POWER-UP SEQUENCE ===\n\r");
 8000da2:	4838      	ldr	r0, [pc, #224]	@ (8000e84 <cc1201_power_up_sequence+0xe8>)
 8000da4:	f007 fda8 	bl	80088f8 <iprintf>
    
    // 1. Ensure CS is high (inactive)
    printf("1. Setting CS HIGH (inactive)...\n\r");
 8000da8:	4837      	ldr	r0, [pc, #220]	@ (8000e88 <cc1201_power_up_sequence+0xec>)
 8000daa:	f007 fda5 	bl	80088f8 <iprintf>
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 8000dae:	2201      	movs	r2, #1
 8000db0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000db4:	4835      	ldr	r0, [pc, #212]	@ (8000e8c <cc1201_power_up_sequence+0xf0>)
 8000db6:	f002 fc83 	bl	80036c0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000dba:	200a      	movs	r0, #10
 8000dbc:	f001 fe56 	bl	8002a6c <HAL_Delay>
    
    // 2. Hardware reset sequence
    printf("2. Hardware reset sequence...\n\r");
 8000dc0:	4833      	ldr	r0, [pc, #204]	@ (8000e90 <cc1201_power_up_sequence+0xf4>)
 8000dc2:	f007 fd99 	bl	80088f8 <iprintf>
    cc1201_hardware_reset();
 8000dc6:	f7ff ffc9 	bl	8000d5c <cc1201_hardware_reset>
    
    // 3. Power-up delay (let voltages stabilize)
    printf("3. Power stabilization delay (100ms)...\n\r");
 8000dca:	4832      	ldr	r0, [pc, #200]	@ (8000e94 <cc1201_power_up_sequence+0xf8>)
 8000dcc:	f007 fd94 	bl	80088f8 <iprintf>
    HAL_Delay(100);
 8000dd0:	2064      	movs	r0, #100	@ 0x64
 8000dd2:	f001 fe4b 	bl	8002a6c <HAL_Delay>
    
    // 4. Crystal oscillator startup time
    printf("4. Crystal oscillator startup delay (10ms)...\n\r");
 8000dd6:	4830      	ldr	r0, [pc, #192]	@ (8000e98 <cc1201_power_up_sequence+0xfc>)
 8000dd8:	f007 fd8e 	bl	80088f8 <iprintf>
    HAL_Delay(10);
 8000ddc:	200a      	movs	r0, #10
 8000dde:	f001 fe45 	bl	8002a6c <HAL_Delay>
    
    // 5. Test basic communication after hardware reset
    printf("5. Testing communication after hardware reset...\n\r");
 8000de2:	482e      	ldr	r0, [pc, #184]	@ (8000e9c <cc1201_power_up_sequence+0x100>)
 8000de4:	f007 fd88 	bl	80088f8 <iprintf>
    uint8_t post_hw_reset_status = 0xFF;
 8000de8:	23ff      	movs	r3, #255	@ 0xff
 8000dea:	713b      	strb	r3, [r7, #4]
    HAL_StatusTypeDef post_hw_reset_result = CC1201_Nop(&post_hw_reset_status);
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff fcc6 	bl	8000780 <CC1201_Nop>
 8000df4:	4603      	mov	r3, r0
 8000df6:	71fb      	strb	r3, [r7, #7]
    printf("  Post-HW-reset NOP: HAL=%d, Status=0x%02X\n\r", post_hw_reset_result, post_hw_reset_status);
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	793a      	ldrb	r2, [r7, #4]
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4828      	ldr	r0, [pc, #160]	@ (8000ea0 <cc1201_power_up_sequence+0x104>)
 8000e00:	f007 fd7a 	bl	80088f8 <iprintf>
    
    // 6. Try software reset sequence (if hardware reset helped)
    if (post_hw_reset_status != 0xFF) {
 8000e04:	793b      	ldrb	r3, [r7, #4]
 8000e06:	2bff      	cmp	r3, #255	@ 0xff
 8000e08:	d02f      	beq.n	8000e6a <cc1201_power_up_sequence+0xce>
        printf("6. Attempting software reset...\n\r");
 8000e0a:	4826      	ldr	r0, [pc, #152]	@ (8000ea4 <cc1201_power_up_sequence+0x108>)
 8000e0c:	f007 fd74 	bl	80088f8 <iprintf>
        uint8_t reset_status = 0xFF;
 8000e10:	23ff      	movs	r3, #255	@ 0xff
 8000e12:	70fb      	strb	r3, [r7, #3]
        HAL_StatusTypeDef reset_result = CC1201_SoftReset(&reset_status);
 8000e14:	1cfb      	adds	r3, r7, #3
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fc48 	bl	80006ac <CC1201_SoftReset>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	71bb      	strb	r3, [r7, #6]
        printf("  Software reset: HAL=%d, Status=0x%02X\n\r", reset_result, reset_status);
 8000e20:	79bb      	ldrb	r3, [r7, #6]
 8000e22:	78fa      	ldrb	r2, [r7, #3]
 8000e24:	4619      	mov	r1, r3
 8000e26:	4820      	ldr	r0, [pc, #128]	@ (8000ea8 <cc1201_power_up_sequence+0x10c>)
 8000e28:	f007 fd66 	bl	80088f8 <iprintf>
        
        // Wait for reset to complete
        HAL_Delay(50);
 8000e2c:	2032      	movs	r0, #50	@ 0x32
 8000e2e:	f001 fe1d 	bl	8002a6c <HAL_Delay>
        
        // Test again after software reset
        uint8_t post_reset_status = 0xFF;
 8000e32:	23ff      	movs	r3, #255	@ 0xff
 8000e34:	70bb      	strb	r3, [r7, #2]
        HAL_StatusTypeDef post_reset_result = CC1201_Nop(&post_reset_status);
 8000e36:	1cbb      	adds	r3, r7, #2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fca1 	bl	8000780 <CC1201_Nop>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	717b      	strb	r3, [r7, #5]
        printf("  Post-SW-reset NOP: HAL=%d, Status=0x%02X\n\r", post_reset_result, post_reset_status);
 8000e42:	797b      	ldrb	r3, [r7, #5]
 8000e44:	78ba      	ldrb	r2, [r7, #2]
 8000e46:	4619      	mov	r1, r3
 8000e48:	4818      	ldr	r0, [pc, #96]	@ (8000eac <cc1201_power_up_sequence+0x110>)
 8000e4a:	f007 fd55 	bl	80088f8 <iprintf>
        
        if (post_reset_status != 0xFF && post_reset_status != 0x00) {
 8000e4e:	78bb      	ldrb	r3, [r7, #2]
 8000e50:	2bff      	cmp	r3, #255	@ 0xff
 8000e52:	d006      	beq.n	8000e62 <cc1201_power_up_sequence+0xc6>
 8000e54:	78bb      	ldrb	r3, [r7, #2]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <cc1201_power_up_sequence+0xc6>
            printf("  ✓ CC1201 responding after complete reset sequence!\n\r");
 8000e5a:	4815      	ldr	r0, [pc, #84]	@ (8000eb0 <cc1201_power_up_sequence+0x114>)
 8000e5c:	f007 fd4c 	bl	80088f8 <iprintf>
 8000e60:	e009      	b.n	8000e76 <cc1201_power_up_sequence+0xda>
        } else {
            printf("  ✗ CC1201 still not responding after software reset\n\r");
 8000e62:	4814      	ldr	r0, [pc, #80]	@ (8000eb4 <cc1201_power_up_sequence+0x118>)
 8000e64:	f007 fd48 	bl	80088f8 <iprintf>
 8000e68:	e005      	b.n	8000e76 <cc1201_power_up_sequence+0xda>
        }
    } else {
        printf("6. Skipping software reset - hardware reset didn't help\n\r");
 8000e6a:	4813      	ldr	r0, [pc, #76]	@ (8000eb8 <cc1201_power_up_sequence+0x11c>)
 8000e6c:	f007 fd44 	bl	80088f8 <iprintf>
        printf("  ✗ CC1201 not responding - likely hardware issue\n\r");
 8000e70:	4812      	ldr	r0, [pc, #72]	@ (8000ebc <cc1201_power_up_sequence+0x120>)
 8000e72:	f007 fd41 	bl	80088f8 <iprintf>
    }
    
    printf("=== POWER-UP SEQUENCE COMPLETE ===\n\r");
 8000e76:	4812      	ldr	r0, [pc, #72]	@ (8000ec0 <cc1201_power_up_sequence+0x124>)
 8000e78:	f007 fd3e 	bl	80088f8 <iprintf>
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	0800976c 	.word	0x0800976c
 8000e88:	08009790 	.word	0x08009790
 8000e8c:	58021000 	.word	0x58021000
 8000e90:	080097b4 	.word	0x080097b4
 8000e94:	080097d4 	.word	0x080097d4
 8000e98:	08009800 	.word	0x08009800
 8000e9c:	08009830 	.word	0x08009830
 8000ea0:	08009864 	.word	0x08009864
 8000ea4:	08009894 	.word	0x08009894
 8000ea8:	080098b8 	.word	0x080098b8
 8000eac:	080098e4 	.word	0x080098e4
 8000eb0:	08009914 	.word	0x08009914
 8000eb4:	08009950 	.word	0x08009950
 8000eb8:	0800998c 	.word	0x0800998c
 8000ebc:	080099c8 	.word	0x080099c8
 8000ec0:	08009a00 	.word	0x08009a00

08000ec4 <comprehensive_cc1201_diagnostic>:

// Comprehensive CC1201 Hardware Diagnostic
void comprehensive_cc1201_diagnostic(void) {
 8000ec4:	b5b0      	push	{r4, r5, r7, lr}
 8000ec6:	b08c      	sub	sp, #48	@ 0x30
 8000ec8:	af02      	add	r7, sp, #8
    printf("\n=== COMPREHENSIVE CC1201 HARDWARE DIAGNOSTIC ===\n\r");
 8000eca:	48ad      	ldr	r0, [pc, #692]	@ (8001180 <comprehensive_cc1201_diagnostic+0x2bc>)
 8000ecc:	f007 fd14 	bl	80088f8 <iprintf>
    
    // 1. Check pin states BEFORE any SPI communication
    printf("1. INITIAL PIN STATE CHECK:\n\r");
 8000ed0:	48ac      	ldr	r0, [pc, #688]	@ (8001184 <comprehensive_cc1201_diagnostic+0x2c0>)
 8000ed2:	f007 fd11 	bl	80088f8 <iprintf>
    printf("  CS Pin (PE11): %s\n\r", HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11) ? "HIGH" : "LOW");
 8000ed6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000eda:	48ab      	ldr	r0, [pc, #684]	@ (8001188 <comprehensive_cc1201_diagnostic+0x2c4>)
 8000edc:	f002 fbd8 	bl	8003690 <HAL_GPIO_ReadPin>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <comprehensive_cc1201_diagnostic+0x26>
 8000ee6:	4ba9      	ldr	r3, [pc, #676]	@ (800118c <comprehensive_cc1201_diagnostic+0x2c8>)
 8000ee8:	e000      	b.n	8000eec <comprehensive_cc1201_diagnostic+0x28>
 8000eea:	4ba9      	ldr	r3, [pc, #676]	@ (8001190 <comprehensive_cc1201_diagnostic+0x2cc>)
 8000eec:	4619      	mov	r1, r3
 8000eee:	48a9      	ldr	r0, [pc, #676]	@ (8001194 <comprehensive_cc1201_diagnostic+0x2d0>)
 8000ef0:	f007 fd02 	bl	80088f8 <iprintf>
    printf("  SCK Pin (PE12): %s\n\r", HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12) ? "HIGH" : "LOW");
 8000ef4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ef8:	48a3      	ldr	r0, [pc, #652]	@ (8001188 <comprehensive_cc1201_diagnostic+0x2c4>)
 8000efa:	f002 fbc9 	bl	8003690 <HAL_GPIO_ReadPin>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <comprehensive_cc1201_diagnostic+0x44>
 8000f04:	4ba1      	ldr	r3, [pc, #644]	@ (800118c <comprehensive_cc1201_diagnostic+0x2c8>)
 8000f06:	e000      	b.n	8000f0a <comprehensive_cc1201_diagnostic+0x46>
 8000f08:	4ba1      	ldr	r3, [pc, #644]	@ (8001190 <comprehensive_cc1201_diagnostic+0x2cc>)
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	48a2      	ldr	r0, [pc, #648]	@ (8001198 <comprehensive_cc1201_diagnostic+0x2d4>)
 8000f0e:	f007 fcf3 	bl	80088f8 <iprintf>
    printf("  MISO Pin (PE13): %s\n\r", HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13) ? "HIGH" : "LOW");
 8000f12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f16:	489c      	ldr	r0, [pc, #624]	@ (8001188 <comprehensive_cc1201_diagnostic+0x2c4>)
 8000f18:	f002 fbba 	bl	8003690 <HAL_GPIO_ReadPin>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <comprehensive_cc1201_diagnostic+0x62>
 8000f22:	4b9a      	ldr	r3, [pc, #616]	@ (800118c <comprehensive_cc1201_diagnostic+0x2c8>)
 8000f24:	e000      	b.n	8000f28 <comprehensive_cc1201_diagnostic+0x64>
 8000f26:	4b9a      	ldr	r3, [pc, #616]	@ (8001190 <comprehensive_cc1201_diagnostic+0x2cc>)
 8000f28:	4619      	mov	r1, r3
 8000f2a:	489c      	ldr	r0, [pc, #624]	@ (800119c <comprehensive_cc1201_diagnostic+0x2d8>)
 8000f2c:	f007 fce4 	bl	80088f8 <iprintf>
    printf("  MOSI Pin (PE14): %s\n\r", HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_14) ? "HIGH" : "LOW");
 8000f30:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f34:	4894      	ldr	r0, [pc, #592]	@ (8001188 <comprehensive_cc1201_diagnostic+0x2c4>)
 8000f36:	f002 fbab 	bl	8003690 <HAL_GPIO_ReadPin>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <comprehensive_cc1201_diagnostic+0x80>
 8000f40:	4b92      	ldr	r3, [pc, #584]	@ (800118c <comprehensive_cc1201_diagnostic+0x2c8>)
 8000f42:	e000      	b.n	8000f46 <comprehensive_cc1201_diagnostic+0x82>
 8000f44:	4b92      	ldr	r3, [pc, #584]	@ (8001190 <comprehensive_cc1201_diagnostic+0x2cc>)
 8000f46:	4619      	mov	r1, r3
 8000f48:	4895      	ldr	r0, [pc, #596]	@ (80011a0 <comprehensive_cc1201_diagnostic+0x2dc>)
 8000f4a:	f007 fcd5 	bl	80088f8 <iprintf>
    printf("  RESET Pin (PD4): %s\n\r", HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4) ? "HIGH" : "LOW");
 8000f4e:	2110      	movs	r1, #16
 8000f50:	4894      	ldr	r0, [pc, #592]	@ (80011a4 <comprehensive_cc1201_diagnostic+0x2e0>)
 8000f52:	f002 fb9d 	bl	8003690 <HAL_GPIO_ReadPin>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <comprehensive_cc1201_diagnostic+0x9c>
 8000f5c:	4b8b      	ldr	r3, [pc, #556]	@ (800118c <comprehensive_cc1201_diagnostic+0x2c8>)
 8000f5e:	e000      	b.n	8000f62 <comprehensive_cc1201_diagnostic+0x9e>
 8000f60:	4b8b      	ldr	r3, [pc, #556]	@ (8001190 <comprehensive_cc1201_diagnostic+0x2cc>)
 8000f62:	4619      	mov	r1, r3
 8000f64:	4890      	ldr	r0, [pc, #576]	@ (80011a8 <comprehensive_cc1201_diagnostic+0x2e4>)
 8000f66:	f007 fcc7 	bl	80088f8 <iprintf>
    printf("  INT Pin (PD5): %s\n\r", HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5) ? "HIGH" : "LOW");
 8000f6a:	2120      	movs	r1, #32
 8000f6c:	488d      	ldr	r0, [pc, #564]	@ (80011a4 <comprehensive_cc1201_diagnostic+0x2e0>)
 8000f6e:	f002 fb8f 	bl	8003690 <HAL_GPIO_ReadPin>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <comprehensive_cc1201_diagnostic+0xb8>
 8000f78:	4b84      	ldr	r3, [pc, #528]	@ (800118c <comprehensive_cc1201_diagnostic+0x2c8>)
 8000f7a:	e000      	b.n	8000f7e <comprehensive_cc1201_diagnostic+0xba>
 8000f7c:	4b84      	ldr	r3, [pc, #528]	@ (8001190 <comprehensive_cc1201_diagnostic+0x2cc>)
 8000f7e:	4619      	mov	r1, r3
 8000f80:	488a      	ldr	r0, [pc, #552]	@ (80011ac <comprehensive_cc1201_diagnostic+0x2e8>)
 8000f82:	f007 fcb9 	bl	80088f8 <iprintf>
    
    // 2. Manual CS control test
    printf("\n2. MANUAL CS CONTROL TEST:\n\r");
 8000f86:	488a      	ldr	r0, [pc, #552]	@ (80011b0 <comprehensive_cc1201_diagnostic+0x2ec>)
 8000f88:	f007 fcb6 	bl	80088f8 <iprintf>
    printf("  Setting CS LOW...\n\r");
 8000f8c:	4889      	ldr	r0, [pc, #548]	@ (80011b4 <comprehensive_cc1201_diagnostic+0x2f0>)
 8000f8e:	f007 fcb3 	bl	80088f8 <iprintf>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f98:	487b      	ldr	r0, [pc, #492]	@ (8001188 <comprehensive_cc1201_diagnostic+0x2c4>)
 8000f9a:	f002 fb91 	bl	80036c0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000f9e:	200a      	movs	r0, #10
 8000fa0:	f001 fd64 	bl	8002a6c <HAL_Delay>
    printf("  CS Pin: %s\n\r", HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11) ? "HIGH" : "LOW");
 8000fa4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fa8:	4877      	ldr	r0, [pc, #476]	@ (8001188 <comprehensive_cc1201_diagnostic+0x2c4>)
 8000faa:	f002 fb71 	bl	8003690 <HAL_GPIO_ReadPin>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <comprehensive_cc1201_diagnostic+0xf4>
 8000fb4:	4b75      	ldr	r3, [pc, #468]	@ (800118c <comprehensive_cc1201_diagnostic+0x2c8>)
 8000fb6:	e000      	b.n	8000fba <comprehensive_cc1201_diagnostic+0xf6>
 8000fb8:	4b75      	ldr	r3, [pc, #468]	@ (8001190 <comprehensive_cc1201_diagnostic+0x2cc>)
 8000fba:	4619      	mov	r1, r3
 8000fbc:	487e      	ldr	r0, [pc, #504]	@ (80011b8 <comprehensive_cc1201_diagnostic+0x2f4>)
 8000fbe:	f007 fc9b 	bl	80088f8 <iprintf>
    printf("  MISO Pin: %s\n\r", HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13) ? "HIGH" : "LOW");
 8000fc2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fc6:	4870      	ldr	r0, [pc, #448]	@ (8001188 <comprehensive_cc1201_diagnostic+0x2c4>)
 8000fc8:	f002 fb62 	bl	8003690 <HAL_GPIO_ReadPin>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <comprehensive_cc1201_diagnostic+0x112>
 8000fd2:	4b6e      	ldr	r3, [pc, #440]	@ (800118c <comprehensive_cc1201_diagnostic+0x2c8>)
 8000fd4:	e000      	b.n	8000fd8 <comprehensive_cc1201_diagnostic+0x114>
 8000fd6:	4b6e      	ldr	r3, [pc, #440]	@ (8001190 <comprehensive_cc1201_diagnostic+0x2cc>)
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4878      	ldr	r0, [pc, #480]	@ (80011bc <comprehensive_cc1201_diagnostic+0x2f8>)
 8000fdc:	f007 fc8c 	bl	80088f8 <iprintf>
    
    printf("  Setting CS HIGH...\n\r");
 8000fe0:	4877      	ldr	r0, [pc, #476]	@ (80011c0 <comprehensive_cc1201_diagnostic+0x2fc>)
 8000fe2:	f007 fc89 	bl	80088f8 <iprintf>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fec:	4866      	ldr	r0, [pc, #408]	@ (8001188 <comprehensive_cc1201_diagnostic+0x2c4>)
 8000fee:	f002 fb67 	bl	80036c0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000ff2:	200a      	movs	r0, #10
 8000ff4:	f001 fd3a 	bl	8002a6c <HAL_Delay>
    printf("  CS Pin: %s\n\r", HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11) ? "HIGH" : "LOW");
 8000ff8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ffc:	4862      	ldr	r0, [pc, #392]	@ (8001188 <comprehensive_cc1201_diagnostic+0x2c4>)
 8000ffe:	f002 fb47 	bl	8003690 <HAL_GPIO_ReadPin>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <comprehensive_cc1201_diagnostic+0x148>
 8001008:	4b60      	ldr	r3, [pc, #384]	@ (800118c <comprehensive_cc1201_diagnostic+0x2c8>)
 800100a:	e000      	b.n	800100e <comprehensive_cc1201_diagnostic+0x14a>
 800100c:	4b60      	ldr	r3, [pc, #384]	@ (8001190 <comprehensive_cc1201_diagnostic+0x2cc>)
 800100e:	4619      	mov	r1, r3
 8001010:	4869      	ldr	r0, [pc, #420]	@ (80011b8 <comprehensive_cc1201_diagnostic+0x2f4>)
 8001012:	f007 fc71 	bl	80088f8 <iprintf>
    printf("  MISO Pin: %s\n\r", HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13) ? "HIGH" : "LOW");
 8001016:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800101a:	485b      	ldr	r0, [pc, #364]	@ (8001188 <comprehensive_cc1201_diagnostic+0x2c4>)
 800101c:	f002 fb38 	bl	8003690 <HAL_GPIO_ReadPin>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <comprehensive_cc1201_diagnostic+0x166>
 8001026:	4b59      	ldr	r3, [pc, #356]	@ (800118c <comprehensive_cc1201_diagnostic+0x2c8>)
 8001028:	e000      	b.n	800102c <comprehensive_cc1201_diagnostic+0x168>
 800102a:	4b59      	ldr	r3, [pc, #356]	@ (8001190 <comprehensive_cc1201_diagnostic+0x2cc>)
 800102c:	4619      	mov	r1, r3
 800102e:	4863      	ldr	r0, [pc, #396]	@ (80011bc <comprehensive_cc1201_diagnostic+0x2f8>)
 8001030:	f007 fc62 	bl	80088f8 <iprintf>
    
    // 3. Test different SPI byte patterns with CS control
    printf("\n3. RAW SPI BYTE PATTERN TEST:\n\r");
 8001034:	4863      	ldr	r0, [pc, #396]	@ (80011c4 <comprehensive_cc1201_diagnostic+0x300>)
 8001036:	f007 fc5f 	bl	80088f8 <iprintf>
    uint8_t test_patterns[] = {0x00, 0xFF, 0x55, 0xAA, 0x3D}; // Last one is NOP command
 800103a:	4a63      	ldr	r2, [pc, #396]	@ (80011c8 <comprehensive_cc1201_diagnostic+0x304>)
 800103c:	f107 031c 	add.w	r3, r7, #28
 8001040:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001044:	6018      	str	r0, [r3, #0]
 8001046:	3304      	adds	r3, #4
 8001048:	7019      	strb	r1, [r3, #0]
    const char* pattern_names[] = {"0x00", "0xFF", "0x55", "0xAA", "NOP(0x3D)"};
 800104a:	4b60      	ldr	r3, [pc, #384]	@ (80011cc <comprehensive_cc1201_diagnostic+0x308>)
 800104c:	f107 0408 	add.w	r4, r7, #8
 8001050:	461d      	mov	r5, r3
 8001052:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001054:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001056:	682b      	ldr	r3, [r5, #0]
 8001058:	6023      	str	r3, [r4, #0]
    
    for (int i = 0; i < 5; i++) {
 800105a:	2300      	movs	r3, #0
 800105c:	627b      	str	r3, [r7, #36]	@ 0x24
 800105e:	e052      	b.n	8001106 <comprehensive_cc1201_diagnostic+0x242>
        uint8_t tx_data = test_patterns[i];
 8001060:	f107 021c 	add.w	r2, r7, #28
 8001064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001066:	4413      	add	r3, r2
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	717b      	strb	r3, [r7, #5]
        uint8_t rx_data = 0x00; // Initialize to 0 this time
 800106c:	2300      	movs	r3, #0
 800106e:	713b      	strb	r3, [r7, #4]
        
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET); // CS LOW
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001076:	4844      	ldr	r0, [pc, #272]	@ (8001188 <comprehensive_cc1201_diagnostic+0x2c4>)
 8001078:	f002 fb22 	bl	80036c0 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800107c:	2001      	movs	r0, #1
 800107e:	f001 fcf5 	bl	8002a6c <HAL_Delay>
        HAL_StatusTypeDef spi_status = HAL_SPI_TransmitReceive(&hspi4, &tx_data, &rx_data, 1, 1000);
 8001082:	1d3a      	adds	r2, r7, #4
 8001084:	1d79      	adds	r1, r7, #5
 8001086:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	4850      	ldr	r0, [pc, #320]	@ (80011d0 <comprehensive_cc1201_diagnostic+0x30c>)
 8001090:	f005 fcc2 	bl	8006a18 <HAL_SPI_TransmitReceive>
 8001094:	4603      	mov	r3, r0
 8001096:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);   // CS HIGH
 800109a:	2201      	movs	r2, #1
 800109c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010a0:	4839      	ldr	r0, [pc, #228]	@ (8001188 <comprehensive_cc1201_diagnostic+0x2c4>)
 80010a2:	f002 fb0d 	bl	80036c0 <HAL_GPIO_WritePin>
        
        printf("  %s: TX=0x%02X -> RX=0x%02X (HAL=%d)\n\r", 
 80010a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	3328      	adds	r3, #40	@ 0x28
 80010ac:	443b      	add	r3, r7
 80010ae:	f853 1c20 	ldr.w	r1, [r3, #-32]
 80010b2:	797b      	ldrb	r3, [r7, #5]
 80010b4:	461a      	mov	r2, r3
 80010b6:	793b      	ldrb	r3, [r7, #4]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	4603      	mov	r3, r0
 80010c2:	4844      	ldr	r0, [pc, #272]	@ (80011d4 <comprehensive_cc1201_diagnostic+0x310>)
 80010c4:	f007 fc18 	bl	80088f8 <iprintf>
               pattern_names[i], tx_data, rx_data, spi_status);
        
        if (rx_data == tx_data) {
 80010c8:	793a      	ldrb	r2, [r7, #4]
 80010ca:	797b      	ldrb	r3, [r7, #5]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d103      	bne.n	80010d8 <comprehensive_cc1201_diagnostic+0x214>
            printf("    ⚠ Echo detected - MISO may be shorted to MOSI\n\r");
 80010d0:	4841      	ldr	r0, [pc, #260]	@ (80011d8 <comprehensive_cc1201_diagnostic+0x314>)
 80010d2:	f007 fc11 	bl	80088f8 <iprintf>
 80010d6:	e010      	b.n	80010fa <comprehensive_cc1201_diagnostic+0x236>
        } else if (rx_data == 0xFF) {
 80010d8:	793b      	ldrb	r3, [r7, #4]
 80010da:	2bff      	cmp	r3, #255	@ 0xff
 80010dc:	d103      	bne.n	80010e6 <comprehensive_cc1201_diagnostic+0x222>
            printf("    ⚠ MISO stuck HIGH - check power/connections\n\r");
 80010de:	483f      	ldr	r0, [pc, #252]	@ (80011dc <comprehensive_cc1201_diagnostic+0x318>)
 80010e0:	f007 fc0a 	bl	80088f8 <iprintf>
 80010e4:	e009      	b.n	80010fa <comprehensive_cc1201_diagnostic+0x236>
        } else if (rx_data == 0x00) {
 80010e6:	793b      	ldrb	r3, [r7, #4]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d103      	bne.n	80010f4 <comprehensive_cc1201_diagnostic+0x230>
            printf("    ⚠ MISO stuck LOW - check power/connections\n\r");
 80010ec:	483c      	ldr	r0, [pc, #240]	@ (80011e0 <comprehensive_cc1201_diagnostic+0x31c>)
 80010ee:	f007 fc03 	bl	80088f8 <iprintf>
 80010f2:	e002      	b.n	80010fa <comprehensive_cc1201_diagnostic+0x236>
        } else {
            printf("    ✓ Different response - potential communication\n\r");
 80010f4:	483b      	ldr	r0, [pc, #236]	@ (80011e4 <comprehensive_cc1201_diagnostic+0x320>)
 80010f6:	f007 fbff 	bl	80088f8 <iprintf>
        }
        HAL_Delay(10);
 80010fa:	200a      	movs	r0, #10
 80010fc:	f001 fcb6 	bl	8002a6c <HAL_Delay>
    for (int i = 0; i < 5; i++) {
 8001100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001102:	3301      	adds	r3, #1
 8001104:	627b      	str	r3, [r7, #36]	@ 0x24
 8001106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001108:	2b04      	cmp	r3, #4
 800110a:	dda9      	ble.n	8001060 <comprehensive_cc1201_diagnostic+0x19c>
    }
    
    // 4. Hardware reset test
    printf("\n4. HARDWARE RESET TEST:\n\r");
 800110c:	4836      	ldr	r0, [pc, #216]	@ (80011e8 <comprehensive_cc1201_diagnostic+0x324>)
 800110e:	f007 fbf3 	bl	80088f8 <iprintf>
    printf("  ✓ Hardware RESET pin configured on PD4\n\r");
 8001112:	4836      	ldr	r0, [pc, #216]	@ (80011ec <comprehensive_cc1201_diagnostic+0x328>)
 8001114:	f007 fbf0 	bl	80088f8 <iprintf>
    printf("  Testing hardware reset sequence...\n\r");
 8001118:	4835      	ldr	r0, [pc, #212]	@ (80011f0 <comprehensive_cc1201_diagnostic+0x32c>)
 800111a:	f007 fbed 	bl	80088f8 <iprintf>
    
    // Test reset pin control
    printf("  Current RESET pin state: %s\n\r", HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4) ? "HIGH" : "LOW");
 800111e:	2110      	movs	r1, #16
 8001120:	4820      	ldr	r0, [pc, #128]	@ (80011a4 <comprehensive_cc1201_diagnostic+0x2e0>)
 8001122:	f002 fab5 	bl	8003690 <HAL_GPIO_ReadPin>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <comprehensive_cc1201_diagnostic+0x26c>
 800112c:	4b17      	ldr	r3, [pc, #92]	@ (800118c <comprehensive_cc1201_diagnostic+0x2c8>)
 800112e:	e000      	b.n	8001132 <comprehensive_cc1201_diagnostic+0x26e>
 8001130:	4b17      	ldr	r3, [pc, #92]	@ (8001190 <comprehensive_cc1201_diagnostic+0x2cc>)
 8001132:	4619      	mov	r1, r3
 8001134:	482f      	ldr	r0, [pc, #188]	@ (80011f4 <comprehensive_cc1201_diagnostic+0x330>)
 8001136:	f007 fbdf 	bl	80088f8 <iprintf>
    printf("  Performing reset pulse...\n\r");
 800113a:	482f      	ldr	r0, [pc, #188]	@ (80011f8 <comprehensive_cc1201_diagnostic+0x334>)
 800113c:	f007 fbdc 	bl	80088f8 <iprintf>
    
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET); // Assert reset
 8001140:	2200      	movs	r2, #0
 8001142:	2110      	movs	r1, #16
 8001144:	4817      	ldr	r0, [pc, #92]	@ (80011a4 <comprehensive_cc1201_diagnostic+0x2e0>)
 8001146:	f002 fabb 	bl	80036c0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800114a:	200a      	movs	r0, #10
 800114c:	f001 fc8e 	bl	8002a6c <HAL_Delay>
    printf("  RESET pin during reset: %s\n\r", HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4) ? "HIGH" : "LOW");
 8001150:	2110      	movs	r1, #16
 8001152:	4814      	ldr	r0, [pc, #80]	@ (80011a4 <comprehensive_cc1201_diagnostic+0x2e0>)
 8001154:	f002 fa9c 	bl	8003690 <HAL_GPIO_ReadPin>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <comprehensive_cc1201_diagnostic+0x29e>
 800115e:	4b0b      	ldr	r3, [pc, #44]	@ (800118c <comprehensive_cc1201_diagnostic+0x2c8>)
 8001160:	e000      	b.n	8001164 <comprehensive_cc1201_diagnostic+0x2a0>
 8001162:	4b0b      	ldr	r3, [pc, #44]	@ (8001190 <comprehensive_cc1201_diagnostic+0x2cc>)
 8001164:	4619      	mov	r1, r3
 8001166:	4825      	ldr	r0, [pc, #148]	@ (80011fc <comprehensive_cc1201_diagnostic+0x338>)
 8001168:	f007 fbc6 	bl	80088f8 <iprintf>
    printf("  MISO pin during reset: %s\n\r", HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13) ? "HIGH" : "LOW");
 800116c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001170:	4805      	ldr	r0, [pc, #20]	@ (8001188 <comprehensive_cc1201_diagnostic+0x2c4>)
 8001172:	f002 fa8d 	bl	8003690 <HAL_GPIO_ReadPin>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d041      	beq.n	8001200 <comprehensive_cc1201_diagnostic+0x33c>
 800117c:	4b03      	ldr	r3, [pc, #12]	@ (800118c <comprehensive_cc1201_diagnostic+0x2c8>)
 800117e:	e040      	b.n	8001202 <comprehensive_cc1201_diagnostic+0x33e>
 8001180:	08009a28 	.word	0x08009a28
 8001184:	08009a5c 	.word	0x08009a5c
 8001188:	58021000 	.word	0x58021000
 800118c:	08009a7c 	.word	0x08009a7c
 8001190:	08009a84 	.word	0x08009a84
 8001194:	08009a88 	.word	0x08009a88
 8001198:	08009aa0 	.word	0x08009aa0
 800119c:	08009ab8 	.word	0x08009ab8
 80011a0:	08009ad0 	.word	0x08009ad0
 80011a4:	58020c00 	.word	0x58020c00
 80011a8:	08009ae8 	.word	0x08009ae8
 80011ac:	08009b00 	.word	0x08009b00
 80011b0:	08009b18 	.word	0x08009b18
 80011b4:	08009b38 	.word	0x08009b38
 80011b8:	08009b50 	.word	0x08009b50
 80011bc:	08009b60 	.word	0x08009b60
 80011c0:	08009b74 	.word	0x08009b74
 80011c4:	08009b8c 	.word	0x08009b8c
 80011c8:	0800a12c 	.word	0x0800a12c
 80011cc:	0800a160 	.word	0x0800a160
 80011d0:	240000b8 	.word	0x240000b8
 80011d4:	08009bb0 	.word	0x08009bb0
 80011d8:	08009bd8 	.word	0x08009bd8
 80011dc:	08009c10 	.word	0x08009c10
 80011e0:	08009c44 	.word	0x08009c44
 80011e4:	08009c78 	.word	0x08009c78
 80011e8:	08009cb0 	.word	0x08009cb0
 80011ec:	08009ccc 	.word	0x08009ccc
 80011f0:	08009cfc 	.word	0x08009cfc
 80011f4:	08009d24 	.word	0x08009d24
 80011f8:	08009d44 	.word	0x08009d44
 80011fc:	08009d64 	.word	0x08009d64
 8001200:	4b76      	ldr	r3, [pc, #472]	@ (80013dc <comprehensive_cc1201_diagnostic+0x518>)
 8001202:	4619      	mov	r1, r3
 8001204:	4876      	ldr	r0, [pc, #472]	@ (80013e0 <comprehensive_cc1201_diagnostic+0x51c>)
 8001206:	f007 fb77 	bl	80088f8 <iprintf>
    
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);   // Release reset
 800120a:	2201      	movs	r2, #1
 800120c:	2110      	movs	r1, #16
 800120e:	4875      	ldr	r0, [pc, #468]	@ (80013e4 <comprehensive_cc1201_diagnostic+0x520>)
 8001210:	f002 fa56 	bl	80036c0 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8001214:	2032      	movs	r0, #50	@ 0x32
 8001216:	f001 fc29 	bl	8002a6c <HAL_Delay>
    printf("  RESET pin after reset: %s\n\r", HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4) ? "HIGH" : "LOW");
 800121a:	2110      	movs	r1, #16
 800121c:	4871      	ldr	r0, [pc, #452]	@ (80013e4 <comprehensive_cc1201_diagnostic+0x520>)
 800121e:	f002 fa37 	bl	8003690 <HAL_GPIO_ReadPin>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <comprehensive_cc1201_diagnostic+0x368>
 8001228:	4b6f      	ldr	r3, [pc, #444]	@ (80013e8 <comprehensive_cc1201_diagnostic+0x524>)
 800122a:	e000      	b.n	800122e <comprehensive_cc1201_diagnostic+0x36a>
 800122c:	4b6b      	ldr	r3, [pc, #428]	@ (80013dc <comprehensive_cc1201_diagnostic+0x518>)
 800122e:	4619      	mov	r1, r3
 8001230:	486e      	ldr	r0, [pc, #440]	@ (80013ec <comprehensive_cc1201_diagnostic+0x528>)
 8001232:	f007 fb61 	bl	80088f8 <iprintf>
    printf("  MISO pin after reset: %s\n\r", HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13) ? "HIGH" : "LOW");
 8001236:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800123a:	486d      	ldr	r0, [pc, #436]	@ (80013f0 <comprehensive_cc1201_diagnostic+0x52c>)
 800123c:	f002 fa28 	bl	8003690 <HAL_GPIO_ReadPin>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <comprehensive_cc1201_diagnostic+0x386>
 8001246:	4b68      	ldr	r3, [pc, #416]	@ (80013e8 <comprehensive_cc1201_diagnostic+0x524>)
 8001248:	e000      	b.n	800124c <comprehensive_cc1201_diagnostic+0x388>
 800124a:	4b64      	ldr	r3, [pc, #400]	@ (80013dc <comprehensive_cc1201_diagnostic+0x518>)
 800124c:	4619      	mov	r1, r3
 800124e:	4869      	ldr	r0, [pc, #420]	@ (80013f4 <comprehensive_cc1201_diagnostic+0x530>)
 8001250:	f007 fb52 	bl	80088f8 <iprintf>
    
    // Test communication after reset
    uint8_t reset_test_tx = 0x3D, reset_test_rx = 0x00;
 8001254:	233d      	movs	r3, #61	@ 0x3d
 8001256:	71fb      	strb	r3, [r7, #7]
 8001258:	2300      	movs	r3, #0
 800125a:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 800125c:	2200      	movs	r2, #0
 800125e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001262:	4863      	ldr	r0, [pc, #396]	@ (80013f0 <comprehensive_cc1201_diagnostic+0x52c>)
 8001264:	f002 fa2c 	bl	80036c0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001268:	2001      	movs	r0, #1
 800126a:	f001 fbff 	bl	8002a6c <HAL_Delay>
    HAL_StatusTypeDef reset_comm_status = HAL_SPI_TransmitReceive(&hspi4, &reset_test_tx, &reset_test_rx, 1, 1000);
 800126e:	1dba      	adds	r2, r7, #6
 8001270:	1df9      	adds	r1, r7, #7
 8001272:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	2301      	movs	r3, #1
 800127a:	485f      	ldr	r0, [pc, #380]	@ (80013f8 <comprehensive_cc1201_diagnostic+0x534>)
 800127c:	f005 fbcc 	bl	8006a18 <HAL_SPI_TransmitReceive>
 8001280:	4603      	mov	r3, r0
 8001282:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8001286:	2201      	movs	r2, #1
 8001288:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800128c:	4858      	ldr	r0, [pc, #352]	@ (80013f0 <comprehensive_cc1201_diagnostic+0x52c>)
 800128e:	f002 fa17 	bl	80036c0 <HAL_GPIO_WritePin>
    printf("  Post-reset communication: TX=0x%02X -> RX=0x%02X (HAL=%d)\n\r", 
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	4619      	mov	r1, r3
 8001296:	79bb      	ldrb	r3, [r7, #6]
 8001298:	461a      	mov	r2, r3
 800129a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800129e:	4857      	ldr	r0, [pc, #348]	@ (80013fc <comprehensive_cc1201_diagnostic+0x538>)
 80012a0:	f007 fb2a 	bl	80088f8 <iprintf>
           reset_test_tx, reset_test_rx, reset_comm_status);
    
    printf("\n5. POWER CONSIDERATIONS:\n\r");
 80012a4:	4856      	ldr	r0, [pc, #344]	@ (8001400 <comprehensive_cc1201_diagnostic+0x53c>)
 80012a6:	f007 fb27 	bl	80088f8 <iprintf>
    printf("  ⚠ No power enable pin defined in current configuration\n\r");
 80012aa:	4856      	ldr	r0, [pc, #344]	@ (8001404 <comprehensive_cc1201_diagnostic+0x540>)
 80012ac:	f007 fb24 	bl	80088f8 <iprintf>
    printf("  → Check if CC1201 has separate VDD supply\n\r");
 80012b0:	4855      	ldr	r0, [pc, #340]	@ (8001408 <comprehensive_cc1201_diagnostic+0x544>)
 80012b2:	f007 fb21 	bl	80088f8 <iprintf>
    printf("  → Verify CC1201 crystal oscillator is working\n\r");
 80012b6:	4855      	ldr	r0, [pc, #340]	@ (800140c <comprehensive_cc1201_diagnostic+0x548>)
 80012b8:	f007 fb1e 	bl	80088f8 <iprintf>
    
    // 6. Try different SPI clock speeds
    printf("\n6. SPI CLOCK SPEED TEST:\n\r");
 80012bc:	4854      	ldr	r0, [pc, #336]	@ (8001410 <comprehensive_cc1201_diagnostic+0x54c>)
 80012be:	f007 fb1b 	bl	80088f8 <iprintf>
    printf("  Current SPI prescaler: %lu\n\r", (unsigned long)hspi4.Init.BaudRatePrescaler);
 80012c2:	4b4d      	ldr	r3, [pc, #308]	@ (80013f8 <comprehensive_cc1201_diagnostic+0x534>)
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	4619      	mov	r1, r3
 80012c8:	4852      	ldr	r0, [pc, #328]	@ (8001414 <comprehensive_cc1201_diagnostic+0x550>)
 80012ca:	f007 fb15 	bl	80088f8 <iprintf>
    
    // Test with slower clock
    printf("  Testing with slower clock (prescaler 32)...\n\r");
 80012ce:	4852      	ldr	r0, [pc, #328]	@ (8001418 <comprehensive_cc1201_diagnostic+0x554>)
 80012d0:	f007 fb12 	bl	80088f8 <iprintf>
    hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80012d4:	4b48      	ldr	r3, [pc, #288]	@ (80013f8 <comprehensive_cc1201_diagnostic+0x534>)
 80012d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012da:	61da      	str	r2, [r3, #28]
    if (HAL_SPI_Init(&hspi4) == HAL_OK) {
 80012dc:	4846      	ldr	r0, [pc, #280]	@ (80013f8 <comprehensive_cc1201_diagnostic+0x534>)
 80012de:	f005 f889 	bl	80063f4 <HAL_SPI_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d12d      	bne.n	8001344 <comprehensive_cc1201_diagnostic+0x480>
        uint8_t tx_slow = 0x3D, rx_slow = 0;
 80012e8:	233d      	movs	r3, #61	@ 0x3d
 80012ea:	70fb      	strb	r3, [r7, #3]
 80012ec:	2300      	movs	r3, #0
 80012ee:	70bb      	strb	r3, [r7, #2]
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 80012f0:	2200      	movs	r2, #0
 80012f2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012f6:	483e      	ldr	r0, [pc, #248]	@ (80013f0 <comprehensive_cc1201_diagnostic+0x52c>)
 80012f8:	f002 f9e2 	bl	80036c0 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80012fc:	2001      	movs	r0, #1
 80012fe:	f001 fbb5 	bl	8002a6c <HAL_Delay>
        HAL_StatusTypeDef slow_status = HAL_SPI_TransmitReceive(&hspi4, &tx_slow, &rx_slow, 1, 1000);
 8001302:	1cba      	adds	r2, r7, #2
 8001304:	1cf9      	adds	r1, r7, #3
 8001306:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	2301      	movs	r3, #1
 800130e:	483a      	ldr	r0, [pc, #232]	@ (80013f8 <comprehensive_cc1201_diagnostic+0x534>)
 8001310:	f005 fb82 	bl	8006a18 <HAL_SPI_TransmitReceive>
 8001314:	4603      	mov	r3, r0
 8001316:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 800131a:	2201      	movs	r2, #1
 800131c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001320:	4833      	ldr	r0, [pc, #204]	@ (80013f0 <comprehensive_cc1201_diagnostic+0x52c>)
 8001322:	f002 f9cd 	bl	80036c0 <HAL_GPIO_WritePin>
        printf("    Slow NOP: TX=0x%02X -> RX=0x%02X (HAL=%d)\n\r", tx_slow, rx_slow, slow_status);
 8001326:	78fb      	ldrb	r3, [r7, #3]
 8001328:	4619      	mov	r1, r3
 800132a:	78bb      	ldrb	r3, [r7, #2]
 800132c:	461a      	mov	r2, r3
 800132e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001332:	483a      	ldr	r0, [pc, #232]	@ (800141c <comprehensive_cc1201_diagnostic+0x558>)
 8001334:	f007 fae0 	bl	80088f8 <iprintf>
        
        // Restore original speed
        hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001338:	4b2f      	ldr	r3, [pc, #188]	@ (80013f8 <comprehensive_cc1201_diagnostic+0x534>)
 800133a:	2200      	movs	r2, #0
 800133c:	61da      	str	r2, [r3, #28]
        HAL_SPI_Init(&hspi4);
 800133e:	482e      	ldr	r0, [pc, #184]	@ (80013f8 <comprehensive_cc1201_diagnostic+0x534>)
 8001340:	f005 f858 	bl	80063f4 <HAL_SPI_Init>
    }
    
    // 7. Final pin state check
    printf("\n7. FINAL PIN STATE CHECK:\n\r");
 8001344:	4836      	ldr	r0, [pc, #216]	@ (8001420 <comprehensive_cc1201_diagnostic+0x55c>)
 8001346:	f007 fad7 	bl	80088f8 <iprintf>
    printf("  CS Pin (PE11): %s\n\r", HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11) ? "HIGH" : "LOW");
 800134a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800134e:	4828      	ldr	r0, [pc, #160]	@ (80013f0 <comprehensive_cc1201_diagnostic+0x52c>)
 8001350:	f002 f99e 	bl	8003690 <HAL_GPIO_ReadPin>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <comprehensive_cc1201_diagnostic+0x49a>
 800135a:	4b23      	ldr	r3, [pc, #140]	@ (80013e8 <comprehensive_cc1201_diagnostic+0x524>)
 800135c:	e000      	b.n	8001360 <comprehensive_cc1201_diagnostic+0x49c>
 800135e:	4b1f      	ldr	r3, [pc, #124]	@ (80013dc <comprehensive_cc1201_diagnostic+0x518>)
 8001360:	4619      	mov	r1, r3
 8001362:	4830      	ldr	r0, [pc, #192]	@ (8001424 <comprehensive_cc1201_diagnostic+0x560>)
 8001364:	f007 fac8 	bl	80088f8 <iprintf>
    printf("  MISO Pin (PE13): %s\n\r", HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13) ? "HIGH" : "LOW");
 8001368:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800136c:	4820      	ldr	r0, [pc, #128]	@ (80013f0 <comprehensive_cc1201_diagnostic+0x52c>)
 800136e:	f002 f98f 	bl	8003690 <HAL_GPIO_ReadPin>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <comprehensive_cc1201_diagnostic+0x4b8>
 8001378:	4b1b      	ldr	r3, [pc, #108]	@ (80013e8 <comprehensive_cc1201_diagnostic+0x524>)
 800137a:	e000      	b.n	800137e <comprehensive_cc1201_diagnostic+0x4ba>
 800137c:	4b17      	ldr	r3, [pc, #92]	@ (80013dc <comprehensive_cc1201_diagnostic+0x518>)
 800137e:	4619      	mov	r1, r3
 8001380:	4829      	ldr	r0, [pc, #164]	@ (8001428 <comprehensive_cc1201_diagnostic+0x564>)
 8001382:	f007 fab9 	bl	80088f8 <iprintf>
    printf("  INT Pin (PD5): %s\n\r", HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5) ? "HIGH" : "LOW");
 8001386:	2120      	movs	r1, #32
 8001388:	4816      	ldr	r0, [pc, #88]	@ (80013e4 <comprehensive_cc1201_diagnostic+0x520>)
 800138a:	f002 f981 	bl	8003690 <HAL_GPIO_ReadPin>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <comprehensive_cc1201_diagnostic+0x4d4>
 8001394:	4b14      	ldr	r3, [pc, #80]	@ (80013e8 <comprehensive_cc1201_diagnostic+0x524>)
 8001396:	e000      	b.n	800139a <comprehensive_cc1201_diagnostic+0x4d6>
 8001398:	4b10      	ldr	r3, [pc, #64]	@ (80013dc <comprehensive_cc1201_diagnostic+0x518>)
 800139a:	4619      	mov	r1, r3
 800139c:	4823      	ldr	r0, [pc, #140]	@ (800142c <comprehensive_cc1201_diagnostic+0x568>)
 800139e:	f007 faab 	bl	80088f8 <iprintf>
    
    printf("=== HARDWARE DIAGNOSTIC COMPLETE ===\n\r");
 80013a2:	4823      	ldr	r0, [pc, #140]	@ (8001430 <comprehensive_cc1201_diagnostic+0x56c>)
 80013a4:	f007 faa8 	bl	80088f8 <iprintf>
    printf("\nRECOMMENDATIONS:\n\r");
 80013a8:	4822      	ldr	r0, [pc, #136]	@ (8001434 <comprehensive_cc1201_diagnostic+0x570>)
 80013aa:	f007 faa5 	bl	80088f8 <iprintf>
    printf("→ If MISO is stuck HIGH: Check CC1201 power supply\n\r");
 80013ae:	4822      	ldr	r0, [pc, #136]	@ (8001438 <comprehensive_cc1201_diagnostic+0x574>)
 80013b0:	f007 faa2 	bl	80088f8 <iprintf>
    printf("→ If MISO is stuck LOW: Check ground connections\n\r");
 80013b4:	4821      	ldr	r0, [pc, #132]	@ (800143c <comprehensive_cc1201_diagnostic+0x578>)
 80013b6:	f007 fa9f 	bl	80088f8 <iprintf>
    printf("→ If echoing MOSI: Check for short circuits\n\r");
 80013ba:	4821      	ldr	r0, [pc, #132]	@ (8001440 <comprehensive_cc1201_diagnostic+0x57c>)
 80013bc:	f007 fa9c 	bl	80088f8 <iprintf>
    printf("→ Consider adding hardware reset pin control\n\r");
 80013c0:	4820      	ldr	r0, [pc, #128]	@ (8001444 <comprehensive_cc1201_diagnostic+0x580>)
 80013c2:	f007 fa99 	bl	80088f8 <iprintf>
    printf("→ Verify CC1201 crystal oscillator is populated and working\n\r");
 80013c6:	4820      	ldr	r0, [pc, #128]	@ (8001448 <comprehensive_cc1201_diagnostic+0x584>)
 80013c8:	f007 fa96 	bl	80088f8 <iprintf>
    printf("→ Check CC1201 datasheet for proper power-up sequence\n\r");
 80013cc:	481f      	ldr	r0, [pc, #124]	@ (800144c <comprehensive_cc1201_diagnostic+0x588>)
 80013ce:	f007 fa93 	bl	80088f8 <iprintf>
}
 80013d2:	bf00      	nop
 80013d4:	3728      	adds	r7, #40	@ 0x28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bdb0      	pop	{r4, r5, r7, pc}
 80013da:	bf00      	nop
 80013dc:	08009a84 	.word	0x08009a84
 80013e0:	08009d84 	.word	0x08009d84
 80013e4:	58020c00 	.word	0x58020c00
 80013e8:	08009a7c 	.word	0x08009a7c
 80013ec:	08009da4 	.word	0x08009da4
 80013f0:	58021000 	.word	0x58021000
 80013f4:	08009dc4 	.word	0x08009dc4
 80013f8:	240000b8 	.word	0x240000b8
 80013fc:	08009de4 	.word	0x08009de4
 8001400:	08009e24 	.word	0x08009e24
 8001404:	08009e40 	.word	0x08009e40
 8001408:	08009e80 	.word	0x08009e80
 800140c:	08009eb0 	.word	0x08009eb0
 8001410:	08009ee4 	.word	0x08009ee4
 8001414:	08009f00 	.word	0x08009f00
 8001418:	08009f20 	.word	0x08009f20
 800141c:	08009f50 	.word	0x08009f50
 8001420:	08009f80 	.word	0x08009f80
 8001424:	08009a88 	.word	0x08009a88
 8001428:	08009ab8 	.word	0x08009ab8
 800142c:	08009b00 	.word	0x08009b00
 8001430:	08009fa0 	.word	0x08009fa0
 8001434:	08009fc8 	.word	0x08009fc8
 8001438:	08009fdc 	.word	0x08009fdc
 800143c:	0800a014 	.word	0x0800a014
 8001440:	0800a04c 	.word	0x0800a04c
 8001444:	0800a07c 	.word	0x0800a07c
 8001448:	0800a0b0 	.word	0x0800a0b0
 800144c:	0800a0f0 	.word	0x0800a0f0

08001450 <test_buffer_operations>:

// Test 1: Buffer Read/Write Operations
void test_buffer_operations(void) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
    printf("\n=== TEST 1: BUFFER READ/WRITE OPERATIONS ===\n\r");
 8001456:	4864      	ldr	r0, [pc, #400]	@ (80015e8 <test_buffer_operations+0x198>)
 8001458:	f007 fa4e 	bl	80088f8 <iprintf>
    
    HAL_StatusTypeDef status;
    uint8_t status_byte = 0;
 800145c:	2300      	movs	r3, #0
 800145e:	75bb      	strb	r3, [r7, #22]
    
    // First, ensure we're in IDLE state and flush FIFOs
    printf("1. Preparing for buffer tests...\n\r");
 8001460:	4862      	ldr	r0, [pc, #392]	@ (80015ec <test_buffer_operations+0x19c>)
 8001462:	f007 fa49 	bl	80088f8 <iprintf>
    status = CC1201_EnterIdleMode(&status_byte);
 8001466:	f107 0316 	add.w	r3, r7, #22
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff f961 	bl	8000732 <CC1201_EnterIdleMode>
 8001470:	4603      	mov	r3, r0
 8001472:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK) {
 8001474:	7dfb      	ldrb	r3, [r7, #23]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d104      	bne.n	8001484 <test_buffer_operations+0x34>
        print_cc1201_status(status_byte, "IDLE_MODE");
 800147a:	7dbb      	ldrb	r3, [r7, #22]
 800147c:	495c      	ldr	r1, [pc, #368]	@ (80015f0 <test_buffer_operations+0x1a0>)
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff fbfe 	bl	8000c80 <print_cc1201_status>
    }
    
    // Flush both FIFOs
    CC1201_FlushTxFifo(&status_byte);
 8001484:	f107 0316 	add.w	r3, r7, #22
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff f96c 	bl	8000766 <CC1201_FlushTxFifo>
    print_cc1201_status(status_byte, "FLUSH_TX");
 800148e:	7dbb      	ldrb	r3, [r7, #22]
 8001490:	4958      	ldr	r1, [pc, #352]	@ (80015f4 <test_buffer_operations+0x1a4>)
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff fbf4 	bl	8000c80 <print_cc1201_status>
    CC1201_FlushRxFifo(&status_byte);
 8001498:	f107 0316 	add.w	r3, r7, #22
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff f955 	bl	800074c <CC1201_FlushRxFifo>
    print_cc1201_status(status_byte, "FLUSH_RX");
 80014a2:	7dbb      	ldrb	r3, [r7, #22]
 80014a4:	4954      	ldr	r1, [pc, #336]	@ (80015f8 <test_buffer_operations+0x1a8>)
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fbea 	bl	8000c80 <print_cc1201_status>
    
    // Test TX FIFO write operations
    printf("\n2. Testing TX FIFO Write Operations:\n\r");
 80014ac:	4853      	ldr	r0, [pc, #332]	@ (80015fc <test_buffer_operations+0x1ac>)
 80014ae:	f007 fa23 	bl	80088f8 <iprintf>
    
    // Test pattern 1: Sequential bytes
    uint8_t test_data_1[] = {0x01, 0x02, 0x03, 0x04, 0x05};
 80014b2:	4a53      	ldr	r2, [pc, #332]	@ (8001600 <test_buffer_operations+0x1b0>)
 80014b4:	f107 0310 	add.w	r3, r7, #16
 80014b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014bc:	6018      	str	r0, [r3, #0]
 80014be:	3304      	adds	r3, #4
 80014c0:	7019      	strb	r1, [r3, #0]
    status = CC1201_WriteTxFifo(test_data_1, sizeof(test_data_1), &status_byte);
 80014c2:	f107 0216 	add.w	r2, r7, #22
 80014c6:	f107 0310 	add.w	r3, r7, #16
 80014ca:	2105      	movs	r1, #5
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fa29 	bl	8000924 <CC1201_WriteTxFifo>
 80014d2:	4603      	mov	r3, r0
 80014d4:	75fb      	strb	r3, [r7, #23]
    printf("  Write 5 bytes [01,02,03,04,05]: HAL=%d ", status);
 80014d6:	7dfb      	ldrb	r3, [r7, #23]
 80014d8:	4619      	mov	r1, r3
 80014da:	484a      	ldr	r0, [pc, #296]	@ (8001604 <test_buffer_operations+0x1b4>)
 80014dc:	f007 fa0c 	bl	80088f8 <iprintf>
    if (status == HAL_OK) {
 80014e0:	7dfb      	ldrb	r3, [r7, #23]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d10f      	bne.n	8001506 <test_buffer_operations+0xb6>
        print_cc1201_status(status_byte, "TX_WRITE");
 80014e6:	7dbb      	ldrb	r3, [r7, #22]
 80014e8:	4947      	ldr	r1, [pc, #284]	@ (8001608 <test_buffer_operations+0x1b8>)
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff fbc8 	bl	8000c80 <print_cc1201_status>
        
        // Check TX FIFO count
        uint8_t tx_count = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	70bb      	strb	r3, [r7, #2]
        CC1201_GetNumTXBytes(&tx_count);
 80014f4:	1cbb      	adds	r3, r7, #2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fa06 	bl	8000908 <CC1201_GetNumTXBytes>
        printf("  TX FIFO count: %d bytes\n\r", tx_count);
 80014fc:	78bb      	ldrb	r3, [r7, #2]
 80014fe:	4619      	mov	r1, r3
 8001500:	4842      	ldr	r0, [pc, #264]	@ (800160c <test_buffer_operations+0x1bc>)
 8001502:	f007 f9f9 	bl	80088f8 <iprintf>
    }
    
    // Test single byte write
    printf("\n3. Testing Single Byte Write:\n\r");
 8001506:	4842      	ldr	r0, [pc, #264]	@ (8001610 <test_buffer_operations+0x1c0>)
 8001508:	f007 f9f6 	bl	80088f8 <iprintf>
    status = CC1201_WriteSingleTxFifo(0xAA, &status_byte);
 800150c:	f107 0316 	add.w	r3, r7, #22
 8001510:	4619      	mov	r1, r3
 8001512:	20aa      	movs	r0, #170	@ 0xaa
 8001514:	f7ff fb6e 	bl	8000bf4 <CC1201_WriteSingleTxFifo>
 8001518:	4603      	mov	r3, r0
 800151a:	75fb      	strb	r3, [r7, #23]
    printf("  Write single byte [AA]: HAL=%d ", status);
 800151c:	7dfb      	ldrb	r3, [r7, #23]
 800151e:	4619      	mov	r1, r3
 8001520:	483c      	ldr	r0, [pc, #240]	@ (8001614 <test_buffer_operations+0x1c4>)
 8001522:	f007 f9e9 	bl	80088f8 <iprintf>
    if (status == HAL_OK) {
 8001526:	7dfb      	ldrb	r3, [r7, #23]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d10f      	bne.n	800154c <test_buffer_operations+0xfc>
        print_cc1201_status(status_byte, "SINGLE_WRITE");
 800152c:	7dbb      	ldrb	r3, [r7, #22]
 800152e:	493a      	ldr	r1, [pc, #232]	@ (8001618 <test_buffer_operations+0x1c8>)
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff fba5 	bl	8000c80 <print_cc1201_status>
        
        uint8_t tx_count = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	707b      	strb	r3, [r7, #1]
        CC1201_GetNumTXBytes(&tx_count);
 800153a:	1c7b      	adds	r3, r7, #1
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff f9e3 	bl	8000908 <CC1201_GetNumTXBytes>
        printf("  TX FIFO count after single write: %d bytes\n\r", tx_count);
 8001542:	787b      	ldrb	r3, [r7, #1]
 8001544:	4619      	mov	r1, r3
 8001546:	4835      	ldr	r0, [pc, #212]	@ (800161c <test_buffer_operations+0x1cc>)
 8001548:	f007 f9d6 	bl	80088f8 <iprintf>
    }
    
    // Test RX FIFO read (should be empty)
    printf("\n4. Testing RX FIFO Read (should be empty):\n\r");
 800154c:	4834      	ldr	r0, [pc, #208]	@ (8001620 <test_buffer_operations+0x1d0>)
 800154e:	f007 f9d3 	bl	80088f8 <iprintf>
    uint8_t rx_buffer[10] = {0};
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	811a      	strh	r2, [r3, #8]
    status = CC1201_ReadRxFifo(rx_buffer, 1, &status_byte);
 800155c:	f107 0216 	add.w	r2, r7, #22
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	2101      	movs	r1, #1
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fa87 	bl	8000a78 <CC1201_ReadRxFifo>
 800156a:	4603      	mov	r3, r0
 800156c:	75fb      	strb	r3, [r7, #23]
    printf("  Read 1 byte from RX FIFO: HAL=%d ", status);
 800156e:	7dfb      	ldrb	r3, [r7, #23]
 8001570:	4619      	mov	r1, r3
 8001572:	482c      	ldr	r0, [pc, #176]	@ (8001624 <test_buffer_operations+0x1d4>)
 8001574:	f007 f9c0 	bl	80088f8 <iprintf>
    if (status == HAL_OK) {
 8001578:	7dfb      	ldrb	r3, [r7, #23]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d114      	bne.n	80015a8 <test_buffer_operations+0x158>
        print_cc1201_status(status_byte, "RX_READ");
 800157e:	7dbb      	ldrb	r3, [r7, #22]
 8001580:	4929      	ldr	r1, [pc, #164]	@ (8001628 <test_buffer_operations+0x1d8>)
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff fb7c 	bl	8000c80 <print_cc1201_status>
        printf("  Read data: 0x%02X\n\r", rx_buffer[0]);
 8001588:	793b      	ldrb	r3, [r7, #4]
 800158a:	4619      	mov	r1, r3
 800158c:	4827      	ldr	r0, [pc, #156]	@ (800162c <test_buffer_operations+0x1dc>)
 800158e:	f007 f9b3 	bl	80088f8 <iprintf>
        
        uint8_t rx_count = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	703b      	strb	r3, [r7, #0]
        CC1201_GetNumRXBytes(&rx_count);
 8001596:	463b      	mov	r3, r7
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff f9a7 	bl	80008ec <CC1201_GetNumRXBytes>
        printf("  RX FIFO count: %d bytes\n\r", rx_count);
 800159e:	783b      	ldrb	r3, [r7, #0]
 80015a0:	4619      	mov	r1, r3
 80015a2:	4823      	ldr	r0, [pc, #140]	@ (8001630 <test_buffer_operations+0x1e0>)
 80015a4:	f007 f9a8 	bl	80088f8 <iprintf>
    }
    
    // Clean up - flush TX FIFO
    printf("\n5. Cleanup - Flushing TX FIFO:\n\r");
 80015a8:	4822      	ldr	r0, [pc, #136]	@ (8001634 <test_buffer_operations+0x1e4>)
 80015aa:	f007 f9a5 	bl	80088f8 <iprintf>
    CC1201_FlushTxFifo(&status_byte);
 80015ae:	f107 0316 	add.w	r3, r7, #22
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff f8d7 	bl	8000766 <CC1201_FlushTxFifo>
    print_cc1201_status(status_byte, "CLEANUP_FLUSH");
 80015b8:	7dbb      	ldrb	r3, [r7, #22]
 80015ba:	491f      	ldr	r1, [pc, #124]	@ (8001638 <test_buffer_operations+0x1e8>)
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fb5f 	bl	8000c80 <print_cc1201_status>
    
    uint8_t final_tx_count = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	70fb      	strb	r3, [r7, #3]
    CC1201_GetNumTXBytes(&final_tx_count);
 80015c6:	1cfb      	adds	r3, r7, #3
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff f99d 	bl	8000908 <CC1201_GetNumTXBytes>
    printf("  Final TX FIFO count: %d bytes\n\r", final_tx_count);
 80015ce:	78fb      	ldrb	r3, [r7, #3]
 80015d0:	4619      	mov	r1, r3
 80015d2:	481a      	ldr	r0, [pc, #104]	@ (800163c <test_buffer_operations+0x1ec>)
 80015d4:	f007 f990 	bl	80088f8 <iprintf>
    
    printf("=== BUFFER TEST COMPLETE ===\n\r");
 80015d8:	4819      	ldr	r0, [pc, #100]	@ (8001640 <test_buffer_operations+0x1f0>)
 80015da:	f007 f98d 	bl	80088f8 <iprintf>
}
 80015de:	bf00      	nop
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	0800a174 	.word	0x0800a174
 80015ec:	0800a1a4 	.word	0x0800a1a4
 80015f0:	0800a1c8 	.word	0x0800a1c8
 80015f4:	0800a1d4 	.word	0x0800a1d4
 80015f8:	0800a1e0 	.word	0x0800a1e0
 80015fc:	0800a1ec 	.word	0x0800a1ec
 8001600:	0800a3f8 	.word	0x0800a3f8
 8001604:	0800a214 	.word	0x0800a214
 8001608:	0800a240 	.word	0x0800a240
 800160c:	0800a24c 	.word	0x0800a24c
 8001610:	0800a268 	.word	0x0800a268
 8001614:	0800a28c 	.word	0x0800a28c
 8001618:	0800a2b0 	.word	0x0800a2b0
 800161c:	0800a2c0 	.word	0x0800a2c0
 8001620:	0800a2f0 	.word	0x0800a2f0
 8001624:	0800a320 	.word	0x0800a320
 8001628:	0800a344 	.word	0x0800a344
 800162c:	0800a34c 	.word	0x0800a34c
 8001630:	0800a364 	.word	0x0800a364
 8001634:	0800a380 	.word	0x0800a380
 8001638:	0800a3a4 	.word	0x0800a3a4
 800163c:	0800a3b4 	.word	0x0800a3b4
 8001640:	0800a3d8 	.word	0x0800a3d8

08001644 <test_state_changes>:

// Test 2: State Change Operations
void test_state_changes(void) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
    printf("\n=== TEST 2: STATE CHANGE OPERATIONS ===\n\r");
 800164a:	486c      	ldr	r0, [pc, #432]	@ (80017fc <test_state_changes+0x1b8>)
 800164c:	f007 f954 	bl	80088f8 <iprintf>
    
    HAL_StatusTypeDef status;
    uint8_t status_byte = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	71bb      	strb	r3, [r7, #6]
    uint8_t marc_state = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	717b      	strb	r3, [r7, #5]
    
    // Test 1: IDLE State
    printf("1. Testing IDLE State:\n\r");
 8001658:	4869      	ldr	r0, [pc, #420]	@ (8001800 <test_state_changes+0x1bc>)
 800165a:	f007 f94d 	bl	80088f8 <iprintf>
    status = CC1201_EnterIdleMode(&status_byte);
 800165e:	1dbb      	adds	r3, r7, #6
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff f866 	bl	8000732 <CC1201_EnterIdleMode>
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
    printf("  Enter IDLE: HAL=%d ", status);
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	4619      	mov	r1, r3
 800166e:	4865      	ldr	r0, [pc, #404]	@ (8001804 <test_state_changes+0x1c0>)
 8001670:	f007 f942 	bl	80088f8 <iprintf>
    if (status == HAL_OK) {
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d10d      	bne.n	8001696 <test_state_changes+0x52>
        print_cc1201_status(status_byte, "IDLE");
 800167a:	79bb      	ldrb	r3, [r7, #6]
 800167c:	4962      	ldr	r1, [pc, #392]	@ (8001808 <test_state_changes+0x1c4>)
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fafe 	bl	8000c80 <print_cc1201_status>
        CC1201_ReadMARCState(&marc_state);
 8001684:	1d7b      	adds	r3, r7, #5
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff f922 	bl	80008d0 <CC1201_ReadMARCState>
        printf("  MARC State: 0x%02X\n\r", marc_state);
 800168c:	797b      	ldrb	r3, [r7, #5]
 800168e:	4619      	mov	r1, r3
 8001690:	485e      	ldr	r0, [pc, #376]	@ (800180c <test_state_changes+0x1c8>)
 8001692:	f007 f931 	bl	80088f8 <iprintf>
    }
    HAL_Delay(50);
 8001696:	2032      	movs	r0, #50	@ 0x32
 8001698:	f001 f9e8 	bl	8002a6c <HAL_Delay>
    
    // Test 2: RX State
    printf("\n2. Testing RX State:\n\r");
 800169c:	485c      	ldr	r0, [pc, #368]	@ (8001810 <test_state_changes+0x1cc>)
 800169e:	f007 f92b 	bl	80088f8 <iprintf>
    status = CC1201_EnterRxMode(&status_byte);
 80016a2:	1dbb      	adds	r3, r7, #6
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff f82a 	bl	80006fe <CC1201_EnterRxMode>
 80016aa:	4603      	mov	r3, r0
 80016ac:	71fb      	strb	r3, [r7, #7]
    printf("  Enter RX: HAL=%d ", status);
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	4619      	mov	r1, r3
 80016b2:	4858      	ldr	r0, [pc, #352]	@ (8001814 <test_state_changes+0x1d0>)
 80016b4:	f007 f920 	bl	80088f8 <iprintf>
    if (status == HAL_OK) {
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d110      	bne.n	80016e0 <test_state_changes+0x9c>
        print_cc1201_status(status_byte, "RX");
 80016be:	79bb      	ldrb	r3, [r7, #6]
 80016c0:	4955      	ldr	r1, [pc, #340]	@ (8001818 <test_state_changes+0x1d4>)
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fadc 	bl	8000c80 <print_cc1201_status>
        HAL_Delay(100); // Stay in RX for a moment
 80016c8:	2064      	movs	r0, #100	@ 0x64
 80016ca:	f001 f9cf 	bl	8002a6c <HAL_Delay>
        CC1201_ReadMARCState(&marc_state);
 80016ce:	1d7b      	adds	r3, r7, #5
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff f8fd 	bl	80008d0 <CC1201_ReadMARCState>
        printf("  MARC State after delay: 0x%02X\n\r", marc_state);
 80016d6:	797b      	ldrb	r3, [r7, #5]
 80016d8:	4619      	mov	r1, r3
 80016da:	4850      	ldr	r0, [pc, #320]	@ (800181c <test_state_changes+0x1d8>)
 80016dc:	f007 f90c 	bl	80088f8 <iprintf>
    }
    
    // Test 3: Return to IDLE from RX
    printf("\n3. Testing IDLE from RX:\n\r");
 80016e0:	484f      	ldr	r0, [pc, #316]	@ (8001820 <test_state_changes+0x1dc>)
 80016e2:	f007 f909 	bl	80088f8 <iprintf>
    status = CC1201_EnterIdleMode(&status_byte);
 80016e6:	1dbb      	adds	r3, r7, #6
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff f822 	bl	8000732 <CC1201_EnterIdleMode>
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
    printf("  RX->IDLE: HAL=%d ", status);
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	4619      	mov	r1, r3
 80016f6:	484b      	ldr	r0, [pc, #300]	@ (8001824 <test_state_changes+0x1e0>)
 80016f8:	f007 f8fe 	bl	80088f8 <iprintf>
    if (status == HAL_OK) {
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d104      	bne.n	800170c <test_state_changes+0xc8>
        print_cc1201_status(status_byte, "RX_TO_IDLE");
 8001702:	79bb      	ldrb	r3, [r7, #6]
 8001704:	4948      	ldr	r1, [pc, #288]	@ (8001828 <test_state_changes+0x1e4>)
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff faba 	bl	8000c80 <print_cc1201_status>
    }
    HAL_Delay(50);
 800170c:	2032      	movs	r0, #50	@ 0x32
 800170e:	f001 f9ad 	bl	8002a6c <HAL_Delay>
    
    // Test 4: TX State
    printf("\n4. Testing TX State:\n\r");
 8001712:	4846      	ldr	r0, [pc, #280]	@ (800182c <test_state_changes+0x1e8>)
 8001714:	f007 f8f0 	bl	80088f8 <iprintf>
    status = CC1201_EnterTxMode(&status_byte);
 8001718:	1dbb      	adds	r3, r7, #6
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe fffc 	bl	8000718 <CC1201_EnterTxMode>
 8001720:	4603      	mov	r3, r0
 8001722:	71fb      	strb	r3, [r7, #7]
    printf("  Enter TX: HAL=%d ", status);
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	4619      	mov	r1, r3
 8001728:	4841      	ldr	r0, [pc, #260]	@ (8001830 <test_state_changes+0x1ec>)
 800172a:	f007 f8e5 	bl	80088f8 <iprintf>
    if (status == HAL_OK) {
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d110      	bne.n	8001756 <test_state_changes+0x112>
        print_cc1201_status(status_byte, "TX");
 8001734:	79bb      	ldrb	r3, [r7, #6]
 8001736:	493f      	ldr	r1, [pc, #252]	@ (8001834 <test_state_changes+0x1f0>)
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff faa1 	bl	8000c80 <print_cc1201_status>
        HAL_Delay(50); // Brief TX state
 800173e:	2032      	movs	r0, #50	@ 0x32
 8001740:	f001 f994 	bl	8002a6c <HAL_Delay>
        CC1201_ReadMARCState(&marc_state);
 8001744:	1d7b      	adds	r3, r7, #5
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff f8c2 	bl	80008d0 <CC1201_ReadMARCState>
        printf("  MARC State in TX: 0x%02X\n\r", marc_state);
 800174c:	797b      	ldrb	r3, [r7, #5]
 800174e:	4619      	mov	r1, r3
 8001750:	4839      	ldr	r0, [pc, #228]	@ (8001838 <test_state_changes+0x1f4>)
 8001752:	f007 f8d1 	bl	80088f8 <iprintf>
    }
    
    // Test 5: Return to IDLE from TX
    printf("\n5. Testing IDLE from TX:\n\r");
 8001756:	4839      	ldr	r0, [pc, #228]	@ (800183c <test_state_changes+0x1f8>)
 8001758:	f007 f8ce 	bl	80088f8 <iprintf>
    status = CC1201_EnterIdleMode(&status_byte);
 800175c:	1dbb      	adds	r3, r7, #6
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe ffe7 	bl	8000732 <CC1201_EnterIdleMode>
 8001764:	4603      	mov	r3, r0
 8001766:	71fb      	strb	r3, [r7, #7]
    printf("  TX->IDLE: HAL=%d ", status);
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	4619      	mov	r1, r3
 800176c:	4834      	ldr	r0, [pc, #208]	@ (8001840 <test_state_changes+0x1fc>)
 800176e:	f007 f8c3 	bl	80088f8 <iprintf>
    if (status == HAL_OK) {
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d104      	bne.n	8001782 <test_state_changes+0x13e>
        print_cc1201_status(status_byte, "TX_TO_IDLE");
 8001778:	79bb      	ldrb	r3, [r7, #6]
 800177a:	4932      	ldr	r1, [pc, #200]	@ (8001844 <test_state_changes+0x200>)
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff fa7f 	bl	8000c80 <print_cc1201_status>
    }
    
    // Test 6: Fast TX On (FSTXON state)
    printf("\n6. Testing Fast TX On (FSTXON):\n\r");
 8001782:	4831      	ldr	r0, [pc, #196]	@ (8001848 <test_state_changes+0x204>)
 8001784:	f007 f8b8 	bl	80088f8 <iprintf>
    status = CC1201_FastTxOn(&status_byte);
 8001788:	1dbb      	adds	r3, r7, #6
 800178a:	4618      	mov	r0, r3
 800178c:	f7fe ffaa 	bl	80006e4 <CC1201_FastTxOn>
 8001790:	4603      	mov	r3, r0
 8001792:	71fb      	strb	r3, [r7, #7]
    printf("  Fast TX On: HAL=%d ", status);
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	4619      	mov	r1, r3
 8001798:	482c      	ldr	r0, [pc, #176]	@ (800184c <test_state_changes+0x208>)
 800179a:	f007 f8ad 	bl	80088f8 <iprintf>
    if (status == HAL_OK) {
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d10d      	bne.n	80017c0 <test_state_changes+0x17c>
        print_cc1201_status(status_byte, "FSTXON");
 80017a4:	79bb      	ldrb	r3, [r7, #6]
 80017a6:	492a      	ldr	r1, [pc, #168]	@ (8001850 <test_state_changes+0x20c>)
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fa69 	bl	8000c80 <print_cc1201_status>
        CC1201_ReadMARCState(&marc_state);
 80017ae:	1d7b      	adds	r3, r7, #5
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff f88d 	bl	80008d0 <CC1201_ReadMARCState>
        printf("  MARC State in FSTXON: 0x%02X\n\r", marc_state);
 80017b6:	797b      	ldrb	r3, [r7, #5]
 80017b8:	4619      	mov	r1, r3
 80017ba:	4826      	ldr	r0, [pc, #152]	@ (8001854 <test_state_changes+0x210>)
 80017bc:	f007 f89c 	bl	80088f8 <iprintf>
    }
    
    // Return to IDLE
    printf("\n7. Final return to IDLE:\n\r");
 80017c0:	4825      	ldr	r0, [pc, #148]	@ (8001858 <test_state_changes+0x214>)
 80017c2:	f007 f899 	bl	80088f8 <iprintf>
    status = CC1201_EnterIdleMode(&status_byte);
 80017c6:	1dbb      	adds	r3, r7, #6
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7fe ffb2 	bl	8000732 <CC1201_EnterIdleMode>
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
    printf("  Final IDLE: HAL=%d ", status);
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	4619      	mov	r1, r3
 80017d6:	4821      	ldr	r0, [pc, #132]	@ (800185c <test_state_changes+0x218>)
 80017d8:	f007 f88e 	bl	80088f8 <iprintf>
    if (status == HAL_OK) {
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d104      	bne.n	80017ec <test_state_changes+0x1a8>
        print_cc1201_status(status_byte, "FINAL_IDLE");
 80017e2:	79bb      	ldrb	r3, [r7, #6]
 80017e4:	491e      	ldr	r1, [pc, #120]	@ (8001860 <test_state_changes+0x21c>)
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff fa4a 	bl	8000c80 <print_cc1201_status>
    }
    
    printf("=== STATE CHANGE TEST COMPLETE ===\n\r");
 80017ec:	481d      	ldr	r0, [pc, #116]	@ (8001864 <test_state_changes+0x220>)
 80017ee:	f007 f883 	bl	80088f8 <iprintf>
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	0800a400 	.word	0x0800a400
 8001800:	0800a42c 	.word	0x0800a42c
 8001804:	0800a448 	.word	0x0800a448
 8001808:	0800a460 	.word	0x0800a460
 800180c:	0800a468 	.word	0x0800a468
 8001810:	0800a480 	.word	0x0800a480
 8001814:	0800a498 	.word	0x0800a498
 8001818:	0800a4ac 	.word	0x0800a4ac
 800181c:	0800a4b0 	.word	0x0800a4b0
 8001820:	0800a4d4 	.word	0x0800a4d4
 8001824:	0800a4f0 	.word	0x0800a4f0
 8001828:	0800a504 	.word	0x0800a504
 800182c:	0800a510 	.word	0x0800a510
 8001830:	0800a528 	.word	0x0800a528
 8001834:	0800a53c 	.word	0x0800a53c
 8001838:	0800a540 	.word	0x0800a540
 800183c:	0800a560 	.word	0x0800a560
 8001840:	0800a57c 	.word	0x0800a57c
 8001844:	0800a590 	.word	0x0800a590
 8001848:	0800a59c 	.word	0x0800a59c
 800184c:	0800a5c0 	.word	0x0800a5c0
 8001850:	0800a5d8 	.word	0x0800a5d8
 8001854:	0800a5e0 	.word	0x0800a5e0
 8001858:	0800a604 	.word	0x0800a604
 800185c:	0800a620 	.word	0x0800a620
 8001860:	0800a638 	.word	0x0800a638
 8001864:	0800a644 	.word	0x0800a644

08001868 <test_individual_functions>:

// Test 3: Individual Function Tests
void test_individual_functions(void) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
    printf("\n=== TEST 3: INDIVIDUAL FUNCTION TESTS ===\n\r");
 800186e:	486b      	ldr	r0, [pc, #428]	@ (8001a1c <test_individual_functions+0x1b4>)
 8001870:	f007 f842 	bl	80088f8 <iprintf>
    
    HAL_StatusTypeDef status;
    uint8_t data = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	713b      	strb	r3, [r7, #4]
    uint8_t status_byte = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	70fb      	strb	r3, [r7, #3]
    
    // Test CC1201_ReadStatus (using a safe register like IOCFG2)
    printf("1. Testing CC1201_ReadStatus():\n\r");
 800187c:	4868      	ldr	r0, [pc, #416]	@ (8001a20 <test_individual_functions+0x1b8>)
 800187e:	f007 f83b 	bl	80088f8 <iprintf>
    status = CC1201_ReadStatus(0x01, &data); // IOCFG2 register
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	4619      	mov	r1, r3
 8001886:	2001      	movs	r0, #1
 8001888:	f7fe ff96 	bl	80007b8 <CC1201_ReadStatus>
 800188c:	4603      	mov	r3, r0
 800188e:	71fb      	strb	r3, [r7, #7]
    printf("  Read IOCFG2 (0x01): HAL=%d, Data=0x%02X\n\r", status, data);
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	793a      	ldrb	r2, [r7, #4]
 8001894:	4619      	mov	r1, r3
 8001896:	4863      	ldr	r0, [pc, #396]	@ (8001a24 <test_individual_functions+0x1bc>)
 8001898:	f007 f82e 	bl	80088f8 <iprintf>
    if (status == HAL_OK) {
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d103      	bne.n	80018aa <test_individual_functions+0x42>
        printf("  ✓ CC1201_ReadStatus() WORKING\n\r");
 80018a2:	4861      	ldr	r0, [pc, #388]	@ (8001a28 <test_individual_functions+0x1c0>)
 80018a4:	f007 f828 	bl	80088f8 <iprintf>
 80018a8:	e002      	b.n	80018b0 <test_individual_functions+0x48>
    } else {
        printf("  ✗ CC1201_ReadStatus() FAILED\n\r");
 80018aa:	4860      	ldr	r0, [pc, #384]	@ (8001a2c <test_individual_functions+0x1c4>)
 80018ac:	f007 f824 	bl	80088f8 <iprintf>
    }
    
    // Test CC1201_WriteRegister and verify with read
    printf("\n2. Testing CC1201_WriteRegister():\n\r");
 80018b0:	485f      	ldr	r0, [pc, #380]	@ (8001a30 <test_individual_functions+0x1c8>)
 80018b2:	f007 f821 	bl	80088f8 <iprintf>
    uint8_t original_value = data; // Store original value
 80018b6:	793b      	ldrb	r3, [r7, #4]
 80018b8:	71bb      	strb	r3, [r7, #6]
    uint8_t test_value = 0x55; // Test pattern
 80018ba:	2355      	movs	r3, #85	@ 0x55
 80018bc:	717b      	strb	r3, [r7, #5]
    
    status = CC1201_WriteRegister(0x01, test_value);
 80018be:	797b      	ldrb	r3, [r7, #5]
 80018c0:	4619      	mov	r1, r3
 80018c2:	2001      	movs	r0, #1
 80018c4:	f7fe ffc8 	bl	8000858 <CC1201_WriteRegister>
 80018c8:	4603      	mov	r3, r0
 80018ca:	71fb      	strb	r3, [r7, #7]
    printf("  Write IOCFG2 (0x55): HAL=%d\n\r", status);
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	4619      	mov	r1, r3
 80018d0:	4858      	ldr	r0, [pc, #352]	@ (8001a34 <test_individual_functions+0x1cc>)
 80018d2:	f007 f811 	bl	80088f8 <iprintf>
    
    if (status == HAL_OK) {
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d125      	bne.n	8001928 <test_individual_functions+0xc0>
        // Read back to verify
        status = CC1201_ReadStatus(0x01, &data);
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	4619      	mov	r1, r3
 80018e0:	2001      	movs	r0, #1
 80018e2:	f7fe ff69 	bl	80007b8 <CC1201_ReadStatus>
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]
        printf("  Read back: HAL=%d, Data=0x%02X\n\r", status, data);
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	793a      	ldrb	r2, [r7, #4]
 80018ee:	4619      	mov	r1, r3
 80018f0:	4851      	ldr	r0, [pc, #324]	@ (8001a38 <test_individual_functions+0x1d0>)
 80018f2:	f007 f801 	bl	80088f8 <iprintf>
        
        if (status == HAL_OK && data == test_value) {
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d107      	bne.n	800190c <test_individual_functions+0xa4>
 80018fc:	793b      	ldrb	r3, [r7, #4]
 80018fe:	797a      	ldrb	r2, [r7, #5]
 8001900:	429a      	cmp	r2, r3
 8001902:	d103      	bne.n	800190c <test_individual_functions+0xa4>
            printf("  ✓ CC1201_WriteRegister() WORKING (Write/Read verified)\n\r");
 8001904:	484d      	ldr	r0, [pc, #308]	@ (8001a3c <test_individual_functions+0x1d4>)
 8001906:	f006 fff7 	bl	80088f8 <iprintf>
 800190a:	e002      	b.n	8001912 <test_individual_functions+0xaa>
        } else {
            printf("  ✗ CC1201_WriteRegister() FAILED (Data mismatch)\n\r");
 800190c:	484c      	ldr	r0, [pc, #304]	@ (8001a40 <test_individual_functions+0x1d8>)
 800190e:	f006 fff3 	bl	80088f8 <iprintf>
        }
        
        // Restore original value
        CC1201_WriteRegister(0x01, original_value);
 8001912:	79bb      	ldrb	r3, [r7, #6]
 8001914:	4619      	mov	r1, r3
 8001916:	2001      	movs	r0, #1
 8001918:	f7fe ff9e 	bl	8000858 <CC1201_WriteRegister>
        printf("  Restored original value: 0x%02X\n\r", original_value);
 800191c:	79bb      	ldrb	r3, [r7, #6]
 800191e:	4619      	mov	r1, r3
 8001920:	4848      	ldr	r0, [pc, #288]	@ (8001a44 <test_individual_functions+0x1dc>)
 8001922:	f006 ffe9 	bl	80088f8 <iprintf>
 8001926:	e002      	b.n	800192e <test_individual_functions+0xc6>
    } else {
        printf("  ✗ CC1201_WriteRegister() FAILED\n\r");
 8001928:	4847      	ldr	r0, [pc, #284]	@ (8001a48 <test_individual_functions+0x1e0>)
 800192a:	f006 ffe5 	bl	80088f8 <iprintf>
    }
    
    // Test CC1201_SendStrobe (using NOP)
    printf("\n3. Testing CC1201_SendStrobe():\n\r");
 800192e:	4847      	ldr	r0, [pc, #284]	@ (8001a4c <test_individual_functions+0x1e4>)
 8001930:	f006 ffe2 	bl	80088f8 <iprintf>
    status = CC1201_SendStrobe(0x3D, &status_byte); // NOP strobe
 8001934:	1cfb      	adds	r3, r7, #3
 8001936:	4619      	mov	r1, r3
 8001938:	203d      	movs	r0, #61	@ 0x3d
 800193a:	f7ff f96d 	bl	8000c18 <CC1201_SendStrobe>
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
    printf("  Send NOP strobe: HAL=%d ", status);
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	4619      	mov	r1, r3
 8001946:	4842      	ldr	r0, [pc, #264]	@ (8001a50 <test_individual_functions+0x1e8>)
 8001948:	f006 ffd6 	bl	80088f8 <iprintf>
    if (status == HAL_OK) {
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d108      	bne.n	8001964 <test_individual_functions+0xfc>
        print_cc1201_status(status_byte, "STROBE_NOP");
 8001952:	78fb      	ldrb	r3, [r7, #3]
 8001954:	493f      	ldr	r1, [pc, #252]	@ (8001a54 <test_individual_functions+0x1ec>)
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff f992 	bl	8000c80 <print_cc1201_status>
        printf("  ✓ CC1201_SendStrobe() WORKING\n\r");
 800195c:	483e      	ldr	r0, [pc, #248]	@ (8001a58 <test_individual_functions+0x1f0>)
 800195e:	f006 ffcb 	bl	80088f8 <iprintf>
 8001962:	e002      	b.n	800196a <test_individual_functions+0x102>
    } else {
        printf("  ✗ CC1201_SendStrobe() FAILED\n\r");
 8001964:	483d      	ldr	r0, [pc, #244]	@ (8001a5c <test_individual_functions+0x1f4>)
 8001966:	f006 ffc7 	bl	80088f8 <iprintf>
    }
    
    // Test CC1201_ReadMARCState
    printf("\n4. Testing CC1201_ReadMARCState():\n\r");
 800196a:	483d      	ldr	r0, [pc, #244]	@ (8001a60 <test_individual_functions+0x1f8>)
 800196c:	f006 ffc4 	bl	80088f8 <iprintf>
    uint8_t marc_state = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	70bb      	strb	r3, [r7, #2]
    status = CC1201_ReadMARCState(&marc_state);
 8001974:	1cbb      	adds	r3, r7, #2
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe ffaa 	bl	80008d0 <CC1201_ReadMARCState>
 800197c:	4603      	mov	r3, r0
 800197e:	71fb      	strb	r3, [r7, #7]
    printf("  Read MARC State: HAL=%d, State=0x%02X\n\r", status, marc_state);
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	78ba      	ldrb	r2, [r7, #2]
 8001984:	4619      	mov	r1, r3
 8001986:	4837      	ldr	r0, [pc, #220]	@ (8001a64 <test_individual_functions+0x1fc>)
 8001988:	f006 ffb6 	bl	80088f8 <iprintf>
    if (status == HAL_OK) {
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d103      	bne.n	800199a <test_individual_functions+0x132>
        printf("  ✓ CC1201_ReadMARCState() WORKING\n\r");
 8001992:	4835      	ldr	r0, [pc, #212]	@ (8001a68 <test_individual_functions+0x200>)
 8001994:	f006 ffb0 	bl	80088f8 <iprintf>
 8001998:	e002      	b.n	80019a0 <test_individual_functions+0x138>
    } else {
        printf("  ✗ CC1201_ReadMARCState() FAILED\n\r");
 800199a:	4834      	ldr	r0, [pc, #208]	@ (8001a6c <test_individual_functions+0x204>)
 800199c:	f006 ffac 	bl	80088f8 <iprintf>
    }
    
    // Test CC1201_GetNumRXBytes
    printf("\n5. Testing CC1201_GetNumRXBytes():\n\r");
 80019a0:	4833      	ldr	r0, [pc, #204]	@ (8001a70 <test_individual_functions+0x208>)
 80019a2:	f006 ffa9 	bl	80088f8 <iprintf>
    uint8_t rx_bytes = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	707b      	strb	r3, [r7, #1]
    status = CC1201_GetNumRXBytes(&rx_bytes);
 80019aa:	1c7b      	adds	r3, r7, #1
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe ff9d 	bl	80008ec <CC1201_GetNumRXBytes>
 80019b2:	4603      	mov	r3, r0
 80019b4:	71fb      	strb	r3, [r7, #7]
    printf("  Get RX Bytes: HAL=%d, Count=%d\n\r", status, rx_bytes);
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	787a      	ldrb	r2, [r7, #1]
 80019ba:	4619      	mov	r1, r3
 80019bc:	482d      	ldr	r0, [pc, #180]	@ (8001a74 <test_individual_functions+0x20c>)
 80019be:	f006 ff9b 	bl	80088f8 <iprintf>
    if (status == HAL_OK) {
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d103      	bne.n	80019d0 <test_individual_functions+0x168>
        printf("  ✓ CC1201_GetNumRXBytes() WORKING\n\r");
 80019c8:	482b      	ldr	r0, [pc, #172]	@ (8001a78 <test_individual_functions+0x210>)
 80019ca:	f006 ff95 	bl	80088f8 <iprintf>
 80019ce:	e002      	b.n	80019d6 <test_individual_functions+0x16e>
    } else {
        printf("  ✗ CC1201_GetNumRXBytes() FAILED\n\r");
 80019d0:	482a      	ldr	r0, [pc, #168]	@ (8001a7c <test_individual_functions+0x214>)
 80019d2:	f006 ff91 	bl	80088f8 <iprintf>
    }
    
    // Test CC1201_GetNumTXBytes
    printf("\n6. Testing CC1201_GetNumTXBytes():\n\r");
 80019d6:	482a      	ldr	r0, [pc, #168]	@ (8001a80 <test_individual_functions+0x218>)
 80019d8:	f006 ff8e 	bl	80088f8 <iprintf>
    uint8_t tx_bytes = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	703b      	strb	r3, [r7, #0]
    status = CC1201_GetNumTXBytes(&tx_bytes);
 80019e0:	463b      	mov	r3, r7
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7fe ff90 	bl	8000908 <CC1201_GetNumTXBytes>
 80019e8:	4603      	mov	r3, r0
 80019ea:	71fb      	strb	r3, [r7, #7]
    printf("  Get TX Bytes: HAL=%d, Count=%d\n\r", status, tx_bytes);
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	783a      	ldrb	r2, [r7, #0]
 80019f0:	4619      	mov	r1, r3
 80019f2:	4824      	ldr	r0, [pc, #144]	@ (8001a84 <test_individual_functions+0x21c>)
 80019f4:	f006 ff80 	bl	80088f8 <iprintf>
    if (status == HAL_OK) {
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d103      	bne.n	8001a06 <test_individual_functions+0x19e>
        printf("  ✓ CC1201_GetNumTXBytes() WORKING\n\r");
 80019fe:	4822      	ldr	r0, [pc, #136]	@ (8001a88 <test_individual_functions+0x220>)
 8001a00:	f006 ff7a 	bl	80088f8 <iprintf>
 8001a04:	e002      	b.n	8001a0c <test_individual_functions+0x1a4>
    } else {
        printf("  ✗ CC1201_GetNumTXBytes() FAILED\n\r");
 8001a06:	4821      	ldr	r0, [pc, #132]	@ (8001a8c <test_individual_functions+0x224>)
 8001a08:	f006 ff76 	bl	80088f8 <iprintf>
    }
    
    printf("=== INDIVIDUAL FUNCTION TEST COMPLETE ===\n\r");
 8001a0c:	4820      	ldr	r0, [pc, #128]	@ (8001a90 <test_individual_functions+0x228>)
 8001a0e:	f006 ff73 	bl	80088f8 <iprintf>
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	0800a66c 	.word	0x0800a66c
 8001a20:	0800a69c 	.word	0x0800a69c
 8001a24:	0800a6c0 	.word	0x0800a6c0
 8001a28:	0800a6ec 	.word	0x0800a6ec
 8001a2c:	0800a710 	.word	0x0800a710
 8001a30:	0800a734 	.word	0x0800a734
 8001a34:	0800a75c 	.word	0x0800a75c
 8001a38:	0800a77c 	.word	0x0800a77c
 8001a3c:	0800a7a0 	.word	0x0800a7a0
 8001a40:	0800a7e0 	.word	0x0800a7e0
 8001a44:	0800a818 	.word	0x0800a818
 8001a48:	0800a83c 	.word	0x0800a83c
 8001a4c:	0800a864 	.word	0x0800a864
 8001a50:	0800a888 	.word	0x0800a888
 8001a54:	0800a8a4 	.word	0x0800a8a4
 8001a58:	0800a8b0 	.word	0x0800a8b0
 8001a5c:	0800a8d4 	.word	0x0800a8d4
 8001a60:	0800a8f8 	.word	0x0800a8f8
 8001a64:	0800a920 	.word	0x0800a920
 8001a68:	0800a94c 	.word	0x0800a94c
 8001a6c:	0800a974 	.word	0x0800a974
 8001a70:	0800a99c 	.word	0x0800a99c
 8001a74:	0800a9c4 	.word	0x0800a9c4
 8001a78:	0800a9e8 	.word	0x0800a9e8
 8001a7c:	0800aa10 	.word	0x0800aa10
 8001a80:	0800aa38 	.word	0x0800aa38
 8001a84:	0800aa60 	.word	0x0800aa60
 8001a88:	0800aa84 	.word	0x0800aa84
 8001a8c:	0800aaac 	.word	0x0800aaac
 8001a90:	0800aad4 	.word	0x0800aad4

08001a94 <run_comprehensive_cc1201_tests>:

// Main test runner
void run_comprehensive_cc1201_tests(void) {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
    printf("\n STARTING COMPREHENSIVE CC1201 TEST SUITE \n\r");
 8001a9a:	4816      	ldr	r0, [pc, #88]	@ (8001af4 <run_comprehensive_cc1201_tests+0x60>)
 8001a9c:	f006 ff2c 	bl	80088f8 <iprintf>
    printf("================================================\n\r");
 8001aa0:	4815      	ldr	r0, [pc, #84]	@ (8001af8 <run_comprehensive_cc1201_tests+0x64>)
 8001aa2:	f006 ff29 	bl	80088f8 <iprintf>
    
    // Run all tests
    test_buffer_operations();
 8001aa6:	f7ff fcd3 	bl	8001450 <test_buffer_operations>
    HAL_Delay(500);
 8001aaa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001aae:	f000 ffdd 	bl	8002a6c <HAL_Delay>
    
    test_state_changes();
 8001ab2:	f7ff fdc7 	bl	8001644 <test_state_changes>
    HAL_Delay(500);
 8001ab6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001aba:	f000 ffd7 	bl	8002a6c <HAL_Delay>
    
    test_individual_functions();
 8001abe:	f7ff fed3 	bl	8001868 <test_individual_functions>
    HAL_Delay(500);
 8001ac2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ac6:	f000 ffd1 	bl	8002a6c <HAL_Delay>
    
    printf("\n COMPREHENSIVE TEST SUITE COMPLETE! \n\r");
 8001aca:	480c      	ldr	r0, [pc, #48]	@ (8001afc <run_comprehensive_cc1201_tests+0x68>)
 8001acc:	f006 ff14 	bl	80088f8 <iprintf>
    printf("=============================================\n\r");
 8001ad0:	480b      	ldr	r0, [pc, #44]	@ (8001b00 <run_comprehensive_cc1201_tests+0x6c>)
 8001ad2:	f006 ff11 	bl	80088f8 <iprintf>
    
    // Final status check
    uint8_t final_status = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	71fb      	strb	r3, [r7, #7]
    CC1201_Nop(&final_status);
 8001ada:	1dfb      	adds	r3, r7, #7
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7fe fe4f 	bl	8000780 <CC1201_Nop>
    print_cc1201_status(final_status, "FINAL_STATUS");
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	4907      	ldr	r1, [pc, #28]	@ (8001b04 <run_comprehensive_cc1201_tests+0x70>)
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff f8ca 	bl	8000c80 <print_cc1201_status>
}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	0800ab00 	.word	0x0800ab00
 8001af8:	0800ab30 	.word	0x0800ab30
 8001afc:	0800ab64 	.word	0x0800ab64
 8001b00:	0800ab8c 	.word	0x0800ab8c
 8001b04:	0800abbc 	.word	0x0800abbc

08001b08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001b0e:	f000 fa0b 	bl	8001f28 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b12:	f000 ff19 	bl	8002948 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b16:	f000 f889 	bl	8001c2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b1a:	f000 f949 	bl	8001db0 <MX_GPIO_Init>
  MX_SPI4_Init();
 8001b1e:	f000 f8f1 	bl	8001d04 <MX_SPI4_Init>
  // Basic hardware initialization completed

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8001b22:	2000      	movs	r0, #0
 8001b24:	f000 fcba 	bl	800249c <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8001b28:	2001      	movs	r0, #1
 8001b2a:	f000 fcb7 	bl	800249c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8001b2e:	2002      	movs	r0, #2
 8001b30:	f000 fcb4 	bl	800249c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8001b34:	2101      	movs	r1, #1
 8001b36:	2000      	movs	r0, #0
 8001b38:	f000 fda4 	bl	8002684 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8001b3c:	4b33      	ldr	r3, [pc, #204]	@ (8001c0c <main+0x104>)
 8001b3e:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b42:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8001b44:	4b31      	ldr	r3, [pc, #196]	@ (8001c0c <main+0x104>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8001b4a:	4b30      	ldr	r3, [pc, #192]	@ (8001c0c <main+0x104>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8001b50:	4b2e      	ldr	r3, [pc, #184]	@ (8001c0c <main+0x104>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8001b56:	4b2d      	ldr	r3, [pc, #180]	@ (8001c0c <main+0x104>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8001b5c:	492b      	ldr	r1, [pc, #172]	@ (8001c0c <main+0x104>)
 8001b5e:	2000      	movs	r0, #0
 8001b60:	f000 fe14 	bl	800278c <BSP_COM_Init>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <main+0x66>
  {
    Error_Handler();
 8001b6a:	f000 fa1d 	bl	8001fa8 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8001b6e:	4828      	ldr	r0, [pc, #160]	@ (8001c10 <main+0x108>)
 8001b70:	f006 fec2 	bl	80088f8 <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8001b74:	2000      	movs	r0, #0
 8001b76:	f000 fd07 	bl	8002588 <BSP_LED_On>
  
  // Now that UART is initialized, start CC1201 testing
  printf("\n=== CC1201 COMMUNICATION SYSTEM STARTUP ===\n\r");
 8001b7a:	4826      	ldr	r0, [pc, #152]	@ (8001c14 <main+0x10c>)
 8001b7c:	f006 febc 	bl	80088f8 <iprintf>

  uint8_t test_status = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef nop_result = CC1201_Nop(&test_status);
 8001b84:	1dbb      	adds	r3, r7, #6
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fdfa 	bl	8000780 <CC1201_Nop>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	71fb      	strb	r3, [r7, #7]
  
  printf("NOP returned - HAL: %d, Status: 0x%02X\n\r", nop_result, test_status);
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	79ba      	ldrb	r2, [r7, #6]
 8001b94:	4619      	mov	r1, r3
 8001b96:	4820      	ldr	r0, [pc, #128]	@ (8001c18 <main+0x110>)
 8001b98:	f006 feae 	bl	80088f8 <iprintf>
  
  if (nop_result == HAL_OK) {
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d109      	bne.n	8001bb6 <main+0xae>
      printf("Basic CC1201 communication working!\n\r");
 8001ba2:	481e      	ldr	r0, [pc, #120]	@ (8001c1c <main+0x114>)
 8001ba4:	f006 fea8 	bl	80088f8 <iprintf>
      BSP_LED_Off(LED_RED);
 8001ba8:	2002      	movs	r0, #2
 8001baa:	f000 fd17 	bl	80025dc <BSP_LED_Off>
      BSP_LED_On(LED_GREEN);
 8001bae:	2000      	movs	r0, #0
 8001bb0:	f000 fcea 	bl	8002588 <BSP_LED_On>
 8001bb4:	e008      	b.n	8001bc8 <main+0xc0>
  } else {
      printf("CC1201 communication failed!\n\r");
 8001bb6:	481a      	ldr	r0, [pc, #104]	@ (8001c20 <main+0x118>)
 8001bb8:	f006 fe9e 	bl	80088f8 <iprintf>
      BSP_LED_Off(LED_GREEN);
 8001bbc:	2000      	movs	r0, #0
 8001bbe:	f000 fd0d 	bl	80025dc <BSP_LED_Off>
      BSP_LED_On(LED_RED);
 8001bc2:	2002      	movs	r0, #2
 8001bc4:	f000 fce0 	bl	8002588 <BSP_LED_On>
  }
  
  // Try proper power-up sequence first
  HAL_Delay(1000);
 8001bc8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bcc:	f000 ff4e 	bl	8002a6c <HAL_Delay>
  cc1201_power_up_sequence();
 8001bd0:	f7ff f8e4 	bl	8000d9c <cc1201_power_up_sequence>
  
  // Run comprehensive hardware diagnostic
  HAL_Delay(500);
 8001bd4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001bd8:	f000 ff48 	bl	8002a6c <HAL_Delay>
  comprehensive_cc1201_diagnostic();
 8001bdc:	f7ff f972 	bl	8000ec4 <comprehensive_cc1201_diagnostic>
  
  // Only run functional tests if basic communication works
  if (nop_result == HAL_OK && test_status != 0xFF) {
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d109      	bne.n	8001bfa <main+0xf2>
 8001be6:	79bb      	ldrb	r3, [r7, #6]
 8001be8:	2bff      	cmp	r3, #255	@ 0xff
 8001bea:	d006      	beq.n	8001bfa <main+0xf2>
      HAL_Delay(1000);
 8001bec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bf0:	f000 ff3c 	bl	8002a6c <HAL_Delay>
      run_comprehensive_cc1201_tests();
 8001bf4:	f7ff ff4e 	bl	8001a94 <run_comprehensive_cc1201_tests>
 8001bf8:	e005      	b.n	8001c06 <main+0xfe>
  } else {
      printf("\nSkipping functional tests due to communication issues.\n\r");
 8001bfa:	480a      	ldr	r0, [pc, #40]	@ (8001c24 <main+0x11c>)
 8001bfc:	f006 fe7c 	bl	80088f8 <iprintf>
      printf("Please resolve hardware issues first.\n\r");
 8001c00:	4809      	ldr	r0, [pc, #36]	@ (8001c28 <main+0x120>)
 8001c02:	f006 fe79 	bl	80088f8 <iprintf>
  }

  /* USER CODE END BSP */
    /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c06:	bf00      	nop
 8001c08:	e7fd      	b.n	8001c06 <main+0xfe>
 8001c0a:	bf00      	nop
 8001c0c:	240000a4 	.word	0x240000a4
 8001c10:	0800abcc 	.word	0x0800abcc
 8001c14:	0800abe8 	.word	0x0800abe8
 8001c18:	0800ac18 	.word	0x0800ac18
 8001c1c:	0800ac44 	.word	0x0800ac44
 8001c20:	0800ac6c 	.word	0x0800ac6c
 8001c24:	0800ac8c 	.word	0x0800ac8c
 8001c28:	0800acc8 	.word	0x0800acc8

08001c2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b09c      	sub	sp, #112	@ 0x70
 8001c30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c36:	224c      	movs	r2, #76	@ 0x4c
 8001c38:	2100      	movs	r1, #0
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f006 feb1 	bl	80089a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c40:	1d3b      	adds	r3, r7, #4
 8001c42:	2220      	movs	r2, #32
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f006 feab 	bl	80089a2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001c4c:	2002      	movs	r0, #2
 8001c4e:	f001 fd85 	bl	800375c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c52:	2300      	movs	r3, #0
 8001c54:	603b      	str	r3, [r7, #0]
 8001c56:	4b29      	ldr	r3, [pc, #164]	@ (8001cfc <SystemClock_Config+0xd0>)
 8001c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c5a:	4a28      	ldr	r2, [pc, #160]	@ (8001cfc <SystemClock_Config+0xd0>)
 8001c5c:	f023 0301 	bic.w	r3, r3, #1
 8001c60:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001c62:	4b26      	ldr	r3, [pc, #152]	@ (8001cfc <SystemClock_Config+0xd0>)
 8001c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	603b      	str	r3, [r7, #0]
 8001c6c:	4b24      	ldr	r3, [pc, #144]	@ (8001d00 <SystemClock_Config+0xd4>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001c74:	4a22      	ldr	r2, [pc, #136]	@ (8001d00 <SystemClock_Config+0xd4>)
 8001c76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c7a:	6193      	str	r3, [r2, #24]
 8001c7c:	4b20      	ldr	r3, [pc, #128]	@ (8001d00 <SystemClock_Config+0xd4>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c84:	603b      	str	r3, [r7, #0]
 8001c86:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001c88:	bf00      	nop
 8001c8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001d00 <SystemClock_Config+0xd4>)
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c96:	d1f8      	bne.n	8001c8a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ca0:	2340      	movs	r3, #64	@ 0x40
 8001ca2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ca8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cac:	4618      	mov	r0, r3
 8001cae:	f001 fd8f 	bl	80037d0 <HAL_RCC_OscConfig>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001cb8:	f000 f976 	bl	8001fa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cbc:	233f      	movs	r3, #63	@ 0x3f
 8001cbe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001cd4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cd8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001cde:	1d3b      	adds	r3, r7, #4
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f002 f9ce 	bl	8004084 <HAL_RCC_ClockConfig>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001cee:	f000 f95b 	bl	8001fa8 <Error_Handler>
  }
}
 8001cf2:	bf00      	nop
 8001cf4:	3770      	adds	r7, #112	@ 0x70
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	58000400 	.word	0x58000400
 8001d00:	58024800 	.word	0x58024800

08001d04 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001d08:	4b27      	ldr	r3, [pc, #156]	@ (8001da8 <MX_SPI4_Init+0xa4>)
 8001d0a:	4a28      	ldr	r2, [pc, #160]	@ (8001dac <MX_SPI4_Init+0xa8>)
 8001d0c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001d0e:	4b26      	ldr	r3, [pc, #152]	@ (8001da8 <MX_SPI4_Init+0xa4>)
 8001d10:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001d14:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001d16:	4b24      	ldr	r3, [pc, #144]	@ (8001da8 <MX_SPI4_Init+0xa4>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d1c:	4b22      	ldr	r3, [pc, #136]	@ (8001da8 <MX_SPI4_Init+0xa4>)
 8001d1e:	2207      	movs	r2, #7
 8001d20:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d22:	4b21      	ldr	r3, [pc, #132]	@ (8001da8 <MX_SPI4_Init+0xa4>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d28:	4b1f      	ldr	r3, [pc, #124]	@ (8001da8 <MX_SPI4_Init+0xa4>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001da8 <MX_SPI4_Init+0xa4>)
 8001d30:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001d34:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d36:	4b1c      	ldr	r3, [pc, #112]	@ (8001da8 <MX_SPI4_Init+0xa4>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001da8 <MX_SPI4_Init+0xa4>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d42:	4b19      	ldr	r3, [pc, #100]	@ (8001da8 <MX_SPI4_Init+0xa4>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d48:	4b17      	ldr	r3, [pc, #92]	@ (8001da8 <MX_SPI4_Init+0xa4>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001d4e:	4b16      	ldr	r3, [pc, #88]	@ (8001da8 <MX_SPI4_Init+0xa4>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d54:	4b14      	ldr	r3, [pc, #80]	@ (8001da8 <MX_SPI4_Init+0xa4>)
 8001d56:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d5a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001d5c:	4b12      	ldr	r3, [pc, #72]	@ (8001da8 <MX_SPI4_Init+0xa4>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001d62:	4b11      	ldr	r3, [pc, #68]	@ (8001da8 <MX_SPI4_Init+0xa4>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d68:	4b0f      	ldr	r3, [pc, #60]	@ (8001da8 <MX_SPI4_Init+0xa4>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001da8 <MX_SPI4_Init+0xa4>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001d74:	4b0c      	ldr	r3, [pc, #48]	@ (8001da8 <MX_SPI4_Init+0xa4>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001da8 <MX_SPI4_Init+0xa4>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001d80:	4b09      	ldr	r3, [pc, #36]	@ (8001da8 <MX_SPI4_Init+0xa4>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001d86:	4b08      	ldr	r3, [pc, #32]	@ (8001da8 <MX_SPI4_Init+0xa4>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001d8c:	4b06      	ldr	r3, [pc, #24]	@ (8001da8 <MX_SPI4_Init+0xa4>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001d92:	4805      	ldr	r0, [pc, #20]	@ (8001da8 <MX_SPI4_Init+0xa4>)
 8001d94:	f004 fb2e 	bl	80063f4 <HAL_SPI_Init>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8001d9e:	f000 f903 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	240000b8 	.word	0x240000b8
 8001dac:	40013400 	.word	0x40013400

08001db0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08a      	sub	sp, #40	@ 0x28
 8001db4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db6:	f107 0314 	add.w	r3, r7, #20
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	605a      	str	r2, [r3, #4]
 8001dc0:	609a      	str	r2, [r3, #8]
 8001dc2:	60da      	str	r2, [r3, #12]
 8001dc4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc6:	4b37      	ldr	r3, [pc, #220]	@ (8001ea4 <MX_GPIO_Init+0xf4>)
 8001dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dcc:	4a35      	ldr	r2, [pc, #212]	@ (8001ea4 <MX_GPIO_Init+0xf4>)
 8001dce:	f043 0304 	orr.w	r3, r3, #4
 8001dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dd6:	4b33      	ldr	r3, [pc, #204]	@ (8001ea4 <MX_GPIO_Init+0xf4>)
 8001dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001de4:	4b2f      	ldr	r3, [pc, #188]	@ (8001ea4 <MX_GPIO_Init+0xf4>)
 8001de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dea:	4a2e      	ldr	r2, [pc, #184]	@ (8001ea4 <MX_GPIO_Init+0xf4>)
 8001dec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001df0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001df4:	4b2b      	ldr	r3, [pc, #172]	@ (8001ea4 <MX_GPIO_Init+0xf4>)
 8001df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e02:	4b28      	ldr	r3, [pc, #160]	@ (8001ea4 <MX_GPIO_Init+0xf4>)
 8001e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e08:	4a26      	ldr	r2, [pc, #152]	@ (8001ea4 <MX_GPIO_Init+0xf4>)
 8001e0a:	f043 0310 	orr.w	r3, r3, #16
 8001e0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e12:	4b24      	ldr	r3, [pc, #144]	@ (8001ea4 <MX_GPIO_Init+0xf4>)
 8001e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e18:	f003 0310 	and.w	r3, r3, #16
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e20:	4b20      	ldr	r3, [pc, #128]	@ (8001ea4 <MX_GPIO_Init+0xf4>)
 8001e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e26:	4a1f      	ldr	r2, [pc, #124]	@ (8001ea4 <MX_GPIO_Init+0xf4>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e30:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea4 <MX_GPIO_Init+0xf4>)
 8001e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	607b      	str	r3, [r7, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e3e:	4b19      	ldr	r3, [pc, #100]	@ (8001ea4 <MX_GPIO_Init+0xf4>)
 8001e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e44:	4a17      	ldr	r2, [pc, #92]	@ (8001ea4 <MX_GPIO_Init+0xf4>)
 8001e46:	f043 0308 	orr.w	r3, r3, #8
 8001e4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e4e:	4b15      	ldr	r3, [pc, #84]	@ (8001ea4 <MX_GPIO_Init+0xf4>)
 8001e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e54:	f003 0308 	and.w	r3, r3, #8
 8001e58:	603b      	str	r3, [r7, #0]
 8001e5a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PD5 (CC1201 Interrupt) */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e5c:	2320      	movs	r3, #32
 8001e5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e60:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001e64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e6a:	f107 0314 	add.w	r3, r7, #20
 8001e6e:	4619      	mov	r1, r3
 8001e70:	480d      	ldr	r0, [pc, #52]	@ (8001ea8 <MX_GPIO_Init+0xf8>)
 8001e72:	f001 fa5d 	bl	8003330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 (CC1201 Reset) */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e76:	2310      	movs	r3, #16
 8001e78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e82:	2300      	movs	r3, #0
 8001e84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e86:	f107 0314 	add.w	r3, r7, #20
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4806      	ldr	r0, [pc, #24]	@ (8001ea8 <MX_GPIO_Init+0xf8>)
 8001e8e:	f001 fa4f 	bl	8003330 <HAL_GPIO_Init>
  
  // Set reset pin HIGH (inactive) by default
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8001e92:	2201      	movs	r2, #1
 8001e94:	2110      	movs	r1, #16
 8001e96:	4804      	ldr	r0, [pc, #16]	@ (8001ea8 <MX_GPIO_Init+0xf8>)
 8001e98:	f001 fc12 	bl	80036c0 <HAL_GPIO_WritePin>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e9c:	bf00      	nop
 8001e9e:	3728      	adds	r7, #40	@ 0x28
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	58024400 	.word	0x58024400
 8001ea8:	58020c00 	.word	0x58020c00

08001eac <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_5)
 8001eb6:	88fb      	ldrh	r3, [r7, #6]
 8001eb8:	2b20      	cmp	r3, #32
 8001eba:	d129      	bne.n	8001f10 <HAL_GPIO_EXTI_Callback+0x64>
    {
        // Handle CC1201 interrupt
        printf("CC1201 Interrupt Triggered!\n\r");
 8001ebc:	4816      	ldr	r0, [pc, #88]	@ (8001f18 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001ebe:	f006 fd1b 	bl	80088f8 <iprintf>
        
        // Read MARC state to see what caused the interrupt
        uint8_t marc_state = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	73fb      	strb	r3, [r7, #15]
        if (CC1201_ReadMARCState(&marc_state) == HAL_OK) {
 8001ec6:	f107 030f 	add.w	r3, r7, #15
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7fe fd00 	bl	80008d0 <CC1201_ReadMARCState>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d104      	bne.n	8001ee0 <HAL_GPIO_EXTI_Callback+0x34>
            printf("MARC State during interrupt: 0x%02X\n\r", marc_state);
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4810      	ldr	r0, [pc, #64]	@ (8001f1c <HAL_GPIO_EXTI_Callback+0x70>)
 8001edc:	f006 fd0c 	bl	80088f8 <iprintf>
        }
        
        // Check if there are bytes in RX FIFO
        uint8_t rx_bytes = 0;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	73bb      	strb	r3, [r7, #14]
        if (CC1201_GetNumRXBytes(&rx_bytes) == HAL_OK) {
 8001ee4:	f107 030e 	add.w	r3, r7, #14
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe fcff 	bl	80008ec <CC1201_GetNumRXBytes>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10a      	bne.n	8001f0a <HAL_GPIO_EXTI_Callback+0x5e>
            printf("RX Bytes available: %d\n\r", rx_bytes);
 8001ef4:	7bbb      	ldrb	r3, [r7, #14]
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4809      	ldr	r0, [pc, #36]	@ (8001f20 <HAL_GPIO_EXTI_Callback+0x74>)
 8001efa:	f006 fcfd 	bl	80088f8 <iprintf>
            if (rx_bytes > 0) {
 8001efe:	7bbb      	ldrb	r3, [r7, #14]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d002      	beq.n	8001f0a <HAL_GPIO_EXTI_Callback+0x5e>
                // Could read FIFO data here if needed
                printf("Data received in RX FIFO!\n\r");
 8001f04:	4807      	ldr	r0, [pc, #28]	@ (8001f24 <HAL_GPIO_EXTI_Callback+0x78>)
 8001f06:	f006 fcf7 	bl	80088f8 <iprintf>
            }
        }
        
        // Toggle LED to indicate interrupt
        BSP_LED_Toggle(LED_GREEN);
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f000 fb90 	bl	8002630 <BSP_LED_Toggle>
    }
}
 8001f10:	bf00      	nop
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	0800acf0 	.word	0x0800acf0
 8001f1c:	0800ad10 	.word	0x0800ad10
 8001f20:	0800ad38 	.word	0x0800ad38
 8001f24:	0800ad54 	.word	0x0800ad54

08001f28 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001f2e:	463b      	mov	r3, r7
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001f3a:	f000 fed7 	bl	8002cec <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001f4a:	231f      	movs	r3, #31
 8001f4c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001f4e:	2387      	movs	r3, #135	@ 0x87
 8001f50:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001f56:	2300      	movs	r3, #0
 8001f58:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001f66:	2300      	movs	r3, #0
 8001f68:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001f6a:	463b      	mov	r3, r7
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f000 fef5 	bl	8002d5c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001f72:	2004      	movs	r0, #4
 8001f74:	f000 fed2 	bl	8002d1c <HAL_MPU_Enable>

}
 8001f78:	bf00      	nop
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d102      	bne.n	8001f96 <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8001f90:	4b04      	ldr	r3, [pc, #16]	@ (8001fa4 <BSP_PB_Callback+0x24>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	601a      	str	r2, [r3, #0]
  }
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	240000b4 	.word	0x240000b4

08001fa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fac:	b672      	cpsid	i
}
 8001fae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fb0:	bf00      	nop
 8001fb2:	e7fd      	b.n	8001fb0 <Error_Handler+0x8>

08001fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fba:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe4 <HAL_MspInit+0x30>)
 8001fbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001fc0:	4a08      	ldr	r2, [pc, #32]	@ (8001fe4 <HAL_MspInit+0x30>)
 8001fc2:	f043 0302 	orr.w	r3, r3, #2
 8001fc6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001fca:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <HAL_MspInit+0x30>)
 8001fcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	607b      	str	r3, [r7, #4]
 8001fd6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	58024400 	.word	0x58024400

08001fe8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b0ba      	sub	sp, #232	@ 0xe8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002000:	f107 0310 	add.w	r3, r7, #16
 8002004:	22c0      	movs	r2, #192	@ 0xc0
 8002006:	2100      	movs	r1, #0
 8002008:	4618      	mov	r0, r3
 800200a:	f006 fcca 	bl	80089a2 <memset>
  if(hspi->Instance==SPI4)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a37      	ldr	r2, [pc, #220]	@ (80020f0 <HAL_SPI_MspInit+0x108>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d166      	bne.n	80020e6 <HAL_SPI_MspInit+0xfe>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8002018:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800201c:	f04f 0300 	mov.w	r3, #0
 8002020:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8002024:	2300      	movs	r3, #0
 8002026:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002028:	f107 0310 	add.w	r3, r7, #16
 800202c:	4618      	mov	r0, r3
 800202e:	f002 fbb5 	bl	800479c <HAL_RCCEx_PeriphCLKConfig>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002038:	f7ff ffb6 	bl	8001fa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800203c:	4b2d      	ldr	r3, [pc, #180]	@ (80020f4 <HAL_SPI_MspInit+0x10c>)
 800203e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002042:	4a2c      	ldr	r2, [pc, #176]	@ (80020f4 <HAL_SPI_MspInit+0x10c>)
 8002044:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002048:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800204c:	4b29      	ldr	r3, [pc, #164]	@ (80020f4 <HAL_SPI_MspInit+0x10c>)
 800204e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002052:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800205a:	4b26      	ldr	r3, [pc, #152]	@ (80020f4 <HAL_SPI_MspInit+0x10c>)
 800205c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002060:	4a24      	ldr	r2, [pc, #144]	@ (80020f4 <HAL_SPI_MspInit+0x10c>)
 8002062:	f043 0310 	orr.w	r3, r3, #16
 8002066:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800206a:	4b22      	ldr	r3, [pc, #136]	@ (80020f4 <HAL_SPI_MspInit+0x10c>)
 800206c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002070:	f003 0310 	and.w	r3, r3, #16
 8002074:	60bb      	str	r3, [r7, #8]
 8002076:	68bb      	ldr	r3, [r7, #8]
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    
    // Configure SPI pins (SCK, MISO, MOSI) 
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002078:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800207c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002080:	2302      	movs	r3, #2
 8002082:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;  // Increased speed
 800208c:	2302      	movs	r3, #2
 800208e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002092:	2305      	movs	r3, #5
 8002094:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002098:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800209c:	4619      	mov	r1, r3
 800209e:	4816      	ldr	r0, [pc, #88]	@ (80020f8 <HAL_SPI_MspInit+0x110>)
 80020a0:	f001 f946 	bl	8003330 <HAL_GPIO_Init>
    
    // Configure PE11 as manual CS (GPIO output)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80020a4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80020a8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ac:	2301      	movs	r3, #1
 80020ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020b8:	2302      	movs	r3, #2
 80020ba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020be:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80020c2:	4619      	mov	r1, r3
 80020c4:	480c      	ldr	r0, [pc, #48]	@ (80020f8 <HAL_SPI_MspInit+0x110>)
 80020c6:	f001 f933 	bl	8003330 <HAL_GPIO_Init>
    
    // Set CS high (inactive) by default
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 80020ca:	2201      	movs	r2, #1
 80020cc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80020d0:	4809      	ldr	r0, [pc, #36]	@ (80020f8 <HAL_SPI_MspInit+0x110>)
 80020d2:	f001 faf5 	bl	80036c0 <HAL_GPIO_WritePin>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 80020d6:	2200      	movs	r2, #0
 80020d8:	2100      	movs	r1, #0
 80020da:	2054      	movs	r0, #84	@ 0x54
 80020dc:	f000 fdd1 	bl	8002c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80020e0:	2054      	movs	r0, #84	@ 0x54
 80020e2:	f000 fde8 	bl	8002cb6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI4_MspInit 1 */

  }

}
 80020e6:	bf00      	nop
 80020e8:	37e8      	adds	r7, #232	@ 0xe8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40013400 	.word	0x40013400
 80020f4:	58024400 	.word	0x58024400
 80020f8:	58021000 	.word	0x58021000

080020fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002100:	bf00      	nop
 8002102:	e7fd      	b.n	8002100 <NMI_Handler+0x4>

08002104 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002108:	bf00      	nop
 800210a:	e7fd      	b.n	8002108 <HardFault_Handler+0x4>

0800210c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002110:	bf00      	nop
 8002112:	e7fd      	b.n	8002110 <MemManage_Handler+0x4>

08002114 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002118:	bf00      	nop
 800211a:	e7fd      	b.n	8002118 <BusFault_Handler+0x4>

0800211c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002120:	bf00      	nop
 8002122:	e7fd      	b.n	8002120 <UsageFault_Handler+0x4>

08002124 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002132:	b480      	push	{r7}
 8002134:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002152:	f000 fc6b 	bl	8002a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}

0800215a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800215e:	2000      	movs	r0, #0
 8002160:	f000 fb02 	bl	8002768 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002164:	bf00      	nop
 8002166:	bd80      	pop	{r7, pc}

08002168 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800216c:	2020      	movs	r0, #32
 800216e:	f001 fada 	bl	8003726 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 800217c:	4802      	ldr	r0, [pc, #8]	@ (8002188 <SPI4_IRQHandler+0x10>)
 800217e:	f004 ff85 	bl	800708c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	240000b8 	.word	0x240000b8

0800218c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	e00a      	b.n	80021b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800219e:	f3af 8000 	nop.w
 80021a2:	4601      	mov	r1, r0
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	60ba      	str	r2, [r7, #8]
 80021aa:	b2ca      	uxtb	r2, r1
 80021ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	3301      	adds	r3, #1
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	dbf0      	blt.n	800219e <_read+0x12>
  }

  return len;
 80021bc:	687b      	ldr	r3, [r7, #4]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b086      	sub	sp, #24
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	60f8      	str	r0, [r7, #12]
 80021ce:	60b9      	str	r1, [r7, #8]
 80021d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d2:	2300      	movs	r3, #0
 80021d4:	617b      	str	r3, [r7, #20]
 80021d6:	e009      	b.n	80021ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	1c5a      	adds	r2, r3, #1
 80021dc:	60ba      	str	r2, [r7, #8]
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 fb35 	bl	8002850 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	3301      	adds	r3, #1
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	dbf1      	blt.n	80021d8 <_write+0x12>
  }
  return len;
 80021f4:	687b      	ldr	r3, [r7, #4]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <_close>:

int _close(int file)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002206:	f04f 33ff 	mov.w	r3, #4294967295
}
 800220a:	4618      	mov	r0, r3
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
 800221e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002226:	605a      	str	r2, [r3, #4]
  return 0;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <_isatty>:

int _isatty(int file)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800223e:	2301      	movs	r3, #1
}
 8002240:	4618      	mov	r0, r3
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
	...

08002268 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002270:	4a14      	ldr	r2, [pc, #80]	@ (80022c4 <_sbrk+0x5c>)
 8002272:	4b15      	ldr	r3, [pc, #84]	@ (80022c8 <_sbrk+0x60>)
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800227c:	4b13      	ldr	r3, [pc, #76]	@ (80022cc <_sbrk+0x64>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d102      	bne.n	800228a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002284:	4b11      	ldr	r3, [pc, #68]	@ (80022cc <_sbrk+0x64>)
 8002286:	4a12      	ldr	r2, [pc, #72]	@ (80022d0 <_sbrk+0x68>)
 8002288:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800228a:	4b10      	ldr	r3, [pc, #64]	@ (80022cc <_sbrk+0x64>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4413      	add	r3, r2
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	429a      	cmp	r2, r3
 8002296:	d207      	bcs.n	80022a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002298:	f006 fbd2 	bl	8008a40 <__errno>
 800229c:	4603      	mov	r3, r0
 800229e:	220c      	movs	r2, #12
 80022a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022a2:	f04f 33ff 	mov.w	r3, #4294967295
 80022a6:	e009      	b.n	80022bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022a8:	4b08      	ldr	r3, [pc, #32]	@ (80022cc <_sbrk+0x64>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ae:	4b07      	ldr	r3, [pc, #28]	@ (80022cc <_sbrk+0x64>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4413      	add	r3, r2
 80022b6:	4a05      	ldr	r2, [pc, #20]	@ (80022cc <_sbrk+0x64>)
 80022b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ba:	68fb      	ldr	r3, [r7, #12]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	24080000 	.word	0x24080000
 80022c8:	00000400 	.word	0x00000400
 80022cc:	24000140 	.word	0x24000140
 80022d0:	24000338 	.word	0x24000338

080022d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80022d8:	4b43      	ldr	r3, [pc, #268]	@ (80023e8 <SystemInit+0x114>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022de:	4a42      	ldr	r2, [pc, #264]	@ (80023e8 <SystemInit+0x114>)
 80022e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80022e8:	4b40      	ldr	r3, [pc, #256]	@ (80023ec <SystemInit+0x118>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 030f 	and.w	r3, r3, #15
 80022f0:	2b06      	cmp	r3, #6
 80022f2:	d807      	bhi.n	8002304 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80022f4:	4b3d      	ldr	r3, [pc, #244]	@ (80023ec <SystemInit+0x118>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f023 030f 	bic.w	r3, r3, #15
 80022fc:	4a3b      	ldr	r2, [pc, #236]	@ (80023ec <SystemInit+0x118>)
 80022fe:	f043 0307 	orr.w	r3, r3, #7
 8002302:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002304:	4b3a      	ldr	r3, [pc, #232]	@ (80023f0 <SystemInit+0x11c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a39      	ldr	r2, [pc, #228]	@ (80023f0 <SystemInit+0x11c>)
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002310:	4b37      	ldr	r3, [pc, #220]	@ (80023f0 <SystemInit+0x11c>)
 8002312:	2200      	movs	r2, #0
 8002314:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002316:	4b36      	ldr	r3, [pc, #216]	@ (80023f0 <SystemInit+0x11c>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	4935      	ldr	r1, [pc, #212]	@ (80023f0 <SystemInit+0x11c>)
 800231c:	4b35      	ldr	r3, [pc, #212]	@ (80023f4 <SystemInit+0x120>)
 800231e:	4013      	ands	r3, r2
 8002320:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002322:	4b32      	ldr	r3, [pc, #200]	@ (80023ec <SystemInit+0x118>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	2b00      	cmp	r3, #0
 800232c:	d007      	beq.n	800233e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800232e:	4b2f      	ldr	r3, [pc, #188]	@ (80023ec <SystemInit+0x118>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f023 030f 	bic.w	r3, r3, #15
 8002336:	4a2d      	ldr	r2, [pc, #180]	@ (80023ec <SystemInit+0x118>)
 8002338:	f043 0307 	orr.w	r3, r3, #7
 800233c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800233e:	4b2c      	ldr	r3, [pc, #176]	@ (80023f0 <SystemInit+0x11c>)
 8002340:	2200      	movs	r2, #0
 8002342:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002344:	4b2a      	ldr	r3, [pc, #168]	@ (80023f0 <SystemInit+0x11c>)
 8002346:	2200      	movs	r2, #0
 8002348:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800234a:	4b29      	ldr	r3, [pc, #164]	@ (80023f0 <SystemInit+0x11c>)
 800234c:	2200      	movs	r2, #0
 800234e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002350:	4b27      	ldr	r3, [pc, #156]	@ (80023f0 <SystemInit+0x11c>)
 8002352:	4a29      	ldr	r2, [pc, #164]	@ (80023f8 <SystemInit+0x124>)
 8002354:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002356:	4b26      	ldr	r3, [pc, #152]	@ (80023f0 <SystemInit+0x11c>)
 8002358:	4a28      	ldr	r2, [pc, #160]	@ (80023fc <SystemInit+0x128>)
 800235a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800235c:	4b24      	ldr	r3, [pc, #144]	@ (80023f0 <SystemInit+0x11c>)
 800235e:	4a28      	ldr	r2, [pc, #160]	@ (8002400 <SystemInit+0x12c>)
 8002360:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002362:	4b23      	ldr	r3, [pc, #140]	@ (80023f0 <SystemInit+0x11c>)
 8002364:	2200      	movs	r2, #0
 8002366:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002368:	4b21      	ldr	r3, [pc, #132]	@ (80023f0 <SystemInit+0x11c>)
 800236a:	4a25      	ldr	r2, [pc, #148]	@ (8002400 <SystemInit+0x12c>)
 800236c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800236e:	4b20      	ldr	r3, [pc, #128]	@ (80023f0 <SystemInit+0x11c>)
 8002370:	2200      	movs	r2, #0
 8002372:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002374:	4b1e      	ldr	r3, [pc, #120]	@ (80023f0 <SystemInit+0x11c>)
 8002376:	4a22      	ldr	r2, [pc, #136]	@ (8002400 <SystemInit+0x12c>)
 8002378:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800237a:	4b1d      	ldr	r3, [pc, #116]	@ (80023f0 <SystemInit+0x11c>)
 800237c:	2200      	movs	r2, #0
 800237e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002380:	4b1b      	ldr	r3, [pc, #108]	@ (80023f0 <SystemInit+0x11c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a1a      	ldr	r2, [pc, #104]	@ (80023f0 <SystemInit+0x11c>)
 8002386:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800238a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800238c:	4b18      	ldr	r3, [pc, #96]	@ (80023f0 <SystemInit+0x11c>)
 800238e:	2200      	movs	r2, #0
 8002390:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002392:	4b1c      	ldr	r3, [pc, #112]	@ (8002404 <SystemInit+0x130>)
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	4b1c      	ldr	r3, [pc, #112]	@ (8002408 <SystemInit+0x134>)
 8002398:	4013      	ands	r3, r2
 800239a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800239e:	d202      	bcs.n	80023a6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80023a0:	4b1a      	ldr	r3, [pc, #104]	@ (800240c <SystemInit+0x138>)
 80023a2:	2201      	movs	r2, #1
 80023a4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80023a6:	4b12      	ldr	r3, [pc, #72]	@ (80023f0 <SystemInit+0x11c>)
 80023a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80023ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d113      	bne.n	80023dc <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80023b4:	4b0e      	ldr	r3, [pc, #56]	@ (80023f0 <SystemInit+0x11c>)
 80023b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80023ba:	4a0d      	ldr	r2, [pc, #52]	@ (80023f0 <SystemInit+0x11c>)
 80023bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80023c0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80023c4:	4b12      	ldr	r3, [pc, #72]	@ (8002410 <SystemInit+0x13c>)
 80023c6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80023ca:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80023cc:	4b08      	ldr	r3, [pc, #32]	@ (80023f0 <SystemInit+0x11c>)
 80023ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80023d2:	4a07      	ldr	r2, [pc, #28]	@ (80023f0 <SystemInit+0x11c>)
 80023d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80023d8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	e000ed00 	.word	0xe000ed00
 80023ec:	52002000 	.word	0x52002000
 80023f0:	58024400 	.word	0x58024400
 80023f4:	eaf6ed7f 	.word	0xeaf6ed7f
 80023f8:	02020200 	.word	0x02020200
 80023fc:	01ff0000 	.word	0x01ff0000
 8002400:	01010280 	.word	0x01010280
 8002404:	5c001000 	.word	0x5c001000
 8002408:	ffff0000 	.word	0xffff0000
 800240c:	51008108 	.word	0x51008108
 8002410:	52004000 	.word	0x52004000

08002414 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002418:	4b09      	ldr	r3, [pc, #36]	@ (8002440 <ExitRun0Mode+0x2c>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	4a08      	ldr	r2, [pc, #32]	@ (8002440 <ExitRun0Mode+0x2c>)
 800241e:	f043 0302 	orr.w	r3, r3, #2
 8002422:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002424:	bf00      	nop
 8002426:	4b06      	ldr	r3, [pc, #24]	@ (8002440 <ExitRun0Mode+0x2c>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0f9      	beq.n	8002426 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002432:	bf00      	nop
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	58024800 	.word	0x58024800

08002444 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002444:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002480 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002448:	f7ff ffe4 	bl	8002414 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800244c:	f7ff ff42 	bl	80022d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002450:	480c      	ldr	r0, [pc, #48]	@ (8002484 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002452:	490d      	ldr	r1, [pc, #52]	@ (8002488 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002454:	4a0d      	ldr	r2, [pc, #52]	@ (800248c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002458:	e002      	b.n	8002460 <LoopCopyDataInit>

0800245a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800245a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800245c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800245e:	3304      	adds	r3, #4

08002460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002464:	d3f9      	bcc.n	800245a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002466:	4a0a      	ldr	r2, [pc, #40]	@ (8002490 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002468:	4c0a      	ldr	r4, [pc, #40]	@ (8002494 <LoopFillZerobss+0x22>)
  movs r3, #0
 800246a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800246c:	e001      	b.n	8002472 <LoopFillZerobss>

0800246e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800246e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002470:	3204      	adds	r2, #4

08002472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002474:	d3fb      	bcc.n	800246e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002476:	f006 fae9 	bl	8008a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800247a:	f7ff fb45 	bl	8001b08 <main>
  bx  lr
 800247e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002480:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002484:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002488:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 800248c:	0800ade8 	.word	0x0800ade8
  ldr r2, =_sbss
 8002490:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 8002494:	24000334 	.word	0x24000334

08002498 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002498:	e7fe      	b.n	8002498 <ADC3_IRQHandler>
	...

0800249c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08c      	sub	sp, #48	@ 0x30
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80024a6:	2300      	movs	r3, #0
 80024a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d009      	beq.n	80024c4 <BSP_LED_Init+0x28>
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d006      	beq.n	80024c4 <BSP_LED_Init+0x28>
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d003      	beq.n	80024c4 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80024bc:	f06f 0301 	mvn.w	r3, #1
 80024c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024c2:	e055      	b.n	8002570 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80024c4:	79fb      	ldrb	r3, [r7, #7]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10f      	bne.n	80024ea <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80024ca:	4b2c      	ldr	r3, [pc, #176]	@ (800257c <BSP_LED_Init+0xe0>)
 80024cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024d0:	4a2a      	ldr	r2, [pc, #168]	@ (800257c <BSP_LED_Init+0xe0>)
 80024d2:	f043 0302 	orr.w	r3, r3, #2
 80024d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024da:	4b28      	ldr	r3, [pc, #160]	@ (800257c <BSP_LED_Init+0xe0>)
 80024dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	e021      	b.n	800252e <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80024ea:	79fb      	ldrb	r3, [r7, #7]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d10f      	bne.n	8002510 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80024f0:	4b22      	ldr	r3, [pc, #136]	@ (800257c <BSP_LED_Init+0xe0>)
 80024f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024f6:	4a21      	ldr	r2, [pc, #132]	@ (800257c <BSP_LED_Init+0xe0>)
 80024f8:	f043 0310 	orr.w	r3, r3, #16
 80024fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002500:	4b1e      	ldr	r3, [pc, #120]	@ (800257c <BSP_LED_Init+0xe0>)
 8002502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002506:	f003 0310 	and.w	r3, r3, #16
 800250a:	613b      	str	r3, [r7, #16]
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	e00e      	b.n	800252e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8002510:	4b1a      	ldr	r3, [pc, #104]	@ (800257c <BSP_LED_Init+0xe0>)
 8002512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002516:	4a19      	ldr	r2, [pc, #100]	@ (800257c <BSP_LED_Init+0xe0>)
 8002518:	f043 0302 	orr.w	r3, r3, #2
 800251c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002520:	4b16      	ldr	r3, [pc, #88]	@ (800257c <BSP_LED_Init+0xe0>)
 8002522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	4a13      	ldr	r2, [pc, #76]	@ (8002580 <BSP_LED_Init+0xe4>)
 8002532:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002536:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002538:	2301      	movs	r3, #1
 800253a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800253c:	2300      	movs	r3, #0
 800253e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002540:	2303      	movs	r3, #3
 8002542:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002544:	79fb      	ldrb	r3, [r7, #7]
 8002546:	4a0f      	ldr	r2, [pc, #60]	@ (8002584 <BSP_LED_Init+0xe8>)
 8002548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800254c:	f107 0218 	add.w	r2, r7, #24
 8002550:	4611      	mov	r1, r2
 8002552:	4618      	mov	r0, r3
 8002554:	f000 feec 	bl	8003330 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	4a0a      	ldr	r2, [pc, #40]	@ (8002584 <BSP_LED_Init+0xe8>)
 800255c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	4a07      	ldr	r2, [pc, #28]	@ (8002580 <BSP_LED_Init+0xe4>)
 8002564:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002568:	2200      	movs	r2, #0
 800256a:	4619      	mov	r1, r3
 800256c:	f001 f8a8 	bl	80036c0 <HAL_GPIO_WritePin>
  }

  return ret;
 8002570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002572:	4618      	mov	r0, r3
 8002574:	3730      	adds	r7, #48	@ 0x30
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	58024400 	.word	0x58024400
 8002580:	0800ad80 	.word	0x0800ad80
 8002584:	2400000c 	.word	0x2400000c

08002588 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002592:	2300      	movs	r3, #0
 8002594:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d009      	beq.n	80025b0 <BSP_LED_On+0x28>
 800259c:	79fb      	ldrb	r3, [r7, #7]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d006      	beq.n	80025b0 <BSP_LED_On+0x28>
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d003      	beq.n	80025b0 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80025a8:	f06f 0301 	mvn.w	r3, #1
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	e00b      	b.n	80025c8 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80025b0:	79fb      	ldrb	r3, [r7, #7]
 80025b2:	4a08      	ldr	r2, [pc, #32]	@ (80025d4 <BSP_LED_On+0x4c>)
 80025b4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80025b8:	79fb      	ldrb	r3, [r7, #7]
 80025ba:	4a07      	ldr	r2, [pc, #28]	@ (80025d8 <BSP_LED_On+0x50>)
 80025bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025c0:	2201      	movs	r2, #1
 80025c2:	4619      	mov	r1, r3
 80025c4:	f001 f87c 	bl	80036c0 <HAL_GPIO_WritePin>
  }

  return ret;
 80025c8:	68fb      	ldr	r3, [r7, #12]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	2400000c 	.word	0x2400000c
 80025d8:	0800ad80 	.word	0x0800ad80

080025dc <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80025ea:	79fb      	ldrb	r3, [r7, #7]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d009      	beq.n	8002604 <BSP_LED_Off+0x28>
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d006      	beq.n	8002604 <BSP_LED_Off+0x28>
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d003      	beq.n	8002604 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80025fc:	f06f 0301 	mvn.w	r3, #1
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	e00b      	b.n	800261c <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002604:	79fb      	ldrb	r3, [r7, #7]
 8002606:	4a08      	ldr	r2, [pc, #32]	@ (8002628 <BSP_LED_Off+0x4c>)
 8002608:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	4a07      	ldr	r2, [pc, #28]	@ (800262c <BSP_LED_Off+0x50>)
 8002610:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002614:	2200      	movs	r2, #0
 8002616:	4619      	mov	r1, r3
 8002618:	f001 f852 	bl	80036c0 <HAL_GPIO_WritePin>
  }

  return ret;
 800261c:	68fb      	ldr	r3, [r7, #12]
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	2400000c 	.word	0x2400000c
 800262c:	0800ad80 	.word	0x0800ad80

08002630 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d009      	beq.n	8002658 <BSP_LED_Toggle+0x28>
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d006      	beq.n	8002658 <BSP_LED_Toggle+0x28>
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	2b02      	cmp	r3, #2
 800264e:	d003      	beq.n	8002658 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002650:	f06f 0301 	mvn.w	r3, #1
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	e00b      	b.n	8002670 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	4a08      	ldr	r2, [pc, #32]	@ (800267c <BSP_LED_Toggle+0x4c>)
 800265c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002660:	79fb      	ldrb	r3, [r7, #7]
 8002662:	4907      	ldr	r1, [pc, #28]	@ (8002680 <BSP_LED_Toggle+0x50>)
 8002664:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002668:	4619      	mov	r1, r3
 800266a:	4610      	mov	r0, r2
 800266c:	f001 f841 	bl	80036f2 <HAL_GPIO_TogglePin>
  }

  return ret;
 8002670:	68fb      	ldr	r3, [r7, #12]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	2400000c 	.word	0x2400000c
 8002680:	0800ad80 	.word	0x0800ad80

08002684 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b088      	sub	sp, #32
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	460a      	mov	r2, r1
 800268e:	71fb      	strb	r3, [r7, #7]
 8002690:	4613      	mov	r3, r2
 8002692:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8002694:	4b2e      	ldr	r3, [pc, #184]	@ (8002750 <BSP_PB_Init+0xcc>)
 8002696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800269a:	4a2d      	ldr	r2, [pc, #180]	@ (8002750 <BSP_PB_Init+0xcc>)
 800269c:	f043 0304 	orr.w	r3, r3, #4
 80026a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002750 <BSP_PB_Init+0xcc>)
 80026a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026aa:	f003 0304 	and.w	r3, r3, #4
 80026ae:	60bb      	str	r3, [r7, #8]
 80026b0:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80026b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026b6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80026b8:	2302      	movs	r3, #2
 80026ba:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80026bc:	2302      	movs	r3, #2
 80026be:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80026c0:	79bb      	ldrb	r3, [r7, #6]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10c      	bne.n	80026e0 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80026c6:	2300      	movs	r3, #0
 80026c8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80026ca:	79fb      	ldrb	r3, [r7, #7]
 80026cc:	4a21      	ldr	r2, [pc, #132]	@ (8002754 <BSP_PB_Init+0xd0>)
 80026ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d2:	f107 020c 	add.w	r2, r7, #12
 80026d6:	4611      	mov	r1, r2
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 fe29 	bl	8003330 <HAL_GPIO_Init>
 80026de:	e031      	b.n	8002744 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80026e0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80026e4:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80026e6:	79fb      	ldrb	r3, [r7, #7]
 80026e8:	4a1a      	ldr	r2, [pc, #104]	@ (8002754 <BSP_PB_Init+0xd0>)
 80026ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ee:	f107 020c 	add.w	r2, r7, #12
 80026f2:	4611      	mov	r1, r2
 80026f4:	4618      	mov	r0, r3
 80026f6:	f000 fe1b 	bl	8003330 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	4a16      	ldr	r2, [pc, #88]	@ (8002758 <BSP_PB_Init+0xd4>)
 8002700:	441a      	add	r2, r3
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	4915      	ldr	r1, [pc, #84]	@ (800275c <BSP_PB_Init+0xd8>)
 8002706:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800270a:	4619      	mov	r1, r3
 800270c:	4610      	mov	r0, r2
 800270e:	f000 fdca 	bl	80032a6 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8002712:	79fb      	ldrb	r3, [r7, #7]
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	4a10      	ldr	r2, [pc, #64]	@ (8002758 <BSP_PB_Init+0xd4>)
 8002718:	1898      	adds	r0, r3, r2
 800271a:	79fb      	ldrb	r3, [r7, #7]
 800271c:	4a10      	ldr	r2, [pc, #64]	@ (8002760 <BSP_PB_Init+0xdc>)
 800271e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002722:	461a      	mov	r2, r3
 8002724:	2100      	movs	r1, #0
 8002726:	f000 fd9f 	bl	8003268 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800272a:	2028      	movs	r0, #40	@ 0x28
 800272c:	79fb      	ldrb	r3, [r7, #7]
 800272e:	4a0d      	ldr	r2, [pc, #52]	@ (8002764 <BSP_PB_Init+0xe0>)
 8002730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002734:	2200      	movs	r2, #0
 8002736:	4619      	mov	r1, r3
 8002738:	f000 faa3 	bl	8002c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800273c:	2328      	movs	r3, #40	@ 0x28
 800273e:	4618      	mov	r0, r3
 8002740:	f000 fab9 	bl	8002cb6 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3720      	adds	r7, #32
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	58024400 	.word	0x58024400
 8002754:	24000018 	.word	0x24000018
 8002758:	24000144 	.word	0x24000144
 800275c:	0800ad88 	.word	0x0800ad88
 8002760:	2400001c 	.word	0x2400001c
 8002764:	24000020 	.word	0x24000020

08002768 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	4a04      	ldr	r2, [pc, #16]	@ (8002788 <BSP_PB_IRQHandler+0x20>)
 8002778:	4413      	add	r3, r2
 800277a:	4618      	mov	r0, r3
 800277c:	f000 fda8 	bl	80032d0 <HAL_EXTI_IRQHandler>
}
 8002780:	bf00      	nop
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	24000144 	.word	0x24000144

0800278c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	6039      	str	r1, [r7, #0]
 8002796:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002798:	2300      	movs	r3, #0
 800279a:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80027a2:	f06f 0301 	mvn.w	r3, #1
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	e018      	b.n	80027dc <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	2294      	movs	r2, #148	@ 0x94
 80027ae:	fb02 f303 	mul.w	r3, r2, r3
 80027b2:	4a0d      	ldr	r2, [pc, #52]	@ (80027e8 <BSP_COM_Init+0x5c>)
 80027b4:	4413      	add	r3, r2
 80027b6:	4618      	mov	r0, r3
 80027b8:	f000 f86e 	bl	8002898 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	2294      	movs	r2, #148	@ 0x94
 80027c0:	fb02 f303 	mul.w	r3, r2, r3
 80027c4:	4a08      	ldr	r2, [pc, #32]	@ (80027e8 <BSP_COM_Init+0x5c>)
 80027c6:	4413      	add	r3, r2
 80027c8:	6839      	ldr	r1, [r7, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 f80e 	bl	80027ec <MX_USART3_Init>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d002      	beq.n	80027dc <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80027d6:	f06f 0303 	mvn.w	r3, #3
 80027da:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80027dc:	68fb      	ldr	r3, [r7, #12]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	2400014c 	.word	0x2400014c

080027ec <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80027f6:	4b15      	ldr	r3, [pc, #84]	@ (800284c <MX_USART3_Init+0x60>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	220c      	movs	r2, #12
 800280a:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	895b      	ldrh	r3, [r3, #10]
 8002810:	461a      	mov	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	891b      	ldrh	r3, [r3, #8]
 8002822:	461a      	mov	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	899b      	ldrh	r3, [r3, #12]
 800282c:	461a      	mov	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002838:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f004 ff29 	bl	8007692 <HAL_UART_Init>
 8002840:	4603      	mov	r3, r0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	24000008 	.word	0x24000008

08002850 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8002858:	4b09      	ldr	r3, [pc, #36]	@ (8002880 <__io_putchar+0x30>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	461a      	mov	r2, r3
 800285e:	2394      	movs	r3, #148	@ 0x94
 8002860:	fb02 f303 	mul.w	r3, r2, r3
 8002864:	4a07      	ldr	r2, [pc, #28]	@ (8002884 <__io_putchar+0x34>)
 8002866:	1898      	adds	r0, r3, r2
 8002868:	1d39      	adds	r1, r7, #4
 800286a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800286e:	2201      	movs	r2, #1
 8002870:	f004 ff69 	bl	8007746 <HAL_UART_Transmit>
  return ch;
 8002874:	687b      	ldr	r3, [r7, #4]
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	240001e0 	.word	0x240001e0
 8002884:	2400014c 	.word	0x2400014c

08002888 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800288c:	2000      	movs	r0, #0
 800288e:	f7ff fb77 	bl	8001f80 <BSP_PB_Callback>
}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
	...

08002898 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b08a      	sub	sp, #40	@ 0x28
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80028a0:	4b27      	ldr	r3, [pc, #156]	@ (8002940 <COM1_MspInit+0xa8>)
 80028a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028a6:	4a26      	ldr	r2, [pc, #152]	@ (8002940 <COM1_MspInit+0xa8>)
 80028a8:	f043 0308 	orr.w	r3, r3, #8
 80028ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028b0:	4b23      	ldr	r3, [pc, #140]	@ (8002940 <COM1_MspInit+0xa8>)
 80028b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028b6:	f003 0308 	and.w	r3, r3, #8
 80028ba:	613b      	str	r3, [r7, #16]
 80028bc:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80028be:	4b20      	ldr	r3, [pc, #128]	@ (8002940 <COM1_MspInit+0xa8>)
 80028c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028c4:	4a1e      	ldr	r2, [pc, #120]	@ (8002940 <COM1_MspInit+0xa8>)
 80028c6:	f043 0308 	orr.w	r3, r3, #8
 80028ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002940 <COM1_MspInit+0xa8>)
 80028d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028d4:	f003 0308 	and.w	r3, r3, #8
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80028dc:	4b18      	ldr	r3, [pc, #96]	@ (8002940 <COM1_MspInit+0xa8>)
 80028de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028e2:	4a17      	ldr	r2, [pc, #92]	@ (8002940 <COM1_MspInit+0xa8>)
 80028e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028e8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80028ec:	4b14      	ldr	r3, [pc, #80]	@ (8002940 <COM1_MspInit+0xa8>)
 80028ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028f6:	60bb      	str	r3, [r7, #8]
 80028f8:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 80028fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028fe:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002900:	2302      	movs	r3, #2
 8002902:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002904:	2302      	movs	r3, #2
 8002906:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002908:	2301      	movs	r3, #1
 800290a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 800290c:	2307      	movs	r3, #7
 800290e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002910:	f107 0314 	add.w	r3, r7, #20
 8002914:	4619      	mov	r1, r3
 8002916:	480b      	ldr	r0, [pc, #44]	@ (8002944 <COM1_MspInit+0xac>)
 8002918:	f000 fd0a 	bl	8003330 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 800291c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002920:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002922:	2302      	movs	r3, #2
 8002924:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8002926:	2307      	movs	r3, #7
 8002928:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800292a:	f107 0314 	add.w	r3, r7, #20
 800292e:	4619      	mov	r1, r3
 8002930:	4804      	ldr	r0, [pc, #16]	@ (8002944 <COM1_MspInit+0xac>)
 8002932:	f000 fcfd 	bl	8003330 <HAL_GPIO_Init>
}
 8002936:	bf00      	nop
 8002938:	3728      	adds	r7, #40	@ 0x28
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	58024400 	.word	0x58024400
 8002944:	58020c00 	.word	0x58020c00

08002948 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800294e:	2003      	movs	r0, #3
 8002950:	f000 f98c 	bl	8002c6c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002954:	f001 fd4c 	bl	80043f0 <HAL_RCC_GetSysClockFreq>
 8002958:	4602      	mov	r2, r0
 800295a:	4b15      	ldr	r3, [pc, #84]	@ (80029b0 <HAL_Init+0x68>)
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	0a1b      	lsrs	r3, r3, #8
 8002960:	f003 030f 	and.w	r3, r3, #15
 8002964:	4913      	ldr	r1, [pc, #76]	@ (80029b4 <HAL_Init+0x6c>)
 8002966:	5ccb      	ldrb	r3, [r1, r3]
 8002968:	f003 031f 	and.w	r3, r3, #31
 800296c:	fa22 f303 	lsr.w	r3, r2, r3
 8002970:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002972:	4b0f      	ldr	r3, [pc, #60]	@ (80029b0 <HAL_Init+0x68>)
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	4a0e      	ldr	r2, [pc, #56]	@ (80029b4 <HAL_Init+0x6c>)
 800297c:	5cd3      	ldrb	r3, [r2, r3]
 800297e:	f003 031f 	and.w	r3, r3, #31
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	fa22 f303 	lsr.w	r3, r2, r3
 8002988:	4a0b      	ldr	r2, [pc, #44]	@ (80029b8 <HAL_Init+0x70>)
 800298a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800298c:	4a0b      	ldr	r2, [pc, #44]	@ (80029bc <HAL_Init+0x74>)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002992:	2000      	movs	r0, #0
 8002994:	f000 f814 	bl	80029c0 <HAL_InitTick>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e002      	b.n	80029a8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80029a2:	f7ff fb07 	bl	8001fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	58024400 	.word	0x58024400
 80029b4:	0800ad70 	.word	0x0800ad70
 80029b8:	24000004 	.word	0x24000004
 80029bc:	24000000 	.word	0x24000000

080029c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80029c8:	4b15      	ldr	r3, [pc, #84]	@ (8002a20 <HAL_InitTick+0x60>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e021      	b.n	8002a18 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80029d4:	4b13      	ldr	r3, [pc, #76]	@ (8002a24 <HAL_InitTick+0x64>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	4b11      	ldr	r3, [pc, #68]	@ (8002a20 <HAL_InitTick+0x60>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	4619      	mov	r1, r3
 80029de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ea:	4618      	mov	r0, r3
 80029ec:	f000 f971 	bl	8002cd2 <HAL_SYSTICK_Config>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e00e      	b.n	8002a18 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b0f      	cmp	r3, #15
 80029fe:	d80a      	bhi.n	8002a16 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a00:	2200      	movs	r2, #0
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	f04f 30ff 	mov.w	r0, #4294967295
 8002a08:	f000 f93b 	bl	8002c82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a0c:	4a06      	ldr	r2, [pc, #24]	@ (8002a28 <HAL_InitTick+0x68>)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
 8002a14:	e000      	b.n	8002a18 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	24000028 	.word	0x24000028
 8002a24:	24000000 	.word	0x24000000
 8002a28:	24000024 	.word	0x24000024

08002a2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a30:	4b06      	ldr	r3, [pc, #24]	@ (8002a4c <HAL_IncTick+0x20>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	461a      	mov	r2, r3
 8002a36:	4b06      	ldr	r3, [pc, #24]	@ (8002a50 <HAL_IncTick+0x24>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	4a04      	ldr	r2, [pc, #16]	@ (8002a50 <HAL_IncTick+0x24>)
 8002a3e:	6013      	str	r3, [r2, #0]
}
 8002a40:	bf00      	nop
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	24000028 	.word	0x24000028
 8002a50:	240001e4 	.word	0x240001e4

08002a54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  return uwTick;
 8002a58:	4b03      	ldr	r3, [pc, #12]	@ (8002a68 <HAL_GetTick+0x14>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	240001e4 	.word	0x240001e4

08002a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a74:	f7ff ffee 	bl	8002a54 <HAL_GetTick>
 8002a78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a84:	d005      	beq.n	8002a92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a86:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab0 <HAL_Delay+0x44>)
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4413      	add	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a92:	bf00      	nop
 8002a94:	f7ff ffde 	bl	8002a54 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d8f7      	bhi.n	8002a94 <HAL_Delay+0x28>
  {
  }
}
 8002aa4:	bf00      	nop
 8002aa6:	bf00      	nop
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	24000028 	.word	0x24000028

08002ab4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002ab8:	4b03      	ldr	r3, [pc, #12]	@ (8002ac8 <HAL_GetREVID+0x14>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	0c1b      	lsrs	r3, r3, #16
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	5c001000 	.word	0x5c001000

08002acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002adc:	4b0b      	ldr	r3, [pc, #44]	@ (8002b0c <__NVIC_SetPriorityGrouping+0x40>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ae8:	4013      	ands	r3, r2
 8002aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002af4:	4b06      	ldr	r3, [pc, #24]	@ (8002b10 <__NVIC_SetPriorityGrouping+0x44>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002afa:	4a04      	ldr	r2, [pc, #16]	@ (8002b0c <__NVIC_SetPriorityGrouping+0x40>)
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	60d3      	str	r3, [r2, #12]
}
 8002b00:	bf00      	nop
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	e000ed00 	.word	0xe000ed00
 8002b10:	05fa0000 	.word	0x05fa0000

08002b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b18:	4b04      	ldr	r3, [pc, #16]	@ (8002b2c <__NVIC_GetPriorityGrouping+0x18>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	0a1b      	lsrs	r3, r3, #8
 8002b1e:	f003 0307 	and.w	r3, r3, #7
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	db0b      	blt.n	8002b5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b42:	88fb      	ldrh	r3, [r7, #6]
 8002b44:	f003 021f 	and.w	r2, r3, #31
 8002b48:	4907      	ldr	r1, [pc, #28]	@ (8002b68 <__NVIC_EnableIRQ+0x38>)
 8002b4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b4e:	095b      	lsrs	r3, r3, #5
 8002b50:	2001      	movs	r0, #1
 8002b52:	fa00 f202 	lsl.w	r2, r0, r2
 8002b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	e000e100 	.word	0xe000e100

08002b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	6039      	str	r1, [r7, #0]
 8002b76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	db0a      	blt.n	8002b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	490c      	ldr	r1, [pc, #48]	@ (8002bb8 <__NVIC_SetPriority+0x4c>)
 8002b86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b8a:	0112      	lsls	r2, r2, #4
 8002b8c:	b2d2      	uxtb	r2, r2
 8002b8e:	440b      	add	r3, r1
 8002b90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b94:	e00a      	b.n	8002bac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	4908      	ldr	r1, [pc, #32]	@ (8002bbc <__NVIC_SetPriority+0x50>)
 8002b9c:	88fb      	ldrh	r3, [r7, #6]
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	3b04      	subs	r3, #4
 8002ba4:	0112      	lsls	r2, r2, #4
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	440b      	add	r3, r1
 8002baa:	761a      	strb	r2, [r3, #24]
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	e000e100 	.word	0xe000e100
 8002bbc:	e000ed00 	.word	0xe000ed00

08002bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b089      	sub	sp, #36	@ 0x24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	f1c3 0307 	rsb	r3, r3, #7
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	bf28      	it	cs
 8002bde:	2304      	movcs	r3, #4
 8002be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	3304      	adds	r3, #4
 8002be6:	2b06      	cmp	r3, #6
 8002be8:	d902      	bls.n	8002bf0 <NVIC_EncodePriority+0x30>
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	3b03      	subs	r3, #3
 8002bee:	e000      	b.n	8002bf2 <NVIC_EncodePriority+0x32>
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	43da      	mvns	r2, r3
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	401a      	ands	r2, r3
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c08:	f04f 31ff 	mov.w	r1, #4294967295
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c12:	43d9      	mvns	r1, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c18:	4313      	orrs	r3, r2
         );
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3724      	adds	r7, #36	@ 0x24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
	...

08002c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3b01      	subs	r3, #1
 8002c34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c38:	d301      	bcc.n	8002c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e00f      	b.n	8002c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c68 <SysTick_Config+0x40>)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c46:	210f      	movs	r1, #15
 8002c48:	f04f 30ff 	mov.w	r0, #4294967295
 8002c4c:	f7ff ff8e 	bl	8002b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c50:	4b05      	ldr	r3, [pc, #20]	@ (8002c68 <SysTick_Config+0x40>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c56:	4b04      	ldr	r3, [pc, #16]	@ (8002c68 <SysTick_Config+0x40>)
 8002c58:	2207      	movs	r2, #7
 8002c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	e000e010 	.word	0xe000e010

08002c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7ff ff29 	bl	8002acc <__NVIC_SetPriorityGrouping>
}
 8002c7a:	bf00      	nop
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b086      	sub	sp, #24
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	4603      	mov	r3, r0
 8002c8a:	60b9      	str	r1, [r7, #8]
 8002c8c:	607a      	str	r2, [r7, #4]
 8002c8e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c90:	f7ff ff40 	bl	8002b14 <__NVIC_GetPriorityGrouping>
 8002c94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	68b9      	ldr	r1, [r7, #8]
 8002c9a:	6978      	ldr	r0, [r7, #20]
 8002c9c:	f7ff ff90 	bl	8002bc0 <NVIC_EncodePriority>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff ff5f 	bl	8002b6c <__NVIC_SetPriority>
}
 8002cae:	bf00      	nop
 8002cb0:	3718      	adds	r7, #24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b082      	sub	sp, #8
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff ff33 	bl	8002b30 <__NVIC_EnableIRQ>
}
 8002cca:	bf00      	nop
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b082      	sub	sp, #8
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7ff ffa4 	bl	8002c28 <SysTick_Config>
 8002ce0:	4603      	mov	r3, r0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
	...

08002cec <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002cf0:	f3bf 8f5f 	dmb	sy
}
 8002cf4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002cf6:	4b07      	ldr	r3, [pc, #28]	@ (8002d14 <HAL_MPU_Disable+0x28>)
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfa:	4a06      	ldr	r2, [pc, #24]	@ (8002d14 <HAL_MPU_Disable+0x28>)
 8002cfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d00:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002d02:	4b05      	ldr	r3, [pc, #20]	@ (8002d18 <HAL_MPU_Disable+0x2c>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	605a      	str	r2, [r3, #4]
}
 8002d08:	bf00      	nop
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	e000ed00 	.word	0xe000ed00
 8002d18:	e000ed90 	.word	0xe000ed90

08002d1c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002d24:	4a0b      	ldr	r2, [pc, #44]	@ (8002d54 <HAL_MPU_Enable+0x38>)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f043 0301 	orr.w	r3, r3, #1
 8002d2c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d58 <HAL_MPU_Enable+0x3c>)
 8002d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d32:	4a09      	ldr	r2, [pc, #36]	@ (8002d58 <HAL_MPU_Enable+0x3c>)
 8002d34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d38:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002d3a:	f3bf 8f4f 	dsb	sy
}
 8002d3e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d40:	f3bf 8f6f 	isb	sy
}
 8002d44:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	e000ed90 	.word	0xe000ed90
 8002d58:	e000ed00 	.word	0xe000ed00

08002d5c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	785a      	ldrb	r2, [r3, #1]
 8002d68:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd8 <HAL_MPU_ConfigRegion+0x7c>)
 8002d6a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd8 <HAL_MPU_ConfigRegion+0x7c>)
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	4a19      	ldr	r2, [pc, #100]	@ (8002dd8 <HAL_MPU_ConfigRegion+0x7c>)
 8002d72:	f023 0301 	bic.w	r3, r3, #1
 8002d76:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002d78:	4a17      	ldr	r2, [pc, #92]	@ (8002dd8 <HAL_MPU_ConfigRegion+0x7c>)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	7b1b      	ldrb	r3, [r3, #12]
 8002d84:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	7adb      	ldrb	r3, [r3, #11]
 8002d8a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	7a9b      	ldrb	r3, [r3, #10]
 8002d92:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002d94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	7b5b      	ldrb	r3, [r3, #13]
 8002d9a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002d9c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	7b9b      	ldrb	r3, [r3, #14]
 8002da2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002da4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	7bdb      	ldrb	r3, [r3, #15]
 8002daa:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002dac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	7a5b      	ldrb	r3, [r3, #9]
 8002db2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002db4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	7a1b      	ldrb	r3, [r3, #8]
 8002dba:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002dbc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	7812      	ldrb	r2, [r2, #0]
 8002dc2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002dc4:	4a04      	ldr	r2, [pc, #16]	@ (8002dd8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002dc6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002dc8:	6113      	str	r3, [r2, #16]
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	e000ed90 	.word	0xe000ed90

08002ddc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e237      	b.n	800325e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d004      	beq.n	8002e04 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2280      	movs	r2, #128	@ 0x80
 8002dfe:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e22c      	b.n	800325e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a5c      	ldr	r2, [pc, #368]	@ (8002f7c <HAL_DMA_Abort_IT+0x1a0>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d04a      	beq.n	8002ea4 <HAL_DMA_Abort_IT+0xc8>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a5b      	ldr	r2, [pc, #364]	@ (8002f80 <HAL_DMA_Abort_IT+0x1a4>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d045      	beq.n	8002ea4 <HAL_DMA_Abort_IT+0xc8>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a59      	ldr	r2, [pc, #356]	@ (8002f84 <HAL_DMA_Abort_IT+0x1a8>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d040      	beq.n	8002ea4 <HAL_DMA_Abort_IT+0xc8>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a58      	ldr	r2, [pc, #352]	@ (8002f88 <HAL_DMA_Abort_IT+0x1ac>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d03b      	beq.n	8002ea4 <HAL_DMA_Abort_IT+0xc8>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a56      	ldr	r2, [pc, #344]	@ (8002f8c <HAL_DMA_Abort_IT+0x1b0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d036      	beq.n	8002ea4 <HAL_DMA_Abort_IT+0xc8>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a55      	ldr	r2, [pc, #340]	@ (8002f90 <HAL_DMA_Abort_IT+0x1b4>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d031      	beq.n	8002ea4 <HAL_DMA_Abort_IT+0xc8>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a53      	ldr	r2, [pc, #332]	@ (8002f94 <HAL_DMA_Abort_IT+0x1b8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d02c      	beq.n	8002ea4 <HAL_DMA_Abort_IT+0xc8>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a52      	ldr	r2, [pc, #328]	@ (8002f98 <HAL_DMA_Abort_IT+0x1bc>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d027      	beq.n	8002ea4 <HAL_DMA_Abort_IT+0xc8>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a50      	ldr	r2, [pc, #320]	@ (8002f9c <HAL_DMA_Abort_IT+0x1c0>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d022      	beq.n	8002ea4 <HAL_DMA_Abort_IT+0xc8>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a4f      	ldr	r2, [pc, #316]	@ (8002fa0 <HAL_DMA_Abort_IT+0x1c4>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d01d      	beq.n	8002ea4 <HAL_DMA_Abort_IT+0xc8>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a4d      	ldr	r2, [pc, #308]	@ (8002fa4 <HAL_DMA_Abort_IT+0x1c8>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d018      	beq.n	8002ea4 <HAL_DMA_Abort_IT+0xc8>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a4c      	ldr	r2, [pc, #304]	@ (8002fa8 <HAL_DMA_Abort_IT+0x1cc>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d013      	beq.n	8002ea4 <HAL_DMA_Abort_IT+0xc8>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a4a      	ldr	r2, [pc, #296]	@ (8002fac <HAL_DMA_Abort_IT+0x1d0>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d00e      	beq.n	8002ea4 <HAL_DMA_Abort_IT+0xc8>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a49      	ldr	r2, [pc, #292]	@ (8002fb0 <HAL_DMA_Abort_IT+0x1d4>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d009      	beq.n	8002ea4 <HAL_DMA_Abort_IT+0xc8>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a47      	ldr	r2, [pc, #284]	@ (8002fb4 <HAL_DMA_Abort_IT+0x1d8>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d004      	beq.n	8002ea4 <HAL_DMA_Abort_IT+0xc8>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a46      	ldr	r2, [pc, #280]	@ (8002fb8 <HAL_DMA_Abort_IT+0x1dc>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d101      	bne.n	8002ea8 <HAL_DMA_Abort_IT+0xcc>
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e000      	b.n	8002eaa <HAL_DMA_Abort_IT+0xce>
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 8086 	beq.w	8002fbc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2204      	movs	r2, #4
 8002eb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a2f      	ldr	r2, [pc, #188]	@ (8002f7c <HAL_DMA_Abort_IT+0x1a0>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d04a      	beq.n	8002f58 <HAL_DMA_Abort_IT+0x17c>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a2e      	ldr	r2, [pc, #184]	@ (8002f80 <HAL_DMA_Abort_IT+0x1a4>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d045      	beq.n	8002f58 <HAL_DMA_Abort_IT+0x17c>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a2c      	ldr	r2, [pc, #176]	@ (8002f84 <HAL_DMA_Abort_IT+0x1a8>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d040      	beq.n	8002f58 <HAL_DMA_Abort_IT+0x17c>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a2b      	ldr	r2, [pc, #172]	@ (8002f88 <HAL_DMA_Abort_IT+0x1ac>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d03b      	beq.n	8002f58 <HAL_DMA_Abort_IT+0x17c>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a29      	ldr	r2, [pc, #164]	@ (8002f8c <HAL_DMA_Abort_IT+0x1b0>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d036      	beq.n	8002f58 <HAL_DMA_Abort_IT+0x17c>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a28      	ldr	r2, [pc, #160]	@ (8002f90 <HAL_DMA_Abort_IT+0x1b4>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d031      	beq.n	8002f58 <HAL_DMA_Abort_IT+0x17c>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a26      	ldr	r2, [pc, #152]	@ (8002f94 <HAL_DMA_Abort_IT+0x1b8>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d02c      	beq.n	8002f58 <HAL_DMA_Abort_IT+0x17c>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a25      	ldr	r2, [pc, #148]	@ (8002f98 <HAL_DMA_Abort_IT+0x1bc>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d027      	beq.n	8002f58 <HAL_DMA_Abort_IT+0x17c>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a23      	ldr	r2, [pc, #140]	@ (8002f9c <HAL_DMA_Abort_IT+0x1c0>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d022      	beq.n	8002f58 <HAL_DMA_Abort_IT+0x17c>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a22      	ldr	r2, [pc, #136]	@ (8002fa0 <HAL_DMA_Abort_IT+0x1c4>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d01d      	beq.n	8002f58 <HAL_DMA_Abort_IT+0x17c>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a20      	ldr	r2, [pc, #128]	@ (8002fa4 <HAL_DMA_Abort_IT+0x1c8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d018      	beq.n	8002f58 <HAL_DMA_Abort_IT+0x17c>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a1f      	ldr	r2, [pc, #124]	@ (8002fa8 <HAL_DMA_Abort_IT+0x1cc>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d013      	beq.n	8002f58 <HAL_DMA_Abort_IT+0x17c>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a1d      	ldr	r2, [pc, #116]	@ (8002fac <HAL_DMA_Abort_IT+0x1d0>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d00e      	beq.n	8002f58 <HAL_DMA_Abort_IT+0x17c>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a1c      	ldr	r2, [pc, #112]	@ (8002fb0 <HAL_DMA_Abort_IT+0x1d4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d009      	beq.n	8002f58 <HAL_DMA_Abort_IT+0x17c>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a1a      	ldr	r2, [pc, #104]	@ (8002fb4 <HAL_DMA_Abort_IT+0x1d8>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d004      	beq.n	8002f58 <HAL_DMA_Abort_IT+0x17c>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a19      	ldr	r2, [pc, #100]	@ (8002fb8 <HAL_DMA_Abort_IT+0x1dc>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d108      	bne.n	8002f6a <HAL_DMA_Abort_IT+0x18e>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0201 	bic.w	r2, r2, #1
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	e178      	b.n	800325c <HAL_DMA_Abort_IT+0x480>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0201 	bic.w	r2, r2, #1
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	e16f      	b.n	800325c <HAL_DMA_Abort_IT+0x480>
 8002f7c:	40020010 	.word	0x40020010
 8002f80:	40020028 	.word	0x40020028
 8002f84:	40020040 	.word	0x40020040
 8002f88:	40020058 	.word	0x40020058
 8002f8c:	40020070 	.word	0x40020070
 8002f90:	40020088 	.word	0x40020088
 8002f94:	400200a0 	.word	0x400200a0
 8002f98:	400200b8 	.word	0x400200b8
 8002f9c:	40020410 	.word	0x40020410
 8002fa0:	40020428 	.word	0x40020428
 8002fa4:	40020440 	.word	0x40020440
 8002fa8:	40020458 	.word	0x40020458
 8002fac:	40020470 	.word	0x40020470
 8002fb0:	40020488 	.word	0x40020488
 8002fb4:	400204a0 	.word	0x400204a0
 8002fb8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 020e 	bic.w	r2, r2, #14
 8002fca:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a6c      	ldr	r2, [pc, #432]	@ (8003184 <HAL_DMA_Abort_IT+0x3a8>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d04a      	beq.n	800306c <HAL_DMA_Abort_IT+0x290>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a6b      	ldr	r2, [pc, #428]	@ (8003188 <HAL_DMA_Abort_IT+0x3ac>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d045      	beq.n	800306c <HAL_DMA_Abort_IT+0x290>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a69      	ldr	r2, [pc, #420]	@ (800318c <HAL_DMA_Abort_IT+0x3b0>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d040      	beq.n	800306c <HAL_DMA_Abort_IT+0x290>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a68      	ldr	r2, [pc, #416]	@ (8003190 <HAL_DMA_Abort_IT+0x3b4>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d03b      	beq.n	800306c <HAL_DMA_Abort_IT+0x290>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a66      	ldr	r2, [pc, #408]	@ (8003194 <HAL_DMA_Abort_IT+0x3b8>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d036      	beq.n	800306c <HAL_DMA_Abort_IT+0x290>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a65      	ldr	r2, [pc, #404]	@ (8003198 <HAL_DMA_Abort_IT+0x3bc>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d031      	beq.n	800306c <HAL_DMA_Abort_IT+0x290>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a63      	ldr	r2, [pc, #396]	@ (800319c <HAL_DMA_Abort_IT+0x3c0>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d02c      	beq.n	800306c <HAL_DMA_Abort_IT+0x290>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a62      	ldr	r2, [pc, #392]	@ (80031a0 <HAL_DMA_Abort_IT+0x3c4>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d027      	beq.n	800306c <HAL_DMA_Abort_IT+0x290>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a60      	ldr	r2, [pc, #384]	@ (80031a4 <HAL_DMA_Abort_IT+0x3c8>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d022      	beq.n	800306c <HAL_DMA_Abort_IT+0x290>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a5f      	ldr	r2, [pc, #380]	@ (80031a8 <HAL_DMA_Abort_IT+0x3cc>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d01d      	beq.n	800306c <HAL_DMA_Abort_IT+0x290>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a5d      	ldr	r2, [pc, #372]	@ (80031ac <HAL_DMA_Abort_IT+0x3d0>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d018      	beq.n	800306c <HAL_DMA_Abort_IT+0x290>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a5c      	ldr	r2, [pc, #368]	@ (80031b0 <HAL_DMA_Abort_IT+0x3d4>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d013      	beq.n	800306c <HAL_DMA_Abort_IT+0x290>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a5a      	ldr	r2, [pc, #360]	@ (80031b4 <HAL_DMA_Abort_IT+0x3d8>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d00e      	beq.n	800306c <HAL_DMA_Abort_IT+0x290>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a59      	ldr	r2, [pc, #356]	@ (80031b8 <HAL_DMA_Abort_IT+0x3dc>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d009      	beq.n	800306c <HAL_DMA_Abort_IT+0x290>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a57      	ldr	r2, [pc, #348]	@ (80031bc <HAL_DMA_Abort_IT+0x3e0>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d004      	beq.n	800306c <HAL_DMA_Abort_IT+0x290>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a56      	ldr	r2, [pc, #344]	@ (80031c0 <HAL_DMA_Abort_IT+0x3e4>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d108      	bne.n	800307e <HAL_DMA_Abort_IT+0x2a2>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0201 	bic.w	r2, r2, #1
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	e007      	b.n	800308e <HAL_DMA_Abort_IT+0x2b2>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 0201 	bic.w	r2, r2, #1
 800308c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a3c      	ldr	r2, [pc, #240]	@ (8003184 <HAL_DMA_Abort_IT+0x3a8>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d072      	beq.n	800317e <HAL_DMA_Abort_IT+0x3a2>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a3a      	ldr	r2, [pc, #232]	@ (8003188 <HAL_DMA_Abort_IT+0x3ac>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d06d      	beq.n	800317e <HAL_DMA_Abort_IT+0x3a2>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a39      	ldr	r2, [pc, #228]	@ (800318c <HAL_DMA_Abort_IT+0x3b0>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d068      	beq.n	800317e <HAL_DMA_Abort_IT+0x3a2>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a37      	ldr	r2, [pc, #220]	@ (8003190 <HAL_DMA_Abort_IT+0x3b4>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d063      	beq.n	800317e <HAL_DMA_Abort_IT+0x3a2>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a36      	ldr	r2, [pc, #216]	@ (8003194 <HAL_DMA_Abort_IT+0x3b8>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d05e      	beq.n	800317e <HAL_DMA_Abort_IT+0x3a2>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a34      	ldr	r2, [pc, #208]	@ (8003198 <HAL_DMA_Abort_IT+0x3bc>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d059      	beq.n	800317e <HAL_DMA_Abort_IT+0x3a2>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a33      	ldr	r2, [pc, #204]	@ (800319c <HAL_DMA_Abort_IT+0x3c0>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d054      	beq.n	800317e <HAL_DMA_Abort_IT+0x3a2>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a31      	ldr	r2, [pc, #196]	@ (80031a0 <HAL_DMA_Abort_IT+0x3c4>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d04f      	beq.n	800317e <HAL_DMA_Abort_IT+0x3a2>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a30      	ldr	r2, [pc, #192]	@ (80031a4 <HAL_DMA_Abort_IT+0x3c8>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d04a      	beq.n	800317e <HAL_DMA_Abort_IT+0x3a2>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a2e      	ldr	r2, [pc, #184]	@ (80031a8 <HAL_DMA_Abort_IT+0x3cc>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d045      	beq.n	800317e <HAL_DMA_Abort_IT+0x3a2>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a2d      	ldr	r2, [pc, #180]	@ (80031ac <HAL_DMA_Abort_IT+0x3d0>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d040      	beq.n	800317e <HAL_DMA_Abort_IT+0x3a2>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a2b      	ldr	r2, [pc, #172]	@ (80031b0 <HAL_DMA_Abort_IT+0x3d4>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d03b      	beq.n	800317e <HAL_DMA_Abort_IT+0x3a2>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a2a      	ldr	r2, [pc, #168]	@ (80031b4 <HAL_DMA_Abort_IT+0x3d8>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d036      	beq.n	800317e <HAL_DMA_Abort_IT+0x3a2>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a28      	ldr	r2, [pc, #160]	@ (80031b8 <HAL_DMA_Abort_IT+0x3dc>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d031      	beq.n	800317e <HAL_DMA_Abort_IT+0x3a2>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a27      	ldr	r2, [pc, #156]	@ (80031bc <HAL_DMA_Abort_IT+0x3e0>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d02c      	beq.n	800317e <HAL_DMA_Abort_IT+0x3a2>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a25      	ldr	r2, [pc, #148]	@ (80031c0 <HAL_DMA_Abort_IT+0x3e4>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d027      	beq.n	800317e <HAL_DMA_Abort_IT+0x3a2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a24      	ldr	r2, [pc, #144]	@ (80031c4 <HAL_DMA_Abort_IT+0x3e8>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d022      	beq.n	800317e <HAL_DMA_Abort_IT+0x3a2>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a22      	ldr	r2, [pc, #136]	@ (80031c8 <HAL_DMA_Abort_IT+0x3ec>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d01d      	beq.n	800317e <HAL_DMA_Abort_IT+0x3a2>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a21      	ldr	r2, [pc, #132]	@ (80031cc <HAL_DMA_Abort_IT+0x3f0>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d018      	beq.n	800317e <HAL_DMA_Abort_IT+0x3a2>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a1f      	ldr	r2, [pc, #124]	@ (80031d0 <HAL_DMA_Abort_IT+0x3f4>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d013      	beq.n	800317e <HAL_DMA_Abort_IT+0x3a2>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a1e      	ldr	r2, [pc, #120]	@ (80031d4 <HAL_DMA_Abort_IT+0x3f8>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d00e      	beq.n	800317e <HAL_DMA_Abort_IT+0x3a2>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a1c      	ldr	r2, [pc, #112]	@ (80031d8 <HAL_DMA_Abort_IT+0x3fc>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d009      	beq.n	800317e <HAL_DMA_Abort_IT+0x3a2>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a1b      	ldr	r2, [pc, #108]	@ (80031dc <HAL_DMA_Abort_IT+0x400>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d004      	beq.n	800317e <HAL_DMA_Abort_IT+0x3a2>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a19      	ldr	r2, [pc, #100]	@ (80031e0 <HAL_DMA_Abort_IT+0x404>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d132      	bne.n	80031e4 <HAL_DMA_Abort_IT+0x408>
 800317e:	2301      	movs	r3, #1
 8003180:	e031      	b.n	80031e6 <HAL_DMA_Abort_IT+0x40a>
 8003182:	bf00      	nop
 8003184:	40020010 	.word	0x40020010
 8003188:	40020028 	.word	0x40020028
 800318c:	40020040 	.word	0x40020040
 8003190:	40020058 	.word	0x40020058
 8003194:	40020070 	.word	0x40020070
 8003198:	40020088 	.word	0x40020088
 800319c:	400200a0 	.word	0x400200a0
 80031a0:	400200b8 	.word	0x400200b8
 80031a4:	40020410 	.word	0x40020410
 80031a8:	40020428 	.word	0x40020428
 80031ac:	40020440 	.word	0x40020440
 80031b0:	40020458 	.word	0x40020458
 80031b4:	40020470 	.word	0x40020470
 80031b8:	40020488 	.word	0x40020488
 80031bc:	400204a0 	.word	0x400204a0
 80031c0:	400204b8 	.word	0x400204b8
 80031c4:	58025408 	.word	0x58025408
 80031c8:	5802541c 	.word	0x5802541c
 80031cc:	58025430 	.word	0x58025430
 80031d0:	58025444 	.word	0x58025444
 80031d4:	58025458 	.word	0x58025458
 80031d8:	5802546c 	.word	0x5802546c
 80031dc:	58025480 	.word	0x58025480
 80031e0:	58025494 	.word	0x58025494
 80031e4:	2300      	movs	r3, #0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d028      	beq.n	800323c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031f8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031fe:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003204:	f003 031f 	and.w	r3, r3, #31
 8003208:	2201      	movs	r2, #1
 800320a:	409a      	lsls	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003218:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00c      	beq.n	800323c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800322c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003230:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800323a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003250:	2b00      	cmp	r3, #0
 8003252:	d003      	beq.n	800325c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop

08003268 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8003268:	b480      	push	{r7}
 800326a:	b087      	sub	sp, #28
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	460b      	mov	r3, r1
 8003272:	607a      	str	r2, [r7, #4]
 8003274:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003276:	2300      	movs	r3, #0
 8003278:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e00a      	b.n	800329a <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8003284:	7afb      	ldrb	r3, [r7, #11]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d103      	bne.n	8003292 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	605a      	str	r2, [r3, #4]
      break;
 8003290:	e002      	b.n	8003298 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	75fb      	strb	r3, [r7, #23]
      break;
 8003296:	bf00      	nop
  }

  return status;
 8003298:	7dfb      	ldrb	r3, [r7, #23]
}
 800329a:	4618      	mov	r0, r3
 800329c:	371c      	adds	r7, #28
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e003      	b.n	80032c2 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80032c0:	2300      	movs	r3, #0
  }
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
	...

080032d0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	0c1b      	lsrs	r3, r3, #16
 80032de:	f003 0303 	and.w	r3, r3, #3
 80032e2:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 031f 	and.w	r3, r3, #31
 80032ec:	2201      	movs	r2, #1
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	011a      	lsls	r2, r3, #4
 80032f8:	4b0c      	ldr	r3, [pc, #48]	@ (800332c <HAL_EXTI_IRQHandler+0x5c>)
 80032fa:	4413      	add	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	4013      	ands	r3, r2
 8003306:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d009      	beq.n	8003322 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d002      	beq.n	8003322 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	4798      	blx	r3
    }
  }
}
 8003322:	bf00      	nop
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	58000088 	.word	0x58000088

08003330 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003330:	b480      	push	{r7}
 8003332:	b089      	sub	sp, #36	@ 0x24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800333a:	2300      	movs	r3, #0
 800333c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800333e:	4b89      	ldr	r3, [pc, #548]	@ (8003564 <HAL_GPIO_Init+0x234>)
 8003340:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003342:	e194      	b.n	800366e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	2101      	movs	r1, #1
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	fa01 f303 	lsl.w	r3, r1, r3
 8003350:	4013      	ands	r3, r2
 8003352:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	2b00      	cmp	r3, #0
 8003358:	f000 8186 	beq.w	8003668 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f003 0303 	and.w	r3, r3, #3
 8003364:	2b01      	cmp	r3, #1
 8003366:	d005      	beq.n	8003374 <HAL_GPIO_Init+0x44>
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f003 0303 	and.w	r3, r3, #3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d130      	bne.n	80033d6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	2203      	movs	r2, #3
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	43db      	mvns	r3, r3
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	4013      	ands	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	68da      	ldr	r2, [r3, #12]
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	4313      	orrs	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033aa:	2201      	movs	r2, #1
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43db      	mvns	r3, r3
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4013      	ands	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	091b      	lsrs	r3, r3, #4
 80033c0:	f003 0201 	and.w	r2, r3, #1
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f003 0303 	and.w	r3, r3, #3
 80033de:	2b03      	cmp	r3, #3
 80033e0:	d017      	beq.n	8003412 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	2203      	movs	r2, #3
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	43db      	mvns	r3, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4013      	ands	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	689a      	ldr	r2, [r3, #8]
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4313      	orrs	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d123      	bne.n	8003466 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	08da      	lsrs	r2, r3, #3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3208      	adds	r2, #8
 8003426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800342a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	220f      	movs	r2, #15
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	43db      	mvns	r3, r3
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	4013      	ands	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	691a      	ldr	r2, [r3, #16]
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	4313      	orrs	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	08da      	lsrs	r2, r3, #3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3208      	adds	r2, #8
 8003460:	69b9      	ldr	r1, [r7, #24]
 8003462:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	2203      	movs	r2, #3
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	43db      	mvns	r3, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4013      	ands	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f003 0203 	and.w	r2, r3, #3
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	fa02 f303 	lsl.w	r3, r2, r3
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	4313      	orrs	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 80e0 	beq.w	8003668 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034a8:	4b2f      	ldr	r3, [pc, #188]	@ (8003568 <HAL_GPIO_Init+0x238>)
 80034aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80034ae:	4a2e      	ldr	r2, [pc, #184]	@ (8003568 <HAL_GPIO_Init+0x238>)
 80034b0:	f043 0302 	orr.w	r3, r3, #2
 80034b4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80034b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003568 <HAL_GPIO_Init+0x238>)
 80034ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034c6:	4a29      	ldr	r2, [pc, #164]	@ (800356c <HAL_GPIO_Init+0x23c>)
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	089b      	lsrs	r3, r3, #2
 80034cc:	3302      	adds	r3, #2
 80034ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	220f      	movs	r2, #15
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	43db      	mvns	r3, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4013      	ands	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a20      	ldr	r2, [pc, #128]	@ (8003570 <HAL_GPIO_Init+0x240>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d052      	beq.n	8003598 <HAL_GPIO_Init+0x268>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a1f      	ldr	r2, [pc, #124]	@ (8003574 <HAL_GPIO_Init+0x244>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d031      	beq.n	800355e <HAL_GPIO_Init+0x22e>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a1e      	ldr	r2, [pc, #120]	@ (8003578 <HAL_GPIO_Init+0x248>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d02b      	beq.n	800355a <HAL_GPIO_Init+0x22a>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a1d      	ldr	r2, [pc, #116]	@ (800357c <HAL_GPIO_Init+0x24c>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d025      	beq.n	8003556 <HAL_GPIO_Init+0x226>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a1c      	ldr	r2, [pc, #112]	@ (8003580 <HAL_GPIO_Init+0x250>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d01f      	beq.n	8003552 <HAL_GPIO_Init+0x222>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a1b      	ldr	r2, [pc, #108]	@ (8003584 <HAL_GPIO_Init+0x254>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d019      	beq.n	800354e <HAL_GPIO_Init+0x21e>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a1a      	ldr	r2, [pc, #104]	@ (8003588 <HAL_GPIO_Init+0x258>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d013      	beq.n	800354a <HAL_GPIO_Init+0x21a>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a19      	ldr	r2, [pc, #100]	@ (800358c <HAL_GPIO_Init+0x25c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d00d      	beq.n	8003546 <HAL_GPIO_Init+0x216>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a18      	ldr	r2, [pc, #96]	@ (8003590 <HAL_GPIO_Init+0x260>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d007      	beq.n	8003542 <HAL_GPIO_Init+0x212>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a17      	ldr	r2, [pc, #92]	@ (8003594 <HAL_GPIO_Init+0x264>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d101      	bne.n	800353e <HAL_GPIO_Init+0x20e>
 800353a:	2309      	movs	r3, #9
 800353c:	e02d      	b.n	800359a <HAL_GPIO_Init+0x26a>
 800353e:	230a      	movs	r3, #10
 8003540:	e02b      	b.n	800359a <HAL_GPIO_Init+0x26a>
 8003542:	2308      	movs	r3, #8
 8003544:	e029      	b.n	800359a <HAL_GPIO_Init+0x26a>
 8003546:	2307      	movs	r3, #7
 8003548:	e027      	b.n	800359a <HAL_GPIO_Init+0x26a>
 800354a:	2306      	movs	r3, #6
 800354c:	e025      	b.n	800359a <HAL_GPIO_Init+0x26a>
 800354e:	2305      	movs	r3, #5
 8003550:	e023      	b.n	800359a <HAL_GPIO_Init+0x26a>
 8003552:	2304      	movs	r3, #4
 8003554:	e021      	b.n	800359a <HAL_GPIO_Init+0x26a>
 8003556:	2303      	movs	r3, #3
 8003558:	e01f      	b.n	800359a <HAL_GPIO_Init+0x26a>
 800355a:	2302      	movs	r3, #2
 800355c:	e01d      	b.n	800359a <HAL_GPIO_Init+0x26a>
 800355e:	2301      	movs	r3, #1
 8003560:	e01b      	b.n	800359a <HAL_GPIO_Init+0x26a>
 8003562:	bf00      	nop
 8003564:	58000080 	.word	0x58000080
 8003568:	58024400 	.word	0x58024400
 800356c:	58000400 	.word	0x58000400
 8003570:	58020000 	.word	0x58020000
 8003574:	58020400 	.word	0x58020400
 8003578:	58020800 	.word	0x58020800
 800357c:	58020c00 	.word	0x58020c00
 8003580:	58021000 	.word	0x58021000
 8003584:	58021400 	.word	0x58021400
 8003588:	58021800 	.word	0x58021800
 800358c:	58021c00 	.word	0x58021c00
 8003590:	58022000 	.word	0x58022000
 8003594:	58022400 	.word	0x58022400
 8003598:	2300      	movs	r3, #0
 800359a:	69fa      	ldr	r2, [r7, #28]
 800359c:	f002 0203 	and.w	r2, r2, #3
 80035a0:	0092      	lsls	r2, r2, #2
 80035a2:	4093      	lsls	r3, r2
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035aa:	4938      	ldr	r1, [pc, #224]	@ (800368c <HAL_GPIO_Init+0x35c>)
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	089b      	lsrs	r3, r3, #2
 80035b0:	3302      	adds	r3, #2
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	43db      	mvns	r3, r3
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	4013      	ands	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	4313      	orrs	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80035de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80035e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	43db      	mvns	r3, r3
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	4013      	ands	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	4313      	orrs	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800360c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	43db      	mvns	r3, r3
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	4013      	ands	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d003      	beq.n	8003638 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	4313      	orrs	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	43db      	mvns	r3, r3
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	4013      	ands	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	4313      	orrs	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	3301      	adds	r3, #1
 800366c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	fa22 f303 	lsr.w	r3, r2, r3
 8003678:	2b00      	cmp	r3, #0
 800367a:	f47f ae63 	bne.w	8003344 <HAL_GPIO_Init+0x14>
  }
}
 800367e:	bf00      	nop
 8003680:	bf00      	nop
 8003682:	3724      	adds	r7, #36	@ 0x24
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	58000400 	.word	0x58000400

08003690 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	460b      	mov	r3, r1
 800369a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	691a      	ldr	r2, [r3, #16]
 80036a0:	887b      	ldrh	r3, [r7, #2]
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d002      	beq.n	80036ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036a8:	2301      	movs	r3, #1
 80036aa:	73fb      	strb	r3, [r7, #15]
 80036ac:	e001      	b.n	80036b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036ae:	2300      	movs	r3, #0
 80036b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3714      	adds	r7, #20
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	460b      	mov	r3, r1
 80036ca:	807b      	strh	r3, [r7, #2]
 80036cc:	4613      	mov	r3, r2
 80036ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036d0:	787b      	ldrb	r3, [r7, #1]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036d6:	887a      	ldrh	r2, [r7, #2]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80036dc:	e003      	b.n	80036e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80036de:	887b      	ldrh	r3, [r7, #2]
 80036e0:	041a      	lsls	r2, r3, #16
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	619a      	str	r2, [r3, #24]
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b085      	sub	sp, #20
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	460b      	mov	r3, r1
 80036fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003704:	887a      	ldrh	r2, [r7, #2]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	4013      	ands	r3, r2
 800370a:	041a      	lsls	r2, r3, #16
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	43d9      	mvns	r1, r3
 8003710:	887b      	ldrh	r3, [r7, #2]
 8003712:	400b      	ands	r3, r1
 8003714:	431a      	orrs	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	619a      	str	r2, [r3, #24]
}
 800371a:	bf00      	nop
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b082      	sub	sp, #8
 800372a:	af00      	add	r7, sp, #0
 800372c:	4603      	mov	r3, r0
 800372e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003730:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003734:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003738:	88fb      	ldrh	r3, [r7, #6]
 800373a:	4013      	ands	r3, r2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d008      	beq.n	8003752 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003740:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003744:	88fb      	ldrh	r3, [r7, #6]
 8003746:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800374a:	88fb      	ldrh	r3, [r7, #6]
 800374c:	4618      	mov	r0, r3
 800374e:	f7fe fbad 	bl	8001eac <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003752:	bf00      	nop
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
	...

0800375c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003764:	4b19      	ldr	r3, [pc, #100]	@ (80037cc <HAL_PWREx_ConfigSupply+0x70>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b04      	cmp	r3, #4
 800376e:	d00a      	beq.n	8003786 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003770:	4b16      	ldr	r3, [pc, #88]	@ (80037cc <HAL_PWREx_ConfigSupply+0x70>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	429a      	cmp	r2, r3
 800377c:	d001      	beq.n	8003782 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e01f      	b.n	80037c2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003782:	2300      	movs	r3, #0
 8003784:	e01d      	b.n	80037c2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003786:	4b11      	ldr	r3, [pc, #68]	@ (80037cc <HAL_PWREx_ConfigSupply+0x70>)
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	f023 0207 	bic.w	r2, r3, #7
 800378e:	490f      	ldr	r1, [pc, #60]	@ (80037cc <HAL_PWREx_ConfigSupply+0x70>)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4313      	orrs	r3, r2
 8003794:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003796:	f7ff f95d 	bl	8002a54 <HAL_GetTick>
 800379a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800379c:	e009      	b.n	80037b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800379e:	f7ff f959 	bl	8002a54 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80037ac:	d901      	bls.n	80037b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e007      	b.n	80037c2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80037b2:	4b06      	ldr	r3, [pc, #24]	@ (80037cc <HAL_PWREx_ConfigSupply+0x70>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037be:	d1ee      	bne.n	800379e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	58024800 	.word	0x58024800

080037d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b08c      	sub	sp, #48	@ 0x30
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d102      	bne.n	80037e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	f000 bc48 	b.w	8004074 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 8088 	beq.w	8003902 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037f2:	4b99      	ldr	r3, [pc, #612]	@ (8003a58 <HAL_RCC_OscConfig+0x288>)
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80037fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037fc:	4b96      	ldr	r3, [pc, #600]	@ (8003a58 <HAL_RCC_OscConfig+0x288>)
 80037fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003800:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003804:	2b10      	cmp	r3, #16
 8003806:	d007      	beq.n	8003818 <HAL_RCC_OscConfig+0x48>
 8003808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800380a:	2b18      	cmp	r3, #24
 800380c:	d111      	bne.n	8003832 <HAL_RCC_OscConfig+0x62>
 800380e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003810:	f003 0303 	and.w	r3, r3, #3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d10c      	bne.n	8003832 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003818:	4b8f      	ldr	r3, [pc, #572]	@ (8003a58 <HAL_RCC_OscConfig+0x288>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d06d      	beq.n	8003900 <HAL_RCC_OscConfig+0x130>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d169      	bne.n	8003900 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	f000 bc21 	b.w	8004074 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800383a:	d106      	bne.n	800384a <HAL_RCC_OscConfig+0x7a>
 800383c:	4b86      	ldr	r3, [pc, #536]	@ (8003a58 <HAL_RCC_OscConfig+0x288>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a85      	ldr	r2, [pc, #532]	@ (8003a58 <HAL_RCC_OscConfig+0x288>)
 8003842:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003846:	6013      	str	r3, [r2, #0]
 8003848:	e02e      	b.n	80038a8 <HAL_RCC_OscConfig+0xd8>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10c      	bne.n	800386c <HAL_RCC_OscConfig+0x9c>
 8003852:	4b81      	ldr	r3, [pc, #516]	@ (8003a58 <HAL_RCC_OscConfig+0x288>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a80      	ldr	r2, [pc, #512]	@ (8003a58 <HAL_RCC_OscConfig+0x288>)
 8003858:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	4b7e      	ldr	r3, [pc, #504]	@ (8003a58 <HAL_RCC_OscConfig+0x288>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a7d      	ldr	r2, [pc, #500]	@ (8003a58 <HAL_RCC_OscConfig+0x288>)
 8003864:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003868:	6013      	str	r3, [r2, #0]
 800386a:	e01d      	b.n	80038a8 <HAL_RCC_OscConfig+0xd8>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003874:	d10c      	bne.n	8003890 <HAL_RCC_OscConfig+0xc0>
 8003876:	4b78      	ldr	r3, [pc, #480]	@ (8003a58 <HAL_RCC_OscConfig+0x288>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a77      	ldr	r2, [pc, #476]	@ (8003a58 <HAL_RCC_OscConfig+0x288>)
 800387c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	4b75      	ldr	r3, [pc, #468]	@ (8003a58 <HAL_RCC_OscConfig+0x288>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a74      	ldr	r2, [pc, #464]	@ (8003a58 <HAL_RCC_OscConfig+0x288>)
 8003888:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800388c:	6013      	str	r3, [r2, #0]
 800388e:	e00b      	b.n	80038a8 <HAL_RCC_OscConfig+0xd8>
 8003890:	4b71      	ldr	r3, [pc, #452]	@ (8003a58 <HAL_RCC_OscConfig+0x288>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a70      	ldr	r2, [pc, #448]	@ (8003a58 <HAL_RCC_OscConfig+0x288>)
 8003896:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800389a:	6013      	str	r3, [r2, #0]
 800389c:	4b6e      	ldr	r3, [pc, #440]	@ (8003a58 <HAL_RCC_OscConfig+0x288>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a6d      	ldr	r2, [pc, #436]	@ (8003a58 <HAL_RCC_OscConfig+0x288>)
 80038a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d013      	beq.n	80038d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b0:	f7ff f8d0 	bl	8002a54 <HAL_GetTick>
 80038b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038b8:	f7ff f8cc 	bl	8002a54 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b64      	cmp	r3, #100	@ 0x64
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e3d4      	b.n	8004074 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038ca:	4b63      	ldr	r3, [pc, #396]	@ (8003a58 <HAL_RCC_OscConfig+0x288>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0f0      	beq.n	80038b8 <HAL_RCC_OscConfig+0xe8>
 80038d6:	e014      	b.n	8003902 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d8:	f7ff f8bc 	bl	8002a54 <HAL_GetTick>
 80038dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038e0:	f7ff f8b8 	bl	8002a54 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b64      	cmp	r3, #100	@ 0x64
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e3c0      	b.n	8004074 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038f2:	4b59      	ldr	r3, [pc, #356]	@ (8003a58 <HAL_RCC_OscConfig+0x288>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1f0      	bne.n	80038e0 <HAL_RCC_OscConfig+0x110>
 80038fe:	e000      	b.n	8003902 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	f000 80ca 	beq.w	8003aa4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003910:	4b51      	ldr	r3, [pc, #324]	@ (8003a58 <HAL_RCC_OscConfig+0x288>)
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003918:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800391a:	4b4f      	ldr	r3, [pc, #316]	@ (8003a58 <HAL_RCC_OscConfig+0x288>)
 800391c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800391e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003920:	6a3b      	ldr	r3, [r7, #32]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d007      	beq.n	8003936 <HAL_RCC_OscConfig+0x166>
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	2b18      	cmp	r3, #24
 800392a:	d156      	bne.n	80039da <HAL_RCC_OscConfig+0x20a>
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d151      	bne.n	80039da <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003936:	4b48      	ldr	r3, [pc, #288]	@ (8003a58 <HAL_RCC_OscConfig+0x288>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0304 	and.w	r3, r3, #4
 800393e:	2b00      	cmp	r3, #0
 8003940:	d005      	beq.n	800394e <HAL_RCC_OscConfig+0x17e>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e392      	b.n	8004074 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800394e:	4b42      	ldr	r3, [pc, #264]	@ (8003a58 <HAL_RCC_OscConfig+0x288>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f023 0219 	bic.w	r2, r3, #25
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	493f      	ldr	r1, [pc, #252]	@ (8003a58 <HAL_RCC_OscConfig+0x288>)
 800395c:	4313      	orrs	r3, r2
 800395e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003960:	f7ff f878 	bl	8002a54 <HAL_GetTick>
 8003964:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003968:	f7ff f874 	bl	8002a54 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e37c      	b.n	8004074 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800397a:	4b37      	ldr	r3, [pc, #220]	@ (8003a58 <HAL_RCC_OscConfig+0x288>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0304 	and.w	r3, r3, #4
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0f0      	beq.n	8003968 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003986:	f7ff f895 	bl	8002ab4 <HAL_GetREVID>
 800398a:	4603      	mov	r3, r0
 800398c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003990:	4293      	cmp	r3, r2
 8003992:	d817      	bhi.n	80039c4 <HAL_RCC_OscConfig+0x1f4>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	2b40      	cmp	r3, #64	@ 0x40
 800399a:	d108      	bne.n	80039ae <HAL_RCC_OscConfig+0x1de>
 800399c:	4b2e      	ldr	r3, [pc, #184]	@ (8003a58 <HAL_RCC_OscConfig+0x288>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80039a4:	4a2c      	ldr	r2, [pc, #176]	@ (8003a58 <HAL_RCC_OscConfig+0x288>)
 80039a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039aa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039ac:	e07a      	b.n	8003aa4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003a58 <HAL_RCC_OscConfig+0x288>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	031b      	lsls	r3, r3, #12
 80039bc:	4926      	ldr	r1, [pc, #152]	@ (8003a58 <HAL_RCC_OscConfig+0x288>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039c2:	e06f      	b.n	8003aa4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c4:	4b24      	ldr	r3, [pc, #144]	@ (8003a58 <HAL_RCC_OscConfig+0x288>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	061b      	lsls	r3, r3, #24
 80039d2:	4921      	ldr	r1, [pc, #132]	@ (8003a58 <HAL_RCC_OscConfig+0x288>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039d8:	e064      	b.n	8003aa4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d047      	beq.n	8003a72 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80039e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003a58 <HAL_RCC_OscConfig+0x288>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f023 0219 	bic.w	r2, r3, #25
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	491a      	ldr	r1, [pc, #104]	@ (8003a58 <HAL_RCC_OscConfig+0x288>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f4:	f7ff f82e 	bl	8002a54 <HAL_GetTick>
 80039f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039fc:	f7ff f82a 	bl	8002a54 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e332      	b.n	8004074 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a0e:	4b12      	ldr	r3, [pc, #72]	@ (8003a58 <HAL_RCC_OscConfig+0x288>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0304 	and.w	r3, r3, #4
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0f0      	beq.n	80039fc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a1a:	f7ff f84b 	bl	8002ab4 <HAL_GetREVID>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d819      	bhi.n	8003a5c <HAL_RCC_OscConfig+0x28c>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	2b40      	cmp	r3, #64	@ 0x40
 8003a2e:	d108      	bne.n	8003a42 <HAL_RCC_OscConfig+0x272>
 8003a30:	4b09      	ldr	r3, [pc, #36]	@ (8003a58 <HAL_RCC_OscConfig+0x288>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003a38:	4a07      	ldr	r2, [pc, #28]	@ (8003a58 <HAL_RCC_OscConfig+0x288>)
 8003a3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a3e:	6053      	str	r3, [r2, #4]
 8003a40:	e030      	b.n	8003aa4 <HAL_RCC_OscConfig+0x2d4>
 8003a42:	4b05      	ldr	r3, [pc, #20]	@ (8003a58 <HAL_RCC_OscConfig+0x288>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	031b      	lsls	r3, r3, #12
 8003a50:	4901      	ldr	r1, [pc, #4]	@ (8003a58 <HAL_RCC_OscConfig+0x288>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	604b      	str	r3, [r1, #4]
 8003a56:	e025      	b.n	8003aa4 <HAL_RCC_OscConfig+0x2d4>
 8003a58:	58024400 	.word	0x58024400
 8003a5c:	4b9a      	ldr	r3, [pc, #616]	@ (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	061b      	lsls	r3, r3, #24
 8003a6a:	4997      	ldr	r1, [pc, #604]	@ (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	604b      	str	r3, [r1, #4]
 8003a70:	e018      	b.n	8003aa4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a72:	4b95      	ldr	r3, [pc, #596]	@ (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a94      	ldr	r2, [pc, #592]	@ (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003a78:	f023 0301 	bic.w	r3, r3, #1
 8003a7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7e:	f7fe ffe9 	bl	8002a54 <HAL_GetTick>
 8003a82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a84:	e008      	b.n	8003a98 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a86:	f7fe ffe5 	bl	8002a54 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e2ed      	b.n	8004074 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a98:	4b8b      	ldr	r3, [pc, #556]	@ (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1f0      	bne.n	8003a86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0310 	and.w	r3, r3, #16
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 80a9 	beq.w	8003c04 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ab2:	4b85      	ldr	r3, [pc, #532]	@ (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003aba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003abc:	4b82      	ldr	r3, [pc, #520]	@ (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d007      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x308>
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	2b18      	cmp	r3, #24
 8003acc:	d13a      	bne.n	8003b44 <HAL_RCC_OscConfig+0x374>
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f003 0303 	and.w	r3, r3, #3
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d135      	bne.n	8003b44 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ad8:	4b7b      	ldr	r3, [pc, #492]	@ (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <HAL_RCC_OscConfig+0x320>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	69db      	ldr	r3, [r3, #28]
 8003ae8:	2b80      	cmp	r3, #128	@ 0x80
 8003aea:	d001      	beq.n	8003af0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e2c1      	b.n	8004074 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003af0:	f7fe ffe0 	bl	8002ab4 <HAL_GetREVID>
 8003af4:	4603      	mov	r3, r0
 8003af6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d817      	bhi.n	8003b2e <HAL_RCC_OscConfig+0x35e>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	2b20      	cmp	r3, #32
 8003b04:	d108      	bne.n	8003b18 <HAL_RCC_OscConfig+0x348>
 8003b06:	4b70      	ldr	r3, [pc, #448]	@ (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003b0e:	4a6e      	ldr	r2, [pc, #440]	@ (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003b10:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003b14:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b16:	e075      	b.n	8003c04 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b18:	4b6b      	ldr	r3, [pc, #428]	@ (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	069b      	lsls	r3, r3, #26
 8003b26:	4968      	ldr	r1, [pc, #416]	@ (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b2c:	e06a      	b.n	8003c04 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b2e:	4b66      	ldr	r3, [pc, #408]	@ (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	061b      	lsls	r3, r3, #24
 8003b3c:	4962      	ldr	r1, [pc, #392]	@ (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b42:	e05f      	b.n	8003c04 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d042      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003b4c:	4b5e      	ldr	r3, [pc, #376]	@ (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a5d      	ldr	r2, [pc, #372]	@ (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003b52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b58:	f7fe ff7c 	bl	8002a54 <HAL_GetTick>
 8003b5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003b60:	f7fe ff78 	bl	8002a54 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e280      	b.n	8004074 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b72:	4b55      	ldr	r3, [pc, #340]	@ (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0f0      	beq.n	8003b60 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b7e:	f7fe ff99 	bl	8002ab4 <HAL_GetREVID>
 8003b82:	4603      	mov	r3, r0
 8003b84:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d817      	bhi.n	8003bbc <HAL_RCC_OscConfig+0x3ec>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	2b20      	cmp	r3, #32
 8003b92:	d108      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x3d6>
 8003b94:	4b4c      	ldr	r3, [pc, #304]	@ (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003b9c:	4a4a      	ldr	r2, [pc, #296]	@ (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003b9e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003ba2:	6053      	str	r3, [r2, #4]
 8003ba4:	e02e      	b.n	8003c04 <HAL_RCC_OscConfig+0x434>
 8003ba6:	4b48      	ldr	r3, [pc, #288]	@ (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	069b      	lsls	r3, r3, #26
 8003bb4:	4944      	ldr	r1, [pc, #272]	@ (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	604b      	str	r3, [r1, #4]
 8003bba:	e023      	b.n	8003c04 <HAL_RCC_OscConfig+0x434>
 8003bbc:	4b42      	ldr	r3, [pc, #264]	@ (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	061b      	lsls	r3, r3, #24
 8003bca:	493f      	ldr	r1, [pc, #252]	@ (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	60cb      	str	r3, [r1, #12]
 8003bd0:	e018      	b.n	8003c04 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003bd2:	4b3d      	ldr	r3, [pc, #244]	@ (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a3c      	ldr	r2, [pc, #240]	@ (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003bd8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bde:	f7fe ff39 	bl	8002a54 <HAL_GetTick>
 8003be2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003be6:	f7fe ff35 	bl	8002a54 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e23d      	b.n	8004074 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003bf8:	4b33      	ldr	r3, [pc, #204]	@ (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1f0      	bne.n	8003be6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0308 	and.w	r3, r3, #8
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d036      	beq.n	8003c7e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d019      	beq.n	8003c4c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c18:	4b2b      	ldr	r3, [pc, #172]	@ (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003c1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c1c:	4a2a      	ldr	r2, [pc, #168]	@ (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003c1e:	f043 0301 	orr.w	r3, r3, #1
 8003c22:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c24:	f7fe ff16 	bl	8002a54 <HAL_GetTick>
 8003c28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c2c:	f7fe ff12 	bl	8002a54 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e21a      	b.n	8004074 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c3e:	4b22      	ldr	r3, [pc, #136]	@ (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003c40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0f0      	beq.n	8003c2c <HAL_RCC_OscConfig+0x45c>
 8003c4a:	e018      	b.n	8003c7e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003c4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c50:	4a1d      	ldr	r2, [pc, #116]	@ (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003c52:	f023 0301 	bic.w	r3, r3, #1
 8003c56:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c58:	f7fe fefc 	bl	8002a54 <HAL_GetTick>
 8003c5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c60:	f7fe fef8 	bl	8002a54 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e200      	b.n	8004074 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c72:	4b15      	ldr	r3, [pc, #84]	@ (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003c74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1f0      	bne.n	8003c60 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0320 	and.w	r3, r3, #32
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d039      	beq.n	8003cfe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d01c      	beq.n	8003ccc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c92:	4b0d      	ldr	r3, [pc, #52]	@ (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a0c      	ldr	r2, [pc, #48]	@ (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003c98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003c9c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003c9e:	f7fe fed9 	bl	8002a54 <HAL_GetTick>
 8003ca2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ca4:	e008      	b.n	8003cb8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ca6:	f7fe fed5 	bl	8002a54 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e1dd      	b.n	8004074 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003cb8:	4b03      	ldr	r3, [pc, #12]	@ (8003cc8 <HAL_RCC_OscConfig+0x4f8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0f0      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x4d6>
 8003cc4:	e01b      	b.n	8003cfe <HAL_RCC_OscConfig+0x52e>
 8003cc6:	bf00      	nop
 8003cc8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ccc:	4b9b      	ldr	r3, [pc, #620]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a9a      	ldr	r2, [pc, #616]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003cd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003cd6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003cd8:	f7fe febc 	bl	8002a54 <HAL_GetTick>
 8003cdc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ce0:	f7fe feb8 	bl	8002a54 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e1c0      	b.n	8004074 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003cf2:	4b92      	ldr	r3, [pc, #584]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1f0      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0304 	and.w	r3, r3, #4
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 8081 	beq.w	8003e0e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d0c:	4b8c      	ldr	r3, [pc, #560]	@ (8003f40 <HAL_RCC_OscConfig+0x770>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a8b      	ldr	r2, [pc, #556]	@ (8003f40 <HAL_RCC_OscConfig+0x770>)
 8003d12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d18:	f7fe fe9c 	bl	8002a54 <HAL_GetTick>
 8003d1c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d20:	f7fe fe98 	bl	8002a54 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b64      	cmp	r3, #100	@ 0x64
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e1a0      	b.n	8004074 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d32:	4b83      	ldr	r3, [pc, #524]	@ (8003f40 <HAL_RCC_OscConfig+0x770>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0f0      	beq.n	8003d20 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d106      	bne.n	8003d54 <HAL_RCC_OscConfig+0x584>
 8003d46:	4b7d      	ldr	r3, [pc, #500]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d4a:	4a7c      	ldr	r2, [pc, #496]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003d4c:	f043 0301 	orr.w	r3, r3, #1
 8003d50:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d52:	e02d      	b.n	8003db0 <HAL_RCC_OscConfig+0x5e0>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10c      	bne.n	8003d76 <HAL_RCC_OscConfig+0x5a6>
 8003d5c:	4b77      	ldr	r3, [pc, #476]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d60:	4a76      	ldr	r2, [pc, #472]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003d62:	f023 0301 	bic.w	r3, r3, #1
 8003d66:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d68:	4b74      	ldr	r3, [pc, #464]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d6c:	4a73      	ldr	r2, [pc, #460]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003d6e:	f023 0304 	bic.w	r3, r3, #4
 8003d72:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d74:	e01c      	b.n	8003db0 <HAL_RCC_OscConfig+0x5e0>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	2b05      	cmp	r3, #5
 8003d7c:	d10c      	bne.n	8003d98 <HAL_RCC_OscConfig+0x5c8>
 8003d7e:	4b6f      	ldr	r3, [pc, #444]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d82:	4a6e      	ldr	r2, [pc, #440]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003d84:	f043 0304 	orr.w	r3, r3, #4
 8003d88:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d8a:	4b6c      	ldr	r3, [pc, #432]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d8e:	4a6b      	ldr	r2, [pc, #428]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003d90:	f043 0301 	orr.w	r3, r3, #1
 8003d94:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d96:	e00b      	b.n	8003db0 <HAL_RCC_OscConfig+0x5e0>
 8003d98:	4b68      	ldr	r3, [pc, #416]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d9c:	4a67      	ldr	r2, [pc, #412]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003d9e:	f023 0301 	bic.w	r3, r3, #1
 8003da2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003da4:	4b65      	ldr	r3, [pc, #404]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da8:	4a64      	ldr	r2, [pc, #400]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003daa:	f023 0304 	bic.w	r3, r3, #4
 8003dae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d015      	beq.n	8003de4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db8:	f7fe fe4c 	bl	8002a54 <HAL_GetTick>
 8003dbc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dbe:	e00a      	b.n	8003dd6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc0:	f7fe fe48 	bl	8002a54 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e14e      	b.n	8004074 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dd6:	4b59      	ldr	r3, [pc, #356]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0ee      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x5f0>
 8003de2:	e014      	b.n	8003e0e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de4:	f7fe fe36 	bl	8002a54 <HAL_GetTick>
 8003de8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003dea:	e00a      	b.n	8003e02 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dec:	f7fe fe32 	bl	8002a54 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e138      	b.n	8004074 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e02:	4b4e      	ldr	r3, [pc, #312]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1ee      	bne.n	8003dec <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 812d 	beq.w	8004072 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003e18:	4b48      	ldr	r3, [pc, #288]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e20:	2b18      	cmp	r3, #24
 8003e22:	f000 80bd 	beq.w	8003fa0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	f040 809e 	bne.w	8003f6c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e30:	4b42      	ldr	r3, [pc, #264]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a41      	ldr	r2, [pc, #260]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003e36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3c:	f7fe fe0a 	bl	8002a54 <HAL_GetTick>
 8003e40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e44:	f7fe fe06 	bl	8002a54 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e10e      	b.n	8004074 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e56:	4b39      	ldr	r3, [pc, #228]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1f0      	bne.n	8003e44 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e62:	4b36      	ldr	r3, [pc, #216]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003e64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e66:	4b37      	ldr	r3, [pc, #220]	@ (8003f44 <HAL_RCC_OscConfig+0x774>)
 8003e68:	4013      	ands	r3, r2
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003e72:	0112      	lsls	r2, r2, #4
 8003e74:	430a      	orrs	r2, r1
 8003e76:	4931      	ldr	r1, [pc, #196]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	628b      	str	r3, [r1, #40]	@ 0x28
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e80:	3b01      	subs	r3, #1
 8003e82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	025b      	lsls	r3, r3, #9
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	431a      	orrs	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e96:	3b01      	subs	r3, #1
 8003e98:	041b      	lsls	r3, r3, #16
 8003e9a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	061b      	lsls	r3, r3, #24
 8003ea8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003eac:	4923      	ldr	r1, [pc, #140]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003eb2:	4b22      	ldr	r3, [pc, #136]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb6:	4a21      	ldr	r2, [pc, #132]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003eb8:	f023 0301 	bic.w	r3, r3, #1
 8003ebc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003ebe:	4b1f      	ldr	r3, [pc, #124]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003ec0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ec2:	4b21      	ldr	r3, [pc, #132]	@ (8003f48 <HAL_RCC_OscConfig+0x778>)
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003eca:	00d2      	lsls	r2, r2, #3
 8003ecc:	491b      	ldr	r1, [pc, #108]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003ed2:	4b1a      	ldr	r3, [pc, #104]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed6:	f023 020c 	bic.w	r2, r3, #12
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ede:	4917      	ldr	r1, [pc, #92]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003ee4:	4b15      	ldr	r3, [pc, #84]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee8:	f023 0202 	bic.w	r2, r3, #2
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef0:	4912      	ldr	r1, [pc, #72]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003ef6:	4b11      	ldr	r3, [pc, #68]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003efa:	4a10      	ldr	r2, [pc, #64]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003efc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f02:	4b0e      	ldr	r3, [pc, #56]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f06:	4a0d      	ldr	r2, [pc, #52]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003f08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f12:	4a0a      	ldr	r2, [pc, #40]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003f14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003f1a:	4b08      	ldr	r3, [pc, #32]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1e:	4a07      	ldr	r2, [pc, #28]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003f20:	f043 0301 	orr.w	r3, r3, #1
 8003f24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f26:	4b05      	ldr	r3, [pc, #20]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a04      	ldr	r2, [pc, #16]	@ (8003f3c <HAL_RCC_OscConfig+0x76c>)
 8003f2c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f32:	f7fe fd8f 	bl	8002a54 <HAL_GetTick>
 8003f36:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f38:	e011      	b.n	8003f5e <HAL_RCC_OscConfig+0x78e>
 8003f3a:	bf00      	nop
 8003f3c:	58024400 	.word	0x58024400
 8003f40:	58024800 	.word	0x58024800
 8003f44:	fffffc0c 	.word	0xfffffc0c
 8003f48:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f4c:	f7fe fd82 	bl	8002a54 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e08a      	b.n	8004074 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f5e:	4b47      	ldr	r3, [pc, #284]	@ (800407c <HAL_RCC_OscConfig+0x8ac>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d0f0      	beq.n	8003f4c <HAL_RCC_OscConfig+0x77c>
 8003f6a:	e082      	b.n	8004072 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f6c:	4b43      	ldr	r3, [pc, #268]	@ (800407c <HAL_RCC_OscConfig+0x8ac>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a42      	ldr	r2, [pc, #264]	@ (800407c <HAL_RCC_OscConfig+0x8ac>)
 8003f72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f78:	f7fe fd6c 	bl	8002a54 <HAL_GetTick>
 8003f7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f80:	f7fe fd68 	bl	8002a54 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e070      	b.n	8004074 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f92:	4b3a      	ldr	r3, [pc, #232]	@ (800407c <HAL_RCC_OscConfig+0x8ac>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1f0      	bne.n	8003f80 <HAL_RCC_OscConfig+0x7b0>
 8003f9e:	e068      	b.n	8004072 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003fa0:	4b36      	ldr	r3, [pc, #216]	@ (800407c <HAL_RCC_OscConfig+0x8ac>)
 8003fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003fa6:	4b35      	ldr	r3, [pc, #212]	@ (800407c <HAL_RCC_OscConfig+0x8ac>)
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003faa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d031      	beq.n	8004018 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	f003 0203 	and.w	r2, r3, #3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d12a      	bne.n	8004018 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	091b      	lsrs	r3, r3, #4
 8003fc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d122      	bne.n	8004018 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fdc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d11a      	bne.n	8004018 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	0a5b      	lsrs	r3, r3, #9
 8003fe6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d111      	bne.n	8004018 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	0c1b      	lsrs	r3, r3, #16
 8003ff8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004000:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004002:	429a      	cmp	r2, r3
 8004004:	d108      	bne.n	8004018 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	0e1b      	lsrs	r3, r3, #24
 800400a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004012:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004014:	429a      	cmp	r2, r3
 8004016:	d001      	beq.n	800401c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e02b      	b.n	8004074 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800401c:	4b17      	ldr	r3, [pc, #92]	@ (800407c <HAL_RCC_OscConfig+0x8ac>)
 800401e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004020:	08db      	lsrs	r3, r3, #3
 8004022:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004026:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	429a      	cmp	r2, r3
 8004030:	d01f      	beq.n	8004072 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004032:	4b12      	ldr	r3, [pc, #72]	@ (800407c <HAL_RCC_OscConfig+0x8ac>)
 8004034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004036:	4a11      	ldr	r2, [pc, #68]	@ (800407c <HAL_RCC_OscConfig+0x8ac>)
 8004038:	f023 0301 	bic.w	r3, r3, #1
 800403c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800403e:	f7fe fd09 	bl	8002a54 <HAL_GetTick>
 8004042:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004044:	bf00      	nop
 8004046:	f7fe fd05 	bl	8002a54 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404e:	4293      	cmp	r3, r2
 8004050:	d0f9      	beq.n	8004046 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004052:	4b0a      	ldr	r3, [pc, #40]	@ (800407c <HAL_RCC_OscConfig+0x8ac>)
 8004054:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004056:	4b0a      	ldr	r3, [pc, #40]	@ (8004080 <HAL_RCC_OscConfig+0x8b0>)
 8004058:	4013      	ands	r3, r2
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800405e:	00d2      	lsls	r2, r2, #3
 8004060:	4906      	ldr	r1, [pc, #24]	@ (800407c <HAL_RCC_OscConfig+0x8ac>)
 8004062:	4313      	orrs	r3, r2
 8004064:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004066:	4b05      	ldr	r3, [pc, #20]	@ (800407c <HAL_RCC_OscConfig+0x8ac>)
 8004068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800406a:	4a04      	ldr	r2, [pc, #16]	@ (800407c <HAL_RCC_OscConfig+0x8ac>)
 800406c:	f043 0301 	orr.w	r3, r3, #1
 8004070:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3730      	adds	r7, #48	@ 0x30
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	58024400 	.word	0x58024400
 8004080:	ffff0007 	.word	0xffff0007

08004084 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e19c      	b.n	80043d2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004098:	4b8a      	ldr	r3, [pc, #552]	@ (80042c4 <HAL_RCC_ClockConfig+0x240>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 030f 	and.w	r3, r3, #15
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d910      	bls.n	80040c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a6:	4b87      	ldr	r3, [pc, #540]	@ (80042c4 <HAL_RCC_ClockConfig+0x240>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f023 020f 	bic.w	r2, r3, #15
 80040ae:	4985      	ldr	r1, [pc, #532]	@ (80042c4 <HAL_RCC_ClockConfig+0x240>)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b6:	4b83      	ldr	r3, [pc, #524]	@ (80042c4 <HAL_RCC_ClockConfig+0x240>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 030f 	and.w	r3, r3, #15
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d001      	beq.n	80040c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e184      	b.n	80043d2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0304 	and.w	r3, r3, #4
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d010      	beq.n	80040f6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	691a      	ldr	r2, [r3, #16]
 80040d8:	4b7b      	ldr	r3, [pc, #492]	@ (80042c8 <HAL_RCC_ClockConfig+0x244>)
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d908      	bls.n	80040f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80040e4:	4b78      	ldr	r3, [pc, #480]	@ (80042c8 <HAL_RCC_ClockConfig+0x244>)
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	4975      	ldr	r1, [pc, #468]	@ (80042c8 <HAL_RCC_ClockConfig+0x244>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0308 	and.w	r3, r3, #8
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d010      	beq.n	8004124 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	695a      	ldr	r2, [r3, #20]
 8004106:	4b70      	ldr	r3, [pc, #448]	@ (80042c8 <HAL_RCC_ClockConfig+0x244>)
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800410e:	429a      	cmp	r2, r3
 8004110:	d908      	bls.n	8004124 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004112:	4b6d      	ldr	r3, [pc, #436]	@ (80042c8 <HAL_RCC_ClockConfig+0x244>)
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	496a      	ldr	r1, [pc, #424]	@ (80042c8 <HAL_RCC_ClockConfig+0x244>)
 8004120:	4313      	orrs	r3, r2
 8004122:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0310 	and.w	r3, r3, #16
 800412c:	2b00      	cmp	r3, #0
 800412e:	d010      	beq.n	8004152 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	699a      	ldr	r2, [r3, #24]
 8004134:	4b64      	ldr	r3, [pc, #400]	@ (80042c8 <HAL_RCC_ClockConfig+0x244>)
 8004136:	69db      	ldr	r3, [r3, #28]
 8004138:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800413c:	429a      	cmp	r2, r3
 800413e:	d908      	bls.n	8004152 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004140:	4b61      	ldr	r3, [pc, #388]	@ (80042c8 <HAL_RCC_ClockConfig+0x244>)
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	495e      	ldr	r1, [pc, #376]	@ (80042c8 <HAL_RCC_ClockConfig+0x244>)
 800414e:	4313      	orrs	r3, r2
 8004150:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0320 	and.w	r3, r3, #32
 800415a:	2b00      	cmp	r3, #0
 800415c:	d010      	beq.n	8004180 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	69da      	ldr	r2, [r3, #28]
 8004162:	4b59      	ldr	r3, [pc, #356]	@ (80042c8 <HAL_RCC_ClockConfig+0x244>)
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800416a:	429a      	cmp	r2, r3
 800416c:	d908      	bls.n	8004180 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800416e:	4b56      	ldr	r3, [pc, #344]	@ (80042c8 <HAL_RCC_ClockConfig+0x244>)
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	4953      	ldr	r1, [pc, #332]	@ (80042c8 <HAL_RCC_ClockConfig+0x244>)
 800417c:	4313      	orrs	r3, r2
 800417e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d010      	beq.n	80041ae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68da      	ldr	r2, [r3, #12]
 8004190:	4b4d      	ldr	r3, [pc, #308]	@ (80042c8 <HAL_RCC_ClockConfig+0x244>)
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	f003 030f 	and.w	r3, r3, #15
 8004198:	429a      	cmp	r2, r3
 800419a:	d908      	bls.n	80041ae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800419c:	4b4a      	ldr	r3, [pc, #296]	@ (80042c8 <HAL_RCC_ClockConfig+0x244>)
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	f023 020f 	bic.w	r2, r3, #15
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	4947      	ldr	r1, [pc, #284]	@ (80042c8 <HAL_RCC_ClockConfig+0x244>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d055      	beq.n	8004266 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80041ba:	4b43      	ldr	r3, [pc, #268]	@ (80042c8 <HAL_RCC_ClockConfig+0x244>)
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	4940      	ldr	r1, [pc, #256]	@ (80042c8 <HAL_RCC_ClockConfig+0x244>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d107      	bne.n	80041e4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041d4:	4b3c      	ldr	r3, [pc, #240]	@ (80042c8 <HAL_RCC_ClockConfig+0x244>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d121      	bne.n	8004224 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e0f6      	b.n	80043d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	2b03      	cmp	r3, #3
 80041ea:	d107      	bne.n	80041fc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041ec:	4b36      	ldr	r3, [pc, #216]	@ (80042c8 <HAL_RCC_ClockConfig+0x244>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d115      	bne.n	8004224 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e0ea      	b.n	80043d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d107      	bne.n	8004214 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004204:	4b30      	ldr	r3, [pc, #192]	@ (80042c8 <HAL_RCC_ClockConfig+0x244>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800420c:	2b00      	cmp	r3, #0
 800420e:	d109      	bne.n	8004224 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e0de      	b.n	80043d2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004214:	4b2c      	ldr	r3, [pc, #176]	@ (80042c8 <HAL_RCC_ClockConfig+0x244>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e0d6      	b.n	80043d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004224:	4b28      	ldr	r3, [pc, #160]	@ (80042c8 <HAL_RCC_ClockConfig+0x244>)
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	f023 0207 	bic.w	r2, r3, #7
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	4925      	ldr	r1, [pc, #148]	@ (80042c8 <HAL_RCC_ClockConfig+0x244>)
 8004232:	4313      	orrs	r3, r2
 8004234:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004236:	f7fe fc0d 	bl	8002a54 <HAL_GetTick>
 800423a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800423c:	e00a      	b.n	8004254 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800423e:	f7fe fc09 	bl	8002a54 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	f241 3288 	movw	r2, #5000	@ 0x1388
 800424c:	4293      	cmp	r3, r2
 800424e:	d901      	bls.n	8004254 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e0be      	b.n	80043d2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004254:	4b1c      	ldr	r3, [pc, #112]	@ (80042c8 <HAL_RCC_ClockConfig+0x244>)
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	00db      	lsls	r3, r3, #3
 8004262:	429a      	cmp	r2, r3
 8004264:	d1eb      	bne.n	800423e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d010      	beq.n	8004294 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68da      	ldr	r2, [r3, #12]
 8004276:	4b14      	ldr	r3, [pc, #80]	@ (80042c8 <HAL_RCC_ClockConfig+0x244>)
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	429a      	cmp	r2, r3
 8004280:	d208      	bcs.n	8004294 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004282:	4b11      	ldr	r3, [pc, #68]	@ (80042c8 <HAL_RCC_ClockConfig+0x244>)
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	f023 020f 	bic.w	r2, r3, #15
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	490e      	ldr	r1, [pc, #56]	@ (80042c8 <HAL_RCC_ClockConfig+0x244>)
 8004290:	4313      	orrs	r3, r2
 8004292:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004294:	4b0b      	ldr	r3, [pc, #44]	@ (80042c4 <HAL_RCC_ClockConfig+0x240>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 030f 	and.w	r3, r3, #15
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d214      	bcs.n	80042cc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042a2:	4b08      	ldr	r3, [pc, #32]	@ (80042c4 <HAL_RCC_ClockConfig+0x240>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f023 020f 	bic.w	r2, r3, #15
 80042aa:	4906      	ldr	r1, [pc, #24]	@ (80042c4 <HAL_RCC_ClockConfig+0x240>)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042b2:	4b04      	ldr	r3, [pc, #16]	@ (80042c4 <HAL_RCC_ClockConfig+0x240>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 030f 	and.w	r3, r3, #15
 80042ba:	683a      	ldr	r2, [r7, #0]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d005      	beq.n	80042cc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e086      	b.n	80043d2 <HAL_RCC_ClockConfig+0x34e>
 80042c4:	52002000 	.word	0x52002000
 80042c8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d010      	beq.n	80042fa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	4b3f      	ldr	r3, [pc, #252]	@ (80043dc <HAL_RCC_ClockConfig+0x358>)
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d208      	bcs.n	80042fa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80042e8:	4b3c      	ldr	r3, [pc, #240]	@ (80043dc <HAL_RCC_ClockConfig+0x358>)
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	4939      	ldr	r1, [pc, #228]	@ (80043dc <HAL_RCC_ClockConfig+0x358>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0308 	and.w	r3, r3, #8
 8004302:	2b00      	cmp	r3, #0
 8004304:	d010      	beq.n	8004328 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	695a      	ldr	r2, [r3, #20]
 800430a:	4b34      	ldr	r3, [pc, #208]	@ (80043dc <HAL_RCC_ClockConfig+0x358>)
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004312:	429a      	cmp	r2, r3
 8004314:	d208      	bcs.n	8004328 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004316:	4b31      	ldr	r3, [pc, #196]	@ (80043dc <HAL_RCC_ClockConfig+0x358>)
 8004318:	69db      	ldr	r3, [r3, #28]
 800431a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	492e      	ldr	r1, [pc, #184]	@ (80043dc <HAL_RCC_ClockConfig+0x358>)
 8004324:	4313      	orrs	r3, r2
 8004326:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0310 	and.w	r3, r3, #16
 8004330:	2b00      	cmp	r3, #0
 8004332:	d010      	beq.n	8004356 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	699a      	ldr	r2, [r3, #24]
 8004338:	4b28      	ldr	r3, [pc, #160]	@ (80043dc <HAL_RCC_ClockConfig+0x358>)
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004340:	429a      	cmp	r2, r3
 8004342:	d208      	bcs.n	8004356 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004344:	4b25      	ldr	r3, [pc, #148]	@ (80043dc <HAL_RCC_ClockConfig+0x358>)
 8004346:	69db      	ldr	r3, [r3, #28]
 8004348:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	4922      	ldr	r1, [pc, #136]	@ (80043dc <HAL_RCC_ClockConfig+0x358>)
 8004352:	4313      	orrs	r3, r2
 8004354:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0320 	and.w	r3, r3, #32
 800435e:	2b00      	cmp	r3, #0
 8004360:	d010      	beq.n	8004384 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	69da      	ldr	r2, [r3, #28]
 8004366:	4b1d      	ldr	r3, [pc, #116]	@ (80043dc <HAL_RCC_ClockConfig+0x358>)
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800436e:	429a      	cmp	r2, r3
 8004370:	d208      	bcs.n	8004384 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004372:	4b1a      	ldr	r3, [pc, #104]	@ (80043dc <HAL_RCC_ClockConfig+0x358>)
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	4917      	ldr	r1, [pc, #92]	@ (80043dc <HAL_RCC_ClockConfig+0x358>)
 8004380:	4313      	orrs	r3, r2
 8004382:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004384:	f000 f834 	bl	80043f0 <HAL_RCC_GetSysClockFreq>
 8004388:	4602      	mov	r2, r0
 800438a:	4b14      	ldr	r3, [pc, #80]	@ (80043dc <HAL_RCC_ClockConfig+0x358>)
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	0a1b      	lsrs	r3, r3, #8
 8004390:	f003 030f 	and.w	r3, r3, #15
 8004394:	4912      	ldr	r1, [pc, #72]	@ (80043e0 <HAL_RCC_ClockConfig+0x35c>)
 8004396:	5ccb      	ldrb	r3, [r1, r3]
 8004398:	f003 031f 	and.w	r3, r3, #31
 800439c:	fa22 f303 	lsr.w	r3, r2, r3
 80043a0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043a2:	4b0e      	ldr	r3, [pc, #56]	@ (80043dc <HAL_RCC_ClockConfig+0x358>)
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	f003 030f 	and.w	r3, r3, #15
 80043aa:	4a0d      	ldr	r2, [pc, #52]	@ (80043e0 <HAL_RCC_ClockConfig+0x35c>)
 80043ac:	5cd3      	ldrb	r3, [r2, r3]
 80043ae:	f003 031f 	and.w	r3, r3, #31
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	fa22 f303 	lsr.w	r3, r2, r3
 80043b8:	4a0a      	ldr	r2, [pc, #40]	@ (80043e4 <HAL_RCC_ClockConfig+0x360>)
 80043ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80043bc:	4a0a      	ldr	r2, [pc, #40]	@ (80043e8 <HAL_RCC_ClockConfig+0x364>)
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80043c2:	4b0a      	ldr	r3, [pc, #40]	@ (80043ec <HAL_RCC_ClockConfig+0x368>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fe fafa 	bl	80029c0 <HAL_InitTick>
 80043cc:	4603      	mov	r3, r0
 80043ce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80043d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3718      	adds	r7, #24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	58024400 	.word	0x58024400
 80043e0:	0800ad70 	.word	0x0800ad70
 80043e4:	24000004 	.word	0x24000004
 80043e8:	24000000 	.word	0x24000000
 80043ec:	24000024 	.word	0x24000024

080043f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b089      	sub	sp, #36	@ 0x24
 80043f4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043f6:	4bb3      	ldr	r3, [pc, #716]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043fe:	2b18      	cmp	r3, #24
 8004400:	f200 8155 	bhi.w	80046ae <HAL_RCC_GetSysClockFreq+0x2be>
 8004404:	a201      	add	r2, pc, #4	@ (adr r2, 800440c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440a:	bf00      	nop
 800440c:	08004471 	.word	0x08004471
 8004410:	080046af 	.word	0x080046af
 8004414:	080046af 	.word	0x080046af
 8004418:	080046af 	.word	0x080046af
 800441c:	080046af 	.word	0x080046af
 8004420:	080046af 	.word	0x080046af
 8004424:	080046af 	.word	0x080046af
 8004428:	080046af 	.word	0x080046af
 800442c:	08004497 	.word	0x08004497
 8004430:	080046af 	.word	0x080046af
 8004434:	080046af 	.word	0x080046af
 8004438:	080046af 	.word	0x080046af
 800443c:	080046af 	.word	0x080046af
 8004440:	080046af 	.word	0x080046af
 8004444:	080046af 	.word	0x080046af
 8004448:	080046af 	.word	0x080046af
 800444c:	0800449d 	.word	0x0800449d
 8004450:	080046af 	.word	0x080046af
 8004454:	080046af 	.word	0x080046af
 8004458:	080046af 	.word	0x080046af
 800445c:	080046af 	.word	0x080046af
 8004460:	080046af 	.word	0x080046af
 8004464:	080046af 	.word	0x080046af
 8004468:	080046af 	.word	0x080046af
 800446c:	080044a3 	.word	0x080044a3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004470:	4b94      	ldr	r3, [pc, #592]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0320 	and.w	r3, r3, #32
 8004478:	2b00      	cmp	r3, #0
 800447a:	d009      	beq.n	8004490 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800447c:	4b91      	ldr	r3, [pc, #580]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	08db      	lsrs	r3, r3, #3
 8004482:	f003 0303 	and.w	r3, r3, #3
 8004486:	4a90      	ldr	r2, [pc, #576]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004488:	fa22 f303 	lsr.w	r3, r2, r3
 800448c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800448e:	e111      	b.n	80046b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004490:	4b8d      	ldr	r3, [pc, #564]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004492:	61bb      	str	r3, [r7, #24]
      break;
 8004494:	e10e      	b.n	80046b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004496:	4b8d      	ldr	r3, [pc, #564]	@ (80046cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004498:	61bb      	str	r3, [r7, #24]
      break;
 800449a:	e10b      	b.n	80046b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800449c:	4b8c      	ldr	r3, [pc, #560]	@ (80046d0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800449e:	61bb      	str	r3, [r7, #24]
      break;
 80044a0:	e108      	b.n	80046b4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044a2:	4b88      	ldr	r3, [pc, #544]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a6:	f003 0303 	and.w	r3, r3, #3
 80044aa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80044ac:	4b85      	ldr	r3, [pc, #532]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b0:	091b      	lsrs	r3, r3, #4
 80044b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044b6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80044b8:	4b82      	ldr	r3, [pc, #520]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80044c2:	4b80      	ldr	r3, [pc, #512]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044c6:	08db      	lsrs	r3, r3, #3
 80044c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	fb02 f303 	mul.w	r3, r2, r3
 80044d2:	ee07 3a90 	vmov	s15, r3
 80044d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044da:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 80e1 	beq.w	80046a8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	f000 8083 	beq.w	80045f4 <HAL_RCC_GetSysClockFreq+0x204>
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	f200 80a1 	bhi.w	8004638 <HAL_RCC_GetSysClockFreq+0x248>
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <HAL_RCC_GetSysClockFreq+0x114>
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d056      	beq.n	80045b0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004502:	e099      	b.n	8004638 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004504:	4b6f      	ldr	r3, [pc, #444]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0320 	and.w	r3, r3, #32
 800450c:	2b00      	cmp	r3, #0
 800450e:	d02d      	beq.n	800456c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004510:	4b6c      	ldr	r3, [pc, #432]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	08db      	lsrs	r3, r3, #3
 8004516:	f003 0303 	and.w	r3, r3, #3
 800451a:	4a6b      	ldr	r2, [pc, #428]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800451c:	fa22 f303 	lsr.w	r3, r2, r3
 8004520:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	ee07 3a90 	vmov	s15, r3
 8004528:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	ee07 3a90 	vmov	s15, r3
 8004532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800453a:	4b62      	ldr	r3, [pc, #392]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800453c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800453e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004542:	ee07 3a90 	vmov	s15, r3
 8004546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800454a:	ed97 6a02 	vldr	s12, [r7, #8]
 800454e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80046d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800455a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800455e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004566:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800456a:	e087      	b.n	800467c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	ee07 3a90 	vmov	s15, r3
 8004572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004576:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80046d8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800457a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800457e:	4b51      	ldr	r3, [pc, #324]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004586:	ee07 3a90 	vmov	s15, r3
 800458a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800458e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004592:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80046d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800459a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800459e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80045ae:	e065      	b.n	800467c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	ee07 3a90 	vmov	s15, r3
 80045b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ba:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80046dc <HAL_RCC_GetSysClockFreq+0x2ec>
 80045be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045c2:	4b40      	ldr	r3, [pc, #256]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ca:	ee07 3a90 	vmov	s15, r3
 80045ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80045d6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80046d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80045f2:	e043      	b.n	800467c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	ee07 3a90 	vmov	s15, r3
 80045fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045fe:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80046e0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004606:	4b2f      	ldr	r3, [pc, #188]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800460a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800460e:	ee07 3a90 	vmov	s15, r3
 8004612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004616:	ed97 6a02 	vldr	s12, [r7, #8]
 800461a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80046d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800461e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004626:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800462a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800462e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004632:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004636:	e021      	b.n	800467c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	ee07 3a90 	vmov	s15, r3
 800463e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004642:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80046dc <HAL_RCC_GetSysClockFreq+0x2ec>
 8004646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800464a:	4b1e      	ldr	r3, [pc, #120]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800464c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800464e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004652:	ee07 3a90 	vmov	s15, r3
 8004656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800465a:	ed97 6a02 	vldr	s12, [r7, #8]
 800465e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80046d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004662:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004666:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800466a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800466e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004676:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800467a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800467c:	4b11      	ldr	r3, [pc, #68]	@ (80046c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800467e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004680:	0a5b      	lsrs	r3, r3, #9
 8004682:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004686:	3301      	adds	r3, #1
 8004688:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	ee07 3a90 	vmov	s15, r3
 8004690:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004694:	edd7 6a07 	vldr	s13, [r7, #28]
 8004698:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800469c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046a0:	ee17 3a90 	vmov	r3, s15
 80046a4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80046a6:	e005      	b.n	80046b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80046a8:	2300      	movs	r3, #0
 80046aa:	61bb      	str	r3, [r7, #24]
      break;
 80046ac:	e002      	b.n	80046b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80046ae:	4b07      	ldr	r3, [pc, #28]	@ (80046cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80046b0:	61bb      	str	r3, [r7, #24]
      break;
 80046b2:	bf00      	nop
  }

  return sysclockfreq;
 80046b4:	69bb      	ldr	r3, [r7, #24]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3724      	adds	r7, #36	@ 0x24
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	58024400 	.word	0x58024400
 80046c8:	03d09000 	.word	0x03d09000
 80046cc:	003d0900 	.word	0x003d0900
 80046d0:	017d7840 	.word	0x017d7840
 80046d4:	46000000 	.word	0x46000000
 80046d8:	4c742400 	.word	0x4c742400
 80046dc:	4a742400 	.word	0x4a742400
 80046e0:	4bbebc20 	.word	0x4bbebc20

080046e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80046ea:	f7ff fe81 	bl	80043f0 <HAL_RCC_GetSysClockFreq>
 80046ee:	4602      	mov	r2, r0
 80046f0:	4b10      	ldr	r3, [pc, #64]	@ (8004734 <HAL_RCC_GetHCLKFreq+0x50>)
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	0a1b      	lsrs	r3, r3, #8
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	490f      	ldr	r1, [pc, #60]	@ (8004738 <HAL_RCC_GetHCLKFreq+0x54>)
 80046fc:	5ccb      	ldrb	r3, [r1, r3]
 80046fe:	f003 031f 	and.w	r3, r3, #31
 8004702:	fa22 f303 	lsr.w	r3, r2, r3
 8004706:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004708:	4b0a      	ldr	r3, [pc, #40]	@ (8004734 <HAL_RCC_GetHCLKFreq+0x50>)
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	f003 030f 	and.w	r3, r3, #15
 8004710:	4a09      	ldr	r2, [pc, #36]	@ (8004738 <HAL_RCC_GetHCLKFreq+0x54>)
 8004712:	5cd3      	ldrb	r3, [r2, r3]
 8004714:	f003 031f 	and.w	r3, r3, #31
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	fa22 f303 	lsr.w	r3, r2, r3
 800471e:	4a07      	ldr	r2, [pc, #28]	@ (800473c <HAL_RCC_GetHCLKFreq+0x58>)
 8004720:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004722:	4a07      	ldr	r2, [pc, #28]	@ (8004740 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004728:	4b04      	ldr	r3, [pc, #16]	@ (800473c <HAL_RCC_GetHCLKFreq+0x58>)
 800472a:	681b      	ldr	r3, [r3, #0]
}
 800472c:	4618      	mov	r0, r3
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	58024400 	.word	0x58024400
 8004738:	0800ad70 	.word	0x0800ad70
 800473c:	24000004 	.word	0x24000004
 8004740:	24000000 	.word	0x24000000

08004744 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004748:	f7ff ffcc 	bl	80046e4 <HAL_RCC_GetHCLKFreq>
 800474c:	4602      	mov	r2, r0
 800474e:	4b06      	ldr	r3, [pc, #24]	@ (8004768 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	091b      	lsrs	r3, r3, #4
 8004754:	f003 0307 	and.w	r3, r3, #7
 8004758:	4904      	ldr	r1, [pc, #16]	@ (800476c <HAL_RCC_GetPCLK1Freq+0x28>)
 800475a:	5ccb      	ldrb	r3, [r1, r3]
 800475c:	f003 031f 	and.w	r3, r3, #31
 8004760:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004764:	4618      	mov	r0, r3
 8004766:	bd80      	pop	{r7, pc}
 8004768:	58024400 	.word	0x58024400
 800476c:	0800ad70 	.word	0x0800ad70

08004770 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004774:	f7ff ffb6 	bl	80046e4 <HAL_RCC_GetHCLKFreq>
 8004778:	4602      	mov	r2, r0
 800477a:	4b06      	ldr	r3, [pc, #24]	@ (8004794 <HAL_RCC_GetPCLK2Freq+0x24>)
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	0a1b      	lsrs	r3, r3, #8
 8004780:	f003 0307 	and.w	r3, r3, #7
 8004784:	4904      	ldr	r1, [pc, #16]	@ (8004798 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004786:	5ccb      	ldrb	r3, [r1, r3]
 8004788:	f003 031f 	and.w	r3, r3, #31
 800478c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004790:	4618      	mov	r0, r3
 8004792:	bd80      	pop	{r7, pc}
 8004794:	58024400 	.word	0x58024400
 8004798:	0800ad70 	.word	0x0800ad70

0800479c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800479c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047a0:	b0ca      	sub	sp, #296	@ 0x128
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047a8:	2300      	movs	r3, #0
 80047aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047ae:	2300      	movs	r3, #0
 80047b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047bc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80047c0:	2500      	movs	r5, #0
 80047c2:	ea54 0305 	orrs.w	r3, r4, r5
 80047c6:	d049      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80047c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80047d2:	d02f      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80047d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80047d8:	d828      	bhi.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80047da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047de:	d01a      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80047e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047e4:	d822      	bhi.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80047ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047ee:	d007      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80047f0:	e01c      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047f2:	4bb8      	ldr	r3, [pc, #736]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f6:	4ab7      	ldr	r2, [pc, #732]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80047fe:	e01a      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004804:	3308      	adds	r3, #8
 8004806:	2102      	movs	r1, #2
 8004808:	4618      	mov	r0, r3
 800480a:	f001 fc8f 	bl	800612c <RCCEx_PLL2_Config>
 800480e:	4603      	mov	r3, r0
 8004810:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004814:	e00f      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800481a:	3328      	adds	r3, #40	@ 0x28
 800481c:	2102      	movs	r1, #2
 800481e:	4618      	mov	r0, r3
 8004820:	f001 fd36 	bl	8006290 <RCCEx_PLL3_Config>
 8004824:	4603      	mov	r3, r0
 8004826:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800482a:	e004      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004832:	e000      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004834:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004836:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10a      	bne.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800483e:	4ba5      	ldr	r3, [pc, #660]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004840:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004842:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800484a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800484c:	4aa1      	ldr	r2, [pc, #644]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800484e:	430b      	orrs	r3, r1
 8004850:	6513      	str	r3, [r2, #80]	@ 0x50
 8004852:	e003      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004854:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004858:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800485c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004864:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004868:	f04f 0900 	mov.w	r9, #0
 800486c:	ea58 0309 	orrs.w	r3, r8, r9
 8004870:	d047      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004878:	2b04      	cmp	r3, #4
 800487a:	d82a      	bhi.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800487c:	a201      	add	r2, pc, #4	@ (adr r2, 8004884 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800487e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004882:	bf00      	nop
 8004884:	08004899 	.word	0x08004899
 8004888:	080048a7 	.word	0x080048a7
 800488c:	080048bd 	.word	0x080048bd
 8004890:	080048db 	.word	0x080048db
 8004894:	080048db 	.word	0x080048db
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004898:	4b8e      	ldr	r3, [pc, #568]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800489a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800489c:	4a8d      	ldr	r2, [pc, #564]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800489e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048a4:	e01a      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048aa:	3308      	adds	r3, #8
 80048ac:	2100      	movs	r1, #0
 80048ae:	4618      	mov	r0, r3
 80048b0:	f001 fc3c 	bl	800612c <RCCEx_PLL2_Config>
 80048b4:	4603      	mov	r3, r0
 80048b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048ba:	e00f      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048c0:	3328      	adds	r3, #40	@ 0x28
 80048c2:	2100      	movs	r1, #0
 80048c4:	4618      	mov	r0, r3
 80048c6:	f001 fce3 	bl	8006290 <RCCEx_PLL3_Config>
 80048ca:	4603      	mov	r3, r0
 80048cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048d0:	e004      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048d8:	e000      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80048da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10a      	bne.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048e4:	4b7b      	ldr	r3, [pc, #492]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048e8:	f023 0107 	bic.w	r1, r3, #7
 80048ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f2:	4a78      	ldr	r2, [pc, #480]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048f4:	430b      	orrs	r3, r1
 80048f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80048f8:	e003      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800490e:	f04f 0b00 	mov.w	fp, #0
 8004912:	ea5a 030b 	orrs.w	r3, sl, fp
 8004916:	d04c      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800491c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800491e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004922:	d030      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004924:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004928:	d829      	bhi.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800492a:	2bc0      	cmp	r3, #192	@ 0xc0
 800492c:	d02d      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800492e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004930:	d825      	bhi.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004932:	2b80      	cmp	r3, #128	@ 0x80
 8004934:	d018      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004936:	2b80      	cmp	r3, #128	@ 0x80
 8004938:	d821      	bhi.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800493a:	2b00      	cmp	r3, #0
 800493c:	d002      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800493e:	2b40      	cmp	r3, #64	@ 0x40
 8004940:	d007      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004942:	e01c      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004944:	4b63      	ldr	r3, [pc, #396]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004948:	4a62      	ldr	r2, [pc, #392]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800494a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800494e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004950:	e01c      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004956:	3308      	adds	r3, #8
 8004958:	2100      	movs	r1, #0
 800495a:	4618      	mov	r0, r3
 800495c:	f001 fbe6 	bl	800612c <RCCEx_PLL2_Config>
 8004960:	4603      	mov	r3, r0
 8004962:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004966:	e011      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800496c:	3328      	adds	r3, #40	@ 0x28
 800496e:	2100      	movs	r1, #0
 8004970:	4618      	mov	r0, r3
 8004972:	f001 fc8d 	bl	8006290 <RCCEx_PLL3_Config>
 8004976:	4603      	mov	r3, r0
 8004978:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800497c:	e006      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004984:	e002      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004986:	bf00      	nop
 8004988:	e000      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800498a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800498c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10a      	bne.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004994:	4b4f      	ldr	r3, [pc, #316]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004996:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004998:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800499c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049a2:	4a4c      	ldr	r2, [pc, #304]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049a4:	430b      	orrs	r3, r1
 80049a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80049a8:	e003      	b.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80049b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ba:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80049be:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80049c2:	2300      	movs	r3, #0
 80049c4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80049c8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80049cc:	460b      	mov	r3, r1
 80049ce:	4313      	orrs	r3, r2
 80049d0:	d053      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80049d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80049da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80049de:	d035      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80049e0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80049e4:	d82e      	bhi.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80049e6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80049ea:	d031      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80049ec:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80049f0:	d828      	bhi.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80049f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049f6:	d01a      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x292>
 80049f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049fc:	d822      	bhi.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004a02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a06:	d007      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004a08:	e01c      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a0a:	4b32      	ldr	r3, [pc, #200]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a0e:	4a31      	ldr	r2, [pc, #196]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a16:	e01c      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a1c:	3308      	adds	r3, #8
 8004a1e:	2100      	movs	r1, #0
 8004a20:	4618      	mov	r0, r3
 8004a22:	f001 fb83 	bl	800612c <RCCEx_PLL2_Config>
 8004a26:	4603      	mov	r3, r0
 8004a28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004a2c:	e011      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a32:	3328      	adds	r3, #40	@ 0x28
 8004a34:	2100      	movs	r1, #0
 8004a36:	4618      	mov	r0, r3
 8004a38:	f001 fc2a 	bl	8006290 <RCCEx_PLL3_Config>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a42:	e006      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a4a:	e002      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004a4c:	bf00      	nop
 8004a4e:	e000      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004a50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10b      	bne.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004a5a:	4b1e      	ldr	r3, [pc, #120]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a5e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004a6a:	4a1a      	ldr	r2, [pc, #104]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a6c:	430b      	orrs	r3, r1
 8004a6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a70:	e003      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a82:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004a86:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004a90:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004a94:	460b      	mov	r3, r1
 8004a96:	4313      	orrs	r3, r2
 8004a98:	d056      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004aa2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004aa6:	d038      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004aa8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004aac:	d831      	bhi.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004aae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004ab2:	d034      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004ab4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004ab8:	d82b      	bhi.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004aba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004abe:	d01d      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004ac0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ac4:	d825      	bhi.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d006      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004aca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ace:	d00a      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004ad0:	e01f      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004ad2:	bf00      	nop
 8004ad4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ad8:	4ba2      	ldr	r3, [pc, #648]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004adc:	4aa1      	ldr	r2, [pc, #644]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ade:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ae2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ae4:	e01c      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aea:	3308      	adds	r3, #8
 8004aec:	2100      	movs	r1, #0
 8004aee:	4618      	mov	r0, r3
 8004af0:	f001 fb1c 	bl	800612c <RCCEx_PLL2_Config>
 8004af4:	4603      	mov	r3, r0
 8004af6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004afa:	e011      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b00:	3328      	adds	r3, #40	@ 0x28
 8004b02:	2100      	movs	r1, #0
 8004b04:	4618      	mov	r0, r3
 8004b06:	f001 fbc3 	bl	8006290 <RCCEx_PLL3_Config>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b10:	e006      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b18:	e002      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004b1a:	bf00      	nop
 8004b1c:	e000      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004b1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10b      	bne.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004b28:	4b8e      	ldr	r3, [pc, #568]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b2c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b34:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004b38:	4a8a      	ldr	r2, [pc, #552]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b3a:	430b      	orrs	r3, r1
 8004b3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b3e:	e003      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b50:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004b54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004b58:	2300      	movs	r3, #0
 8004b5a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004b5e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004b62:	460b      	mov	r3, r1
 8004b64:	4313      	orrs	r3, r2
 8004b66:	d03a      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b6e:	2b30      	cmp	r3, #48	@ 0x30
 8004b70:	d01f      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004b72:	2b30      	cmp	r3, #48	@ 0x30
 8004b74:	d819      	bhi.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004b76:	2b20      	cmp	r3, #32
 8004b78:	d00c      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004b7a:	2b20      	cmp	r3, #32
 8004b7c:	d815      	bhi.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d019      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004b82:	2b10      	cmp	r3, #16
 8004b84:	d111      	bne.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b86:	4b77      	ldr	r3, [pc, #476]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b8a:	4a76      	ldr	r2, [pc, #472]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004b92:	e011      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b98:	3308      	adds	r3, #8
 8004b9a:	2102      	movs	r1, #2
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f001 fac5 	bl	800612c <RCCEx_PLL2_Config>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004ba8:	e006      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004bb0:	e002      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004bb2:	bf00      	nop
 8004bb4:	e000      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004bb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10a      	bne.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004bc0:	4b68      	ldr	r3, [pc, #416]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bc4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bce:	4a65      	ldr	r2, [pc, #404]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bd0:	430b      	orrs	r3, r1
 8004bd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004bd4:	e003      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004bea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004bee:	2300      	movs	r3, #0
 8004bf0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004bf4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	d051      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c08:	d035      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004c0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c0e:	d82e      	bhi.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004c10:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c14:	d031      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004c16:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c1a:	d828      	bhi.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004c1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c20:	d01a      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004c22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c26:	d822      	bhi.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004c2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c30:	d007      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004c32:	e01c      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c34:	4b4b      	ldr	r3, [pc, #300]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c38:	4a4a      	ldr	r2, [pc, #296]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c40:	e01c      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c46:	3308      	adds	r3, #8
 8004c48:	2100      	movs	r1, #0
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f001 fa6e 	bl	800612c <RCCEx_PLL2_Config>
 8004c50:	4603      	mov	r3, r0
 8004c52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c56:	e011      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c5c:	3328      	adds	r3, #40	@ 0x28
 8004c5e:	2100      	movs	r1, #0
 8004c60:	4618      	mov	r0, r3
 8004c62:	f001 fb15 	bl	8006290 <RCCEx_PLL3_Config>
 8004c66:	4603      	mov	r3, r0
 8004c68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c6c:	e006      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c74:	e002      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004c76:	bf00      	nop
 8004c78:	e000      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004c7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10a      	bne.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004c84:	4b37      	ldr	r3, [pc, #220]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c88:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c92:	4a34      	ldr	r2, [pc, #208]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c94:	430b      	orrs	r3, r1
 8004c96:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c98:	e003      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004caa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004cae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004cb8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	d056      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ccc:	d033      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004cce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cd2:	d82c      	bhi.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004cd4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004cd8:	d02f      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004cda:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004cde:	d826      	bhi.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004ce0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ce4:	d02b      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004ce6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004cea:	d820      	bhi.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004cec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004cf0:	d012      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004cf2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004cf6:	d81a      	bhi.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d022      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004cfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d00:	d115      	bne.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d06:	3308      	adds	r3, #8
 8004d08:	2101      	movs	r1, #1
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f001 fa0e 	bl	800612c <RCCEx_PLL2_Config>
 8004d10:	4603      	mov	r3, r0
 8004d12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004d16:	e015      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d1c:	3328      	adds	r3, #40	@ 0x28
 8004d1e:	2101      	movs	r1, #1
 8004d20:	4618      	mov	r0, r3
 8004d22:	f001 fab5 	bl	8006290 <RCCEx_PLL3_Config>
 8004d26:	4603      	mov	r3, r0
 8004d28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004d2c:	e00a      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d34:	e006      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004d36:	bf00      	nop
 8004d38:	e004      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004d3a:	bf00      	nop
 8004d3c:	e002      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004d3e:	bf00      	nop
 8004d40:	e000      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004d42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10d      	bne.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004d4c:	4b05      	ldr	r3, [pc, #20]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d50:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d5a:	4a02      	ldr	r2, [pc, #8]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d5c:	430b      	orrs	r3, r1
 8004d5e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d60:	e006      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004d62:	bf00      	nop
 8004d64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d78:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004d7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d80:	2300      	movs	r3, #0
 8004d82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d86:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	d055      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004d98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d9c:	d033      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004d9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004da2:	d82c      	bhi.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004da4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004da8:	d02f      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004daa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dae:	d826      	bhi.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004db0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004db4:	d02b      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004db6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004dba:	d820      	bhi.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004dbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004dc0:	d012      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004dc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004dc6:	d81a      	bhi.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d022      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004dcc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004dd0:	d115      	bne.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dd6:	3308      	adds	r3, #8
 8004dd8:	2101      	movs	r1, #1
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f001 f9a6 	bl	800612c <RCCEx_PLL2_Config>
 8004de0:	4603      	mov	r3, r0
 8004de2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004de6:	e015      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dec:	3328      	adds	r3, #40	@ 0x28
 8004dee:	2101      	movs	r1, #1
 8004df0:	4618      	mov	r0, r3
 8004df2:	f001 fa4d 	bl	8006290 <RCCEx_PLL3_Config>
 8004df6:	4603      	mov	r3, r0
 8004df8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004dfc:	e00a      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e04:	e006      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004e06:	bf00      	nop
 8004e08:	e004      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004e0a:	bf00      	nop
 8004e0c:	e002      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004e0e:	bf00      	nop
 8004e10:	e000      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004e12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10b      	bne.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004e1c:	4ba3      	ldr	r3, [pc, #652]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e20:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004e2c:	4a9f      	ldr	r2, [pc, #636]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e2e:	430b      	orrs	r3, r1
 8004e30:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e32:	e003      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e44:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004e48:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004e52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004e56:	460b      	mov	r3, r1
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	d037      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e66:	d00e      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004e68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e6c:	d816      	bhi.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d018      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004e72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e76:	d111      	bne.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e78:	4b8c      	ldr	r3, [pc, #560]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7c:	4a8b      	ldr	r2, [pc, #556]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004e84:	e00f      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e8a:	3308      	adds	r3, #8
 8004e8c:	2101      	movs	r1, #1
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f001 f94c 	bl	800612c <RCCEx_PLL2_Config>
 8004e94:	4603      	mov	r3, r0
 8004e96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004e9a:	e004      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ea2:	e000      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004ea4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10a      	bne.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004eae:	4b7f      	ldr	r3, [pc, #508]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004eb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eb2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ebc:	4a7b      	ldr	r2, [pc, #492]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ebe:	430b      	orrs	r3, r1
 8004ec0:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ec2:	e003      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ec4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ec8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004ed8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004edc:	2300      	movs	r3, #0
 8004ede:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004ee2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	d039      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ef0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ef2:	2b03      	cmp	r3, #3
 8004ef4:	d81c      	bhi.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004ef6:	a201      	add	r2, pc, #4	@ (adr r2, 8004efc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efc:	08004f39 	.word	0x08004f39
 8004f00:	08004f0d 	.word	0x08004f0d
 8004f04:	08004f1b 	.word	0x08004f1b
 8004f08:	08004f39 	.word	0x08004f39
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f0c:	4b67      	ldr	r3, [pc, #412]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f10:	4a66      	ldr	r2, [pc, #408]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004f18:	e00f      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f1e:	3308      	adds	r3, #8
 8004f20:	2102      	movs	r1, #2
 8004f22:	4618      	mov	r0, r3
 8004f24:	f001 f902 	bl	800612c <RCCEx_PLL2_Config>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004f2e:	e004      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f36:	e000      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004f38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10a      	bne.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004f42:	4b5a      	ldr	r3, [pc, #360]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f46:	f023 0103 	bic.w	r1, r3, #3
 8004f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f50:	4a56      	ldr	r2, [pc, #344]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f52:	430b      	orrs	r3, r1
 8004f54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f56:	e003      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f68:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004f6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f70:	2300      	movs	r3, #0
 8004f72:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f76:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	f000 809f 	beq.w	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f82:	4b4b      	ldr	r3, [pc, #300]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a4a      	ldr	r2, [pc, #296]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004f88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f8e:	f7fd fd61 	bl	8002a54 <HAL_GetTick>
 8004f92:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f96:	e00b      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f98:	f7fd fd5c 	bl	8002a54 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	2b64      	cmp	r3, #100	@ 0x64
 8004fa6:	d903      	bls.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fae:	e005      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fb0:	4b3f      	ldr	r3, [pc, #252]	@ (80050b0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d0ed      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004fbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d179      	bne.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004fc4:	4b39      	ldr	r3, [pc, #228]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fc6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fcc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004fd0:	4053      	eors	r3, r2
 8004fd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d015      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fda:	4b34      	ldr	r3, [pc, #208]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fe2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fe6:	4b31      	ldr	r3, [pc, #196]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fea:	4a30      	ldr	r2, [pc, #192]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ff0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ff2:	4b2e      	ldr	r3, [pc, #184]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ff6:	4a2d      	ldr	r2, [pc, #180]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ff8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ffc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004ffe:	4a2b      	ldr	r2, [pc, #172]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005000:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005004:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800500a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800500e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005012:	d118      	bne.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005014:	f7fd fd1e 	bl	8002a54 <HAL_GetTick>
 8005018:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800501c:	e00d      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800501e:	f7fd fd19 	bl	8002a54 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005028:	1ad2      	subs	r2, r2, r3
 800502a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800502e:	429a      	cmp	r2, r3
 8005030:	d903      	bls.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005038:	e005      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800503a:	4b1c      	ldr	r3, [pc, #112]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800503c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d0eb      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005046:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800504a:	2b00      	cmp	r3, #0
 800504c:	d129      	bne.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800504e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005052:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005056:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800505a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800505e:	d10e      	bne.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005060:	4b12      	ldr	r3, [pc, #72]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800506c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005070:	091a      	lsrs	r2, r3, #4
 8005072:	4b10      	ldr	r3, [pc, #64]	@ (80050b4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005074:	4013      	ands	r3, r2
 8005076:	4a0d      	ldr	r2, [pc, #52]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005078:	430b      	orrs	r3, r1
 800507a:	6113      	str	r3, [r2, #16]
 800507c:	e005      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800507e:	4b0b      	ldr	r3, [pc, #44]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	4a0a      	ldr	r2, [pc, #40]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005084:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005088:	6113      	str	r3, [r2, #16]
 800508a:	4b08      	ldr	r3, [pc, #32]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800508c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800508e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005092:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005096:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800509a:	4a04      	ldr	r2, [pc, #16]	@ (80050ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800509c:	430b      	orrs	r3, r1
 800509e:	6713      	str	r3, [r2, #112]	@ 0x70
 80050a0:	e00e      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80050aa:	e009      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80050ac:	58024400 	.word	0x58024400
 80050b0:	58024800 	.word	0x58024800
 80050b4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80050c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c8:	f002 0301 	and.w	r3, r2, #1
 80050cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80050d0:	2300      	movs	r3, #0
 80050d2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80050d6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80050da:	460b      	mov	r3, r1
 80050dc:	4313      	orrs	r3, r2
 80050de:	f000 8089 	beq.w	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80050e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050e8:	2b28      	cmp	r3, #40	@ 0x28
 80050ea:	d86b      	bhi.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80050ec:	a201      	add	r2, pc, #4	@ (adr r2, 80050f4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80050ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f2:	bf00      	nop
 80050f4:	080051cd 	.word	0x080051cd
 80050f8:	080051c5 	.word	0x080051c5
 80050fc:	080051c5 	.word	0x080051c5
 8005100:	080051c5 	.word	0x080051c5
 8005104:	080051c5 	.word	0x080051c5
 8005108:	080051c5 	.word	0x080051c5
 800510c:	080051c5 	.word	0x080051c5
 8005110:	080051c5 	.word	0x080051c5
 8005114:	08005199 	.word	0x08005199
 8005118:	080051c5 	.word	0x080051c5
 800511c:	080051c5 	.word	0x080051c5
 8005120:	080051c5 	.word	0x080051c5
 8005124:	080051c5 	.word	0x080051c5
 8005128:	080051c5 	.word	0x080051c5
 800512c:	080051c5 	.word	0x080051c5
 8005130:	080051c5 	.word	0x080051c5
 8005134:	080051af 	.word	0x080051af
 8005138:	080051c5 	.word	0x080051c5
 800513c:	080051c5 	.word	0x080051c5
 8005140:	080051c5 	.word	0x080051c5
 8005144:	080051c5 	.word	0x080051c5
 8005148:	080051c5 	.word	0x080051c5
 800514c:	080051c5 	.word	0x080051c5
 8005150:	080051c5 	.word	0x080051c5
 8005154:	080051cd 	.word	0x080051cd
 8005158:	080051c5 	.word	0x080051c5
 800515c:	080051c5 	.word	0x080051c5
 8005160:	080051c5 	.word	0x080051c5
 8005164:	080051c5 	.word	0x080051c5
 8005168:	080051c5 	.word	0x080051c5
 800516c:	080051c5 	.word	0x080051c5
 8005170:	080051c5 	.word	0x080051c5
 8005174:	080051cd 	.word	0x080051cd
 8005178:	080051c5 	.word	0x080051c5
 800517c:	080051c5 	.word	0x080051c5
 8005180:	080051c5 	.word	0x080051c5
 8005184:	080051c5 	.word	0x080051c5
 8005188:	080051c5 	.word	0x080051c5
 800518c:	080051c5 	.word	0x080051c5
 8005190:	080051c5 	.word	0x080051c5
 8005194:	080051cd 	.word	0x080051cd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800519c:	3308      	adds	r3, #8
 800519e:	2101      	movs	r1, #1
 80051a0:	4618      	mov	r0, r3
 80051a2:	f000 ffc3 	bl	800612c <RCCEx_PLL2_Config>
 80051a6:	4603      	mov	r3, r0
 80051a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80051ac:	e00f      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051b2:	3328      	adds	r3, #40	@ 0x28
 80051b4:	2101      	movs	r1, #1
 80051b6:	4618      	mov	r0, r3
 80051b8:	f001 f86a 	bl	8006290 <RCCEx_PLL3_Config>
 80051bc:	4603      	mov	r3, r0
 80051be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80051c2:	e004      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80051ca:	e000      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80051cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10a      	bne.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80051d6:	4bbf      	ldr	r3, [pc, #764]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80051d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051da:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80051de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051e4:	4abb      	ldr	r2, [pc, #748]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80051e6:	430b      	orrs	r3, r1
 80051e8:	6553      	str	r3, [r2, #84]	@ 0x54
 80051ea:	e003      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80051f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fc:	f002 0302 	and.w	r3, r2, #2
 8005200:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005204:	2300      	movs	r3, #0
 8005206:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800520a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800520e:	460b      	mov	r3, r1
 8005210:	4313      	orrs	r3, r2
 8005212:	d041      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005218:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800521a:	2b05      	cmp	r3, #5
 800521c:	d824      	bhi.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800521e:	a201      	add	r2, pc, #4	@ (adr r2, 8005224 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005224:	08005271 	.word	0x08005271
 8005228:	0800523d 	.word	0x0800523d
 800522c:	08005253 	.word	0x08005253
 8005230:	08005271 	.word	0x08005271
 8005234:	08005271 	.word	0x08005271
 8005238:	08005271 	.word	0x08005271
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800523c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005240:	3308      	adds	r3, #8
 8005242:	2101      	movs	r1, #1
 8005244:	4618      	mov	r0, r3
 8005246:	f000 ff71 	bl	800612c <RCCEx_PLL2_Config>
 800524a:	4603      	mov	r3, r0
 800524c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005250:	e00f      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005256:	3328      	adds	r3, #40	@ 0x28
 8005258:	2101      	movs	r1, #1
 800525a:	4618      	mov	r0, r3
 800525c:	f001 f818 	bl	8006290 <RCCEx_PLL3_Config>
 8005260:	4603      	mov	r3, r0
 8005262:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005266:	e004      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800526e:	e000      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005270:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005272:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10a      	bne.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800527a:	4b96      	ldr	r3, [pc, #600]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800527c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800527e:	f023 0107 	bic.w	r1, r3, #7
 8005282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005286:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005288:	4a92      	ldr	r2, [pc, #584]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800528a:	430b      	orrs	r3, r1
 800528c:	6553      	str	r3, [r2, #84]	@ 0x54
 800528e:	e003      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005290:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005294:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800529c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a0:	f002 0304 	and.w	r3, r2, #4
 80052a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052a8:	2300      	movs	r3, #0
 80052aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052ae:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80052b2:	460b      	mov	r3, r1
 80052b4:	4313      	orrs	r3, r2
 80052b6:	d044      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80052b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052c0:	2b05      	cmp	r3, #5
 80052c2:	d825      	bhi.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80052c4:	a201      	add	r2, pc, #4	@ (adr r2, 80052cc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80052c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ca:	bf00      	nop
 80052cc:	08005319 	.word	0x08005319
 80052d0:	080052e5 	.word	0x080052e5
 80052d4:	080052fb 	.word	0x080052fb
 80052d8:	08005319 	.word	0x08005319
 80052dc:	08005319 	.word	0x08005319
 80052e0:	08005319 	.word	0x08005319
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052e8:	3308      	adds	r3, #8
 80052ea:	2101      	movs	r1, #1
 80052ec:	4618      	mov	r0, r3
 80052ee:	f000 ff1d 	bl	800612c <RCCEx_PLL2_Config>
 80052f2:	4603      	mov	r3, r0
 80052f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80052f8:	e00f      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052fe:	3328      	adds	r3, #40	@ 0x28
 8005300:	2101      	movs	r1, #1
 8005302:	4618      	mov	r0, r3
 8005304:	f000 ffc4 	bl	8006290 <RCCEx_PLL3_Config>
 8005308:	4603      	mov	r3, r0
 800530a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800530e:	e004      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005316:	e000      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005318:	bf00      	nop
    }

    if (ret == HAL_OK)
 800531a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10b      	bne.n	800533a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005322:	4b6c      	ldr	r3, [pc, #432]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005326:	f023 0107 	bic.w	r1, r3, #7
 800532a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800532e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005332:	4a68      	ldr	r2, [pc, #416]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005334:	430b      	orrs	r3, r1
 8005336:	6593      	str	r3, [r2, #88]	@ 0x58
 8005338:	e003      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800533a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800533e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534a:	f002 0320 	and.w	r3, r2, #32
 800534e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005352:	2300      	movs	r3, #0
 8005354:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005358:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800535c:	460b      	mov	r3, r1
 800535e:	4313      	orrs	r3, r2
 8005360:	d055      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800536a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800536e:	d033      	beq.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005370:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005374:	d82c      	bhi.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005376:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800537a:	d02f      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800537c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005380:	d826      	bhi.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005382:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005386:	d02b      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005388:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800538c:	d820      	bhi.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800538e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005392:	d012      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005394:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005398:	d81a      	bhi.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800539a:	2b00      	cmp	r3, #0
 800539c:	d022      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800539e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053a2:	d115      	bne.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053a8:	3308      	adds	r3, #8
 80053aa:	2100      	movs	r1, #0
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 febd 	bl	800612c <RCCEx_PLL2_Config>
 80053b2:	4603      	mov	r3, r0
 80053b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80053b8:	e015      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053be:	3328      	adds	r3, #40	@ 0x28
 80053c0:	2102      	movs	r1, #2
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 ff64 	bl	8006290 <RCCEx_PLL3_Config>
 80053c8:	4603      	mov	r3, r0
 80053ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80053ce:	e00a      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053d6:	e006      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80053d8:	bf00      	nop
 80053da:	e004      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80053dc:	bf00      	nop
 80053de:	e002      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80053e0:	bf00      	nop
 80053e2:	e000      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80053e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d10b      	bne.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053ee:	4b39      	ldr	r3, [pc, #228]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053f2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80053f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053fe:	4a35      	ldr	r2, [pc, #212]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005400:	430b      	orrs	r3, r1
 8005402:	6553      	str	r3, [r2, #84]	@ 0x54
 8005404:	e003      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005406:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800540a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800540e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005416:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800541a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800541e:	2300      	movs	r3, #0
 8005420:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005424:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005428:	460b      	mov	r3, r1
 800542a:	4313      	orrs	r3, r2
 800542c:	d058      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800542e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005432:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005436:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800543a:	d033      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800543c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005440:	d82c      	bhi.n	800549c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005442:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005446:	d02f      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005448:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800544c:	d826      	bhi.n	800549c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800544e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005452:	d02b      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005454:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005458:	d820      	bhi.n	800549c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800545a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800545e:	d012      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005460:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005464:	d81a      	bhi.n	800549c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005466:	2b00      	cmp	r3, #0
 8005468:	d022      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800546a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800546e:	d115      	bne.n	800549c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005474:	3308      	adds	r3, #8
 8005476:	2100      	movs	r1, #0
 8005478:	4618      	mov	r0, r3
 800547a:	f000 fe57 	bl	800612c <RCCEx_PLL2_Config>
 800547e:	4603      	mov	r3, r0
 8005480:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005484:	e015      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800548a:	3328      	adds	r3, #40	@ 0x28
 800548c:	2102      	movs	r1, #2
 800548e:	4618      	mov	r0, r3
 8005490:	f000 fefe 	bl	8006290 <RCCEx_PLL3_Config>
 8005494:	4603      	mov	r3, r0
 8005496:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800549a:	e00a      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054a2:	e006      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80054a4:	bf00      	nop
 80054a6:	e004      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80054a8:	bf00      	nop
 80054aa:	e002      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80054ac:	bf00      	nop
 80054ae:	e000      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80054b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10e      	bne.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054ba:	4b06      	ldr	r3, [pc, #24]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054be:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80054c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054ca:	4a02      	ldr	r2, [pc, #8]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054cc:	430b      	orrs	r3, r1
 80054ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80054d0:	e006      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80054d2:	bf00      	nop
 80054d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80054e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80054ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80054f0:	2300      	movs	r3, #0
 80054f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80054f6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80054fa:	460b      	mov	r3, r1
 80054fc:	4313      	orrs	r3, r2
 80054fe:	d055      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005504:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005508:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800550c:	d033      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800550e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005512:	d82c      	bhi.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005514:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005518:	d02f      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800551a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800551e:	d826      	bhi.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005520:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005524:	d02b      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005526:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800552a:	d820      	bhi.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800552c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005530:	d012      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005532:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005536:	d81a      	bhi.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005538:	2b00      	cmp	r3, #0
 800553a:	d022      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800553c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005540:	d115      	bne.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005546:	3308      	adds	r3, #8
 8005548:	2100      	movs	r1, #0
 800554a:	4618      	mov	r0, r3
 800554c:	f000 fdee 	bl	800612c <RCCEx_PLL2_Config>
 8005550:	4603      	mov	r3, r0
 8005552:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005556:	e015      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800555c:	3328      	adds	r3, #40	@ 0x28
 800555e:	2102      	movs	r1, #2
 8005560:	4618      	mov	r0, r3
 8005562:	f000 fe95 	bl	8006290 <RCCEx_PLL3_Config>
 8005566:	4603      	mov	r3, r0
 8005568:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800556c:	e00a      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005574:	e006      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005576:	bf00      	nop
 8005578:	e004      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800557a:	bf00      	nop
 800557c:	e002      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800557e:	bf00      	nop
 8005580:	e000      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005582:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005584:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005588:	2b00      	cmp	r3, #0
 800558a:	d10b      	bne.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800558c:	4ba1      	ldr	r3, [pc, #644]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800558e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005590:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005598:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800559c:	4a9d      	ldr	r2, [pc, #628]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800559e:	430b      	orrs	r3, r1
 80055a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80055a2:	e003      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80055ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b4:	f002 0308 	and.w	r3, r2, #8
 80055b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055bc:	2300      	movs	r3, #0
 80055be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80055c2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80055c6:	460b      	mov	r3, r1
 80055c8:	4313      	orrs	r3, r2
 80055ca:	d01e      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80055cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055d8:	d10c      	bne.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80055da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055de:	3328      	adds	r3, #40	@ 0x28
 80055e0:	2102      	movs	r1, #2
 80055e2:	4618      	mov	r0, r3
 80055e4:	f000 fe54 	bl	8006290 <RCCEx_PLL3_Config>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d002      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80055f4:	4b87      	ldr	r3, [pc, #540]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055f8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80055fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005600:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005604:	4a83      	ldr	r2, [pc, #524]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005606:	430b      	orrs	r3, r1
 8005608:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800560a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800560e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005612:	f002 0310 	and.w	r3, r2, #16
 8005616:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800561a:	2300      	movs	r3, #0
 800561c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005620:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005624:	460b      	mov	r3, r1
 8005626:	4313      	orrs	r3, r2
 8005628:	d01e      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800562a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800562e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005632:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005636:	d10c      	bne.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800563c:	3328      	adds	r3, #40	@ 0x28
 800563e:	2102      	movs	r1, #2
 8005640:	4618      	mov	r0, r3
 8005642:	f000 fe25 	bl	8006290 <RCCEx_PLL3_Config>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d002      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005652:	4b70      	ldr	r3, [pc, #448]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005656:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800565a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800565e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005662:	4a6c      	ldr	r2, [pc, #432]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005664:	430b      	orrs	r3, r1
 8005666:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800566c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005670:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005674:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005678:	2300      	movs	r3, #0
 800567a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800567e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005682:	460b      	mov	r3, r1
 8005684:	4313      	orrs	r3, r2
 8005686:	d03e      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800568c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005690:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005694:	d022      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005696:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800569a:	d81b      	bhi.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800569c:	2b00      	cmp	r3, #0
 800569e:	d003      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80056a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056a4:	d00b      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80056a6:	e015      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ac:	3308      	adds	r3, #8
 80056ae:	2100      	movs	r1, #0
 80056b0:	4618      	mov	r0, r3
 80056b2:	f000 fd3b 	bl	800612c <RCCEx_PLL2_Config>
 80056b6:	4603      	mov	r3, r0
 80056b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80056bc:	e00f      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80056be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056c2:	3328      	adds	r3, #40	@ 0x28
 80056c4:	2102      	movs	r1, #2
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 fde2 	bl	8006290 <RCCEx_PLL3_Config>
 80056cc:	4603      	mov	r3, r0
 80056ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80056d2:	e004      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056da:	e000      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80056dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10b      	bne.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056e6:	4b4b      	ldr	r3, [pc, #300]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ea:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80056ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80056f6:	4a47      	ldr	r2, [pc, #284]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056f8:	430b      	orrs	r3, r1
 80056fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80056fc:	e003      	b.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005702:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800570a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005712:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005714:	2300      	movs	r3, #0
 8005716:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005718:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800571c:	460b      	mov	r3, r1
 800571e:	4313      	orrs	r3, r2
 8005720:	d03b      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800572a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800572e:	d01f      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005730:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005734:	d818      	bhi.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005736:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800573a:	d003      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800573c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005740:	d007      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005742:	e011      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005744:	4b33      	ldr	r3, [pc, #204]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005748:	4a32      	ldr	r2, [pc, #200]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800574a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800574e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005750:	e00f      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005756:	3328      	adds	r3, #40	@ 0x28
 8005758:	2101      	movs	r1, #1
 800575a:	4618      	mov	r0, r3
 800575c:	f000 fd98 	bl	8006290 <RCCEx_PLL3_Config>
 8005760:	4603      	mov	r3, r0
 8005762:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005766:	e004      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800576e:	e000      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005770:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005772:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10b      	bne.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800577a:	4b26      	ldr	r3, [pc, #152]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800577c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800577e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800578a:	4a22      	ldr	r2, [pc, #136]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800578c:	430b      	orrs	r3, r1
 800578e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005790:	e003      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005792:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005796:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800579a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800579e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80057a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80057a8:	2300      	movs	r3, #0
 80057aa:	677b      	str	r3, [r7, #116]	@ 0x74
 80057ac:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80057b0:	460b      	mov	r3, r1
 80057b2:	4313      	orrs	r3, r2
 80057b4:	d034      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80057b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d003      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80057c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057c4:	d007      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80057c6:	e011      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057c8:	4b12      	ldr	r3, [pc, #72]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057cc:	4a11      	ldr	r2, [pc, #68]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80057d4:	e00e      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80057d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057da:	3308      	adds	r3, #8
 80057dc:	2102      	movs	r1, #2
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 fca4 	bl	800612c <RCCEx_PLL2_Config>
 80057e4:	4603      	mov	r3, r0
 80057e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80057ea:	e003      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10d      	bne.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80057fc:	4b05      	ldr	r3, [pc, #20]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005800:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005808:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800580a:	4a02      	ldr	r2, [pc, #8]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800580c:	430b      	orrs	r3, r1
 800580e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005810:	e006      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005812:	bf00      	nop
 8005814:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005818:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800581c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005828:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800582c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800582e:	2300      	movs	r3, #0
 8005830:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005832:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005836:	460b      	mov	r3, r1
 8005838:	4313      	orrs	r3, r2
 800583a:	d00c      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800583c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005840:	3328      	adds	r3, #40	@ 0x28
 8005842:	2102      	movs	r1, #2
 8005844:	4618      	mov	r0, r3
 8005846:	f000 fd23 	bl	8006290 <RCCEx_PLL3_Config>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d002      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800585a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005862:	663b      	str	r3, [r7, #96]	@ 0x60
 8005864:	2300      	movs	r3, #0
 8005866:	667b      	str	r3, [r7, #100]	@ 0x64
 8005868:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800586c:	460b      	mov	r3, r1
 800586e:	4313      	orrs	r3, r2
 8005870:	d038      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005876:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800587a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800587e:	d018      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005880:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005884:	d811      	bhi.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005886:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800588a:	d014      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800588c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005890:	d80b      	bhi.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005892:	2b00      	cmp	r3, #0
 8005894:	d011      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005896:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800589a:	d106      	bne.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800589c:	4bc3      	ldr	r3, [pc, #780]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800589e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a0:	4ac2      	ldr	r2, [pc, #776]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80058a8:	e008      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058b0:	e004      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80058b2:	bf00      	nop
 80058b4:	e002      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80058b6:	bf00      	nop
 80058b8:	e000      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80058ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10b      	bne.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80058c4:	4bb9      	ldr	r3, [pc, #740]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058c8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80058cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058d4:	4ab5      	ldr	r2, [pc, #724]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058d6:	430b      	orrs	r3, r1
 80058d8:	6553      	str	r3, [r2, #84]	@ 0x54
 80058da:	e003      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80058e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ec:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80058f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80058f2:	2300      	movs	r3, #0
 80058f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058f6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80058fa:	460b      	mov	r3, r1
 80058fc:	4313      	orrs	r3, r2
 80058fe:	d009      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005900:	4baa      	ldr	r3, [pc, #680]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005902:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005904:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800590c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800590e:	4aa7      	ldr	r2, [pc, #668]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005910:	430b      	orrs	r3, r1
 8005912:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005920:	653b      	str	r3, [r7, #80]	@ 0x50
 8005922:	2300      	movs	r3, #0
 8005924:	657b      	str	r3, [r7, #84]	@ 0x54
 8005926:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800592a:	460b      	mov	r3, r1
 800592c:	4313      	orrs	r3, r2
 800592e:	d00a      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005930:	4b9e      	ldr	r3, [pc, #632]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800593c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005940:	4a9a      	ldr	r2, [pc, #616]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005942:	430b      	orrs	r3, r1
 8005944:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800594a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005952:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005954:	2300      	movs	r3, #0
 8005956:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005958:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800595c:	460b      	mov	r3, r1
 800595e:	4313      	orrs	r3, r2
 8005960:	d009      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005962:	4b92      	ldr	r3, [pc, #584]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005964:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005966:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800596a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800596e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005970:	4a8e      	ldr	r2, [pc, #568]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005972:	430b      	orrs	r3, r1
 8005974:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800597a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005982:	643b      	str	r3, [r7, #64]	@ 0x40
 8005984:	2300      	movs	r3, #0
 8005986:	647b      	str	r3, [r7, #68]	@ 0x44
 8005988:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800598c:	460b      	mov	r3, r1
 800598e:	4313      	orrs	r3, r2
 8005990:	d00e      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005992:	4b86      	ldr	r3, [pc, #536]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	4a85      	ldr	r2, [pc, #532]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005998:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800599c:	6113      	str	r3, [r2, #16]
 800599e:	4b83      	ldr	r3, [pc, #524]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059a0:	6919      	ldr	r1, [r3, #16]
 80059a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059a6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80059aa:	4a80      	ldr	r2, [pc, #512]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059ac:	430b      	orrs	r3, r1
 80059ae:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80059b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80059bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059be:	2300      	movs	r3, #0
 80059c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059c2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80059c6:	460b      	mov	r3, r1
 80059c8:	4313      	orrs	r3, r2
 80059ca:	d009      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80059cc:	4b77      	ldr	r3, [pc, #476]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059d0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80059d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059da:	4a74      	ldr	r2, [pc, #464]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059dc:	430b      	orrs	r3, r1
 80059de:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80059e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80059ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80059ee:	2300      	movs	r3, #0
 80059f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80059f2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80059f6:	460b      	mov	r3, r1
 80059f8:	4313      	orrs	r3, r2
 80059fa:	d00a      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80059fc:	4b6b      	ldr	r3, [pc, #428]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a00:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a0c:	4a67      	ldr	r2, [pc, #412]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a0e:	430b      	orrs	r3, r1
 8005a10:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1a:	2100      	movs	r1, #0
 8005a1c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a24:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005a28:	460b      	mov	r3, r1
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	d011      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a32:	3308      	adds	r3, #8
 8005a34:	2100      	movs	r1, #0
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 fb78 	bl	800612c <RCCEx_PLL2_Config>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005a42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5a:	2100      	movs	r1, #0
 8005a5c:	6239      	str	r1, [r7, #32]
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a64:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005a68:	460b      	mov	r3, r1
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	d011      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a72:	3308      	adds	r3, #8
 8005a74:	2101      	movs	r1, #1
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 fb58 	bl	800612c <RCCEx_PLL2_Config>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005a82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d003      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	61b9      	str	r1, [r7, #24]
 8005a9e:	f003 0304 	and.w	r3, r3, #4
 8005aa2:	61fb      	str	r3, [r7, #28]
 8005aa4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	d011      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab2:	3308      	adds	r3, #8
 8005ab4:	2102      	movs	r1, #2
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 fb38 	bl	800612c <RCCEx_PLL2_Config>
 8005abc:	4603      	mov	r3, r0
 8005abe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005ac2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ace:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ada:	2100      	movs	r1, #0
 8005adc:	6139      	str	r1, [r7, #16]
 8005ade:	f003 0308 	and.w	r3, r3, #8
 8005ae2:	617b      	str	r3, [r7, #20]
 8005ae4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005ae8:	460b      	mov	r3, r1
 8005aea:	4313      	orrs	r3, r2
 8005aec:	d011      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af2:	3328      	adds	r3, #40	@ 0x28
 8005af4:	2100      	movs	r1, #0
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 fbca 	bl	8006290 <RCCEx_PLL3_Config>
 8005afc:	4603      	mov	r3, r0
 8005afe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005b02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d003      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	f003 0310 	and.w	r3, r3, #16
 8005b22:	60fb      	str	r3, [r7, #12]
 8005b24:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005b28:	460b      	mov	r3, r1
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	d011      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b32:	3328      	adds	r3, #40	@ 0x28
 8005b34:	2101      	movs	r1, #1
 8005b36:	4618      	mov	r0, r3
 8005b38:	f000 fbaa 	bl	8006290 <RCCEx_PLL3_Config>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005b42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	6039      	str	r1, [r7, #0]
 8005b5e:	f003 0320 	and.w	r3, r3, #32
 8005b62:	607b      	str	r3, [r7, #4]
 8005b64:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005b68:	460b      	mov	r3, r1
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	d011      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b72:	3328      	adds	r3, #40	@ 0x28
 8005b74:	2102      	movs	r1, #2
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 fb8a 	bl	8006290 <RCCEx_PLL3_Config>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005b82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d003      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005b92:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d101      	bne.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	e000      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bac:	58024400 	.word	0x58024400

08005bb0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005bb4:	f7fe fd96 	bl	80046e4 <HAL_RCC_GetHCLKFreq>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	4b06      	ldr	r3, [pc, #24]	@ (8005bd4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	091b      	lsrs	r3, r3, #4
 8005bc0:	f003 0307 	and.w	r3, r3, #7
 8005bc4:	4904      	ldr	r1, [pc, #16]	@ (8005bd8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005bc6:	5ccb      	ldrb	r3, [r1, r3]
 8005bc8:	f003 031f 	and.w	r3, r3, #31
 8005bcc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	58024400 	.word	0x58024400
 8005bd8:	0800ad70 	.word	0x0800ad70

08005bdc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b089      	sub	sp, #36	@ 0x24
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005be4:	4ba1      	ldr	r3, [pc, #644]	@ (8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be8:	f003 0303 	and.w	r3, r3, #3
 8005bec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005bee:	4b9f      	ldr	r3, [pc, #636]	@ (8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf2:	0b1b      	lsrs	r3, r3, #12
 8005bf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005bf8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005bfa:	4b9c      	ldr	r3, [pc, #624]	@ (8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bfe:	091b      	lsrs	r3, r3, #4
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005c06:	4b99      	ldr	r3, [pc, #612]	@ (8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c0a:	08db      	lsrs	r3, r3, #3
 8005c0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	fb02 f303 	mul.w	r3, r2, r3
 8005c16:	ee07 3a90 	vmov	s15, r3
 8005c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f000 8111 	beq.w	8005e4c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	f000 8083 	beq.w	8005d38 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	f200 80a1 	bhi.w	8005d7c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d003      	beq.n	8005c48 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d056      	beq.n	8005cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005c46:	e099      	b.n	8005d7c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c48:	4b88      	ldr	r3, [pc, #544]	@ (8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0320 	and.w	r3, r3, #32
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d02d      	beq.n	8005cb0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c54:	4b85      	ldr	r3, [pc, #532]	@ (8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	08db      	lsrs	r3, r3, #3
 8005c5a:	f003 0303 	and.w	r3, r3, #3
 8005c5e:	4a84      	ldr	r2, [pc, #528]	@ (8005e70 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005c60:	fa22 f303 	lsr.w	r3, r2, r3
 8005c64:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	ee07 3a90 	vmov	s15, r3
 8005c6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	ee07 3a90 	vmov	s15, r3
 8005c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c7e:	4b7b      	ldr	r3, [pc, #492]	@ (8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c86:	ee07 3a90 	vmov	s15, r3
 8005c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c92:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005caa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005cae:	e087      	b.n	8005dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	ee07 3a90 	vmov	s15, r3
 8005cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005e78 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cc2:	4b6a      	ldr	r3, [pc, #424]	@ (8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cca:	ee07 3a90 	vmov	s15, r3
 8005cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cd6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ce2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cf2:	e065      	b.n	8005dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	ee07 3a90 	vmov	s15, r3
 8005cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cfe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d06:	4b59      	ldr	r3, [pc, #356]	@ (8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d0e:	ee07 3a90 	vmov	s15, r3
 8005d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d16:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d1a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d36:	e043      	b.n	8005dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	ee07 3a90 	vmov	s15, r3
 8005d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d42:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005e80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d4a:	4b48      	ldr	r3, [pc, #288]	@ (8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d52:	ee07 3a90 	vmov	s15, r3
 8005d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d5e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d7a:	e021      	b.n	8005dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	ee07 3a90 	vmov	s15, r3
 8005d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d86:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d8e:	4b37      	ldr	r3, [pc, #220]	@ (8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d96:	ee07 3a90 	vmov	s15, r3
 8005d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005da2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005dbe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005dc0:	4b2a      	ldr	r3, [pc, #168]	@ (8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc4:	0a5b      	lsrs	r3, r3, #9
 8005dc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005dca:	ee07 3a90 	vmov	s15, r3
 8005dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005dd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dda:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005de2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005de6:	ee17 2a90 	vmov	r2, s15
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005dee:	4b1f      	ldr	r3, [pc, #124]	@ (8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df2:	0c1b      	lsrs	r3, r3, #16
 8005df4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005df8:	ee07 3a90 	vmov	s15, r3
 8005dfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e00:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e08:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e14:	ee17 2a90 	vmov	r2, s15
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005e1c:	4b13      	ldr	r3, [pc, #76]	@ (8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e20:	0e1b      	lsrs	r3, r3, #24
 8005e22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e26:	ee07 3a90 	vmov	s15, r3
 8005e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e36:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e42:	ee17 2a90 	vmov	r2, s15
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005e4a:	e008      	b.n	8005e5e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	609a      	str	r2, [r3, #8]
}
 8005e5e:	bf00      	nop
 8005e60:	3724      	adds	r7, #36	@ 0x24
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	58024400 	.word	0x58024400
 8005e70:	03d09000 	.word	0x03d09000
 8005e74:	46000000 	.word	0x46000000
 8005e78:	4c742400 	.word	0x4c742400
 8005e7c:	4a742400 	.word	0x4a742400
 8005e80:	4bbebc20 	.word	0x4bbebc20

08005e84 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b089      	sub	sp, #36	@ 0x24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e8c:	4ba1      	ldr	r3, [pc, #644]	@ (8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e90:	f003 0303 	and.w	r3, r3, #3
 8005e94:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005e96:	4b9f      	ldr	r3, [pc, #636]	@ (8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e9a:	0d1b      	lsrs	r3, r3, #20
 8005e9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ea0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005ea2:	4b9c      	ldr	r3, [pc, #624]	@ (8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea6:	0a1b      	lsrs	r3, r3, #8
 8005ea8:	f003 0301 	and.w	r3, r3, #1
 8005eac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005eae:	4b99      	ldr	r3, [pc, #612]	@ (8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eb2:	08db      	lsrs	r3, r3, #3
 8005eb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	fb02 f303 	mul.w	r3, r2, r3
 8005ebe:	ee07 3a90 	vmov	s15, r3
 8005ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ec6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f000 8111 	beq.w	80060f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	f000 8083 	beq.w	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	f200 80a1 	bhi.w	8006024 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d003      	beq.n	8005ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d056      	beq.n	8005f9c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005eee:	e099      	b.n	8006024 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ef0:	4b88      	ldr	r3, [pc, #544]	@ (8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0320 	and.w	r3, r3, #32
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d02d      	beq.n	8005f58 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005efc:	4b85      	ldr	r3, [pc, #532]	@ (8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	08db      	lsrs	r3, r3, #3
 8005f02:	f003 0303 	and.w	r3, r3, #3
 8005f06:	4a84      	ldr	r2, [pc, #528]	@ (8006118 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005f08:	fa22 f303 	lsr.w	r3, r2, r3
 8005f0c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	ee07 3a90 	vmov	s15, r3
 8005f14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	ee07 3a90 	vmov	s15, r3
 8005f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f26:	4b7b      	ldr	r3, [pc, #492]	@ (8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f2e:	ee07 3a90 	vmov	s15, r3
 8005f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f36:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f3a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800611c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f52:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005f56:	e087      	b.n	8006068 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	ee07 3a90 	vmov	s15, r3
 8005f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f62:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006120 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f6a:	4b6a      	ldr	r3, [pc, #424]	@ (8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f72:	ee07 3a90 	vmov	s15, r3
 8005f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f7e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800611c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f9a:	e065      	b.n	8006068 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	ee07 3a90 	vmov	s15, r3
 8005fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fa6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fae:	4b59      	ldr	r3, [pc, #356]	@ (8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fb6:	ee07 3a90 	vmov	s15, r3
 8005fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fc2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800611c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fde:	e043      	b.n	8006068 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	ee07 3a90 	vmov	s15, r3
 8005fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ff2:	4b48      	ldr	r3, [pc, #288]	@ (8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ffa:	ee07 3a90 	vmov	s15, r3
 8005ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006002:	ed97 6a03 	vldr	s12, [r7, #12]
 8006006:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800611c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800600a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800600e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006012:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800601a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800601e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006022:	e021      	b.n	8006068 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	ee07 3a90 	vmov	s15, r3
 800602a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800602e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006036:	4b37      	ldr	r3, [pc, #220]	@ (8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800603a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800603e:	ee07 3a90 	vmov	s15, r3
 8006042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006046:	ed97 6a03 	vldr	s12, [r7, #12]
 800604a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800611c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800604e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006056:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800605a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800605e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006062:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006066:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006068:	4b2a      	ldr	r3, [pc, #168]	@ (8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800606a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800606c:	0a5b      	lsrs	r3, r3, #9
 800606e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006072:	ee07 3a90 	vmov	s15, r3
 8006076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800607a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800607e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006082:	edd7 6a07 	vldr	s13, [r7, #28]
 8006086:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800608a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800608e:	ee17 2a90 	vmov	r2, s15
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006096:	4b1f      	ldr	r3, [pc, #124]	@ (8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800609a:	0c1b      	lsrs	r3, r3, #16
 800609c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060a0:	ee07 3a90 	vmov	s15, r3
 80060a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80060b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060bc:	ee17 2a90 	vmov	r2, s15
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80060c4:	4b13      	ldr	r3, [pc, #76]	@ (8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c8:	0e1b      	lsrs	r3, r3, #24
 80060ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060ce:	ee07 3a90 	vmov	s15, r3
 80060d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060de:	edd7 6a07 	vldr	s13, [r7, #28]
 80060e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060ea:	ee17 2a90 	vmov	r2, s15
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80060f2:	e008      	b.n	8006106 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	609a      	str	r2, [r3, #8]
}
 8006106:	bf00      	nop
 8006108:	3724      	adds	r7, #36	@ 0x24
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	58024400 	.word	0x58024400
 8006118:	03d09000 	.word	0x03d09000
 800611c:	46000000 	.word	0x46000000
 8006120:	4c742400 	.word	0x4c742400
 8006124:	4a742400 	.word	0x4a742400
 8006128:	4bbebc20 	.word	0x4bbebc20

0800612c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006136:	2300      	movs	r3, #0
 8006138:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800613a:	4b53      	ldr	r3, [pc, #332]	@ (8006288 <RCCEx_PLL2_Config+0x15c>)
 800613c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800613e:	f003 0303 	and.w	r3, r3, #3
 8006142:	2b03      	cmp	r3, #3
 8006144:	d101      	bne.n	800614a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e099      	b.n	800627e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800614a:	4b4f      	ldr	r3, [pc, #316]	@ (8006288 <RCCEx_PLL2_Config+0x15c>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a4e      	ldr	r2, [pc, #312]	@ (8006288 <RCCEx_PLL2_Config+0x15c>)
 8006150:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006154:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006156:	f7fc fc7d 	bl	8002a54 <HAL_GetTick>
 800615a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800615c:	e008      	b.n	8006170 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800615e:	f7fc fc79 	bl	8002a54 <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	2b02      	cmp	r3, #2
 800616a:	d901      	bls.n	8006170 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e086      	b.n	800627e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006170:	4b45      	ldr	r3, [pc, #276]	@ (8006288 <RCCEx_PLL2_Config+0x15c>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1f0      	bne.n	800615e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800617c:	4b42      	ldr	r3, [pc, #264]	@ (8006288 <RCCEx_PLL2_Config+0x15c>)
 800617e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006180:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	031b      	lsls	r3, r3, #12
 800618a:	493f      	ldr	r1, [pc, #252]	@ (8006288 <RCCEx_PLL2_Config+0x15c>)
 800618c:	4313      	orrs	r3, r2
 800618e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	3b01      	subs	r3, #1
 8006196:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	3b01      	subs	r3, #1
 80061a0:	025b      	lsls	r3, r3, #9
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	431a      	orrs	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	041b      	lsls	r3, r3, #16
 80061ae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80061b2:	431a      	orrs	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	3b01      	subs	r3, #1
 80061ba:	061b      	lsls	r3, r3, #24
 80061bc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80061c0:	4931      	ldr	r1, [pc, #196]	@ (8006288 <RCCEx_PLL2_Config+0x15c>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80061c6:	4b30      	ldr	r3, [pc, #192]	@ (8006288 <RCCEx_PLL2_Config+0x15c>)
 80061c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	492d      	ldr	r1, [pc, #180]	@ (8006288 <RCCEx_PLL2_Config+0x15c>)
 80061d4:	4313      	orrs	r3, r2
 80061d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80061d8:	4b2b      	ldr	r3, [pc, #172]	@ (8006288 <RCCEx_PLL2_Config+0x15c>)
 80061da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061dc:	f023 0220 	bic.w	r2, r3, #32
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	4928      	ldr	r1, [pc, #160]	@ (8006288 <RCCEx_PLL2_Config+0x15c>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80061ea:	4b27      	ldr	r3, [pc, #156]	@ (8006288 <RCCEx_PLL2_Config+0x15c>)
 80061ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ee:	4a26      	ldr	r2, [pc, #152]	@ (8006288 <RCCEx_PLL2_Config+0x15c>)
 80061f0:	f023 0310 	bic.w	r3, r3, #16
 80061f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80061f6:	4b24      	ldr	r3, [pc, #144]	@ (8006288 <RCCEx_PLL2_Config+0x15c>)
 80061f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061fa:	4b24      	ldr	r3, [pc, #144]	@ (800628c <RCCEx_PLL2_Config+0x160>)
 80061fc:	4013      	ands	r3, r2
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	69d2      	ldr	r2, [r2, #28]
 8006202:	00d2      	lsls	r2, r2, #3
 8006204:	4920      	ldr	r1, [pc, #128]	@ (8006288 <RCCEx_PLL2_Config+0x15c>)
 8006206:	4313      	orrs	r3, r2
 8006208:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800620a:	4b1f      	ldr	r3, [pc, #124]	@ (8006288 <RCCEx_PLL2_Config+0x15c>)
 800620c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800620e:	4a1e      	ldr	r2, [pc, #120]	@ (8006288 <RCCEx_PLL2_Config+0x15c>)
 8006210:	f043 0310 	orr.w	r3, r3, #16
 8006214:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d106      	bne.n	800622a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800621c:	4b1a      	ldr	r3, [pc, #104]	@ (8006288 <RCCEx_PLL2_Config+0x15c>)
 800621e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006220:	4a19      	ldr	r2, [pc, #100]	@ (8006288 <RCCEx_PLL2_Config+0x15c>)
 8006222:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006226:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006228:	e00f      	b.n	800624a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d106      	bne.n	800623e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006230:	4b15      	ldr	r3, [pc, #84]	@ (8006288 <RCCEx_PLL2_Config+0x15c>)
 8006232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006234:	4a14      	ldr	r2, [pc, #80]	@ (8006288 <RCCEx_PLL2_Config+0x15c>)
 8006236:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800623a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800623c:	e005      	b.n	800624a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800623e:	4b12      	ldr	r3, [pc, #72]	@ (8006288 <RCCEx_PLL2_Config+0x15c>)
 8006240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006242:	4a11      	ldr	r2, [pc, #68]	@ (8006288 <RCCEx_PLL2_Config+0x15c>)
 8006244:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006248:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800624a:	4b0f      	ldr	r3, [pc, #60]	@ (8006288 <RCCEx_PLL2_Config+0x15c>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a0e      	ldr	r2, [pc, #56]	@ (8006288 <RCCEx_PLL2_Config+0x15c>)
 8006250:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006254:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006256:	f7fc fbfd 	bl	8002a54 <HAL_GetTick>
 800625a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800625c:	e008      	b.n	8006270 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800625e:	f7fc fbf9 	bl	8002a54 <HAL_GetTick>
 8006262:	4602      	mov	r2, r0
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	2b02      	cmp	r3, #2
 800626a:	d901      	bls.n	8006270 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800626c:	2303      	movs	r3, #3
 800626e:	e006      	b.n	800627e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006270:	4b05      	ldr	r3, [pc, #20]	@ (8006288 <RCCEx_PLL2_Config+0x15c>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d0f0      	beq.n	800625e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800627c:	7bfb      	ldrb	r3, [r7, #15]
}
 800627e:	4618      	mov	r0, r3
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	58024400 	.word	0x58024400
 800628c:	ffff0007 	.word	0xffff0007

08006290 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800629a:	2300      	movs	r3, #0
 800629c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800629e:	4b53      	ldr	r3, [pc, #332]	@ (80063ec <RCCEx_PLL3_Config+0x15c>)
 80062a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a2:	f003 0303 	and.w	r3, r3, #3
 80062a6:	2b03      	cmp	r3, #3
 80062a8:	d101      	bne.n	80062ae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e099      	b.n	80063e2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80062ae:	4b4f      	ldr	r3, [pc, #316]	@ (80063ec <RCCEx_PLL3_Config+0x15c>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a4e      	ldr	r2, [pc, #312]	@ (80063ec <RCCEx_PLL3_Config+0x15c>)
 80062b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062ba:	f7fc fbcb 	bl	8002a54 <HAL_GetTick>
 80062be:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80062c0:	e008      	b.n	80062d4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80062c2:	f7fc fbc7 	bl	8002a54 <HAL_GetTick>
 80062c6:	4602      	mov	r2, r0
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d901      	bls.n	80062d4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80062d0:	2303      	movs	r3, #3
 80062d2:	e086      	b.n	80063e2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80062d4:	4b45      	ldr	r3, [pc, #276]	@ (80063ec <RCCEx_PLL3_Config+0x15c>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d1f0      	bne.n	80062c2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80062e0:	4b42      	ldr	r3, [pc, #264]	@ (80063ec <RCCEx_PLL3_Config+0x15c>)
 80062e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062e4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	051b      	lsls	r3, r3, #20
 80062ee:	493f      	ldr	r1, [pc, #252]	@ (80063ec <RCCEx_PLL3_Config+0x15c>)
 80062f0:	4313      	orrs	r3, r2
 80062f2:	628b      	str	r3, [r1, #40]	@ 0x28
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	3b01      	subs	r3, #1
 80062fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	3b01      	subs	r3, #1
 8006304:	025b      	lsls	r3, r3, #9
 8006306:	b29b      	uxth	r3, r3
 8006308:	431a      	orrs	r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	3b01      	subs	r3, #1
 8006310:	041b      	lsls	r3, r3, #16
 8006312:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006316:	431a      	orrs	r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	3b01      	subs	r3, #1
 800631e:	061b      	lsls	r3, r3, #24
 8006320:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006324:	4931      	ldr	r1, [pc, #196]	@ (80063ec <RCCEx_PLL3_Config+0x15c>)
 8006326:	4313      	orrs	r3, r2
 8006328:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800632a:	4b30      	ldr	r3, [pc, #192]	@ (80063ec <RCCEx_PLL3_Config+0x15c>)
 800632c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800632e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	492d      	ldr	r1, [pc, #180]	@ (80063ec <RCCEx_PLL3_Config+0x15c>)
 8006338:	4313      	orrs	r3, r2
 800633a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800633c:	4b2b      	ldr	r3, [pc, #172]	@ (80063ec <RCCEx_PLL3_Config+0x15c>)
 800633e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006340:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	699b      	ldr	r3, [r3, #24]
 8006348:	4928      	ldr	r1, [pc, #160]	@ (80063ec <RCCEx_PLL3_Config+0x15c>)
 800634a:	4313      	orrs	r3, r2
 800634c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800634e:	4b27      	ldr	r3, [pc, #156]	@ (80063ec <RCCEx_PLL3_Config+0x15c>)
 8006350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006352:	4a26      	ldr	r2, [pc, #152]	@ (80063ec <RCCEx_PLL3_Config+0x15c>)
 8006354:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006358:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800635a:	4b24      	ldr	r3, [pc, #144]	@ (80063ec <RCCEx_PLL3_Config+0x15c>)
 800635c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800635e:	4b24      	ldr	r3, [pc, #144]	@ (80063f0 <RCCEx_PLL3_Config+0x160>)
 8006360:	4013      	ands	r3, r2
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	69d2      	ldr	r2, [r2, #28]
 8006366:	00d2      	lsls	r2, r2, #3
 8006368:	4920      	ldr	r1, [pc, #128]	@ (80063ec <RCCEx_PLL3_Config+0x15c>)
 800636a:	4313      	orrs	r3, r2
 800636c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800636e:	4b1f      	ldr	r3, [pc, #124]	@ (80063ec <RCCEx_PLL3_Config+0x15c>)
 8006370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006372:	4a1e      	ldr	r2, [pc, #120]	@ (80063ec <RCCEx_PLL3_Config+0x15c>)
 8006374:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006378:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d106      	bne.n	800638e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006380:	4b1a      	ldr	r3, [pc, #104]	@ (80063ec <RCCEx_PLL3_Config+0x15c>)
 8006382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006384:	4a19      	ldr	r2, [pc, #100]	@ (80063ec <RCCEx_PLL3_Config+0x15c>)
 8006386:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800638a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800638c:	e00f      	b.n	80063ae <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d106      	bne.n	80063a2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006394:	4b15      	ldr	r3, [pc, #84]	@ (80063ec <RCCEx_PLL3_Config+0x15c>)
 8006396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006398:	4a14      	ldr	r2, [pc, #80]	@ (80063ec <RCCEx_PLL3_Config+0x15c>)
 800639a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800639e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80063a0:	e005      	b.n	80063ae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80063a2:	4b12      	ldr	r3, [pc, #72]	@ (80063ec <RCCEx_PLL3_Config+0x15c>)
 80063a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a6:	4a11      	ldr	r2, [pc, #68]	@ (80063ec <RCCEx_PLL3_Config+0x15c>)
 80063a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80063ae:	4b0f      	ldr	r3, [pc, #60]	@ (80063ec <RCCEx_PLL3_Config+0x15c>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a0e      	ldr	r2, [pc, #56]	@ (80063ec <RCCEx_PLL3_Config+0x15c>)
 80063b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063ba:	f7fc fb4b 	bl	8002a54 <HAL_GetTick>
 80063be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80063c0:	e008      	b.n	80063d4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80063c2:	f7fc fb47 	bl	8002a54 <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d901      	bls.n	80063d4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e006      	b.n	80063e2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80063d4:	4b05      	ldr	r3, [pc, #20]	@ (80063ec <RCCEx_PLL3_Config+0x15c>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d0f0      	beq.n	80063c2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80063e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	58024400 	.word	0x58024400
 80063f0:	ffff0007 	.word	0xffff0007

080063f4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d101      	bne.n	8006406 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e10f      	b.n	8006626 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a87      	ldr	r2, [pc, #540]	@ (8006630 <HAL_SPI_Init+0x23c>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d00f      	beq.n	8006436 <HAL_SPI_Init+0x42>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a86      	ldr	r2, [pc, #536]	@ (8006634 <HAL_SPI_Init+0x240>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d00a      	beq.n	8006436 <HAL_SPI_Init+0x42>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a84      	ldr	r2, [pc, #528]	@ (8006638 <HAL_SPI_Init+0x244>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d005      	beq.n	8006436 <HAL_SPI_Init+0x42>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	2b0f      	cmp	r3, #15
 8006430:	d901      	bls.n	8006436 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e0f7      	b.n	8006626 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f001 f910 	bl	800765c <SPI_GetPacketSize>
 800643c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a7b      	ldr	r2, [pc, #492]	@ (8006630 <HAL_SPI_Init+0x23c>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d00c      	beq.n	8006462 <HAL_SPI_Init+0x6e>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a79      	ldr	r2, [pc, #484]	@ (8006634 <HAL_SPI_Init+0x240>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d007      	beq.n	8006462 <HAL_SPI_Init+0x6e>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a78      	ldr	r2, [pc, #480]	@ (8006638 <HAL_SPI_Init+0x244>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d002      	beq.n	8006462 <HAL_SPI_Init+0x6e>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2b08      	cmp	r3, #8
 8006460:	d811      	bhi.n	8006486 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006466:	4a72      	ldr	r2, [pc, #456]	@ (8006630 <HAL_SPI_Init+0x23c>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d009      	beq.n	8006480 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a70      	ldr	r2, [pc, #448]	@ (8006634 <HAL_SPI_Init+0x240>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d004      	beq.n	8006480 <HAL_SPI_Init+0x8c>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a6f      	ldr	r2, [pc, #444]	@ (8006638 <HAL_SPI_Init+0x244>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d104      	bne.n	800648a <HAL_SPI_Init+0x96>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2b10      	cmp	r3, #16
 8006484:	d901      	bls.n	800648a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e0cd      	b.n	8006626 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b00      	cmp	r3, #0
 8006494:	d106      	bne.n	80064a4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f7fb fda2 	bl	8001fe8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2202      	movs	r2, #2
 80064a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f022 0201 	bic.w	r2, r2, #1
 80064ba:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80064c6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80064d0:	d119      	bne.n	8006506 <HAL_SPI_Init+0x112>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064da:	d103      	bne.n	80064e4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d008      	beq.n	80064f6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d10c      	bne.n	8006506 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80064f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064f4:	d107      	bne.n	8006506 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006504:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00f      	beq.n	8006532 <HAL_SPI_Init+0x13e>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	2b06      	cmp	r3, #6
 8006518:	d90b      	bls.n	8006532 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	430a      	orrs	r2, r1
 800652e:	601a      	str	r2, [r3, #0]
 8006530:	e007      	b.n	8006542 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006540:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	69da      	ldr	r2, [r3, #28]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800654a:	431a      	orrs	r2, r3
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	431a      	orrs	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006554:	ea42 0103 	orr.w	r1, r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	68da      	ldr	r2, [r3, #12]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	430a      	orrs	r2, r1
 8006562:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800656c:	431a      	orrs	r2, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006572:	431a      	orrs	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	699b      	ldr	r3, [r3, #24]
 8006578:	431a      	orrs	r2, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	431a      	orrs	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	695b      	ldr	r3, [r3, #20]
 8006584:	431a      	orrs	r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a1b      	ldr	r3, [r3, #32]
 800658a:	431a      	orrs	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	431a      	orrs	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006596:	431a      	orrs	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	431a      	orrs	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065a2:	ea42 0103 	orr.w	r1, r2, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	430a      	orrs	r2, r1
 80065b0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d113      	bne.n	80065e2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065cc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80065e0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f022 0201 	bic.w	r2, r2, #1
 80065f0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00a      	beq.n	8006614 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	430a      	orrs	r2, r1
 8006612:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	40013000 	.word	0x40013000
 8006634:	40003800 	.word	0x40003800
 8006638:	40003c00 	.word	0x40003c00

0800663c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b088      	sub	sp, #32
 8006640:	af02      	add	r7, sp, #8
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	603b      	str	r3, [r7, #0]
 8006648:	4613      	mov	r3, r2
 800664a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	3320      	adds	r3, #32
 8006652:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006654:	f7fc f9fe 	bl	8002a54 <HAL_GetTick>
 8006658:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006660:	b2db      	uxtb	r3, r3
 8006662:	2b01      	cmp	r3, #1
 8006664:	d001      	beq.n	800666a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8006666:	2302      	movs	r3, #2
 8006668:	e1d1      	b.n	8006a0e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d002      	beq.n	8006676 <HAL_SPI_Transmit+0x3a>
 8006670:	88fb      	ldrh	r3, [r7, #6]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d101      	bne.n	800667a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e1c9      	b.n	8006a0e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006680:	2b01      	cmp	r3, #1
 8006682:	d101      	bne.n	8006688 <HAL_SPI_Transmit+0x4c>
 8006684:	2302      	movs	r3, #2
 8006686:	e1c2      	b.n	8006a0e <HAL_SPI_Transmit+0x3d2>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2203      	movs	r2, #3
 8006694:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	88fa      	ldrh	r2, [r7, #6]
 80066aa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	88fa      	ldrh	r2, [r7, #6]
 80066b2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80066e0:	d108      	bne.n	80066f4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066f0:	601a      	str	r2, [r3, #0]
 80066f2:	e009      	b.n	8006708 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006706:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	685a      	ldr	r2, [r3, #4]
 800670e:	4b96      	ldr	r3, [pc, #600]	@ (8006968 <HAL_SPI_Transmit+0x32c>)
 8006710:	4013      	ands	r3, r2
 8006712:	88f9      	ldrh	r1, [r7, #6]
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	6812      	ldr	r2, [r2, #0]
 8006718:	430b      	orrs	r3, r1
 800671a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f042 0201 	orr.w	r2, r2, #1
 800672a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006734:	d107      	bne.n	8006746 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006744:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	2b0f      	cmp	r3, #15
 800674c:	d947      	bls.n	80067de <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800674e:	e03f      	b.n	80067d0 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	2b02      	cmp	r3, #2
 800675c:	d114      	bne.n	8006788 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	6812      	ldr	r2, [r2, #0]
 8006768:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800676e:	1d1a      	adds	r2, r3, #4
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800677a:	b29b      	uxth	r3, r3
 800677c:	3b01      	subs	r3, #1
 800677e:	b29a      	uxth	r2, r3
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006786:	e023      	b.n	80067d0 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006788:	f7fc f964 	bl	8002a54 <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	683a      	ldr	r2, [r7, #0]
 8006794:	429a      	cmp	r2, r3
 8006796:	d803      	bhi.n	80067a0 <HAL_SPI_Transmit+0x164>
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800679e:	d102      	bne.n	80067a6 <HAL_SPI_Transmit+0x16a>
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d114      	bne.n	80067d0 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f000 fe8a 	bl	80074c0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e11e      	b.n	8006a0e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1b9      	bne.n	8006750 <HAL_SPI_Transmit+0x114>
 80067dc:	e0f1      	b.n	80069c2 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	2b07      	cmp	r3, #7
 80067e4:	f240 80e6 	bls.w	80069b4 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80067e8:	e05d      	b.n	80068a6 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	695b      	ldr	r3, [r3, #20]
 80067f0:	f003 0302 	and.w	r3, r3, #2
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d132      	bne.n	800685e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80067fe:	b29b      	uxth	r3, r3
 8006800:	2b01      	cmp	r3, #1
 8006802:	d918      	bls.n	8006836 <HAL_SPI_Transmit+0x1fa>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006808:	2b00      	cmp	r3, #0
 800680a:	d014      	beq.n	8006836 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	6812      	ldr	r2, [r2, #0]
 8006816:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800681c:	1d1a      	adds	r2, r3, #4
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006828:	b29b      	uxth	r3, r3
 800682a:	3b02      	subs	r3, #2
 800682c:	b29a      	uxth	r2, r3
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006834:	e037      	b.n	80068a6 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800683a:	881a      	ldrh	r2, [r3, #0]
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006844:	1c9a      	adds	r2, r3, #2
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006850:	b29b      	uxth	r3, r3
 8006852:	3b01      	subs	r3, #1
 8006854:	b29a      	uxth	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800685c:	e023      	b.n	80068a6 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800685e:	f7fc f8f9 	bl	8002a54 <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	683a      	ldr	r2, [r7, #0]
 800686a:	429a      	cmp	r2, r3
 800686c:	d803      	bhi.n	8006876 <HAL_SPI_Transmit+0x23a>
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006874:	d102      	bne.n	800687c <HAL_SPI_Transmit+0x240>
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d114      	bne.n	80068a6 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f000 fe1f 	bl	80074c0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006888:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e0b3      	b.n	8006a0e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d19b      	bne.n	80067ea <HAL_SPI_Transmit+0x1ae>
 80068b2:	e086      	b.n	80069c2 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	f003 0302 	and.w	r3, r3, #2
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d154      	bne.n	800696c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	2b03      	cmp	r3, #3
 80068cc:	d918      	bls.n	8006900 <HAL_SPI_Transmit+0x2c4>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068d2:	2b40      	cmp	r3, #64	@ 0x40
 80068d4:	d914      	bls.n	8006900 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	6812      	ldr	r2, [r2, #0]
 80068e0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068e6:	1d1a      	adds	r2, r3, #4
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	3b04      	subs	r3, #4
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80068fe:	e059      	b.n	80069b4 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006906:	b29b      	uxth	r3, r3
 8006908:	2b01      	cmp	r3, #1
 800690a:	d917      	bls.n	800693c <HAL_SPI_Transmit+0x300>
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006910:	2b00      	cmp	r3, #0
 8006912:	d013      	beq.n	800693c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006918:	881a      	ldrh	r2, [r3, #0]
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006922:	1c9a      	adds	r2, r3, #2
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800692e:	b29b      	uxth	r3, r3
 8006930:	3b02      	subs	r3, #2
 8006932:	b29a      	uxth	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800693a:	e03b      	b.n	80069b4 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	3320      	adds	r3, #32
 8006946:	7812      	ldrb	r2, [r2, #0]
 8006948:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800694e:	1c5a      	adds	r2, r3, #1
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800695a:	b29b      	uxth	r3, r3
 800695c:	3b01      	subs	r3, #1
 800695e:	b29a      	uxth	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006966:	e025      	b.n	80069b4 <HAL_SPI_Transmit+0x378>
 8006968:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800696c:	f7fc f872 	bl	8002a54 <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	683a      	ldr	r2, [r7, #0]
 8006978:	429a      	cmp	r2, r3
 800697a:	d803      	bhi.n	8006984 <HAL_SPI_Transmit+0x348>
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006982:	d102      	bne.n	800698a <HAL_SPI_Transmit+0x34e>
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d114      	bne.n	80069b4 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	f000 fd98 	bl	80074c0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006996:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80069b0:	2303      	movs	r3, #3
 80069b2:	e02c      	b.n	8006a0e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f47f af79 	bne.w	80068b4 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	9300      	str	r3, [sp, #0]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	2200      	movs	r2, #0
 80069ca:	2108      	movs	r1, #8
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f000 fe17 	bl	8007600 <SPI_WaitOnFlagUntilTimeout>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d007      	beq.n	80069e8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069de:	f043 0220 	orr.w	r2, r3, #32
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f000 fd69 	bl	80074c0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2201      	movs	r2, #1
 80069f2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d001      	beq.n	8006a0c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e000      	b.n	8006a0e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
  }
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3718      	adds	r7, #24
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop

08006a18 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b08e      	sub	sp, #56	@ 0x38
 8006a1c:	af02      	add	r7, sp, #8
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
 8006a24:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	3320      	adds	r3, #32
 8006a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	3330      	adds	r3, #48	@ 0x30
 8006a34:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a3a:	095b      	lsrs	r3, r3, #5
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	3301      	adds	r3, #1
 8006a40:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a42:	f7fc f807 	bl	8002a54 <HAL_GetTick>
 8006a46:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8006a48:	887b      	ldrh	r3, [r7, #2]
 8006a4a:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8006a4c:	887b      	ldrh	r3, [r7, #2]
 8006a4e:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d001      	beq.n	8006a60 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8006a5c:	2302      	movs	r3, #2
 8006a5e:	e310      	b.n	8007082 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d005      	beq.n	8006a72 <HAL_SPI_TransmitReceive+0x5a>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d002      	beq.n	8006a72 <HAL_SPI_TransmitReceive+0x5a>
 8006a6c:	887b      	ldrh	r3, [r7, #2]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d101      	bne.n	8006a76 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e305      	b.n	8007082 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d101      	bne.n	8006a84 <HAL_SPI_TransmitReceive+0x6c>
 8006a80:	2302      	movs	r3, #2
 8006a82:	e2fe      	b.n	8007082 <HAL_SPI_TransmitReceive+0x66a>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2205      	movs	r2, #5
 8006a90:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	887a      	ldrh	r2, [r7, #2]
 8006aa6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	887a      	ldrh	r2, [r7, #2]
 8006aae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	887a      	ldrh	r2, [r7, #2]
 8006abc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	887a      	ldrh	r2, [r7, #2]
 8006ac4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68da      	ldr	r2, [r3, #12]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8006ae2:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a70      	ldr	r2, [pc, #448]	@ (8006cac <HAL_SPI_TransmitReceive+0x294>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d009      	beq.n	8006b02 <HAL_SPI_TransmitReceive+0xea>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a6f      	ldr	r2, [pc, #444]	@ (8006cb0 <HAL_SPI_TransmitReceive+0x298>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d004      	beq.n	8006b02 <HAL_SPI_TransmitReceive+0xea>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a6d      	ldr	r2, [pc, #436]	@ (8006cb4 <HAL_SPI_TransmitReceive+0x29c>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d102      	bne.n	8006b08 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8006b02:	2310      	movs	r3, #16
 8006b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b06:	e001      	b.n	8006b0c <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8006b08:	2308      	movs	r3, #8
 8006b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	685a      	ldr	r2, [r3, #4]
 8006b12:	4b69      	ldr	r3, [pc, #420]	@ (8006cb8 <HAL_SPI_TransmitReceive+0x2a0>)
 8006b14:	4013      	ands	r3, r2
 8006b16:	8879      	ldrh	r1, [r7, #2]
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	6812      	ldr	r2, [r2, #0]
 8006b1c:	430b      	orrs	r3, r1
 8006b1e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f042 0201 	orr.w	r2, r2, #1
 8006b2e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b38:	d107      	bne.n	8006b4a <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	2b0f      	cmp	r3, #15
 8006b50:	f240 80a2 	bls.w	8006c98 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8006b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b56:	089b      	lsrs	r3, r3, #2
 8006b58:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006b5a:	e094      	b.n	8006c86 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	695b      	ldr	r3, [r3, #20]
 8006b62:	f003 0302 	and.w	r3, r3, #2
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d120      	bne.n	8006bac <HAL_SPI_TransmitReceive+0x194>
 8006b6a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d01d      	beq.n	8006bac <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006b70:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006b72:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b76:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d217      	bcs.n	8006bac <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	6812      	ldr	r2, [r2, #0]
 8006b86:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b8c:	1d1a      	adds	r2, r3, #4
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	b29a      	uxth	r2, r3
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006baa:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8006bb4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d065      	beq.n	8006c86 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	695b      	ldr	r3, [r3, #20]
 8006bc0:	f003 0301 	and.w	r3, r3, #1
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d118      	bne.n	8006bfa <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bd0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006bd2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bd8:	1d1a      	adds	r2, r3, #4
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	3b01      	subs	r3, #1
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006bf6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006bf8:	e045      	b.n	8006c86 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006bfa:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006bfc:	8bfb      	ldrh	r3, [r7, #30]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d21d      	bcs.n	8006c3e <HAL_SPI_TransmitReceive+0x226>
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d018      	beq.n	8006c3e <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c14:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006c16:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c1c:	1d1a      	adds	r2, r3, #4
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c3a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006c3c:	e023      	b.n	8006c86 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c3e:	f7fb ff09 	bl	8002a54 <HAL_GetTick>
 8006c42:	4602      	mov	r2, r0
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	1ad3      	subs	r3, r2, r3
 8006c48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d803      	bhi.n	8006c56 <HAL_SPI_TransmitReceive+0x23e>
 8006c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c54:	d102      	bne.n	8006c5c <HAL_SPI_TransmitReceive+0x244>
 8006c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d114      	bne.n	8006c86 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	f000 fc2f 	bl	80074c0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c68:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e1fd      	b.n	8007082 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006c86:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f47f af67 	bne.w	8006b5c <HAL_SPI_TransmitReceive+0x144>
 8006c8e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f47f af63 	bne.w	8006b5c <HAL_SPI_TransmitReceive+0x144>
 8006c96:	e1ce      	b.n	8007036 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	2b07      	cmp	r3, #7
 8006c9e:	f240 81c2 	bls.w	8007026 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8006ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ca4:	085b      	lsrs	r3, r3, #1
 8006ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006ca8:	e0c9      	b.n	8006e3e <HAL_SPI_TransmitReceive+0x426>
 8006caa:	bf00      	nop
 8006cac:	40013000 	.word	0x40013000
 8006cb0:	40003800 	.word	0x40003800
 8006cb4:	40003c00 	.word	0x40003c00
 8006cb8:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	695b      	ldr	r3, [r3, #20]
 8006cc2:	f003 0302 	and.w	r3, r3, #2
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d11f      	bne.n	8006d0a <HAL_SPI_TransmitReceive+0x2f2>
 8006cca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d01c      	beq.n	8006d0a <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006cd0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006cd2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d216      	bcs.n	8006d0a <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ce0:	881a      	ldrh	r2, [r3, #0]
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce4:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cea:	1c9a      	adds	r2, r3, #2
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006d08:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	695b      	ldr	r3, [r3, #20]
 8006d10:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8006d12:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f000 8092 	beq.w	8006e3e <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	695b      	ldr	r3, [r3, #20]
 8006d20:	f003 0301 	and.w	r3, r3, #1
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d118      	bne.n	8006d5a <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d2c:	6a3a      	ldr	r2, [r7, #32]
 8006d2e:	8812      	ldrh	r2, [r2, #0]
 8006d30:	b292      	uxth	r2, r2
 8006d32:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d38:	1c9a      	adds	r2, r3, #2
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	3b01      	subs	r3, #1
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006d56:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006d58:	e071      	b.n	8006e3e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006d5a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006d5c:	8bfb      	ldrh	r3, [r7, #30]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d228      	bcs.n	8006db4 <HAL_SPI_TransmitReceive+0x39c>
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d023      	beq.n	8006db4 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d70:	6a3a      	ldr	r2, [r7, #32]
 8006d72:	8812      	ldrh	r2, [r2, #0]
 8006d74:	b292      	uxth	r2, r2
 8006d76:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d7c:	1c9a      	adds	r2, r3, #2
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d86:	6a3a      	ldr	r2, [r7, #32]
 8006d88:	8812      	ldrh	r2, [r2, #0]
 8006d8a:	b292      	uxth	r2, r2
 8006d8c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d92:	1c9a      	adds	r2, r3, #2
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	3b02      	subs	r3, #2
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006db0:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006db2:	e044      	b.n	8006e3e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8006db4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d11d      	bne.n	8006df6 <HAL_SPI_TransmitReceive+0x3de>
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d018      	beq.n	8006df6 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006dc8:	6a3a      	ldr	r2, [r7, #32]
 8006dca:	8812      	ldrh	r2, [r2, #0]
 8006dcc:	b292      	uxth	r2, r2
 8006dce:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006dd4:	1c9a      	adds	r2, r3, #2
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	3b01      	subs	r3, #1
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006df2:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006df4:	e023      	b.n	8006e3e <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006df6:	f7fb fe2d 	bl	8002a54 <HAL_GetTick>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	1ad3      	subs	r3, r2, r3
 8006e00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d803      	bhi.n	8006e0e <HAL_SPI_TransmitReceive+0x3f6>
 8006e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e0c:	d102      	bne.n	8006e14 <HAL_SPI_TransmitReceive+0x3fc>
 8006e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d114      	bne.n	8006e3e <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f000 fb53 	bl	80074c0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e20:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e121      	b.n	8007082 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006e3e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f47f af3b 	bne.w	8006cbc <HAL_SPI_TransmitReceive+0x2a4>
 8006e46:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f47f af37 	bne.w	8006cbc <HAL_SPI_TransmitReceive+0x2a4>
 8006e4e:	e0f2      	b.n	8007036 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	695b      	ldr	r3, [r3, #20]
 8006e56:	f003 0302 	and.w	r3, r3, #2
 8006e5a:	2b02      	cmp	r3, #2
 8006e5c:	d121      	bne.n	8006ea2 <HAL_SPI_TransmitReceive+0x48a>
 8006e5e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d01e      	beq.n	8006ea2 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006e64:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006e66:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e6a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d218      	bcs.n	8006ea2 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	3320      	adds	r3, #32
 8006e7a:	7812      	ldrb	r2, [r2, #0]
 8006e7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e82:	1c5a      	adds	r2, r3, #1
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	3b01      	subs	r3, #1
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006ea0:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	695b      	ldr	r3, [r3, #20]
 8006ea8:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8006eaa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f000 80ba 	beq.w	8007026 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	695b      	ldr	r3, [r3, #20]
 8006eb8:	f003 0301 	and.w	r3, r3, #1
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d11b      	bne.n	8006ef8 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ecc:	7812      	ldrb	r2, [r2, #0]
 8006ece:	b2d2      	uxtb	r2, r2
 8006ed0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ed6:	1c5a      	adds	r2, r3, #1
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	b29a      	uxth	r2, r3
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006ef4:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006ef6:	e096      	b.n	8007026 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006ef8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006efa:	8bfb      	ldrh	r3, [r7, #30]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d24a      	bcs.n	8006f96 <HAL_SPI_TransmitReceive+0x57e>
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d045      	beq.n	8006f96 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f16:	7812      	ldrb	r2, [r2, #0]
 8006f18:	b2d2      	uxtb	r2, r2
 8006f1a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f20:	1c5a      	adds	r2, r3, #1
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f32:	7812      	ldrb	r2, [r2, #0]
 8006f34:	b2d2      	uxtb	r2, r2
 8006f36:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f3c:	1c5a      	adds	r2, r3, #1
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f4e:	7812      	ldrb	r2, [r2, #0]
 8006f50:	b2d2      	uxtb	r2, r2
 8006f52:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f58:	1c5a      	adds	r2, r3, #1
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f6a:	7812      	ldrb	r2, [r2, #0]
 8006f6c:	b2d2      	uxtb	r2, r2
 8006f6e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f74:	1c5a      	adds	r2, r3, #1
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	3b04      	subs	r3, #4
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006f92:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006f94:	e047      	b.n	8007026 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8006f96:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006f98:	2b03      	cmp	r3, #3
 8006f9a:	d820      	bhi.n	8006fde <HAL_SPI_TransmitReceive+0x5c6>
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d01b      	beq.n	8006fde <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fb2:	7812      	ldrb	r2, [r2, #0]
 8006fb4:	b2d2      	uxtb	r2, r2
 8006fb6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fbc:	1c5a      	adds	r2, r3, #1
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006fda:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006fdc:	e023      	b.n	8007026 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fde:	f7fb fd39 	bl	8002a54 <HAL_GetTick>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d803      	bhi.n	8006ff6 <HAL_SPI_TransmitReceive+0x5de>
 8006fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff4:	d102      	bne.n	8006ffc <HAL_SPI_TransmitReceive+0x5e4>
 8006ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d114      	bne.n	8007026 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f000 fa5f 	bl	80074c0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007008:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2201      	movs	r2, #1
 8007016:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8007022:	2303      	movs	r3, #3
 8007024:	e02d      	b.n	8007082 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007026:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007028:	2b00      	cmp	r3, #0
 800702a:	f47f af11 	bne.w	8006e50 <HAL_SPI_TransmitReceive+0x438>
 800702e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007030:	2b00      	cmp	r3, #0
 8007032:	f47f af0d 	bne.w	8006e50 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	9300      	str	r3, [sp, #0]
 800703a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800703c:	2200      	movs	r2, #0
 800703e:	2108      	movs	r1, #8
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	f000 fadd 	bl	8007600 <SPI_WaitOnFlagUntilTimeout>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d007      	beq.n	800705c <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007052:	f043 0220 	orr.w	r2, r3, #32
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f000 fa2f 	bl	80074c0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2201      	movs	r2, #1
 8007066:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2200      	movs	r2, #0
 800706e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007078:	2b00      	cmp	r3, #0
 800707a:	d001      	beq.n	8007080 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	e000      	b.n	8007082 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8007080:	2300      	movs	r3, #0
  }
}
 8007082:	4618      	mov	r0, r3
 8007084:	3730      	adds	r7, #48	@ 0x30
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop

0800708c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b08a      	sub	sp, #40	@ 0x28
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80070a4:	6a3a      	ldr	r2, [r7, #32]
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	4013      	ands	r3, r2
 80070aa:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80070b4:	2300      	movs	r3, #0
 80070b6:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80070be:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	3330      	adds	r3, #48	@ 0x30
 80070c6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d010      	beq.n	80070f4 <HAL_SPI_IRQHandler+0x68>
 80070d2:	6a3b      	ldr	r3, [r7, #32]
 80070d4:	f003 0308 	and.w	r3, r3, #8
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00b      	beq.n	80070f4 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	699a      	ldr	r2, [r3, #24]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80070ea:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 f9c3 	bl	8007478 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 80070f2:	e192      	b.n	800741a <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d113      	bne.n	8007126 <HAL_SPI_IRQHandler+0x9a>
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	f003 0320 	and.w	r3, r3, #32
 8007104:	2b00      	cmp	r3, #0
 8007106:	d10e      	bne.n	8007126 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800710e:	2b00      	cmp	r3, #0
 8007110:	d009      	beq.n	8007126 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	4798      	blx	r3
    hspi->RxISR(hspi);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	4798      	blx	r3
    handled = 1UL;
 8007122:	2301      	movs	r3, #1
 8007124:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10f      	bne.n	8007150 <HAL_SPI_IRQHandler+0xc4>
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	f003 0301 	and.w	r3, r3, #1
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00a      	beq.n	8007150 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007140:	2b00      	cmp	r3, #0
 8007142:	d105      	bne.n	8007150 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	4798      	blx	r3
    handled = 1UL;
 800714c:	2301      	movs	r3, #1
 800714e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	f003 0320 	and.w	r3, r3, #32
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10f      	bne.n	800717a <HAL_SPI_IRQHandler+0xee>
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	f003 0302 	and.w	r3, r3, #2
 8007160:	2b00      	cmp	r3, #0
 8007162:	d00a      	beq.n	800717a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800716a:	2b00      	cmp	r3, #0
 800716c:	d105      	bne.n	800717a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	4798      	blx	r3
    handled = 1UL;
 8007176:	2301      	movs	r3, #1
 8007178:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800717a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800717c:	2b00      	cmp	r3, #0
 800717e:	f040 8147 	bne.w	8007410 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	f003 0308 	and.w	r3, r3, #8
 8007188:	2b00      	cmp	r3, #0
 800718a:	f000 808b 	beq.w	80072a4 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	699a      	ldr	r2, [r3, #24]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f042 0208 	orr.w	r2, r2, #8
 800719c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	699a      	ldr	r2, [r3, #24]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f042 0210 	orr.w	r2, r2, #16
 80071ac:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	699a      	ldr	r2, [r3, #24]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80071bc:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	691a      	ldr	r2, [r3, #16]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f022 0208 	bic.w	r2, r2, #8
 80071cc:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d13d      	bne.n	8007258 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80071dc:	e036      	b.n	800724c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	2b0f      	cmp	r3, #15
 80071e4:	d90b      	bls.n	80071fe <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071ee:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80071f0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071f6:	1d1a      	adds	r2, r3, #4
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	665a      	str	r2, [r3, #100]	@ 0x64
 80071fc:	e01d      	b.n	800723a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	2b07      	cmp	r3, #7
 8007204:	d90b      	bls.n	800721e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	8812      	ldrh	r2, [r2, #0]
 800720e:	b292      	uxth	r2, r2
 8007210:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007216:	1c9a      	adds	r2, r3, #2
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	665a      	str	r2, [r3, #100]	@ 0x64
 800721c:	e00d      	b.n	800723a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800722a:	7812      	ldrb	r2, [r2, #0]
 800722c:	b2d2      	uxtb	r2, r2
 800722e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007234:	1c5a      	adds	r2, r3, #1
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007240:	b29b      	uxth	r3, r3
 8007242:	3b01      	subs	r3, #1
 8007244:	b29a      	uxth	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007252:	b29b      	uxth	r3, r3
 8007254:	2b00      	cmp	r3, #0
 8007256:	d1c2      	bne.n	80071de <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f931 	bl	80074c0 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2201      	movs	r2, #1
 8007262:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800726c:	2b00      	cmp	r3, #0
 800726e:	d003      	beq.n	8007278 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 f8f7 	bl	8007464 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007276:	e0d0      	b.n	800741a <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007278:	7cfb      	ldrb	r3, [r7, #19]
 800727a:	2b05      	cmp	r3, #5
 800727c:	d103      	bne.n	8007286 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 f8e6 	bl	8007450 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8007284:	e0c6      	b.n	8007414 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007286:	7cfb      	ldrb	r3, [r7, #19]
 8007288:	2b04      	cmp	r3, #4
 800728a:	d103      	bne.n	8007294 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 f8d5 	bl	800743c <HAL_SPI_RxCpltCallback>
    return;
 8007292:	e0bf      	b.n	8007414 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007294:	7cfb      	ldrb	r3, [r7, #19]
 8007296:	2b03      	cmp	r3, #3
 8007298:	f040 80bc 	bne.w	8007414 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 f8c3 	bl	8007428 <HAL_SPI_TxCpltCallback>
    return;
 80072a2:	e0b7      	b.n	8007414 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	f000 80b5 	beq.w	800741a <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00f      	beq.n	80072da <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072c0:	f043 0204 	orr.w	r2, r3, #4
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	699a      	ldr	r2, [r3, #24]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80072d8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d00f      	beq.n	8007304 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072ea:	f043 0201 	orr.w	r2, r3, #1
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	699a      	ldr	r2, [r3, #24]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007302:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00f      	beq.n	800732e <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007314:	f043 0208 	orr.w	r2, r3, #8
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	699a      	ldr	r2, [r3, #24]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800732c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	f003 0320 	and.w	r3, r3, #32
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00f      	beq.n	8007358 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800733e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	699a      	ldr	r2, [r3, #24]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f042 0220 	orr.w	r2, r2, #32
 8007356:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800735e:	2b00      	cmp	r3, #0
 8007360:	d05a      	beq.n	8007418 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f022 0201 	bic.w	r2, r2, #1
 8007370:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	6919      	ldr	r1, [r3, #16]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	4b28      	ldr	r3, [pc, #160]	@ (8007420 <HAL_SPI_IRQHandler+0x394>)
 800737e:	400b      	ands	r3, r1
 8007380:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007388:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800738c:	d138      	bne.n	8007400 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	689a      	ldr	r2, [r3, #8]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800739c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d013      	beq.n	80073ce <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80073aa:	4a1e      	ldr	r2, [pc, #120]	@ (8007424 <HAL_SPI_IRQHandler+0x398>)
 80073ac:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7fb fd12 	bl	8002ddc <HAL_DMA_Abort_IT>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d007      	beq.n	80073ce <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073c4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d020      	beq.n	8007418 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80073da:	4a12      	ldr	r2, [pc, #72]	@ (8007424 <HAL_SPI_IRQHandler+0x398>)
 80073dc:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7fb fcfa 	bl	8002ddc <HAL_DMA_Abort_IT>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d014      	beq.n	8007418 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073f4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80073fe:	e00b      	b.n	8007418 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 f82b 	bl	8007464 <HAL_SPI_ErrorCallback>
    return;
 800740e:	e003      	b.n	8007418 <HAL_SPI_IRQHandler+0x38c>
    return;
 8007410:	bf00      	nop
 8007412:	e002      	b.n	800741a <HAL_SPI_IRQHandler+0x38e>
    return;
 8007414:	bf00      	nop
 8007416:	e000      	b.n	800741a <HAL_SPI_IRQHandler+0x38e>
    return;
 8007418:	bf00      	nop
  }
}
 800741a:	3728      	adds	r7, #40	@ 0x28
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}
 8007420:	fffffc94 	.word	0xfffffc94
 8007424:	0800748d 	.word	0x0800748d

08007428 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007444:	bf00      	nop
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007458:	bf00      	nop
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800746c:	bf00      	nop
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8007480:	bf00      	nop
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007498:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2200      	movs	r2, #0
 800749e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2201      	movs	r2, #1
 80074ae:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f7ff ffd6 	bl	8007464 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80074b8:	bf00      	nop
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b085      	sub	sp, #20
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	695b      	ldr	r3, [r3, #20]
 80074ce:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	699a      	ldr	r2, [r3, #24]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f042 0208 	orr.w	r2, r2, #8
 80074de:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	699a      	ldr	r2, [r3, #24]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f042 0210 	orr.w	r2, r2, #16
 80074ee:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f022 0201 	bic.w	r2, r2, #1
 80074fe:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	6919      	ldr	r1, [r3, #16]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	4b3c      	ldr	r3, [pc, #240]	@ (80075fc <SPI_CloseTransfer+0x13c>)
 800750c:	400b      	ands	r3, r1
 800750e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	689a      	ldr	r2, [r3, #8]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800751e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007526:	b2db      	uxtb	r3, r3
 8007528:	2b04      	cmp	r3, #4
 800752a:	d014      	beq.n	8007556 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f003 0320 	and.w	r3, r3, #32
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00f      	beq.n	8007556 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800753c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	699a      	ldr	r2, [r3, #24]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f042 0220 	orr.w	r2, r2, #32
 8007554:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800755c:	b2db      	uxtb	r3, r3
 800755e:	2b03      	cmp	r3, #3
 8007560:	d014      	beq.n	800758c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00f      	beq.n	800758c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007572:	f043 0204 	orr.w	r2, r3, #4
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	699a      	ldr	r2, [r3, #24]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800758a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00f      	beq.n	80075b6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800759c:	f043 0201 	orr.w	r2, r3, #1
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	699a      	ldr	r2, [r3, #24]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075b4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00f      	beq.n	80075e0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075c6:	f043 0208 	orr.w	r2, r3, #8
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	699a      	ldr	r2, [r3, #24]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80075de:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80075f0:	bf00      	nop
 80075f2:	3714      	adds	r7, #20
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr
 80075fc:	fffffc90 	.word	0xfffffc90

08007600 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	603b      	str	r3, [r7, #0]
 800760c:	4613      	mov	r3, r2
 800760e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007610:	e010      	b.n	8007634 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007612:	f7fb fa1f 	bl	8002a54 <HAL_GetTick>
 8007616:	4602      	mov	r2, r0
 8007618:	69bb      	ldr	r3, [r7, #24]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	683a      	ldr	r2, [r7, #0]
 800761e:	429a      	cmp	r2, r3
 8007620:	d803      	bhi.n	800762a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007628:	d102      	bne.n	8007630 <SPI_WaitOnFlagUntilTimeout+0x30>
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d101      	bne.n	8007634 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007630:	2303      	movs	r3, #3
 8007632:	e00f      	b.n	8007654 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	695a      	ldr	r2, [r3, #20]
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	4013      	ands	r3, r2
 800763e:	68ba      	ldr	r2, [r7, #8]
 8007640:	429a      	cmp	r2, r3
 8007642:	bf0c      	ite	eq
 8007644:	2301      	moveq	r3, #1
 8007646:	2300      	movne	r3, #0
 8007648:	b2db      	uxtb	r3, r3
 800764a:	461a      	mov	r2, r3
 800764c:	79fb      	ldrb	r3, [r7, #7]
 800764e:	429a      	cmp	r2, r3
 8007650:	d0df      	beq.n	8007612 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007652:	2300      	movs	r3, #0
}
 8007654:	4618      	mov	r0, r3
 8007656:	3710      	adds	r7, #16
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800765c:	b480      	push	{r7}
 800765e:	b085      	sub	sp, #20
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007668:	095b      	lsrs	r3, r3, #5
 800766a:	3301      	adds	r3, #1
 800766c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	3301      	adds	r3, #1
 8007674:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	3307      	adds	r3, #7
 800767a:	08db      	lsrs	r3, r3, #3
 800767c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	68fa      	ldr	r2, [r7, #12]
 8007682:	fb02 f303 	mul.w	r3, r2, r3
}
 8007686:	4618      	mov	r0, r3
 8007688:	3714      	adds	r7, #20
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr

08007692 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b082      	sub	sp, #8
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d101      	bne.n	80076a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e042      	b.n	800772a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d106      	bne.n	80076bc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 f83b 	bl	8007732 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2224      	movs	r2, #36	@ 0x24
 80076c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f022 0201 	bic.w	r2, r2, #1
 80076d2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d002      	beq.n	80076e2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 fe29 	bl	8008334 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 f8be 	bl	8007864 <UART_SetConfig>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d101      	bne.n	80076f2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e01b      	b.n	800772a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	685a      	ldr	r2, [r3, #4]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007700:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	689a      	ldr	r2, [r3, #8]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007710:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f042 0201 	orr.w	r2, r2, #1
 8007720:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fea8 	bl	8008478 <UART_CheckIdleState>
 8007728:	4603      	mov	r3, r0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3708      	adds	r7, #8
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8007732:	b480      	push	{r7}
 8007734:	b083      	sub	sp, #12
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800773a:	bf00      	nop
 800773c:	370c      	adds	r7, #12
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr

08007746 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b08a      	sub	sp, #40	@ 0x28
 800774a:	af02      	add	r7, sp, #8
 800774c:	60f8      	str	r0, [r7, #12]
 800774e:	60b9      	str	r1, [r7, #8]
 8007750:	603b      	str	r3, [r7, #0]
 8007752:	4613      	mov	r3, r2
 8007754:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800775c:	2b20      	cmp	r3, #32
 800775e:	d17b      	bne.n	8007858 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d002      	beq.n	800776c <HAL_UART_Transmit+0x26>
 8007766:	88fb      	ldrh	r3, [r7, #6]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d101      	bne.n	8007770 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	e074      	b.n	800785a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2200      	movs	r2, #0
 8007774:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2221      	movs	r2, #33	@ 0x21
 800777c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007780:	f7fb f968 	bl	8002a54 <HAL_GetTick>
 8007784:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	88fa      	ldrh	r2, [r7, #6]
 800778a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	88fa      	ldrh	r2, [r7, #6]
 8007792:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800779e:	d108      	bne.n	80077b2 <HAL_UART_Transmit+0x6c>
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d104      	bne.n	80077b2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80077a8:	2300      	movs	r3, #0
 80077aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	61bb      	str	r3, [r7, #24]
 80077b0:	e003      	b.n	80077ba <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077b6:	2300      	movs	r3, #0
 80077b8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80077ba:	e030      	b.n	800781e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	9300      	str	r3, [sp, #0]
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	2200      	movs	r2, #0
 80077c4:	2180      	movs	r1, #128	@ 0x80
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	f000 ff00 	bl	80085cc <UART_WaitOnFlagUntilTimeout>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d005      	beq.n	80077de <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2220      	movs	r2, #32
 80077d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	e03d      	b.n	800785a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10b      	bne.n	80077fc <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	881b      	ldrh	r3, [r3, #0]
 80077e8:	461a      	mov	r2, r3
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077f2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	3302      	adds	r3, #2
 80077f8:	61bb      	str	r3, [r7, #24]
 80077fa:	e007      	b.n	800780c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	781a      	ldrb	r2, [r3, #0]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	3301      	adds	r3, #1
 800780a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007812:	b29b      	uxth	r3, r3
 8007814:	3b01      	subs	r3, #1
 8007816:	b29a      	uxth	r2, r3
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007824:	b29b      	uxth	r3, r3
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1c8      	bne.n	80077bc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	9300      	str	r3, [sp, #0]
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	2200      	movs	r2, #0
 8007832:	2140      	movs	r1, #64	@ 0x40
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f000 fec9 	bl	80085cc <UART_WaitOnFlagUntilTimeout>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d005      	beq.n	800784c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2220      	movs	r2, #32
 8007844:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007848:	2303      	movs	r3, #3
 800784a:	e006      	b.n	800785a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2220      	movs	r2, #32
 8007850:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007854:	2300      	movs	r3, #0
 8007856:	e000      	b.n	800785a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007858:	2302      	movs	r3, #2
  }
}
 800785a:	4618      	mov	r0, r3
 800785c:	3720      	adds	r7, #32
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
	...

08007864 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007868:	b092      	sub	sp, #72	@ 0x48
 800786a:	af00      	add	r7, sp, #0
 800786c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800786e:	2300      	movs	r3, #0
 8007870:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	689a      	ldr	r2, [r3, #8]
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	431a      	orrs	r2, r3
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	695b      	ldr	r3, [r3, #20]
 8007882:	431a      	orrs	r2, r3
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	69db      	ldr	r3, [r3, #28]
 8007888:	4313      	orrs	r3, r2
 800788a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	4bbe      	ldr	r3, [pc, #760]	@ (8007b8c <UART_SetConfig+0x328>)
 8007894:	4013      	ands	r3, r2
 8007896:	697a      	ldr	r2, [r7, #20]
 8007898:	6812      	ldr	r2, [r2, #0]
 800789a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800789c:	430b      	orrs	r3, r1
 800789e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	68da      	ldr	r2, [r3, #12]
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	430a      	orrs	r2, r1
 80078b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	699b      	ldr	r3, [r3, #24]
 80078ba:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4ab3      	ldr	r2, [pc, #716]	@ (8007b90 <UART_SetConfig+0x32c>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d004      	beq.n	80078d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	6a1b      	ldr	r3, [r3, #32]
 80078ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078cc:	4313      	orrs	r3, r2
 80078ce:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	689a      	ldr	r2, [r3, #8]
 80078d6:	4baf      	ldr	r3, [pc, #700]	@ (8007b94 <UART_SetConfig+0x330>)
 80078d8:	4013      	ands	r3, r2
 80078da:	697a      	ldr	r2, [r7, #20]
 80078dc:	6812      	ldr	r2, [r2, #0]
 80078de:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80078e0:	430b      	orrs	r3, r1
 80078e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ea:	f023 010f 	bic.w	r1, r3, #15
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	430a      	orrs	r2, r1
 80078f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4aa6      	ldr	r2, [pc, #664]	@ (8007b98 <UART_SetConfig+0x334>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d177      	bne.n	80079f4 <UART_SetConfig+0x190>
 8007904:	4ba5      	ldr	r3, [pc, #660]	@ (8007b9c <UART_SetConfig+0x338>)
 8007906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007908:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800790c:	2b28      	cmp	r3, #40	@ 0x28
 800790e:	d86d      	bhi.n	80079ec <UART_SetConfig+0x188>
 8007910:	a201      	add	r2, pc, #4	@ (adr r2, 8007918 <UART_SetConfig+0xb4>)
 8007912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007916:	bf00      	nop
 8007918:	080079bd 	.word	0x080079bd
 800791c:	080079ed 	.word	0x080079ed
 8007920:	080079ed 	.word	0x080079ed
 8007924:	080079ed 	.word	0x080079ed
 8007928:	080079ed 	.word	0x080079ed
 800792c:	080079ed 	.word	0x080079ed
 8007930:	080079ed 	.word	0x080079ed
 8007934:	080079ed 	.word	0x080079ed
 8007938:	080079c5 	.word	0x080079c5
 800793c:	080079ed 	.word	0x080079ed
 8007940:	080079ed 	.word	0x080079ed
 8007944:	080079ed 	.word	0x080079ed
 8007948:	080079ed 	.word	0x080079ed
 800794c:	080079ed 	.word	0x080079ed
 8007950:	080079ed 	.word	0x080079ed
 8007954:	080079ed 	.word	0x080079ed
 8007958:	080079cd 	.word	0x080079cd
 800795c:	080079ed 	.word	0x080079ed
 8007960:	080079ed 	.word	0x080079ed
 8007964:	080079ed 	.word	0x080079ed
 8007968:	080079ed 	.word	0x080079ed
 800796c:	080079ed 	.word	0x080079ed
 8007970:	080079ed 	.word	0x080079ed
 8007974:	080079ed 	.word	0x080079ed
 8007978:	080079d5 	.word	0x080079d5
 800797c:	080079ed 	.word	0x080079ed
 8007980:	080079ed 	.word	0x080079ed
 8007984:	080079ed 	.word	0x080079ed
 8007988:	080079ed 	.word	0x080079ed
 800798c:	080079ed 	.word	0x080079ed
 8007990:	080079ed 	.word	0x080079ed
 8007994:	080079ed 	.word	0x080079ed
 8007998:	080079dd 	.word	0x080079dd
 800799c:	080079ed 	.word	0x080079ed
 80079a0:	080079ed 	.word	0x080079ed
 80079a4:	080079ed 	.word	0x080079ed
 80079a8:	080079ed 	.word	0x080079ed
 80079ac:	080079ed 	.word	0x080079ed
 80079b0:	080079ed 	.word	0x080079ed
 80079b4:	080079ed 	.word	0x080079ed
 80079b8:	080079e5 	.word	0x080079e5
 80079bc:	2301      	movs	r3, #1
 80079be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079c2:	e222      	b.n	8007e0a <UART_SetConfig+0x5a6>
 80079c4:	2304      	movs	r3, #4
 80079c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ca:	e21e      	b.n	8007e0a <UART_SetConfig+0x5a6>
 80079cc:	2308      	movs	r3, #8
 80079ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079d2:	e21a      	b.n	8007e0a <UART_SetConfig+0x5a6>
 80079d4:	2310      	movs	r3, #16
 80079d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079da:	e216      	b.n	8007e0a <UART_SetConfig+0x5a6>
 80079dc:	2320      	movs	r3, #32
 80079de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079e2:	e212      	b.n	8007e0a <UART_SetConfig+0x5a6>
 80079e4:	2340      	movs	r3, #64	@ 0x40
 80079e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ea:	e20e      	b.n	8007e0a <UART_SetConfig+0x5a6>
 80079ec:	2380      	movs	r3, #128	@ 0x80
 80079ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079f2:	e20a      	b.n	8007e0a <UART_SetConfig+0x5a6>
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a69      	ldr	r2, [pc, #420]	@ (8007ba0 <UART_SetConfig+0x33c>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d130      	bne.n	8007a60 <UART_SetConfig+0x1fc>
 80079fe:	4b67      	ldr	r3, [pc, #412]	@ (8007b9c <UART_SetConfig+0x338>)
 8007a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a02:	f003 0307 	and.w	r3, r3, #7
 8007a06:	2b05      	cmp	r3, #5
 8007a08:	d826      	bhi.n	8007a58 <UART_SetConfig+0x1f4>
 8007a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a10 <UART_SetConfig+0x1ac>)
 8007a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a10:	08007a29 	.word	0x08007a29
 8007a14:	08007a31 	.word	0x08007a31
 8007a18:	08007a39 	.word	0x08007a39
 8007a1c:	08007a41 	.word	0x08007a41
 8007a20:	08007a49 	.word	0x08007a49
 8007a24:	08007a51 	.word	0x08007a51
 8007a28:	2300      	movs	r3, #0
 8007a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a2e:	e1ec      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007a30:	2304      	movs	r3, #4
 8007a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a36:	e1e8      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007a38:	2308      	movs	r3, #8
 8007a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a3e:	e1e4      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007a40:	2310      	movs	r3, #16
 8007a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a46:	e1e0      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007a48:	2320      	movs	r3, #32
 8007a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a4e:	e1dc      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007a50:	2340      	movs	r3, #64	@ 0x40
 8007a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a56:	e1d8      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007a58:	2380      	movs	r3, #128	@ 0x80
 8007a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a5e:	e1d4      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a4f      	ldr	r2, [pc, #316]	@ (8007ba4 <UART_SetConfig+0x340>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d130      	bne.n	8007acc <UART_SetConfig+0x268>
 8007a6a:	4b4c      	ldr	r3, [pc, #304]	@ (8007b9c <UART_SetConfig+0x338>)
 8007a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a6e:	f003 0307 	and.w	r3, r3, #7
 8007a72:	2b05      	cmp	r3, #5
 8007a74:	d826      	bhi.n	8007ac4 <UART_SetConfig+0x260>
 8007a76:	a201      	add	r2, pc, #4	@ (adr r2, 8007a7c <UART_SetConfig+0x218>)
 8007a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a7c:	08007a95 	.word	0x08007a95
 8007a80:	08007a9d 	.word	0x08007a9d
 8007a84:	08007aa5 	.word	0x08007aa5
 8007a88:	08007aad 	.word	0x08007aad
 8007a8c:	08007ab5 	.word	0x08007ab5
 8007a90:	08007abd 	.word	0x08007abd
 8007a94:	2300      	movs	r3, #0
 8007a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a9a:	e1b6      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007a9c:	2304      	movs	r3, #4
 8007a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aa2:	e1b2      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007aa4:	2308      	movs	r3, #8
 8007aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aaa:	e1ae      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007aac:	2310      	movs	r3, #16
 8007aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ab2:	e1aa      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007ab4:	2320      	movs	r3, #32
 8007ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aba:	e1a6      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007abc:	2340      	movs	r3, #64	@ 0x40
 8007abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ac2:	e1a2      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007ac4:	2380      	movs	r3, #128	@ 0x80
 8007ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aca:	e19e      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a35      	ldr	r2, [pc, #212]	@ (8007ba8 <UART_SetConfig+0x344>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d130      	bne.n	8007b38 <UART_SetConfig+0x2d4>
 8007ad6:	4b31      	ldr	r3, [pc, #196]	@ (8007b9c <UART_SetConfig+0x338>)
 8007ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ada:	f003 0307 	and.w	r3, r3, #7
 8007ade:	2b05      	cmp	r3, #5
 8007ae0:	d826      	bhi.n	8007b30 <UART_SetConfig+0x2cc>
 8007ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ae8 <UART_SetConfig+0x284>)
 8007ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae8:	08007b01 	.word	0x08007b01
 8007aec:	08007b09 	.word	0x08007b09
 8007af0:	08007b11 	.word	0x08007b11
 8007af4:	08007b19 	.word	0x08007b19
 8007af8:	08007b21 	.word	0x08007b21
 8007afc:	08007b29 	.word	0x08007b29
 8007b00:	2300      	movs	r3, #0
 8007b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b06:	e180      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007b08:	2304      	movs	r3, #4
 8007b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b0e:	e17c      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007b10:	2308      	movs	r3, #8
 8007b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b16:	e178      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007b18:	2310      	movs	r3, #16
 8007b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b1e:	e174      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007b20:	2320      	movs	r3, #32
 8007b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b26:	e170      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007b28:	2340      	movs	r3, #64	@ 0x40
 8007b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b2e:	e16c      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007b30:	2380      	movs	r3, #128	@ 0x80
 8007b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b36:	e168      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a1b      	ldr	r2, [pc, #108]	@ (8007bac <UART_SetConfig+0x348>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d142      	bne.n	8007bc8 <UART_SetConfig+0x364>
 8007b42:	4b16      	ldr	r3, [pc, #88]	@ (8007b9c <UART_SetConfig+0x338>)
 8007b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b46:	f003 0307 	and.w	r3, r3, #7
 8007b4a:	2b05      	cmp	r3, #5
 8007b4c:	d838      	bhi.n	8007bc0 <UART_SetConfig+0x35c>
 8007b4e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b54 <UART_SetConfig+0x2f0>)
 8007b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b54:	08007b6d 	.word	0x08007b6d
 8007b58:	08007b75 	.word	0x08007b75
 8007b5c:	08007b7d 	.word	0x08007b7d
 8007b60:	08007b85 	.word	0x08007b85
 8007b64:	08007bb1 	.word	0x08007bb1
 8007b68:	08007bb9 	.word	0x08007bb9
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b72:	e14a      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007b74:	2304      	movs	r3, #4
 8007b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b7a:	e146      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007b7c:	2308      	movs	r3, #8
 8007b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b82:	e142      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007b84:	2310      	movs	r3, #16
 8007b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b8a:	e13e      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007b8c:	cfff69f3 	.word	0xcfff69f3
 8007b90:	58000c00 	.word	0x58000c00
 8007b94:	11fff4ff 	.word	0x11fff4ff
 8007b98:	40011000 	.word	0x40011000
 8007b9c:	58024400 	.word	0x58024400
 8007ba0:	40004400 	.word	0x40004400
 8007ba4:	40004800 	.word	0x40004800
 8007ba8:	40004c00 	.word	0x40004c00
 8007bac:	40005000 	.word	0x40005000
 8007bb0:	2320      	movs	r3, #32
 8007bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bb6:	e128      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007bb8:	2340      	movs	r3, #64	@ 0x40
 8007bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bbe:	e124      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007bc0:	2380      	movs	r3, #128	@ 0x80
 8007bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bc6:	e120      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4acb      	ldr	r2, [pc, #812]	@ (8007efc <UART_SetConfig+0x698>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d176      	bne.n	8007cc0 <UART_SetConfig+0x45c>
 8007bd2:	4bcb      	ldr	r3, [pc, #812]	@ (8007f00 <UART_SetConfig+0x69c>)
 8007bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bd6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007bda:	2b28      	cmp	r3, #40	@ 0x28
 8007bdc:	d86c      	bhi.n	8007cb8 <UART_SetConfig+0x454>
 8007bde:	a201      	add	r2, pc, #4	@ (adr r2, 8007be4 <UART_SetConfig+0x380>)
 8007be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be4:	08007c89 	.word	0x08007c89
 8007be8:	08007cb9 	.word	0x08007cb9
 8007bec:	08007cb9 	.word	0x08007cb9
 8007bf0:	08007cb9 	.word	0x08007cb9
 8007bf4:	08007cb9 	.word	0x08007cb9
 8007bf8:	08007cb9 	.word	0x08007cb9
 8007bfc:	08007cb9 	.word	0x08007cb9
 8007c00:	08007cb9 	.word	0x08007cb9
 8007c04:	08007c91 	.word	0x08007c91
 8007c08:	08007cb9 	.word	0x08007cb9
 8007c0c:	08007cb9 	.word	0x08007cb9
 8007c10:	08007cb9 	.word	0x08007cb9
 8007c14:	08007cb9 	.word	0x08007cb9
 8007c18:	08007cb9 	.word	0x08007cb9
 8007c1c:	08007cb9 	.word	0x08007cb9
 8007c20:	08007cb9 	.word	0x08007cb9
 8007c24:	08007c99 	.word	0x08007c99
 8007c28:	08007cb9 	.word	0x08007cb9
 8007c2c:	08007cb9 	.word	0x08007cb9
 8007c30:	08007cb9 	.word	0x08007cb9
 8007c34:	08007cb9 	.word	0x08007cb9
 8007c38:	08007cb9 	.word	0x08007cb9
 8007c3c:	08007cb9 	.word	0x08007cb9
 8007c40:	08007cb9 	.word	0x08007cb9
 8007c44:	08007ca1 	.word	0x08007ca1
 8007c48:	08007cb9 	.word	0x08007cb9
 8007c4c:	08007cb9 	.word	0x08007cb9
 8007c50:	08007cb9 	.word	0x08007cb9
 8007c54:	08007cb9 	.word	0x08007cb9
 8007c58:	08007cb9 	.word	0x08007cb9
 8007c5c:	08007cb9 	.word	0x08007cb9
 8007c60:	08007cb9 	.word	0x08007cb9
 8007c64:	08007ca9 	.word	0x08007ca9
 8007c68:	08007cb9 	.word	0x08007cb9
 8007c6c:	08007cb9 	.word	0x08007cb9
 8007c70:	08007cb9 	.word	0x08007cb9
 8007c74:	08007cb9 	.word	0x08007cb9
 8007c78:	08007cb9 	.word	0x08007cb9
 8007c7c:	08007cb9 	.word	0x08007cb9
 8007c80:	08007cb9 	.word	0x08007cb9
 8007c84:	08007cb1 	.word	0x08007cb1
 8007c88:	2301      	movs	r3, #1
 8007c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c8e:	e0bc      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007c90:	2304      	movs	r3, #4
 8007c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c96:	e0b8      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007c98:	2308      	movs	r3, #8
 8007c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c9e:	e0b4      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007ca0:	2310      	movs	r3, #16
 8007ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ca6:	e0b0      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007ca8:	2320      	movs	r3, #32
 8007caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cae:	e0ac      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007cb0:	2340      	movs	r3, #64	@ 0x40
 8007cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cb6:	e0a8      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007cb8:	2380      	movs	r3, #128	@ 0x80
 8007cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cbe:	e0a4      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a8f      	ldr	r2, [pc, #572]	@ (8007f04 <UART_SetConfig+0x6a0>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d130      	bne.n	8007d2c <UART_SetConfig+0x4c8>
 8007cca:	4b8d      	ldr	r3, [pc, #564]	@ (8007f00 <UART_SetConfig+0x69c>)
 8007ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cce:	f003 0307 	and.w	r3, r3, #7
 8007cd2:	2b05      	cmp	r3, #5
 8007cd4:	d826      	bhi.n	8007d24 <UART_SetConfig+0x4c0>
 8007cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8007cdc <UART_SetConfig+0x478>)
 8007cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cdc:	08007cf5 	.word	0x08007cf5
 8007ce0:	08007cfd 	.word	0x08007cfd
 8007ce4:	08007d05 	.word	0x08007d05
 8007ce8:	08007d0d 	.word	0x08007d0d
 8007cec:	08007d15 	.word	0x08007d15
 8007cf0:	08007d1d 	.word	0x08007d1d
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cfa:	e086      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007cfc:	2304      	movs	r3, #4
 8007cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d02:	e082      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007d04:	2308      	movs	r3, #8
 8007d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d0a:	e07e      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007d0c:	2310      	movs	r3, #16
 8007d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d12:	e07a      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007d14:	2320      	movs	r3, #32
 8007d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d1a:	e076      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007d1c:	2340      	movs	r3, #64	@ 0x40
 8007d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d22:	e072      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007d24:	2380      	movs	r3, #128	@ 0x80
 8007d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d2a:	e06e      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a75      	ldr	r2, [pc, #468]	@ (8007f08 <UART_SetConfig+0x6a4>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d130      	bne.n	8007d98 <UART_SetConfig+0x534>
 8007d36:	4b72      	ldr	r3, [pc, #456]	@ (8007f00 <UART_SetConfig+0x69c>)
 8007d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d3a:	f003 0307 	and.w	r3, r3, #7
 8007d3e:	2b05      	cmp	r3, #5
 8007d40:	d826      	bhi.n	8007d90 <UART_SetConfig+0x52c>
 8007d42:	a201      	add	r2, pc, #4	@ (adr r2, 8007d48 <UART_SetConfig+0x4e4>)
 8007d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d48:	08007d61 	.word	0x08007d61
 8007d4c:	08007d69 	.word	0x08007d69
 8007d50:	08007d71 	.word	0x08007d71
 8007d54:	08007d79 	.word	0x08007d79
 8007d58:	08007d81 	.word	0x08007d81
 8007d5c:	08007d89 	.word	0x08007d89
 8007d60:	2300      	movs	r3, #0
 8007d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d66:	e050      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007d68:	2304      	movs	r3, #4
 8007d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d6e:	e04c      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007d70:	2308      	movs	r3, #8
 8007d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d76:	e048      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007d78:	2310      	movs	r3, #16
 8007d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d7e:	e044      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007d80:	2320      	movs	r3, #32
 8007d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d86:	e040      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007d88:	2340      	movs	r3, #64	@ 0x40
 8007d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d8e:	e03c      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007d90:	2380      	movs	r3, #128	@ 0x80
 8007d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d96:	e038      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a5b      	ldr	r2, [pc, #364]	@ (8007f0c <UART_SetConfig+0x6a8>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d130      	bne.n	8007e04 <UART_SetConfig+0x5a0>
 8007da2:	4b57      	ldr	r3, [pc, #348]	@ (8007f00 <UART_SetConfig+0x69c>)
 8007da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007da6:	f003 0307 	and.w	r3, r3, #7
 8007daa:	2b05      	cmp	r3, #5
 8007dac:	d826      	bhi.n	8007dfc <UART_SetConfig+0x598>
 8007dae:	a201      	add	r2, pc, #4	@ (adr r2, 8007db4 <UART_SetConfig+0x550>)
 8007db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db4:	08007dcd 	.word	0x08007dcd
 8007db8:	08007dd5 	.word	0x08007dd5
 8007dbc:	08007ddd 	.word	0x08007ddd
 8007dc0:	08007de5 	.word	0x08007de5
 8007dc4:	08007ded 	.word	0x08007ded
 8007dc8:	08007df5 	.word	0x08007df5
 8007dcc:	2302      	movs	r3, #2
 8007dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dd2:	e01a      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007dd4:	2304      	movs	r3, #4
 8007dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dda:	e016      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007ddc:	2308      	movs	r3, #8
 8007dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007de2:	e012      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007de4:	2310      	movs	r3, #16
 8007de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dea:	e00e      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007dec:	2320      	movs	r3, #32
 8007dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007df2:	e00a      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007df4:	2340      	movs	r3, #64	@ 0x40
 8007df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dfa:	e006      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007dfc:	2380      	movs	r3, #128	@ 0x80
 8007dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e02:	e002      	b.n	8007e0a <UART_SetConfig+0x5a6>
 8007e04:	2380      	movs	r3, #128	@ 0x80
 8007e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a3f      	ldr	r2, [pc, #252]	@ (8007f0c <UART_SetConfig+0x6a8>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	f040 80f8 	bne.w	8008006 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e16:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007e1a:	2b20      	cmp	r3, #32
 8007e1c:	dc46      	bgt.n	8007eac <UART_SetConfig+0x648>
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	f2c0 8082 	blt.w	8007f28 <UART_SetConfig+0x6c4>
 8007e24:	3b02      	subs	r3, #2
 8007e26:	2b1e      	cmp	r3, #30
 8007e28:	d87e      	bhi.n	8007f28 <UART_SetConfig+0x6c4>
 8007e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e30 <UART_SetConfig+0x5cc>)
 8007e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e30:	08007eb3 	.word	0x08007eb3
 8007e34:	08007f29 	.word	0x08007f29
 8007e38:	08007ebb 	.word	0x08007ebb
 8007e3c:	08007f29 	.word	0x08007f29
 8007e40:	08007f29 	.word	0x08007f29
 8007e44:	08007f29 	.word	0x08007f29
 8007e48:	08007ecb 	.word	0x08007ecb
 8007e4c:	08007f29 	.word	0x08007f29
 8007e50:	08007f29 	.word	0x08007f29
 8007e54:	08007f29 	.word	0x08007f29
 8007e58:	08007f29 	.word	0x08007f29
 8007e5c:	08007f29 	.word	0x08007f29
 8007e60:	08007f29 	.word	0x08007f29
 8007e64:	08007f29 	.word	0x08007f29
 8007e68:	08007edb 	.word	0x08007edb
 8007e6c:	08007f29 	.word	0x08007f29
 8007e70:	08007f29 	.word	0x08007f29
 8007e74:	08007f29 	.word	0x08007f29
 8007e78:	08007f29 	.word	0x08007f29
 8007e7c:	08007f29 	.word	0x08007f29
 8007e80:	08007f29 	.word	0x08007f29
 8007e84:	08007f29 	.word	0x08007f29
 8007e88:	08007f29 	.word	0x08007f29
 8007e8c:	08007f29 	.word	0x08007f29
 8007e90:	08007f29 	.word	0x08007f29
 8007e94:	08007f29 	.word	0x08007f29
 8007e98:	08007f29 	.word	0x08007f29
 8007e9c:	08007f29 	.word	0x08007f29
 8007ea0:	08007f29 	.word	0x08007f29
 8007ea4:	08007f29 	.word	0x08007f29
 8007ea8:	08007f1b 	.word	0x08007f1b
 8007eac:	2b40      	cmp	r3, #64	@ 0x40
 8007eae:	d037      	beq.n	8007f20 <UART_SetConfig+0x6bc>
 8007eb0:	e03a      	b.n	8007f28 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007eb2:	f7fd fe7d 	bl	8005bb0 <HAL_RCCEx_GetD3PCLK1Freq>
 8007eb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007eb8:	e03c      	b.n	8007f34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007eba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7fd fe8c 	bl	8005bdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ec8:	e034      	b.n	8007f34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007eca:	f107 0318 	add.w	r3, r7, #24
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7fd ffd8 	bl	8005e84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ed8:	e02c      	b.n	8007f34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007eda:	4b09      	ldr	r3, [pc, #36]	@ (8007f00 <UART_SetConfig+0x69c>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f003 0320 	and.w	r3, r3, #32
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d016      	beq.n	8007f14 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007ee6:	4b06      	ldr	r3, [pc, #24]	@ (8007f00 <UART_SetConfig+0x69c>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	08db      	lsrs	r3, r3, #3
 8007eec:	f003 0303 	and.w	r3, r3, #3
 8007ef0:	4a07      	ldr	r2, [pc, #28]	@ (8007f10 <UART_SetConfig+0x6ac>)
 8007ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ef8:	e01c      	b.n	8007f34 <UART_SetConfig+0x6d0>
 8007efa:	bf00      	nop
 8007efc:	40011400 	.word	0x40011400
 8007f00:	58024400 	.word	0x58024400
 8007f04:	40007800 	.word	0x40007800
 8007f08:	40007c00 	.word	0x40007c00
 8007f0c:	58000c00 	.word	0x58000c00
 8007f10:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007f14:	4b9d      	ldr	r3, [pc, #628]	@ (800818c <UART_SetConfig+0x928>)
 8007f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f18:	e00c      	b.n	8007f34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007f1a:	4b9d      	ldr	r3, [pc, #628]	@ (8008190 <UART_SetConfig+0x92c>)
 8007f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f1e:	e009      	b.n	8007f34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f26:	e005      	b.n	8007f34 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007f32:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007f34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	f000 81de 	beq.w	80082f8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f40:	4a94      	ldr	r2, [pc, #592]	@ (8008194 <UART_SetConfig+0x930>)
 8007f42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f46:	461a      	mov	r2, r3
 8007f48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f4e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	685a      	ldr	r2, [r3, #4]
 8007f54:	4613      	mov	r3, r2
 8007f56:	005b      	lsls	r3, r3, #1
 8007f58:	4413      	add	r3, r2
 8007f5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d305      	bcc.n	8007f6c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d903      	bls.n	8007f74 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007f72:	e1c1      	b.n	80082f8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f76:	2200      	movs	r2, #0
 8007f78:	60bb      	str	r3, [r7, #8]
 8007f7a:	60fa      	str	r2, [r7, #12]
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f80:	4a84      	ldr	r2, [pc, #528]	@ (8008194 <UART_SetConfig+0x930>)
 8007f82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	2200      	movs	r2, #0
 8007f8a:	603b      	str	r3, [r7, #0]
 8007f8c:	607a      	str	r2, [r7, #4]
 8007f8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f96:	f7f8 f9f3 	bl	8000380 <__aeabi_uldivmod>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	4610      	mov	r0, r2
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	f04f 0200 	mov.w	r2, #0
 8007fa6:	f04f 0300 	mov.w	r3, #0
 8007faa:	020b      	lsls	r3, r1, #8
 8007fac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007fb0:	0202      	lsls	r2, r0, #8
 8007fb2:	6979      	ldr	r1, [r7, #20]
 8007fb4:	6849      	ldr	r1, [r1, #4]
 8007fb6:	0849      	lsrs	r1, r1, #1
 8007fb8:	2000      	movs	r0, #0
 8007fba:	460c      	mov	r4, r1
 8007fbc:	4605      	mov	r5, r0
 8007fbe:	eb12 0804 	adds.w	r8, r2, r4
 8007fc2:	eb43 0905 	adc.w	r9, r3, r5
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	469a      	mov	sl, r3
 8007fce:	4693      	mov	fp, r2
 8007fd0:	4652      	mov	r2, sl
 8007fd2:	465b      	mov	r3, fp
 8007fd4:	4640      	mov	r0, r8
 8007fd6:	4649      	mov	r1, r9
 8007fd8:	f7f8 f9d2 	bl	8000380 <__aeabi_uldivmod>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	460b      	mov	r3, r1
 8007fe0:	4613      	mov	r3, r2
 8007fe2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fe6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007fea:	d308      	bcc.n	8007ffe <UART_SetConfig+0x79a>
 8007fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ff2:	d204      	bcs.n	8007ffe <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ffa:	60da      	str	r2, [r3, #12]
 8007ffc:	e17c      	b.n	80082f8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008004:	e178      	b.n	80082f8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	69db      	ldr	r3, [r3, #28]
 800800a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800800e:	f040 80c5 	bne.w	800819c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008012:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008016:	2b20      	cmp	r3, #32
 8008018:	dc48      	bgt.n	80080ac <UART_SetConfig+0x848>
 800801a:	2b00      	cmp	r3, #0
 800801c:	db7b      	blt.n	8008116 <UART_SetConfig+0x8b2>
 800801e:	2b20      	cmp	r3, #32
 8008020:	d879      	bhi.n	8008116 <UART_SetConfig+0x8b2>
 8008022:	a201      	add	r2, pc, #4	@ (adr r2, 8008028 <UART_SetConfig+0x7c4>)
 8008024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008028:	080080b3 	.word	0x080080b3
 800802c:	080080bb 	.word	0x080080bb
 8008030:	08008117 	.word	0x08008117
 8008034:	08008117 	.word	0x08008117
 8008038:	080080c3 	.word	0x080080c3
 800803c:	08008117 	.word	0x08008117
 8008040:	08008117 	.word	0x08008117
 8008044:	08008117 	.word	0x08008117
 8008048:	080080d3 	.word	0x080080d3
 800804c:	08008117 	.word	0x08008117
 8008050:	08008117 	.word	0x08008117
 8008054:	08008117 	.word	0x08008117
 8008058:	08008117 	.word	0x08008117
 800805c:	08008117 	.word	0x08008117
 8008060:	08008117 	.word	0x08008117
 8008064:	08008117 	.word	0x08008117
 8008068:	080080e3 	.word	0x080080e3
 800806c:	08008117 	.word	0x08008117
 8008070:	08008117 	.word	0x08008117
 8008074:	08008117 	.word	0x08008117
 8008078:	08008117 	.word	0x08008117
 800807c:	08008117 	.word	0x08008117
 8008080:	08008117 	.word	0x08008117
 8008084:	08008117 	.word	0x08008117
 8008088:	08008117 	.word	0x08008117
 800808c:	08008117 	.word	0x08008117
 8008090:	08008117 	.word	0x08008117
 8008094:	08008117 	.word	0x08008117
 8008098:	08008117 	.word	0x08008117
 800809c:	08008117 	.word	0x08008117
 80080a0:	08008117 	.word	0x08008117
 80080a4:	08008117 	.word	0x08008117
 80080a8:	08008109 	.word	0x08008109
 80080ac:	2b40      	cmp	r3, #64	@ 0x40
 80080ae:	d02e      	beq.n	800810e <UART_SetConfig+0x8aa>
 80080b0:	e031      	b.n	8008116 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080b2:	f7fc fb47 	bl	8004744 <HAL_RCC_GetPCLK1Freq>
 80080b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80080b8:	e033      	b.n	8008122 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080ba:	f7fc fb59 	bl	8004770 <HAL_RCC_GetPCLK2Freq>
 80080be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80080c0:	e02f      	b.n	8008122 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7fd fd88 	bl	8005bdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80080cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080d0:	e027      	b.n	8008122 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080d2:	f107 0318 	add.w	r3, r7, #24
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7fd fed4 	bl	8005e84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080e0:	e01f      	b.n	8008122 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080e2:	4b2d      	ldr	r3, [pc, #180]	@ (8008198 <UART_SetConfig+0x934>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 0320 	and.w	r3, r3, #32
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d009      	beq.n	8008102 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80080ee:	4b2a      	ldr	r3, [pc, #168]	@ (8008198 <UART_SetConfig+0x934>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	08db      	lsrs	r3, r3, #3
 80080f4:	f003 0303 	and.w	r3, r3, #3
 80080f8:	4a24      	ldr	r2, [pc, #144]	@ (800818c <UART_SetConfig+0x928>)
 80080fa:	fa22 f303 	lsr.w	r3, r2, r3
 80080fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008100:	e00f      	b.n	8008122 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008102:	4b22      	ldr	r3, [pc, #136]	@ (800818c <UART_SetConfig+0x928>)
 8008104:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008106:	e00c      	b.n	8008122 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008108:	4b21      	ldr	r3, [pc, #132]	@ (8008190 <UART_SetConfig+0x92c>)
 800810a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800810c:	e009      	b.n	8008122 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800810e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008114:	e005      	b.n	8008122 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008116:	2300      	movs	r3, #0
 8008118:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008120:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008124:	2b00      	cmp	r3, #0
 8008126:	f000 80e7 	beq.w	80082f8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800812e:	4a19      	ldr	r2, [pc, #100]	@ (8008194 <UART_SetConfig+0x930>)
 8008130:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008134:	461a      	mov	r2, r3
 8008136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008138:	fbb3 f3f2 	udiv	r3, r3, r2
 800813c:	005a      	lsls	r2, r3, #1
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	085b      	lsrs	r3, r3, #1
 8008144:	441a      	add	r2, r3
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	fbb2 f3f3 	udiv	r3, r2, r3
 800814e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008152:	2b0f      	cmp	r3, #15
 8008154:	d916      	bls.n	8008184 <UART_SetConfig+0x920>
 8008156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008158:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800815c:	d212      	bcs.n	8008184 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800815e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008160:	b29b      	uxth	r3, r3
 8008162:	f023 030f 	bic.w	r3, r3, #15
 8008166:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800816a:	085b      	lsrs	r3, r3, #1
 800816c:	b29b      	uxth	r3, r3
 800816e:	f003 0307 	and.w	r3, r3, #7
 8008172:	b29a      	uxth	r2, r3
 8008174:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008176:	4313      	orrs	r3, r2
 8008178:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008180:	60da      	str	r2, [r3, #12]
 8008182:	e0b9      	b.n	80082f8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008184:	2301      	movs	r3, #1
 8008186:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800818a:	e0b5      	b.n	80082f8 <UART_SetConfig+0xa94>
 800818c:	03d09000 	.word	0x03d09000
 8008190:	003d0900 	.word	0x003d0900
 8008194:	0800ad8c 	.word	0x0800ad8c
 8008198:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800819c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80081a0:	2b20      	cmp	r3, #32
 80081a2:	dc49      	bgt.n	8008238 <UART_SetConfig+0x9d4>
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	db7c      	blt.n	80082a2 <UART_SetConfig+0xa3e>
 80081a8:	2b20      	cmp	r3, #32
 80081aa:	d87a      	bhi.n	80082a2 <UART_SetConfig+0xa3e>
 80081ac:	a201      	add	r2, pc, #4	@ (adr r2, 80081b4 <UART_SetConfig+0x950>)
 80081ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b2:	bf00      	nop
 80081b4:	0800823f 	.word	0x0800823f
 80081b8:	08008247 	.word	0x08008247
 80081bc:	080082a3 	.word	0x080082a3
 80081c0:	080082a3 	.word	0x080082a3
 80081c4:	0800824f 	.word	0x0800824f
 80081c8:	080082a3 	.word	0x080082a3
 80081cc:	080082a3 	.word	0x080082a3
 80081d0:	080082a3 	.word	0x080082a3
 80081d4:	0800825f 	.word	0x0800825f
 80081d8:	080082a3 	.word	0x080082a3
 80081dc:	080082a3 	.word	0x080082a3
 80081e0:	080082a3 	.word	0x080082a3
 80081e4:	080082a3 	.word	0x080082a3
 80081e8:	080082a3 	.word	0x080082a3
 80081ec:	080082a3 	.word	0x080082a3
 80081f0:	080082a3 	.word	0x080082a3
 80081f4:	0800826f 	.word	0x0800826f
 80081f8:	080082a3 	.word	0x080082a3
 80081fc:	080082a3 	.word	0x080082a3
 8008200:	080082a3 	.word	0x080082a3
 8008204:	080082a3 	.word	0x080082a3
 8008208:	080082a3 	.word	0x080082a3
 800820c:	080082a3 	.word	0x080082a3
 8008210:	080082a3 	.word	0x080082a3
 8008214:	080082a3 	.word	0x080082a3
 8008218:	080082a3 	.word	0x080082a3
 800821c:	080082a3 	.word	0x080082a3
 8008220:	080082a3 	.word	0x080082a3
 8008224:	080082a3 	.word	0x080082a3
 8008228:	080082a3 	.word	0x080082a3
 800822c:	080082a3 	.word	0x080082a3
 8008230:	080082a3 	.word	0x080082a3
 8008234:	08008295 	.word	0x08008295
 8008238:	2b40      	cmp	r3, #64	@ 0x40
 800823a:	d02e      	beq.n	800829a <UART_SetConfig+0xa36>
 800823c:	e031      	b.n	80082a2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800823e:	f7fc fa81 	bl	8004744 <HAL_RCC_GetPCLK1Freq>
 8008242:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008244:	e033      	b.n	80082ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008246:	f7fc fa93 	bl	8004770 <HAL_RCC_GetPCLK2Freq>
 800824a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800824c:	e02f      	b.n	80082ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800824e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008252:	4618      	mov	r0, r3
 8008254:	f7fd fcc2 	bl	8005bdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800825a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800825c:	e027      	b.n	80082ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800825e:	f107 0318 	add.w	r3, r7, #24
 8008262:	4618      	mov	r0, r3
 8008264:	f7fd fe0e 	bl	8005e84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800826c:	e01f      	b.n	80082ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800826e:	4b2d      	ldr	r3, [pc, #180]	@ (8008324 <UART_SetConfig+0xac0>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f003 0320 	and.w	r3, r3, #32
 8008276:	2b00      	cmp	r3, #0
 8008278:	d009      	beq.n	800828e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800827a:	4b2a      	ldr	r3, [pc, #168]	@ (8008324 <UART_SetConfig+0xac0>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	08db      	lsrs	r3, r3, #3
 8008280:	f003 0303 	and.w	r3, r3, #3
 8008284:	4a28      	ldr	r2, [pc, #160]	@ (8008328 <UART_SetConfig+0xac4>)
 8008286:	fa22 f303 	lsr.w	r3, r2, r3
 800828a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800828c:	e00f      	b.n	80082ae <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800828e:	4b26      	ldr	r3, [pc, #152]	@ (8008328 <UART_SetConfig+0xac4>)
 8008290:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008292:	e00c      	b.n	80082ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008294:	4b25      	ldr	r3, [pc, #148]	@ (800832c <UART_SetConfig+0xac8>)
 8008296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008298:	e009      	b.n	80082ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800829a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800829e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082a0:	e005      	b.n	80082ae <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80082a2:	2300      	movs	r3, #0
 80082a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80082ac:	bf00      	nop
    }

    if (pclk != 0U)
 80082ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d021      	beq.n	80082f8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082b8:	4a1d      	ldr	r2, [pc, #116]	@ (8008330 <UART_SetConfig+0xacc>)
 80082ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082be:	461a      	mov	r2, r3
 80082c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	085b      	lsrs	r3, r3, #1
 80082cc:	441a      	add	r2, r3
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80082d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082da:	2b0f      	cmp	r3, #15
 80082dc:	d909      	bls.n	80082f2 <UART_SetConfig+0xa8e>
 80082de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082e4:	d205      	bcs.n	80082f2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80082e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082e8:	b29a      	uxth	r2, r3
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	60da      	str	r2, [r3, #12]
 80082f0:	e002      	b.n	80082f8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	2201      	movs	r2, #1
 8008304:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	2200      	movs	r2, #0
 800830c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	2200      	movs	r2, #0
 8008312:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008314:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008318:	4618      	mov	r0, r3
 800831a:	3748      	adds	r7, #72	@ 0x48
 800831c:	46bd      	mov	sp, r7
 800831e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008322:	bf00      	nop
 8008324:	58024400 	.word	0x58024400
 8008328:	03d09000 	.word	0x03d09000
 800832c:	003d0900 	.word	0x003d0900
 8008330:	0800ad8c 	.word	0x0800ad8c

08008334 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008340:	f003 0308 	and.w	r3, r3, #8
 8008344:	2b00      	cmp	r3, #0
 8008346:	d00a      	beq.n	800835e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	430a      	orrs	r2, r1
 800835c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008362:	f003 0301 	and.w	r3, r3, #1
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00a      	beq.n	8008380 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	430a      	orrs	r2, r1
 800837e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008384:	f003 0302 	and.w	r3, r3, #2
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00a      	beq.n	80083a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	430a      	orrs	r2, r1
 80083a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083a6:	f003 0304 	and.w	r3, r3, #4
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00a      	beq.n	80083c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	430a      	orrs	r2, r1
 80083c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083c8:	f003 0310 	and.w	r3, r3, #16
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00a      	beq.n	80083e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	430a      	orrs	r2, r1
 80083e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ea:	f003 0320 	and.w	r3, r3, #32
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00a      	beq.n	8008408 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	430a      	orrs	r2, r1
 8008406:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800840c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008410:	2b00      	cmp	r3, #0
 8008412:	d01a      	beq.n	800844a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	430a      	orrs	r2, r1
 8008428:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800842e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008432:	d10a      	bne.n	800844a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	430a      	orrs	r2, r1
 8008448:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800844e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00a      	beq.n	800846c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	430a      	orrs	r2, r1
 800846a:	605a      	str	r2, [r3, #4]
  }
}
 800846c:	bf00      	nop
 800846e:	370c      	adds	r7, #12
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b098      	sub	sp, #96	@ 0x60
 800847c:	af02      	add	r7, sp, #8
 800847e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008488:	f7fa fae4 	bl	8002a54 <HAL_GetTick>
 800848c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 0308 	and.w	r3, r3, #8
 8008498:	2b08      	cmp	r3, #8
 800849a:	d12f      	bne.n	80084fc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800849c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80084a0:	9300      	str	r3, [sp, #0]
 80084a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084a4:	2200      	movs	r2, #0
 80084a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f88e 	bl	80085cc <UART_WaitOnFlagUntilTimeout>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d022      	beq.n	80084fc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084be:	e853 3f00 	ldrex	r3, [r3]
 80084c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80084c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	461a      	mov	r2, r3
 80084d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80084d6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80084da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084dc:	e841 2300 	strex	r3, r2, [r1]
 80084e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80084e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d1e6      	bne.n	80084b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2220      	movs	r2, #32
 80084ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084f8:	2303      	movs	r3, #3
 80084fa:	e063      	b.n	80085c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f003 0304 	and.w	r3, r3, #4
 8008506:	2b04      	cmp	r3, #4
 8008508:	d149      	bne.n	800859e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800850a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800850e:	9300      	str	r3, [sp, #0]
 8008510:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008512:	2200      	movs	r2, #0
 8008514:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 f857 	bl	80085cc <UART_WaitOnFlagUntilTimeout>
 800851e:	4603      	mov	r3, r0
 8008520:	2b00      	cmp	r3, #0
 8008522:	d03c      	beq.n	800859e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800852a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800852c:	e853 3f00 	ldrex	r3, [r3]
 8008530:	623b      	str	r3, [r7, #32]
   return(result);
 8008532:	6a3b      	ldr	r3, [r7, #32]
 8008534:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008538:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	461a      	mov	r2, r3
 8008540:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008542:	633b      	str	r3, [r7, #48]	@ 0x30
 8008544:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008546:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008548:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800854a:	e841 2300 	strex	r3, r2, [r1]
 800854e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008552:	2b00      	cmp	r3, #0
 8008554:	d1e6      	bne.n	8008524 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	3308      	adds	r3, #8
 800855c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	e853 3f00 	ldrex	r3, [r3]
 8008564:	60fb      	str	r3, [r7, #12]
   return(result);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f023 0301 	bic.w	r3, r3, #1
 800856c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	3308      	adds	r3, #8
 8008574:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008576:	61fa      	str	r2, [r7, #28]
 8008578:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800857a:	69b9      	ldr	r1, [r7, #24]
 800857c:	69fa      	ldr	r2, [r7, #28]
 800857e:	e841 2300 	strex	r3, r2, [r1]
 8008582:	617b      	str	r3, [r7, #20]
   return(result);
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d1e5      	bne.n	8008556 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2220      	movs	r2, #32
 800858e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800859a:	2303      	movs	r3, #3
 800859c:	e012      	b.n	80085c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2220      	movs	r2, #32
 80085a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2220      	movs	r2, #32
 80085aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2200      	movs	r2, #0
 80085b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3758      	adds	r7, #88	@ 0x58
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	603b      	str	r3, [r7, #0]
 80085d8:	4613      	mov	r3, r2
 80085da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085dc:	e04f      	b.n	800867e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e4:	d04b      	beq.n	800867e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085e6:	f7fa fa35 	bl	8002a54 <HAL_GetTick>
 80085ea:	4602      	mov	r2, r0
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	1ad3      	subs	r3, r2, r3
 80085f0:	69ba      	ldr	r2, [r7, #24]
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d302      	bcc.n	80085fc <UART_WaitOnFlagUntilTimeout+0x30>
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d101      	bne.n	8008600 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80085fc:	2303      	movs	r3, #3
 80085fe:	e04e      	b.n	800869e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 0304 	and.w	r3, r3, #4
 800860a:	2b00      	cmp	r3, #0
 800860c:	d037      	beq.n	800867e <UART_WaitOnFlagUntilTimeout+0xb2>
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	2b80      	cmp	r3, #128	@ 0x80
 8008612:	d034      	beq.n	800867e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	2b40      	cmp	r3, #64	@ 0x40
 8008618:	d031      	beq.n	800867e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	69db      	ldr	r3, [r3, #28]
 8008620:	f003 0308 	and.w	r3, r3, #8
 8008624:	2b08      	cmp	r3, #8
 8008626:	d110      	bne.n	800864a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2208      	movs	r2, #8
 800862e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f000 f839 	bl	80086a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2208      	movs	r2, #8
 800863a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2200      	movs	r2, #0
 8008642:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	e029      	b.n	800869e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	69db      	ldr	r3, [r3, #28]
 8008650:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008654:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008658:	d111      	bne.n	800867e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008662:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008664:	68f8      	ldr	r0, [r7, #12]
 8008666:	f000 f81f 	bl	80086a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2220      	movs	r2, #32
 800866e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2200      	movs	r2, #0
 8008676:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800867a:	2303      	movs	r3, #3
 800867c:	e00f      	b.n	800869e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	69da      	ldr	r2, [r3, #28]
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	4013      	ands	r3, r2
 8008688:	68ba      	ldr	r2, [r7, #8]
 800868a:	429a      	cmp	r2, r3
 800868c:	bf0c      	ite	eq
 800868e:	2301      	moveq	r3, #1
 8008690:	2300      	movne	r3, #0
 8008692:	b2db      	uxtb	r3, r3
 8008694:	461a      	mov	r2, r3
 8008696:	79fb      	ldrb	r3, [r7, #7]
 8008698:	429a      	cmp	r2, r3
 800869a:	d0a0      	beq.n	80085de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800869c:	2300      	movs	r3, #0
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3710      	adds	r7, #16
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
	...

080086a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b095      	sub	sp, #84	@ 0x54
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086b8:	e853 3f00 	ldrex	r3, [r3]
 80086bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80086be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	461a      	mov	r2, r3
 80086cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80086d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80086d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80086d6:	e841 2300 	strex	r3, r2, [r1]
 80086da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80086dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d1e6      	bne.n	80086b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	3308      	adds	r3, #8
 80086e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ea:	6a3b      	ldr	r3, [r7, #32]
 80086ec:	e853 3f00 	ldrex	r3, [r3]
 80086f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80086f2:	69fa      	ldr	r2, [r7, #28]
 80086f4:	4b1e      	ldr	r3, [pc, #120]	@ (8008770 <UART_EndRxTransfer+0xc8>)
 80086f6:	4013      	ands	r3, r2
 80086f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	3308      	adds	r3, #8
 8008700:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008702:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008704:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008706:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008708:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800870a:	e841 2300 	strex	r3, r2, [r1]
 800870e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1e5      	bne.n	80086e2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800871a:	2b01      	cmp	r3, #1
 800871c:	d118      	bne.n	8008750 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	e853 3f00 	ldrex	r3, [r3]
 800872a:	60bb      	str	r3, [r7, #8]
   return(result);
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	f023 0310 	bic.w	r3, r3, #16
 8008732:	647b      	str	r3, [r7, #68]	@ 0x44
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	461a      	mov	r2, r3
 800873a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800873c:	61bb      	str	r3, [r7, #24]
 800873e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008740:	6979      	ldr	r1, [r7, #20]
 8008742:	69ba      	ldr	r2, [r7, #24]
 8008744:	e841 2300 	strex	r3, r2, [r1]
 8008748:	613b      	str	r3, [r7, #16]
   return(result);
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d1e6      	bne.n	800871e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2220      	movs	r2, #32
 8008754:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008764:	bf00      	nop
 8008766:	3754      	adds	r7, #84	@ 0x54
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr
 8008770:	effffffe 	.word	0xeffffffe

08008774 <std>:
 8008774:	2300      	movs	r3, #0
 8008776:	b510      	push	{r4, lr}
 8008778:	4604      	mov	r4, r0
 800877a:	e9c0 3300 	strd	r3, r3, [r0]
 800877e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008782:	6083      	str	r3, [r0, #8]
 8008784:	8181      	strh	r1, [r0, #12]
 8008786:	6643      	str	r3, [r0, #100]	@ 0x64
 8008788:	81c2      	strh	r2, [r0, #14]
 800878a:	6183      	str	r3, [r0, #24]
 800878c:	4619      	mov	r1, r3
 800878e:	2208      	movs	r2, #8
 8008790:	305c      	adds	r0, #92	@ 0x5c
 8008792:	f000 f906 	bl	80089a2 <memset>
 8008796:	4b0d      	ldr	r3, [pc, #52]	@ (80087cc <std+0x58>)
 8008798:	6263      	str	r3, [r4, #36]	@ 0x24
 800879a:	4b0d      	ldr	r3, [pc, #52]	@ (80087d0 <std+0x5c>)
 800879c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800879e:	4b0d      	ldr	r3, [pc, #52]	@ (80087d4 <std+0x60>)
 80087a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80087a2:	4b0d      	ldr	r3, [pc, #52]	@ (80087d8 <std+0x64>)
 80087a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80087a6:	4b0d      	ldr	r3, [pc, #52]	@ (80087dc <std+0x68>)
 80087a8:	6224      	str	r4, [r4, #32]
 80087aa:	429c      	cmp	r4, r3
 80087ac:	d006      	beq.n	80087bc <std+0x48>
 80087ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80087b2:	4294      	cmp	r4, r2
 80087b4:	d002      	beq.n	80087bc <std+0x48>
 80087b6:	33d0      	adds	r3, #208	@ 0xd0
 80087b8:	429c      	cmp	r4, r3
 80087ba:	d105      	bne.n	80087c8 <std+0x54>
 80087bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80087c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087c4:	f000 b966 	b.w	8008a94 <__retarget_lock_init_recursive>
 80087c8:	bd10      	pop	{r4, pc}
 80087ca:	bf00      	nop
 80087cc:	0800891d 	.word	0x0800891d
 80087d0:	0800893f 	.word	0x0800893f
 80087d4:	08008977 	.word	0x08008977
 80087d8:	0800899b 	.word	0x0800899b
 80087dc:	240001e8 	.word	0x240001e8

080087e0 <stdio_exit_handler>:
 80087e0:	4a02      	ldr	r2, [pc, #8]	@ (80087ec <stdio_exit_handler+0xc>)
 80087e2:	4903      	ldr	r1, [pc, #12]	@ (80087f0 <stdio_exit_handler+0x10>)
 80087e4:	4803      	ldr	r0, [pc, #12]	@ (80087f4 <stdio_exit_handler+0x14>)
 80087e6:	f000 b869 	b.w	80088bc <_fwalk_sglue>
 80087ea:	bf00      	nop
 80087ec:	2400002c 	.word	0x2400002c
 80087f0:	08009331 	.word	0x08009331
 80087f4:	2400003c 	.word	0x2400003c

080087f8 <cleanup_stdio>:
 80087f8:	6841      	ldr	r1, [r0, #4]
 80087fa:	4b0c      	ldr	r3, [pc, #48]	@ (800882c <cleanup_stdio+0x34>)
 80087fc:	4299      	cmp	r1, r3
 80087fe:	b510      	push	{r4, lr}
 8008800:	4604      	mov	r4, r0
 8008802:	d001      	beq.n	8008808 <cleanup_stdio+0x10>
 8008804:	f000 fd94 	bl	8009330 <_fflush_r>
 8008808:	68a1      	ldr	r1, [r4, #8]
 800880a:	4b09      	ldr	r3, [pc, #36]	@ (8008830 <cleanup_stdio+0x38>)
 800880c:	4299      	cmp	r1, r3
 800880e:	d002      	beq.n	8008816 <cleanup_stdio+0x1e>
 8008810:	4620      	mov	r0, r4
 8008812:	f000 fd8d 	bl	8009330 <_fflush_r>
 8008816:	68e1      	ldr	r1, [r4, #12]
 8008818:	4b06      	ldr	r3, [pc, #24]	@ (8008834 <cleanup_stdio+0x3c>)
 800881a:	4299      	cmp	r1, r3
 800881c:	d004      	beq.n	8008828 <cleanup_stdio+0x30>
 800881e:	4620      	mov	r0, r4
 8008820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008824:	f000 bd84 	b.w	8009330 <_fflush_r>
 8008828:	bd10      	pop	{r4, pc}
 800882a:	bf00      	nop
 800882c:	240001e8 	.word	0x240001e8
 8008830:	24000250 	.word	0x24000250
 8008834:	240002b8 	.word	0x240002b8

08008838 <global_stdio_init.part.0>:
 8008838:	b510      	push	{r4, lr}
 800883a:	4b0b      	ldr	r3, [pc, #44]	@ (8008868 <global_stdio_init.part.0+0x30>)
 800883c:	4c0b      	ldr	r4, [pc, #44]	@ (800886c <global_stdio_init.part.0+0x34>)
 800883e:	4a0c      	ldr	r2, [pc, #48]	@ (8008870 <global_stdio_init.part.0+0x38>)
 8008840:	601a      	str	r2, [r3, #0]
 8008842:	4620      	mov	r0, r4
 8008844:	2200      	movs	r2, #0
 8008846:	2104      	movs	r1, #4
 8008848:	f7ff ff94 	bl	8008774 <std>
 800884c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008850:	2201      	movs	r2, #1
 8008852:	2109      	movs	r1, #9
 8008854:	f7ff ff8e 	bl	8008774 <std>
 8008858:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800885c:	2202      	movs	r2, #2
 800885e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008862:	2112      	movs	r1, #18
 8008864:	f7ff bf86 	b.w	8008774 <std>
 8008868:	24000320 	.word	0x24000320
 800886c:	240001e8 	.word	0x240001e8
 8008870:	080087e1 	.word	0x080087e1

08008874 <__sfp_lock_acquire>:
 8008874:	4801      	ldr	r0, [pc, #4]	@ (800887c <__sfp_lock_acquire+0x8>)
 8008876:	f000 b90e 	b.w	8008a96 <__retarget_lock_acquire_recursive>
 800887a:	bf00      	nop
 800887c:	24000329 	.word	0x24000329

08008880 <__sfp_lock_release>:
 8008880:	4801      	ldr	r0, [pc, #4]	@ (8008888 <__sfp_lock_release+0x8>)
 8008882:	f000 b909 	b.w	8008a98 <__retarget_lock_release_recursive>
 8008886:	bf00      	nop
 8008888:	24000329 	.word	0x24000329

0800888c <__sinit>:
 800888c:	b510      	push	{r4, lr}
 800888e:	4604      	mov	r4, r0
 8008890:	f7ff fff0 	bl	8008874 <__sfp_lock_acquire>
 8008894:	6a23      	ldr	r3, [r4, #32]
 8008896:	b11b      	cbz	r3, 80088a0 <__sinit+0x14>
 8008898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800889c:	f7ff bff0 	b.w	8008880 <__sfp_lock_release>
 80088a0:	4b04      	ldr	r3, [pc, #16]	@ (80088b4 <__sinit+0x28>)
 80088a2:	6223      	str	r3, [r4, #32]
 80088a4:	4b04      	ldr	r3, [pc, #16]	@ (80088b8 <__sinit+0x2c>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d1f5      	bne.n	8008898 <__sinit+0xc>
 80088ac:	f7ff ffc4 	bl	8008838 <global_stdio_init.part.0>
 80088b0:	e7f2      	b.n	8008898 <__sinit+0xc>
 80088b2:	bf00      	nop
 80088b4:	080087f9 	.word	0x080087f9
 80088b8:	24000320 	.word	0x24000320

080088bc <_fwalk_sglue>:
 80088bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088c0:	4607      	mov	r7, r0
 80088c2:	4688      	mov	r8, r1
 80088c4:	4614      	mov	r4, r2
 80088c6:	2600      	movs	r6, #0
 80088c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088cc:	f1b9 0901 	subs.w	r9, r9, #1
 80088d0:	d505      	bpl.n	80088de <_fwalk_sglue+0x22>
 80088d2:	6824      	ldr	r4, [r4, #0]
 80088d4:	2c00      	cmp	r4, #0
 80088d6:	d1f7      	bne.n	80088c8 <_fwalk_sglue+0xc>
 80088d8:	4630      	mov	r0, r6
 80088da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088de:	89ab      	ldrh	r3, [r5, #12]
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d907      	bls.n	80088f4 <_fwalk_sglue+0x38>
 80088e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088e8:	3301      	adds	r3, #1
 80088ea:	d003      	beq.n	80088f4 <_fwalk_sglue+0x38>
 80088ec:	4629      	mov	r1, r5
 80088ee:	4638      	mov	r0, r7
 80088f0:	47c0      	blx	r8
 80088f2:	4306      	orrs	r6, r0
 80088f4:	3568      	adds	r5, #104	@ 0x68
 80088f6:	e7e9      	b.n	80088cc <_fwalk_sglue+0x10>

080088f8 <iprintf>:
 80088f8:	b40f      	push	{r0, r1, r2, r3}
 80088fa:	b507      	push	{r0, r1, r2, lr}
 80088fc:	4906      	ldr	r1, [pc, #24]	@ (8008918 <iprintf+0x20>)
 80088fe:	ab04      	add	r3, sp, #16
 8008900:	6808      	ldr	r0, [r1, #0]
 8008902:	f853 2b04 	ldr.w	r2, [r3], #4
 8008906:	6881      	ldr	r1, [r0, #8]
 8008908:	9301      	str	r3, [sp, #4]
 800890a:	f000 f9e9 	bl	8008ce0 <_vfiprintf_r>
 800890e:	b003      	add	sp, #12
 8008910:	f85d eb04 	ldr.w	lr, [sp], #4
 8008914:	b004      	add	sp, #16
 8008916:	4770      	bx	lr
 8008918:	24000038 	.word	0x24000038

0800891c <__sread>:
 800891c:	b510      	push	{r4, lr}
 800891e:	460c      	mov	r4, r1
 8008920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008924:	f000 f868 	bl	80089f8 <_read_r>
 8008928:	2800      	cmp	r0, #0
 800892a:	bfab      	itete	ge
 800892c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800892e:	89a3      	ldrhlt	r3, [r4, #12]
 8008930:	181b      	addge	r3, r3, r0
 8008932:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008936:	bfac      	ite	ge
 8008938:	6563      	strge	r3, [r4, #84]	@ 0x54
 800893a:	81a3      	strhlt	r3, [r4, #12]
 800893c:	bd10      	pop	{r4, pc}

0800893e <__swrite>:
 800893e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008942:	461f      	mov	r7, r3
 8008944:	898b      	ldrh	r3, [r1, #12]
 8008946:	05db      	lsls	r3, r3, #23
 8008948:	4605      	mov	r5, r0
 800894a:	460c      	mov	r4, r1
 800894c:	4616      	mov	r6, r2
 800894e:	d505      	bpl.n	800895c <__swrite+0x1e>
 8008950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008954:	2302      	movs	r3, #2
 8008956:	2200      	movs	r2, #0
 8008958:	f000 f83c 	bl	80089d4 <_lseek_r>
 800895c:	89a3      	ldrh	r3, [r4, #12]
 800895e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008962:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008966:	81a3      	strh	r3, [r4, #12]
 8008968:	4632      	mov	r2, r6
 800896a:	463b      	mov	r3, r7
 800896c:	4628      	mov	r0, r5
 800896e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008972:	f000 b853 	b.w	8008a1c <_write_r>

08008976 <__sseek>:
 8008976:	b510      	push	{r4, lr}
 8008978:	460c      	mov	r4, r1
 800897a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800897e:	f000 f829 	bl	80089d4 <_lseek_r>
 8008982:	1c43      	adds	r3, r0, #1
 8008984:	89a3      	ldrh	r3, [r4, #12]
 8008986:	bf15      	itete	ne
 8008988:	6560      	strne	r0, [r4, #84]	@ 0x54
 800898a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800898e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008992:	81a3      	strheq	r3, [r4, #12]
 8008994:	bf18      	it	ne
 8008996:	81a3      	strhne	r3, [r4, #12]
 8008998:	bd10      	pop	{r4, pc}

0800899a <__sclose>:
 800899a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800899e:	f000 b809 	b.w	80089b4 <_close_r>

080089a2 <memset>:
 80089a2:	4402      	add	r2, r0
 80089a4:	4603      	mov	r3, r0
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d100      	bne.n	80089ac <memset+0xa>
 80089aa:	4770      	bx	lr
 80089ac:	f803 1b01 	strb.w	r1, [r3], #1
 80089b0:	e7f9      	b.n	80089a6 <memset+0x4>
	...

080089b4 <_close_r>:
 80089b4:	b538      	push	{r3, r4, r5, lr}
 80089b6:	4d06      	ldr	r5, [pc, #24]	@ (80089d0 <_close_r+0x1c>)
 80089b8:	2300      	movs	r3, #0
 80089ba:	4604      	mov	r4, r0
 80089bc:	4608      	mov	r0, r1
 80089be:	602b      	str	r3, [r5, #0]
 80089c0:	f7f9 fc1d 	bl	80021fe <_close>
 80089c4:	1c43      	adds	r3, r0, #1
 80089c6:	d102      	bne.n	80089ce <_close_r+0x1a>
 80089c8:	682b      	ldr	r3, [r5, #0]
 80089ca:	b103      	cbz	r3, 80089ce <_close_r+0x1a>
 80089cc:	6023      	str	r3, [r4, #0]
 80089ce:	bd38      	pop	{r3, r4, r5, pc}
 80089d0:	24000324 	.word	0x24000324

080089d4 <_lseek_r>:
 80089d4:	b538      	push	{r3, r4, r5, lr}
 80089d6:	4d07      	ldr	r5, [pc, #28]	@ (80089f4 <_lseek_r+0x20>)
 80089d8:	4604      	mov	r4, r0
 80089da:	4608      	mov	r0, r1
 80089dc:	4611      	mov	r1, r2
 80089de:	2200      	movs	r2, #0
 80089e0:	602a      	str	r2, [r5, #0]
 80089e2:	461a      	mov	r2, r3
 80089e4:	f7f9 fc32 	bl	800224c <_lseek>
 80089e8:	1c43      	adds	r3, r0, #1
 80089ea:	d102      	bne.n	80089f2 <_lseek_r+0x1e>
 80089ec:	682b      	ldr	r3, [r5, #0]
 80089ee:	b103      	cbz	r3, 80089f2 <_lseek_r+0x1e>
 80089f0:	6023      	str	r3, [r4, #0]
 80089f2:	bd38      	pop	{r3, r4, r5, pc}
 80089f4:	24000324 	.word	0x24000324

080089f8 <_read_r>:
 80089f8:	b538      	push	{r3, r4, r5, lr}
 80089fa:	4d07      	ldr	r5, [pc, #28]	@ (8008a18 <_read_r+0x20>)
 80089fc:	4604      	mov	r4, r0
 80089fe:	4608      	mov	r0, r1
 8008a00:	4611      	mov	r1, r2
 8008a02:	2200      	movs	r2, #0
 8008a04:	602a      	str	r2, [r5, #0]
 8008a06:	461a      	mov	r2, r3
 8008a08:	f7f9 fbc0 	bl	800218c <_read>
 8008a0c:	1c43      	adds	r3, r0, #1
 8008a0e:	d102      	bne.n	8008a16 <_read_r+0x1e>
 8008a10:	682b      	ldr	r3, [r5, #0]
 8008a12:	b103      	cbz	r3, 8008a16 <_read_r+0x1e>
 8008a14:	6023      	str	r3, [r4, #0]
 8008a16:	bd38      	pop	{r3, r4, r5, pc}
 8008a18:	24000324 	.word	0x24000324

08008a1c <_write_r>:
 8008a1c:	b538      	push	{r3, r4, r5, lr}
 8008a1e:	4d07      	ldr	r5, [pc, #28]	@ (8008a3c <_write_r+0x20>)
 8008a20:	4604      	mov	r4, r0
 8008a22:	4608      	mov	r0, r1
 8008a24:	4611      	mov	r1, r2
 8008a26:	2200      	movs	r2, #0
 8008a28:	602a      	str	r2, [r5, #0]
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	f7f9 fbcb 	bl	80021c6 <_write>
 8008a30:	1c43      	adds	r3, r0, #1
 8008a32:	d102      	bne.n	8008a3a <_write_r+0x1e>
 8008a34:	682b      	ldr	r3, [r5, #0]
 8008a36:	b103      	cbz	r3, 8008a3a <_write_r+0x1e>
 8008a38:	6023      	str	r3, [r4, #0]
 8008a3a:	bd38      	pop	{r3, r4, r5, pc}
 8008a3c:	24000324 	.word	0x24000324

08008a40 <__errno>:
 8008a40:	4b01      	ldr	r3, [pc, #4]	@ (8008a48 <__errno+0x8>)
 8008a42:	6818      	ldr	r0, [r3, #0]
 8008a44:	4770      	bx	lr
 8008a46:	bf00      	nop
 8008a48:	24000038 	.word	0x24000038

08008a4c <__libc_init_array>:
 8008a4c:	b570      	push	{r4, r5, r6, lr}
 8008a4e:	4d0d      	ldr	r5, [pc, #52]	@ (8008a84 <__libc_init_array+0x38>)
 8008a50:	4c0d      	ldr	r4, [pc, #52]	@ (8008a88 <__libc_init_array+0x3c>)
 8008a52:	1b64      	subs	r4, r4, r5
 8008a54:	10a4      	asrs	r4, r4, #2
 8008a56:	2600      	movs	r6, #0
 8008a58:	42a6      	cmp	r6, r4
 8008a5a:	d109      	bne.n	8008a70 <__libc_init_array+0x24>
 8008a5c:	4d0b      	ldr	r5, [pc, #44]	@ (8008a8c <__libc_init_array+0x40>)
 8008a5e:	4c0c      	ldr	r4, [pc, #48]	@ (8008a90 <__libc_init_array+0x44>)
 8008a60:	f000 fdb6 	bl	80095d0 <_init>
 8008a64:	1b64      	subs	r4, r4, r5
 8008a66:	10a4      	asrs	r4, r4, #2
 8008a68:	2600      	movs	r6, #0
 8008a6a:	42a6      	cmp	r6, r4
 8008a6c:	d105      	bne.n	8008a7a <__libc_init_array+0x2e>
 8008a6e:	bd70      	pop	{r4, r5, r6, pc}
 8008a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a74:	4798      	blx	r3
 8008a76:	3601      	adds	r6, #1
 8008a78:	e7ee      	b.n	8008a58 <__libc_init_array+0xc>
 8008a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a7e:	4798      	blx	r3
 8008a80:	3601      	adds	r6, #1
 8008a82:	e7f2      	b.n	8008a6a <__libc_init_array+0x1e>
 8008a84:	0800ade0 	.word	0x0800ade0
 8008a88:	0800ade0 	.word	0x0800ade0
 8008a8c:	0800ade0 	.word	0x0800ade0
 8008a90:	0800ade4 	.word	0x0800ade4

08008a94 <__retarget_lock_init_recursive>:
 8008a94:	4770      	bx	lr

08008a96 <__retarget_lock_acquire_recursive>:
 8008a96:	4770      	bx	lr

08008a98 <__retarget_lock_release_recursive>:
 8008a98:	4770      	bx	lr
	...

08008a9c <_free_r>:
 8008a9c:	b538      	push	{r3, r4, r5, lr}
 8008a9e:	4605      	mov	r5, r0
 8008aa0:	2900      	cmp	r1, #0
 8008aa2:	d041      	beq.n	8008b28 <_free_r+0x8c>
 8008aa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008aa8:	1f0c      	subs	r4, r1, #4
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	bfb8      	it	lt
 8008aae:	18e4      	addlt	r4, r4, r3
 8008ab0:	f000 f8e0 	bl	8008c74 <__malloc_lock>
 8008ab4:	4a1d      	ldr	r2, [pc, #116]	@ (8008b2c <_free_r+0x90>)
 8008ab6:	6813      	ldr	r3, [r2, #0]
 8008ab8:	b933      	cbnz	r3, 8008ac8 <_free_r+0x2c>
 8008aba:	6063      	str	r3, [r4, #4]
 8008abc:	6014      	str	r4, [r2, #0]
 8008abe:	4628      	mov	r0, r5
 8008ac0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ac4:	f000 b8dc 	b.w	8008c80 <__malloc_unlock>
 8008ac8:	42a3      	cmp	r3, r4
 8008aca:	d908      	bls.n	8008ade <_free_r+0x42>
 8008acc:	6820      	ldr	r0, [r4, #0]
 8008ace:	1821      	adds	r1, r4, r0
 8008ad0:	428b      	cmp	r3, r1
 8008ad2:	bf01      	itttt	eq
 8008ad4:	6819      	ldreq	r1, [r3, #0]
 8008ad6:	685b      	ldreq	r3, [r3, #4]
 8008ad8:	1809      	addeq	r1, r1, r0
 8008ada:	6021      	streq	r1, [r4, #0]
 8008adc:	e7ed      	b.n	8008aba <_free_r+0x1e>
 8008ade:	461a      	mov	r2, r3
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	b10b      	cbz	r3, 8008ae8 <_free_r+0x4c>
 8008ae4:	42a3      	cmp	r3, r4
 8008ae6:	d9fa      	bls.n	8008ade <_free_r+0x42>
 8008ae8:	6811      	ldr	r1, [r2, #0]
 8008aea:	1850      	adds	r0, r2, r1
 8008aec:	42a0      	cmp	r0, r4
 8008aee:	d10b      	bne.n	8008b08 <_free_r+0x6c>
 8008af0:	6820      	ldr	r0, [r4, #0]
 8008af2:	4401      	add	r1, r0
 8008af4:	1850      	adds	r0, r2, r1
 8008af6:	4283      	cmp	r3, r0
 8008af8:	6011      	str	r1, [r2, #0]
 8008afa:	d1e0      	bne.n	8008abe <_free_r+0x22>
 8008afc:	6818      	ldr	r0, [r3, #0]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	6053      	str	r3, [r2, #4]
 8008b02:	4408      	add	r0, r1
 8008b04:	6010      	str	r0, [r2, #0]
 8008b06:	e7da      	b.n	8008abe <_free_r+0x22>
 8008b08:	d902      	bls.n	8008b10 <_free_r+0x74>
 8008b0a:	230c      	movs	r3, #12
 8008b0c:	602b      	str	r3, [r5, #0]
 8008b0e:	e7d6      	b.n	8008abe <_free_r+0x22>
 8008b10:	6820      	ldr	r0, [r4, #0]
 8008b12:	1821      	adds	r1, r4, r0
 8008b14:	428b      	cmp	r3, r1
 8008b16:	bf04      	itt	eq
 8008b18:	6819      	ldreq	r1, [r3, #0]
 8008b1a:	685b      	ldreq	r3, [r3, #4]
 8008b1c:	6063      	str	r3, [r4, #4]
 8008b1e:	bf04      	itt	eq
 8008b20:	1809      	addeq	r1, r1, r0
 8008b22:	6021      	streq	r1, [r4, #0]
 8008b24:	6054      	str	r4, [r2, #4]
 8008b26:	e7ca      	b.n	8008abe <_free_r+0x22>
 8008b28:	bd38      	pop	{r3, r4, r5, pc}
 8008b2a:	bf00      	nop
 8008b2c:	24000330 	.word	0x24000330

08008b30 <sbrk_aligned>:
 8008b30:	b570      	push	{r4, r5, r6, lr}
 8008b32:	4e0f      	ldr	r6, [pc, #60]	@ (8008b70 <sbrk_aligned+0x40>)
 8008b34:	460c      	mov	r4, r1
 8008b36:	6831      	ldr	r1, [r6, #0]
 8008b38:	4605      	mov	r5, r0
 8008b3a:	b911      	cbnz	r1, 8008b42 <sbrk_aligned+0x12>
 8008b3c:	f000 fcb4 	bl	80094a8 <_sbrk_r>
 8008b40:	6030      	str	r0, [r6, #0]
 8008b42:	4621      	mov	r1, r4
 8008b44:	4628      	mov	r0, r5
 8008b46:	f000 fcaf 	bl	80094a8 <_sbrk_r>
 8008b4a:	1c43      	adds	r3, r0, #1
 8008b4c:	d103      	bne.n	8008b56 <sbrk_aligned+0x26>
 8008b4e:	f04f 34ff 	mov.w	r4, #4294967295
 8008b52:	4620      	mov	r0, r4
 8008b54:	bd70      	pop	{r4, r5, r6, pc}
 8008b56:	1cc4      	adds	r4, r0, #3
 8008b58:	f024 0403 	bic.w	r4, r4, #3
 8008b5c:	42a0      	cmp	r0, r4
 8008b5e:	d0f8      	beq.n	8008b52 <sbrk_aligned+0x22>
 8008b60:	1a21      	subs	r1, r4, r0
 8008b62:	4628      	mov	r0, r5
 8008b64:	f000 fca0 	bl	80094a8 <_sbrk_r>
 8008b68:	3001      	adds	r0, #1
 8008b6a:	d1f2      	bne.n	8008b52 <sbrk_aligned+0x22>
 8008b6c:	e7ef      	b.n	8008b4e <sbrk_aligned+0x1e>
 8008b6e:	bf00      	nop
 8008b70:	2400032c 	.word	0x2400032c

08008b74 <_malloc_r>:
 8008b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b78:	1ccd      	adds	r5, r1, #3
 8008b7a:	f025 0503 	bic.w	r5, r5, #3
 8008b7e:	3508      	adds	r5, #8
 8008b80:	2d0c      	cmp	r5, #12
 8008b82:	bf38      	it	cc
 8008b84:	250c      	movcc	r5, #12
 8008b86:	2d00      	cmp	r5, #0
 8008b88:	4606      	mov	r6, r0
 8008b8a:	db01      	blt.n	8008b90 <_malloc_r+0x1c>
 8008b8c:	42a9      	cmp	r1, r5
 8008b8e:	d904      	bls.n	8008b9a <_malloc_r+0x26>
 8008b90:	230c      	movs	r3, #12
 8008b92:	6033      	str	r3, [r6, #0]
 8008b94:	2000      	movs	r0, #0
 8008b96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008c70 <_malloc_r+0xfc>
 8008b9e:	f000 f869 	bl	8008c74 <__malloc_lock>
 8008ba2:	f8d8 3000 	ldr.w	r3, [r8]
 8008ba6:	461c      	mov	r4, r3
 8008ba8:	bb44      	cbnz	r4, 8008bfc <_malloc_r+0x88>
 8008baa:	4629      	mov	r1, r5
 8008bac:	4630      	mov	r0, r6
 8008bae:	f7ff ffbf 	bl	8008b30 <sbrk_aligned>
 8008bb2:	1c43      	adds	r3, r0, #1
 8008bb4:	4604      	mov	r4, r0
 8008bb6:	d158      	bne.n	8008c6a <_malloc_r+0xf6>
 8008bb8:	f8d8 4000 	ldr.w	r4, [r8]
 8008bbc:	4627      	mov	r7, r4
 8008bbe:	2f00      	cmp	r7, #0
 8008bc0:	d143      	bne.n	8008c4a <_malloc_r+0xd6>
 8008bc2:	2c00      	cmp	r4, #0
 8008bc4:	d04b      	beq.n	8008c5e <_malloc_r+0xea>
 8008bc6:	6823      	ldr	r3, [r4, #0]
 8008bc8:	4639      	mov	r1, r7
 8008bca:	4630      	mov	r0, r6
 8008bcc:	eb04 0903 	add.w	r9, r4, r3
 8008bd0:	f000 fc6a 	bl	80094a8 <_sbrk_r>
 8008bd4:	4581      	cmp	r9, r0
 8008bd6:	d142      	bne.n	8008c5e <_malloc_r+0xea>
 8008bd8:	6821      	ldr	r1, [r4, #0]
 8008bda:	1a6d      	subs	r5, r5, r1
 8008bdc:	4629      	mov	r1, r5
 8008bde:	4630      	mov	r0, r6
 8008be0:	f7ff ffa6 	bl	8008b30 <sbrk_aligned>
 8008be4:	3001      	adds	r0, #1
 8008be6:	d03a      	beq.n	8008c5e <_malloc_r+0xea>
 8008be8:	6823      	ldr	r3, [r4, #0]
 8008bea:	442b      	add	r3, r5
 8008bec:	6023      	str	r3, [r4, #0]
 8008bee:	f8d8 3000 	ldr.w	r3, [r8]
 8008bf2:	685a      	ldr	r2, [r3, #4]
 8008bf4:	bb62      	cbnz	r2, 8008c50 <_malloc_r+0xdc>
 8008bf6:	f8c8 7000 	str.w	r7, [r8]
 8008bfa:	e00f      	b.n	8008c1c <_malloc_r+0xa8>
 8008bfc:	6822      	ldr	r2, [r4, #0]
 8008bfe:	1b52      	subs	r2, r2, r5
 8008c00:	d420      	bmi.n	8008c44 <_malloc_r+0xd0>
 8008c02:	2a0b      	cmp	r2, #11
 8008c04:	d917      	bls.n	8008c36 <_malloc_r+0xc2>
 8008c06:	1961      	adds	r1, r4, r5
 8008c08:	42a3      	cmp	r3, r4
 8008c0a:	6025      	str	r5, [r4, #0]
 8008c0c:	bf18      	it	ne
 8008c0e:	6059      	strne	r1, [r3, #4]
 8008c10:	6863      	ldr	r3, [r4, #4]
 8008c12:	bf08      	it	eq
 8008c14:	f8c8 1000 	streq.w	r1, [r8]
 8008c18:	5162      	str	r2, [r4, r5]
 8008c1a:	604b      	str	r3, [r1, #4]
 8008c1c:	4630      	mov	r0, r6
 8008c1e:	f000 f82f 	bl	8008c80 <__malloc_unlock>
 8008c22:	f104 000b 	add.w	r0, r4, #11
 8008c26:	1d23      	adds	r3, r4, #4
 8008c28:	f020 0007 	bic.w	r0, r0, #7
 8008c2c:	1ac2      	subs	r2, r0, r3
 8008c2e:	bf1c      	itt	ne
 8008c30:	1a1b      	subne	r3, r3, r0
 8008c32:	50a3      	strne	r3, [r4, r2]
 8008c34:	e7af      	b.n	8008b96 <_malloc_r+0x22>
 8008c36:	6862      	ldr	r2, [r4, #4]
 8008c38:	42a3      	cmp	r3, r4
 8008c3a:	bf0c      	ite	eq
 8008c3c:	f8c8 2000 	streq.w	r2, [r8]
 8008c40:	605a      	strne	r2, [r3, #4]
 8008c42:	e7eb      	b.n	8008c1c <_malloc_r+0xa8>
 8008c44:	4623      	mov	r3, r4
 8008c46:	6864      	ldr	r4, [r4, #4]
 8008c48:	e7ae      	b.n	8008ba8 <_malloc_r+0x34>
 8008c4a:	463c      	mov	r4, r7
 8008c4c:	687f      	ldr	r7, [r7, #4]
 8008c4e:	e7b6      	b.n	8008bbe <_malloc_r+0x4a>
 8008c50:	461a      	mov	r2, r3
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	42a3      	cmp	r3, r4
 8008c56:	d1fb      	bne.n	8008c50 <_malloc_r+0xdc>
 8008c58:	2300      	movs	r3, #0
 8008c5a:	6053      	str	r3, [r2, #4]
 8008c5c:	e7de      	b.n	8008c1c <_malloc_r+0xa8>
 8008c5e:	230c      	movs	r3, #12
 8008c60:	6033      	str	r3, [r6, #0]
 8008c62:	4630      	mov	r0, r6
 8008c64:	f000 f80c 	bl	8008c80 <__malloc_unlock>
 8008c68:	e794      	b.n	8008b94 <_malloc_r+0x20>
 8008c6a:	6005      	str	r5, [r0, #0]
 8008c6c:	e7d6      	b.n	8008c1c <_malloc_r+0xa8>
 8008c6e:	bf00      	nop
 8008c70:	24000330 	.word	0x24000330

08008c74 <__malloc_lock>:
 8008c74:	4801      	ldr	r0, [pc, #4]	@ (8008c7c <__malloc_lock+0x8>)
 8008c76:	f7ff bf0e 	b.w	8008a96 <__retarget_lock_acquire_recursive>
 8008c7a:	bf00      	nop
 8008c7c:	24000328 	.word	0x24000328

08008c80 <__malloc_unlock>:
 8008c80:	4801      	ldr	r0, [pc, #4]	@ (8008c88 <__malloc_unlock+0x8>)
 8008c82:	f7ff bf09 	b.w	8008a98 <__retarget_lock_release_recursive>
 8008c86:	bf00      	nop
 8008c88:	24000328 	.word	0x24000328

08008c8c <__sfputc_r>:
 8008c8c:	6893      	ldr	r3, [r2, #8]
 8008c8e:	3b01      	subs	r3, #1
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	b410      	push	{r4}
 8008c94:	6093      	str	r3, [r2, #8]
 8008c96:	da08      	bge.n	8008caa <__sfputc_r+0x1e>
 8008c98:	6994      	ldr	r4, [r2, #24]
 8008c9a:	42a3      	cmp	r3, r4
 8008c9c:	db01      	blt.n	8008ca2 <__sfputc_r+0x16>
 8008c9e:	290a      	cmp	r1, #10
 8008ca0:	d103      	bne.n	8008caa <__sfputc_r+0x1e>
 8008ca2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ca6:	f000 bb6b 	b.w	8009380 <__swbuf_r>
 8008caa:	6813      	ldr	r3, [r2, #0]
 8008cac:	1c58      	adds	r0, r3, #1
 8008cae:	6010      	str	r0, [r2, #0]
 8008cb0:	7019      	strb	r1, [r3, #0]
 8008cb2:	4608      	mov	r0, r1
 8008cb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cb8:	4770      	bx	lr

08008cba <__sfputs_r>:
 8008cba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cbc:	4606      	mov	r6, r0
 8008cbe:	460f      	mov	r7, r1
 8008cc0:	4614      	mov	r4, r2
 8008cc2:	18d5      	adds	r5, r2, r3
 8008cc4:	42ac      	cmp	r4, r5
 8008cc6:	d101      	bne.n	8008ccc <__sfputs_r+0x12>
 8008cc8:	2000      	movs	r0, #0
 8008cca:	e007      	b.n	8008cdc <__sfputs_r+0x22>
 8008ccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cd0:	463a      	mov	r2, r7
 8008cd2:	4630      	mov	r0, r6
 8008cd4:	f7ff ffda 	bl	8008c8c <__sfputc_r>
 8008cd8:	1c43      	adds	r3, r0, #1
 8008cda:	d1f3      	bne.n	8008cc4 <__sfputs_r+0xa>
 8008cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ce0 <_vfiprintf_r>:
 8008ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce4:	460d      	mov	r5, r1
 8008ce6:	b09d      	sub	sp, #116	@ 0x74
 8008ce8:	4614      	mov	r4, r2
 8008cea:	4698      	mov	r8, r3
 8008cec:	4606      	mov	r6, r0
 8008cee:	b118      	cbz	r0, 8008cf8 <_vfiprintf_r+0x18>
 8008cf0:	6a03      	ldr	r3, [r0, #32]
 8008cf2:	b90b      	cbnz	r3, 8008cf8 <_vfiprintf_r+0x18>
 8008cf4:	f7ff fdca 	bl	800888c <__sinit>
 8008cf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cfa:	07d9      	lsls	r1, r3, #31
 8008cfc:	d405      	bmi.n	8008d0a <_vfiprintf_r+0x2a>
 8008cfe:	89ab      	ldrh	r3, [r5, #12]
 8008d00:	059a      	lsls	r2, r3, #22
 8008d02:	d402      	bmi.n	8008d0a <_vfiprintf_r+0x2a>
 8008d04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d06:	f7ff fec6 	bl	8008a96 <__retarget_lock_acquire_recursive>
 8008d0a:	89ab      	ldrh	r3, [r5, #12]
 8008d0c:	071b      	lsls	r3, r3, #28
 8008d0e:	d501      	bpl.n	8008d14 <_vfiprintf_r+0x34>
 8008d10:	692b      	ldr	r3, [r5, #16]
 8008d12:	b99b      	cbnz	r3, 8008d3c <_vfiprintf_r+0x5c>
 8008d14:	4629      	mov	r1, r5
 8008d16:	4630      	mov	r0, r6
 8008d18:	f000 fb70 	bl	80093fc <__swsetup_r>
 8008d1c:	b170      	cbz	r0, 8008d3c <_vfiprintf_r+0x5c>
 8008d1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d20:	07dc      	lsls	r4, r3, #31
 8008d22:	d504      	bpl.n	8008d2e <_vfiprintf_r+0x4e>
 8008d24:	f04f 30ff 	mov.w	r0, #4294967295
 8008d28:	b01d      	add	sp, #116	@ 0x74
 8008d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d2e:	89ab      	ldrh	r3, [r5, #12]
 8008d30:	0598      	lsls	r0, r3, #22
 8008d32:	d4f7      	bmi.n	8008d24 <_vfiprintf_r+0x44>
 8008d34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d36:	f7ff feaf 	bl	8008a98 <__retarget_lock_release_recursive>
 8008d3a:	e7f3      	b.n	8008d24 <_vfiprintf_r+0x44>
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d40:	2320      	movs	r3, #32
 8008d42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d46:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d4a:	2330      	movs	r3, #48	@ 0x30
 8008d4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008efc <_vfiprintf_r+0x21c>
 8008d50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d54:	f04f 0901 	mov.w	r9, #1
 8008d58:	4623      	mov	r3, r4
 8008d5a:	469a      	mov	sl, r3
 8008d5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d60:	b10a      	cbz	r2, 8008d66 <_vfiprintf_r+0x86>
 8008d62:	2a25      	cmp	r2, #37	@ 0x25
 8008d64:	d1f9      	bne.n	8008d5a <_vfiprintf_r+0x7a>
 8008d66:	ebba 0b04 	subs.w	fp, sl, r4
 8008d6a:	d00b      	beq.n	8008d84 <_vfiprintf_r+0xa4>
 8008d6c:	465b      	mov	r3, fp
 8008d6e:	4622      	mov	r2, r4
 8008d70:	4629      	mov	r1, r5
 8008d72:	4630      	mov	r0, r6
 8008d74:	f7ff ffa1 	bl	8008cba <__sfputs_r>
 8008d78:	3001      	adds	r0, #1
 8008d7a:	f000 80a7 	beq.w	8008ecc <_vfiprintf_r+0x1ec>
 8008d7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d80:	445a      	add	r2, fp
 8008d82:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d84:	f89a 3000 	ldrb.w	r3, [sl]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	f000 809f 	beq.w	8008ecc <_vfiprintf_r+0x1ec>
 8008d8e:	2300      	movs	r3, #0
 8008d90:	f04f 32ff 	mov.w	r2, #4294967295
 8008d94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d98:	f10a 0a01 	add.w	sl, sl, #1
 8008d9c:	9304      	str	r3, [sp, #16]
 8008d9e:	9307      	str	r3, [sp, #28]
 8008da0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008da4:	931a      	str	r3, [sp, #104]	@ 0x68
 8008da6:	4654      	mov	r4, sl
 8008da8:	2205      	movs	r2, #5
 8008daa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dae:	4853      	ldr	r0, [pc, #332]	@ (8008efc <_vfiprintf_r+0x21c>)
 8008db0:	f7f7 fa96 	bl	80002e0 <memchr>
 8008db4:	9a04      	ldr	r2, [sp, #16]
 8008db6:	b9d8      	cbnz	r0, 8008df0 <_vfiprintf_r+0x110>
 8008db8:	06d1      	lsls	r1, r2, #27
 8008dba:	bf44      	itt	mi
 8008dbc:	2320      	movmi	r3, #32
 8008dbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dc2:	0713      	lsls	r3, r2, #28
 8008dc4:	bf44      	itt	mi
 8008dc6:	232b      	movmi	r3, #43	@ 0x2b
 8008dc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dcc:	f89a 3000 	ldrb.w	r3, [sl]
 8008dd0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dd2:	d015      	beq.n	8008e00 <_vfiprintf_r+0x120>
 8008dd4:	9a07      	ldr	r2, [sp, #28]
 8008dd6:	4654      	mov	r4, sl
 8008dd8:	2000      	movs	r0, #0
 8008dda:	f04f 0c0a 	mov.w	ip, #10
 8008dde:	4621      	mov	r1, r4
 8008de0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008de4:	3b30      	subs	r3, #48	@ 0x30
 8008de6:	2b09      	cmp	r3, #9
 8008de8:	d94b      	bls.n	8008e82 <_vfiprintf_r+0x1a2>
 8008dea:	b1b0      	cbz	r0, 8008e1a <_vfiprintf_r+0x13a>
 8008dec:	9207      	str	r2, [sp, #28]
 8008dee:	e014      	b.n	8008e1a <_vfiprintf_r+0x13a>
 8008df0:	eba0 0308 	sub.w	r3, r0, r8
 8008df4:	fa09 f303 	lsl.w	r3, r9, r3
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	9304      	str	r3, [sp, #16]
 8008dfc:	46a2      	mov	sl, r4
 8008dfe:	e7d2      	b.n	8008da6 <_vfiprintf_r+0xc6>
 8008e00:	9b03      	ldr	r3, [sp, #12]
 8008e02:	1d19      	adds	r1, r3, #4
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	9103      	str	r1, [sp, #12]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	bfbb      	ittet	lt
 8008e0c:	425b      	neglt	r3, r3
 8008e0e:	f042 0202 	orrlt.w	r2, r2, #2
 8008e12:	9307      	strge	r3, [sp, #28]
 8008e14:	9307      	strlt	r3, [sp, #28]
 8008e16:	bfb8      	it	lt
 8008e18:	9204      	strlt	r2, [sp, #16]
 8008e1a:	7823      	ldrb	r3, [r4, #0]
 8008e1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e1e:	d10a      	bne.n	8008e36 <_vfiprintf_r+0x156>
 8008e20:	7863      	ldrb	r3, [r4, #1]
 8008e22:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e24:	d132      	bne.n	8008e8c <_vfiprintf_r+0x1ac>
 8008e26:	9b03      	ldr	r3, [sp, #12]
 8008e28:	1d1a      	adds	r2, r3, #4
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	9203      	str	r2, [sp, #12]
 8008e2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e32:	3402      	adds	r4, #2
 8008e34:	9305      	str	r3, [sp, #20]
 8008e36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008f0c <_vfiprintf_r+0x22c>
 8008e3a:	7821      	ldrb	r1, [r4, #0]
 8008e3c:	2203      	movs	r2, #3
 8008e3e:	4650      	mov	r0, sl
 8008e40:	f7f7 fa4e 	bl	80002e0 <memchr>
 8008e44:	b138      	cbz	r0, 8008e56 <_vfiprintf_r+0x176>
 8008e46:	9b04      	ldr	r3, [sp, #16]
 8008e48:	eba0 000a 	sub.w	r0, r0, sl
 8008e4c:	2240      	movs	r2, #64	@ 0x40
 8008e4e:	4082      	lsls	r2, r0
 8008e50:	4313      	orrs	r3, r2
 8008e52:	3401      	adds	r4, #1
 8008e54:	9304      	str	r3, [sp, #16]
 8008e56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e5a:	4829      	ldr	r0, [pc, #164]	@ (8008f00 <_vfiprintf_r+0x220>)
 8008e5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e60:	2206      	movs	r2, #6
 8008e62:	f7f7 fa3d 	bl	80002e0 <memchr>
 8008e66:	2800      	cmp	r0, #0
 8008e68:	d03f      	beq.n	8008eea <_vfiprintf_r+0x20a>
 8008e6a:	4b26      	ldr	r3, [pc, #152]	@ (8008f04 <_vfiprintf_r+0x224>)
 8008e6c:	bb1b      	cbnz	r3, 8008eb6 <_vfiprintf_r+0x1d6>
 8008e6e:	9b03      	ldr	r3, [sp, #12]
 8008e70:	3307      	adds	r3, #7
 8008e72:	f023 0307 	bic.w	r3, r3, #7
 8008e76:	3308      	adds	r3, #8
 8008e78:	9303      	str	r3, [sp, #12]
 8008e7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e7c:	443b      	add	r3, r7
 8008e7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e80:	e76a      	b.n	8008d58 <_vfiprintf_r+0x78>
 8008e82:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e86:	460c      	mov	r4, r1
 8008e88:	2001      	movs	r0, #1
 8008e8a:	e7a8      	b.n	8008dde <_vfiprintf_r+0xfe>
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	3401      	adds	r4, #1
 8008e90:	9305      	str	r3, [sp, #20]
 8008e92:	4619      	mov	r1, r3
 8008e94:	f04f 0c0a 	mov.w	ip, #10
 8008e98:	4620      	mov	r0, r4
 8008e9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e9e:	3a30      	subs	r2, #48	@ 0x30
 8008ea0:	2a09      	cmp	r2, #9
 8008ea2:	d903      	bls.n	8008eac <_vfiprintf_r+0x1cc>
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d0c6      	beq.n	8008e36 <_vfiprintf_r+0x156>
 8008ea8:	9105      	str	r1, [sp, #20]
 8008eaa:	e7c4      	b.n	8008e36 <_vfiprintf_r+0x156>
 8008eac:	fb0c 2101 	mla	r1, ip, r1, r2
 8008eb0:	4604      	mov	r4, r0
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	e7f0      	b.n	8008e98 <_vfiprintf_r+0x1b8>
 8008eb6:	ab03      	add	r3, sp, #12
 8008eb8:	9300      	str	r3, [sp, #0]
 8008eba:	462a      	mov	r2, r5
 8008ebc:	4b12      	ldr	r3, [pc, #72]	@ (8008f08 <_vfiprintf_r+0x228>)
 8008ebe:	a904      	add	r1, sp, #16
 8008ec0:	4630      	mov	r0, r6
 8008ec2:	f3af 8000 	nop.w
 8008ec6:	4607      	mov	r7, r0
 8008ec8:	1c78      	adds	r0, r7, #1
 8008eca:	d1d6      	bne.n	8008e7a <_vfiprintf_r+0x19a>
 8008ecc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ece:	07d9      	lsls	r1, r3, #31
 8008ed0:	d405      	bmi.n	8008ede <_vfiprintf_r+0x1fe>
 8008ed2:	89ab      	ldrh	r3, [r5, #12]
 8008ed4:	059a      	lsls	r2, r3, #22
 8008ed6:	d402      	bmi.n	8008ede <_vfiprintf_r+0x1fe>
 8008ed8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008eda:	f7ff fddd 	bl	8008a98 <__retarget_lock_release_recursive>
 8008ede:	89ab      	ldrh	r3, [r5, #12]
 8008ee0:	065b      	lsls	r3, r3, #25
 8008ee2:	f53f af1f 	bmi.w	8008d24 <_vfiprintf_r+0x44>
 8008ee6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ee8:	e71e      	b.n	8008d28 <_vfiprintf_r+0x48>
 8008eea:	ab03      	add	r3, sp, #12
 8008eec:	9300      	str	r3, [sp, #0]
 8008eee:	462a      	mov	r2, r5
 8008ef0:	4b05      	ldr	r3, [pc, #20]	@ (8008f08 <_vfiprintf_r+0x228>)
 8008ef2:	a904      	add	r1, sp, #16
 8008ef4:	4630      	mov	r0, r6
 8008ef6:	f000 f879 	bl	8008fec <_printf_i>
 8008efa:	e7e4      	b.n	8008ec6 <_vfiprintf_r+0x1e6>
 8008efc:	0800ada4 	.word	0x0800ada4
 8008f00:	0800adae 	.word	0x0800adae
 8008f04:	00000000 	.word	0x00000000
 8008f08:	08008cbb 	.word	0x08008cbb
 8008f0c:	0800adaa 	.word	0x0800adaa

08008f10 <_printf_common>:
 8008f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f14:	4616      	mov	r6, r2
 8008f16:	4698      	mov	r8, r3
 8008f18:	688a      	ldr	r2, [r1, #8]
 8008f1a:	690b      	ldr	r3, [r1, #16]
 8008f1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008f20:	4293      	cmp	r3, r2
 8008f22:	bfb8      	it	lt
 8008f24:	4613      	movlt	r3, r2
 8008f26:	6033      	str	r3, [r6, #0]
 8008f28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008f2c:	4607      	mov	r7, r0
 8008f2e:	460c      	mov	r4, r1
 8008f30:	b10a      	cbz	r2, 8008f36 <_printf_common+0x26>
 8008f32:	3301      	adds	r3, #1
 8008f34:	6033      	str	r3, [r6, #0]
 8008f36:	6823      	ldr	r3, [r4, #0]
 8008f38:	0699      	lsls	r1, r3, #26
 8008f3a:	bf42      	ittt	mi
 8008f3c:	6833      	ldrmi	r3, [r6, #0]
 8008f3e:	3302      	addmi	r3, #2
 8008f40:	6033      	strmi	r3, [r6, #0]
 8008f42:	6825      	ldr	r5, [r4, #0]
 8008f44:	f015 0506 	ands.w	r5, r5, #6
 8008f48:	d106      	bne.n	8008f58 <_printf_common+0x48>
 8008f4a:	f104 0a19 	add.w	sl, r4, #25
 8008f4e:	68e3      	ldr	r3, [r4, #12]
 8008f50:	6832      	ldr	r2, [r6, #0]
 8008f52:	1a9b      	subs	r3, r3, r2
 8008f54:	42ab      	cmp	r3, r5
 8008f56:	dc26      	bgt.n	8008fa6 <_printf_common+0x96>
 8008f58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008f5c:	6822      	ldr	r2, [r4, #0]
 8008f5e:	3b00      	subs	r3, #0
 8008f60:	bf18      	it	ne
 8008f62:	2301      	movne	r3, #1
 8008f64:	0692      	lsls	r2, r2, #26
 8008f66:	d42b      	bmi.n	8008fc0 <_printf_common+0xb0>
 8008f68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008f6c:	4641      	mov	r1, r8
 8008f6e:	4638      	mov	r0, r7
 8008f70:	47c8      	blx	r9
 8008f72:	3001      	adds	r0, #1
 8008f74:	d01e      	beq.n	8008fb4 <_printf_common+0xa4>
 8008f76:	6823      	ldr	r3, [r4, #0]
 8008f78:	6922      	ldr	r2, [r4, #16]
 8008f7a:	f003 0306 	and.w	r3, r3, #6
 8008f7e:	2b04      	cmp	r3, #4
 8008f80:	bf02      	ittt	eq
 8008f82:	68e5      	ldreq	r5, [r4, #12]
 8008f84:	6833      	ldreq	r3, [r6, #0]
 8008f86:	1aed      	subeq	r5, r5, r3
 8008f88:	68a3      	ldr	r3, [r4, #8]
 8008f8a:	bf0c      	ite	eq
 8008f8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f90:	2500      	movne	r5, #0
 8008f92:	4293      	cmp	r3, r2
 8008f94:	bfc4      	itt	gt
 8008f96:	1a9b      	subgt	r3, r3, r2
 8008f98:	18ed      	addgt	r5, r5, r3
 8008f9a:	2600      	movs	r6, #0
 8008f9c:	341a      	adds	r4, #26
 8008f9e:	42b5      	cmp	r5, r6
 8008fa0:	d11a      	bne.n	8008fd8 <_printf_common+0xc8>
 8008fa2:	2000      	movs	r0, #0
 8008fa4:	e008      	b.n	8008fb8 <_printf_common+0xa8>
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	4652      	mov	r2, sl
 8008faa:	4641      	mov	r1, r8
 8008fac:	4638      	mov	r0, r7
 8008fae:	47c8      	blx	r9
 8008fb0:	3001      	adds	r0, #1
 8008fb2:	d103      	bne.n	8008fbc <_printf_common+0xac>
 8008fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fbc:	3501      	adds	r5, #1
 8008fbe:	e7c6      	b.n	8008f4e <_printf_common+0x3e>
 8008fc0:	18e1      	adds	r1, r4, r3
 8008fc2:	1c5a      	adds	r2, r3, #1
 8008fc4:	2030      	movs	r0, #48	@ 0x30
 8008fc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008fca:	4422      	add	r2, r4
 8008fcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008fd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008fd4:	3302      	adds	r3, #2
 8008fd6:	e7c7      	b.n	8008f68 <_printf_common+0x58>
 8008fd8:	2301      	movs	r3, #1
 8008fda:	4622      	mov	r2, r4
 8008fdc:	4641      	mov	r1, r8
 8008fde:	4638      	mov	r0, r7
 8008fe0:	47c8      	blx	r9
 8008fe2:	3001      	adds	r0, #1
 8008fe4:	d0e6      	beq.n	8008fb4 <_printf_common+0xa4>
 8008fe6:	3601      	adds	r6, #1
 8008fe8:	e7d9      	b.n	8008f9e <_printf_common+0x8e>
	...

08008fec <_printf_i>:
 8008fec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ff0:	7e0f      	ldrb	r7, [r1, #24]
 8008ff2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008ff4:	2f78      	cmp	r7, #120	@ 0x78
 8008ff6:	4691      	mov	r9, r2
 8008ff8:	4680      	mov	r8, r0
 8008ffa:	460c      	mov	r4, r1
 8008ffc:	469a      	mov	sl, r3
 8008ffe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009002:	d807      	bhi.n	8009014 <_printf_i+0x28>
 8009004:	2f62      	cmp	r7, #98	@ 0x62
 8009006:	d80a      	bhi.n	800901e <_printf_i+0x32>
 8009008:	2f00      	cmp	r7, #0
 800900a:	f000 80d1 	beq.w	80091b0 <_printf_i+0x1c4>
 800900e:	2f58      	cmp	r7, #88	@ 0x58
 8009010:	f000 80b8 	beq.w	8009184 <_printf_i+0x198>
 8009014:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009018:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800901c:	e03a      	b.n	8009094 <_printf_i+0xa8>
 800901e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009022:	2b15      	cmp	r3, #21
 8009024:	d8f6      	bhi.n	8009014 <_printf_i+0x28>
 8009026:	a101      	add	r1, pc, #4	@ (adr r1, 800902c <_printf_i+0x40>)
 8009028:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800902c:	08009085 	.word	0x08009085
 8009030:	08009099 	.word	0x08009099
 8009034:	08009015 	.word	0x08009015
 8009038:	08009015 	.word	0x08009015
 800903c:	08009015 	.word	0x08009015
 8009040:	08009015 	.word	0x08009015
 8009044:	08009099 	.word	0x08009099
 8009048:	08009015 	.word	0x08009015
 800904c:	08009015 	.word	0x08009015
 8009050:	08009015 	.word	0x08009015
 8009054:	08009015 	.word	0x08009015
 8009058:	08009197 	.word	0x08009197
 800905c:	080090c3 	.word	0x080090c3
 8009060:	08009151 	.word	0x08009151
 8009064:	08009015 	.word	0x08009015
 8009068:	08009015 	.word	0x08009015
 800906c:	080091b9 	.word	0x080091b9
 8009070:	08009015 	.word	0x08009015
 8009074:	080090c3 	.word	0x080090c3
 8009078:	08009015 	.word	0x08009015
 800907c:	08009015 	.word	0x08009015
 8009080:	08009159 	.word	0x08009159
 8009084:	6833      	ldr	r3, [r6, #0]
 8009086:	1d1a      	adds	r2, r3, #4
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	6032      	str	r2, [r6, #0]
 800908c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009090:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009094:	2301      	movs	r3, #1
 8009096:	e09c      	b.n	80091d2 <_printf_i+0x1e6>
 8009098:	6833      	ldr	r3, [r6, #0]
 800909a:	6820      	ldr	r0, [r4, #0]
 800909c:	1d19      	adds	r1, r3, #4
 800909e:	6031      	str	r1, [r6, #0]
 80090a0:	0606      	lsls	r6, r0, #24
 80090a2:	d501      	bpl.n	80090a8 <_printf_i+0xbc>
 80090a4:	681d      	ldr	r5, [r3, #0]
 80090a6:	e003      	b.n	80090b0 <_printf_i+0xc4>
 80090a8:	0645      	lsls	r5, r0, #25
 80090aa:	d5fb      	bpl.n	80090a4 <_printf_i+0xb8>
 80090ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80090b0:	2d00      	cmp	r5, #0
 80090b2:	da03      	bge.n	80090bc <_printf_i+0xd0>
 80090b4:	232d      	movs	r3, #45	@ 0x2d
 80090b6:	426d      	negs	r5, r5
 80090b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090bc:	4858      	ldr	r0, [pc, #352]	@ (8009220 <_printf_i+0x234>)
 80090be:	230a      	movs	r3, #10
 80090c0:	e011      	b.n	80090e6 <_printf_i+0xfa>
 80090c2:	6821      	ldr	r1, [r4, #0]
 80090c4:	6833      	ldr	r3, [r6, #0]
 80090c6:	0608      	lsls	r0, r1, #24
 80090c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80090cc:	d402      	bmi.n	80090d4 <_printf_i+0xe8>
 80090ce:	0649      	lsls	r1, r1, #25
 80090d0:	bf48      	it	mi
 80090d2:	b2ad      	uxthmi	r5, r5
 80090d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80090d6:	4852      	ldr	r0, [pc, #328]	@ (8009220 <_printf_i+0x234>)
 80090d8:	6033      	str	r3, [r6, #0]
 80090da:	bf14      	ite	ne
 80090dc:	230a      	movne	r3, #10
 80090de:	2308      	moveq	r3, #8
 80090e0:	2100      	movs	r1, #0
 80090e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80090e6:	6866      	ldr	r6, [r4, #4]
 80090e8:	60a6      	str	r6, [r4, #8]
 80090ea:	2e00      	cmp	r6, #0
 80090ec:	db05      	blt.n	80090fa <_printf_i+0x10e>
 80090ee:	6821      	ldr	r1, [r4, #0]
 80090f0:	432e      	orrs	r6, r5
 80090f2:	f021 0104 	bic.w	r1, r1, #4
 80090f6:	6021      	str	r1, [r4, #0]
 80090f8:	d04b      	beq.n	8009192 <_printf_i+0x1a6>
 80090fa:	4616      	mov	r6, r2
 80090fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8009100:	fb03 5711 	mls	r7, r3, r1, r5
 8009104:	5dc7      	ldrb	r7, [r0, r7]
 8009106:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800910a:	462f      	mov	r7, r5
 800910c:	42bb      	cmp	r3, r7
 800910e:	460d      	mov	r5, r1
 8009110:	d9f4      	bls.n	80090fc <_printf_i+0x110>
 8009112:	2b08      	cmp	r3, #8
 8009114:	d10b      	bne.n	800912e <_printf_i+0x142>
 8009116:	6823      	ldr	r3, [r4, #0]
 8009118:	07df      	lsls	r7, r3, #31
 800911a:	d508      	bpl.n	800912e <_printf_i+0x142>
 800911c:	6923      	ldr	r3, [r4, #16]
 800911e:	6861      	ldr	r1, [r4, #4]
 8009120:	4299      	cmp	r1, r3
 8009122:	bfde      	ittt	le
 8009124:	2330      	movle	r3, #48	@ 0x30
 8009126:	f806 3c01 	strble.w	r3, [r6, #-1]
 800912a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800912e:	1b92      	subs	r2, r2, r6
 8009130:	6122      	str	r2, [r4, #16]
 8009132:	f8cd a000 	str.w	sl, [sp]
 8009136:	464b      	mov	r3, r9
 8009138:	aa03      	add	r2, sp, #12
 800913a:	4621      	mov	r1, r4
 800913c:	4640      	mov	r0, r8
 800913e:	f7ff fee7 	bl	8008f10 <_printf_common>
 8009142:	3001      	adds	r0, #1
 8009144:	d14a      	bne.n	80091dc <_printf_i+0x1f0>
 8009146:	f04f 30ff 	mov.w	r0, #4294967295
 800914a:	b004      	add	sp, #16
 800914c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009150:	6823      	ldr	r3, [r4, #0]
 8009152:	f043 0320 	orr.w	r3, r3, #32
 8009156:	6023      	str	r3, [r4, #0]
 8009158:	4832      	ldr	r0, [pc, #200]	@ (8009224 <_printf_i+0x238>)
 800915a:	2778      	movs	r7, #120	@ 0x78
 800915c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009160:	6823      	ldr	r3, [r4, #0]
 8009162:	6831      	ldr	r1, [r6, #0]
 8009164:	061f      	lsls	r7, r3, #24
 8009166:	f851 5b04 	ldr.w	r5, [r1], #4
 800916a:	d402      	bmi.n	8009172 <_printf_i+0x186>
 800916c:	065f      	lsls	r7, r3, #25
 800916e:	bf48      	it	mi
 8009170:	b2ad      	uxthmi	r5, r5
 8009172:	6031      	str	r1, [r6, #0]
 8009174:	07d9      	lsls	r1, r3, #31
 8009176:	bf44      	itt	mi
 8009178:	f043 0320 	orrmi.w	r3, r3, #32
 800917c:	6023      	strmi	r3, [r4, #0]
 800917e:	b11d      	cbz	r5, 8009188 <_printf_i+0x19c>
 8009180:	2310      	movs	r3, #16
 8009182:	e7ad      	b.n	80090e0 <_printf_i+0xf4>
 8009184:	4826      	ldr	r0, [pc, #152]	@ (8009220 <_printf_i+0x234>)
 8009186:	e7e9      	b.n	800915c <_printf_i+0x170>
 8009188:	6823      	ldr	r3, [r4, #0]
 800918a:	f023 0320 	bic.w	r3, r3, #32
 800918e:	6023      	str	r3, [r4, #0]
 8009190:	e7f6      	b.n	8009180 <_printf_i+0x194>
 8009192:	4616      	mov	r6, r2
 8009194:	e7bd      	b.n	8009112 <_printf_i+0x126>
 8009196:	6833      	ldr	r3, [r6, #0]
 8009198:	6825      	ldr	r5, [r4, #0]
 800919a:	6961      	ldr	r1, [r4, #20]
 800919c:	1d18      	adds	r0, r3, #4
 800919e:	6030      	str	r0, [r6, #0]
 80091a0:	062e      	lsls	r6, r5, #24
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	d501      	bpl.n	80091aa <_printf_i+0x1be>
 80091a6:	6019      	str	r1, [r3, #0]
 80091a8:	e002      	b.n	80091b0 <_printf_i+0x1c4>
 80091aa:	0668      	lsls	r0, r5, #25
 80091ac:	d5fb      	bpl.n	80091a6 <_printf_i+0x1ba>
 80091ae:	8019      	strh	r1, [r3, #0]
 80091b0:	2300      	movs	r3, #0
 80091b2:	6123      	str	r3, [r4, #16]
 80091b4:	4616      	mov	r6, r2
 80091b6:	e7bc      	b.n	8009132 <_printf_i+0x146>
 80091b8:	6833      	ldr	r3, [r6, #0]
 80091ba:	1d1a      	adds	r2, r3, #4
 80091bc:	6032      	str	r2, [r6, #0]
 80091be:	681e      	ldr	r6, [r3, #0]
 80091c0:	6862      	ldr	r2, [r4, #4]
 80091c2:	2100      	movs	r1, #0
 80091c4:	4630      	mov	r0, r6
 80091c6:	f7f7 f88b 	bl	80002e0 <memchr>
 80091ca:	b108      	cbz	r0, 80091d0 <_printf_i+0x1e4>
 80091cc:	1b80      	subs	r0, r0, r6
 80091ce:	6060      	str	r0, [r4, #4]
 80091d0:	6863      	ldr	r3, [r4, #4]
 80091d2:	6123      	str	r3, [r4, #16]
 80091d4:	2300      	movs	r3, #0
 80091d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091da:	e7aa      	b.n	8009132 <_printf_i+0x146>
 80091dc:	6923      	ldr	r3, [r4, #16]
 80091de:	4632      	mov	r2, r6
 80091e0:	4649      	mov	r1, r9
 80091e2:	4640      	mov	r0, r8
 80091e4:	47d0      	blx	sl
 80091e6:	3001      	adds	r0, #1
 80091e8:	d0ad      	beq.n	8009146 <_printf_i+0x15a>
 80091ea:	6823      	ldr	r3, [r4, #0]
 80091ec:	079b      	lsls	r3, r3, #30
 80091ee:	d413      	bmi.n	8009218 <_printf_i+0x22c>
 80091f0:	68e0      	ldr	r0, [r4, #12]
 80091f2:	9b03      	ldr	r3, [sp, #12]
 80091f4:	4298      	cmp	r0, r3
 80091f6:	bfb8      	it	lt
 80091f8:	4618      	movlt	r0, r3
 80091fa:	e7a6      	b.n	800914a <_printf_i+0x15e>
 80091fc:	2301      	movs	r3, #1
 80091fe:	4632      	mov	r2, r6
 8009200:	4649      	mov	r1, r9
 8009202:	4640      	mov	r0, r8
 8009204:	47d0      	blx	sl
 8009206:	3001      	adds	r0, #1
 8009208:	d09d      	beq.n	8009146 <_printf_i+0x15a>
 800920a:	3501      	adds	r5, #1
 800920c:	68e3      	ldr	r3, [r4, #12]
 800920e:	9903      	ldr	r1, [sp, #12]
 8009210:	1a5b      	subs	r3, r3, r1
 8009212:	42ab      	cmp	r3, r5
 8009214:	dcf2      	bgt.n	80091fc <_printf_i+0x210>
 8009216:	e7eb      	b.n	80091f0 <_printf_i+0x204>
 8009218:	2500      	movs	r5, #0
 800921a:	f104 0619 	add.w	r6, r4, #25
 800921e:	e7f5      	b.n	800920c <_printf_i+0x220>
 8009220:	0800adb5 	.word	0x0800adb5
 8009224:	0800adc6 	.word	0x0800adc6

08009228 <__sflush_r>:
 8009228:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800922c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009230:	0716      	lsls	r6, r2, #28
 8009232:	4605      	mov	r5, r0
 8009234:	460c      	mov	r4, r1
 8009236:	d454      	bmi.n	80092e2 <__sflush_r+0xba>
 8009238:	684b      	ldr	r3, [r1, #4]
 800923a:	2b00      	cmp	r3, #0
 800923c:	dc02      	bgt.n	8009244 <__sflush_r+0x1c>
 800923e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009240:	2b00      	cmp	r3, #0
 8009242:	dd48      	ble.n	80092d6 <__sflush_r+0xae>
 8009244:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009246:	2e00      	cmp	r6, #0
 8009248:	d045      	beq.n	80092d6 <__sflush_r+0xae>
 800924a:	2300      	movs	r3, #0
 800924c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009250:	682f      	ldr	r7, [r5, #0]
 8009252:	6a21      	ldr	r1, [r4, #32]
 8009254:	602b      	str	r3, [r5, #0]
 8009256:	d030      	beq.n	80092ba <__sflush_r+0x92>
 8009258:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800925a:	89a3      	ldrh	r3, [r4, #12]
 800925c:	0759      	lsls	r1, r3, #29
 800925e:	d505      	bpl.n	800926c <__sflush_r+0x44>
 8009260:	6863      	ldr	r3, [r4, #4]
 8009262:	1ad2      	subs	r2, r2, r3
 8009264:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009266:	b10b      	cbz	r3, 800926c <__sflush_r+0x44>
 8009268:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800926a:	1ad2      	subs	r2, r2, r3
 800926c:	2300      	movs	r3, #0
 800926e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009270:	6a21      	ldr	r1, [r4, #32]
 8009272:	4628      	mov	r0, r5
 8009274:	47b0      	blx	r6
 8009276:	1c43      	adds	r3, r0, #1
 8009278:	89a3      	ldrh	r3, [r4, #12]
 800927a:	d106      	bne.n	800928a <__sflush_r+0x62>
 800927c:	6829      	ldr	r1, [r5, #0]
 800927e:	291d      	cmp	r1, #29
 8009280:	d82b      	bhi.n	80092da <__sflush_r+0xb2>
 8009282:	4a2a      	ldr	r2, [pc, #168]	@ (800932c <__sflush_r+0x104>)
 8009284:	40ca      	lsrs	r2, r1
 8009286:	07d6      	lsls	r6, r2, #31
 8009288:	d527      	bpl.n	80092da <__sflush_r+0xb2>
 800928a:	2200      	movs	r2, #0
 800928c:	6062      	str	r2, [r4, #4]
 800928e:	04d9      	lsls	r1, r3, #19
 8009290:	6922      	ldr	r2, [r4, #16]
 8009292:	6022      	str	r2, [r4, #0]
 8009294:	d504      	bpl.n	80092a0 <__sflush_r+0x78>
 8009296:	1c42      	adds	r2, r0, #1
 8009298:	d101      	bne.n	800929e <__sflush_r+0x76>
 800929a:	682b      	ldr	r3, [r5, #0]
 800929c:	b903      	cbnz	r3, 80092a0 <__sflush_r+0x78>
 800929e:	6560      	str	r0, [r4, #84]	@ 0x54
 80092a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80092a2:	602f      	str	r7, [r5, #0]
 80092a4:	b1b9      	cbz	r1, 80092d6 <__sflush_r+0xae>
 80092a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80092aa:	4299      	cmp	r1, r3
 80092ac:	d002      	beq.n	80092b4 <__sflush_r+0x8c>
 80092ae:	4628      	mov	r0, r5
 80092b0:	f7ff fbf4 	bl	8008a9c <_free_r>
 80092b4:	2300      	movs	r3, #0
 80092b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80092b8:	e00d      	b.n	80092d6 <__sflush_r+0xae>
 80092ba:	2301      	movs	r3, #1
 80092bc:	4628      	mov	r0, r5
 80092be:	47b0      	blx	r6
 80092c0:	4602      	mov	r2, r0
 80092c2:	1c50      	adds	r0, r2, #1
 80092c4:	d1c9      	bne.n	800925a <__sflush_r+0x32>
 80092c6:	682b      	ldr	r3, [r5, #0]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d0c6      	beq.n	800925a <__sflush_r+0x32>
 80092cc:	2b1d      	cmp	r3, #29
 80092ce:	d001      	beq.n	80092d4 <__sflush_r+0xac>
 80092d0:	2b16      	cmp	r3, #22
 80092d2:	d11e      	bne.n	8009312 <__sflush_r+0xea>
 80092d4:	602f      	str	r7, [r5, #0]
 80092d6:	2000      	movs	r0, #0
 80092d8:	e022      	b.n	8009320 <__sflush_r+0xf8>
 80092da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092de:	b21b      	sxth	r3, r3
 80092e0:	e01b      	b.n	800931a <__sflush_r+0xf2>
 80092e2:	690f      	ldr	r7, [r1, #16]
 80092e4:	2f00      	cmp	r7, #0
 80092e6:	d0f6      	beq.n	80092d6 <__sflush_r+0xae>
 80092e8:	0793      	lsls	r3, r2, #30
 80092ea:	680e      	ldr	r6, [r1, #0]
 80092ec:	bf08      	it	eq
 80092ee:	694b      	ldreq	r3, [r1, #20]
 80092f0:	600f      	str	r7, [r1, #0]
 80092f2:	bf18      	it	ne
 80092f4:	2300      	movne	r3, #0
 80092f6:	eba6 0807 	sub.w	r8, r6, r7
 80092fa:	608b      	str	r3, [r1, #8]
 80092fc:	f1b8 0f00 	cmp.w	r8, #0
 8009300:	dde9      	ble.n	80092d6 <__sflush_r+0xae>
 8009302:	6a21      	ldr	r1, [r4, #32]
 8009304:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009306:	4643      	mov	r3, r8
 8009308:	463a      	mov	r2, r7
 800930a:	4628      	mov	r0, r5
 800930c:	47b0      	blx	r6
 800930e:	2800      	cmp	r0, #0
 8009310:	dc08      	bgt.n	8009324 <__sflush_r+0xfc>
 8009312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009316:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800931a:	81a3      	strh	r3, [r4, #12]
 800931c:	f04f 30ff 	mov.w	r0, #4294967295
 8009320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009324:	4407      	add	r7, r0
 8009326:	eba8 0800 	sub.w	r8, r8, r0
 800932a:	e7e7      	b.n	80092fc <__sflush_r+0xd4>
 800932c:	20400001 	.word	0x20400001

08009330 <_fflush_r>:
 8009330:	b538      	push	{r3, r4, r5, lr}
 8009332:	690b      	ldr	r3, [r1, #16]
 8009334:	4605      	mov	r5, r0
 8009336:	460c      	mov	r4, r1
 8009338:	b913      	cbnz	r3, 8009340 <_fflush_r+0x10>
 800933a:	2500      	movs	r5, #0
 800933c:	4628      	mov	r0, r5
 800933e:	bd38      	pop	{r3, r4, r5, pc}
 8009340:	b118      	cbz	r0, 800934a <_fflush_r+0x1a>
 8009342:	6a03      	ldr	r3, [r0, #32]
 8009344:	b90b      	cbnz	r3, 800934a <_fflush_r+0x1a>
 8009346:	f7ff faa1 	bl	800888c <__sinit>
 800934a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d0f3      	beq.n	800933a <_fflush_r+0xa>
 8009352:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009354:	07d0      	lsls	r0, r2, #31
 8009356:	d404      	bmi.n	8009362 <_fflush_r+0x32>
 8009358:	0599      	lsls	r1, r3, #22
 800935a:	d402      	bmi.n	8009362 <_fflush_r+0x32>
 800935c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800935e:	f7ff fb9a 	bl	8008a96 <__retarget_lock_acquire_recursive>
 8009362:	4628      	mov	r0, r5
 8009364:	4621      	mov	r1, r4
 8009366:	f7ff ff5f 	bl	8009228 <__sflush_r>
 800936a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800936c:	07da      	lsls	r2, r3, #31
 800936e:	4605      	mov	r5, r0
 8009370:	d4e4      	bmi.n	800933c <_fflush_r+0xc>
 8009372:	89a3      	ldrh	r3, [r4, #12]
 8009374:	059b      	lsls	r3, r3, #22
 8009376:	d4e1      	bmi.n	800933c <_fflush_r+0xc>
 8009378:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800937a:	f7ff fb8d 	bl	8008a98 <__retarget_lock_release_recursive>
 800937e:	e7dd      	b.n	800933c <_fflush_r+0xc>

08009380 <__swbuf_r>:
 8009380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009382:	460e      	mov	r6, r1
 8009384:	4614      	mov	r4, r2
 8009386:	4605      	mov	r5, r0
 8009388:	b118      	cbz	r0, 8009392 <__swbuf_r+0x12>
 800938a:	6a03      	ldr	r3, [r0, #32]
 800938c:	b90b      	cbnz	r3, 8009392 <__swbuf_r+0x12>
 800938e:	f7ff fa7d 	bl	800888c <__sinit>
 8009392:	69a3      	ldr	r3, [r4, #24]
 8009394:	60a3      	str	r3, [r4, #8]
 8009396:	89a3      	ldrh	r3, [r4, #12]
 8009398:	071a      	lsls	r2, r3, #28
 800939a:	d501      	bpl.n	80093a0 <__swbuf_r+0x20>
 800939c:	6923      	ldr	r3, [r4, #16]
 800939e:	b943      	cbnz	r3, 80093b2 <__swbuf_r+0x32>
 80093a0:	4621      	mov	r1, r4
 80093a2:	4628      	mov	r0, r5
 80093a4:	f000 f82a 	bl	80093fc <__swsetup_r>
 80093a8:	b118      	cbz	r0, 80093b2 <__swbuf_r+0x32>
 80093aa:	f04f 37ff 	mov.w	r7, #4294967295
 80093ae:	4638      	mov	r0, r7
 80093b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093b2:	6823      	ldr	r3, [r4, #0]
 80093b4:	6922      	ldr	r2, [r4, #16]
 80093b6:	1a98      	subs	r0, r3, r2
 80093b8:	6963      	ldr	r3, [r4, #20]
 80093ba:	b2f6      	uxtb	r6, r6
 80093bc:	4283      	cmp	r3, r0
 80093be:	4637      	mov	r7, r6
 80093c0:	dc05      	bgt.n	80093ce <__swbuf_r+0x4e>
 80093c2:	4621      	mov	r1, r4
 80093c4:	4628      	mov	r0, r5
 80093c6:	f7ff ffb3 	bl	8009330 <_fflush_r>
 80093ca:	2800      	cmp	r0, #0
 80093cc:	d1ed      	bne.n	80093aa <__swbuf_r+0x2a>
 80093ce:	68a3      	ldr	r3, [r4, #8]
 80093d0:	3b01      	subs	r3, #1
 80093d2:	60a3      	str	r3, [r4, #8]
 80093d4:	6823      	ldr	r3, [r4, #0]
 80093d6:	1c5a      	adds	r2, r3, #1
 80093d8:	6022      	str	r2, [r4, #0]
 80093da:	701e      	strb	r6, [r3, #0]
 80093dc:	6962      	ldr	r2, [r4, #20]
 80093de:	1c43      	adds	r3, r0, #1
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d004      	beq.n	80093ee <__swbuf_r+0x6e>
 80093e4:	89a3      	ldrh	r3, [r4, #12]
 80093e6:	07db      	lsls	r3, r3, #31
 80093e8:	d5e1      	bpl.n	80093ae <__swbuf_r+0x2e>
 80093ea:	2e0a      	cmp	r6, #10
 80093ec:	d1df      	bne.n	80093ae <__swbuf_r+0x2e>
 80093ee:	4621      	mov	r1, r4
 80093f0:	4628      	mov	r0, r5
 80093f2:	f7ff ff9d 	bl	8009330 <_fflush_r>
 80093f6:	2800      	cmp	r0, #0
 80093f8:	d0d9      	beq.n	80093ae <__swbuf_r+0x2e>
 80093fa:	e7d6      	b.n	80093aa <__swbuf_r+0x2a>

080093fc <__swsetup_r>:
 80093fc:	b538      	push	{r3, r4, r5, lr}
 80093fe:	4b29      	ldr	r3, [pc, #164]	@ (80094a4 <__swsetup_r+0xa8>)
 8009400:	4605      	mov	r5, r0
 8009402:	6818      	ldr	r0, [r3, #0]
 8009404:	460c      	mov	r4, r1
 8009406:	b118      	cbz	r0, 8009410 <__swsetup_r+0x14>
 8009408:	6a03      	ldr	r3, [r0, #32]
 800940a:	b90b      	cbnz	r3, 8009410 <__swsetup_r+0x14>
 800940c:	f7ff fa3e 	bl	800888c <__sinit>
 8009410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009414:	0719      	lsls	r1, r3, #28
 8009416:	d422      	bmi.n	800945e <__swsetup_r+0x62>
 8009418:	06da      	lsls	r2, r3, #27
 800941a:	d407      	bmi.n	800942c <__swsetup_r+0x30>
 800941c:	2209      	movs	r2, #9
 800941e:	602a      	str	r2, [r5, #0]
 8009420:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009424:	81a3      	strh	r3, [r4, #12]
 8009426:	f04f 30ff 	mov.w	r0, #4294967295
 800942a:	e033      	b.n	8009494 <__swsetup_r+0x98>
 800942c:	0758      	lsls	r0, r3, #29
 800942e:	d512      	bpl.n	8009456 <__swsetup_r+0x5a>
 8009430:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009432:	b141      	cbz	r1, 8009446 <__swsetup_r+0x4a>
 8009434:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009438:	4299      	cmp	r1, r3
 800943a:	d002      	beq.n	8009442 <__swsetup_r+0x46>
 800943c:	4628      	mov	r0, r5
 800943e:	f7ff fb2d 	bl	8008a9c <_free_r>
 8009442:	2300      	movs	r3, #0
 8009444:	6363      	str	r3, [r4, #52]	@ 0x34
 8009446:	89a3      	ldrh	r3, [r4, #12]
 8009448:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800944c:	81a3      	strh	r3, [r4, #12]
 800944e:	2300      	movs	r3, #0
 8009450:	6063      	str	r3, [r4, #4]
 8009452:	6923      	ldr	r3, [r4, #16]
 8009454:	6023      	str	r3, [r4, #0]
 8009456:	89a3      	ldrh	r3, [r4, #12]
 8009458:	f043 0308 	orr.w	r3, r3, #8
 800945c:	81a3      	strh	r3, [r4, #12]
 800945e:	6923      	ldr	r3, [r4, #16]
 8009460:	b94b      	cbnz	r3, 8009476 <__swsetup_r+0x7a>
 8009462:	89a3      	ldrh	r3, [r4, #12]
 8009464:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009468:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800946c:	d003      	beq.n	8009476 <__swsetup_r+0x7a>
 800946e:	4621      	mov	r1, r4
 8009470:	4628      	mov	r0, r5
 8009472:	f000 f84f 	bl	8009514 <__smakebuf_r>
 8009476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800947a:	f013 0201 	ands.w	r2, r3, #1
 800947e:	d00a      	beq.n	8009496 <__swsetup_r+0x9a>
 8009480:	2200      	movs	r2, #0
 8009482:	60a2      	str	r2, [r4, #8]
 8009484:	6962      	ldr	r2, [r4, #20]
 8009486:	4252      	negs	r2, r2
 8009488:	61a2      	str	r2, [r4, #24]
 800948a:	6922      	ldr	r2, [r4, #16]
 800948c:	b942      	cbnz	r2, 80094a0 <__swsetup_r+0xa4>
 800948e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009492:	d1c5      	bne.n	8009420 <__swsetup_r+0x24>
 8009494:	bd38      	pop	{r3, r4, r5, pc}
 8009496:	0799      	lsls	r1, r3, #30
 8009498:	bf58      	it	pl
 800949a:	6962      	ldrpl	r2, [r4, #20]
 800949c:	60a2      	str	r2, [r4, #8]
 800949e:	e7f4      	b.n	800948a <__swsetup_r+0x8e>
 80094a0:	2000      	movs	r0, #0
 80094a2:	e7f7      	b.n	8009494 <__swsetup_r+0x98>
 80094a4:	24000038 	.word	0x24000038

080094a8 <_sbrk_r>:
 80094a8:	b538      	push	{r3, r4, r5, lr}
 80094aa:	4d06      	ldr	r5, [pc, #24]	@ (80094c4 <_sbrk_r+0x1c>)
 80094ac:	2300      	movs	r3, #0
 80094ae:	4604      	mov	r4, r0
 80094b0:	4608      	mov	r0, r1
 80094b2:	602b      	str	r3, [r5, #0]
 80094b4:	f7f8 fed8 	bl	8002268 <_sbrk>
 80094b8:	1c43      	adds	r3, r0, #1
 80094ba:	d102      	bne.n	80094c2 <_sbrk_r+0x1a>
 80094bc:	682b      	ldr	r3, [r5, #0]
 80094be:	b103      	cbz	r3, 80094c2 <_sbrk_r+0x1a>
 80094c0:	6023      	str	r3, [r4, #0]
 80094c2:	bd38      	pop	{r3, r4, r5, pc}
 80094c4:	24000324 	.word	0x24000324

080094c8 <__swhatbuf_r>:
 80094c8:	b570      	push	{r4, r5, r6, lr}
 80094ca:	460c      	mov	r4, r1
 80094cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094d0:	2900      	cmp	r1, #0
 80094d2:	b096      	sub	sp, #88	@ 0x58
 80094d4:	4615      	mov	r5, r2
 80094d6:	461e      	mov	r6, r3
 80094d8:	da0d      	bge.n	80094f6 <__swhatbuf_r+0x2e>
 80094da:	89a3      	ldrh	r3, [r4, #12]
 80094dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80094e0:	f04f 0100 	mov.w	r1, #0
 80094e4:	bf14      	ite	ne
 80094e6:	2340      	movne	r3, #64	@ 0x40
 80094e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80094ec:	2000      	movs	r0, #0
 80094ee:	6031      	str	r1, [r6, #0]
 80094f0:	602b      	str	r3, [r5, #0]
 80094f2:	b016      	add	sp, #88	@ 0x58
 80094f4:	bd70      	pop	{r4, r5, r6, pc}
 80094f6:	466a      	mov	r2, sp
 80094f8:	f000 f848 	bl	800958c <_fstat_r>
 80094fc:	2800      	cmp	r0, #0
 80094fe:	dbec      	blt.n	80094da <__swhatbuf_r+0x12>
 8009500:	9901      	ldr	r1, [sp, #4]
 8009502:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009506:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800950a:	4259      	negs	r1, r3
 800950c:	4159      	adcs	r1, r3
 800950e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009512:	e7eb      	b.n	80094ec <__swhatbuf_r+0x24>

08009514 <__smakebuf_r>:
 8009514:	898b      	ldrh	r3, [r1, #12]
 8009516:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009518:	079d      	lsls	r5, r3, #30
 800951a:	4606      	mov	r6, r0
 800951c:	460c      	mov	r4, r1
 800951e:	d507      	bpl.n	8009530 <__smakebuf_r+0x1c>
 8009520:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009524:	6023      	str	r3, [r4, #0]
 8009526:	6123      	str	r3, [r4, #16]
 8009528:	2301      	movs	r3, #1
 800952a:	6163      	str	r3, [r4, #20]
 800952c:	b003      	add	sp, #12
 800952e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009530:	ab01      	add	r3, sp, #4
 8009532:	466a      	mov	r2, sp
 8009534:	f7ff ffc8 	bl	80094c8 <__swhatbuf_r>
 8009538:	9f00      	ldr	r7, [sp, #0]
 800953a:	4605      	mov	r5, r0
 800953c:	4639      	mov	r1, r7
 800953e:	4630      	mov	r0, r6
 8009540:	f7ff fb18 	bl	8008b74 <_malloc_r>
 8009544:	b948      	cbnz	r0, 800955a <__smakebuf_r+0x46>
 8009546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800954a:	059a      	lsls	r2, r3, #22
 800954c:	d4ee      	bmi.n	800952c <__smakebuf_r+0x18>
 800954e:	f023 0303 	bic.w	r3, r3, #3
 8009552:	f043 0302 	orr.w	r3, r3, #2
 8009556:	81a3      	strh	r3, [r4, #12]
 8009558:	e7e2      	b.n	8009520 <__smakebuf_r+0xc>
 800955a:	89a3      	ldrh	r3, [r4, #12]
 800955c:	6020      	str	r0, [r4, #0]
 800955e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009562:	81a3      	strh	r3, [r4, #12]
 8009564:	9b01      	ldr	r3, [sp, #4]
 8009566:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800956a:	b15b      	cbz	r3, 8009584 <__smakebuf_r+0x70>
 800956c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009570:	4630      	mov	r0, r6
 8009572:	f000 f81d 	bl	80095b0 <_isatty_r>
 8009576:	b128      	cbz	r0, 8009584 <__smakebuf_r+0x70>
 8009578:	89a3      	ldrh	r3, [r4, #12]
 800957a:	f023 0303 	bic.w	r3, r3, #3
 800957e:	f043 0301 	orr.w	r3, r3, #1
 8009582:	81a3      	strh	r3, [r4, #12]
 8009584:	89a3      	ldrh	r3, [r4, #12]
 8009586:	431d      	orrs	r5, r3
 8009588:	81a5      	strh	r5, [r4, #12]
 800958a:	e7cf      	b.n	800952c <__smakebuf_r+0x18>

0800958c <_fstat_r>:
 800958c:	b538      	push	{r3, r4, r5, lr}
 800958e:	4d07      	ldr	r5, [pc, #28]	@ (80095ac <_fstat_r+0x20>)
 8009590:	2300      	movs	r3, #0
 8009592:	4604      	mov	r4, r0
 8009594:	4608      	mov	r0, r1
 8009596:	4611      	mov	r1, r2
 8009598:	602b      	str	r3, [r5, #0]
 800959a:	f7f8 fe3c 	bl	8002216 <_fstat>
 800959e:	1c43      	adds	r3, r0, #1
 80095a0:	d102      	bne.n	80095a8 <_fstat_r+0x1c>
 80095a2:	682b      	ldr	r3, [r5, #0]
 80095a4:	b103      	cbz	r3, 80095a8 <_fstat_r+0x1c>
 80095a6:	6023      	str	r3, [r4, #0]
 80095a8:	bd38      	pop	{r3, r4, r5, pc}
 80095aa:	bf00      	nop
 80095ac:	24000324 	.word	0x24000324

080095b0 <_isatty_r>:
 80095b0:	b538      	push	{r3, r4, r5, lr}
 80095b2:	4d06      	ldr	r5, [pc, #24]	@ (80095cc <_isatty_r+0x1c>)
 80095b4:	2300      	movs	r3, #0
 80095b6:	4604      	mov	r4, r0
 80095b8:	4608      	mov	r0, r1
 80095ba:	602b      	str	r3, [r5, #0]
 80095bc:	f7f8 fe3b 	bl	8002236 <_isatty>
 80095c0:	1c43      	adds	r3, r0, #1
 80095c2:	d102      	bne.n	80095ca <_isatty_r+0x1a>
 80095c4:	682b      	ldr	r3, [r5, #0]
 80095c6:	b103      	cbz	r3, 80095ca <_isatty_r+0x1a>
 80095c8:	6023      	str	r3, [r4, #0]
 80095ca:	bd38      	pop	{r3, r4, r5, pc}
 80095cc:	24000324 	.word	0x24000324

080095d0 <_init>:
 80095d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095d2:	bf00      	nop
 80095d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095d6:	bc08      	pop	{r3}
 80095d8:	469e      	mov	lr, r3
 80095da:	4770      	bx	lr

080095dc <_fini>:
 80095dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095de:	bf00      	nop
 80095e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095e2:	bc08      	pop	{r3}
 80095e4:	469e      	mov	lr, r3
 80095e6:	4770      	bx	lr
