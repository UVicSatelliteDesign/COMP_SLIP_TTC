
STM_to_CC1201.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bb4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08007e54  08007e54  00008e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080080ac  080080ac  000090ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080080b4  080080b4  000090b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080080b8  080080b8  000090b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  24000000  080080bc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002ac  24000088  08008144  0000a088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000334  08008144  0000a334  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a088  2**0
                  CONTENTS, READONLY
 10 .debug_info   000154b2  00000000  00000000  0000a0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c43  00000000  00000000  0001f568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ec8  00000000  00000000  000221b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b48  00000000  00000000  00023078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000384e5  00000000  00000000  00023bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015d7c  00000000  00000000  0005c0a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015ed1d  00000000  00000000  00071e21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d0b3e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000443c  00000000  00000000  001d0b84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000051  00000000  00000000  001d4fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007e3c 	.word	0x08007e3c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	08007e3c 	.word	0x08007e3c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <CC1201_Nop>:
{
    return CC1201_SendStrobe(CC1201_STROBE_WOR_RESET, status_byte);
}

HAL_StatusTypeDef CC1201_Nop(uint8_t *status_byte)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    printf("[DEBUG] Entered CC1201_Nop function\n\r");
 80006b4:	4809      	ldr	r0, [pc, #36]	@ (80006dc <CC1201_Nop+0x30>)
 80006b6:	f006 fd55 	bl	8007164 <iprintf>
    HAL_StatusTypeDef result = CC1201_SendStrobe(CC1201_STROBE_NOP, status_byte);
 80006ba:	6879      	ldr	r1, [r7, #4]
 80006bc:	203d      	movs	r0, #61	@ 0x3d
 80006be:	f000 f87b 	bl	80007b8 <CC1201_SendStrobe>
 80006c2:	4603      	mov	r3, r0
 80006c4:	73fb      	strb	r3, [r7, #15]
    printf("[DEBUG] CC1201_Nop about to return: %d\n\r", result);
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	4619      	mov	r1, r3
 80006ca:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <CC1201_Nop+0x34>)
 80006cc:	f006 fd4a 	bl	8007164 <iprintf>
    return result;
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	08007eb0 	.word	0x08007eb0
 80006e0:	08007ed8 	.word	0x08007ed8

080006e4 <CC1201_ReadStatus>:
 * @param reg_addr The address of the register to read. The read bit (MSB) will be set internally.
 * @param read_data Pointer to a uint8_t where the read data will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadStatus(uint16_t reg_addr, uint8_t *read_data)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af02      	add	r7, sp, #8
 80006ea:	4603      	mov	r3, r0
 80006ec:	6039      	str	r1, [r7, #0]
 80006ee:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[4];
    uint8_t rx_buffer[4];
    uint8_t buffer_size;

    if (reg_addr > 0xFF) {
 80006f0:	88fb      	ldrh	r3, [r7, #6]
 80006f2:	2bff      	cmp	r3, #255	@ 0xff
 80006f4:	d909      	bls.n	800070a <CC1201_ReadStatus+0x26>
        // Extended register (burst access)
        tx_buffer[0] = 0x2F; // Extended register access command
 80006f6:	232f      	movs	r3, #47	@ 0x2f
 80006f8:	743b      	strb	r3, [r7, #16]
        tx_buffer[1] = (uint8_t)(reg_addr & 0xFF); // Low byte of address
 80006fa:	88fb      	ldrh	r3, [r7, #6]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	747b      	strb	r3, [r7, #17]
        tx_buffer[2] = 0x00; // Dummy byte for reading
 8000700:	2300      	movs	r3, #0
 8000702:	74bb      	strb	r3, [r7, #18]
        buffer_size = 3;
 8000704:	2303      	movs	r3, #3
 8000706:	75fb      	strb	r3, [r7, #23]
 8000708:	e009      	b.n	800071e <CC1201_ReadStatus+0x3a>
    } else {
        // Standard register
        tx_buffer[0] = (uint8_t)reg_addr | CC1201_READ_BIT;
 800070a:	88fb      	ldrh	r3, [r7, #6]
 800070c:	b2db      	uxtb	r3, r3
 800070e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000712:	b2db      	uxtb	r3, r3
 8000714:	743b      	strb	r3, [r7, #16]
        tx_buffer[1] = 0x00; // Dummy byte for reading
 8000716:	2300      	movs	r3, #0
 8000718:	747b      	strb	r3, [r7, #17]
        buffer_size = 2;
 800071a:	2302      	movs	r3, #2
 800071c:	75fb      	strb	r3, [r7, #23]
    }

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 800071e:	2200      	movs	r2, #0
 8000720:	2110      	movs	r1, #16
 8000722:	4815      	ldr	r0, [pc, #84]	@ (8000778 <CC1201_ReadStatus+0x94>)
 8000724:	f001 fdf0 	bl	8002308 <HAL_GPIO_WritePin>

    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, tx_buffer, rx_buffer, buffer_size, HAL_MAX_DELAY);
 8000728:	7dfb      	ldrb	r3, [r7, #23]
 800072a:	b29b      	uxth	r3, r3
 800072c:	f107 020c 	add.w	r2, r7, #12
 8000730:	f107 0110 	add.w	r1, r7, #16
 8000734:	f04f 30ff 	mov.w	r0, #4294967295
 8000738:	9000      	str	r0, [sp, #0]
 800073a:	4810      	ldr	r0, [pc, #64]	@ (800077c <CC1201_ReadStatus+0x98>)
 800073c:	f004 fda2 	bl	8005284 <HAL_SPI_TransmitReceive>
 8000740:	4603      	mov	r3, r0
 8000742:	75bb      	strb	r3, [r7, #22]

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 8000744:	2201      	movs	r2, #1
 8000746:	2110      	movs	r1, #16
 8000748:	480b      	ldr	r0, [pc, #44]	@ (8000778 <CC1201_ReadStatus+0x94>)
 800074a:	f001 fddd 	bl	8002308 <HAL_GPIO_WritePin>

    if (status == HAL_OK) {
 800074e:	7dbb      	ldrb	r3, [r7, #22]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d10c      	bne.n	800076e <CC1201_ReadStatus+0x8a>
        if (read_data != NULL) {
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d009      	beq.n	800076e <CC1201_ReadStatus+0x8a>
            if (reg_addr > 0xFF) {
 800075a:	88fb      	ldrh	r3, [r7, #6]
 800075c:	2bff      	cmp	r3, #255	@ 0xff
 800075e:	d903      	bls.n	8000768 <CC1201_ReadStatus+0x84>
                *read_data = rx_buffer[2]; // Extended register data
 8000760:	7bba      	ldrb	r2, [r7, #14]
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	701a      	strb	r2, [r3, #0]
 8000766:	e002      	b.n	800076e <CC1201_ReadStatus+0x8a>
            } else {
                *read_data = rx_buffer[1]; // Standard register data
 8000768:	7b7a      	ldrb	r2, [r7, #13]
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return status;
 800076e:	7dbb      	ldrb	r3, [r7, #22]
}
 8000770:	4618      	mov	r0, r3
 8000772:	3718      	adds	r7, #24
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	58021000 	.word	0x58021000
 800077c:	240000b8 	.word	0x240000b8

08000780 <CC1201_ReadMARCState>:
 *
 * @param marc_state Pointer to a uint8_t where the MARCSTATE value will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadMARCState(uint8_t *marc_state)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_MARCSTATE, marc_state);
 8000788:	6879      	ldr	r1, [r7, #4]
 800078a:	f642 7073 	movw	r0, #12147	@ 0x2f73
 800078e:	f7ff ffa9 	bl	80006e4 <CC1201_ReadStatus>
 8000792:	4603      	mov	r3, r0
}
 8000794:	4618      	mov	r0, r3
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <CC1201_GetNumRXBytes>:
 *
 * @param num_bytes Pointer to a uint8_t where the number of RX bytes will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_GetNumRXBytes(uint8_t *num_bytes)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_NUM_RXBYTES, num_bytes);
 80007a4:	6879      	ldr	r1, [r7, #4]
 80007a6:	f642 707a 	movw	r0, #12154	@ 0x2f7a
 80007aa:	f7ff ff9b 	bl	80006e4 <CC1201_ReadStatus>
 80007ae:	4603      	mov	r3, r0
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <CC1201_SendStrobe>:
 * @param status_byte Pointer to a uint8_t where the status byte received from the CC1201 will be stored.
 *                    Can be NULL if the status byte is not needed.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_SendStrobe(uint8_t strobe_command, uint8_t *status_byte)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af02      	add	r7, sp, #8
 80007be:	4603      	mov	r3, r0
 80007c0:	6039      	str	r1, [r7, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;
    uint8_t rx_data;

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 80007c4:	2200      	movs	r2, #0
 80007c6:	2110      	movs	r1, #16
 80007c8:	4812      	ldr	r0, [pc, #72]	@ (8000814 <CC1201_SendStrobe+0x5c>)
 80007ca:	f001 fd9d 	bl	8002308 <HAL_GPIO_WritePin>
    
    // Small delay to ensure CS is stable
    HAL_Delay(1);
 80007ce:	2001      	movs	r0, #1
 80007d0:	f000 ff88 	bl	80016e4 <HAL_Delay>

    // Perform SPI transaction
    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, &strobe_command, &rx_data, 1, 1000);
 80007d4:	f107 020e 	add.w	r2, r7, #14
 80007d8:	1df9      	adds	r1, r7, #7
 80007da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	2301      	movs	r3, #1
 80007e2:	480d      	ldr	r0, [pc, #52]	@ (8000818 <CC1201_SendStrobe+0x60>)
 80007e4:	f004 fd4e 	bl	8005284 <HAL_SPI_TransmitReceive>
 80007e8:	4603      	mov	r3, r0
 80007ea:	73fb      	strb	r3, [r7, #15]
    
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 80007ec:	2201      	movs	r2, #1
 80007ee:	2110      	movs	r1, #16
 80007f0:	4808      	ldr	r0, [pc, #32]	@ (8000814 <CC1201_SendStrobe+0x5c>)
 80007f2:	f001 fd89 	bl	8002308 <HAL_GPIO_WritePin>
    
    if (status == HAL_OK) {
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d105      	bne.n	8000808 <CC1201_SendStrobe+0x50>
        if (status_byte != NULL) {
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d002      	beq.n	8000808 <CC1201_SendStrobe+0x50>
            *status_byte = rx_data;
 8000802:	7bba      	ldrb	r2, [r7, #14]
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	701a      	strb	r2, [r3, #0]
        }
    }
    return status;
 8000808:	7bfb      	ldrb	r3, [r7, #15]
}
 800080a:	4618      	mov	r0, r3
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	58021000 	.word	0x58021000
 8000818:	240000b8 	.word	0x240000b8

0800081c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000822:	f000 f9d7 	bl	8000bd4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000826:	f000 fecb 	bl	80015c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800082a:	f000 f867 	bl	80008fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800082e:	f000 f927 	bl	8000a80 <MX_GPIO_Init>
  MX_SPI4_Init();
 8000832:	f000 f8cf 	bl	80009d4 <MX_SPI4_Init>
  // Basic hardware initialization completed

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000836:	2000      	movs	r0, #0
 8000838:	f000 fc6c 	bl	8001114 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 800083c:	2001      	movs	r0, #1
 800083e:	f000 fc69 	bl	8001114 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000842:	2002      	movs	r0, #2
 8000844:	f000 fc66 	bl	8001114 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000848:	2101      	movs	r1, #1
 800084a:	2000      	movs	r0, #0
 800084c:	f000 fd56 	bl	80012fc <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000850:	4b24      	ldr	r3, [pc, #144]	@ (80008e4 <main+0xc8>)
 8000852:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000856:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000858:	4b22      	ldr	r3, [pc, #136]	@ (80008e4 <main+0xc8>)
 800085a:	2200      	movs	r2, #0
 800085c:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800085e:	4b21      	ldr	r3, [pc, #132]	@ (80008e4 <main+0xc8>)
 8000860:	2200      	movs	r2, #0
 8000862:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000864:	4b1f      	ldr	r3, [pc, #124]	@ (80008e4 <main+0xc8>)
 8000866:	2200      	movs	r2, #0
 8000868:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800086a:	4b1e      	ldr	r3, [pc, #120]	@ (80008e4 <main+0xc8>)
 800086c:	2200      	movs	r2, #0
 800086e:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000870:	491c      	ldr	r1, [pc, #112]	@ (80008e4 <main+0xc8>)
 8000872:	2000      	movs	r0, #0
 8000874:	f000 fdc6 	bl	8001404 <BSP_COM_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <main+0x66>
  {
    Error_Handler();
 800087e:	f000 f9e9 	bl	8000c54 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8000882:	4819      	ldr	r0, [pc, #100]	@ (80008e8 <main+0xcc>)
 8000884:	f006 fc6e 	bl	8007164 <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8000888:	2000      	movs	r0, #0
 800088a:	f000 fcb9 	bl	8001200 <BSP_LED_On>
  
  // Now that UART is initialized, start CC1201 testing
  printf("\n=== CC1201 COMMUNICATION SYSTEM STARTUP ===\n\r");
 800088e:	4817      	ldr	r0, [pc, #92]	@ (80008ec <main+0xd0>)
 8000890:	f006 fc68 	bl	8007164 <iprintf>

  uint8_t test_status = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef nop_result = CC1201_Nop(&test_status);
 8000898:	1dbb      	adds	r3, r7, #6
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff ff06 	bl	80006ac <CC1201_Nop>
 80008a0:	4603      	mov	r3, r0
 80008a2:	71fb      	strb	r3, [r7, #7]
  
  printf("NOP returned - HAL: %d, Status: 0x%02X\n\r", nop_result, test_status);
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	79ba      	ldrb	r2, [r7, #6]
 80008a8:	4619      	mov	r1, r3
 80008aa:	4811      	ldr	r0, [pc, #68]	@ (80008f0 <main+0xd4>)
 80008ac:	f006 fc5a 	bl	8007164 <iprintf>
  
  if (nop_result == HAL_OK) {
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d109      	bne.n	80008ca <main+0xae>
      printf("Basic CC1201 communication working!\n\r");
 80008b6:	480f      	ldr	r0, [pc, #60]	@ (80008f4 <main+0xd8>)
 80008b8:	f006 fc54 	bl	8007164 <iprintf>
      BSP_LED_Off(LED_RED);
 80008bc:	2002      	movs	r0, #2
 80008be:	f000 fcc9 	bl	8001254 <BSP_LED_Off>
      BSP_LED_On(LED_GREEN);
 80008c2:	2000      	movs	r0, #0
 80008c4:	f000 fc9c 	bl	8001200 <BSP_LED_On>
 80008c8:	e009      	b.n	80008de <main+0xc2>
  } else {
      printf("CC1201 communication failed!\n\r");
 80008ca:	480b      	ldr	r0, [pc, #44]	@ (80008f8 <main+0xdc>)
 80008cc:	f006 fc4a 	bl	8007164 <iprintf>
      BSP_LED_Off(LED_GREEN);
 80008d0:	2000      	movs	r0, #0
 80008d2:	f000 fcbf 	bl	8001254 <BSP_LED_Off>
      BSP_LED_On(LED_RED);
 80008d6:	2002      	movs	r0, #2
 80008d8:	f000 fc92 	bl	8001200 <BSP_LED_On>
  }

  /* USER CODE END BSP */
    /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008dc:	bf00      	nop
 80008de:	bf00      	nop
 80008e0:	e7fd      	b.n	80008de <main+0xc2>
 80008e2:	bf00      	nop
 80008e4:	240000a4 	.word	0x240000a4
 80008e8:	08007f04 	.word	0x08007f04
 80008ec:	08007f20 	.word	0x08007f20
 80008f0:	08007f50 	.word	0x08007f50
 80008f4:	08007f7c 	.word	0x08007f7c
 80008f8:	08007fa4 	.word	0x08007fa4

080008fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b09c      	sub	sp, #112	@ 0x70
 8000900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000902:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000906:	224c      	movs	r2, #76	@ 0x4c
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f006 fc7f 	bl	800720e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	2220      	movs	r2, #32
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f006 fc79 	bl	800720e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800091c:	2002      	movs	r0, #2
 800091e:	f001 fd41 	bl	80023a4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000922:	2300      	movs	r3, #0
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	4b29      	ldr	r3, [pc, #164]	@ (80009cc <SystemClock_Config+0xd0>)
 8000928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800092a:	4a28      	ldr	r2, [pc, #160]	@ (80009cc <SystemClock_Config+0xd0>)
 800092c:	f023 0301 	bic.w	r3, r3, #1
 8000930:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000932:	4b26      	ldr	r3, [pc, #152]	@ (80009cc <SystemClock_Config+0xd0>)
 8000934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	4b24      	ldr	r3, [pc, #144]	@ (80009d0 <SystemClock_Config+0xd4>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000944:	4a22      	ldr	r2, [pc, #136]	@ (80009d0 <SystemClock_Config+0xd4>)
 8000946:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	4b20      	ldr	r3, [pc, #128]	@ (80009d0 <SystemClock_Config+0xd4>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000958:	bf00      	nop
 800095a:	4b1d      	ldr	r3, [pc, #116]	@ (80009d0 <SystemClock_Config+0xd4>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000962:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000966:	d1f8      	bne.n	800095a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000968:	2302      	movs	r3, #2
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800096c:	2301      	movs	r3, #1
 800096e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000970:	2340      	movs	r3, #64	@ 0x40
 8000972:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000974:	2300      	movs	r3, #0
 8000976:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000978:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800097c:	4618      	mov	r0, r3
 800097e:	f001 fd4b 	bl	8002418 <HAL_RCC_OscConfig>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000988:	f000 f964 	bl	8000c54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098c:	233f      	movs	r3, #63	@ 0x3f
 800098e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000990:	2300      	movs	r3, #0
 8000992:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000998:	2300      	movs	r3, #0
 800099a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009a8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	2101      	movs	r1, #1
 80009b2:	4618      	mov	r0, r3
 80009b4:	f002 f98a 	bl	8002ccc <HAL_RCC_ClockConfig>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80009be:	f000 f949 	bl	8000c54 <Error_Handler>
  }
}
 80009c2:	bf00      	nop
 80009c4:	3770      	adds	r7, #112	@ 0x70
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	58000400 	.word	0x58000400
 80009d0:	58024800 	.word	0x58024800

080009d4 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80009d8:	4b27      	ldr	r3, [pc, #156]	@ (8000a78 <MX_SPI4_Init+0xa4>)
 80009da:	4a28      	ldr	r2, [pc, #160]	@ (8000a7c <MX_SPI4_Init+0xa8>)
 80009dc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80009de:	4b26      	ldr	r3, [pc, #152]	@ (8000a78 <MX_SPI4_Init+0xa4>)
 80009e0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80009e4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80009e6:	4b24      	ldr	r3, [pc, #144]	@ (8000a78 <MX_SPI4_Init+0xa4>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 80009ec:	4b22      	ldr	r3, [pc, #136]	@ (8000a78 <MX_SPI4_Init+0xa4>)
 80009ee:	2203      	movs	r2, #3
 80009f0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009f2:	4b21      	ldr	r3, [pc, #132]	@ (8000a78 <MX_SPI4_Init+0xa4>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a78 <MX_SPI4_Init+0xa4>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80009fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000a78 <MX_SPI4_Init+0xa4>)
 8000a00:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000a04:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a06:	4b1c      	ldr	r3, [pc, #112]	@ (8000a78 <MX_SPI4_Init+0xa4>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a78 <MX_SPI4_Init+0xa4>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a12:	4b19      	ldr	r3, [pc, #100]	@ (8000a78 <MX_SPI4_Init+0xa4>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a18:	4b17      	ldr	r3, [pc, #92]	@ (8000a78 <MX_SPI4_Init+0xa4>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000a1e:	4b16      	ldr	r3, [pc, #88]	@ (8000a78 <MX_SPI4_Init+0xa4>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a24:	4b14      	ldr	r3, [pc, #80]	@ (8000a78 <MX_SPI4_Init+0xa4>)
 8000a26:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a2a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <MX_SPI4_Init+0xa4>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a32:	4b11      	ldr	r3, [pc, #68]	@ (8000a78 <MX_SPI4_Init+0xa4>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	@ (8000a78 <MX_SPI4_Init+0xa4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a78 <MX_SPI4_Init+0xa4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	@ (8000a78 <MX_SPI4_Init+0xa4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a78 <MX_SPI4_Init+0xa4>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a50:	4b09      	ldr	r3, [pc, #36]	@ (8000a78 <MX_SPI4_Init+0xa4>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a56:	4b08      	ldr	r3, [pc, #32]	@ (8000a78 <MX_SPI4_Init+0xa4>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <MX_SPI4_Init+0xa4>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000a62:	4805      	ldr	r0, [pc, #20]	@ (8000a78 <MX_SPI4_Init+0xa4>)
 8000a64:	f004 faea 	bl	800503c <HAL_SPI_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000a6e:	f000 f8f1 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	240000b8 	.word	0x240000b8
 8000a7c:	40013400 	.word	0x40013400

08000a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08a      	sub	sp, #40	@ 0x28
 8000a84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
 8000a94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a96:	4b2e      	ldr	r3, [pc, #184]	@ (8000b50 <MX_GPIO_Init+0xd0>)
 8000a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a9c:	4a2c      	ldr	r2, [pc, #176]	@ (8000b50 <MX_GPIO_Init+0xd0>)
 8000a9e:	f043 0304 	orr.w	r3, r3, #4
 8000aa2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aa6:	4b2a      	ldr	r3, [pc, #168]	@ (8000b50 <MX_GPIO_Init+0xd0>)
 8000aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aac:	f003 0304 	and.w	r3, r3, #4
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ab4:	4b26      	ldr	r3, [pc, #152]	@ (8000b50 <MX_GPIO_Init+0xd0>)
 8000ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aba:	4a25      	ldr	r2, [pc, #148]	@ (8000b50 <MX_GPIO_Init+0xd0>)
 8000abc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ac4:	4b22      	ldr	r3, [pc, #136]	@ (8000b50 <MX_GPIO_Init+0xd0>)
 8000ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ad2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b50 <MX_GPIO_Init+0xd0>)
 8000ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad8:	4a1d      	ldr	r2, [pc, #116]	@ (8000b50 <MX_GPIO_Init+0xd0>)
 8000ada:	f043 0310 	orr.w	r3, r3, #16
 8000ade:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b50 <MX_GPIO_Init+0xd0>)
 8000ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae8:	f003 0310 	and.w	r3, r3, #16
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af0:	4b17      	ldr	r3, [pc, #92]	@ (8000b50 <MX_GPIO_Init+0xd0>)
 8000af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af6:	4a16      	ldr	r2, [pc, #88]	@ (8000b50 <MX_GPIO_Init+0xd0>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b00:	4b13      	ldr	r3, [pc, #76]	@ (8000b50 <MX_GPIO_Init+0xd0>)
 8000b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b0e:	4b10      	ldr	r3, [pc, #64]	@ (8000b50 <MX_GPIO_Init+0xd0>)
 8000b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b14:	4a0e      	ldr	r2, [pc, #56]	@ (8000b50 <MX_GPIO_Init+0xd0>)
 8000b16:	f043 0308 	orr.w	r3, r3, #8
 8000b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b50 <MX_GPIO_Init+0xd0>)
 8000b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b24:	f003 0308 	and.w	r3, r3, #8
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b2c:	2320      	movs	r3, #32
 8000b2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b30:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4804      	ldr	r0, [pc, #16]	@ (8000b54 <MX_GPIO_Init+0xd4>)
 8000b42:	f001 fa31 	bl	8001fa8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b46:	bf00      	nop
 8000b48:	3728      	adds	r7, #40	@ 0x28
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	58024400 	.word	0x58024400
 8000b54:	58020c00 	.word	0x58020c00

08000b58 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_5)
 8000b62:	88fb      	ldrh	r3, [r7, #6]
 8000b64:	2b20      	cmp	r3, #32
 8000b66:	d129      	bne.n	8000bbc <HAL_GPIO_EXTI_Callback+0x64>
    {
        // Handle CC1201 interrupt
        printf("CC1201 Interrupt Triggered!\n\r");
 8000b68:	4816      	ldr	r0, [pc, #88]	@ (8000bc4 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000b6a:	f006 fafb 	bl	8007164 <iprintf>
        
        // Read MARC state to see what caused the interrupt
        uint8_t marc_state = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	73fb      	strb	r3, [r7, #15]
        if (CC1201_ReadMARCState(&marc_state) == HAL_OK) {
 8000b72:	f107 030f 	add.w	r3, r7, #15
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fe02 	bl	8000780 <CC1201_ReadMARCState>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d104      	bne.n	8000b8c <HAL_GPIO_EXTI_Callback+0x34>
            printf("MARC State during interrupt: 0x%02X\n\r", marc_state);
 8000b82:	7bfb      	ldrb	r3, [r7, #15]
 8000b84:	4619      	mov	r1, r3
 8000b86:	4810      	ldr	r0, [pc, #64]	@ (8000bc8 <HAL_GPIO_EXTI_Callback+0x70>)
 8000b88:	f006 faec 	bl	8007164 <iprintf>
        }
        
        // Check if there are bytes in RX FIFO
        uint8_t rx_bytes = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	73bb      	strb	r3, [r7, #14]
        if (CC1201_GetNumRXBytes(&rx_bytes) == HAL_OK) {
 8000b90:	f107 030e 	add.w	r3, r7, #14
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fe01 	bl	800079c <CC1201_GetNumRXBytes>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d10a      	bne.n	8000bb6 <HAL_GPIO_EXTI_Callback+0x5e>
            printf("RX Bytes available: %d\n\r", rx_bytes);
 8000ba0:	7bbb      	ldrb	r3, [r7, #14]
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4809      	ldr	r0, [pc, #36]	@ (8000bcc <HAL_GPIO_EXTI_Callback+0x74>)
 8000ba6:	f006 fadd 	bl	8007164 <iprintf>
            if (rx_bytes > 0) {
 8000baa:	7bbb      	ldrb	r3, [r7, #14]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d002      	beq.n	8000bb6 <HAL_GPIO_EXTI_Callback+0x5e>
                // Could read FIFO data here if needed
                printf("Data received in RX FIFO!\n\r");
 8000bb0:	4807      	ldr	r0, [pc, #28]	@ (8000bd0 <HAL_GPIO_EXTI_Callback+0x78>)
 8000bb2:	f006 fad7 	bl	8007164 <iprintf>
            }
        }
        
        // Toggle LED to indicate interrupt
        BSP_LED_Toggle(LED_GREEN);
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f000 fb76 	bl	80012a8 <BSP_LED_Toggle>
    }
}
 8000bbc:	bf00      	nop
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	08007fc4 	.word	0x08007fc4
 8000bc8:	08007fe4 	.word	0x08007fe4
 8000bcc:	0800800c 	.word	0x0800800c
 8000bd0:	08008028 	.word	0x08008028

08000bd4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000bda:	463b      	mov	r3, r7
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000be6:	f000 febd 	bl	8001964 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000bea:	2301      	movs	r3, #1
 8000bec:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000bf6:	231f      	movs	r3, #31
 8000bf8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000bfa:	2387      	movs	r3, #135	@ 0x87
 8000bfc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000c02:	2300      	movs	r3, #0
 8000c04:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000c06:	2301      	movs	r3, #1
 8000c08:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c16:	463b      	mov	r3, r7
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 fedb 	bl	80019d4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c1e:	2004      	movs	r0, #4
 8000c20:	f000 feb8 	bl	8001994 <HAL_MPU_Enable>

}
 8000c24:	bf00      	nop
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d102      	bne.n	8000c42 <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8000c3c:	4b04      	ldr	r3, [pc, #16]	@ (8000c50 <BSP_PB_Callback+0x24>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	601a      	str	r2, [r3, #0]
  }
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	240000b4 	.word	0x240000b4

08000c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c58:	b672      	cpsid	i
}
 8000c5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <Error_Handler+0x8>

08000c60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c66:	4b0a      	ldr	r3, [pc, #40]	@ (8000c90 <HAL_MspInit+0x30>)
 8000c68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c6c:	4a08      	ldr	r2, [pc, #32]	@ (8000c90 <HAL_MspInit+0x30>)
 8000c6e:	f043 0302 	orr.w	r3, r3, #2
 8000c72:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c76:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <HAL_MspInit+0x30>)
 8000c78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c7c:	f003 0302 	and.w	r3, r3, #2
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	58024400 	.word	0x58024400

08000c94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b0ba      	sub	sp, #232	@ 0xe8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cac:	f107 0310 	add.w	r3, r7, #16
 8000cb0:	22c0      	movs	r2, #192	@ 0xc0
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f006 faaa 	bl	800720e <memset>
  if(hspi->Instance==SPI4)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a2a      	ldr	r2, [pc, #168]	@ (8000d68 <HAL_SPI_MspInit+0xd4>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d14d      	bne.n	8000d60 <HAL_SPI_MspInit+0xcc>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8000cc4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cc8:	f04f 0300 	mov.w	r3, #0
 8000ccc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cd4:	f107 0310 	add.w	r3, r7, #16
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f002 fb83 	bl	80033e4 <HAL_RCCEx_PeriphCLKConfig>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000ce4:	f7ff ffb6 	bl	8000c54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000ce8:	4b20      	ldr	r3, [pc, #128]	@ (8000d6c <HAL_SPI_MspInit+0xd8>)
 8000cea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000cee:	4a1f      	ldr	r2, [pc, #124]	@ (8000d6c <HAL_SPI_MspInit+0xd8>)
 8000cf0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000cf4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000cf8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d6c <HAL_SPI_MspInit+0xd8>)
 8000cfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000cfe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d06:	4b19      	ldr	r3, [pc, #100]	@ (8000d6c <HAL_SPI_MspInit+0xd8>)
 8000d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d0c:	4a17      	ldr	r2, [pc, #92]	@ (8000d6c <HAL_SPI_MspInit+0xd8>)
 8000d0e:	f043 0310 	orr.w	r3, r3, #16
 8000d12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d16:	4b15      	ldr	r3, [pc, #84]	@ (8000d6c <HAL_SPI_MspInit+0xd8>)
 8000d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d1c:	f003 0310 	and.w	r3, r3, #16
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	68bb      	ldr	r3, [r7, #8]
    PE11     ------> SPI4_NSS
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000d24:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8000d28:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000d3e:	2305      	movs	r3, #5
 8000d40:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d44:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4809      	ldr	r0, [pc, #36]	@ (8000d70 <HAL_SPI_MspInit+0xdc>)
 8000d4c:	f001 f92c 	bl	8001fa8 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8000d50:	2200      	movs	r2, #0
 8000d52:	2100      	movs	r1, #0
 8000d54:	2054      	movs	r0, #84	@ 0x54
 8000d56:	f000 fdd0 	bl	80018fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8000d5a:	2054      	movs	r0, #84	@ 0x54
 8000d5c:	f000 fde7 	bl	800192e <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI4_MspInit 1 */

  }

}
 8000d60:	bf00      	nop
 8000d62:	37e8      	adds	r7, #232	@ 0xe8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40013400 	.word	0x40013400
 8000d6c:	58024400 	.word	0x58024400
 8000d70:	58021000 	.word	0x58021000

08000d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <NMI_Handler+0x4>

08000d7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <HardFault_Handler+0x4>

08000d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <MemManage_Handler+0x4>

08000d8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <BusFault_Handler+0x4>

08000d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <UsageFault_Handler+0x4>

08000d9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dca:	f000 fc6b 	bl	80016a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000dd6:	2020      	movs	r0, #32
 8000dd8:	f001 fac9 	bl	800236e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000de4:	2000      	movs	r0, #0
 8000de6:	f000 fafb 	bl	80013e0 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8000df4:	4802      	ldr	r0, [pc, #8]	@ (8000e00 <SPI4_IRQHandler+0x10>)
 8000df6:	f004 fd7f 	bl	80058f8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	240000b8 	.word	0x240000b8

08000e04 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	e00a      	b.n	8000e2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e16:	f3af 8000 	nop.w
 8000e1a:	4601      	mov	r1, r0
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	1c5a      	adds	r2, r3, #1
 8000e20:	60ba      	str	r2, [r7, #8]
 8000e22:	b2ca      	uxtb	r2, r1
 8000e24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	697a      	ldr	r2, [r7, #20]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	dbf0      	blt.n	8000e16 <_read+0x12>
  }

  return len;
 8000e34:	687b      	ldr	r3, [r7, #4]
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b086      	sub	sp, #24
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	60f8      	str	r0, [r7, #12]
 8000e46:	60b9      	str	r1, [r7, #8]
 8000e48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
 8000e4e:	e009      	b.n	8000e64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	1c5a      	adds	r2, r3, #1
 8000e54:	60ba      	str	r2, [r7, #8]
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 fb35 	bl	80014c8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	3301      	adds	r3, #1
 8000e62:	617b      	str	r3, [r7, #20]
 8000e64:	697a      	ldr	r2, [r7, #20]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	dbf1      	blt.n	8000e50 <_write+0x12>
  }
  return len;
 8000e6c:	687b      	ldr	r3, [r7, #4]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <_close>:

int _close(int file)
{
 8000e76:	b480      	push	{r7}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b083      	sub	sp, #12
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
 8000e96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e9e:	605a      	str	r2, [r3, #4]
  return 0;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <_isatty>:

int _isatty(int file)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000eb6:	2301      	movs	r3, #1
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
	...

08000ee0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee8:	4a14      	ldr	r2, [pc, #80]	@ (8000f3c <_sbrk+0x5c>)
 8000eea:	4b15      	ldr	r3, [pc, #84]	@ (8000f40 <_sbrk+0x60>)
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef4:	4b13      	ldr	r3, [pc, #76]	@ (8000f44 <_sbrk+0x64>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d102      	bne.n	8000f02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000efc:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <_sbrk+0x64>)
 8000efe:	4a12      	ldr	r2, [pc, #72]	@ (8000f48 <_sbrk+0x68>)
 8000f00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f02:	4b10      	ldr	r3, [pc, #64]	@ (8000f44 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d207      	bcs.n	8000f20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f10:	f006 f9cc 	bl	80072ac <__errno>
 8000f14:	4603      	mov	r3, r0
 8000f16:	220c      	movs	r2, #12
 8000f18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1e:	e009      	b.n	8000f34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f20:	4b08      	ldr	r3, [pc, #32]	@ (8000f44 <_sbrk+0x64>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f26:	4b07      	ldr	r3, [pc, #28]	@ (8000f44 <_sbrk+0x64>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	4a05      	ldr	r2, [pc, #20]	@ (8000f44 <_sbrk+0x64>)
 8000f30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f32:	68fb      	ldr	r3, [r7, #12]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	24080000 	.word	0x24080000
 8000f40:	00000400 	.word	0x00000400
 8000f44:	24000140 	.word	0x24000140
 8000f48:	24000338 	.word	0x24000338

08000f4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f50:	4b43      	ldr	r3, [pc, #268]	@ (8001060 <SystemInit+0x114>)
 8000f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f56:	4a42      	ldr	r2, [pc, #264]	@ (8001060 <SystemInit+0x114>)
 8000f58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f60:	4b40      	ldr	r3, [pc, #256]	@ (8001064 <SystemInit+0x118>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f003 030f 	and.w	r3, r3, #15
 8000f68:	2b06      	cmp	r3, #6
 8000f6a:	d807      	bhi.n	8000f7c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f6c:	4b3d      	ldr	r3, [pc, #244]	@ (8001064 <SystemInit+0x118>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f023 030f 	bic.w	r3, r3, #15
 8000f74:	4a3b      	ldr	r2, [pc, #236]	@ (8001064 <SystemInit+0x118>)
 8000f76:	f043 0307 	orr.w	r3, r3, #7
 8000f7a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f7c:	4b3a      	ldr	r3, [pc, #232]	@ (8001068 <SystemInit+0x11c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a39      	ldr	r2, [pc, #228]	@ (8001068 <SystemInit+0x11c>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f88:	4b37      	ldr	r3, [pc, #220]	@ (8001068 <SystemInit+0x11c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f8e:	4b36      	ldr	r3, [pc, #216]	@ (8001068 <SystemInit+0x11c>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	4935      	ldr	r1, [pc, #212]	@ (8001068 <SystemInit+0x11c>)
 8000f94:	4b35      	ldr	r3, [pc, #212]	@ (800106c <SystemInit+0x120>)
 8000f96:	4013      	ands	r3, r2
 8000f98:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f9a:	4b32      	ldr	r3, [pc, #200]	@ (8001064 <SystemInit+0x118>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 0308 	and.w	r3, r3, #8
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d007      	beq.n	8000fb6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fa6:	4b2f      	ldr	r3, [pc, #188]	@ (8001064 <SystemInit+0x118>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f023 030f 	bic.w	r3, r3, #15
 8000fae:	4a2d      	ldr	r2, [pc, #180]	@ (8001064 <SystemInit+0x118>)
 8000fb0:	f043 0307 	orr.w	r3, r3, #7
 8000fb4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000fb6:	4b2c      	ldr	r3, [pc, #176]	@ (8001068 <SystemInit+0x11c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000fbc:	4b2a      	ldr	r3, [pc, #168]	@ (8001068 <SystemInit+0x11c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000fc2:	4b29      	ldr	r3, [pc, #164]	@ (8001068 <SystemInit+0x11c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000fc8:	4b27      	ldr	r3, [pc, #156]	@ (8001068 <SystemInit+0x11c>)
 8000fca:	4a29      	ldr	r2, [pc, #164]	@ (8001070 <SystemInit+0x124>)
 8000fcc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000fce:	4b26      	ldr	r3, [pc, #152]	@ (8001068 <SystemInit+0x11c>)
 8000fd0:	4a28      	ldr	r2, [pc, #160]	@ (8001074 <SystemInit+0x128>)
 8000fd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000fd4:	4b24      	ldr	r3, [pc, #144]	@ (8001068 <SystemInit+0x11c>)
 8000fd6:	4a28      	ldr	r2, [pc, #160]	@ (8001078 <SystemInit+0x12c>)
 8000fd8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000fda:	4b23      	ldr	r3, [pc, #140]	@ (8001068 <SystemInit+0x11c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000fe0:	4b21      	ldr	r3, [pc, #132]	@ (8001068 <SystemInit+0x11c>)
 8000fe2:	4a25      	ldr	r2, [pc, #148]	@ (8001078 <SystemInit+0x12c>)
 8000fe4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000fe6:	4b20      	ldr	r3, [pc, #128]	@ (8001068 <SystemInit+0x11c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000fec:	4b1e      	ldr	r3, [pc, #120]	@ (8001068 <SystemInit+0x11c>)
 8000fee:	4a22      	ldr	r2, [pc, #136]	@ (8001078 <SystemInit+0x12c>)
 8000ff0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ff2:	4b1d      	ldr	r3, [pc, #116]	@ (8001068 <SystemInit+0x11c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ff8:	4b1b      	ldr	r3, [pc, #108]	@ (8001068 <SystemInit+0x11c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a1a      	ldr	r2, [pc, #104]	@ (8001068 <SystemInit+0x11c>)
 8000ffe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001002:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001004:	4b18      	ldr	r3, [pc, #96]	@ (8001068 <SystemInit+0x11c>)
 8001006:	2200      	movs	r2, #0
 8001008:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800100a:	4b1c      	ldr	r3, [pc, #112]	@ (800107c <SystemInit+0x130>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	4b1c      	ldr	r3, [pc, #112]	@ (8001080 <SystemInit+0x134>)
 8001010:	4013      	ands	r3, r2
 8001012:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001016:	d202      	bcs.n	800101e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001018:	4b1a      	ldr	r3, [pc, #104]	@ (8001084 <SystemInit+0x138>)
 800101a:	2201      	movs	r2, #1
 800101c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800101e:	4b12      	ldr	r3, [pc, #72]	@ (8001068 <SystemInit+0x11c>)
 8001020:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001024:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d113      	bne.n	8001054 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800102c:	4b0e      	ldr	r3, [pc, #56]	@ (8001068 <SystemInit+0x11c>)
 800102e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001032:	4a0d      	ldr	r2, [pc, #52]	@ (8001068 <SystemInit+0x11c>)
 8001034:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001038:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800103c:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <SystemInit+0x13c>)
 800103e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001042:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001044:	4b08      	ldr	r3, [pc, #32]	@ (8001068 <SystemInit+0x11c>)
 8001046:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800104a:	4a07      	ldr	r2, [pc, #28]	@ (8001068 <SystemInit+0x11c>)
 800104c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001050:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000ed00 	.word	0xe000ed00
 8001064:	52002000 	.word	0x52002000
 8001068:	58024400 	.word	0x58024400
 800106c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001070:	02020200 	.word	0x02020200
 8001074:	01ff0000 	.word	0x01ff0000
 8001078:	01010280 	.word	0x01010280
 800107c:	5c001000 	.word	0x5c001000
 8001080:	ffff0000 	.word	0xffff0000
 8001084:	51008108 	.word	0x51008108
 8001088:	52004000 	.word	0x52004000

0800108c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001090:	4b09      	ldr	r3, [pc, #36]	@ (80010b8 <ExitRun0Mode+0x2c>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	4a08      	ldr	r2, [pc, #32]	@ (80010b8 <ExitRun0Mode+0x2c>)
 8001096:	f043 0302 	orr.w	r3, r3, #2
 800109a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800109c:	bf00      	nop
 800109e:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <ExitRun0Mode+0x2c>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d0f9      	beq.n	800109e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80010aa:	bf00      	nop
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	58024800 	.word	0x58024800

080010bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010bc:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80010f8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80010c0:	f7ff ffe4 	bl	800108c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010c4:	f7ff ff42 	bl	8000f4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c8:	480c      	ldr	r0, [pc, #48]	@ (80010fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010ca:	490d      	ldr	r1, [pc, #52]	@ (8001100 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001104 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d0:	e002      	b.n	80010d8 <LoopCopyDataInit>

080010d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d6:	3304      	adds	r3, #4

080010d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010dc:	d3f9      	bcc.n	80010d2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010de:	4a0a      	ldr	r2, [pc, #40]	@ (8001108 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010e0:	4c0a      	ldr	r4, [pc, #40]	@ (800110c <LoopFillZerobss+0x22>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e4:	e001      	b.n	80010ea <LoopFillZerobss>

080010e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e8:	3204      	adds	r2, #4

080010ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ec:	d3fb      	bcc.n	80010e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ee:	f006 f8e3 	bl	80072b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010f2:	f7ff fb93 	bl	800081c <main>
  bx  lr
 80010f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010f8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80010fc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001100:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8001104:	080080bc 	.word	0x080080bc
  ldr r2, =_sbss
 8001108:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 800110c:	24000334 	.word	0x24000334

08001110 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001110:	e7fe      	b.n	8001110 <ADC3_IRQHandler>
	...

08001114 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08c      	sub	sp, #48	@ 0x30
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800111e:	2300      	movs	r3, #0
 8001120:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d009      	beq.n	800113c <BSP_LED_Init+0x28>
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d006      	beq.n	800113c <BSP_LED_Init+0x28>
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	2b02      	cmp	r3, #2
 8001132:	d003      	beq.n	800113c <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001134:	f06f 0301 	mvn.w	r3, #1
 8001138:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800113a:	e055      	b.n	80011e8 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d10f      	bne.n	8001162 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8001142:	4b2c      	ldr	r3, [pc, #176]	@ (80011f4 <BSP_LED_Init+0xe0>)
 8001144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001148:	4a2a      	ldr	r2, [pc, #168]	@ (80011f4 <BSP_LED_Init+0xe0>)
 800114a:	f043 0302 	orr.w	r3, r3, #2
 800114e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001152:	4b28      	ldr	r3, [pc, #160]	@ (80011f4 <BSP_LED_Init+0xe0>)
 8001154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	617b      	str	r3, [r7, #20]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	e021      	b.n	80011a6 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d10f      	bne.n	8001188 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001168:	4b22      	ldr	r3, [pc, #136]	@ (80011f4 <BSP_LED_Init+0xe0>)
 800116a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800116e:	4a21      	ldr	r2, [pc, #132]	@ (80011f4 <BSP_LED_Init+0xe0>)
 8001170:	f043 0310 	orr.w	r3, r3, #16
 8001174:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001178:	4b1e      	ldr	r3, [pc, #120]	@ (80011f4 <BSP_LED_Init+0xe0>)
 800117a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800117e:	f003 0310 	and.w	r3, r3, #16
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	e00e      	b.n	80011a6 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001188:	4b1a      	ldr	r3, [pc, #104]	@ (80011f4 <BSP_LED_Init+0xe0>)
 800118a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800118e:	4a19      	ldr	r2, [pc, #100]	@ (80011f4 <BSP_LED_Init+0xe0>)
 8001190:	f043 0302 	orr.w	r3, r3, #2
 8001194:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001198:	4b16      	ldr	r3, [pc, #88]	@ (80011f4 <BSP_LED_Init+0xe0>)
 800119a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	4a13      	ldr	r2, [pc, #76]	@ (80011f8 <BSP_LED_Init+0xe4>)
 80011aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011ae:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80011b0:	2301      	movs	r3, #1
 80011b2:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b8:	2303      	movs	r3, #3
 80011ba:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	4a0f      	ldr	r2, [pc, #60]	@ (80011fc <BSP_LED_Init+0xe8>)
 80011c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c4:	f107 0218 	add.w	r2, r7, #24
 80011c8:	4611      	mov	r1, r2
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 feec 	bl	8001fa8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	4a0a      	ldr	r2, [pc, #40]	@ (80011fc <BSP_LED_Init+0xe8>)
 80011d4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	4a07      	ldr	r2, [pc, #28]	@ (80011f8 <BSP_LED_Init+0xe4>)
 80011dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011e0:	2200      	movs	r2, #0
 80011e2:	4619      	mov	r1, r3
 80011e4:	f001 f890 	bl	8002308 <HAL_GPIO_WritePin>
  }

  return ret;
 80011e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3730      	adds	r7, #48	@ 0x30
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	58024400 	.word	0x58024400
 80011f8:	08008054 	.word	0x08008054
 80011fc:	2400000c 	.word	0x2400000c

08001200 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d009      	beq.n	8001228 <BSP_LED_On+0x28>
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d006      	beq.n	8001228 <BSP_LED_On+0x28>
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b02      	cmp	r3, #2
 800121e:	d003      	beq.n	8001228 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001220:	f06f 0301 	mvn.w	r3, #1
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	e00b      	b.n	8001240 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	4a08      	ldr	r2, [pc, #32]	@ (800124c <BSP_LED_On+0x4c>)
 800122c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	4a07      	ldr	r2, [pc, #28]	@ (8001250 <BSP_LED_On+0x50>)
 8001234:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001238:	2201      	movs	r2, #1
 800123a:	4619      	mov	r1, r3
 800123c:	f001 f864 	bl	8002308 <HAL_GPIO_WritePin>
  }

  return ret;
 8001240:	68fb      	ldr	r3, [r7, #12]
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	2400000c 	.word	0x2400000c
 8001250:	08008054 	.word	0x08008054

08001254 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d009      	beq.n	800127c <BSP_LED_Off+0x28>
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d006      	beq.n	800127c <BSP_LED_Off+0x28>
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	2b02      	cmp	r3, #2
 8001272:	d003      	beq.n	800127c <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001274:	f06f 0301 	mvn.w	r3, #1
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	e00b      	b.n	8001294 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	4a08      	ldr	r2, [pc, #32]	@ (80012a0 <BSP_LED_Off+0x4c>)
 8001280:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	4a07      	ldr	r2, [pc, #28]	@ (80012a4 <BSP_LED_Off+0x50>)
 8001288:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800128c:	2200      	movs	r2, #0
 800128e:	4619      	mov	r1, r3
 8001290:	f001 f83a 	bl	8002308 <HAL_GPIO_WritePin>
  }

  return ret;
 8001294:	68fb      	ldr	r3, [r7, #12]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	2400000c 	.word	0x2400000c
 80012a4:	08008054 	.word	0x08008054

080012a8 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d009      	beq.n	80012d0 <BSP_LED_Toggle+0x28>
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d006      	beq.n	80012d0 <BSP_LED_Toggle+0x28>
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d003      	beq.n	80012d0 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80012c8:	f06f 0301 	mvn.w	r3, #1
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	e00b      	b.n	80012e8 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	4a08      	ldr	r2, [pc, #32]	@ (80012f4 <BSP_LED_Toggle+0x4c>)
 80012d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	4907      	ldr	r1, [pc, #28]	@ (80012f8 <BSP_LED_Toggle+0x50>)
 80012dc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012e0:	4619      	mov	r1, r3
 80012e2:	4610      	mov	r0, r2
 80012e4:	f001 f829 	bl	800233a <HAL_GPIO_TogglePin>
  }

  return ret;
 80012e8:	68fb      	ldr	r3, [r7, #12]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	2400000c 	.word	0x2400000c
 80012f8:	08008054 	.word	0x08008054

080012fc <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b088      	sub	sp, #32
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	460a      	mov	r2, r1
 8001306:	71fb      	strb	r3, [r7, #7]
 8001308:	4613      	mov	r3, r2
 800130a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 800130c:	4b2e      	ldr	r3, [pc, #184]	@ (80013c8 <BSP_PB_Init+0xcc>)
 800130e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001312:	4a2d      	ldr	r2, [pc, #180]	@ (80013c8 <BSP_PB_Init+0xcc>)
 8001314:	f043 0304 	orr.w	r3, r3, #4
 8001318:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800131c:	4b2a      	ldr	r3, [pc, #168]	@ (80013c8 <BSP_PB_Init+0xcc>)
 800131e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800132a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800132e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001330:	2302      	movs	r3, #2
 8001332:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001334:	2302      	movs	r3, #2
 8001336:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001338:	79bb      	ldrb	r3, [r7, #6]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d10c      	bne.n	8001358 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	4a21      	ldr	r2, [pc, #132]	@ (80013cc <BSP_PB_Init+0xd0>)
 8001346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134a:	f107 020c 	add.w	r2, r7, #12
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f000 fe29 	bl	8001fa8 <HAL_GPIO_Init>
 8001356:	e031      	b.n	80013bc <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001358:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800135c:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	4a1a      	ldr	r2, [pc, #104]	@ (80013cc <BSP_PB_Init+0xd0>)
 8001362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001366:	f107 020c 	add.w	r2, r7, #12
 800136a:	4611      	mov	r1, r2
 800136c:	4618      	mov	r0, r3
 800136e:	f000 fe1b 	bl	8001fa8 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	4a16      	ldr	r2, [pc, #88]	@ (80013d0 <BSP_PB_Init+0xd4>)
 8001378:	441a      	add	r2, r3
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	4915      	ldr	r1, [pc, #84]	@ (80013d4 <BSP_PB_Init+0xd8>)
 800137e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001382:	4619      	mov	r1, r3
 8001384:	4610      	mov	r0, r2
 8001386:	f000 fdca 	bl	8001f1e <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	4a10      	ldr	r2, [pc, #64]	@ (80013d0 <BSP_PB_Init+0xd4>)
 8001390:	1898      	adds	r0, r3, r2
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	4a10      	ldr	r2, [pc, #64]	@ (80013d8 <BSP_PB_Init+0xdc>)
 8001396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139a:	461a      	mov	r2, r3
 800139c:	2100      	movs	r1, #0
 800139e:	f000 fd9f 	bl	8001ee0 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80013a2:	2028      	movs	r0, #40	@ 0x28
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	4a0d      	ldr	r2, [pc, #52]	@ (80013dc <BSP_PB_Init+0xe0>)
 80013a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ac:	2200      	movs	r2, #0
 80013ae:	4619      	mov	r1, r3
 80013b0:	f000 faa3 	bl	80018fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80013b4:	2328      	movs	r3, #40	@ 0x28
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 fab9 	bl	800192e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3720      	adds	r7, #32
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	58024400 	.word	0x58024400
 80013cc:	24000018 	.word	0x24000018
 80013d0:	24000144 	.word	0x24000144
 80013d4:	0800805c 	.word	0x0800805c
 80013d8:	2400001c 	.word	0x2400001c
 80013dc:	24000020 	.word	0x24000020

080013e0 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	4a04      	ldr	r2, [pc, #16]	@ (8001400 <BSP_PB_IRQHandler+0x20>)
 80013f0:	4413      	add	r3, r2
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 fda8 	bl	8001f48 <HAL_EXTI_IRQHandler>
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	24000144 	.word	0x24000144

08001404 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	6039      	str	r1, [r7, #0]
 800140e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800141a:	f06f 0301 	mvn.w	r3, #1
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	e018      	b.n	8001454 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	2294      	movs	r2, #148	@ 0x94
 8001426:	fb02 f303 	mul.w	r3, r2, r3
 800142a:	4a0d      	ldr	r2, [pc, #52]	@ (8001460 <BSP_COM_Init+0x5c>)
 800142c:	4413      	add	r3, r2
 800142e:	4618      	mov	r0, r3
 8001430:	f000 f86e 	bl	8001510 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	2294      	movs	r2, #148	@ 0x94
 8001438:	fb02 f303 	mul.w	r3, r2, r3
 800143c:	4a08      	ldr	r2, [pc, #32]	@ (8001460 <BSP_COM_Init+0x5c>)
 800143e:	4413      	add	r3, r2
 8001440:	6839      	ldr	r1, [r7, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f000 f80e 	bl	8001464 <MX_USART3_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d002      	beq.n	8001454 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800144e:	f06f 0303 	mvn.w	r3, #3
 8001452:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001454:	68fb      	ldr	r3, [r7, #12]
}
 8001456:	4618      	mov	r0, r3
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	2400014c 	.word	0x2400014c

08001464 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800146e:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <MX_USART3_Init+0x60>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	220c      	movs	r2, #12
 8001482:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	895b      	ldrh	r3, [r3, #10]
 8001488:	461a      	mov	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	891b      	ldrh	r3, [r3, #8]
 800149a:	461a      	mov	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	899b      	ldrh	r3, [r3, #12]
 80014a4:	461a      	mov	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80014b0:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f004 fd23 	bl	8005efe <HAL_UART_Init>
 80014b8:	4603      	mov	r3, r0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	24000008 	.word	0x24000008

080014c8 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 80014d0:	4b09      	ldr	r3, [pc, #36]	@ (80014f8 <__io_putchar+0x30>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	461a      	mov	r2, r3
 80014d6:	2394      	movs	r3, #148	@ 0x94
 80014d8:	fb02 f303 	mul.w	r3, r2, r3
 80014dc:	4a07      	ldr	r2, [pc, #28]	@ (80014fc <__io_putchar+0x34>)
 80014de:	1898      	adds	r0, r3, r2
 80014e0:	1d39      	adds	r1, r7, #4
 80014e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014e6:	2201      	movs	r2, #1
 80014e8:	f004 fd63 	bl	8005fb2 <HAL_UART_Transmit>
  return ch;
 80014ec:	687b      	ldr	r3, [r7, #4]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	240001e0 	.word	0x240001e0
 80014fc:	2400014c 	.word	0x2400014c

08001500 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001504:	2000      	movs	r0, #0
 8001506:	f7ff fb91 	bl	8000c2c <BSP_PB_Callback>
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	@ 0x28
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001518:	4b27      	ldr	r3, [pc, #156]	@ (80015b8 <COM1_MspInit+0xa8>)
 800151a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800151e:	4a26      	ldr	r2, [pc, #152]	@ (80015b8 <COM1_MspInit+0xa8>)
 8001520:	f043 0308 	orr.w	r3, r3, #8
 8001524:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001528:	4b23      	ldr	r3, [pc, #140]	@ (80015b8 <COM1_MspInit+0xa8>)
 800152a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800152e:	f003 0308 	and.w	r3, r3, #8
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001536:	4b20      	ldr	r3, [pc, #128]	@ (80015b8 <COM1_MspInit+0xa8>)
 8001538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800153c:	4a1e      	ldr	r2, [pc, #120]	@ (80015b8 <COM1_MspInit+0xa8>)
 800153e:	f043 0308 	orr.w	r3, r3, #8
 8001542:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001546:	4b1c      	ldr	r3, [pc, #112]	@ (80015b8 <COM1_MspInit+0xa8>)
 8001548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800154c:	f003 0308 	and.w	r3, r3, #8
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001554:	4b18      	ldr	r3, [pc, #96]	@ (80015b8 <COM1_MspInit+0xa8>)
 8001556:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800155a:	4a17      	ldr	r2, [pc, #92]	@ (80015b8 <COM1_MspInit+0xa8>)
 800155c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001560:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001564:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <COM1_MspInit+0xa8>)
 8001566:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800156a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8001572:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001576:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800157c:	2302      	movs	r3, #2
 800157e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001580:	2301      	movs	r3, #1
 8001582:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001584:	2307      	movs	r3, #7
 8001586:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4619      	mov	r1, r3
 800158e:	480b      	ldr	r0, [pc, #44]	@ (80015bc <COM1_MspInit+0xac>)
 8001590:	f000 fd0a 	bl	8001fa8 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001594:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001598:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800159e:	2307      	movs	r3, #7
 80015a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	4804      	ldr	r0, [pc, #16]	@ (80015bc <COM1_MspInit+0xac>)
 80015aa:	f000 fcfd 	bl	8001fa8 <HAL_GPIO_Init>
}
 80015ae:	bf00      	nop
 80015b0:	3728      	adds	r7, #40	@ 0x28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	58024400 	.word	0x58024400
 80015bc:	58020c00 	.word	0x58020c00

080015c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c6:	2003      	movs	r0, #3
 80015c8:	f000 f98c 	bl	80018e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80015cc:	f001 fd34 	bl	8003038 <HAL_RCC_GetSysClockFreq>
 80015d0:	4602      	mov	r2, r0
 80015d2:	4b15      	ldr	r3, [pc, #84]	@ (8001628 <HAL_Init+0x68>)
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	0a1b      	lsrs	r3, r3, #8
 80015d8:	f003 030f 	and.w	r3, r3, #15
 80015dc:	4913      	ldr	r1, [pc, #76]	@ (800162c <HAL_Init+0x6c>)
 80015de:	5ccb      	ldrb	r3, [r1, r3]
 80015e0:	f003 031f 	and.w	r3, r3, #31
 80015e4:	fa22 f303 	lsr.w	r3, r2, r3
 80015e8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80015ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001628 <HAL_Init+0x68>)
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	4a0e      	ldr	r2, [pc, #56]	@ (800162c <HAL_Init+0x6c>)
 80015f4:	5cd3      	ldrb	r3, [r2, r3]
 80015f6:	f003 031f 	and.w	r3, r3, #31
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001600:	4a0b      	ldr	r2, [pc, #44]	@ (8001630 <HAL_Init+0x70>)
 8001602:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001604:	4a0b      	ldr	r2, [pc, #44]	@ (8001634 <HAL_Init+0x74>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800160a:	2000      	movs	r0, #0
 800160c:	f000 f814 	bl	8001638 <HAL_InitTick>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e002      	b.n	8001620 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800161a:	f7ff fb21 	bl	8000c60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	58024400 	.word	0x58024400
 800162c:	08008044 	.word	0x08008044
 8001630:	24000004 	.word	0x24000004
 8001634:	24000000 	.word	0x24000000

08001638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001640:	4b15      	ldr	r3, [pc, #84]	@ (8001698 <HAL_InitTick+0x60>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e021      	b.n	8001690 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800164c:	4b13      	ldr	r3, [pc, #76]	@ (800169c <HAL_InitTick+0x64>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4b11      	ldr	r3, [pc, #68]	@ (8001698 <HAL_InitTick+0x60>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	4619      	mov	r1, r3
 8001656:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800165a:	fbb3 f3f1 	udiv	r3, r3, r1
 800165e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001662:	4618      	mov	r0, r3
 8001664:	f000 f971 	bl	800194a <HAL_SYSTICK_Config>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e00e      	b.n	8001690 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2b0f      	cmp	r3, #15
 8001676:	d80a      	bhi.n	800168e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001678:	2200      	movs	r2, #0
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	f04f 30ff 	mov.w	r0, #4294967295
 8001680:	f000 f93b 	bl	80018fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001684:	4a06      	ldr	r2, [pc, #24]	@ (80016a0 <HAL_InitTick+0x68>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800168a:	2300      	movs	r3, #0
 800168c:	e000      	b.n	8001690 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
}
 8001690:	4618      	mov	r0, r3
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	24000028 	.word	0x24000028
 800169c:	24000000 	.word	0x24000000
 80016a0:	24000024 	.word	0x24000024

080016a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016a8:	4b06      	ldr	r3, [pc, #24]	@ (80016c4 <HAL_IncTick+0x20>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	461a      	mov	r2, r3
 80016ae:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <HAL_IncTick+0x24>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4413      	add	r3, r2
 80016b4:	4a04      	ldr	r2, [pc, #16]	@ (80016c8 <HAL_IncTick+0x24>)
 80016b6:	6013      	str	r3, [r2, #0]
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	24000028 	.word	0x24000028
 80016c8:	240001e4 	.word	0x240001e4

080016cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return uwTick;
 80016d0:	4b03      	ldr	r3, [pc, #12]	@ (80016e0 <HAL_GetTick+0x14>)
 80016d2:	681b      	ldr	r3, [r3, #0]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	240001e4 	.word	0x240001e4

080016e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016ec:	f7ff ffee 	bl	80016cc <HAL_GetTick>
 80016f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016fc:	d005      	beq.n	800170a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001728 <HAL_Delay+0x44>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	461a      	mov	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	4413      	add	r3, r2
 8001708:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800170a:	bf00      	nop
 800170c:	f7ff ffde 	bl	80016cc <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	429a      	cmp	r2, r3
 800171a:	d8f7      	bhi.n	800170c <HAL_Delay+0x28>
  {
  }
}
 800171c:	bf00      	nop
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	24000028 	.word	0x24000028

0800172c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001730:	4b03      	ldr	r3, [pc, #12]	@ (8001740 <HAL_GetREVID+0x14>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	0c1b      	lsrs	r3, r3, #16
}
 8001736:	4618      	mov	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	5c001000 	.word	0x5c001000

08001744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001754:	4b0b      	ldr	r3, [pc, #44]	@ (8001784 <__NVIC_SetPriorityGrouping+0x40>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001760:	4013      	ands	r3, r2
 8001762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800176c:	4b06      	ldr	r3, [pc, #24]	@ (8001788 <__NVIC_SetPriorityGrouping+0x44>)
 800176e:	4313      	orrs	r3, r2
 8001770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001772:	4a04      	ldr	r2, [pc, #16]	@ (8001784 <__NVIC_SetPriorityGrouping+0x40>)
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	60d3      	str	r3, [r2, #12]
}
 8001778:	bf00      	nop
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000ed00 	.word	0xe000ed00
 8001788:	05fa0000 	.word	0x05fa0000

0800178c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001790:	4b04      	ldr	r3, [pc, #16]	@ (80017a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	0a1b      	lsrs	r3, r3, #8
 8001796:	f003 0307 	and.w	r3, r3, #7
}
 800179a:	4618      	mov	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	db0b      	blt.n	80017d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ba:	88fb      	ldrh	r3, [r7, #6]
 80017bc:	f003 021f 	and.w	r2, r3, #31
 80017c0:	4907      	ldr	r1, [pc, #28]	@ (80017e0 <__NVIC_EnableIRQ+0x38>)
 80017c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017c6:	095b      	lsrs	r3, r3, #5
 80017c8:	2001      	movs	r0, #1
 80017ca:	fa00 f202 	lsl.w	r2, r0, r2
 80017ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000e100 	.word	0xe000e100

080017e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	6039      	str	r1, [r7, #0]
 80017ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	db0a      	blt.n	800180e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	490c      	ldr	r1, [pc, #48]	@ (8001830 <__NVIC_SetPriority+0x4c>)
 80017fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001802:	0112      	lsls	r2, r2, #4
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	440b      	add	r3, r1
 8001808:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800180c:	e00a      	b.n	8001824 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	b2da      	uxtb	r2, r3
 8001812:	4908      	ldr	r1, [pc, #32]	@ (8001834 <__NVIC_SetPriority+0x50>)
 8001814:	88fb      	ldrh	r3, [r7, #6]
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	3b04      	subs	r3, #4
 800181c:	0112      	lsls	r2, r2, #4
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	440b      	add	r3, r1
 8001822:	761a      	strb	r2, [r3, #24]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000e100 	.word	0xe000e100
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001838:	b480      	push	{r7}
 800183a:	b089      	sub	sp, #36	@ 0x24
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f1c3 0307 	rsb	r3, r3, #7
 8001852:	2b04      	cmp	r3, #4
 8001854:	bf28      	it	cs
 8001856:	2304      	movcs	r3, #4
 8001858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3304      	adds	r3, #4
 800185e:	2b06      	cmp	r3, #6
 8001860:	d902      	bls.n	8001868 <NVIC_EncodePriority+0x30>
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3b03      	subs	r3, #3
 8001866:	e000      	b.n	800186a <NVIC_EncodePriority+0x32>
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800186c:	f04f 32ff 	mov.w	r2, #4294967295
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43da      	mvns	r2, r3
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	401a      	ands	r2, r3
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001880:	f04f 31ff 	mov.w	r1, #4294967295
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	fa01 f303 	lsl.w	r3, r1, r3
 800188a:	43d9      	mvns	r1, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	4313      	orrs	r3, r2
         );
}
 8001892:	4618      	mov	r0, r3
 8001894:	3724      	adds	r7, #36	@ 0x24
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
	...

080018a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018b0:	d301      	bcc.n	80018b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00f      	b.n	80018d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018b6:	4a0a      	ldr	r2, [pc, #40]	@ (80018e0 <SysTick_Config+0x40>)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018be:	210f      	movs	r1, #15
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295
 80018c4:	f7ff ff8e 	bl	80017e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c8:	4b05      	ldr	r3, [pc, #20]	@ (80018e0 <SysTick_Config+0x40>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ce:	4b04      	ldr	r3, [pc, #16]	@ (80018e0 <SysTick_Config+0x40>)
 80018d0:	2207      	movs	r2, #7
 80018d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	e000e010 	.word	0xe000e010

080018e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff ff29 	bl	8001744 <__NVIC_SetPriorityGrouping>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b086      	sub	sp, #24
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4603      	mov	r3, r0
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
 8001906:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001908:	f7ff ff40 	bl	800178c <__NVIC_GetPriorityGrouping>
 800190c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	68b9      	ldr	r1, [r7, #8]
 8001912:	6978      	ldr	r0, [r7, #20]
 8001914:	f7ff ff90 	bl	8001838 <NVIC_EncodePriority>
 8001918:	4602      	mov	r2, r0
 800191a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800191e:	4611      	mov	r1, r2
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ff5f 	bl	80017e4 <__NVIC_SetPriority>
}
 8001926:	bf00      	nop
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
 8001934:	4603      	mov	r3, r0
 8001936:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001938:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff ff33 	bl	80017a8 <__NVIC_EnableIRQ>
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff ffa4 	bl	80018a0 <SysTick_Config>
 8001958:	4603      	mov	r3, r0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001968:	f3bf 8f5f 	dmb	sy
}
 800196c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800196e:	4b07      	ldr	r3, [pc, #28]	@ (800198c <HAL_MPU_Disable+0x28>)
 8001970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001972:	4a06      	ldr	r2, [pc, #24]	@ (800198c <HAL_MPU_Disable+0x28>)
 8001974:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001978:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800197a:	4b05      	ldr	r3, [pc, #20]	@ (8001990 <HAL_MPU_Disable+0x2c>)
 800197c:	2200      	movs	r2, #0
 800197e:	605a      	str	r2, [r3, #4]
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	e000ed00 	.word	0xe000ed00
 8001990:	e000ed90 	.word	0xe000ed90

08001994 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800199c:	4a0b      	ldr	r2, [pc, #44]	@ (80019cc <HAL_MPU_Enable+0x38>)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80019a6:	4b0a      	ldr	r3, [pc, #40]	@ (80019d0 <HAL_MPU_Enable+0x3c>)
 80019a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019aa:	4a09      	ldr	r2, [pc, #36]	@ (80019d0 <HAL_MPU_Enable+0x3c>)
 80019ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019b0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80019b2:	f3bf 8f4f 	dsb	sy
}
 80019b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019b8:	f3bf 8f6f 	isb	sy
}
 80019bc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000ed90 	.word	0xe000ed90
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	785a      	ldrb	r2, [r3, #1]
 80019e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a50 <HAL_MPU_ConfigRegion+0x7c>)
 80019e2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80019e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a50 <HAL_MPU_ConfigRegion+0x7c>)
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	4a19      	ldr	r2, [pc, #100]	@ (8001a50 <HAL_MPU_ConfigRegion+0x7c>)
 80019ea:	f023 0301 	bic.w	r3, r3, #1
 80019ee:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80019f0:	4a17      	ldr	r2, [pc, #92]	@ (8001a50 <HAL_MPU_ConfigRegion+0x7c>)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	7b1b      	ldrb	r3, [r3, #12]
 80019fc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	7adb      	ldrb	r3, [r3, #11]
 8001a02:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	7a9b      	ldrb	r3, [r3, #10]
 8001a0a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	7b5b      	ldrb	r3, [r3, #13]
 8001a12:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	7b9b      	ldrb	r3, [r3, #14]
 8001a1a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	7bdb      	ldrb	r3, [r3, #15]
 8001a22:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	7a5b      	ldrb	r3, [r3, #9]
 8001a2a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	7a1b      	ldrb	r3, [r3, #8]
 8001a32:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a34:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	7812      	ldrb	r2, [r2, #0]
 8001a3a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a3c:	4a04      	ldr	r2, [pc, #16]	@ (8001a50 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a3e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a40:	6113      	str	r3, [r2, #16]
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000ed90 	.word	0xe000ed90

08001a54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e237      	b.n	8001ed6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d004      	beq.n	8001a7c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2280      	movs	r2, #128	@ 0x80
 8001a76:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e22c      	b.n	8001ed6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a5c      	ldr	r2, [pc, #368]	@ (8001bf4 <HAL_DMA_Abort_IT+0x1a0>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d04a      	beq.n	8001b1c <HAL_DMA_Abort_IT+0xc8>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a5b      	ldr	r2, [pc, #364]	@ (8001bf8 <HAL_DMA_Abort_IT+0x1a4>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d045      	beq.n	8001b1c <HAL_DMA_Abort_IT+0xc8>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a59      	ldr	r2, [pc, #356]	@ (8001bfc <HAL_DMA_Abort_IT+0x1a8>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d040      	beq.n	8001b1c <HAL_DMA_Abort_IT+0xc8>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a58      	ldr	r2, [pc, #352]	@ (8001c00 <HAL_DMA_Abort_IT+0x1ac>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d03b      	beq.n	8001b1c <HAL_DMA_Abort_IT+0xc8>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a56      	ldr	r2, [pc, #344]	@ (8001c04 <HAL_DMA_Abort_IT+0x1b0>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d036      	beq.n	8001b1c <HAL_DMA_Abort_IT+0xc8>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a55      	ldr	r2, [pc, #340]	@ (8001c08 <HAL_DMA_Abort_IT+0x1b4>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d031      	beq.n	8001b1c <HAL_DMA_Abort_IT+0xc8>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a53      	ldr	r2, [pc, #332]	@ (8001c0c <HAL_DMA_Abort_IT+0x1b8>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d02c      	beq.n	8001b1c <HAL_DMA_Abort_IT+0xc8>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a52      	ldr	r2, [pc, #328]	@ (8001c10 <HAL_DMA_Abort_IT+0x1bc>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d027      	beq.n	8001b1c <HAL_DMA_Abort_IT+0xc8>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a50      	ldr	r2, [pc, #320]	@ (8001c14 <HAL_DMA_Abort_IT+0x1c0>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d022      	beq.n	8001b1c <HAL_DMA_Abort_IT+0xc8>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a4f      	ldr	r2, [pc, #316]	@ (8001c18 <HAL_DMA_Abort_IT+0x1c4>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d01d      	beq.n	8001b1c <HAL_DMA_Abort_IT+0xc8>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a4d      	ldr	r2, [pc, #308]	@ (8001c1c <HAL_DMA_Abort_IT+0x1c8>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d018      	beq.n	8001b1c <HAL_DMA_Abort_IT+0xc8>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a4c      	ldr	r2, [pc, #304]	@ (8001c20 <HAL_DMA_Abort_IT+0x1cc>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d013      	beq.n	8001b1c <HAL_DMA_Abort_IT+0xc8>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a4a      	ldr	r2, [pc, #296]	@ (8001c24 <HAL_DMA_Abort_IT+0x1d0>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d00e      	beq.n	8001b1c <HAL_DMA_Abort_IT+0xc8>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a49      	ldr	r2, [pc, #292]	@ (8001c28 <HAL_DMA_Abort_IT+0x1d4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d009      	beq.n	8001b1c <HAL_DMA_Abort_IT+0xc8>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a47      	ldr	r2, [pc, #284]	@ (8001c2c <HAL_DMA_Abort_IT+0x1d8>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d004      	beq.n	8001b1c <HAL_DMA_Abort_IT+0xc8>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a46      	ldr	r2, [pc, #280]	@ (8001c30 <HAL_DMA_Abort_IT+0x1dc>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d101      	bne.n	8001b20 <HAL_DMA_Abort_IT+0xcc>
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e000      	b.n	8001b22 <HAL_DMA_Abort_IT+0xce>
 8001b20:	2300      	movs	r3, #0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 8086 	beq.w	8001c34 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2204      	movs	r2, #4
 8001b2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a2f      	ldr	r2, [pc, #188]	@ (8001bf4 <HAL_DMA_Abort_IT+0x1a0>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d04a      	beq.n	8001bd0 <HAL_DMA_Abort_IT+0x17c>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a2e      	ldr	r2, [pc, #184]	@ (8001bf8 <HAL_DMA_Abort_IT+0x1a4>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d045      	beq.n	8001bd0 <HAL_DMA_Abort_IT+0x17c>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a2c      	ldr	r2, [pc, #176]	@ (8001bfc <HAL_DMA_Abort_IT+0x1a8>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d040      	beq.n	8001bd0 <HAL_DMA_Abort_IT+0x17c>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a2b      	ldr	r2, [pc, #172]	@ (8001c00 <HAL_DMA_Abort_IT+0x1ac>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d03b      	beq.n	8001bd0 <HAL_DMA_Abort_IT+0x17c>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a29      	ldr	r2, [pc, #164]	@ (8001c04 <HAL_DMA_Abort_IT+0x1b0>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d036      	beq.n	8001bd0 <HAL_DMA_Abort_IT+0x17c>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a28      	ldr	r2, [pc, #160]	@ (8001c08 <HAL_DMA_Abort_IT+0x1b4>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d031      	beq.n	8001bd0 <HAL_DMA_Abort_IT+0x17c>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a26      	ldr	r2, [pc, #152]	@ (8001c0c <HAL_DMA_Abort_IT+0x1b8>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d02c      	beq.n	8001bd0 <HAL_DMA_Abort_IT+0x17c>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a25      	ldr	r2, [pc, #148]	@ (8001c10 <HAL_DMA_Abort_IT+0x1bc>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d027      	beq.n	8001bd0 <HAL_DMA_Abort_IT+0x17c>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a23      	ldr	r2, [pc, #140]	@ (8001c14 <HAL_DMA_Abort_IT+0x1c0>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d022      	beq.n	8001bd0 <HAL_DMA_Abort_IT+0x17c>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a22      	ldr	r2, [pc, #136]	@ (8001c18 <HAL_DMA_Abort_IT+0x1c4>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d01d      	beq.n	8001bd0 <HAL_DMA_Abort_IT+0x17c>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a20      	ldr	r2, [pc, #128]	@ (8001c1c <HAL_DMA_Abort_IT+0x1c8>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d018      	beq.n	8001bd0 <HAL_DMA_Abort_IT+0x17c>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a1f      	ldr	r2, [pc, #124]	@ (8001c20 <HAL_DMA_Abort_IT+0x1cc>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d013      	beq.n	8001bd0 <HAL_DMA_Abort_IT+0x17c>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a1d      	ldr	r2, [pc, #116]	@ (8001c24 <HAL_DMA_Abort_IT+0x1d0>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d00e      	beq.n	8001bd0 <HAL_DMA_Abort_IT+0x17c>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a1c      	ldr	r2, [pc, #112]	@ (8001c28 <HAL_DMA_Abort_IT+0x1d4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d009      	beq.n	8001bd0 <HAL_DMA_Abort_IT+0x17c>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a1a      	ldr	r2, [pc, #104]	@ (8001c2c <HAL_DMA_Abort_IT+0x1d8>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d004      	beq.n	8001bd0 <HAL_DMA_Abort_IT+0x17c>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a19      	ldr	r2, [pc, #100]	@ (8001c30 <HAL_DMA_Abort_IT+0x1dc>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d108      	bne.n	8001be2 <HAL_DMA_Abort_IT+0x18e>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 0201 	bic.w	r2, r2, #1
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	e178      	b.n	8001ed4 <HAL_DMA_Abort_IT+0x480>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 0201 	bic.w	r2, r2, #1
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	e16f      	b.n	8001ed4 <HAL_DMA_Abort_IT+0x480>
 8001bf4:	40020010 	.word	0x40020010
 8001bf8:	40020028 	.word	0x40020028
 8001bfc:	40020040 	.word	0x40020040
 8001c00:	40020058 	.word	0x40020058
 8001c04:	40020070 	.word	0x40020070
 8001c08:	40020088 	.word	0x40020088
 8001c0c:	400200a0 	.word	0x400200a0
 8001c10:	400200b8 	.word	0x400200b8
 8001c14:	40020410 	.word	0x40020410
 8001c18:	40020428 	.word	0x40020428
 8001c1c:	40020440 	.word	0x40020440
 8001c20:	40020458 	.word	0x40020458
 8001c24:	40020470 	.word	0x40020470
 8001c28:	40020488 	.word	0x40020488
 8001c2c:	400204a0 	.word	0x400204a0
 8001c30:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 020e 	bic.w	r2, r2, #14
 8001c42:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a6c      	ldr	r2, [pc, #432]	@ (8001dfc <HAL_DMA_Abort_IT+0x3a8>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d04a      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x290>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a6b      	ldr	r2, [pc, #428]	@ (8001e00 <HAL_DMA_Abort_IT+0x3ac>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d045      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x290>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a69      	ldr	r2, [pc, #420]	@ (8001e04 <HAL_DMA_Abort_IT+0x3b0>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d040      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x290>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a68      	ldr	r2, [pc, #416]	@ (8001e08 <HAL_DMA_Abort_IT+0x3b4>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d03b      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x290>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a66      	ldr	r2, [pc, #408]	@ (8001e0c <HAL_DMA_Abort_IT+0x3b8>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d036      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x290>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a65      	ldr	r2, [pc, #404]	@ (8001e10 <HAL_DMA_Abort_IT+0x3bc>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d031      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x290>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a63      	ldr	r2, [pc, #396]	@ (8001e14 <HAL_DMA_Abort_IT+0x3c0>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d02c      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x290>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a62      	ldr	r2, [pc, #392]	@ (8001e18 <HAL_DMA_Abort_IT+0x3c4>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d027      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x290>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a60      	ldr	r2, [pc, #384]	@ (8001e1c <HAL_DMA_Abort_IT+0x3c8>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d022      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x290>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a5f      	ldr	r2, [pc, #380]	@ (8001e20 <HAL_DMA_Abort_IT+0x3cc>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d01d      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x290>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a5d      	ldr	r2, [pc, #372]	@ (8001e24 <HAL_DMA_Abort_IT+0x3d0>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d018      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x290>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a5c      	ldr	r2, [pc, #368]	@ (8001e28 <HAL_DMA_Abort_IT+0x3d4>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d013      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x290>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a5a      	ldr	r2, [pc, #360]	@ (8001e2c <HAL_DMA_Abort_IT+0x3d8>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d00e      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x290>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a59      	ldr	r2, [pc, #356]	@ (8001e30 <HAL_DMA_Abort_IT+0x3dc>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d009      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x290>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a57      	ldr	r2, [pc, #348]	@ (8001e34 <HAL_DMA_Abort_IT+0x3e0>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d004      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x290>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a56      	ldr	r2, [pc, #344]	@ (8001e38 <HAL_DMA_Abort_IT+0x3e4>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d108      	bne.n	8001cf6 <HAL_DMA_Abort_IT+0x2a2>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 0201 	bic.w	r2, r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	e007      	b.n	8001d06 <HAL_DMA_Abort_IT+0x2b2>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 0201 	bic.w	r2, r2, #1
 8001d04:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a3c      	ldr	r2, [pc, #240]	@ (8001dfc <HAL_DMA_Abort_IT+0x3a8>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d072      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a3a      	ldr	r2, [pc, #232]	@ (8001e00 <HAL_DMA_Abort_IT+0x3ac>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d06d      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a39      	ldr	r2, [pc, #228]	@ (8001e04 <HAL_DMA_Abort_IT+0x3b0>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d068      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a37      	ldr	r2, [pc, #220]	@ (8001e08 <HAL_DMA_Abort_IT+0x3b4>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d063      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a36      	ldr	r2, [pc, #216]	@ (8001e0c <HAL_DMA_Abort_IT+0x3b8>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d05e      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a34      	ldr	r2, [pc, #208]	@ (8001e10 <HAL_DMA_Abort_IT+0x3bc>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d059      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a33      	ldr	r2, [pc, #204]	@ (8001e14 <HAL_DMA_Abort_IT+0x3c0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d054      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a31      	ldr	r2, [pc, #196]	@ (8001e18 <HAL_DMA_Abort_IT+0x3c4>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d04f      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a30      	ldr	r2, [pc, #192]	@ (8001e1c <HAL_DMA_Abort_IT+0x3c8>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d04a      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a2e      	ldr	r2, [pc, #184]	@ (8001e20 <HAL_DMA_Abort_IT+0x3cc>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d045      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a2d      	ldr	r2, [pc, #180]	@ (8001e24 <HAL_DMA_Abort_IT+0x3d0>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d040      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a2b      	ldr	r2, [pc, #172]	@ (8001e28 <HAL_DMA_Abort_IT+0x3d4>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d03b      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a2a      	ldr	r2, [pc, #168]	@ (8001e2c <HAL_DMA_Abort_IT+0x3d8>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d036      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a28      	ldr	r2, [pc, #160]	@ (8001e30 <HAL_DMA_Abort_IT+0x3dc>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d031      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a27      	ldr	r2, [pc, #156]	@ (8001e34 <HAL_DMA_Abort_IT+0x3e0>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d02c      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a25      	ldr	r2, [pc, #148]	@ (8001e38 <HAL_DMA_Abort_IT+0x3e4>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d027      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a24      	ldr	r2, [pc, #144]	@ (8001e3c <HAL_DMA_Abort_IT+0x3e8>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d022      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a22      	ldr	r2, [pc, #136]	@ (8001e40 <HAL_DMA_Abort_IT+0x3ec>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d01d      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a21      	ldr	r2, [pc, #132]	@ (8001e44 <HAL_DMA_Abort_IT+0x3f0>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d018      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a1f      	ldr	r2, [pc, #124]	@ (8001e48 <HAL_DMA_Abort_IT+0x3f4>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d013      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a1e      	ldr	r2, [pc, #120]	@ (8001e4c <HAL_DMA_Abort_IT+0x3f8>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d00e      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a1c      	ldr	r2, [pc, #112]	@ (8001e50 <HAL_DMA_Abort_IT+0x3fc>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d009      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a1b      	ldr	r2, [pc, #108]	@ (8001e54 <HAL_DMA_Abort_IT+0x400>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d004      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x3a2>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a19      	ldr	r2, [pc, #100]	@ (8001e58 <HAL_DMA_Abort_IT+0x404>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d132      	bne.n	8001e5c <HAL_DMA_Abort_IT+0x408>
 8001df6:	2301      	movs	r3, #1
 8001df8:	e031      	b.n	8001e5e <HAL_DMA_Abort_IT+0x40a>
 8001dfa:	bf00      	nop
 8001dfc:	40020010 	.word	0x40020010
 8001e00:	40020028 	.word	0x40020028
 8001e04:	40020040 	.word	0x40020040
 8001e08:	40020058 	.word	0x40020058
 8001e0c:	40020070 	.word	0x40020070
 8001e10:	40020088 	.word	0x40020088
 8001e14:	400200a0 	.word	0x400200a0
 8001e18:	400200b8 	.word	0x400200b8
 8001e1c:	40020410 	.word	0x40020410
 8001e20:	40020428 	.word	0x40020428
 8001e24:	40020440 	.word	0x40020440
 8001e28:	40020458 	.word	0x40020458
 8001e2c:	40020470 	.word	0x40020470
 8001e30:	40020488 	.word	0x40020488
 8001e34:	400204a0 	.word	0x400204a0
 8001e38:	400204b8 	.word	0x400204b8
 8001e3c:	58025408 	.word	0x58025408
 8001e40:	5802541c 	.word	0x5802541c
 8001e44:	58025430 	.word	0x58025430
 8001e48:	58025444 	.word	0x58025444
 8001e4c:	58025458 	.word	0x58025458
 8001e50:	5802546c 	.word	0x5802546c
 8001e54:	58025480 	.word	0x58025480
 8001e58:	58025494 	.word	0x58025494
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d028      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e70:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e76:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e7c:	f003 031f 	and.w	r3, r3, #31
 8001e80:	2201      	movs	r2, #1
 8001e82:	409a      	lsls	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001e90:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00c      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ea4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ea8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001eb2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop

08001ee0 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b087      	sub	sp, #28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	607a      	str	r2, [r7, #4]
 8001eec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e00a      	b.n	8001f12 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8001efc:	7afb      	ldrb	r3, [r7, #11]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d103      	bne.n	8001f0a <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	605a      	str	r2, [r3, #4]
      break;
 8001f08:	e002      	b.n	8001f10 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	75fb      	strb	r3, [r7, #23]
      break;
 8001f0e:	bf00      	nop
  }

  return status;
 8001f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	371c      	adds	r7, #28
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e003      	b.n	8001f3a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001f38:	2300      	movs	r3, #0
  }
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
	...

08001f48 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	0c1b      	lsrs	r3, r3, #16
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 031f 	and.w	r3, r3, #31
 8001f64:	2201      	movs	r2, #1
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	011a      	lsls	r2, r3, #4
 8001f70:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa4 <HAL_EXTI_IRQHandler+0x5c>)
 8001f72:	4413      	add	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d009      	beq.n	8001f9a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d002      	beq.n	8001f9a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	4798      	blx	r3
    }
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	3718      	adds	r7, #24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	58000088 	.word	0x58000088

08001fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b089      	sub	sp, #36	@ 0x24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001fb6:	4b89      	ldr	r3, [pc, #548]	@ (80021dc <HAL_GPIO_Init+0x234>)
 8001fb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001fba:	e194      	b.n	80022e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 8186 	beq.w	80022e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 0303 	and.w	r3, r3, #3
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d005      	beq.n	8001fec <HAL_GPIO_Init+0x44>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d130      	bne.n	800204e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	68da      	ldr	r2, [r3, #12]
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002022:	2201      	movs	r2, #1
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4013      	ands	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	091b      	lsrs	r3, r3, #4
 8002038:	f003 0201 	and.w	r2, r3, #1
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	2b03      	cmp	r3, #3
 8002058:	d017      	beq.n	800208a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	2203      	movs	r2, #3
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4013      	ands	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4313      	orrs	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d123      	bne.n	80020de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	08da      	lsrs	r2, r3, #3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3208      	adds	r2, #8
 800209e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	220f      	movs	r2, #15
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4013      	ands	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	691a      	ldr	r2, [r3, #16]
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	08da      	lsrs	r2, r3, #3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3208      	adds	r2, #8
 80020d8:	69b9      	ldr	r1, [r7, #24]
 80020da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	2203      	movs	r2, #3
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4013      	ands	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f003 0203 	and.w	r2, r3, #3
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 80e0 	beq.w	80022e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002120:	4b2f      	ldr	r3, [pc, #188]	@ (80021e0 <HAL_GPIO_Init+0x238>)
 8002122:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002126:	4a2e      	ldr	r2, [pc, #184]	@ (80021e0 <HAL_GPIO_Init+0x238>)
 8002128:	f043 0302 	orr.w	r3, r3, #2
 800212c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002130:	4b2b      	ldr	r3, [pc, #172]	@ (80021e0 <HAL_GPIO_Init+0x238>)
 8002132:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800213e:	4a29      	ldr	r2, [pc, #164]	@ (80021e4 <HAL_GPIO_Init+0x23c>)
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	089b      	lsrs	r3, r3, #2
 8002144:	3302      	adds	r3, #2
 8002146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	220f      	movs	r2, #15
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43db      	mvns	r3, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4013      	ands	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a20      	ldr	r2, [pc, #128]	@ (80021e8 <HAL_GPIO_Init+0x240>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d052      	beq.n	8002210 <HAL_GPIO_Init+0x268>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a1f      	ldr	r2, [pc, #124]	@ (80021ec <HAL_GPIO_Init+0x244>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d031      	beq.n	80021d6 <HAL_GPIO_Init+0x22e>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a1e      	ldr	r2, [pc, #120]	@ (80021f0 <HAL_GPIO_Init+0x248>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d02b      	beq.n	80021d2 <HAL_GPIO_Init+0x22a>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a1d      	ldr	r2, [pc, #116]	@ (80021f4 <HAL_GPIO_Init+0x24c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d025      	beq.n	80021ce <HAL_GPIO_Init+0x226>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a1c      	ldr	r2, [pc, #112]	@ (80021f8 <HAL_GPIO_Init+0x250>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d01f      	beq.n	80021ca <HAL_GPIO_Init+0x222>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a1b      	ldr	r2, [pc, #108]	@ (80021fc <HAL_GPIO_Init+0x254>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d019      	beq.n	80021c6 <HAL_GPIO_Init+0x21e>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a1a      	ldr	r2, [pc, #104]	@ (8002200 <HAL_GPIO_Init+0x258>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d013      	beq.n	80021c2 <HAL_GPIO_Init+0x21a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a19      	ldr	r2, [pc, #100]	@ (8002204 <HAL_GPIO_Init+0x25c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d00d      	beq.n	80021be <HAL_GPIO_Init+0x216>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a18      	ldr	r2, [pc, #96]	@ (8002208 <HAL_GPIO_Init+0x260>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d007      	beq.n	80021ba <HAL_GPIO_Init+0x212>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a17      	ldr	r2, [pc, #92]	@ (800220c <HAL_GPIO_Init+0x264>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d101      	bne.n	80021b6 <HAL_GPIO_Init+0x20e>
 80021b2:	2309      	movs	r3, #9
 80021b4:	e02d      	b.n	8002212 <HAL_GPIO_Init+0x26a>
 80021b6:	230a      	movs	r3, #10
 80021b8:	e02b      	b.n	8002212 <HAL_GPIO_Init+0x26a>
 80021ba:	2308      	movs	r3, #8
 80021bc:	e029      	b.n	8002212 <HAL_GPIO_Init+0x26a>
 80021be:	2307      	movs	r3, #7
 80021c0:	e027      	b.n	8002212 <HAL_GPIO_Init+0x26a>
 80021c2:	2306      	movs	r3, #6
 80021c4:	e025      	b.n	8002212 <HAL_GPIO_Init+0x26a>
 80021c6:	2305      	movs	r3, #5
 80021c8:	e023      	b.n	8002212 <HAL_GPIO_Init+0x26a>
 80021ca:	2304      	movs	r3, #4
 80021cc:	e021      	b.n	8002212 <HAL_GPIO_Init+0x26a>
 80021ce:	2303      	movs	r3, #3
 80021d0:	e01f      	b.n	8002212 <HAL_GPIO_Init+0x26a>
 80021d2:	2302      	movs	r3, #2
 80021d4:	e01d      	b.n	8002212 <HAL_GPIO_Init+0x26a>
 80021d6:	2301      	movs	r3, #1
 80021d8:	e01b      	b.n	8002212 <HAL_GPIO_Init+0x26a>
 80021da:	bf00      	nop
 80021dc:	58000080 	.word	0x58000080
 80021e0:	58024400 	.word	0x58024400
 80021e4:	58000400 	.word	0x58000400
 80021e8:	58020000 	.word	0x58020000
 80021ec:	58020400 	.word	0x58020400
 80021f0:	58020800 	.word	0x58020800
 80021f4:	58020c00 	.word	0x58020c00
 80021f8:	58021000 	.word	0x58021000
 80021fc:	58021400 	.word	0x58021400
 8002200:	58021800 	.word	0x58021800
 8002204:	58021c00 	.word	0x58021c00
 8002208:	58022000 	.word	0x58022000
 800220c:	58022400 	.word	0x58022400
 8002210:	2300      	movs	r3, #0
 8002212:	69fa      	ldr	r2, [r7, #28]
 8002214:	f002 0203 	and.w	r2, r2, #3
 8002218:	0092      	lsls	r2, r2, #2
 800221a:	4093      	lsls	r3, r2
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002222:	4938      	ldr	r1, [pc, #224]	@ (8002304 <HAL_GPIO_Init+0x35c>)
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	089b      	lsrs	r3, r3, #2
 8002228:	3302      	adds	r3, #2
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002230:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	43db      	mvns	r3, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4013      	ands	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002256:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800225e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002284:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	43db      	mvns	r3, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4013      	ands	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	3301      	adds	r3, #1
 80022e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f47f ae63 	bne.w	8001fbc <HAL_GPIO_Init+0x14>
  }
}
 80022f6:	bf00      	nop
 80022f8:	bf00      	nop
 80022fa:	3724      	adds	r7, #36	@ 0x24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	58000400 	.word	0x58000400

08002308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	807b      	strh	r3, [r7, #2]
 8002314:	4613      	mov	r3, r2
 8002316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002318:	787b      	ldrb	r3, [r7, #1]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800231e:	887a      	ldrh	r2, [r7, #2]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002324:	e003      	b.n	800232e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002326:	887b      	ldrh	r3, [r7, #2]
 8002328:	041a      	lsls	r2, r3, #16
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	619a      	str	r2, [r3, #24]
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800233a:	b480      	push	{r7}
 800233c:	b085      	sub	sp, #20
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	460b      	mov	r3, r1
 8002344:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800234c:	887a      	ldrh	r2, [r7, #2]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	4013      	ands	r3, r2
 8002352:	041a      	lsls	r2, r3, #16
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	43d9      	mvns	r1, r3
 8002358:	887b      	ldrh	r3, [r7, #2]
 800235a:	400b      	ands	r3, r1
 800235c:	431a      	orrs	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	619a      	str	r2, [r3, #24]
}
 8002362:	bf00      	nop
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b082      	sub	sp, #8
 8002372:	af00      	add	r7, sp, #0
 8002374:	4603      	mov	r3, r0
 8002376:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002378:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800237c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002380:	88fb      	ldrh	r3, [r7, #6]
 8002382:	4013      	ands	r3, r2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d008      	beq.n	800239a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002388:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800238c:	88fb      	ldrh	r3, [r7, #6]
 800238e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002392:	88fb      	ldrh	r3, [r7, #6]
 8002394:	4618      	mov	r0, r3
 8002396:	f7fe fbdf 	bl	8000b58 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80023ac:	4b19      	ldr	r3, [pc, #100]	@ (8002414 <HAL_PWREx_ConfigSupply+0x70>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b04      	cmp	r3, #4
 80023b6:	d00a      	beq.n	80023ce <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80023b8:	4b16      	ldr	r3, [pc, #88]	@ (8002414 <HAL_PWREx_ConfigSupply+0x70>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d001      	beq.n	80023ca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e01f      	b.n	800240a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80023ca:	2300      	movs	r3, #0
 80023cc:	e01d      	b.n	800240a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80023ce:	4b11      	ldr	r3, [pc, #68]	@ (8002414 <HAL_PWREx_ConfigSupply+0x70>)
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	f023 0207 	bic.w	r2, r3, #7
 80023d6:	490f      	ldr	r1, [pc, #60]	@ (8002414 <HAL_PWREx_ConfigSupply+0x70>)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4313      	orrs	r3, r2
 80023dc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80023de:	f7ff f975 	bl	80016cc <HAL_GetTick>
 80023e2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80023e4:	e009      	b.n	80023fa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80023e6:	f7ff f971 	bl	80016cc <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023f4:	d901      	bls.n	80023fa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e007      	b.n	800240a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80023fa:	4b06      	ldr	r3, [pc, #24]	@ (8002414 <HAL_PWREx_ConfigSupply+0x70>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002402:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002406:	d1ee      	bne.n	80023e6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	58024800 	.word	0x58024800

08002418 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b08c      	sub	sp, #48	@ 0x30
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d102      	bne.n	800242c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	f000 bc48 	b.w	8002cbc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 8088 	beq.w	800254a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800243a:	4b99      	ldr	r3, [pc, #612]	@ (80026a0 <HAL_RCC_OscConfig+0x288>)
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002442:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002444:	4b96      	ldr	r3, [pc, #600]	@ (80026a0 <HAL_RCC_OscConfig+0x288>)
 8002446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002448:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800244a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800244c:	2b10      	cmp	r3, #16
 800244e:	d007      	beq.n	8002460 <HAL_RCC_OscConfig+0x48>
 8002450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002452:	2b18      	cmp	r3, #24
 8002454:	d111      	bne.n	800247a <HAL_RCC_OscConfig+0x62>
 8002456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002458:	f003 0303 	and.w	r3, r3, #3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d10c      	bne.n	800247a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002460:	4b8f      	ldr	r3, [pc, #572]	@ (80026a0 <HAL_RCC_OscConfig+0x288>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d06d      	beq.n	8002548 <HAL_RCC_OscConfig+0x130>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d169      	bne.n	8002548 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	f000 bc21 	b.w	8002cbc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002482:	d106      	bne.n	8002492 <HAL_RCC_OscConfig+0x7a>
 8002484:	4b86      	ldr	r3, [pc, #536]	@ (80026a0 <HAL_RCC_OscConfig+0x288>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a85      	ldr	r2, [pc, #532]	@ (80026a0 <HAL_RCC_OscConfig+0x288>)
 800248a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	e02e      	b.n	80024f0 <HAL_RCC_OscConfig+0xd8>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10c      	bne.n	80024b4 <HAL_RCC_OscConfig+0x9c>
 800249a:	4b81      	ldr	r3, [pc, #516]	@ (80026a0 <HAL_RCC_OscConfig+0x288>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a80      	ldr	r2, [pc, #512]	@ (80026a0 <HAL_RCC_OscConfig+0x288>)
 80024a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	4b7e      	ldr	r3, [pc, #504]	@ (80026a0 <HAL_RCC_OscConfig+0x288>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a7d      	ldr	r2, [pc, #500]	@ (80026a0 <HAL_RCC_OscConfig+0x288>)
 80024ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	e01d      	b.n	80024f0 <HAL_RCC_OscConfig+0xd8>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024bc:	d10c      	bne.n	80024d8 <HAL_RCC_OscConfig+0xc0>
 80024be:	4b78      	ldr	r3, [pc, #480]	@ (80026a0 <HAL_RCC_OscConfig+0x288>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a77      	ldr	r2, [pc, #476]	@ (80026a0 <HAL_RCC_OscConfig+0x288>)
 80024c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	4b75      	ldr	r3, [pc, #468]	@ (80026a0 <HAL_RCC_OscConfig+0x288>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a74      	ldr	r2, [pc, #464]	@ (80026a0 <HAL_RCC_OscConfig+0x288>)
 80024d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	e00b      	b.n	80024f0 <HAL_RCC_OscConfig+0xd8>
 80024d8:	4b71      	ldr	r3, [pc, #452]	@ (80026a0 <HAL_RCC_OscConfig+0x288>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a70      	ldr	r2, [pc, #448]	@ (80026a0 <HAL_RCC_OscConfig+0x288>)
 80024de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024e2:	6013      	str	r3, [r2, #0]
 80024e4:	4b6e      	ldr	r3, [pc, #440]	@ (80026a0 <HAL_RCC_OscConfig+0x288>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a6d      	ldr	r2, [pc, #436]	@ (80026a0 <HAL_RCC_OscConfig+0x288>)
 80024ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d013      	beq.n	8002520 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f8:	f7ff f8e8 	bl	80016cc <HAL_GetTick>
 80024fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002500:	f7ff f8e4 	bl	80016cc <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b64      	cmp	r3, #100	@ 0x64
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e3d4      	b.n	8002cbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002512:	4b63      	ldr	r3, [pc, #396]	@ (80026a0 <HAL_RCC_OscConfig+0x288>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0f0      	beq.n	8002500 <HAL_RCC_OscConfig+0xe8>
 800251e:	e014      	b.n	800254a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002520:	f7ff f8d4 	bl	80016cc <HAL_GetTick>
 8002524:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002528:	f7ff f8d0 	bl	80016cc <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b64      	cmp	r3, #100	@ 0x64
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e3c0      	b.n	8002cbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800253a:	4b59      	ldr	r3, [pc, #356]	@ (80026a0 <HAL_RCC_OscConfig+0x288>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f0      	bne.n	8002528 <HAL_RCC_OscConfig+0x110>
 8002546:	e000      	b.n	800254a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 80ca 	beq.w	80026ec <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002558:	4b51      	ldr	r3, [pc, #324]	@ (80026a0 <HAL_RCC_OscConfig+0x288>)
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002560:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002562:	4b4f      	ldr	r3, [pc, #316]	@ (80026a0 <HAL_RCC_OscConfig+0x288>)
 8002564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002566:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002568:	6a3b      	ldr	r3, [r7, #32]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d007      	beq.n	800257e <HAL_RCC_OscConfig+0x166>
 800256e:	6a3b      	ldr	r3, [r7, #32]
 8002570:	2b18      	cmp	r3, #24
 8002572:	d156      	bne.n	8002622 <HAL_RCC_OscConfig+0x20a>
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d151      	bne.n	8002622 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800257e:	4b48      	ldr	r3, [pc, #288]	@ (80026a0 <HAL_RCC_OscConfig+0x288>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0304 	and.w	r3, r3, #4
 8002586:	2b00      	cmp	r3, #0
 8002588:	d005      	beq.n	8002596 <HAL_RCC_OscConfig+0x17e>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e392      	b.n	8002cbc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002596:	4b42      	ldr	r3, [pc, #264]	@ (80026a0 <HAL_RCC_OscConfig+0x288>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 0219 	bic.w	r2, r3, #25
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	493f      	ldr	r1, [pc, #252]	@ (80026a0 <HAL_RCC_OscConfig+0x288>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a8:	f7ff f890 	bl	80016cc <HAL_GetTick>
 80025ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b0:	f7ff f88c 	bl	80016cc <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e37c      	b.n	8002cbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025c2:	4b37      	ldr	r3, [pc, #220]	@ (80026a0 <HAL_RCC_OscConfig+0x288>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0304 	and.w	r3, r3, #4
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0f0      	beq.n	80025b0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ce:	f7ff f8ad 	bl	800172c <HAL_GetREVID>
 80025d2:	4603      	mov	r3, r0
 80025d4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80025d8:	4293      	cmp	r3, r2
 80025da:	d817      	bhi.n	800260c <HAL_RCC_OscConfig+0x1f4>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	2b40      	cmp	r3, #64	@ 0x40
 80025e2:	d108      	bne.n	80025f6 <HAL_RCC_OscConfig+0x1de>
 80025e4:	4b2e      	ldr	r3, [pc, #184]	@ (80026a0 <HAL_RCC_OscConfig+0x288>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80025ec:	4a2c      	ldr	r2, [pc, #176]	@ (80026a0 <HAL_RCC_OscConfig+0x288>)
 80025ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025f2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025f4:	e07a      	b.n	80026ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f6:	4b2a      	ldr	r3, [pc, #168]	@ (80026a0 <HAL_RCC_OscConfig+0x288>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	031b      	lsls	r3, r3, #12
 8002604:	4926      	ldr	r1, [pc, #152]	@ (80026a0 <HAL_RCC_OscConfig+0x288>)
 8002606:	4313      	orrs	r3, r2
 8002608:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800260a:	e06f      	b.n	80026ec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800260c:	4b24      	ldr	r3, [pc, #144]	@ (80026a0 <HAL_RCC_OscConfig+0x288>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	061b      	lsls	r3, r3, #24
 800261a:	4921      	ldr	r1, [pc, #132]	@ (80026a0 <HAL_RCC_OscConfig+0x288>)
 800261c:	4313      	orrs	r3, r2
 800261e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002620:	e064      	b.n	80026ec <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d047      	beq.n	80026ba <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800262a:	4b1d      	ldr	r3, [pc, #116]	@ (80026a0 <HAL_RCC_OscConfig+0x288>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f023 0219 	bic.w	r2, r3, #25
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	491a      	ldr	r1, [pc, #104]	@ (80026a0 <HAL_RCC_OscConfig+0x288>)
 8002638:	4313      	orrs	r3, r2
 800263a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263c:	f7ff f846 	bl	80016cc <HAL_GetTick>
 8002640:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002644:	f7ff f842 	bl	80016cc <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e332      	b.n	8002cbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002656:	4b12      	ldr	r3, [pc, #72]	@ (80026a0 <HAL_RCC_OscConfig+0x288>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0304 	and.w	r3, r3, #4
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0f0      	beq.n	8002644 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002662:	f7ff f863 	bl	800172c <HAL_GetREVID>
 8002666:	4603      	mov	r3, r0
 8002668:	f241 0203 	movw	r2, #4099	@ 0x1003
 800266c:	4293      	cmp	r3, r2
 800266e:	d819      	bhi.n	80026a4 <HAL_RCC_OscConfig+0x28c>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	2b40      	cmp	r3, #64	@ 0x40
 8002676:	d108      	bne.n	800268a <HAL_RCC_OscConfig+0x272>
 8002678:	4b09      	ldr	r3, [pc, #36]	@ (80026a0 <HAL_RCC_OscConfig+0x288>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002680:	4a07      	ldr	r2, [pc, #28]	@ (80026a0 <HAL_RCC_OscConfig+0x288>)
 8002682:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002686:	6053      	str	r3, [r2, #4]
 8002688:	e030      	b.n	80026ec <HAL_RCC_OscConfig+0x2d4>
 800268a:	4b05      	ldr	r3, [pc, #20]	@ (80026a0 <HAL_RCC_OscConfig+0x288>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	031b      	lsls	r3, r3, #12
 8002698:	4901      	ldr	r1, [pc, #4]	@ (80026a0 <HAL_RCC_OscConfig+0x288>)
 800269a:	4313      	orrs	r3, r2
 800269c:	604b      	str	r3, [r1, #4]
 800269e:	e025      	b.n	80026ec <HAL_RCC_OscConfig+0x2d4>
 80026a0:	58024400 	.word	0x58024400
 80026a4:	4b9a      	ldr	r3, [pc, #616]	@ (8002910 <HAL_RCC_OscConfig+0x4f8>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	061b      	lsls	r3, r3, #24
 80026b2:	4997      	ldr	r1, [pc, #604]	@ (8002910 <HAL_RCC_OscConfig+0x4f8>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	604b      	str	r3, [r1, #4]
 80026b8:	e018      	b.n	80026ec <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ba:	4b95      	ldr	r3, [pc, #596]	@ (8002910 <HAL_RCC_OscConfig+0x4f8>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a94      	ldr	r2, [pc, #592]	@ (8002910 <HAL_RCC_OscConfig+0x4f8>)
 80026c0:	f023 0301 	bic.w	r3, r3, #1
 80026c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c6:	f7ff f801 	bl	80016cc <HAL_GetTick>
 80026ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ce:	f7fe fffd 	bl	80016cc <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e2ed      	b.n	8002cbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026e0:	4b8b      	ldr	r3, [pc, #556]	@ (8002910 <HAL_RCC_OscConfig+0x4f8>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1f0      	bne.n	80026ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0310 	and.w	r3, r3, #16
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 80a9 	beq.w	800284c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026fa:	4b85      	ldr	r3, [pc, #532]	@ (8002910 <HAL_RCC_OscConfig+0x4f8>)
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002702:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002704:	4b82      	ldr	r3, [pc, #520]	@ (8002910 <HAL_RCC_OscConfig+0x4f8>)
 8002706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002708:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	2b08      	cmp	r3, #8
 800270e:	d007      	beq.n	8002720 <HAL_RCC_OscConfig+0x308>
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	2b18      	cmp	r3, #24
 8002714:	d13a      	bne.n	800278c <HAL_RCC_OscConfig+0x374>
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f003 0303 	and.w	r3, r3, #3
 800271c:	2b01      	cmp	r3, #1
 800271e:	d135      	bne.n	800278c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002720:	4b7b      	ldr	r3, [pc, #492]	@ (8002910 <HAL_RCC_OscConfig+0x4f8>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002728:	2b00      	cmp	r3, #0
 800272a:	d005      	beq.n	8002738 <HAL_RCC_OscConfig+0x320>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	2b80      	cmp	r3, #128	@ 0x80
 8002732:	d001      	beq.n	8002738 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e2c1      	b.n	8002cbc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002738:	f7fe fff8 	bl	800172c <HAL_GetREVID>
 800273c:	4603      	mov	r3, r0
 800273e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002742:	4293      	cmp	r3, r2
 8002744:	d817      	bhi.n	8002776 <HAL_RCC_OscConfig+0x35e>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	2b20      	cmp	r3, #32
 800274c:	d108      	bne.n	8002760 <HAL_RCC_OscConfig+0x348>
 800274e:	4b70      	ldr	r3, [pc, #448]	@ (8002910 <HAL_RCC_OscConfig+0x4f8>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002756:	4a6e      	ldr	r2, [pc, #440]	@ (8002910 <HAL_RCC_OscConfig+0x4f8>)
 8002758:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800275c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800275e:	e075      	b.n	800284c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002760:	4b6b      	ldr	r3, [pc, #428]	@ (8002910 <HAL_RCC_OscConfig+0x4f8>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	069b      	lsls	r3, r3, #26
 800276e:	4968      	ldr	r1, [pc, #416]	@ (8002910 <HAL_RCC_OscConfig+0x4f8>)
 8002770:	4313      	orrs	r3, r2
 8002772:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002774:	e06a      	b.n	800284c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002776:	4b66      	ldr	r3, [pc, #408]	@ (8002910 <HAL_RCC_OscConfig+0x4f8>)
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	061b      	lsls	r3, r3, #24
 8002784:	4962      	ldr	r1, [pc, #392]	@ (8002910 <HAL_RCC_OscConfig+0x4f8>)
 8002786:	4313      	orrs	r3, r2
 8002788:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800278a:	e05f      	b.n	800284c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d042      	beq.n	800281a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002794:	4b5e      	ldr	r3, [pc, #376]	@ (8002910 <HAL_RCC_OscConfig+0x4f8>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a5d      	ldr	r2, [pc, #372]	@ (8002910 <HAL_RCC_OscConfig+0x4f8>)
 800279a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800279e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a0:	f7fe ff94 	bl	80016cc <HAL_GetTick>
 80027a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80027a8:	f7fe ff90 	bl	80016cc <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e280      	b.n	8002cbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027ba:	4b55      	ldr	r3, [pc, #340]	@ (8002910 <HAL_RCC_OscConfig+0x4f8>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0f0      	beq.n	80027a8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027c6:	f7fe ffb1 	bl	800172c <HAL_GetREVID>
 80027ca:	4603      	mov	r3, r0
 80027cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d817      	bhi.n	8002804 <HAL_RCC_OscConfig+0x3ec>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	2b20      	cmp	r3, #32
 80027da:	d108      	bne.n	80027ee <HAL_RCC_OscConfig+0x3d6>
 80027dc:	4b4c      	ldr	r3, [pc, #304]	@ (8002910 <HAL_RCC_OscConfig+0x4f8>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80027e4:	4a4a      	ldr	r2, [pc, #296]	@ (8002910 <HAL_RCC_OscConfig+0x4f8>)
 80027e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80027ea:	6053      	str	r3, [r2, #4]
 80027ec:	e02e      	b.n	800284c <HAL_RCC_OscConfig+0x434>
 80027ee:	4b48      	ldr	r3, [pc, #288]	@ (8002910 <HAL_RCC_OscConfig+0x4f8>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	069b      	lsls	r3, r3, #26
 80027fc:	4944      	ldr	r1, [pc, #272]	@ (8002910 <HAL_RCC_OscConfig+0x4f8>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	604b      	str	r3, [r1, #4]
 8002802:	e023      	b.n	800284c <HAL_RCC_OscConfig+0x434>
 8002804:	4b42      	ldr	r3, [pc, #264]	@ (8002910 <HAL_RCC_OscConfig+0x4f8>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	061b      	lsls	r3, r3, #24
 8002812:	493f      	ldr	r1, [pc, #252]	@ (8002910 <HAL_RCC_OscConfig+0x4f8>)
 8002814:	4313      	orrs	r3, r2
 8002816:	60cb      	str	r3, [r1, #12]
 8002818:	e018      	b.n	800284c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800281a:	4b3d      	ldr	r3, [pc, #244]	@ (8002910 <HAL_RCC_OscConfig+0x4f8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a3c      	ldr	r2, [pc, #240]	@ (8002910 <HAL_RCC_OscConfig+0x4f8>)
 8002820:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002824:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002826:	f7fe ff51 	bl	80016cc <HAL_GetTick>
 800282a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800282e:	f7fe ff4d 	bl	80016cc <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e23d      	b.n	8002cbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002840:	4b33      	ldr	r3, [pc, #204]	@ (8002910 <HAL_RCC_OscConfig+0x4f8>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1f0      	bne.n	800282e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	2b00      	cmp	r3, #0
 8002856:	d036      	beq.n	80028c6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d019      	beq.n	8002894 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002860:	4b2b      	ldr	r3, [pc, #172]	@ (8002910 <HAL_RCC_OscConfig+0x4f8>)
 8002862:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002864:	4a2a      	ldr	r2, [pc, #168]	@ (8002910 <HAL_RCC_OscConfig+0x4f8>)
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286c:	f7fe ff2e 	bl	80016cc <HAL_GetTick>
 8002870:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002874:	f7fe ff2a 	bl	80016cc <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e21a      	b.n	8002cbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002886:	4b22      	ldr	r3, [pc, #136]	@ (8002910 <HAL_RCC_OscConfig+0x4f8>)
 8002888:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0f0      	beq.n	8002874 <HAL_RCC_OscConfig+0x45c>
 8002892:	e018      	b.n	80028c6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002894:	4b1e      	ldr	r3, [pc, #120]	@ (8002910 <HAL_RCC_OscConfig+0x4f8>)
 8002896:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002898:	4a1d      	ldr	r2, [pc, #116]	@ (8002910 <HAL_RCC_OscConfig+0x4f8>)
 800289a:	f023 0301 	bic.w	r3, r3, #1
 800289e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a0:	f7fe ff14 	bl	80016cc <HAL_GetTick>
 80028a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a8:	f7fe ff10 	bl	80016cc <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e200      	b.n	8002cbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028ba:	4b15      	ldr	r3, [pc, #84]	@ (8002910 <HAL_RCC_OscConfig+0x4f8>)
 80028bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f0      	bne.n	80028a8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0320 	and.w	r3, r3, #32
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d039      	beq.n	8002946 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d01c      	beq.n	8002914 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028da:	4b0d      	ldr	r3, [pc, #52]	@ (8002910 <HAL_RCC_OscConfig+0x4f8>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a0c      	ldr	r2, [pc, #48]	@ (8002910 <HAL_RCC_OscConfig+0x4f8>)
 80028e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80028e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028e6:	f7fe fef1 	bl	80016cc <HAL_GetTick>
 80028ea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028ee:	f7fe feed 	bl	80016cc <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e1dd      	b.n	8002cbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002900:	4b03      	ldr	r3, [pc, #12]	@ (8002910 <HAL_RCC_OscConfig+0x4f8>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0f0      	beq.n	80028ee <HAL_RCC_OscConfig+0x4d6>
 800290c:	e01b      	b.n	8002946 <HAL_RCC_OscConfig+0x52e>
 800290e:	bf00      	nop
 8002910:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002914:	4b9b      	ldr	r3, [pc, #620]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a9a      	ldr	r2, [pc, #616]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 800291a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800291e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002920:	f7fe fed4 	bl	80016cc <HAL_GetTick>
 8002924:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002928:	f7fe fed0 	bl	80016cc <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e1c0      	b.n	8002cbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800293a:	4b92      	ldr	r3, [pc, #584]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f0      	bne.n	8002928 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0304 	and.w	r3, r3, #4
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 8081 	beq.w	8002a56 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002954:	4b8c      	ldr	r3, [pc, #560]	@ (8002b88 <HAL_RCC_OscConfig+0x770>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a8b      	ldr	r2, [pc, #556]	@ (8002b88 <HAL_RCC_OscConfig+0x770>)
 800295a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800295e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002960:	f7fe feb4 	bl	80016cc <HAL_GetTick>
 8002964:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002968:	f7fe feb0 	bl	80016cc <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b64      	cmp	r3, #100	@ 0x64
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e1a0      	b.n	8002cbc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800297a:	4b83      	ldr	r3, [pc, #524]	@ (8002b88 <HAL_RCC_OscConfig+0x770>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d106      	bne.n	800299c <HAL_RCC_OscConfig+0x584>
 800298e:	4b7d      	ldr	r3, [pc, #500]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 8002990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002992:	4a7c      	ldr	r2, [pc, #496]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 8002994:	f043 0301 	orr.w	r3, r3, #1
 8002998:	6713      	str	r3, [r2, #112]	@ 0x70
 800299a:	e02d      	b.n	80029f8 <HAL_RCC_OscConfig+0x5e0>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d10c      	bne.n	80029be <HAL_RCC_OscConfig+0x5a6>
 80029a4:	4b77      	ldr	r3, [pc, #476]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 80029a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a8:	4a76      	ldr	r2, [pc, #472]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 80029aa:	f023 0301 	bic.w	r3, r3, #1
 80029ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80029b0:	4b74      	ldr	r3, [pc, #464]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 80029b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b4:	4a73      	ldr	r2, [pc, #460]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 80029b6:	f023 0304 	bic.w	r3, r3, #4
 80029ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80029bc:	e01c      	b.n	80029f8 <HAL_RCC_OscConfig+0x5e0>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2b05      	cmp	r3, #5
 80029c4:	d10c      	bne.n	80029e0 <HAL_RCC_OscConfig+0x5c8>
 80029c6:	4b6f      	ldr	r3, [pc, #444]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 80029c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ca:	4a6e      	ldr	r2, [pc, #440]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 80029cc:	f043 0304 	orr.w	r3, r3, #4
 80029d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80029d2:	4b6c      	ldr	r3, [pc, #432]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 80029d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d6:	4a6b      	ldr	r2, [pc, #428]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80029de:	e00b      	b.n	80029f8 <HAL_RCC_OscConfig+0x5e0>
 80029e0:	4b68      	ldr	r3, [pc, #416]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 80029e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e4:	4a67      	ldr	r2, [pc, #412]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 80029e6:	f023 0301 	bic.w	r3, r3, #1
 80029ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80029ec:	4b65      	ldr	r3, [pc, #404]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 80029ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f0:	4a64      	ldr	r2, [pc, #400]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 80029f2:	f023 0304 	bic.w	r3, r3, #4
 80029f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d015      	beq.n	8002a2c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a00:	f7fe fe64 	bl	80016cc <HAL_GetTick>
 8002a04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a06:	e00a      	b.n	8002a1e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a08:	f7fe fe60 	bl	80016cc <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e14e      	b.n	8002cbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a1e:	4b59      	ldr	r3, [pc, #356]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 8002a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0ee      	beq.n	8002a08 <HAL_RCC_OscConfig+0x5f0>
 8002a2a:	e014      	b.n	8002a56 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2c:	f7fe fe4e 	bl	80016cc <HAL_GetTick>
 8002a30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a32:	e00a      	b.n	8002a4a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a34:	f7fe fe4a 	bl	80016cc <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e138      	b.n	8002cbc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a4a:	4b4e      	ldr	r3, [pc, #312]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 8002a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1ee      	bne.n	8002a34 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 812d 	beq.w	8002cba <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002a60:	4b48      	ldr	r3, [pc, #288]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a68:	2b18      	cmp	r3, #24
 8002a6a:	f000 80bd 	beq.w	8002be8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	f040 809e 	bne.w	8002bb4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a78:	4b42      	ldr	r3, [pc, #264]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a41      	ldr	r2, [pc, #260]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 8002a7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a84:	f7fe fe22 	bl	80016cc <HAL_GetTick>
 8002a88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a8c:	f7fe fe1e 	bl	80016cc <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e10e      	b.n	8002cbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a9e:	4b39      	ldr	r3, [pc, #228]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aaa:	4b36      	ldr	r3, [pc, #216]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 8002aac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002aae:	4b37      	ldr	r3, [pc, #220]	@ (8002b8c <HAL_RCC_OscConfig+0x774>)
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002aba:	0112      	lsls	r2, r2, #4
 8002abc:	430a      	orrs	r2, r1
 8002abe:	4931      	ldr	r1, [pc, #196]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	628b      	str	r3, [r1, #40]	@ 0x28
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	025b      	lsls	r3, r3, #9
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	041b      	lsls	r3, r3, #16
 8002ae2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aec:	3b01      	subs	r3, #1
 8002aee:	061b      	lsls	r3, r3, #24
 8002af0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002af4:	4923      	ldr	r1, [pc, #140]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002afa:	4b22      	ldr	r3, [pc, #136]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 8002afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afe:	4a21      	ldr	r2, [pc, #132]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 8002b00:	f023 0301 	bic.w	r3, r3, #1
 8002b04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b06:	4b1f      	ldr	r3, [pc, #124]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 8002b08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b0a:	4b21      	ldr	r3, [pc, #132]	@ (8002b90 <HAL_RCC_OscConfig+0x778>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b12:	00d2      	lsls	r2, r2, #3
 8002b14:	491b      	ldr	r1, [pc, #108]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002b1a:	4b1a      	ldr	r3, [pc, #104]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 8002b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b1e:	f023 020c 	bic.w	r2, r3, #12
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b26:	4917      	ldr	r1, [pc, #92]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002b2c:	4b15      	ldr	r3, [pc, #84]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 8002b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b30:	f023 0202 	bic.w	r2, r3, #2
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b38:	4912      	ldr	r1, [pc, #72]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b3e:	4b11      	ldr	r3, [pc, #68]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 8002b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b42:	4a10      	ldr	r2, [pc, #64]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 8002b44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 8002b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b4e:	4a0d      	ldr	r2, [pc, #52]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 8002b50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002b56:	4b0b      	ldr	r3, [pc, #44]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 8002b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 8002b5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002b62:	4b08      	ldr	r3, [pc, #32]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 8002b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b66:	4a07      	ldr	r2, [pc, #28]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b6e:	4b05      	ldr	r3, [pc, #20]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a04      	ldr	r2, [pc, #16]	@ (8002b84 <HAL_RCC_OscConfig+0x76c>)
 8002b74:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7a:	f7fe fda7 	bl	80016cc <HAL_GetTick>
 8002b7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b80:	e011      	b.n	8002ba6 <HAL_RCC_OscConfig+0x78e>
 8002b82:	bf00      	nop
 8002b84:	58024400 	.word	0x58024400
 8002b88:	58024800 	.word	0x58024800
 8002b8c:	fffffc0c 	.word	0xfffffc0c
 8002b90:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b94:	f7fe fd9a 	bl	80016cc <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e08a      	b.n	8002cbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ba6:	4b47      	ldr	r3, [pc, #284]	@ (8002cc4 <HAL_RCC_OscConfig+0x8ac>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0f0      	beq.n	8002b94 <HAL_RCC_OscConfig+0x77c>
 8002bb2:	e082      	b.n	8002cba <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bb4:	4b43      	ldr	r3, [pc, #268]	@ (8002cc4 <HAL_RCC_OscConfig+0x8ac>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a42      	ldr	r2, [pc, #264]	@ (8002cc4 <HAL_RCC_OscConfig+0x8ac>)
 8002bba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc0:	f7fe fd84 	bl	80016cc <HAL_GetTick>
 8002bc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc8:	f7fe fd80 	bl	80016cc <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e070      	b.n	8002cbc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bda:	4b3a      	ldr	r3, [pc, #232]	@ (8002cc4 <HAL_RCC_OscConfig+0x8ac>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1f0      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x7b0>
 8002be6:	e068      	b.n	8002cba <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002be8:	4b36      	ldr	r3, [pc, #216]	@ (8002cc4 <HAL_RCC_OscConfig+0x8ac>)
 8002bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002bee:	4b35      	ldr	r3, [pc, #212]	@ (8002cc4 <HAL_RCC_OscConfig+0x8ac>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d031      	beq.n	8002c60 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	f003 0203 	and.w	r2, r3, #3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d12a      	bne.n	8002c60 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	091b      	lsrs	r3, r3, #4
 8002c0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d122      	bne.n	8002c60 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c24:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d11a      	bne.n	8002c60 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	0a5b      	lsrs	r3, r3, #9
 8002c2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c36:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d111      	bne.n	8002c60 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	0c1b      	lsrs	r3, r3, #16
 8002c40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c48:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d108      	bne.n	8002c60 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	0e1b      	lsrs	r3, r3, #24
 8002c52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c5a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e02b      	b.n	8002cbc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002c64:	4b17      	ldr	r3, [pc, #92]	@ (8002cc4 <HAL_RCC_OscConfig+0x8ac>)
 8002c66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c68:	08db      	lsrs	r3, r3, #3
 8002c6a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c6e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d01f      	beq.n	8002cba <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002c7a:	4b12      	ldr	r3, [pc, #72]	@ (8002cc4 <HAL_RCC_OscConfig+0x8ac>)
 8002c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c7e:	4a11      	ldr	r2, [pc, #68]	@ (8002cc4 <HAL_RCC_OscConfig+0x8ac>)
 8002c80:	f023 0301 	bic.w	r3, r3, #1
 8002c84:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c86:	f7fe fd21 	bl	80016cc <HAL_GetTick>
 8002c8a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002c8c:	bf00      	nop
 8002c8e:	f7fe fd1d 	bl	80016cc <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d0f9      	beq.n	8002c8e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc4 <HAL_RCC_OscConfig+0x8ac>)
 8002c9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc8 <HAL_RCC_OscConfig+0x8b0>)
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ca6:	00d2      	lsls	r2, r2, #3
 8002ca8:	4906      	ldr	r1, [pc, #24]	@ (8002cc4 <HAL_RCC_OscConfig+0x8ac>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002cae:	4b05      	ldr	r3, [pc, #20]	@ (8002cc4 <HAL_RCC_OscConfig+0x8ac>)
 8002cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb2:	4a04      	ldr	r2, [pc, #16]	@ (8002cc4 <HAL_RCC_OscConfig+0x8ac>)
 8002cb4:	f043 0301 	orr.w	r3, r3, #1
 8002cb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3730      	adds	r7, #48	@ 0x30
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	58024400 	.word	0x58024400
 8002cc8:	ffff0007 	.word	0xffff0007

08002ccc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e19c      	b.n	800301a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ce0:	4b8a      	ldr	r3, [pc, #552]	@ (8002f0c <HAL_RCC_ClockConfig+0x240>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 030f 	and.w	r3, r3, #15
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d910      	bls.n	8002d10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cee:	4b87      	ldr	r3, [pc, #540]	@ (8002f0c <HAL_RCC_ClockConfig+0x240>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f023 020f 	bic.w	r2, r3, #15
 8002cf6:	4985      	ldr	r1, [pc, #532]	@ (8002f0c <HAL_RCC_ClockConfig+0x240>)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfe:	4b83      	ldr	r3, [pc, #524]	@ (8002f0c <HAL_RCC_ClockConfig+0x240>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 030f 	and.w	r3, r3, #15
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d001      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e184      	b.n	800301a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d010      	beq.n	8002d3e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691a      	ldr	r2, [r3, #16]
 8002d20:	4b7b      	ldr	r3, [pc, #492]	@ (8002f10 <HAL_RCC_ClockConfig+0x244>)
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d908      	bls.n	8002d3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d2c:	4b78      	ldr	r3, [pc, #480]	@ (8002f10 <HAL_RCC_ClockConfig+0x244>)
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	4975      	ldr	r1, [pc, #468]	@ (8002f10 <HAL_RCC_ClockConfig+0x244>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d010      	beq.n	8002d6c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	695a      	ldr	r2, [r3, #20]
 8002d4e:	4b70      	ldr	r3, [pc, #448]	@ (8002f10 <HAL_RCC_ClockConfig+0x244>)
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d908      	bls.n	8002d6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d5a:	4b6d      	ldr	r3, [pc, #436]	@ (8002f10 <HAL_RCC_ClockConfig+0x244>)
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	496a      	ldr	r1, [pc, #424]	@ (8002f10 <HAL_RCC_ClockConfig+0x244>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0310 	and.w	r3, r3, #16
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d010      	beq.n	8002d9a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	699a      	ldr	r2, [r3, #24]
 8002d7c:	4b64      	ldr	r3, [pc, #400]	@ (8002f10 <HAL_RCC_ClockConfig+0x244>)
 8002d7e:	69db      	ldr	r3, [r3, #28]
 8002d80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d908      	bls.n	8002d9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d88:	4b61      	ldr	r3, [pc, #388]	@ (8002f10 <HAL_RCC_ClockConfig+0x244>)
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	495e      	ldr	r1, [pc, #376]	@ (8002f10 <HAL_RCC_ClockConfig+0x244>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0320 	and.w	r3, r3, #32
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d010      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69da      	ldr	r2, [r3, #28]
 8002daa:	4b59      	ldr	r3, [pc, #356]	@ (8002f10 <HAL_RCC_ClockConfig+0x244>)
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d908      	bls.n	8002dc8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002db6:	4b56      	ldr	r3, [pc, #344]	@ (8002f10 <HAL_RCC_ClockConfig+0x244>)
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	4953      	ldr	r1, [pc, #332]	@ (8002f10 <HAL_RCC_ClockConfig+0x244>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d010      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68da      	ldr	r2, [r3, #12]
 8002dd8:	4b4d      	ldr	r3, [pc, #308]	@ (8002f10 <HAL_RCC_ClockConfig+0x244>)
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	f003 030f 	and.w	r3, r3, #15
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d908      	bls.n	8002df6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002de4:	4b4a      	ldr	r3, [pc, #296]	@ (8002f10 <HAL_RCC_ClockConfig+0x244>)
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	f023 020f 	bic.w	r2, r3, #15
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	4947      	ldr	r1, [pc, #284]	@ (8002f10 <HAL_RCC_ClockConfig+0x244>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d055      	beq.n	8002eae <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002e02:	4b43      	ldr	r3, [pc, #268]	@ (8002f10 <HAL_RCC_ClockConfig+0x244>)
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	4940      	ldr	r1, [pc, #256]	@ (8002f10 <HAL_RCC_ClockConfig+0x244>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d107      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e1c:	4b3c      	ldr	r3, [pc, #240]	@ (8002f10 <HAL_RCC_ClockConfig+0x244>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d121      	bne.n	8002e6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e0f6      	b.n	800301a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2b03      	cmp	r3, #3
 8002e32:	d107      	bne.n	8002e44 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e34:	4b36      	ldr	r3, [pc, #216]	@ (8002f10 <HAL_RCC_ClockConfig+0x244>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d115      	bne.n	8002e6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e0ea      	b.n	800301a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d107      	bne.n	8002e5c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e4c:	4b30      	ldr	r3, [pc, #192]	@ (8002f10 <HAL_RCC_ClockConfig+0x244>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d109      	bne.n	8002e6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e0de      	b.n	800301a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e5c:	4b2c      	ldr	r3, [pc, #176]	@ (8002f10 <HAL_RCC_ClockConfig+0x244>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e0d6      	b.n	800301a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e6c:	4b28      	ldr	r3, [pc, #160]	@ (8002f10 <HAL_RCC_ClockConfig+0x244>)
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	f023 0207 	bic.w	r2, r3, #7
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	4925      	ldr	r1, [pc, #148]	@ (8002f10 <HAL_RCC_ClockConfig+0x244>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e7e:	f7fe fc25 	bl	80016cc <HAL_GetTick>
 8002e82:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e84:	e00a      	b.n	8002e9c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e86:	f7fe fc21 	bl	80016cc <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e0be      	b.n	800301a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8002f10 <HAL_RCC_ClockConfig+0x244>)
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d1eb      	bne.n	8002e86 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d010      	beq.n	8002edc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	4b14      	ldr	r3, [pc, #80]	@ (8002f10 <HAL_RCC_ClockConfig+0x244>)
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d208      	bcs.n	8002edc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eca:	4b11      	ldr	r3, [pc, #68]	@ (8002f10 <HAL_RCC_ClockConfig+0x244>)
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	f023 020f 	bic.w	r2, r3, #15
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	490e      	ldr	r1, [pc, #56]	@ (8002f10 <HAL_RCC_ClockConfig+0x244>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002edc:	4b0b      	ldr	r3, [pc, #44]	@ (8002f0c <HAL_RCC_ClockConfig+0x240>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 030f 	and.w	r3, r3, #15
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d214      	bcs.n	8002f14 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eea:	4b08      	ldr	r3, [pc, #32]	@ (8002f0c <HAL_RCC_ClockConfig+0x240>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f023 020f 	bic.w	r2, r3, #15
 8002ef2:	4906      	ldr	r1, [pc, #24]	@ (8002f0c <HAL_RCC_ClockConfig+0x240>)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efa:	4b04      	ldr	r3, [pc, #16]	@ (8002f0c <HAL_RCC_ClockConfig+0x240>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d005      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e086      	b.n	800301a <HAL_RCC_ClockConfig+0x34e>
 8002f0c:	52002000 	.word	0x52002000
 8002f10:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d010      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	691a      	ldr	r2, [r3, #16]
 8002f24:	4b3f      	ldr	r3, [pc, #252]	@ (8003024 <HAL_RCC_ClockConfig+0x358>)
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d208      	bcs.n	8002f42 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f30:	4b3c      	ldr	r3, [pc, #240]	@ (8003024 <HAL_RCC_ClockConfig+0x358>)
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	4939      	ldr	r1, [pc, #228]	@ (8003024 <HAL_RCC_ClockConfig+0x358>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0308 	and.w	r3, r3, #8
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d010      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	695a      	ldr	r2, [r3, #20]
 8002f52:	4b34      	ldr	r3, [pc, #208]	@ (8003024 <HAL_RCC_ClockConfig+0x358>)
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d208      	bcs.n	8002f70 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f5e:	4b31      	ldr	r3, [pc, #196]	@ (8003024 <HAL_RCC_ClockConfig+0x358>)
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	492e      	ldr	r1, [pc, #184]	@ (8003024 <HAL_RCC_ClockConfig+0x358>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0310 	and.w	r3, r3, #16
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d010      	beq.n	8002f9e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	699a      	ldr	r2, [r3, #24]
 8002f80:	4b28      	ldr	r3, [pc, #160]	@ (8003024 <HAL_RCC_ClockConfig+0x358>)
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d208      	bcs.n	8002f9e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f8c:	4b25      	ldr	r3, [pc, #148]	@ (8003024 <HAL_RCC_ClockConfig+0x358>)
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	4922      	ldr	r1, [pc, #136]	@ (8003024 <HAL_RCC_ClockConfig+0x358>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0320 	and.w	r3, r3, #32
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d010      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69da      	ldr	r2, [r3, #28]
 8002fae:	4b1d      	ldr	r3, [pc, #116]	@ (8003024 <HAL_RCC_ClockConfig+0x358>)
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d208      	bcs.n	8002fcc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002fba:	4b1a      	ldr	r3, [pc, #104]	@ (8003024 <HAL_RCC_ClockConfig+0x358>)
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	4917      	ldr	r1, [pc, #92]	@ (8003024 <HAL_RCC_ClockConfig+0x358>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002fcc:	f000 f834 	bl	8003038 <HAL_RCC_GetSysClockFreq>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	4b14      	ldr	r3, [pc, #80]	@ (8003024 <HAL_RCC_ClockConfig+0x358>)
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	0a1b      	lsrs	r3, r3, #8
 8002fd8:	f003 030f 	and.w	r3, r3, #15
 8002fdc:	4912      	ldr	r1, [pc, #72]	@ (8003028 <HAL_RCC_ClockConfig+0x35c>)
 8002fde:	5ccb      	ldrb	r3, [r1, r3]
 8002fe0:	f003 031f 	and.w	r3, r3, #31
 8002fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002fea:	4b0e      	ldr	r3, [pc, #56]	@ (8003024 <HAL_RCC_ClockConfig+0x358>)
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	4a0d      	ldr	r2, [pc, #52]	@ (8003028 <HAL_RCC_ClockConfig+0x35c>)
 8002ff4:	5cd3      	ldrb	r3, [r2, r3]
 8002ff6:	f003 031f 	and.w	r3, r3, #31
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8003000:	4a0a      	ldr	r2, [pc, #40]	@ (800302c <HAL_RCC_ClockConfig+0x360>)
 8003002:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003004:	4a0a      	ldr	r2, [pc, #40]	@ (8003030 <HAL_RCC_ClockConfig+0x364>)
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800300a:	4b0a      	ldr	r3, [pc, #40]	@ (8003034 <HAL_RCC_ClockConfig+0x368>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f7fe fb12 	bl	8001638 <HAL_InitTick>
 8003014:	4603      	mov	r3, r0
 8003016:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003018:	7bfb      	ldrb	r3, [r7, #15]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	58024400 	.word	0x58024400
 8003028:	08008044 	.word	0x08008044
 800302c:	24000004 	.word	0x24000004
 8003030:	24000000 	.word	0x24000000
 8003034:	24000024 	.word	0x24000024

08003038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003038:	b480      	push	{r7}
 800303a:	b089      	sub	sp, #36	@ 0x24
 800303c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800303e:	4bb3      	ldr	r3, [pc, #716]	@ (800330c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003046:	2b18      	cmp	r3, #24
 8003048:	f200 8155 	bhi.w	80032f6 <HAL_RCC_GetSysClockFreq+0x2be>
 800304c:	a201      	add	r2, pc, #4	@ (adr r2, 8003054 <HAL_RCC_GetSysClockFreq+0x1c>)
 800304e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003052:	bf00      	nop
 8003054:	080030b9 	.word	0x080030b9
 8003058:	080032f7 	.word	0x080032f7
 800305c:	080032f7 	.word	0x080032f7
 8003060:	080032f7 	.word	0x080032f7
 8003064:	080032f7 	.word	0x080032f7
 8003068:	080032f7 	.word	0x080032f7
 800306c:	080032f7 	.word	0x080032f7
 8003070:	080032f7 	.word	0x080032f7
 8003074:	080030df 	.word	0x080030df
 8003078:	080032f7 	.word	0x080032f7
 800307c:	080032f7 	.word	0x080032f7
 8003080:	080032f7 	.word	0x080032f7
 8003084:	080032f7 	.word	0x080032f7
 8003088:	080032f7 	.word	0x080032f7
 800308c:	080032f7 	.word	0x080032f7
 8003090:	080032f7 	.word	0x080032f7
 8003094:	080030e5 	.word	0x080030e5
 8003098:	080032f7 	.word	0x080032f7
 800309c:	080032f7 	.word	0x080032f7
 80030a0:	080032f7 	.word	0x080032f7
 80030a4:	080032f7 	.word	0x080032f7
 80030a8:	080032f7 	.word	0x080032f7
 80030ac:	080032f7 	.word	0x080032f7
 80030b0:	080032f7 	.word	0x080032f7
 80030b4:	080030eb 	.word	0x080030eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030b8:	4b94      	ldr	r3, [pc, #592]	@ (800330c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0320 	and.w	r3, r3, #32
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d009      	beq.n	80030d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80030c4:	4b91      	ldr	r3, [pc, #580]	@ (800330c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	08db      	lsrs	r3, r3, #3
 80030ca:	f003 0303 	and.w	r3, r3, #3
 80030ce:	4a90      	ldr	r2, [pc, #576]	@ (8003310 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030d0:	fa22 f303 	lsr.w	r3, r2, r3
 80030d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80030d6:	e111      	b.n	80032fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80030d8:	4b8d      	ldr	r3, [pc, #564]	@ (8003310 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030da:	61bb      	str	r3, [r7, #24]
      break;
 80030dc:	e10e      	b.n	80032fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80030de:	4b8d      	ldr	r3, [pc, #564]	@ (8003314 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030e0:	61bb      	str	r3, [r7, #24]
      break;
 80030e2:	e10b      	b.n	80032fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80030e4:	4b8c      	ldr	r3, [pc, #560]	@ (8003318 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80030e6:	61bb      	str	r3, [r7, #24]
      break;
 80030e8:	e108      	b.n	80032fc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80030ea:	4b88      	ldr	r3, [pc, #544]	@ (800330c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80030f4:	4b85      	ldr	r3, [pc, #532]	@ (800330c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f8:	091b      	lsrs	r3, r3, #4
 80030fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030fe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003100:	4b82      	ldr	r3, [pc, #520]	@ (800330c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800310a:	4b80      	ldr	r3, [pc, #512]	@ (800330c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800310c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800310e:	08db      	lsrs	r3, r3, #3
 8003110:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	fb02 f303 	mul.w	r3, r2, r3
 800311a:	ee07 3a90 	vmov	s15, r3
 800311e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003122:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 80e1 	beq.w	80032f0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	2b02      	cmp	r3, #2
 8003132:	f000 8083 	beq.w	800323c <HAL_RCC_GetSysClockFreq+0x204>
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2b02      	cmp	r3, #2
 800313a:	f200 80a1 	bhi.w	8003280 <HAL_RCC_GetSysClockFreq+0x248>
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d003      	beq.n	800314c <HAL_RCC_GetSysClockFreq+0x114>
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d056      	beq.n	80031f8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800314a:	e099      	b.n	8003280 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800314c:	4b6f      	ldr	r3, [pc, #444]	@ (800330c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0320 	and.w	r3, r3, #32
 8003154:	2b00      	cmp	r3, #0
 8003156:	d02d      	beq.n	80031b4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003158:	4b6c      	ldr	r3, [pc, #432]	@ (800330c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	08db      	lsrs	r3, r3, #3
 800315e:	f003 0303 	and.w	r3, r3, #3
 8003162:	4a6b      	ldr	r2, [pc, #428]	@ (8003310 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003164:	fa22 f303 	lsr.w	r3, r2, r3
 8003168:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	ee07 3a90 	vmov	s15, r3
 8003170:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	ee07 3a90 	vmov	s15, r3
 800317a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800317e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003182:	4b62      	ldr	r3, [pc, #392]	@ (800330c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800318a:	ee07 3a90 	vmov	s15, r3
 800318e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003192:	ed97 6a02 	vldr	s12, [r7, #8]
 8003196:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800331c <HAL_RCC_GetSysClockFreq+0x2e4>
 800319a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800319e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80031b2:	e087      	b.n	80032c4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	ee07 3a90 	vmov	s15, r3
 80031ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031be:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003320 <HAL_RCC_GetSysClockFreq+0x2e8>
 80031c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031c6:	4b51      	ldr	r3, [pc, #324]	@ (800330c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ce:	ee07 3a90 	vmov	s15, r3
 80031d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80031da:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800331c <HAL_RCC_GetSysClockFreq+0x2e4>
 80031de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031f6:	e065      	b.n	80032c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	ee07 3a90 	vmov	s15, r3
 80031fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003202:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003324 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800320a:	4b40      	ldr	r3, [pc, #256]	@ (800330c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003212:	ee07 3a90 	vmov	s15, r3
 8003216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800321a:	ed97 6a02 	vldr	s12, [r7, #8]
 800321e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800331c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800322a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800322e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003236:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800323a:	e043      	b.n	80032c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	ee07 3a90 	vmov	s15, r3
 8003242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003246:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003328 <HAL_RCC_GetSysClockFreq+0x2f0>
 800324a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800324e:	4b2f      	ldr	r3, [pc, #188]	@ (800330c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003256:	ee07 3a90 	vmov	s15, r3
 800325a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800325e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003262:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800331c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800326a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800326e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800327a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800327e:	e021      	b.n	80032c4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	ee07 3a90 	vmov	s15, r3
 8003286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800328a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003324 <HAL_RCC_GetSysClockFreq+0x2ec>
 800328e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003292:	4b1e      	ldr	r3, [pc, #120]	@ (800330c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800329a:	ee07 3a90 	vmov	s15, r3
 800329e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80032a6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800331c <HAL_RCC_GetSysClockFreq+0x2e4>
 80032aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032c2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80032c4:	4b11      	ldr	r3, [pc, #68]	@ (800330c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c8:	0a5b      	lsrs	r3, r3, #9
 80032ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032ce:	3301      	adds	r3, #1
 80032d0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	ee07 3a90 	vmov	s15, r3
 80032d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80032e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032e8:	ee17 3a90 	vmov	r3, s15
 80032ec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80032ee:	e005      	b.n	80032fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	61bb      	str	r3, [r7, #24]
      break;
 80032f4:	e002      	b.n	80032fc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80032f6:	4b07      	ldr	r3, [pc, #28]	@ (8003314 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032f8:	61bb      	str	r3, [r7, #24]
      break;
 80032fa:	bf00      	nop
  }

  return sysclockfreq;
 80032fc:	69bb      	ldr	r3, [r7, #24]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3724      	adds	r7, #36	@ 0x24
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	58024400 	.word	0x58024400
 8003310:	03d09000 	.word	0x03d09000
 8003314:	003d0900 	.word	0x003d0900
 8003318:	017d7840 	.word	0x017d7840
 800331c:	46000000 	.word	0x46000000
 8003320:	4c742400 	.word	0x4c742400
 8003324:	4a742400 	.word	0x4a742400
 8003328:	4bbebc20 	.word	0x4bbebc20

0800332c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003332:	f7ff fe81 	bl	8003038 <HAL_RCC_GetSysClockFreq>
 8003336:	4602      	mov	r2, r0
 8003338:	4b10      	ldr	r3, [pc, #64]	@ (800337c <HAL_RCC_GetHCLKFreq+0x50>)
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	0a1b      	lsrs	r3, r3, #8
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	490f      	ldr	r1, [pc, #60]	@ (8003380 <HAL_RCC_GetHCLKFreq+0x54>)
 8003344:	5ccb      	ldrb	r3, [r1, r3]
 8003346:	f003 031f 	and.w	r3, r3, #31
 800334a:	fa22 f303 	lsr.w	r3, r2, r3
 800334e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003350:	4b0a      	ldr	r3, [pc, #40]	@ (800337c <HAL_RCC_GetHCLKFreq+0x50>)
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	f003 030f 	and.w	r3, r3, #15
 8003358:	4a09      	ldr	r2, [pc, #36]	@ (8003380 <HAL_RCC_GetHCLKFreq+0x54>)
 800335a:	5cd3      	ldrb	r3, [r2, r3]
 800335c:	f003 031f 	and.w	r3, r3, #31
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	fa22 f303 	lsr.w	r3, r2, r3
 8003366:	4a07      	ldr	r2, [pc, #28]	@ (8003384 <HAL_RCC_GetHCLKFreq+0x58>)
 8003368:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800336a:	4a07      	ldr	r2, [pc, #28]	@ (8003388 <HAL_RCC_GetHCLKFreq+0x5c>)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003370:	4b04      	ldr	r3, [pc, #16]	@ (8003384 <HAL_RCC_GetHCLKFreq+0x58>)
 8003372:	681b      	ldr	r3, [r3, #0]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	58024400 	.word	0x58024400
 8003380:	08008044 	.word	0x08008044
 8003384:	24000004 	.word	0x24000004
 8003388:	24000000 	.word	0x24000000

0800338c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003390:	f7ff ffcc 	bl	800332c <HAL_RCC_GetHCLKFreq>
 8003394:	4602      	mov	r2, r0
 8003396:	4b06      	ldr	r3, [pc, #24]	@ (80033b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	091b      	lsrs	r3, r3, #4
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	4904      	ldr	r1, [pc, #16]	@ (80033b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033a2:	5ccb      	ldrb	r3, [r1, r3]
 80033a4:	f003 031f 	and.w	r3, r3, #31
 80033a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	58024400 	.word	0x58024400
 80033b4:	08008044 	.word	0x08008044

080033b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80033bc:	f7ff ffb6 	bl	800332c <HAL_RCC_GetHCLKFreq>
 80033c0:	4602      	mov	r2, r0
 80033c2:	4b06      	ldr	r3, [pc, #24]	@ (80033dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	0a1b      	lsrs	r3, r3, #8
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	4904      	ldr	r1, [pc, #16]	@ (80033e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033ce:	5ccb      	ldrb	r3, [r1, r3]
 80033d0:	f003 031f 	and.w	r3, r3, #31
 80033d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80033d8:	4618      	mov	r0, r3
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	58024400 	.word	0x58024400
 80033e0:	08008044 	.word	0x08008044

080033e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033e8:	b0ca      	sub	sp, #296	@ 0x128
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033f0:	2300      	movs	r3, #0
 80033f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033f6:	2300      	movs	r3, #0
 80033f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003404:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003408:	2500      	movs	r5, #0
 800340a:	ea54 0305 	orrs.w	r3, r4, r5
 800340e:	d049      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003414:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003416:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800341a:	d02f      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800341c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003420:	d828      	bhi.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003422:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003426:	d01a      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003428:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800342c:	d822      	bhi.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003432:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003436:	d007      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003438:	e01c      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800343a:	4bb8      	ldr	r3, [pc, #736]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800343c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800343e:	4ab7      	ldr	r2, [pc, #732]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003440:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003444:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003446:	e01a      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800344c:	3308      	adds	r3, #8
 800344e:	2102      	movs	r1, #2
 8003450:	4618      	mov	r0, r3
 8003452:	f001 fc8f 	bl	8004d74 <RCCEx_PLL2_Config>
 8003456:	4603      	mov	r3, r0
 8003458:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800345c:	e00f      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800345e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003462:	3328      	adds	r3, #40	@ 0x28
 8003464:	2102      	movs	r1, #2
 8003466:	4618      	mov	r0, r3
 8003468:	f001 fd36 	bl	8004ed8 <RCCEx_PLL3_Config>
 800346c:	4603      	mov	r3, r0
 800346e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003472:	e004      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800347a:	e000      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800347c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800347e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10a      	bne.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003486:	4ba5      	ldr	r3, [pc, #660]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003488:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800348a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800348e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003492:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003494:	4aa1      	ldr	r2, [pc, #644]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003496:	430b      	orrs	r3, r1
 8003498:	6513      	str	r3, [r2, #80]	@ 0x50
 800349a:	e003      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800349c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80034a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ac:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80034b0:	f04f 0900 	mov.w	r9, #0
 80034b4:	ea58 0309 	orrs.w	r3, r8, r9
 80034b8:	d047      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80034ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	d82a      	bhi.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80034c4:	a201      	add	r2, pc, #4	@ (adr r2, 80034cc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80034c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ca:	bf00      	nop
 80034cc:	080034e1 	.word	0x080034e1
 80034d0:	080034ef 	.word	0x080034ef
 80034d4:	08003505 	.word	0x08003505
 80034d8:	08003523 	.word	0x08003523
 80034dc:	08003523 	.word	0x08003523
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034e0:	4b8e      	ldr	r3, [pc, #568]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e4:	4a8d      	ldr	r2, [pc, #564]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034ec:	e01a      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f2:	3308      	adds	r3, #8
 80034f4:	2100      	movs	r1, #0
 80034f6:	4618      	mov	r0, r3
 80034f8:	f001 fc3c 	bl	8004d74 <RCCEx_PLL2_Config>
 80034fc:	4603      	mov	r3, r0
 80034fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003502:	e00f      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003508:	3328      	adds	r3, #40	@ 0x28
 800350a:	2100      	movs	r1, #0
 800350c:	4618      	mov	r0, r3
 800350e:	f001 fce3 	bl	8004ed8 <RCCEx_PLL3_Config>
 8003512:	4603      	mov	r3, r0
 8003514:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003518:	e004      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003520:	e000      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003522:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003524:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10a      	bne.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800352c:	4b7b      	ldr	r3, [pc, #492]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800352e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003530:	f023 0107 	bic.w	r1, r3, #7
 8003534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800353a:	4a78      	ldr	r2, [pc, #480]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800353c:	430b      	orrs	r3, r1
 800353e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003540:	e003      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003542:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003546:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800354a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800354e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003552:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003556:	f04f 0b00 	mov.w	fp, #0
 800355a:	ea5a 030b 	orrs.w	r3, sl, fp
 800355e:	d04c      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003566:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800356a:	d030      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800356c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003570:	d829      	bhi.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003572:	2bc0      	cmp	r3, #192	@ 0xc0
 8003574:	d02d      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003576:	2bc0      	cmp	r3, #192	@ 0xc0
 8003578:	d825      	bhi.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800357a:	2b80      	cmp	r3, #128	@ 0x80
 800357c:	d018      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800357e:	2b80      	cmp	r3, #128	@ 0x80
 8003580:	d821      	bhi.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003582:	2b00      	cmp	r3, #0
 8003584:	d002      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003586:	2b40      	cmp	r3, #64	@ 0x40
 8003588:	d007      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800358a:	e01c      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800358c:	4b63      	ldr	r3, [pc, #396]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800358e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003590:	4a62      	ldr	r2, [pc, #392]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003592:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003596:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003598:	e01c      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800359a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800359e:	3308      	adds	r3, #8
 80035a0:	2100      	movs	r1, #0
 80035a2:	4618      	mov	r0, r3
 80035a4:	f001 fbe6 	bl	8004d74 <RCCEx_PLL2_Config>
 80035a8:	4603      	mov	r3, r0
 80035aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80035ae:	e011      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035b4:	3328      	adds	r3, #40	@ 0x28
 80035b6:	2100      	movs	r1, #0
 80035b8:	4618      	mov	r0, r3
 80035ba:	f001 fc8d 	bl	8004ed8 <RCCEx_PLL3_Config>
 80035be:	4603      	mov	r3, r0
 80035c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80035c4:	e006      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035cc:	e002      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80035ce:	bf00      	nop
 80035d0:	e000      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80035d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10a      	bne.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80035dc:	4b4f      	ldr	r3, [pc, #316]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035e0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80035e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ea:	4a4c      	ldr	r2, [pc, #304]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035ec:	430b      	orrs	r3, r1
 80035ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80035f0:	e003      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80035fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003602:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003606:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800360a:	2300      	movs	r3, #0
 800360c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003610:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003614:	460b      	mov	r3, r1
 8003616:	4313      	orrs	r3, r2
 8003618:	d053      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800361a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800361e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003622:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003626:	d035      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003628:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800362c:	d82e      	bhi.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800362e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003632:	d031      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003634:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003638:	d828      	bhi.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800363a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800363e:	d01a      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003640:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003644:	d822      	bhi.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800364a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800364e:	d007      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003650:	e01c      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003652:	4b32      	ldr	r3, [pc, #200]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003656:	4a31      	ldr	r2, [pc, #196]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003658:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800365c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800365e:	e01c      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003664:	3308      	adds	r3, #8
 8003666:	2100      	movs	r1, #0
 8003668:	4618      	mov	r0, r3
 800366a:	f001 fb83 	bl	8004d74 <RCCEx_PLL2_Config>
 800366e:	4603      	mov	r3, r0
 8003670:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003674:	e011      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367a:	3328      	adds	r3, #40	@ 0x28
 800367c:	2100      	movs	r1, #0
 800367e:	4618      	mov	r0, r3
 8003680:	f001 fc2a 	bl	8004ed8 <RCCEx_PLL3_Config>
 8003684:	4603      	mov	r3, r0
 8003686:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800368a:	e006      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003692:	e002      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003694:	bf00      	nop
 8003696:	e000      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003698:	bf00      	nop
    }

    if (ret == HAL_OK)
 800369a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10b      	bne.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80036a2:	4b1e      	ldr	r3, [pc, #120]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80036aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80036b2:	4a1a      	ldr	r2, [pc, #104]	@ (800371c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036b4:	430b      	orrs	r3, r1
 80036b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80036b8:	e003      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80036c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ca:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80036ce:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80036d2:	2300      	movs	r3, #0
 80036d4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80036d8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80036dc:	460b      	mov	r3, r1
 80036de:	4313      	orrs	r3, r2
 80036e0:	d056      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80036e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80036ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036ee:	d038      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80036f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036f4:	d831      	bhi.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80036f6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80036fa:	d034      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80036fc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003700:	d82b      	bhi.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003702:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003706:	d01d      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003708:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800370c:	d825      	bhi.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800370e:	2b00      	cmp	r3, #0
 8003710:	d006      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003712:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003716:	d00a      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003718:	e01f      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800371a:	bf00      	nop
 800371c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003720:	4ba2      	ldr	r3, [pc, #648]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003724:	4aa1      	ldr	r2, [pc, #644]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003726:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800372a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800372c:	e01c      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800372e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003732:	3308      	adds	r3, #8
 8003734:	2100      	movs	r1, #0
 8003736:	4618      	mov	r0, r3
 8003738:	f001 fb1c 	bl	8004d74 <RCCEx_PLL2_Config>
 800373c:	4603      	mov	r3, r0
 800373e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003742:	e011      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003748:	3328      	adds	r3, #40	@ 0x28
 800374a:	2100      	movs	r1, #0
 800374c:	4618      	mov	r0, r3
 800374e:	f001 fbc3 	bl	8004ed8 <RCCEx_PLL3_Config>
 8003752:	4603      	mov	r3, r0
 8003754:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003758:	e006      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003760:	e002      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003762:	bf00      	nop
 8003764:	e000      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003766:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003768:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10b      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003770:	4b8e      	ldr	r3, [pc, #568]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003774:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800377c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003780:	4a8a      	ldr	r2, [pc, #552]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003782:	430b      	orrs	r3, r1
 8003784:	6593      	str	r3, [r2, #88]	@ 0x58
 8003786:	e003      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003788:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800378c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003798:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800379c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80037a0:	2300      	movs	r3, #0
 80037a2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80037a6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80037aa:	460b      	mov	r3, r1
 80037ac:	4313      	orrs	r3, r2
 80037ae:	d03a      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80037b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037b6:	2b30      	cmp	r3, #48	@ 0x30
 80037b8:	d01f      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x416>
 80037ba:	2b30      	cmp	r3, #48	@ 0x30
 80037bc:	d819      	bhi.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80037be:	2b20      	cmp	r3, #32
 80037c0:	d00c      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80037c2:	2b20      	cmp	r3, #32
 80037c4:	d815      	bhi.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d019      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80037ca:	2b10      	cmp	r3, #16
 80037cc:	d111      	bne.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037ce:	4b77      	ldr	r3, [pc, #476]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d2:	4a76      	ldr	r2, [pc, #472]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80037da:	e011      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e0:	3308      	adds	r3, #8
 80037e2:	2102      	movs	r1, #2
 80037e4:	4618      	mov	r0, r3
 80037e6:	f001 fac5 	bl	8004d74 <RCCEx_PLL2_Config>
 80037ea:	4603      	mov	r3, r0
 80037ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80037f0:	e006      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037f8:	e002      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80037fa:	bf00      	nop
 80037fc:	e000      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80037fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003800:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003804:	2b00      	cmp	r3, #0
 8003806:	d10a      	bne.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003808:	4b68      	ldr	r3, [pc, #416]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800380a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800380c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003816:	4a65      	ldr	r2, [pc, #404]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003818:	430b      	orrs	r3, r1
 800381a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800381c:	e003      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800381e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003822:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800382a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003832:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003836:	2300      	movs	r3, #0
 8003838:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800383c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003840:	460b      	mov	r3, r1
 8003842:	4313      	orrs	r3, r2
 8003844:	d051      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800384a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800384c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003850:	d035      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003852:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003856:	d82e      	bhi.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003858:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800385c:	d031      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800385e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003862:	d828      	bhi.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003864:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003868:	d01a      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800386a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800386e:	d822      	bhi.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003874:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003878:	d007      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800387a:	e01c      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800387c:	4b4b      	ldr	r3, [pc, #300]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800387e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003880:	4a4a      	ldr	r2, [pc, #296]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003882:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003886:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003888:	e01c      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800388a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800388e:	3308      	adds	r3, #8
 8003890:	2100      	movs	r1, #0
 8003892:	4618      	mov	r0, r3
 8003894:	f001 fa6e 	bl	8004d74 <RCCEx_PLL2_Config>
 8003898:	4603      	mov	r3, r0
 800389a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800389e:	e011      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a4:	3328      	adds	r3, #40	@ 0x28
 80038a6:	2100      	movs	r1, #0
 80038a8:	4618      	mov	r0, r3
 80038aa:	f001 fb15 	bl	8004ed8 <RCCEx_PLL3_Config>
 80038ae:	4603      	mov	r3, r0
 80038b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80038b4:	e006      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038bc:	e002      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80038be:	bf00      	nop
 80038c0:	e000      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80038c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10a      	bne.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80038cc:	4b37      	ldr	r3, [pc, #220]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038d0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80038d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038da:	4a34      	ldr	r2, [pc, #208]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038dc:	430b      	orrs	r3, r1
 80038de:	6513      	str	r3, [r2, #80]	@ 0x50
 80038e0:	e003      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80038ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80038f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80038fa:	2300      	movs	r3, #0
 80038fc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003900:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003904:	460b      	mov	r3, r1
 8003906:	4313      	orrs	r3, r2
 8003908:	d056      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800390a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800390e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003910:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003914:	d033      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003916:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800391a:	d82c      	bhi.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800391c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003920:	d02f      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003922:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003926:	d826      	bhi.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003928:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800392c:	d02b      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800392e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003932:	d820      	bhi.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003934:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003938:	d012      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800393a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800393e:	d81a      	bhi.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003940:	2b00      	cmp	r3, #0
 8003942:	d022      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003948:	d115      	bne.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800394a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800394e:	3308      	adds	r3, #8
 8003950:	2101      	movs	r1, #1
 8003952:	4618      	mov	r0, r3
 8003954:	f001 fa0e 	bl	8004d74 <RCCEx_PLL2_Config>
 8003958:	4603      	mov	r3, r0
 800395a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800395e:	e015      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003964:	3328      	adds	r3, #40	@ 0x28
 8003966:	2101      	movs	r1, #1
 8003968:	4618      	mov	r0, r3
 800396a:	f001 fab5 	bl	8004ed8 <RCCEx_PLL3_Config>
 800396e:	4603      	mov	r3, r0
 8003970:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003974:	e00a      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800397c:	e006      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800397e:	bf00      	nop
 8003980:	e004      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003982:	bf00      	nop
 8003984:	e002      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003986:	bf00      	nop
 8003988:	e000      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800398a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800398c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10d      	bne.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003994:	4b05      	ldr	r3, [pc, #20]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003996:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003998:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800399c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039a2:	4a02      	ldr	r2, [pc, #8]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039a4:	430b      	orrs	r3, r1
 80039a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80039a8:	e006      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80039aa:	bf00      	nop
 80039ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80039b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80039c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80039c8:	2300      	movs	r3, #0
 80039ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80039ce:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80039d2:	460b      	mov	r3, r1
 80039d4:	4313      	orrs	r3, r2
 80039d6:	d055      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80039d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80039e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039e4:	d033      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80039e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039ea:	d82c      	bhi.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80039ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039f0:	d02f      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80039f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039f6:	d826      	bhi.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80039f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80039fc:	d02b      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80039fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003a02:	d820      	bhi.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003a04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a08:	d012      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003a0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a0e:	d81a      	bhi.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d022      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003a14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a18:	d115      	bne.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a1e:	3308      	adds	r3, #8
 8003a20:	2101      	movs	r1, #1
 8003a22:	4618      	mov	r0, r3
 8003a24:	f001 f9a6 	bl	8004d74 <RCCEx_PLL2_Config>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003a2e:	e015      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a34:	3328      	adds	r3, #40	@ 0x28
 8003a36:	2101      	movs	r1, #1
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f001 fa4d 	bl	8004ed8 <RCCEx_PLL3_Config>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003a44:	e00a      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a4c:	e006      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a4e:	bf00      	nop
 8003a50:	e004      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a52:	bf00      	nop
 8003a54:	e002      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a56:	bf00      	nop
 8003a58:	e000      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10b      	bne.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003a64:	4ba3      	ldr	r3, [pc, #652]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a68:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a74:	4a9f      	ldr	r2, [pc, #636]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a76:	430b      	orrs	r3, r1
 8003a78:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a7a:	e003      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003a90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a94:	2300      	movs	r3, #0
 8003a96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003a9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	d037      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003aae:	d00e      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003ab0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ab4:	d816      	bhi.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d018      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003aba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003abe:	d111      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ac0:	4b8c      	ldr	r3, [pc, #560]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac4:	4a8b      	ldr	r2, [pc, #556]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ac6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003acc:	e00f      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad2:	3308      	adds	r3, #8
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f001 f94c 	bl	8004d74 <RCCEx_PLL2_Config>
 8003adc:	4603      	mov	r3, r0
 8003ade:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003ae2:	e004      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003aea:	e000      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003aec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10a      	bne.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003af6:	4b7f      	ldr	r3, [pc, #508]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003af8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003afa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b04:	4a7b      	ldr	r2, [pc, #492]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b06:	430b      	orrs	r3, r1
 8003b08:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b0a:	e003      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003b20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b24:	2300      	movs	r3, #0
 8003b26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003b2a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	4313      	orrs	r3, r2
 8003b32:	d039      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b3a:	2b03      	cmp	r3, #3
 8003b3c:	d81c      	bhi.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003b3e:	a201      	add	r2, pc, #4	@ (adr r2, 8003b44 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b44:	08003b81 	.word	0x08003b81
 8003b48:	08003b55 	.word	0x08003b55
 8003b4c:	08003b63 	.word	0x08003b63
 8003b50:	08003b81 	.word	0x08003b81
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b54:	4b67      	ldr	r3, [pc, #412]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b58:	4a66      	ldr	r2, [pc, #408]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003b60:	e00f      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b66:	3308      	adds	r3, #8
 8003b68:	2102      	movs	r1, #2
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f001 f902 	bl	8004d74 <RCCEx_PLL2_Config>
 8003b70:	4603      	mov	r3, r0
 8003b72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003b76:	e004      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b7e:	e000      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003b80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10a      	bne.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003b8a:	4b5a      	ldr	r3, [pc, #360]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b8e:	f023 0103 	bic.w	r1, r3, #3
 8003b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b98:	4a56      	ldr	r2, [pc, #344]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b9a:	430b      	orrs	r3, r1
 8003b9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b9e:	e003      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ba0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ba4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003bb4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003bbe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	f000 809f 	beq.w	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bca:	4b4b      	ldr	r3, [pc, #300]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a4a      	ldr	r2, [pc, #296]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003bd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bd4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bd6:	f7fd fd79 	bl	80016cc <HAL_GetTick>
 8003bda:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bde:	e00b      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003be0:	f7fd fd74 	bl	80016cc <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b64      	cmp	r3, #100	@ 0x64
 8003bee:	d903      	bls.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bf6:	e005      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bf8:	4b3f      	ldr	r3, [pc, #252]	@ (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0ed      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003c04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d179      	bne.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003c0c:	4b39      	ldr	r3, [pc, #228]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c0e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c14:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c18:	4053      	eors	r3, r2
 8003c1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d015      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c22:	4b34      	ldr	r3, [pc, #208]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c2a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c2e:	4b31      	ldr	r3, [pc, #196]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c32:	4a30      	ldr	r2, [pc, #192]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c38:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c3a:	4b2e      	ldr	r3, [pc, #184]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c3e:	4a2d      	ldr	r2, [pc, #180]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c44:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003c46:	4a2b      	ldr	r2, [pc, #172]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c48:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c4c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c52:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c5a:	d118      	bne.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5c:	f7fd fd36 	bl	80016cc <HAL_GetTick>
 8003c60:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c64:	e00d      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c66:	f7fd fd31 	bl	80016cc <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003c70:	1ad2      	subs	r2, r2, r3
 8003c72:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d903      	bls.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003c80:	e005      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c82:	4b1c      	ldr	r3, [pc, #112]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0eb      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003c8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d129      	bne.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ca2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ca6:	d10e      	bne.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003ca8:	4b12      	ldr	r3, [pc, #72]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003cb8:	091a      	lsrs	r2, r3, #4
 8003cba:	4b10      	ldr	r3, [pc, #64]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	4a0d      	ldr	r2, [pc, #52]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cc0:	430b      	orrs	r3, r1
 8003cc2:	6113      	str	r3, [r2, #16]
 8003cc4:	e005      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	4a0a      	ldr	r2, [pc, #40]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ccc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003cd0:	6113      	str	r3, [r2, #16]
 8003cd2:	4b08      	ldr	r3, [pc, #32]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cd4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003cde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ce2:	4a04      	ldr	r2, [pc, #16]	@ (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ce4:	430b      	orrs	r3, r1
 8003ce6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ce8:	e00e      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003cf2:	e009      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003cf4:	58024400 	.word	0x58024400
 8003cf8:	58024800 	.word	0x58024800
 8003cfc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d10:	f002 0301 	and.w	r3, r2, #1
 8003d14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d18:	2300      	movs	r3, #0
 8003d1a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d1e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003d22:	460b      	mov	r3, r1
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f000 8089 	beq.w	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d30:	2b28      	cmp	r3, #40	@ 0x28
 8003d32:	d86b      	bhi.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003d34:	a201      	add	r2, pc, #4	@ (adr r2, 8003d3c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3a:	bf00      	nop
 8003d3c:	08003e15 	.word	0x08003e15
 8003d40:	08003e0d 	.word	0x08003e0d
 8003d44:	08003e0d 	.word	0x08003e0d
 8003d48:	08003e0d 	.word	0x08003e0d
 8003d4c:	08003e0d 	.word	0x08003e0d
 8003d50:	08003e0d 	.word	0x08003e0d
 8003d54:	08003e0d 	.word	0x08003e0d
 8003d58:	08003e0d 	.word	0x08003e0d
 8003d5c:	08003de1 	.word	0x08003de1
 8003d60:	08003e0d 	.word	0x08003e0d
 8003d64:	08003e0d 	.word	0x08003e0d
 8003d68:	08003e0d 	.word	0x08003e0d
 8003d6c:	08003e0d 	.word	0x08003e0d
 8003d70:	08003e0d 	.word	0x08003e0d
 8003d74:	08003e0d 	.word	0x08003e0d
 8003d78:	08003e0d 	.word	0x08003e0d
 8003d7c:	08003df7 	.word	0x08003df7
 8003d80:	08003e0d 	.word	0x08003e0d
 8003d84:	08003e0d 	.word	0x08003e0d
 8003d88:	08003e0d 	.word	0x08003e0d
 8003d8c:	08003e0d 	.word	0x08003e0d
 8003d90:	08003e0d 	.word	0x08003e0d
 8003d94:	08003e0d 	.word	0x08003e0d
 8003d98:	08003e0d 	.word	0x08003e0d
 8003d9c:	08003e15 	.word	0x08003e15
 8003da0:	08003e0d 	.word	0x08003e0d
 8003da4:	08003e0d 	.word	0x08003e0d
 8003da8:	08003e0d 	.word	0x08003e0d
 8003dac:	08003e0d 	.word	0x08003e0d
 8003db0:	08003e0d 	.word	0x08003e0d
 8003db4:	08003e0d 	.word	0x08003e0d
 8003db8:	08003e0d 	.word	0x08003e0d
 8003dbc:	08003e15 	.word	0x08003e15
 8003dc0:	08003e0d 	.word	0x08003e0d
 8003dc4:	08003e0d 	.word	0x08003e0d
 8003dc8:	08003e0d 	.word	0x08003e0d
 8003dcc:	08003e0d 	.word	0x08003e0d
 8003dd0:	08003e0d 	.word	0x08003e0d
 8003dd4:	08003e0d 	.word	0x08003e0d
 8003dd8:	08003e0d 	.word	0x08003e0d
 8003ddc:	08003e15 	.word	0x08003e15
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003de4:	3308      	adds	r3, #8
 8003de6:	2101      	movs	r1, #1
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 ffc3 	bl	8004d74 <RCCEx_PLL2_Config>
 8003dee:	4603      	mov	r3, r0
 8003df0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003df4:	e00f      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dfa:	3328      	adds	r3, #40	@ 0x28
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f001 f86a 	bl	8004ed8 <RCCEx_PLL3_Config>
 8003e04:	4603      	mov	r3, r0
 8003e06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003e0a:	e004      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e12:	e000      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003e14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10a      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003e1e:	4bbf      	ldr	r3, [pc, #764]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e22:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e2c:	4abb      	ldr	r2, [pc, #748]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e2e:	430b      	orrs	r3, r1
 8003e30:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e32:	e003      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e44:	f002 0302 	and.w	r3, r2, #2
 8003e48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003e52:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003e56:	460b      	mov	r3, r1
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	d041      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e62:	2b05      	cmp	r3, #5
 8003e64:	d824      	bhi.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003e66:	a201      	add	r2, pc, #4	@ (adr r2, 8003e6c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6c:	08003eb9 	.word	0x08003eb9
 8003e70:	08003e85 	.word	0x08003e85
 8003e74:	08003e9b 	.word	0x08003e9b
 8003e78:	08003eb9 	.word	0x08003eb9
 8003e7c:	08003eb9 	.word	0x08003eb9
 8003e80:	08003eb9 	.word	0x08003eb9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e88:	3308      	adds	r3, #8
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 ff71 	bl	8004d74 <RCCEx_PLL2_Config>
 8003e92:	4603      	mov	r3, r0
 8003e94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e98:	e00f      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e9e:	3328      	adds	r3, #40	@ 0x28
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f001 f818 	bl	8004ed8 <RCCEx_PLL3_Config>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003eae:	e004      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003eb6:	e000      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003eb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10a      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003ec2:	4b96      	ldr	r3, [pc, #600]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ec6:	f023 0107 	bic.w	r1, r3, #7
 8003eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ece:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ed0:	4a92      	ldr	r2, [pc, #584]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ed2:	430b      	orrs	r3, r1
 8003ed4:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ed6:	e003      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003edc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee8:	f002 0304 	and.w	r3, r2, #4
 8003eec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ef6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003efa:	460b      	mov	r3, r1
 8003efc:	4313      	orrs	r3, r2
 8003efe:	d044      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f08:	2b05      	cmp	r3, #5
 8003f0a:	d825      	bhi.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f14 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f12:	bf00      	nop
 8003f14:	08003f61 	.word	0x08003f61
 8003f18:	08003f2d 	.word	0x08003f2d
 8003f1c:	08003f43 	.word	0x08003f43
 8003f20:	08003f61 	.word	0x08003f61
 8003f24:	08003f61 	.word	0x08003f61
 8003f28:	08003f61 	.word	0x08003f61
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f30:	3308      	adds	r3, #8
 8003f32:	2101      	movs	r1, #1
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 ff1d 	bl	8004d74 <RCCEx_PLL2_Config>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003f40:	e00f      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f46:	3328      	adds	r3, #40	@ 0x28
 8003f48:	2101      	movs	r1, #1
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 ffc4 	bl	8004ed8 <RCCEx_PLL3_Config>
 8003f50:	4603      	mov	r3, r0
 8003f52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003f56:	e004      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f5e:	e000      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003f60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10b      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f6a:	4b6c      	ldr	r3, [pc, #432]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f6e:	f023 0107 	bic.w	r1, r3, #7
 8003f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f7a:	4a68      	ldr	r2, [pc, #416]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f7c:	430b      	orrs	r3, r1
 8003f7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f80:	e003      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f92:	f002 0320 	and.w	r3, r2, #32
 8003f96:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003fa0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	d055      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fb6:	d033      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003fb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fbc:	d82c      	bhi.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fc2:	d02f      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fc8:	d826      	bhi.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003fca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003fce:	d02b      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003fd0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003fd4:	d820      	bhi.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003fd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fda:	d012      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003fdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fe0:	d81a      	bhi.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d022      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003fe6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fea:	d115      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff0:	3308      	adds	r3, #8
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f000 febd 	bl	8004d74 <RCCEx_PLL2_Config>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004000:	e015      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004006:	3328      	adds	r3, #40	@ 0x28
 8004008:	2102      	movs	r1, #2
 800400a:	4618      	mov	r0, r3
 800400c:	f000 ff64 	bl	8004ed8 <RCCEx_PLL3_Config>
 8004010:	4603      	mov	r3, r0
 8004012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004016:	e00a      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800401e:	e006      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004020:	bf00      	nop
 8004022:	e004      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004024:	bf00      	nop
 8004026:	e002      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004028:	bf00      	nop
 800402a:	e000      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800402c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800402e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10b      	bne.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004036:	4b39      	ldr	r3, [pc, #228]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800403a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800403e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004046:	4a35      	ldr	r2, [pc, #212]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004048:	430b      	orrs	r3, r1
 800404a:	6553      	str	r3, [r2, #84]	@ 0x54
 800404c:	e003      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800404e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004052:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800405a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004062:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004066:	2300      	movs	r3, #0
 8004068:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800406c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004070:	460b      	mov	r3, r1
 8004072:	4313      	orrs	r3, r2
 8004074:	d058      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800407a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800407e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004082:	d033      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004084:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004088:	d82c      	bhi.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800408a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800408e:	d02f      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004090:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004094:	d826      	bhi.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004096:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800409a:	d02b      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800409c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80040a0:	d820      	bhi.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80040a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040a6:	d012      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80040a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040ac:	d81a      	bhi.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d022      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80040b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040b6:	d115      	bne.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040bc:	3308      	adds	r3, #8
 80040be:	2100      	movs	r1, #0
 80040c0:	4618      	mov	r0, r3
 80040c2:	f000 fe57 	bl	8004d74 <RCCEx_PLL2_Config>
 80040c6:	4603      	mov	r3, r0
 80040c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80040cc:	e015      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040d2:	3328      	adds	r3, #40	@ 0x28
 80040d4:	2102      	movs	r1, #2
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 fefe 	bl	8004ed8 <RCCEx_PLL3_Config>
 80040dc:	4603      	mov	r3, r0
 80040de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80040e2:	e00a      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040ea:	e006      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80040ec:	bf00      	nop
 80040ee:	e004      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80040f0:	bf00      	nop
 80040f2:	e002      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80040f4:	bf00      	nop
 80040f6:	e000      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80040f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10e      	bne.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004102:	4b06      	ldr	r3, [pc, #24]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004106:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800410a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800410e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004112:	4a02      	ldr	r2, [pc, #8]	@ (800411c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004114:	430b      	orrs	r3, r1
 8004116:	6593      	str	r3, [r2, #88]	@ 0x58
 8004118:	e006      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800411a:	bf00      	nop
 800411c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004120:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004124:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800412c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004130:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004134:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004138:	2300      	movs	r3, #0
 800413a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800413e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004142:	460b      	mov	r3, r1
 8004144:	4313      	orrs	r3, r2
 8004146:	d055      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800414c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004150:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004154:	d033      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004156:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800415a:	d82c      	bhi.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800415c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004160:	d02f      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004162:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004166:	d826      	bhi.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004168:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800416c:	d02b      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800416e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004172:	d820      	bhi.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004174:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004178:	d012      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800417a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800417e:	d81a      	bhi.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004180:	2b00      	cmp	r3, #0
 8004182:	d022      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004184:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004188:	d115      	bne.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800418a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418e:	3308      	adds	r3, #8
 8004190:	2100      	movs	r1, #0
 8004192:	4618      	mov	r0, r3
 8004194:	f000 fdee 	bl	8004d74 <RCCEx_PLL2_Config>
 8004198:	4603      	mov	r3, r0
 800419a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800419e:	e015      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a4:	3328      	adds	r3, #40	@ 0x28
 80041a6:	2102      	movs	r1, #2
 80041a8:	4618      	mov	r0, r3
 80041aa:	f000 fe95 	bl	8004ed8 <RCCEx_PLL3_Config>
 80041ae:	4603      	mov	r3, r0
 80041b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80041b4:	e00a      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041bc:	e006      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80041be:	bf00      	nop
 80041c0:	e004      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80041c2:	bf00      	nop
 80041c4:	e002      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80041c6:	bf00      	nop
 80041c8:	e000      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80041ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10b      	bne.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80041d4:	4ba1      	ldr	r3, [pc, #644]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80041dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80041e4:	4a9d      	ldr	r2, [pc, #628]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041e6:	430b      	orrs	r3, r1
 80041e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80041ea:	e003      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80041f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fc:	f002 0308 	and.w	r3, r2, #8
 8004200:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004204:	2300      	movs	r3, #0
 8004206:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800420a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800420e:	460b      	mov	r3, r1
 8004210:	4313      	orrs	r3, r2
 8004212:	d01e      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004218:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800421c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004220:	d10c      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004226:	3328      	adds	r3, #40	@ 0x28
 8004228:	2102      	movs	r1, #2
 800422a:	4618      	mov	r0, r3
 800422c:	f000 fe54 	bl	8004ed8 <RCCEx_PLL3_Config>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d002      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800423c:	4b87      	ldr	r3, [pc, #540]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800423e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004240:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004248:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800424c:	4a83      	ldr	r2, [pc, #524]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800424e:	430b      	orrs	r3, r1
 8004250:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425a:	f002 0310 	and.w	r3, r2, #16
 800425e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004262:	2300      	movs	r3, #0
 8004264:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004268:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800426c:	460b      	mov	r3, r1
 800426e:	4313      	orrs	r3, r2
 8004270:	d01e      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004276:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800427a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800427e:	d10c      	bne.n	800429a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004284:	3328      	adds	r3, #40	@ 0x28
 8004286:	2102      	movs	r1, #2
 8004288:	4618      	mov	r0, r3
 800428a:	f000 fe25 	bl	8004ed8 <RCCEx_PLL3_Config>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d002      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800429a:	4b70      	ldr	r3, [pc, #448]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800429c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800429e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80042a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042aa:	4a6c      	ldr	r2, [pc, #432]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042ac:	430b      	orrs	r3, r1
 80042ae:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80042bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80042c0:	2300      	movs	r3, #0
 80042c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80042c6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80042ca:	460b      	mov	r3, r1
 80042cc:	4313      	orrs	r3, r2
 80042ce:	d03e      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80042d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80042d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042dc:	d022      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80042de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042e2:	d81b      	bhi.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d003      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80042e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042ec:	d00b      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80042ee:	e015      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f4:	3308      	adds	r3, #8
 80042f6:	2100      	movs	r1, #0
 80042f8:	4618      	mov	r0, r3
 80042fa:	f000 fd3b 	bl	8004d74 <RCCEx_PLL2_Config>
 80042fe:	4603      	mov	r3, r0
 8004300:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004304:	e00f      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800430a:	3328      	adds	r3, #40	@ 0x28
 800430c:	2102      	movs	r1, #2
 800430e:	4618      	mov	r0, r3
 8004310:	f000 fde2 	bl	8004ed8 <RCCEx_PLL3_Config>
 8004314:	4603      	mov	r3, r0
 8004316:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800431a:	e004      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004322:	e000      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004324:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004326:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10b      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800432e:	4b4b      	ldr	r3, [pc, #300]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004332:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800433a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800433e:	4a47      	ldr	r2, [pc, #284]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004340:	430b      	orrs	r3, r1
 8004342:	6593      	str	r3, [r2, #88]	@ 0x58
 8004344:	e003      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004346:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800434a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800434e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004356:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800435a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800435c:	2300      	movs	r3, #0
 800435e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004360:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004364:	460b      	mov	r3, r1
 8004366:	4313      	orrs	r3, r2
 8004368:	d03b      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800436a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800436e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004372:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004376:	d01f      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004378:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800437c:	d818      	bhi.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800437e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004382:	d003      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004384:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004388:	d007      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800438a:	e011      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800438c:	4b33      	ldr	r3, [pc, #204]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800438e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004390:	4a32      	ldr	r2, [pc, #200]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004392:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004396:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004398:	e00f      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800439a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800439e:	3328      	adds	r3, #40	@ 0x28
 80043a0:	2101      	movs	r1, #1
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 fd98 	bl	8004ed8 <RCCEx_PLL3_Config>
 80043a8:	4603      	mov	r3, r0
 80043aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80043ae:	e004      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043b6:	e000      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80043b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10b      	bne.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043c2:	4b26      	ldr	r3, [pc, #152]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043c6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80043ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043d2:	4a22      	ldr	r2, [pc, #136]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043d4:	430b      	orrs	r3, r1
 80043d6:	6553      	str	r3, [r2, #84]	@ 0x54
 80043d8:	e003      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80043e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ea:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80043ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80043f0:	2300      	movs	r3, #0
 80043f2:	677b      	str	r3, [r7, #116]	@ 0x74
 80043f4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80043f8:	460b      	mov	r3, r1
 80043fa:	4313      	orrs	r3, r2
 80043fc:	d034      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80043fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004402:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004404:	2b00      	cmp	r3, #0
 8004406:	d003      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800440c:	d007      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800440e:	e011      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004410:	4b12      	ldr	r3, [pc, #72]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004414:	4a11      	ldr	r2, [pc, #68]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004416:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800441a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800441c:	e00e      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800441e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004422:	3308      	adds	r3, #8
 8004424:	2102      	movs	r1, #2
 8004426:	4618      	mov	r0, r3
 8004428:	f000 fca4 	bl	8004d74 <RCCEx_PLL2_Config>
 800442c:	4603      	mov	r3, r0
 800442e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004432:	e003      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800443a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800443c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10d      	bne.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004444:	4b05      	ldr	r3, [pc, #20]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004446:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004448:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800444c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004452:	4a02      	ldr	r2, [pc, #8]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004454:	430b      	orrs	r3, r1
 8004456:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004458:	e006      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800445a:	bf00      	nop
 800445c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004460:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004464:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800446c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004470:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004474:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004476:	2300      	movs	r3, #0
 8004478:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800447a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800447e:	460b      	mov	r3, r1
 8004480:	4313      	orrs	r3, r2
 8004482:	d00c      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004488:	3328      	adds	r3, #40	@ 0x28
 800448a:	2102      	movs	r1, #2
 800448c:	4618      	mov	r0, r3
 800448e:	f000 fd23 	bl	8004ed8 <RCCEx_PLL3_Config>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d002      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800449e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80044aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80044ac:	2300      	movs	r3, #0
 80044ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80044b0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80044b4:	460b      	mov	r3, r1
 80044b6:	4313      	orrs	r3, r2
 80044b8:	d038      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80044ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044c6:	d018      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80044c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044cc:	d811      	bhi.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80044ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044d2:	d014      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80044d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044d8:	d80b      	bhi.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d011      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80044de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044e2:	d106      	bne.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044e4:	4bc3      	ldr	r3, [pc, #780]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e8:	4ac2      	ldr	r2, [pc, #776]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80044f0:	e008      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044f8:	e004      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80044fa:	bf00      	nop
 80044fc:	e002      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80044fe:	bf00      	nop
 8004500:	e000      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004502:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004504:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10b      	bne.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800450c:	4bb9      	ldr	r3, [pc, #740]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800450e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004510:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004518:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800451c:	4ab5      	ldr	r2, [pc, #724]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800451e:	430b      	orrs	r3, r1
 8004520:	6553      	str	r3, [r2, #84]	@ 0x54
 8004522:	e003      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004524:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004528:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800452c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004534:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004538:	65bb      	str	r3, [r7, #88]	@ 0x58
 800453a:	2300      	movs	r3, #0
 800453c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800453e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004542:	460b      	mov	r3, r1
 8004544:	4313      	orrs	r3, r2
 8004546:	d009      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004548:	4baa      	ldr	r3, [pc, #680]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800454a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800454c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004554:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004556:	4aa7      	ldr	r2, [pc, #668]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004558:	430b      	orrs	r3, r1
 800455a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800455c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004564:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004568:	653b      	str	r3, [r7, #80]	@ 0x50
 800456a:	2300      	movs	r3, #0
 800456c:	657b      	str	r3, [r7, #84]	@ 0x54
 800456e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004572:	460b      	mov	r3, r1
 8004574:	4313      	orrs	r3, r2
 8004576:	d00a      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004578:	4b9e      	ldr	r3, [pc, #632]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004584:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004588:	4a9a      	ldr	r2, [pc, #616]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800458a:	430b      	orrs	r3, r1
 800458c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800458e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004596:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800459a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800459c:	2300      	movs	r3, #0
 800459e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045a0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80045a4:	460b      	mov	r3, r1
 80045a6:	4313      	orrs	r3, r2
 80045a8:	d009      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045aa:	4b92      	ldr	r3, [pc, #584]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045ae:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80045b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045b8:	4a8e      	ldr	r2, [pc, #568]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045ba:	430b      	orrs	r3, r1
 80045bc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80045be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80045ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80045cc:	2300      	movs	r3, #0
 80045ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80045d0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80045d4:	460b      	mov	r3, r1
 80045d6:	4313      	orrs	r3, r2
 80045d8:	d00e      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045da:	4b86      	ldr	r3, [pc, #536]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	4a85      	ldr	r2, [pc, #532]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045e0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80045e4:	6113      	str	r3, [r2, #16]
 80045e6:	4b83      	ldr	r3, [pc, #524]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045e8:	6919      	ldr	r1, [r3, #16]
 80045ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80045f2:	4a80      	ldr	r2, [pc, #512]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045f4:	430b      	orrs	r3, r1
 80045f6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80045f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004600:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004604:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004606:	2300      	movs	r3, #0
 8004608:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800460a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800460e:	460b      	mov	r3, r1
 8004610:	4313      	orrs	r3, r2
 8004612:	d009      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004614:	4b77      	ldr	r3, [pc, #476]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004618:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800461c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004622:	4a74      	ldr	r2, [pc, #464]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004624:	430b      	orrs	r3, r1
 8004626:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800462c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004630:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004634:	633b      	str	r3, [r7, #48]	@ 0x30
 8004636:	2300      	movs	r3, #0
 8004638:	637b      	str	r3, [r7, #52]	@ 0x34
 800463a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800463e:	460b      	mov	r3, r1
 8004640:	4313      	orrs	r3, r2
 8004642:	d00a      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004644:	4b6b      	ldr	r3, [pc, #428]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004648:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800464c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004650:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004654:	4a67      	ldr	r2, [pc, #412]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004656:	430b      	orrs	r3, r1
 8004658:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800465a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800465e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004662:	2100      	movs	r1, #0
 8004664:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800466c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004670:	460b      	mov	r3, r1
 8004672:	4313      	orrs	r3, r2
 8004674:	d011      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800467a:	3308      	adds	r3, #8
 800467c:	2100      	movs	r1, #0
 800467e:	4618      	mov	r0, r3
 8004680:	f000 fb78 	bl	8004d74 <RCCEx_PLL2_Config>
 8004684:	4603      	mov	r3, r0
 8004686:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800468a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004692:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004696:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800469a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800469e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a2:	2100      	movs	r1, #0
 80046a4:	6239      	str	r1, [r7, #32]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ac:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80046b0:	460b      	mov	r3, r1
 80046b2:	4313      	orrs	r3, r2
 80046b4:	d011      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ba:	3308      	adds	r3, #8
 80046bc:	2101      	movs	r1, #1
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 fb58 	bl	8004d74 <RCCEx_PLL2_Config>
 80046c4:	4603      	mov	r3, r0
 80046c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80046ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80046da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e2:	2100      	movs	r1, #0
 80046e4:	61b9      	str	r1, [r7, #24]
 80046e6:	f003 0304 	and.w	r3, r3, #4
 80046ea:	61fb      	str	r3, [r7, #28]
 80046ec:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80046f0:	460b      	mov	r3, r1
 80046f2:	4313      	orrs	r3, r2
 80046f4:	d011      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80046f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046fa:	3308      	adds	r3, #8
 80046fc:	2102      	movs	r1, #2
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 fb38 	bl	8004d74 <RCCEx_PLL2_Config>
 8004704:	4603      	mov	r3, r0
 8004706:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800470a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004712:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004716:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800471a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800471e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004722:	2100      	movs	r1, #0
 8004724:	6139      	str	r1, [r7, #16]
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	617b      	str	r3, [r7, #20]
 800472c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004730:	460b      	mov	r3, r1
 8004732:	4313      	orrs	r3, r2
 8004734:	d011      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800473a:	3328      	adds	r3, #40	@ 0x28
 800473c:	2100      	movs	r1, #0
 800473e:	4618      	mov	r0, r3
 8004740:	f000 fbca 	bl	8004ed8 <RCCEx_PLL3_Config>
 8004744:	4603      	mov	r3, r0
 8004746:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800474a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004752:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004756:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800475a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800475e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004762:	2100      	movs	r1, #0
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	f003 0310 	and.w	r3, r3, #16
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004770:	460b      	mov	r3, r1
 8004772:	4313      	orrs	r3, r2
 8004774:	d011      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800477a:	3328      	adds	r3, #40	@ 0x28
 800477c:	2101      	movs	r1, #1
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fbaa 	bl	8004ed8 <RCCEx_PLL3_Config>
 8004784:	4603      	mov	r3, r0
 8004786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800478a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004792:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004796:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800479a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800479e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a2:	2100      	movs	r1, #0
 80047a4:	6039      	str	r1, [r7, #0]
 80047a6:	f003 0320 	and.w	r3, r3, #32
 80047aa:	607b      	str	r3, [r7, #4]
 80047ac:	e9d7 1200 	ldrd	r1, r2, [r7]
 80047b0:	460b      	mov	r3, r1
 80047b2:	4313      	orrs	r3, r2
 80047b4:	d011      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ba:	3328      	adds	r3, #40	@ 0x28
 80047bc:	2102      	movs	r1, #2
 80047be:	4618      	mov	r0, r3
 80047c0:	f000 fb8a 	bl	8004ed8 <RCCEx_PLL3_Config>
 80047c4:	4603      	mov	r3, r0
 80047c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80047ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80047da:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80047e2:	2300      	movs	r3, #0
 80047e4:	e000      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80047ee:	46bd      	mov	sp, r7
 80047f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047f4:	58024400 	.word	0x58024400

080047f8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80047fc:	f7fe fd96 	bl	800332c <HAL_RCC_GetHCLKFreq>
 8004800:	4602      	mov	r2, r0
 8004802:	4b06      	ldr	r3, [pc, #24]	@ (800481c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	091b      	lsrs	r3, r3, #4
 8004808:	f003 0307 	and.w	r3, r3, #7
 800480c:	4904      	ldr	r1, [pc, #16]	@ (8004820 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800480e:	5ccb      	ldrb	r3, [r1, r3]
 8004810:	f003 031f 	and.w	r3, r3, #31
 8004814:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004818:	4618      	mov	r0, r3
 800481a:	bd80      	pop	{r7, pc}
 800481c:	58024400 	.word	0x58024400
 8004820:	08008044 	.word	0x08008044

08004824 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004824:	b480      	push	{r7}
 8004826:	b089      	sub	sp, #36	@ 0x24
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800482c:	4ba1      	ldr	r3, [pc, #644]	@ (8004ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800482e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004830:	f003 0303 	and.w	r3, r3, #3
 8004834:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004836:	4b9f      	ldr	r3, [pc, #636]	@ (8004ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800483a:	0b1b      	lsrs	r3, r3, #12
 800483c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004840:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004842:	4b9c      	ldr	r3, [pc, #624]	@ (8004ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004846:	091b      	lsrs	r3, r3, #4
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800484e:	4b99      	ldr	r3, [pc, #612]	@ (8004ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004852:	08db      	lsrs	r3, r3, #3
 8004854:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	fb02 f303 	mul.w	r3, r2, r3
 800485e:	ee07 3a90 	vmov	s15, r3
 8004862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004866:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 8111 	beq.w	8004a94 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	2b02      	cmp	r3, #2
 8004876:	f000 8083 	beq.w	8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	2b02      	cmp	r3, #2
 800487e:	f200 80a1 	bhi.w	80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d003      	beq.n	8004890 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d056      	beq.n	800493c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800488e:	e099      	b.n	80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004890:	4b88      	ldr	r3, [pc, #544]	@ (8004ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0320 	and.w	r3, r3, #32
 8004898:	2b00      	cmp	r3, #0
 800489a:	d02d      	beq.n	80048f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800489c:	4b85      	ldr	r3, [pc, #532]	@ (8004ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	08db      	lsrs	r3, r3, #3
 80048a2:	f003 0303 	and.w	r3, r3, #3
 80048a6:	4a84      	ldr	r2, [pc, #528]	@ (8004ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80048a8:	fa22 f303 	lsr.w	r3, r2, r3
 80048ac:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	ee07 3a90 	vmov	s15, r3
 80048b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	ee07 3a90 	vmov	s15, r3
 80048be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048c6:	4b7b      	ldr	r3, [pc, #492]	@ (8004ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ce:	ee07 3a90 	vmov	s15, r3
 80048d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048da:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004abc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80048f6:	e087      	b.n	8004a08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	ee07 3a90 	vmov	s15, r3
 80048fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004902:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800490a:	4b6a      	ldr	r3, [pc, #424]	@ (8004ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800490c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800490e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004912:	ee07 3a90 	vmov	s15, r3
 8004916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800491a:	ed97 6a03 	vldr	s12, [r7, #12]
 800491e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004abc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800492a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800492e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004936:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800493a:	e065      	b.n	8004a08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	ee07 3a90 	vmov	s15, r3
 8004942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004946:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800494a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800494e:	4b59      	ldr	r3, [pc, #356]	@ (8004ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004956:	ee07 3a90 	vmov	s15, r3
 800495a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800495e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004962:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004abc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800496a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800496e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800497a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800497e:	e043      	b.n	8004a08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	ee07 3a90 	vmov	s15, r3
 8004986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800498a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800498e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004992:	4b48      	ldr	r3, [pc, #288]	@ (8004ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800499a:	ee07 3a90 	vmov	s15, r3
 800499e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80049a6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004abc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049c2:	e021      	b.n	8004a08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	ee07 3a90 	vmov	s15, r3
 80049ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80049d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049d6:	4b37      	ldr	r3, [pc, #220]	@ (8004ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049de:	ee07 3a90 	vmov	s15, r3
 80049e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80049ea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004abc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a06:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004a08:	4b2a      	ldr	r3, [pc, #168]	@ (8004ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a0c:	0a5b      	lsrs	r3, r3, #9
 8004a0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a12:	ee07 3a90 	vmov	s15, r3
 8004a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a22:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a2e:	ee17 2a90 	vmov	r2, s15
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004a36:	4b1f      	ldr	r3, [pc, #124]	@ (8004ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a3a:	0c1b      	lsrs	r3, r3, #16
 8004a3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a40:	ee07 3a90 	vmov	s15, r3
 8004a44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a50:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a5c:	ee17 2a90 	vmov	r2, s15
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004a64:	4b13      	ldr	r3, [pc, #76]	@ (8004ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a68:	0e1b      	lsrs	r3, r3, #24
 8004a6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a6e:	ee07 3a90 	vmov	s15, r3
 8004a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a8a:	ee17 2a90 	vmov	r2, s15
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004a92:	e008      	b.n	8004aa6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	609a      	str	r2, [r3, #8]
}
 8004aa6:	bf00      	nop
 8004aa8:	3724      	adds	r7, #36	@ 0x24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	58024400 	.word	0x58024400
 8004ab8:	03d09000 	.word	0x03d09000
 8004abc:	46000000 	.word	0x46000000
 8004ac0:	4c742400 	.word	0x4c742400
 8004ac4:	4a742400 	.word	0x4a742400
 8004ac8:	4bbebc20 	.word	0x4bbebc20

08004acc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b089      	sub	sp, #36	@ 0x24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ad4:	4ba1      	ldr	r3, [pc, #644]	@ (8004d5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad8:	f003 0303 	and.w	r3, r3, #3
 8004adc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004ade:	4b9f      	ldr	r3, [pc, #636]	@ (8004d5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae2:	0d1b      	lsrs	r3, r3, #20
 8004ae4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ae8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004aea:	4b9c      	ldr	r3, [pc, #624]	@ (8004d5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aee:	0a1b      	lsrs	r3, r3, #8
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004af6:	4b99      	ldr	r3, [pc, #612]	@ (8004d5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004afa:	08db      	lsrs	r3, r3, #3
 8004afc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	fb02 f303 	mul.w	r3, r2, r3
 8004b06:	ee07 3a90 	vmov	s15, r3
 8004b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b0e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 8111 	beq.w	8004d3c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	f000 8083 	beq.w	8004c28 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	f200 80a1 	bhi.w	8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d003      	beq.n	8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d056      	beq.n	8004be4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004b36:	e099      	b.n	8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b38:	4b88      	ldr	r3, [pc, #544]	@ (8004d5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0320 	and.w	r3, r3, #32
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d02d      	beq.n	8004ba0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b44:	4b85      	ldr	r3, [pc, #532]	@ (8004d5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	08db      	lsrs	r3, r3, #3
 8004b4a:	f003 0303 	and.w	r3, r3, #3
 8004b4e:	4a84      	ldr	r2, [pc, #528]	@ (8004d60 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004b50:	fa22 f303 	lsr.w	r3, r2, r3
 8004b54:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	ee07 3a90 	vmov	s15, r3
 8004b5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	ee07 3a90 	vmov	s15, r3
 8004b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b6e:	4b7b      	ldr	r3, [pc, #492]	@ (8004d5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b76:	ee07 3a90 	vmov	s15, r3
 8004b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b82:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004d64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b9a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004b9e:	e087      	b.n	8004cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	ee07 3a90 	vmov	s15, r3
 8004ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004baa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004d68 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bb2:	4b6a      	ldr	r3, [pc, #424]	@ (8004d5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bba:	ee07 3a90 	vmov	s15, r3
 8004bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bc6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004d64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004be2:	e065      	b.n	8004cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	ee07 3a90 	vmov	s15, r3
 8004bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bf6:	4b59      	ldr	r3, [pc, #356]	@ (8004d5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bfe:	ee07 3a90 	vmov	s15, r3
 8004c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c0a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004d64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c26:	e043      	b.n	8004cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	ee07 3a90 	vmov	s15, r3
 8004c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c32:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004d70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c3a:	4b48      	ldr	r3, [pc, #288]	@ (8004d5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c42:	ee07 3a90 	vmov	s15, r3
 8004c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c4e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004d64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c6a:	e021      	b.n	8004cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	ee07 3a90 	vmov	s15, r3
 8004c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c76:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c7e:	4b37      	ldr	r3, [pc, #220]	@ (8004d5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c86:	ee07 3a90 	vmov	s15, r3
 8004c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c92:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004d64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004caa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004cb0:	4b2a      	ldr	r3, [pc, #168]	@ (8004d5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb4:	0a5b      	lsrs	r3, r3, #9
 8004cb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cba:	ee07 3a90 	vmov	s15, r3
 8004cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004cc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cca:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cd6:	ee17 2a90 	vmov	r2, s15
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004cde:	4b1f      	ldr	r3, [pc, #124]	@ (8004d5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce2:	0c1b      	lsrs	r3, r3, #16
 8004ce4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ce8:	ee07 3a90 	vmov	s15, r3
 8004cec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cf0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004cf4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cf8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d04:	ee17 2a90 	vmov	r2, s15
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004d0c:	4b13      	ldr	r3, [pc, #76]	@ (8004d5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d10:	0e1b      	lsrs	r3, r3, #24
 8004d12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d16:	ee07 3a90 	vmov	s15, r3
 8004d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d26:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d32:	ee17 2a90 	vmov	r2, s15
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004d3a:	e008      	b.n	8004d4e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	609a      	str	r2, [r3, #8]
}
 8004d4e:	bf00      	nop
 8004d50:	3724      	adds	r7, #36	@ 0x24
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	58024400 	.word	0x58024400
 8004d60:	03d09000 	.word	0x03d09000
 8004d64:	46000000 	.word	0x46000000
 8004d68:	4c742400 	.word	0x4c742400
 8004d6c:	4a742400 	.word	0x4a742400
 8004d70:	4bbebc20 	.word	0x4bbebc20

08004d74 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d82:	4b53      	ldr	r3, [pc, #332]	@ (8004ed0 <RCCEx_PLL2_Config+0x15c>)
 8004d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d86:	f003 0303 	and.w	r3, r3, #3
 8004d8a:	2b03      	cmp	r3, #3
 8004d8c:	d101      	bne.n	8004d92 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e099      	b.n	8004ec6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004d92:	4b4f      	ldr	r3, [pc, #316]	@ (8004ed0 <RCCEx_PLL2_Config+0x15c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a4e      	ldr	r2, [pc, #312]	@ (8004ed0 <RCCEx_PLL2_Config+0x15c>)
 8004d98:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d9e:	f7fc fc95 	bl	80016cc <HAL_GetTick>
 8004da2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004da4:	e008      	b.n	8004db8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004da6:	f7fc fc91 	bl	80016cc <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d901      	bls.n	8004db8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e086      	b.n	8004ec6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004db8:	4b45      	ldr	r3, [pc, #276]	@ (8004ed0 <RCCEx_PLL2_Config+0x15c>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1f0      	bne.n	8004da6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004dc4:	4b42      	ldr	r3, [pc, #264]	@ (8004ed0 <RCCEx_PLL2_Config+0x15c>)
 8004dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	031b      	lsls	r3, r3, #12
 8004dd2:	493f      	ldr	r1, [pc, #252]	@ (8004ed0 <RCCEx_PLL2_Config+0x15c>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	628b      	str	r3, [r1, #40]	@ 0x28
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	3b01      	subs	r3, #1
 8004de8:	025b      	lsls	r3, r3, #9
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	431a      	orrs	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	3b01      	subs	r3, #1
 8004df4:	041b      	lsls	r3, r3, #16
 8004df6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	3b01      	subs	r3, #1
 8004e02:	061b      	lsls	r3, r3, #24
 8004e04:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004e08:	4931      	ldr	r1, [pc, #196]	@ (8004ed0 <RCCEx_PLL2_Config+0x15c>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004e0e:	4b30      	ldr	r3, [pc, #192]	@ (8004ed0 <RCCEx_PLL2_Config+0x15c>)
 8004e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e12:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	492d      	ldr	r1, [pc, #180]	@ (8004ed0 <RCCEx_PLL2_Config+0x15c>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004e20:	4b2b      	ldr	r3, [pc, #172]	@ (8004ed0 <RCCEx_PLL2_Config+0x15c>)
 8004e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e24:	f023 0220 	bic.w	r2, r3, #32
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	4928      	ldr	r1, [pc, #160]	@ (8004ed0 <RCCEx_PLL2_Config+0x15c>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004e32:	4b27      	ldr	r3, [pc, #156]	@ (8004ed0 <RCCEx_PLL2_Config+0x15c>)
 8004e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e36:	4a26      	ldr	r2, [pc, #152]	@ (8004ed0 <RCCEx_PLL2_Config+0x15c>)
 8004e38:	f023 0310 	bic.w	r3, r3, #16
 8004e3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004e3e:	4b24      	ldr	r3, [pc, #144]	@ (8004ed0 <RCCEx_PLL2_Config+0x15c>)
 8004e40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e42:	4b24      	ldr	r3, [pc, #144]	@ (8004ed4 <RCCEx_PLL2_Config+0x160>)
 8004e44:	4013      	ands	r3, r2
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	69d2      	ldr	r2, [r2, #28]
 8004e4a:	00d2      	lsls	r2, r2, #3
 8004e4c:	4920      	ldr	r1, [pc, #128]	@ (8004ed0 <RCCEx_PLL2_Config+0x15c>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004e52:	4b1f      	ldr	r3, [pc, #124]	@ (8004ed0 <RCCEx_PLL2_Config+0x15c>)
 8004e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e56:	4a1e      	ldr	r2, [pc, #120]	@ (8004ed0 <RCCEx_PLL2_Config+0x15c>)
 8004e58:	f043 0310 	orr.w	r3, r3, #16
 8004e5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d106      	bne.n	8004e72 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004e64:	4b1a      	ldr	r3, [pc, #104]	@ (8004ed0 <RCCEx_PLL2_Config+0x15c>)
 8004e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e68:	4a19      	ldr	r2, [pc, #100]	@ (8004ed0 <RCCEx_PLL2_Config+0x15c>)
 8004e6a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004e6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e70:	e00f      	b.n	8004e92 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d106      	bne.n	8004e86 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004e78:	4b15      	ldr	r3, [pc, #84]	@ (8004ed0 <RCCEx_PLL2_Config+0x15c>)
 8004e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7c:	4a14      	ldr	r2, [pc, #80]	@ (8004ed0 <RCCEx_PLL2_Config+0x15c>)
 8004e7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e82:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e84:	e005      	b.n	8004e92 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004e86:	4b12      	ldr	r3, [pc, #72]	@ (8004ed0 <RCCEx_PLL2_Config+0x15c>)
 8004e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e8a:	4a11      	ldr	r2, [pc, #68]	@ (8004ed0 <RCCEx_PLL2_Config+0x15c>)
 8004e8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004e90:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004e92:	4b0f      	ldr	r3, [pc, #60]	@ (8004ed0 <RCCEx_PLL2_Config+0x15c>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a0e      	ldr	r2, [pc, #56]	@ (8004ed0 <RCCEx_PLL2_Config+0x15c>)
 8004e98:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e9e:	f7fc fc15 	bl	80016cc <HAL_GetTick>
 8004ea2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ea4:	e008      	b.n	8004eb8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004ea6:	f7fc fc11 	bl	80016cc <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d901      	bls.n	8004eb8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e006      	b.n	8004ec6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004eb8:	4b05      	ldr	r3, [pc, #20]	@ (8004ed0 <RCCEx_PLL2_Config+0x15c>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d0f0      	beq.n	8004ea6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	58024400 	.word	0x58024400
 8004ed4:	ffff0007 	.word	0xffff0007

08004ed8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ee6:	4b53      	ldr	r3, [pc, #332]	@ (8005034 <RCCEx_PLL3_Config+0x15c>)
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eea:	f003 0303 	and.w	r3, r3, #3
 8004eee:	2b03      	cmp	r3, #3
 8004ef0:	d101      	bne.n	8004ef6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e099      	b.n	800502a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004ef6:	4b4f      	ldr	r3, [pc, #316]	@ (8005034 <RCCEx_PLL3_Config+0x15c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a4e      	ldr	r2, [pc, #312]	@ (8005034 <RCCEx_PLL3_Config+0x15c>)
 8004efc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f02:	f7fc fbe3 	bl	80016cc <HAL_GetTick>
 8004f06:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f08:	e008      	b.n	8004f1c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f0a:	f7fc fbdf 	bl	80016cc <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d901      	bls.n	8004f1c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e086      	b.n	800502a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f1c:	4b45      	ldr	r3, [pc, #276]	@ (8005034 <RCCEx_PLL3_Config+0x15c>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1f0      	bne.n	8004f0a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004f28:	4b42      	ldr	r3, [pc, #264]	@ (8005034 <RCCEx_PLL3_Config+0x15c>)
 8004f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f2c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	051b      	lsls	r3, r3, #20
 8004f36:	493f      	ldr	r1, [pc, #252]	@ (8005034 <RCCEx_PLL3_Config+0x15c>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	3b01      	subs	r3, #1
 8004f42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	025b      	lsls	r3, r3, #9
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	431a      	orrs	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	3b01      	subs	r3, #1
 8004f58:	041b      	lsls	r3, r3, #16
 8004f5a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	3b01      	subs	r3, #1
 8004f66:	061b      	lsls	r3, r3, #24
 8004f68:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004f6c:	4931      	ldr	r1, [pc, #196]	@ (8005034 <RCCEx_PLL3_Config+0x15c>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004f72:	4b30      	ldr	r3, [pc, #192]	@ (8005034 <RCCEx_PLL3_Config+0x15c>)
 8004f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f76:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	492d      	ldr	r1, [pc, #180]	@ (8005034 <RCCEx_PLL3_Config+0x15c>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004f84:	4b2b      	ldr	r3, [pc, #172]	@ (8005034 <RCCEx_PLL3_Config+0x15c>)
 8004f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f88:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	4928      	ldr	r1, [pc, #160]	@ (8005034 <RCCEx_PLL3_Config+0x15c>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004f96:	4b27      	ldr	r3, [pc, #156]	@ (8005034 <RCCEx_PLL3_Config+0x15c>)
 8004f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f9a:	4a26      	ldr	r2, [pc, #152]	@ (8005034 <RCCEx_PLL3_Config+0x15c>)
 8004f9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fa0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004fa2:	4b24      	ldr	r3, [pc, #144]	@ (8005034 <RCCEx_PLL3_Config+0x15c>)
 8004fa4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fa6:	4b24      	ldr	r3, [pc, #144]	@ (8005038 <RCCEx_PLL3_Config+0x160>)
 8004fa8:	4013      	ands	r3, r2
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	69d2      	ldr	r2, [r2, #28]
 8004fae:	00d2      	lsls	r2, r2, #3
 8004fb0:	4920      	ldr	r1, [pc, #128]	@ (8005034 <RCCEx_PLL3_Config+0x15c>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004fb6:	4b1f      	ldr	r3, [pc, #124]	@ (8005034 <RCCEx_PLL3_Config+0x15c>)
 8004fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fba:	4a1e      	ldr	r2, [pc, #120]	@ (8005034 <RCCEx_PLL3_Config+0x15c>)
 8004fbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d106      	bne.n	8004fd6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8005034 <RCCEx_PLL3_Config+0x15c>)
 8004fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fcc:	4a19      	ldr	r2, [pc, #100]	@ (8005034 <RCCEx_PLL3_Config+0x15c>)
 8004fce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004fd2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004fd4:	e00f      	b.n	8004ff6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d106      	bne.n	8004fea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004fdc:	4b15      	ldr	r3, [pc, #84]	@ (8005034 <RCCEx_PLL3_Config+0x15c>)
 8004fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe0:	4a14      	ldr	r2, [pc, #80]	@ (8005034 <RCCEx_PLL3_Config+0x15c>)
 8004fe2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004fe6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004fe8:	e005      	b.n	8004ff6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004fea:	4b12      	ldr	r3, [pc, #72]	@ (8005034 <RCCEx_PLL3_Config+0x15c>)
 8004fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fee:	4a11      	ldr	r2, [pc, #68]	@ (8005034 <RCCEx_PLL3_Config+0x15c>)
 8004ff0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ff4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8005034 <RCCEx_PLL3_Config+0x15c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a0e      	ldr	r2, [pc, #56]	@ (8005034 <RCCEx_PLL3_Config+0x15c>)
 8004ffc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005000:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005002:	f7fc fb63 	bl	80016cc <HAL_GetTick>
 8005006:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005008:	e008      	b.n	800501c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800500a:	f7fc fb5f 	bl	80016cc <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	2b02      	cmp	r3, #2
 8005016:	d901      	bls.n	800501c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e006      	b.n	800502a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800501c:	4b05      	ldr	r3, [pc, #20]	@ (8005034 <RCCEx_PLL3_Config+0x15c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d0f0      	beq.n	800500a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005028:	7bfb      	ldrb	r3, [r7, #15]
}
 800502a:	4618      	mov	r0, r3
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	58024400 	.word	0x58024400
 8005038:	ffff0007 	.word	0xffff0007

0800503c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d101      	bne.n	800504e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e10f      	b.n	800526e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a87      	ldr	r2, [pc, #540]	@ (8005278 <HAL_SPI_Init+0x23c>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d00f      	beq.n	800507e <HAL_SPI_Init+0x42>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a86      	ldr	r2, [pc, #536]	@ (800527c <HAL_SPI_Init+0x240>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d00a      	beq.n	800507e <HAL_SPI_Init+0x42>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a84      	ldr	r2, [pc, #528]	@ (8005280 <HAL_SPI_Init+0x244>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d005      	beq.n	800507e <HAL_SPI_Init+0x42>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	2b0f      	cmp	r3, #15
 8005078:	d901      	bls.n	800507e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e0f7      	b.n	800526e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 ff22 	bl	8005ec8 <SPI_GetPacketSize>
 8005084:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a7b      	ldr	r2, [pc, #492]	@ (8005278 <HAL_SPI_Init+0x23c>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d00c      	beq.n	80050aa <HAL_SPI_Init+0x6e>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a79      	ldr	r2, [pc, #484]	@ (800527c <HAL_SPI_Init+0x240>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d007      	beq.n	80050aa <HAL_SPI_Init+0x6e>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a78      	ldr	r2, [pc, #480]	@ (8005280 <HAL_SPI_Init+0x244>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d002      	beq.n	80050aa <HAL_SPI_Init+0x6e>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2b08      	cmp	r3, #8
 80050a8:	d811      	bhi.n	80050ce <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80050ae:	4a72      	ldr	r2, [pc, #456]	@ (8005278 <HAL_SPI_Init+0x23c>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d009      	beq.n	80050c8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a70      	ldr	r2, [pc, #448]	@ (800527c <HAL_SPI_Init+0x240>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d004      	beq.n	80050c8 <HAL_SPI_Init+0x8c>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a6f      	ldr	r2, [pc, #444]	@ (8005280 <HAL_SPI_Init+0x244>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d104      	bne.n	80050d2 <HAL_SPI_Init+0x96>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2b10      	cmp	r3, #16
 80050cc:	d901      	bls.n	80050d2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e0cd      	b.n	800526e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d106      	bne.n	80050ec <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f7fb fdd4 	bl	8000c94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2202      	movs	r2, #2
 80050f0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 0201 	bic.w	r2, r2, #1
 8005102:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800510e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005118:	d119      	bne.n	800514e <HAL_SPI_Init+0x112>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005122:	d103      	bne.n	800512c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005128:	2b00      	cmp	r3, #0
 800512a:	d008      	beq.n	800513e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10c      	bne.n	800514e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005138:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800513c:	d107      	bne.n	800514e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800514c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00f      	beq.n	800517a <HAL_SPI_Init+0x13e>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	2b06      	cmp	r3, #6
 8005160:	d90b      	bls.n	800517a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	430a      	orrs	r2, r1
 8005176:	601a      	str	r2, [r3, #0]
 8005178:	e007      	b.n	800518a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005188:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	69da      	ldr	r2, [r3, #28]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005192:	431a      	orrs	r2, r3
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	431a      	orrs	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800519c:	ea42 0103 	orr.w	r1, r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68da      	ldr	r2, [r3, #12]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b4:	431a      	orrs	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ba:	431a      	orrs	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	431a      	orrs	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	431a      	orrs	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	695b      	ldr	r3, [r3, #20]
 80051cc:	431a      	orrs	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	431a      	orrs	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	431a      	orrs	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051de:	431a      	orrs	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	431a      	orrs	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051ea:	ea42 0103 	orr.w	r1, r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	430a      	orrs	r2, r1
 80051f8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d113      	bne.n	800522a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005214:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005228:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f022 0201 	bic.w	r2, r2, #1
 8005238:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00a      	beq.n	800525c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	430a      	orrs	r2, r1
 800525a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	40013000 	.word	0x40013000
 800527c:	40003800 	.word	0x40003800
 8005280:	40003c00 	.word	0x40003c00

08005284 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b08e      	sub	sp, #56	@ 0x38
 8005288:	af02      	add	r7, sp, #8
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
 8005290:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	3320      	adds	r3, #32
 8005298:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	3330      	adds	r3, #48	@ 0x30
 80052a0:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052a6:	095b      	lsrs	r3, r3, #5
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	3301      	adds	r3, #1
 80052ac:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052ae:	f7fc fa0d 	bl	80016cc <HAL_GetTick>
 80052b2:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 80052b4:	887b      	ldrh	r3, [r7, #2]
 80052b6:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 80052b8:	887b      	ldrh	r3, [r7, #2]
 80052ba:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d001      	beq.n	80052cc <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 80052c8:	2302      	movs	r3, #2
 80052ca:	e310      	b.n	80058ee <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d005      	beq.n	80052de <HAL_SPI_TransmitReceive+0x5a>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d002      	beq.n	80052de <HAL_SPI_TransmitReceive+0x5a>
 80052d8:	887b      	ldrh	r3, [r7, #2]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e305      	b.n	80058ee <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d101      	bne.n	80052f0 <HAL_SPI_TransmitReceive+0x6c>
 80052ec:	2302      	movs	r3, #2
 80052ee:	e2fe      	b.n	80058ee <HAL_SPI_TransmitReceive+0x66a>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2205      	movs	r2, #5
 80052fc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	887a      	ldrh	r2, [r7, #2]
 8005312:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	887a      	ldrh	r2, [r7, #2]
 800531a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	887a      	ldrh	r2, [r7, #2]
 8005328:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	887a      	ldrh	r2, [r7, #2]
 8005330:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68da      	ldr	r2, [r3, #12]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800534e:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a70      	ldr	r2, [pc, #448]	@ (8005518 <HAL_SPI_TransmitReceive+0x294>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d009      	beq.n	800536e <HAL_SPI_TransmitReceive+0xea>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a6f      	ldr	r2, [pc, #444]	@ (800551c <HAL_SPI_TransmitReceive+0x298>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d004      	beq.n	800536e <HAL_SPI_TransmitReceive+0xea>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a6d      	ldr	r2, [pc, #436]	@ (8005520 <HAL_SPI_TransmitReceive+0x29c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d102      	bne.n	8005374 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800536e:	2310      	movs	r3, #16
 8005370:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005372:	e001      	b.n	8005378 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8005374:	2308      	movs	r3, #8
 8005376:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	685a      	ldr	r2, [r3, #4]
 800537e:	4b69      	ldr	r3, [pc, #420]	@ (8005524 <HAL_SPI_TransmitReceive+0x2a0>)
 8005380:	4013      	ands	r3, r2
 8005382:	8879      	ldrh	r1, [r7, #2]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	6812      	ldr	r2, [r2, #0]
 8005388:	430b      	orrs	r3, r1
 800538a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f042 0201 	orr.w	r2, r2, #1
 800539a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053a4:	d107      	bne.n	80053b6 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	2b0f      	cmp	r3, #15
 80053bc:	f240 80a2 	bls.w	8005504 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 80053c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053c2:	089b      	lsrs	r3, r3, #2
 80053c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80053c6:	e094      	b.n	80054f2 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d120      	bne.n	8005418 <HAL_SPI_TransmitReceive+0x194>
 80053d6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d01d      	beq.n	8005418 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80053dc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80053de:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80053e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053e2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d217      	bcs.n	8005418 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6812      	ldr	r2, [r2, #0]
 80053f2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053f8:	1d1a      	adds	r2, r3, #4
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005404:	b29b      	uxth	r3, r3
 8005406:	3b01      	subs	r3, #1
 8005408:	b29a      	uxth	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005416:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005420:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005422:	2b00      	cmp	r3, #0
 8005424:	d065      	beq.n	80054f2 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b01      	cmp	r3, #1
 8005432:	d118      	bne.n	8005466 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800543c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800543e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005444:	1d1a      	adds	r2, r3, #4
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005450:	b29b      	uxth	r3, r3
 8005452:	3b01      	subs	r3, #1
 8005454:	b29a      	uxth	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005462:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005464:	e045      	b.n	80054f2 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005466:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005468:	8bfb      	ldrh	r3, [r7, #30]
 800546a:	429a      	cmp	r2, r3
 800546c:	d21d      	bcs.n	80054aa <HAL_SPI_TransmitReceive+0x226>
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d018      	beq.n	80054aa <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005480:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005482:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005488:	1d1a      	adds	r2, r3, #4
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005494:	b29b      	uxth	r3, r3
 8005496:	3b01      	subs	r3, #1
 8005498:	b29a      	uxth	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80054a6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80054a8:	e023      	b.n	80054f2 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054aa:	f7fc f90f 	bl	80016cc <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d803      	bhi.n	80054c2 <HAL_SPI_TransmitReceive+0x23e>
 80054ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c0:	d102      	bne.n	80054c8 <HAL_SPI_TransmitReceive+0x244>
 80054c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d114      	bne.n	80054f2 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f000 fc2f 	bl	8005d2c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054d4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e1fd      	b.n	80058ee <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80054f2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f47f af67 	bne.w	80053c8 <HAL_SPI_TransmitReceive+0x144>
 80054fa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f47f af63 	bne.w	80053c8 <HAL_SPI_TransmitReceive+0x144>
 8005502:	e1ce      	b.n	80058a2 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	2b07      	cmp	r3, #7
 800550a:	f240 81c2 	bls.w	8005892 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800550e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005510:	085b      	lsrs	r3, r3, #1
 8005512:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005514:	e0c9      	b.n	80056aa <HAL_SPI_TransmitReceive+0x426>
 8005516:	bf00      	nop
 8005518:	40013000 	.word	0x40013000
 800551c:	40003800 	.word	0x40003800
 8005520:	40003c00 	.word	0x40003c00
 8005524:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b02      	cmp	r3, #2
 8005534:	d11f      	bne.n	8005576 <HAL_SPI_TransmitReceive+0x2f2>
 8005536:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005538:	2b00      	cmp	r3, #0
 800553a:	d01c      	beq.n	8005576 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800553c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800553e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005542:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005544:	429a      	cmp	r2, r3
 8005546:	d216      	bcs.n	8005576 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800554c:	881a      	ldrh	r2, [r3, #0]
 800554e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005550:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005556:	1c9a      	adds	r2, r3, #2
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005562:	b29b      	uxth	r3, r3
 8005564:	3b01      	subs	r3, #1
 8005566:	b29a      	uxth	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005574:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800557e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 8092 	beq.w	80056aa <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	695b      	ldr	r3, [r3, #20]
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	2b01      	cmp	r3, #1
 8005592:	d118      	bne.n	80055c6 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005598:	6a3a      	ldr	r2, [r7, #32]
 800559a:	8812      	ldrh	r2, [r2, #0]
 800559c:	b292      	uxth	r2, r2
 800559e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055a4:	1c9a      	adds	r2, r3, #2
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	3b01      	subs	r3, #1
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80055c2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80055c4:	e071      	b.n	80056aa <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80055c6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80055c8:	8bfb      	ldrh	r3, [r7, #30]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d228      	bcs.n	8005620 <HAL_SPI_TransmitReceive+0x39c>
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d023      	beq.n	8005620 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055dc:	6a3a      	ldr	r2, [r7, #32]
 80055de:	8812      	ldrh	r2, [r2, #0]
 80055e0:	b292      	uxth	r2, r2
 80055e2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055e8:	1c9a      	adds	r2, r3, #2
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055f2:	6a3a      	ldr	r2, [r7, #32]
 80055f4:	8812      	ldrh	r2, [r2, #0]
 80055f6:	b292      	uxth	r2, r2
 80055f8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055fe:	1c9a      	adds	r2, r3, #2
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800560a:	b29b      	uxth	r3, r3
 800560c:	3b02      	subs	r3, #2
 800560e:	b29a      	uxth	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800561c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800561e:	e044      	b.n	80056aa <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8005620:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005622:	2b01      	cmp	r3, #1
 8005624:	d11d      	bne.n	8005662 <HAL_SPI_TransmitReceive+0x3de>
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d018      	beq.n	8005662 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005634:	6a3a      	ldr	r2, [r7, #32]
 8005636:	8812      	ldrh	r2, [r2, #0]
 8005638:	b292      	uxth	r2, r2
 800563a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005640:	1c9a      	adds	r2, r3, #2
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800564c:	b29b      	uxth	r3, r3
 800564e:	3b01      	subs	r3, #1
 8005650:	b29a      	uxth	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800565e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005660:	e023      	b.n	80056aa <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005662:	f7fc f833 	bl	80016cc <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800566e:	429a      	cmp	r2, r3
 8005670:	d803      	bhi.n	800567a <HAL_SPI_TransmitReceive+0x3f6>
 8005672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005678:	d102      	bne.n	8005680 <HAL_SPI_TransmitReceive+0x3fc>
 800567a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800567c:	2b00      	cmp	r3, #0
 800567e:	d114      	bne.n	80056aa <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 fb53 	bl	8005d2c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800568c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e121      	b.n	80058ee <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80056aa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f47f af3b 	bne.w	8005528 <HAL_SPI_TransmitReceive+0x2a4>
 80056b2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f47f af37 	bne.w	8005528 <HAL_SPI_TransmitReceive+0x2a4>
 80056ba:	e0f2      	b.n	80058a2 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d121      	bne.n	800570e <HAL_SPI_TransmitReceive+0x48a>
 80056ca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d01e      	beq.n	800570e <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80056d0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80056d2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80056d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056d6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80056d8:	429a      	cmp	r2, r3
 80056da:	d218      	bcs.n	800570e <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	3320      	adds	r3, #32
 80056e6:	7812      	ldrb	r2, [r2, #0]
 80056e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056ee:	1c5a      	adds	r2, r3, #1
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	3b01      	subs	r3, #1
 80056fe:	b29a      	uxth	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800570c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005716:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 80ba 	beq.w	8005892 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	695b      	ldr	r3, [r3, #20]
 8005724:	f003 0301 	and.w	r3, r3, #1
 8005728:	2b01      	cmp	r3, #1
 800572a:	d11b      	bne.n	8005764 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005738:	7812      	ldrb	r2, [r2, #0]
 800573a:	b2d2      	uxtb	r2, r2
 800573c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005742:	1c5a      	adds	r2, r3, #1
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800574e:	b29b      	uxth	r3, r3
 8005750:	3b01      	subs	r3, #1
 8005752:	b29a      	uxth	r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005760:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005762:	e096      	b.n	8005892 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005764:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005766:	8bfb      	ldrh	r3, [r7, #30]
 8005768:	429a      	cmp	r2, r3
 800576a:	d24a      	bcs.n	8005802 <HAL_SPI_TransmitReceive+0x57e>
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d045      	beq.n	8005802 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005782:	7812      	ldrb	r2, [r2, #0]
 8005784:	b2d2      	uxtb	r2, r2
 8005786:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800578c:	1c5a      	adds	r2, r3, #1
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800579e:	7812      	ldrb	r2, [r2, #0]
 80057a0:	b2d2      	uxtb	r2, r2
 80057a2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057a8:	1c5a      	adds	r2, r3, #1
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057ba:	7812      	ldrb	r2, [r2, #0]
 80057bc:	b2d2      	uxtb	r2, r2
 80057be:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057c4:	1c5a      	adds	r2, r3, #1
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057d6:	7812      	ldrb	r2, [r2, #0]
 80057d8:	b2d2      	uxtb	r2, r2
 80057da:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057e0:	1c5a      	adds	r2, r3, #1
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	3b04      	subs	r3, #4
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80057fe:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005800:	e047      	b.n	8005892 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8005802:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005804:	2b03      	cmp	r3, #3
 8005806:	d820      	bhi.n	800584a <HAL_SPI_TransmitReceive+0x5c6>
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d01b      	beq.n	800584a <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800581e:	7812      	ldrb	r2, [r2, #0]
 8005820:	b2d2      	uxtb	r2, r2
 8005822:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005828:	1c5a      	adds	r2, r3, #1
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005834:	b29b      	uxth	r3, r3
 8005836:	3b01      	subs	r3, #1
 8005838:	b29a      	uxth	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005846:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005848:	e023      	b.n	8005892 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800584a:	f7fb ff3f 	bl	80016cc <HAL_GetTick>
 800584e:	4602      	mov	r2, r0
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005856:	429a      	cmp	r2, r3
 8005858:	d803      	bhi.n	8005862 <HAL_SPI_TransmitReceive+0x5de>
 800585a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800585c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005860:	d102      	bne.n	8005868 <HAL_SPI_TransmitReceive+0x5e4>
 8005862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005864:	2b00      	cmp	r3, #0
 8005866:	d114      	bne.n	8005892 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f000 fa5f 	bl	8005d2c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005874:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e02d      	b.n	80058ee <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005892:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005894:	2b00      	cmp	r3, #0
 8005896:	f47f af11 	bne.w	80056bc <HAL_SPI_TransmitReceive+0x438>
 800589a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800589c:	2b00      	cmp	r3, #0
 800589e:	f47f af0d 	bne.w	80056bc <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	9300      	str	r3, [sp, #0]
 80058a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a8:	2200      	movs	r2, #0
 80058aa:	2108      	movs	r1, #8
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f000 fadd 	bl	8005e6c <SPI_WaitOnFlagUntilTimeout>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d007      	beq.n	80058c8 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058be:	f043 0220 	orr.w	r2, r3, #32
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 fa2f 	bl	8005d2c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d001      	beq.n	80058ec <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e000      	b.n	80058ee <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 80058ec:	2300      	movs	r3, #0
  }
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3730      	adds	r7, #48	@ 0x30
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop

080058f8 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b08a      	sub	sp, #40	@ 0x28
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8005910:	6a3a      	ldr	r2, [r7, #32]
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	4013      	ands	r3, r2
 8005916:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8005920:	2300      	movs	r3, #0
 8005922:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800592a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	3330      	adds	r3, #48	@ 0x30
 8005932:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800593a:	2b00      	cmp	r3, #0
 800593c:	d010      	beq.n	8005960 <HAL_SPI_IRQHandler+0x68>
 800593e:	6a3b      	ldr	r3, [r7, #32]
 8005940:	f003 0308 	and.w	r3, r3, #8
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00b      	beq.n	8005960 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	699a      	ldr	r2, [r3, #24]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005956:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 f9c3 	bl	8005ce4 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800595e:	e192      	b.n	8005c86 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005966:	2b00      	cmp	r3, #0
 8005968:	d113      	bne.n	8005992 <HAL_SPI_IRQHandler+0x9a>
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	f003 0320 	and.w	r3, r3, #32
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10e      	bne.n	8005992 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800597a:	2b00      	cmp	r3, #0
 800597c:	d009      	beq.n	8005992 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	4798      	blx	r3
    hspi->RxISR(hspi);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	4798      	blx	r3
    handled = 1UL;
 800598e:	2301      	movs	r3, #1
 8005990:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10f      	bne.n	80059bc <HAL_SPI_IRQHandler+0xc4>
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00a      	beq.n	80059bc <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d105      	bne.n	80059bc <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	4798      	blx	r3
    handled = 1UL;
 80059b8:	2301      	movs	r3, #1
 80059ba:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	f003 0320 	and.w	r3, r3, #32
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10f      	bne.n	80059e6 <HAL_SPI_IRQHandler+0xee>
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00a      	beq.n	80059e6 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d105      	bne.n	80059e6 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	4798      	blx	r3
    handled = 1UL;
 80059e2:	2301      	movs	r3, #1
 80059e4:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80059e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f040 8147 	bne.w	8005c7c <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	f003 0308 	and.w	r3, r3, #8
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f000 808b 	beq.w	8005b10 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	699a      	ldr	r2, [r3, #24]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f042 0208 	orr.w	r2, r2, #8
 8005a08:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	699a      	ldr	r2, [r3, #24]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f042 0210 	orr.w	r2, r2, #16
 8005a18:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	699a      	ldr	r2, [r3, #24]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a28:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	691a      	ldr	r2, [r3, #16]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 0208 	bic.w	r2, r2, #8
 8005a38:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d13d      	bne.n	8005ac4 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8005a48:	e036      	b.n	8005ab8 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	2b0f      	cmp	r3, #15
 8005a50:	d90b      	bls.n	8005a6a <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a5a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005a5c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a62:	1d1a      	adds	r2, r3, #4
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	665a      	str	r2, [r3, #100]	@ 0x64
 8005a68:	e01d      	b.n	8005aa6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	2b07      	cmp	r3, #7
 8005a70:	d90b      	bls.n	8005a8a <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	8812      	ldrh	r2, [r2, #0]
 8005a7a:	b292      	uxth	r2, r2
 8005a7c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a82:	1c9a      	adds	r2, r3, #2
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	665a      	str	r2, [r3, #100]	@ 0x64
 8005a88:	e00d      	b.n	8005aa6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a96:	7812      	ldrb	r2, [r2, #0]
 8005a98:	b2d2      	uxtb	r2, r2
 8005a9a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005aa0:	1c5a      	adds	r2, r3, #1
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1c2      	bne.n	8005a4a <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 f931 	bl	8005d2c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d003      	beq.n	8005ae4 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 f8f7 	bl	8005cd0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005ae2:	e0d0      	b.n	8005c86 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8005ae4:	7cfb      	ldrb	r3, [r7, #19]
 8005ae6:	2b05      	cmp	r3, #5
 8005ae8:	d103      	bne.n	8005af2 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f8e6 	bl	8005cbc <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8005af0:	e0c6      	b.n	8005c80 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8005af2:	7cfb      	ldrb	r3, [r7, #19]
 8005af4:	2b04      	cmp	r3, #4
 8005af6:	d103      	bne.n	8005b00 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 f8d5 	bl	8005ca8 <HAL_SPI_RxCpltCallback>
    return;
 8005afe:	e0bf      	b.n	8005c80 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8005b00:	7cfb      	ldrb	r3, [r7, #19]
 8005b02:	2b03      	cmp	r3, #3
 8005b04:	f040 80bc 	bne.w	8005c80 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 f8c3 	bl	8005c94 <HAL_SPI_TxCpltCallback>
    return;
 8005b0e:	e0b7      	b.n	8005c80 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	f000 80b5 	beq.w	8005c86 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00f      	beq.n	8005b46 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b2c:	f043 0204 	orr.w	r2, r3, #4
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	699a      	ldr	r2, [r3, #24]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b44:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00f      	beq.n	8005b70 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b56:	f043 0201 	orr.w	r2, r3, #1
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	699a      	ldr	r2, [r3, #24]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b6e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00f      	beq.n	8005b9a <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b80:	f043 0208 	orr.w	r2, r3, #8
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	699a      	ldr	r2, [r3, #24]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b98:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	f003 0320 	and.w	r3, r3, #32
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d00f      	beq.n	8005bc4 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005baa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	699a      	ldr	r2, [r3, #24]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f042 0220 	orr.w	r2, r2, #32
 8005bc2:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d05a      	beq.n	8005c84 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f022 0201 	bic.w	r2, r2, #1
 8005bdc:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6919      	ldr	r1, [r3, #16]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	4b28      	ldr	r3, [pc, #160]	@ (8005c8c <HAL_SPI_IRQHandler+0x394>)
 8005bea:	400b      	ands	r3, r1
 8005bec:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005bf4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005bf8:	d138      	bne.n	8005c6c <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	689a      	ldr	r2, [r3, #8]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8005c08:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d013      	beq.n	8005c3a <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c16:	4a1e      	ldr	r2, [pc, #120]	@ (8005c90 <HAL_SPI_IRQHandler+0x398>)
 8005c18:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fb ff18 	bl	8001a54 <HAL_DMA_Abort_IT>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d007      	beq.n	8005c3a <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c30:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d020      	beq.n	8005c84 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c46:	4a12      	ldr	r2, [pc, #72]	@ (8005c90 <HAL_SPI_IRQHandler+0x398>)
 8005c48:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7fb ff00 	bl	8001a54 <HAL_DMA_Abort_IT>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d014      	beq.n	8005c84 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c60:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005c6a:	e00b      	b.n	8005c84 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 f82b 	bl	8005cd0 <HAL_SPI_ErrorCallback>
    return;
 8005c7a:	e003      	b.n	8005c84 <HAL_SPI_IRQHandler+0x38c>
    return;
 8005c7c:	bf00      	nop
 8005c7e:	e002      	b.n	8005c86 <HAL_SPI_IRQHandler+0x38e>
    return;
 8005c80:	bf00      	nop
 8005c82:	e000      	b.n	8005c86 <HAL_SPI_IRQHandler+0x38e>
    return;
 8005c84:	bf00      	nop
  }
}
 8005c86:	3728      	adds	r7, #40	@ 0x28
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	fffffc94 	.word	0xfffffc94
 8005c90:	08005cf9 	.word	0x08005cf9

08005c94 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d04:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f7ff ffd6 	bl	8005cd0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005d24:	bf00      	nop
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	699a      	ldr	r2, [r3, #24]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f042 0208 	orr.w	r2, r2, #8
 8005d4a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	699a      	ldr	r2, [r3, #24]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f042 0210 	orr.w	r2, r2, #16
 8005d5a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f022 0201 	bic.w	r2, r2, #1
 8005d6a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6919      	ldr	r1, [r3, #16]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	4b3c      	ldr	r3, [pc, #240]	@ (8005e68 <SPI_CloseTransfer+0x13c>)
 8005d78:	400b      	ands	r3, r1
 8005d7a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	689a      	ldr	r2, [r3, #8]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8005d8a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b04      	cmp	r3, #4
 8005d96:	d014      	beq.n	8005dc2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f003 0320 	and.w	r3, r3, #32
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00f      	beq.n	8005dc2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005da8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	699a      	ldr	r2, [r3, #24]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f042 0220 	orr.w	r2, r2, #32
 8005dc0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b03      	cmp	r3, #3
 8005dcc:	d014      	beq.n	8005df8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00f      	beq.n	8005df8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dde:	f043 0204 	orr.w	r2, r3, #4
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	699a      	ldr	r2, [r3, #24]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005df6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00f      	beq.n	8005e22 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e08:	f043 0201 	orr.w	r2, r3, #1
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	699a      	ldr	r2, [r3, #24]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e20:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00f      	beq.n	8005e4c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e32:	f043 0208 	orr.w	r2, r3, #8
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	699a      	ldr	r2, [r3, #24]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e4a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8005e5c:	bf00      	nop
 8005e5e:	3714      	adds	r7, #20
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr
 8005e68:	fffffc90 	.word	0xfffffc90

08005e6c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	603b      	str	r3, [r7, #0]
 8005e78:	4613      	mov	r3, r2
 8005e7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005e7c:	e010      	b.n	8005ea0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e7e:	f7fb fc25 	bl	80016cc <HAL_GetTick>
 8005e82:	4602      	mov	r2, r0
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	683a      	ldr	r2, [r7, #0]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d803      	bhi.n	8005e96 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e94:	d102      	bne.n	8005e9c <SPI_WaitOnFlagUntilTimeout+0x30>
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d101      	bne.n	8005ea0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e00f      	b.n	8005ec0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	695a      	ldr	r2, [r3, #20]
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	bf0c      	ite	eq
 8005eb0:	2301      	moveq	r3, #1
 8005eb2:	2300      	movne	r3, #0
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	79fb      	ldrb	r3, [r7, #7]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d0df      	beq.n	8005e7e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3710      	adds	r7, #16
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ed4:	095b      	lsrs	r3, r3, #5
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	3307      	adds	r3, #7
 8005ee6:	08db      	lsrs	r3, r3, #3
 8005ee8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	fb02 f303 	mul.w	r3, r2, r3
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3714      	adds	r7, #20
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b082      	sub	sp, #8
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d101      	bne.n	8005f10 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e042      	b.n	8005f96 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d106      	bne.n	8005f28 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f83b 	bl	8005f9e <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2224      	movs	r2, #36	@ 0x24
 8005f2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f022 0201 	bic.w	r2, r2, #1
 8005f3e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d002      	beq.n	8005f4e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 fe29 	bl	8006ba0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f8be 	bl	80060d0 <UART_SetConfig>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d101      	bne.n	8005f5e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e01b      	b.n	8005f96 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f6c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689a      	ldr	r2, [r3, #8]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f7c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f042 0201 	orr.w	r2, r2, #1
 8005f8c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 fea8 	bl	8006ce4 <UART_CheckIdleState>
 8005f94:	4603      	mov	r3, r0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3708      	adds	r7, #8
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b083      	sub	sp, #12
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8005fa6:	bf00      	nop
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b08a      	sub	sp, #40	@ 0x28
 8005fb6:	af02      	add	r7, sp, #8
 8005fb8:	60f8      	str	r0, [r7, #12]
 8005fba:	60b9      	str	r1, [r7, #8]
 8005fbc:	603b      	str	r3, [r7, #0]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fc8:	2b20      	cmp	r3, #32
 8005fca:	d17b      	bne.n	80060c4 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d002      	beq.n	8005fd8 <HAL_UART_Transmit+0x26>
 8005fd2:	88fb      	ldrh	r3, [r7, #6]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d101      	bne.n	8005fdc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e074      	b.n	80060c6 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2221      	movs	r2, #33	@ 0x21
 8005fe8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fec:	f7fb fb6e 	bl	80016cc <HAL_GetTick>
 8005ff0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	88fa      	ldrh	r2, [r7, #6]
 8005ff6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	88fa      	ldrh	r2, [r7, #6]
 8005ffe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800600a:	d108      	bne.n	800601e <HAL_UART_Transmit+0x6c>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d104      	bne.n	800601e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006014:	2300      	movs	r3, #0
 8006016:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	61bb      	str	r3, [r7, #24]
 800601c:	e003      	b.n	8006026 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006022:	2300      	movs	r3, #0
 8006024:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006026:	e030      	b.n	800608a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	9300      	str	r3, [sp, #0]
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	2200      	movs	r2, #0
 8006030:	2180      	movs	r1, #128	@ 0x80
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f000 ff00 	bl	8006e38 <UART_WaitOnFlagUntilTimeout>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d005      	beq.n	800604a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2220      	movs	r2, #32
 8006042:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e03d      	b.n	80060c6 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d10b      	bne.n	8006068 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	881b      	ldrh	r3, [r3, #0]
 8006054:	461a      	mov	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800605e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	3302      	adds	r3, #2
 8006064:	61bb      	str	r3, [r7, #24]
 8006066:	e007      	b.n	8006078 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	781a      	ldrb	r2, [r3, #0]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	3301      	adds	r3, #1
 8006076:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800607e:	b29b      	uxth	r3, r3
 8006080:	3b01      	subs	r3, #1
 8006082:	b29a      	uxth	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006090:	b29b      	uxth	r3, r3
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1c8      	bne.n	8006028 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	2200      	movs	r2, #0
 800609e:	2140      	movs	r1, #64	@ 0x40
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f000 fec9 	bl	8006e38 <UART_WaitOnFlagUntilTimeout>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d005      	beq.n	80060b8 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2220      	movs	r2, #32
 80060b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e006      	b.n	80060c6 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2220      	movs	r2, #32
 80060bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80060c0:	2300      	movs	r3, #0
 80060c2:	e000      	b.n	80060c6 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80060c4:	2302      	movs	r3, #2
  }
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3720      	adds	r7, #32
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
	...

080060d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060d4:	b092      	sub	sp, #72	@ 0x48
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060da:	2300      	movs	r3, #0
 80060dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	689a      	ldr	r2, [r3, #8]
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	431a      	orrs	r2, r3
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	431a      	orrs	r2, r3
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	4bbe      	ldr	r3, [pc, #760]	@ (80063f8 <UART_SetConfig+0x328>)
 8006100:	4013      	ands	r3, r2
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	6812      	ldr	r2, [r2, #0]
 8006106:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006108:	430b      	orrs	r3, r1
 800610a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	68da      	ldr	r2, [r3, #12]
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	699b      	ldr	r3, [r3, #24]
 8006126:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4ab3      	ldr	r2, [pc, #716]	@ (80063fc <UART_SetConfig+0x32c>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d004      	beq.n	800613c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006138:	4313      	orrs	r3, r2
 800613a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	689a      	ldr	r2, [r3, #8]
 8006142:	4baf      	ldr	r3, [pc, #700]	@ (8006400 <UART_SetConfig+0x330>)
 8006144:	4013      	ands	r3, r2
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	6812      	ldr	r2, [r2, #0]
 800614a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800614c:	430b      	orrs	r3, r1
 800614e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006156:	f023 010f 	bic.w	r1, r3, #15
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	430a      	orrs	r2, r1
 8006164:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4aa6      	ldr	r2, [pc, #664]	@ (8006404 <UART_SetConfig+0x334>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d177      	bne.n	8006260 <UART_SetConfig+0x190>
 8006170:	4ba5      	ldr	r3, [pc, #660]	@ (8006408 <UART_SetConfig+0x338>)
 8006172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006174:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006178:	2b28      	cmp	r3, #40	@ 0x28
 800617a:	d86d      	bhi.n	8006258 <UART_SetConfig+0x188>
 800617c:	a201      	add	r2, pc, #4	@ (adr r2, 8006184 <UART_SetConfig+0xb4>)
 800617e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006182:	bf00      	nop
 8006184:	08006229 	.word	0x08006229
 8006188:	08006259 	.word	0x08006259
 800618c:	08006259 	.word	0x08006259
 8006190:	08006259 	.word	0x08006259
 8006194:	08006259 	.word	0x08006259
 8006198:	08006259 	.word	0x08006259
 800619c:	08006259 	.word	0x08006259
 80061a0:	08006259 	.word	0x08006259
 80061a4:	08006231 	.word	0x08006231
 80061a8:	08006259 	.word	0x08006259
 80061ac:	08006259 	.word	0x08006259
 80061b0:	08006259 	.word	0x08006259
 80061b4:	08006259 	.word	0x08006259
 80061b8:	08006259 	.word	0x08006259
 80061bc:	08006259 	.word	0x08006259
 80061c0:	08006259 	.word	0x08006259
 80061c4:	08006239 	.word	0x08006239
 80061c8:	08006259 	.word	0x08006259
 80061cc:	08006259 	.word	0x08006259
 80061d0:	08006259 	.word	0x08006259
 80061d4:	08006259 	.word	0x08006259
 80061d8:	08006259 	.word	0x08006259
 80061dc:	08006259 	.word	0x08006259
 80061e0:	08006259 	.word	0x08006259
 80061e4:	08006241 	.word	0x08006241
 80061e8:	08006259 	.word	0x08006259
 80061ec:	08006259 	.word	0x08006259
 80061f0:	08006259 	.word	0x08006259
 80061f4:	08006259 	.word	0x08006259
 80061f8:	08006259 	.word	0x08006259
 80061fc:	08006259 	.word	0x08006259
 8006200:	08006259 	.word	0x08006259
 8006204:	08006249 	.word	0x08006249
 8006208:	08006259 	.word	0x08006259
 800620c:	08006259 	.word	0x08006259
 8006210:	08006259 	.word	0x08006259
 8006214:	08006259 	.word	0x08006259
 8006218:	08006259 	.word	0x08006259
 800621c:	08006259 	.word	0x08006259
 8006220:	08006259 	.word	0x08006259
 8006224:	08006251 	.word	0x08006251
 8006228:	2301      	movs	r3, #1
 800622a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800622e:	e222      	b.n	8006676 <UART_SetConfig+0x5a6>
 8006230:	2304      	movs	r3, #4
 8006232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006236:	e21e      	b.n	8006676 <UART_SetConfig+0x5a6>
 8006238:	2308      	movs	r3, #8
 800623a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800623e:	e21a      	b.n	8006676 <UART_SetConfig+0x5a6>
 8006240:	2310      	movs	r3, #16
 8006242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006246:	e216      	b.n	8006676 <UART_SetConfig+0x5a6>
 8006248:	2320      	movs	r3, #32
 800624a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800624e:	e212      	b.n	8006676 <UART_SetConfig+0x5a6>
 8006250:	2340      	movs	r3, #64	@ 0x40
 8006252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006256:	e20e      	b.n	8006676 <UART_SetConfig+0x5a6>
 8006258:	2380      	movs	r3, #128	@ 0x80
 800625a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800625e:	e20a      	b.n	8006676 <UART_SetConfig+0x5a6>
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a69      	ldr	r2, [pc, #420]	@ (800640c <UART_SetConfig+0x33c>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d130      	bne.n	80062cc <UART_SetConfig+0x1fc>
 800626a:	4b67      	ldr	r3, [pc, #412]	@ (8006408 <UART_SetConfig+0x338>)
 800626c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800626e:	f003 0307 	and.w	r3, r3, #7
 8006272:	2b05      	cmp	r3, #5
 8006274:	d826      	bhi.n	80062c4 <UART_SetConfig+0x1f4>
 8006276:	a201      	add	r2, pc, #4	@ (adr r2, 800627c <UART_SetConfig+0x1ac>)
 8006278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800627c:	08006295 	.word	0x08006295
 8006280:	0800629d 	.word	0x0800629d
 8006284:	080062a5 	.word	0x080062a5
 8006288:	080062ad 	.word	0x080062ad
 800628c:	080062b5 	.word	0x080062b5
 8006290:	080062bd 	.word	0x080062bd
 8006294:	2300      	movs	r3, #0
 8006296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800629a:	e1ec      	b.n	8006676 <UART_SetConfig+0x5a6>
 800629c:	2304      	movs	r3, #4
 800629e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062a2:	e1e8      	b.n	8006676 <UART_SetConfig+0x5a6>
 80062a4:	2308      	movs	r3, #8
 80062a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062aa:	e1e4      	b.n	8006676 <UART_SetConfig+0x5a6>
 80062ac:	2310      	movs	r3, #16
 80062ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062b2:	e1e0      	b.n	8006676 <UART_SetConfig+0x5a6>
 80062b4:	2320      	movs	r3, #32
 80062b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ba:	e1dc      	b.n	8006676 <UART_SetConfig+0x5a6>
 80062bc:	2340      	movs	r3, #64	@ 0x40
 80062be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062c2:	e1d8      	b.n	8006676 <UART_SetConfig+0x5a6>
 80062c4:	2380      	movs	r3, #128	@ 0x80
 80062c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ca:	e1d4      	b.n	8006676 <UART_SetConfig+0x5a6>
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a4f      	ldr	r2, [pc, #316]	@ (8006410 <UART_SetConfig+0x340>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d130      	bne.n	8006338 <UART_SetConfig+0x268>
 80062d6:	4b4c      	ldr	r3, [pc, #304]	@ (8006408 <UART_SetConfig+0x338>)
 80062d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062da:	f003 0307 	and.w	r3, r3, #7
 80062de:	2b05      	cmp	r3, #5
 80062e0:	d826      	bhi.n	8006330 <UART_SetConfig+0x260>
 80062e2:	a201      	add	r2, pc, #4	@ (adr r2, 80062e8 <UART_SetConfig+0x218>)
 80062e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e8:	08006301 	.word	0x08006301
 80062ec:	08006309 	.word	0x08006309
 80062f0:	08006311 	.word	0x08006311
 80062f4:	08006319 	.word	0x08006319
 80062f8:	08006321 	.word	0x08006321
 80062fc:	08006329 	.word	0x08006329
 8006300:	2300      	movs	r3, #0
 8006302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006306:	e1b6      	b.n	8006676 <UART_SetConfig+0x5a6>
 8006308:	2304      	movs	r3, #4
 800630a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800630e:	e1b2      	b.n	8006676 <UART_SetConfig+0x5a6>
 8006310:	2308      	movs	r3, #8
 8006312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006316:	e1ae      	b.n	8006676 <UART_SetConfig+0x5a6>
 8006318:	2310      	movs	r3, #16
 800631a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800631e:	e1aa      	b.n	8006676 <UART_SetConfig+0x5a6>
 8006320:	2320      	movs	r3, #32
 8006322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006326:	e1a6      	b.n	8006676 <UART_SetConfig+0x5a6>
 8006328:	2340      	movs	r3, #64	@ 0x40
 800632a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800632e:	e1a2      	b.n	8006676 <UART_SetConfig+0x5a6>
 8006330:	2380      	movs	r3, #128	@ 0x80
 8006332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006336:	e19e      	b.n	8006676 <UART_SetConfig+0x5a6>
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a35      	ldr	r2, [pc, #212]	@ (8006414 <UART_SetConfig+0x344>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d130      	bne.n	80063a4 <UART_SetConfig+0x2d4>
 8006342:	4b31      	ldr	r3, [pc, #196]	@ (8006408 <UART_SetConfig+0x338>)
 8006344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006346:	f003 0307 	and.w	r3, r3, #7
 800634a:	2b05      	cmp	r3, #5
 800634c:	d826      	bhi.n	800639c <UART_SetConfig+0x2cc>
 800634e:	a201      	add	r2, pc, #4	@ (adr r2, 8006354 <UART_SetConfig+0x284>)
 8006350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006354:	0800636d 	.word	0x0800636d
 8006358:	08006375 	.word	0x08006375
 800635c:	0800637d 	.word	0x0800637d
 8006360:	08006385 	.word	0x08006385
 8006364:	0800638d 	.word	0x0800638d
 8006368:	08006395 	.word	0x08006395
 800636c:	2300      	movs	r3, #0
 800636e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006372:	e180      	b.n	8006676 <UART_SetConfig+0x5a6>
 8006374:	2304      	movs	r3, #4
 8006376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800637a:	e17c      	b.n	8006676 <UART_SetConfig+0x5a6>
 800637c:	2308      	movs	r3, #8
 800637e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006382:	e178      	b.n	8006676 <UART_SetConfig+0x5a6>
 8006384:	2310      	movs	r3, #16
 8006386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800638a:	e174      	b.n	8006676 <UART_SetConfig+0x5a6>
 800638c:	2320      	movs	r3, #32
 800638e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006392:	e170      	b.n	8006676 <UART_SetConfig+0x5a6>
 8006394:	2340      	movs	r3, #64	@ 0x40
 8006396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800639a:	e16c      	b.n	8006676 <UART_SetConfig+0x5a6>
 800639c:	2380      	movs	r3, #128	@ 0x80
 800639e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063a2:	e168      	b.n	8006676 <UART_SetConfig+0x5a6>
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a1b      	ldr	r2, [pc, #108]	@ (8006418 <UART_SetConfig+0x348>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d142      	bne.n	8006434 <UART_SetConfig+0x364>
 80063ae:	4b16      	ldr	r3, [pc, #88]	@ (8006408 <UART_SetConfig+0x338>)
 80063b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063b2:	f003 0307 	and.w	r3, r3, #7
 80063b6:	2b05      	cmp	r3, #5
 80063b8:	d838      	bhi.n	800642c <UART_SetConfig+0x35c>
 80063ba:	a201      	add	r2, pc, #4	@ (adr r2, 80063c0 <UART_SetConfig+0x2f0>)
 80063bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c0:	080063d9 	.word	0x080063d9
 80063c4:	080063e1 	.word	0x080063e1
 80063c8:	080063e9 	.word	0x080063e9
 80063cc:	080063f1 	.word	0x080063f1
 80063d0:	0800641d 	.word	0x0800641d
 80063d4:	08006425 	.word	0x08006425
 80063d8:	2300      	movs	r3, #0
 80063da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063de:	e14a      	b.n	8006676 <UART_SetConfig+0x5a6>
 80063e0:	2304      	movs	r3, #4
 80063e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063e6:	e146      	b.n	8006676 <UART_SetConfig+0x5a6>
 80063e8:	2308      	movs	r3, #8
 80063ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063ee:	e142      	b.n	8006676 <UART_SetConfig+0x5a6>
 80063f0:	2310      	movs	r3, #16
 80063f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063f6:	e13e      	b.n	8006676 <UART_SetConfig+0x5a6>
 80063f8:	cfff69f3 	.word	0xcfff69f3
 80063fc:	58000c00 	.word	0x58000c00
 8006400:	11fff4ff 	.word	0x11fff4ff
 8006404:	40011000 	.word	0x40011000
 8006408:	58024400 	.word	0x58024400
 800640c:	40004400 	.word	0x40004400
 8006410:	40004800 	.word	0x40004800
 8006414:	40004c00 	.word	0x40004c00
 8006418:	40005000 	.word	0x40005000
 800641c:	2320      	movs	r3, #32
 800641e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006422:	e128      	b.n	8006676 <UART_SetConfig+0x5a6>
 8006424:	2340      	movs	r3, #64	@ 0x40
 8006426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800642a:	e124      	b.n	8006676 <UART_SetConfig+0x5a6>
 800642c:	2380      	movs	r3, #128	@ 0x80
 800642e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006432:	e120      	b.n	8006676 <UART_SetConfig+0x5a6>
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4acb      	ldr	r2, [pc, #812]	@ (8006768 <UART_SetConfig+0x698>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d176      	bne.n	800652c <UART_SetConfig+0x45c>
 800643e:	4bcb      	ldr	r3, [pc, #812]	@ (800676c <UART_SetConfig+0x69c>)
 8006440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006442:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006446:	2b28      	cmp	r3, #40	@ 0x28
 8006448:	d86c      	bhi.n	8006524 <UART_SetConfig+0x454>
 800644a:	a201      	add	r2, pc, #4	@ (adr r2, 8006450 <UART_SetConfig+0x380>)
 800644c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006450:	080064f5 	.word	0x080064f5
 8006454:	08006525 	.word	0x08006525
 8006458:	08006525 	.word	0x08006525
 800645c:	08006525 	.word	0x08006525
 8006460:	08006525 	.word	0x08006525
 8006464:	08006525 	.word	0x08006525
 8006468:	08006525 	.word	0x08006525
 800646c:	08006525 	.word	0x08006525
 8006470:	080064fd 	.word	0x080064fd
 8006474:	08006525 	.word	0x08006525
 8006478:	08006525 	.word	0x08006525
 800647c:	08006525 	.word	0x08006525
 8006480:	08006525 	.word	0x08006525
 8006484:	08006525 	.word	0x08006525
 8006488:	08006525 	.word	0x08006525
 800648c:	08006525 	.word	0x08006525
 8006490:	08006505 	.word	0x08006505
 8006494:	08006525 	.word	0x08006525
 8006498:	08006525 	.word	0x08006525
 800649c:	08006525 	.word	0x08006525
 80064a0:	08006525 	.word	0x08006525
 80064a4:	08006525 	.word	0x08006525
 80064a8:	08006525 	.word	0x08006525
 80064ac:	08006525 	.word	0x08006525
 80064b0:	0800650d 	.word	0x0800650d
 80064b4:	08006525 	.word	0x08006525
 80064b8:	08006525 	.word	0x08006525
 80064bc:	08006525 	.word	0x08006525
 80064c0:	08006525 	.word	0x08006525
 80064c4:	08006525 	.word	0x08006525
 80064c8:	08006525 	.word	0x08006525
 80064cc:	08006525 	.word	0x08006525
 80064d0:	08006515 	.word	0x08006515
 80064d4:	08006525 	.word	0x08006525
 80064d8:	08006525 	.word	0x08006525
 80064dc:	08006525 	.word	0x08006525
 80064e0:	08006525 	.word	0x08006525
 80064e4:	08006525 	.word	0x08006525
 80064e8:	08006525 	.word	0x08006525
 80064ec:	08006525 	.word	0x08006525
 80064f0:	0800651d 	.word	0x0800651d
 80064f4:	2301      	movs	r3, #1
 80064f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064fa:	e0bc      	b.n	8006676 <UART_SetConfig+0x5a6>
 80064fc:	2304      	movs	r3, #4
 80064fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006502:	e0b8      	b.n	8006676 <UART_SetConfig+0x5a6>
 8006504:	2308      	movs	r3, #8
 8006506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800650a:	e0b4      	b.n	8006676 <UART_SetConfig+0x5a6>
 800650c:	2310      	movs	r3, #16
 800650e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006512:	e0b0      	b.n	8006676 <UART_SetConfig+0x5a6>
 8006514:	2320      	movs	r3, #32
 8006516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800651a:	e0ac      	b.n	8006676 <UART_SetConfig+0x5a6>
 800651c:	2340      	movs	r3, #64	@ 0x40
 800651e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006522:	e0a8      	b.n	8006676 <UART_SetConfig+0x5a6>
 8006524:	2380      	movs	r3, #128	@ 0x80
 8006526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800652a:	e0a4      	b.n	8006676 <UART_SetConfig+0x5a6>
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a8f      	ldr	r2, [pc, #572]	@ (8006770 <UART_SetConfig+0x6a0>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d130      	bne.n	8006598 <UART_SetConfig+0x4c8>
 8006536:	4b8d      	ldr	r3, [pc, #564]	@ (800676c <UART_SetConfig+0x69c>)
 8006538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800653a:	f003 0307 	and.w	r3, r3, #7
 800653e:	2b05      	cmp	r3, #5
 8006540:	d826      	bhi.n	8006590 <UART_SetConfig+0x4c0>
 8006542:	a201      	add	r2, pc, #4	@ (adr r2, 8006548 <UART_SetConfig+0x478>)
 8006544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006548:	08006561 	.word	0x08006561
 800654c:	08006569 	.word	0x08006569
 8006550:	08006571 	.word	0x08006571
 8006554:	08006579 	.word	0x08006579
 8006558:	08006581 	.word	0x08006581
 800655c:	08006589 	.word	0x08006589
 8006560:	2300      	movs	r3, #0
 8006562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006566:	e086      	b.n	8006676 <UART_SetConfig+0x5a6>
 8006568:	2304      	movs	r3, #4
 800656a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800656e:	e082      	b.n	8006676 <UART_SetConfig+0x5a6>
 8006570:	2308      	movs	r3, #8
 8006572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006576:	e07e      	b.n	8006676 <UART_SetConfig+0x5a6>
 8006578:	2310      	movs	r3, #16
 800657a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800657e:	e07a      	b.n	8006676 <UART_SetConfig+0x5a6>
 8006580:	2320      	movs	r3, #32
 8006582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006586:	e076      	b.n	8006676 <UART_SetConfig+0x5a6>
 8006588:	2340      	movs	r3, #64	@ 0x40
 800658a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800658e:	e072      	b.n	8006676 <UART_SetConfig+0x5a6>
 8006590:	2380      	movs	r3, #128	@ 0x80
 8006592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006596:	e06e      	b.n	8006676 <UART_SetConfig+0x5a6>
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a75      	ldr	r2, [pc, #468]	@ (8006774 <UART_SetConfig+0x6a4>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d130      	bne.n	8006604 <UART_SetConfig+0x534>
 80065a2:	4b72      	ldr	r3, [pc, #456]	@ (800676c <UART_SetConfig+0x69c>)
 80065a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065a6:	f003 0307 	and.w	r3, r3, #7
 80065aa:	2b05      	cmp	r3, #5
 80065ac:	d826      	bhi.n	80065fc <UART_SetConfig+0x52c>
 80065ae:	a201      	add	r2, pc, #4	@ (adr r2, 80065b4 <UART_SetConfig+0x4e4>)
 80065b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b4:	080065cd 	.word	0x080065cd
 80065b8:	080065d5 	.word	0x080065d5
 80065bc:	080065dd 	.word	0x080065dd
 80065c0:	080065e5 	.word	0x080065e5
 80065c4:	080065ed 	.word	0x080065ed
 80065c8:	080065f5 	.word	0x080065f5
 80065cc:	2300      	movs	r3, #0
 80065ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065d2:	e050      	b.n	8006676 <UART_SetConfig+0x5a6>
 80065d4:	2304      	movs	r3, #4
 80065d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065da:	e04c      	b.n	8006676 <UART_SetConfig+0x5a6>
 80065dc:	2308      	movs	r3, #8
 80065de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065e2:	e048      	b.n	8006676 <UART_SetConfig+0x5a6>
 80065e4:	2310      	movs	r3, #16
 80065e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ea:	e044      	b.n	8006676 <UART_SetConfig+0x5a6>
 80065ec:	2320      	movs	r3, #32
 80065ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065f2:	e040      	b.n	8006676 <UART_SetConfig+0x5a6>
 80065f4:	2340      	movs	r3, #64	@ 0x40
 80065f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065fa:	e03c      	b.n	8006676 <UART_SetConfig+0x5a6>
 80065fc:	2380      	movs	r3, #128	@ 0x80
 80065fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006602:	e038      	b.n	8006676 <UART_SetConfig+0x5a6>
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a5b      	ldr	r2, [pc, #364]	@ (8006778 <UART_SetConfig+0x6a8>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d130      	bne.n	8006670 <UART_SetConfig+0x5a0>
 800660e:	4b57      	ldr	r3, [pc, #348]	@ (800676c <UART_SetConfig+0x69c>)
 8006610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006612:	f003 0307 	and.w	r3, r3, #7
 8006616:	2b05      	cmp	r3, #5
 8006618:	d826      	bhi.n	8006668 <UART_SetConfig+0x598>
 800661a:	a201      	add	r2, pc, #4	@ (adr r2, 8006620 <UART_SetConfig+0x550>)
 800661c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006620:	08006639 	.word	0x08006639
 8006624:	08006641 	.word	0x08006641
 8006628:	08006649 	.word	0x08006649
 800662c:	08006651 	.word	0x08006651
 8006630:	08006659 	.word	0x08006659
 8006634:	08006661 	.word	0x08006661
 8006638:	2302      	movs	r3, #2
 800663a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800663e:	e01a      	b.n	8006676 <UART_SetConfig+0x5a6>
 8006640:	2304      	movs	r3, #4
 8006642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006646:	e016      	b.n	8006676 <UART_SetConfig+0x5a6>
 8006648:	2308      	movs	r3, #8
 800664a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800664e:	e012      	b.n	8006676 <UART_SetConfig+0x5a6>
 8006650:	2310      	movs	r3, #16
 8006652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006656:	e00e      	b.n	8006676 <UART_SetConfig+0x5a6>
 8006658:	2320      	movs	r3, #32
 800665a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800665e:	e00a      	b.n	8006676 <UART_SetConfig+0x5a6>
 8006660:	2340      	movs	r3, #64	@ 0x40
 8006662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006666:	e006      	b.n	8006676 <UART_SetConfig+0x5a6>
 8006668:	2380      	movs	r3, #128	@ 0x80
 800666a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800666e:	e002      	b.n	8006676 <UART_SetConfig+0x5a6>
 8006670:	2380      	movs	r3, #128	@ 0x80
 8006672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a3f      	ldr	r2, [pc, #252]	@ (8006778 <UART_SetConfig+0x6a8>)
 800667c:	4293      	cmp	r3, r2
 800667e:	f040 80f8 	bne.w	8006872 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006682:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006686:	2b20      	cmp	r3, #32
 8006688:	dc46      	bgt.n	8006718 <UART_SetConfig+0x648>
 800668a:	2b02      	cmp	r3, #2
 800668c:	f2c0 8082 	blt.w	8006794 <UART_SetConfig+0x6c4>
 8006690:	3b02      	subs	r3, #2
 8006692:	2b1e      	cmp	r3, #30
 8006694:	d87e      	bhi.n	8006794 <UART_SetConfig+0x6c4>
 8006696:	a201      	add	r2, pc, #4	@ (adr r2, 800669c <UART_SetConfig+0x5cc>)
 8006698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669c:	0800671f 	.word	0x0800671f
 80066a0:	08006795 	.word	0x08006795
 80066a4:	08006727 	.word	0x08006727
 80066a8:	08006795 	.word	0x08006795
 80066ac:	08006795 	.word	0x08006795
 80066b0:	08006795 	.word	0x08006795
 80066b4:	08006737 	.word	0x08006737
 80066b8:	08006795 	.word	0x08006795
 80066bc:	08006795 	.word	0x08006795
 80066c0:	08006795 	.word	0x08006795
 80066c4:	08006795 	.word	0x08006795
 80066c8:	08006795 	.word	0x08006795
 80066cc:	08006795 	.word	0x08006795
 80066d0:	08006795 	.word	0x08006795
 80066d4:	08006747 	.word	0x08006747
 80066d8:	08006795 	.word	0x08006795
 80066dc:	08006795 	.word	0x08006795
 80066e0:	08006795 	.word	0x08006795
 80066e4:	08006795 	.word	0x08006795
 80066e8:	08006795 	.word	0x08006795
 80066ec:	08006795 	.word	0x08006795
 80066f0:	08006795 	.word	0x08006795
 80066f4:	08006795 	.word	0x08006795
 80066f8:	08006795 	.word	0x08006795
 80066fc:	08006795 	.word	0x08006795
 8006700:	08006795 	.word	0x08006795
 8006704:	08006795 	.word	0x08006795
 8006708:	08006795 	.word	0x08006795
 800670c:	08006795 	.word	0x08006795
 8006710:	08006795 	.word	0x08006795
 8006714:	08006787 	.word	0x08006787
 8006718:	2b40      	cmp	r3, #64	@ 0x40
 800671a:	d037      	beq.n	800678c <UART_SetConfig+0x6bc>
 800671c:	e03a      	b.n	8006794 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800671e:	f7fe f86b 	bl	80047f8 <HAL_RCCEx_GetD3PCLK1Freq>
 8006722:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006724:	e03c      	b.n	80067a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006726:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800672a:	4618      	mov	r0, r3
 800672c:	f7fe f87a 	bl	8004824 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006734:	e034      	b.n	80067a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006736:	f107 0318 	add.w	r3, r7, #24
 800673a:	4618      	mov	r0, r3
 800673c:	f7fe f9c6 	bl	8004acc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006744:	e02c      	b.n	80067a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006746:	4b09      	ldr	r3, [pc, #36]	@ (800676c <UART_SetConfig+0x69c>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 0320 	and.w	r3, r3, #32
 800674e:	2b00      	cmp	r3, #0
 8006750:	d016      	beq.n	8006780 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006752:	4b06      	ldr	r3, [pc, #24]	@ (800676c <UART_SetConfig+0x69c>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	08db      	lsrs	r3, r3, #3
 8006758:	f003 0303 	and.w	r3, r3, #3
 800675c:	4a07      	ldr	r2, [pc, #28]	@ (800677c <UART_SetConfig+0x6ac>)
 800675e:	fa22 f303 	lsr.w	r3, r2, r3
 8006762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006764:	e01c      	b.n	80067a0 <UART_SetConfig+0x6d0>
 8006766:	bf00      	nop
 8006768:	40011400 	.word	0x40011400
 800676c:	58024400 	.word	0x58024400
 8006770:	40007800 	.word	0x40007800
 8006774:	40007c00 	.word	0x40007c00
 8006778:	58000c00 	.word	0x58000c00
 800677c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006780:	4b9d      	ldr	r3, [pc, #628]	@ (80069f8 <UART_SetConfig+0x928>)
 8006782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006784:	e00c      	b.n	80067a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006786:	4b9d      	ldr	r3, [pc, #628]	@ (80069fc <UART_SetConfig+0x92c>)
 8006788:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800678a:	e009      	b.n	80067a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800678c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006790:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006792:	e005      	b.n	80067a0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006794:	2300      	movs	r3, #0
 8006796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800679e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80067a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f000 81de 	beq.w	8006b64 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ac:	4a94      	ldr	r2, [pc, #592]	@ (8006a00 <UART_SetConfig+0x930>)
 80067ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067b2:	461a      	mov	r2, r3
 80067b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80067ba:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	685a      	ldr	r2, [r3, #4]
 80067c0:	4613      	mov	r3, r2
 80067c2:	005b      	lsls	r3, r3, #1
 80067c4:	4413      	add	r3, r2
 80067c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d305      	bcc.n	80067d8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d903      	bls.n	80067e0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80067de:	e1c1      	b.n	8006b64 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067e2:	2200      	movs	r2, #0
 80067e4:	60bb      	str	r3, [r7, #8]
 80067e6:	60fa      	str	r2, [r7, #12]
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ec:	4a84      	ldr	r2, [pc, #528]	@ (8006a00 <UART_SetConfig+0x930>)
 80067ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	2200      	movs	r2, #0
 80067f6:	603b      	str	r3, [r7, #0]
 80067f8:	607a      	str	r2, [r7, #4]
 80067fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006802:	f7f9 fdbd 	bl	8000380 <__aeabi_uldivmod>
 8006806:	4602      	mov	r2, r0
 8006808:	460b      	mov	r3, r1
 800680a:	4610      	mov	r0, r2
 800680c:	4619      	mov	r1, r3
 800680e:	f04f 0200 	mov.w	r2, #0
 8006812:	f04f 0300 	mov.w	r3, #0
 8006816:	020b      	lsls	r3, r1, #8
 8006818:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800681c:	0202      	lsls	r2, r0, #8
 800681e:	6979      	ldr	r1, [r7, #20]
 8006820:	6849      	ldr	r1, [r1, #4]
 8006822:	0849      	lsrs	r1, r1, #1
 8006824:	2000      	movs	r0, #0
 8006826:	460c      	mov	r4, r1
 8006828:	4605      	mov	r5, r0
 800682a:	eb12 0804 	adds.w	r8, r2, r4
 800682e:	eb43 0905 	adc.w	r9, r3, r5
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	469a      	mov	sl, r3
 800683a:	4693      	mov	fp, r2
 800683c:	4652      	mov	r2, sl
 800683e:	465b      	mov	r3, fp
 8006840:	4640      	mov	r0, r8
 8006842:	4649      	mov	r1, r9
 8006844:	f7f9 fd9c 	bl	8000380 <__aeabi_uldivmod>
 8006848:	4602      	mov	r2, r0
 800684a:	460b      	mov	r3, r1
 800684c:	4613      	mov	r3, r2
 800684e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006852:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006856:	d308      	bcc.n	800686a <UART_SetConfig+0x79a>
 8006858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800685a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800685e:	d204      	bcs.n	800686a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006866:	60da      	str	r2, [r3, #12]
 8006868:	e17c      	b.n	8006b64 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006870:	e178      	b.n	8006b64 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800687a:	f040 80c5 	bne.w	8006a08 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800687e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006882:	2b20      	cmp	r3, #32
 8006884:	dc48      	bgt.n	8006918 <UART_SetConfig+0x848>
 8006886:	2b00      	cmp	r3, #0
 8006888:	db7b      	blt.n	8006982 <UART_SetConfig+0x8b2>
 800688a:	2b20      	cmp	r3, #32
 800688c:	d879      	bhi.n	8006982 <UART_SetConfig+0x8b2>
 800688e:	a201      	add	r2, pc, #4	@ (adr r2, 8006894 <UART_SetConfig+0x7c4>)
 8006890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006894:	0800691f 	.word	0x0800691f
 8006898:	08006927 	.word	0x08006927
 800689c:	08006983 	.word	0x08006983
 80068a0:	08006983 	.word	0x08006983
 80068a4:	0800692f 	.word	0x0800692f
 80068a8:	08006983 	.word	0x08006983
 80068ac:	08006983 	.word	0x08006983
 80068b0:	08006983 	.word	0x08006983
 80068b4:	0800693f 	.word	0x0800693f
 80068b8:	08006983 	.word	0x08006983
 80068bc:	08006983 	.word	0x08006983
 80068c0:	08006983 	.word	0x08006983
 80068c4:	08006983 	.word	0x08006983
 80068c8:	08006983 	.word	0x08006983
 80068cc:	08006983 	.word	0x08006983
 80068d0:	08006983 	.word	0x08006983
 80068d4:	0800694f 	.word	0x0800694f
 80068d8:	08006983 	.word	0x08006983
 80068dc:	08006983 	.word	0x08006983
 80068e0:	08006983 	.word	0x08006983
 80068e4:	08006983 	.word	0x08006983
 80068e8:	08006983 	.word	0x08006983
 80068ec:	08006983 	.word	0x08006983
 80068f0:	08006983 	.word	0x08006983
 80068f4:	08006983 	.word	0x08006983
 80068f8:	08006983 	.word	0x08006983
 80068fc:	08006983 	.word	0x08006983
 8006900:	08006983 	.word	0x08006983
 8006904:	08006983 	.word	0x08006983
 8006908:	08006983 	.word	0x08006983
 800690c:	08006983 	.word	0x08006983
 8006910:	08006983 	.word	0x08006983
 8006914:	08006975 	.word	0x08006975
 8006918:	2b40      	cmp	r3, #64	@ 0x40
 800691a:	d02e      	beq.n	800697a <UART_SetConfig+0x8aa>
 800691c:	e031      	b.n	8006982 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800691e:	f7fc fd35 	bl	800338c <HAL_RCC_GetPCLK1Freq>
 8006922:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006924:	e033      	b.n	800698e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006926:	f7fc fd47 	bl	80033b8 <HAL_RCC_GetPCLK2Freq>
 800692a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800692c:	e02f      	b.n	800698e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800692e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006932:	4618      	mov	r0, r3
 8006934:	f7fd ff76 	bl	8004824 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800693a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800693c:	e027      	b.n	800698e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800693e:	f107 0318 	add.w	r3, r7, #24
 8006942:	4618      	mov	r0, r3
 8006944:	f7fe f8c2 	bl	8004acc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800694c:	e01f      	b.n	800698e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800694e:	4b2d      	ldr	r3, [pc, #180]	@ (8006a04 <UART_SetConfig+0x934>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0320 	and.w	r3, r3, #32
 8006956:	2b00      	cmp	r3, #0
 8006958:	d009      	beq.n	800696e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800695a:	4b2a      	ldr	r3, [pc, #168]	@ (8006a04 <UART_SetConfig+0x934>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	08db      	lsrs	r3, r3, #3
 8006960:	f003 0303 	and.w	r3, r3, #3
 8006964:	4a24      	ldr	r2, [pc, #144]	@ (80069f8 <UART_SetConfig+0x928>)
 8006966:	fa22 f303 	lsr.w	r3, r2, r3
 800696a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800696c:	e00f      	b.n	800698e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800696e:	4b22      	ldr	r3, [pc, #136]	@ (80069f8 <UART_SetConfig+0x928>)
 8006970:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006972:	e00c      	b.n	800698e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006974:	4b21      	ldr	r3, [pc, #132]	@ (80069fc <UART_SetConfig+0x92c>)
 8006976:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006978:	e009      	b.n	800698e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800697a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800697e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006980:	e005      	b.n	800698e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006982:	2300      	movs	r3, #0
 8006984:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800698c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800698e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006990:	2b00      	cmp	r3, #0
 8006992:	f000 80e7 	beq.w	8006b64 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800699a:	4a19      	ldr	r2, [pc, #100]	@ (8006a00 <UART_SetConfig+0x930>)
 800699c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069a0:	461a      	mov	r2, r3
 80069a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80069a8:	005a      	lsls	r2, r3, #1
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	085b      	lsrs	r3, r3, #1
 80069b0:	441a      	add	r2, r3
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069be:	2b0f      	cmp	r3, #15
 80069c0:	d916      	bls.n	80069f0 <UART_SetConfig+0x920>
 80069c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069c8:	d212      	bcs.n	80069f0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	f023 030f 	bic.w	r3, r3, #15
 80069d2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d6:	085b      	lsrs	r3, r3, #1
 80069d8:	b29b      	uxth	r3, r3
 80069da:	f003 0307 	and.w	r3, r3, #7
 80069de:	b29a      	uxth	r2, r3
 80069e0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80069e2:	4313      	orrs	r3, r2
 80069e4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80069ec:	60da      	str	r2, [r3, #12]
 80069ee:	e0b9      	b.n	8006b64 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80069f6:	e0b5      	b.n	8006b64 <UART_SetConfig+0xa94>
 80069f8:	03d09000 	.word	0x03d09000
 80069fc:	003d0900 	.word	0x003d0900
 8006a00:	08008060 	.word	0x08008060
 8006a04:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a08:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006a0c:	2b20      	cmp	r3, #32
 8006a0e:	dc49      	bgt.n	8006aa4 <UART_SetConfig+0x9d4>
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	db7c      	blt.n	8006b0e <UART_SetConfig+0xa3e>
 8006a14:	2b20      	cmp	r3, #32
 8006a16:	d87a      	bhi.n	8006b0e <UART_SetConfig+0xa3e>
 8006a18:	a201      	add	r2, pc, #4	@ (adr r2, 8006a20 <UART_SetConfig+0x950>)
 8006a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1e:	bf00      	nop
 8006a20:	08006aab 	.word	0x08006aab
 8006a24:	08006ab3 	.word	0x08006ab3
 8006a28:	08006b0f 	.word	0x08006b0f
 8006a2c:	08006b0f 	.word	0x08006b0f
 8006a30:	08006abb 	.word	0x08006abb
 8006a34:	08006b0f 	.word	0x08006b0f
 8006a38:	08006b0f 	.word	0x08006b0f
 8006a3c:	08006b0f 	.word	0x08006b0f
 8006a40:	08006acb 	.word	0x08006acb
 8006a44:	08006b0f 	.word	0x08006b0f
 8006a48:	08006b0f 	.word	0x08006b0f
 8006a4c:	08006b0f 	.word	0x08006b0f
 8006a50:	08006b0f 	.word	0x08006b0f
 8006a54:	08006b0f 	.word	0x08006b0f
 8006a58:	08006b0f 	.word	0x08006b0f
 8006a5c:	08006b0f 	.word	0x08006b0f
 8006a60:	08006adb 	.word	0x08006adb
 8006a64:	08006b0f 	.word	0x08006b0f
 8006a68:	08006b0f 	.word	0x08006b0f
 8006a6c:	08006b0f 	.word	0x08006b0f
 8006a70:	08006b0f 	.word	0x08006b0f
 8006a74:	08006b0f 	.word	0x08006b0f
 8006a78:	08006b0f 	.word	0x08006b0f
 8006a7c:	08006b0f 	.word	0x08006b0f
 8006a80:	08006b0f 	.word	0x08006b0f
 8006a84:	08006b0f 	.word	0x08006b0f
 8006a88:	08006b0f 	.word	0x08006b0f
 8006a8c:	08006b0f 	.word	0x08006b0f
 8006a90:	08006b0f 	.word	0x08006b0f
 8006a94:	08006b0f 	.word	0x08006b0f
 8006a98:	08006b0f 	.word	0x08006b0f
 8006a9c:	08006b0f 	.word	0x08006b0f
 8006aa0:	08006b01 	.word	0x08006b01
 8006aa4:	2b40      	cmp	r3, #64	@ 0x40
 8006aa6:	d02e      	beq.n	8006b06 <UART_SetConfig+0xa36>
 8006aa8:	e031      	b.n	8006b0e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006aaa:	f7fc fc6f 	bl	800338c <HAL_RCC_GetPCLK1Freq>
 8006aae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006ab0:	e033      	b.n	8006b1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ab2:	f7fc fc81 	bl	80033b8 <HAL_RCC_GetPCLK2Freq>
 8006ab6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006ab8:	e02f      	b.n	8006b1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006aba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7fd feb0 	bl	8004824 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ac8:	e027      	b.n	8006b1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006aca:	f107 0318 	add.w	r3, r7, #24
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7fd fffc 	bl	8004acc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ad8:	e01f      	b.n	8006b1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ada:	4b2d      	ldr	r3, [pc, #180]	@ (8006b90 <UART_SetConfig+0xac0>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0320 	and.w	r3, r3, #32
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d009      	beq.n	8006afa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006ae6:	4b2a      	ldr	r3, [pc, #168]	@ (8006b90 <UART_SetConfig+0xac0>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	08db      	lsrs	r3, r3, #3
 8006aec:	f003 0303 	and.w	r3, r3, #3
 8006af0:	4a28      	ldr	r2, [pc, #160]	@ (8006b94 <UART_SetConfig+0xac4>)
 8006af2:	fa22 f303 	lsr.w	r3, r2, r3
 8006af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006af8:	e00f      	b.n	8006b1a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006afa:	4b26      	ldr	r3, [pc, #152]	@ (8006b94 <UART_SetConfig+0xac4>)
 8006afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006afe:	e00c      	b.n	8006b1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006b00:	4b25      	ldr	r3, [pc, #148]	@ (8006b98 <UART_SetConfig+0xac8>)
 8006b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b04:	e009      	b.n	8006b1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b0c:	e005      	b.n	8006b1a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006b18:	bf00      	nop
    }

    if (pclk != 0U)
 8006b1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d021      	beq.n	8006b64 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b24:	4a1d      	ldr	r2, [pc, #116]	@ (8006b9c <UART_SetConfig+0xacc>)
 8006b26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b2e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	085b      	lsrs	r3, r3, #1
 8006b38:	441a      	add	r2, r3
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b42:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b46:	2b0f      	cmp	r3, #15
 8006b48:	d909      	bls.n	8006b5e <UART_SetConfig+0xa8e>
 8006b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b50:	d205      	bcs.n	8006b5e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	60da      	str	r2, [r3, #12]
 8006b5c:	e002      	b.n	8006b64 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	2200      	movs	r2, #0
 8006b78:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006b80:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3748      	adds	r7, #72	@ 0x48
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b8e:	bf00      	nop
 8006b90:	58024400 	.word	0x58024400
 8006b94:	03d09000 	.word	0x03d09000
 8006b98:	003d0900 	.word	0x003d0900
 8006b9c:	08008060 	.word	0x08008060

08006ba0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bac:	f003 0308 	and.w	r3, r3, #8
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00a      	beq.n	8006bca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	430a      	orrs	r2, r1
 8006bc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00a      	beq.n	8006bec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	430a      	orrs	r2, r1
 8006bea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bf0:	f003 0302 	and.w	r3, r3, #2
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00a      	beq.n	8006c0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	430a      	orrs	r2, r1
 8006c0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c12:	f003 0304 	and.w	r3, r3, #4
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00a      	beq.n	8006c30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c34:	f003 0310 	and.w	r3, r3, #16
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d00a      	beq.n	8006c52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c56:	f003 0320 	and.w	r3, r3, #32
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00a      	beq.n	8006c74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	430a      	orrs	r2, r1
 8006c72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d01a      	beq.n	8006cb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	430a      	orrs	r2, r1
 8006c94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c9e:	d10a      	bne.n	8006cb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	430a      	orrs	r2, r1
 8006cb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00a      	beq.n	8006cd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	430a      	orrs	r2, r1
 8006cd6:	605a      	str	r2, [r3, #4]
  }
}
 8006cd8:	bf00      	nop
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b098      	sub	sp, #96	@ 0x60
 8006ce8:	af02      	add	r7, sp, #8
 8006cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006cf4:	f7fa fcea 	bl	80016cc <HAL_GetTick>
 8006cf8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 0308 	and.w	r3, r3, #8
 8006d04:	2b08      	cmp	r3, #8
 8006d06:	d12f      	bne.n	8006d68 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d0c:	9300      	str	r3, [sp, #0]
 8006d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d10:	2200      	movs	r2, #0
 8006d12:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 f88e 	bl	8006e38 <UART_WaitOnFlagUntilTimeout>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d022      	beq.n	8006d68 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d2a:	e853 3f00 	ldrex	r3, [r3]
 8006d2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d36:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d40:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d42:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d48:	e841 2300 	strex	r3, r2, [r1]
 8006d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1e6      	bne.n	8006d22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2220      	movs	r2, #32
 8006d58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e063      	b.n	8006e30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 0304 	and.w	r3, r3, #4
 8006d72:	2b04      	cmp	r3, #4
 8006d74:	d149      	bne.n	8006e0a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d76:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d7a:	9300      	str	r3, [sp, #0]
 8006d7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 f857 	bl	8006e38 <UART_WaitOnFlagUntilTimeout>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d03c      	beq.n	8006e0a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d98:	e853 3f00 	ldrex	r3, [r3]
 8006d9c:	623b      	str	r3, [r7, #32]
   return(result);
 8006d9e:	6a3b      	ldr	r3, [r7, #32]
 8006da0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006da4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	461a      	mov	r2, r3
 8006dac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dae:	633b      	str	r3, [r7, #48]	@ 0x30
 8006db0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006db4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006db6:	e841 2300 	strex	r3, r2, [r1]
 8006dba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d1e6      	bne.n	8006d90 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	3308      	adds	r3, #8
 8006dc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	e853 3f00 	ldrex	r3, [r3]
 8006dd0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f023 0301 	bic.w	r3, r3, #1
 8006dd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	3308      	adds	r3, #8
 8006de0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006de2:	61fa      	str	r2, [r7, #28]
 8006de4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de6:	69b9      	ldr	r1, [r7, #24]
 8006de8:	69fa      	ldr	r2, [r7, #28]
 8006dea:	e841 2300 	strex	r3, r2, [r1]
 8006dee:	617b      	str	r3, [r7, #20]
   return(result);
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1e5      	bne.n	8006dc2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2220      	movs	r2, #32
 8006dfa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e06:	2303      	movs	r3, #3
 8006e08:	e012      	b.n	8006e30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2220      	movs	r2, #32
 8006e0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2220      	movs	r2, #32
 8006e16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3758      	adds	r7, #88	@ 0x58
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	603b      	str	r3, [r7, #0]
 8006e44:	4613      	mov	r3, r2
 8006e46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e48:	e04f      	b.n	8006eea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e50:	d04b      	beq.n	8006eea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e52:	f7fa fc3b 	bl	80016cc <HAL_GetTick>
 8006e56:	4602      	mov	r2, r0
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	69ba      	ldr	r2, [r7, #24]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d302      	bcc.n	8006e68 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d101      	bne.n	8006e6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	e04e      	b.n	8006f0a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 0304 	and.w	r3, r3, #4
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d037      	beq.n	8006eea <UART_WaitOnFlagUntilTimeout+0xb2>
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	2b80      	cmp	r3, #128	@ 0x80
 8006e7e:	d034      	beq.n	8006eea <UART_WaitOnFlagUntilTimeout+0xb2>
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	2b40      	cmp	r3, #64	@ 0x40
 8006e84:	d031      	beq.n	8006eea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	69db      	ldr	r3, [r3, #28]
 8006e8c:	f003 0308 	and.w	r3, r3, #8
 8006e90:	2b08      	cmp	r3, #8
 8006e92:	d110      	bne.n	8006eb6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2208      	movs	r2, #8
 8006e9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f000 f839 	bl	8006f14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2208      	movs	r2, #8
 8006ea6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e029      	b.n	8006f0a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	69db      	ldr	r3, [r3, #28]
 8006ebc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ec0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ec4:	d111      	bne.n	8006eea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ece:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f000 f81f 	bl	8006f14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2220      	movs	r2, #32
 8006eda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e00f      	b.n	8006f0a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	69da      	ldr	r2, [r3, #28]
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	68ba      	ldr	r2, [r7, #8]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	bf0c      	ite	eq
 8006efa:	2301      	moveq	r3, #1
 8006efc:	2300      	movne	r3, #0
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	461a      	mov	r2, r3
 8006f02:	79fb      	ldrb	r3, [r7, #7]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d0a0      	beq.n	8006e4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
	...

08006f14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b095      	sub	sp, #84	@ 0x54
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f24:	e853 3f00 	ldrex	r3, [r3]
 8006f28:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	461a      	mov	r2, r3
 8006f38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f40:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f42:	e841 2300 	strex	r3, r2, [r1]
 8006f46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1e6      	bne.n	8006f1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	3308      	adds	r3, #8
 8006f54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f56:	6a3b      	ldr	r3, [r7, #32]
 8006f58:	e853 3f00 	ldrex	r3, [r3]
 8006f5c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f5e:	69fa      	ldr	r2, [r7, #28]
 8006f60:	4b1e      	ldr	r3, [pc, #120]	@ (8006fdc <UART_EndRxTransfer+0xc8>)
 8006f62:	4013      	ands	r3, r2
 8006f64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	3308      	adds	r3, #8
 8006f6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f70:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f76:	e841 2300 	strex	r3, r2, [r1]
 8006f7a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1e5      	bne.n	8006f4e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d118      	bne.n	8006fbc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	e853 3f00 	ldrex	r3, [r3]
 8006f96:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	f023 0310 	bic.w	r3, r3, #16
 8006f9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fa8:	61bb      	str	r3, [r7, #24]
 8006faa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fac:	6979      	ldr	r1, [r7, #20]
 8006fae:	69ba      	ldr	r2, [r7, #24]
 8006fb0:	e841 2300 	strex	r3, r2, [r1]
 8006fb4:	613b      	str	r3, [r7, #16]
   return(result);
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1e6      	bne.n	8006f8a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2220      	movs	r2, #32
 8006fc0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006fd0:	bf00      	nop
 8006fd2:	3754      	adds	r7, #84	@ 0x54
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr
 8006fdc:	effffffe 	.word	0xeffffffe

08006fe0 <std>:
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	b510      	push	{r4, lr}
 8006fe4:	4604      	mov	r4, r0
 8006fe6:	e9c0 3300 	strd	r3, r3, [r0]
 8006fea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006fee:	6083      	str	r3, [r0, #8]
 8006ff0:	8181      	strh	r1, [r0, #12]
 8006ff2:	6643      	str	r3, [r0, #100]	@ 0x64
 8006ff4:	81c2      	strh	r2, [r0, #14]
 8006ff6:	6183      	str	r3, [r0, #24]
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	2208      	movs	r2, #8
 8006ffc:	305c      	adds	r0, #92	@ 0x5c
 8006ffe:	f000 f906 	bl	800720e <memset>
 8007002:	4b0d      	ldr	r3, [pc, #52]	@ (8007038 <std+0x58>)
 8007004:	6263      	str	r3, [r4, #36]	@ 0x24
 8007006:	4b0d      	ldr	r3, [pc, #52]	@ (800703c <std+0x5c>)
 8007008:	62a3      	str	r3, [r4, #40]	@ 0x28
 800700a:	4b0d      	ldr	r3, [pc, #52]	@ (8007040 <std+0x60>)
 800700c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800700e:	4b0d      	ldr	r3, [pc, #52]	@ (8007044 <std+0x64>)
 8007010:	6323      	str	r3, [r4, #48]	@ 0x30
 8007012:	4b0d      	ldr	r3, [pc, #52]	@ (8007048 <std+0x68>)
 8007014:	6224      	str	r4, [r4, #32]
 8007016:	429c      	cmp	r4, r3
 8007018:	d006      	beq.n	8007028 <std+0x48>
 800701a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800701e:	4294      	cmp	r4, r2
 8007020:	d002      	beq.n	8007028 <std+0x48>
 8007022:	33d0      	adds	r3, #208	@ 0xd0
 8007024:	429c      	cmp	r4, r3
 8007026:	d105      	bne.n	8007034 <std+0x54>
 8007028:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800702c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007030:	f000 b966 	b.w	8007300 <__retarget_lock_init_recursive>
 8007034:	bd10      	pop	{r4, pc}
 8007036:	bf00      	nop
 8007038:	08007189 	.word	0x08007189
 800703c:	080071ab 	.word	0x080071ab
 8007040:	080071e3 	.word	0x080071e3
 8007044:	08007207 	.word	0x08007207
 8007048:	240001e8 	.word	0x240001e8

0800704c <stdio_exit_handler>:
 800704c:	4a02      	ldr	r2, [pc, #8]	@ (8007058 <stdio_exit_handler+0xc>)
 800704e:	4903      	ldr	r1, [pc, #12]	@ (800705c <stdio_exit_handler+0x10>)
 8007050:	4803      	ldr	r0, [pc, #12]	@ (8007060 <stdio_exit_handler+0x14>)
 8007052:	f000 b869 	b.w	8007128 <_fwalk_sglue>
 8007056:	bf00      	nop
 8007058:	2400002c 	.word	0x2400002c
 800705c:	08007b9d 	.word	0x08007b9d
 8007060:	2400003c 	.word	0x2400003c

08007064 <cleanup_stdio>:
 8007064:	6841      	ldr	r1, [r0, #4]
 8007066:	4b0c      	ldr	r3, [pc, #48]	@ (8007098 <cleanup_stdio+0x34>)
 8007068:	4299      	cmp	r1, r3
 800706a:	b510      	push	{r4, lr}
 800706c:	4604      	mov	r4, r0
 800706e:	d001      	beq.n	8007074 <cleanup_stdio+0x10>
 8007070:	f000 fd94 	bl	8007b9c <_fflush_r>
 8007074:	68a1      	ldr	r1, [r4, #8]
 8007076:	4b09      	ldr	r3, [pc, #36]	@ (800709c <cleanup_stdio+0x38>)
 8007078:	4299      	cmp	r1, r3
 800707a:	d002      	beq.n	8007082 <cleanup_stdio+0x1e>
 800707c:	4620      	mov	r0, r4
 800707e:	f000 fd8d 	bl	8007b9c <_fflush_r>
 8007082:	68e1      	ldr	r1, [r4, #12]
 8007084:	4b06      	ldr	r3, [pc, #24]	@ (80070a0 <cleanup_stdio+0x3c>)
 8007086:	4299      	cmp	r1, r3
 8007088:	d004      	beq.n	8007094 <cleanup_stdio+0x30>
 800708a:	4620      	mov	r0, r4
 800708c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007090:	f000 bd84 	b.w	8007b9c <_fflush_r>
 8007094:	bd10      	pop	{r4, pc}
 8007096:	bf00      	nop
 8007098:	240001e8 	.word	0x240001e8
 800709c:	24000250 	.word	0x24000250
 80070a0:	240002b8 	.word	0x240002b8

080070a4 <global_stdio_init.part.0>:
 80070a4:	b510      	push	{r4, lr}
 80070a6:	4b0b      	ldr	r3, [pc, #44]	@ (80070d4 <global_stdio_init.part.0+0x30>)
 80070a8:	4c0b      	ldr	r4, [pc, #44]	@ (80070d8 <global_stdio_init.part.0+0x34>)
 80070aa:	4a0c      	ldr	r2, [pc, #48]	@ (80070dc <global_stdio_init.part.0+0x38>)
 80070ac:	601a      	str	r2, [r3, #0]
 80070ae:	4620      	mov	r0, r4
 80070b0:	2200      	movs	r2, #0
 80070b2:	2104      	movs	r1, #4
 80070b4:	f7ff ff94 	bl	8006fe0 <std>
 80070b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80070bc:	2201      	movs	r2, #1
 80070be:	2109      	movs	r1, #9
 80070c0:	f7ff ff8e 	bl	8006fe0 <std>
 80070c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80070c8:	2202      	movs	r2, #2
 80070ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070ce:	2112      	movs	r1, #18
 80070d0:	f7ff bf86 	b.w	8006fe0 <std>
 80070d4:	24000320 	.word	0x24000320
 80070d8:	240001e8 	.word	0x240001e8
 80070dc:	0800704d 	.word	0x0800704d

080070e0 <__sfp_lock_acquire>:
 80070e0:	4801      	ldr	r0, [pc, #4]	@ (80070e8 <__sfp_lock_acquire+0x8>)
 80070e2:	f000 b90e 	b.w	8007302 <__retarget_lock_acquire_recursive>
 80070e6:	bf00      	nop
 80070e8:	24000329 	.word	0x24000329

080070ec <__sfp_lock_release>:
 80070ec:	4801      	ldr	r0, [pc, #4]	@ (80070f4 <__sfp_lock_release+0x8>)
 80070ee:	f000 b909 	b.w	8007304 <__retarget_lock_release_recursive>
 80070f2:	bf00      	nop
 80070f4:	24000329 	.word	0x24000329

080070f8 <__sinit>:
 80070f8:	b510      	push	{r4, lr}
 80070fa:	4604      	mov	r4, r0
 80070fc:	f7ff fff0 	bl	80070e0 <__sfp_lock_acquire>
 8007100:	6a23      	ldr	r3, [r4, #32]
 8007102:	b11b      	cbz	r3, 800710c <__sinit+0x14>
 8007104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007108:	f7ff bff0 	b.w	80070ec <__sfp_lock_release>
 800710c:	4b04      	ldr	r3, [pc, #16]	@ (8007120 <__sinit+0x28>)
 800710e:	6223      	str	r3, [r4, #32]
 8007110:	4b04      	ldr	r3, [pc, #16]	@ (8007124 <__sinit+0x2c>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1f5      	bne.n	8007104 <__sinit+0xc>
 8007118:	f7ff ffc4 	bl	80070a4 <global_stdio_init.part.0>
 800711c:	e7f2      	b.n	8007104 <__sinit+0xc>
 800711e:	bf00      	nop
 8007120:	08007065 	.word	0x08007065
 8007124:	24000320 	.word	0x24000320

08007128 <_fwalk_sglue>:
 8007128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800712c:	4607      	mov	r7, r0
 800712e:	4688      	mov	r8, r1
 8007130:	4614      	mov	r4, r2
 8007132:	2600      	movs	r6, #0
 8007134:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007138:	f1b9 0901 	subs.w	r9, r9, #1
 800713c:	d505      	bpl.n	800714a <_fwalk_sglue+0x22>
 800713e:	6824      	ldr	r4, [r4, #0]
 8007140:	2c00      	cmp	r4, #0
 8007142:	d1f7      	bne.n	8007134 <_fwalk_sglue+0xc>
 8007144:	4630      	mov	r0, r6
 8007146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800714a:	89ab      	ldrh	r3, [r5, #12]
 800714c:	2b01      	cmp	r3, #1
 800714e:	d907      	bls.n	8007160 <_fwalk_sglue+0x38>
 8007150:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007154:	3301      	adds	r3, #1
 8007156:	d003      	beq.n	8007160 <_fwalk_sglue+0x38>
 8007158:	4629      	mov	r1, r5
 800715a:	4638      	mov	r0, r7
 800715c:	47c0      	blx	r8
 800715e:	4306      	orrs	r6, r0
 8007160:	3568      	adds	r5, #104	@ 0x68
 8007162:	e7e9      	b.n	8007138 <_fwalk_sglue+0x10>

08007164 <iprintf>:
 8007164:	b40f      	push	{r0, r1, r2, r3}
 8007166:	b507      	push	{r0, r1, r2, lr}
 8007168:	4906      	ldr	r1, [pc, #24]	@ (8007184 <iprintf+0x20>)
 800716a:	ab04      	add	r3, sp, #16
 800716c:	6808      	ldr	r0, [r1, #0]
 800716e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007172:	6881      	ldr	r1, [r0, #8]
 8007174:	9301      	str	r3, [sp, #4]
 8007176:	f000 f9e9 	bl	800754c <_vfiprintf_r>
 800717a:	b003      	add	sp, #12
 800717c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007180:	b004      	add	sp, #16
 8007182:	4770      	bx	lr
 8007184:	24000038 	.word	0x24000038

08007188 <__sread>:
 8007188:	b510      	push	{r4, lr}
 800718a:	460c      	mov	r4, r1
 800718c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007190:	f000 f868 	bl	8007264 <_read_r>
 8007194:	2800      	cmp	r0, #0
 8007196:	bfab      	itete	ge
 8007198:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800719a:	89a3      	ldrhlt	r3, [r4, #12]
 800719c:	181b      	addge	r3, r3, r0
 800719e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80071a2:	bfac      	ite	ge
 80071a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80071a6:	81a3      	strhlt	r3, [r4, #12]
 80071a8:	bd10      	pop	{r4, pc}

080071aa <__swrite>:
 80071aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071ae:	461f      	mov	r7, r3
 80071b0:	898b      	ldrh	r3, [r1, #12]
 80071b2:	05db      	lsls	r3, r3, #23
 80071b4:	4605      	mov	r5, r0
 80071b6:	460c      	mov	r4, r1
 80071b8:	4616      	mov	r6, r2
 80071ba:	d505      	bpl.n	80071c8 <__swrite+0x1e>
 80071bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071c0:	2302      	movs	r3, #2
 80071c2:	2200      	movs	r2, #0
 80071c4:	f000 f83c 	bl	8007240 <_lseek_r>
 80071c8:	89a3      	ldrh	r3, [r4, #12]
 80071ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80071d2:	81a3      	strh	r3, [r4, #12]
 80071d4:	4632      	mov	r2, r6
 80071d6:	463b      	mov	r3, r7
 80071d8:	4628      	mov	r0, r5
 80071da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071de:	f000 b853 	b.w	8007288 <_write_r>

080071e2 <__sseek>:
 80071e2:	b510      	push	{r4, lr}
 80071e4:	460c      	mov	r4, r1
 80071e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071ea:	f000 f829 	bl	8007240 <_lseek_r>
 80071ee:	1c43      	adds	r3, r0, #1
 80071f0:	89a3      	ldrh	r3, [r4, #12]
 80071f2:	bf15      	itete	ne
 80071f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80071f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80071fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80071fe:	81a3      	strheq	r3, [r4, #12]
 8007200:	bf18      	it	ne
 8007202:	81a3      	strhne	r3, [r4, #12]
 8007204:	bd10      	pop	{r4, pc}

08007206 <__sclose>:
 8007206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800720a:	f000 b809 	b.w	8007220 <_close_r>

0800720e <memset>:
 800720e:	4402      	add	r2, r0
 8007210:	4603      	mov	r3, r0
 8007212:	4293      	cmp	r3, r2
 8007214:	d100      	bne.n	8007218 <memset+0xa>
 8007216:	4770      	bx	lr
 8007218:	f803 1b01 	strb.w	r1, [r3], #1
 800721c:	e7f9      	b.n	8007212 <memset+0x4>
	...

08007220 <_close_r>:
 8007220:	b538      	push	{r3, r4, r5, lr}
 8007222:	4d06      	ldr	r5, [pc, #24]	@ (800723c <_close_r+0x1c>)
 8007224:	2300      	movs	r3, #0
 8007226:	4604      	mov	r4, r0
 8007228:	4608      	mov	r0, r1
 800722a:	602b      	str	r3, [r5, #0]
 800722c:	f7f9 fe23 	bl	8000e76 <_close>
 8007230:	1c43      	adds	r3, r0, #1
 8007232:	d102      	bne.n	800723a <_close_r+0x1a>
 8007234:	682b      	ldr	r3, [r5, #0]
 8007236:	b103      	cbz	r3, 800723a <_close_r+0x1a>
 8007238:	6023      	str	r3, [r4, #0]
 800723a:	bd38      	pop	{r3, r4, r5, pc}
 800723c:	24000324 	.word	0x24000324

08007240 <_lseek_r>:
 8007240:	b538      	push	{r3, r4, r5, lr}
 8007242:	4d07      	ldr	r5, [pc, #28]	@ (8007260 <_lseek_r+0x20>)
 8007244:	4604      	mov	r4, r0
 8007246:	4608      	mov	r0, r1
 8007248:	4611      	mov	r1, r2
 800724a:	2200      	movs	r2, #0
 800724c:	602a      	str	r2, [r5, #0]
 800724e:	461a      	mov	r2, r3
 8007250:	f7f9 fe38 	bl	8000ec4 <_lseek>
 8007254:	1c43      	adds	r3, r0, #1
 8007256:	d102      	bne.n	800725e <_lseek_r+0x1e>
 8007258:	682b      	ldr	r3, [r5, #0]
 800725a:	b103      	cbz	r3, 800725e <_lseek_r+0x1e>
 800725c:	6023      	str	r3, [r4, #0]
 800725e:	bd38      	pop	{r3, r4, r5, pc}
 8007260:	24000324 	.word	0x24000324

08007264 <_read_r>:
 8007264:	b538      	push	{r3, r4, r5, lr}
 8007266:	4d07      	ldr	r5, [pc, #28]	@ (8007284 <_read_r+0x20>)
 8007268:	4604      	mov	r4, r0
 800726a:	4608      	mov	r0, r1
 800726c:	4611      	mov	r1, r2
 800726e:	2200      	movs	r2, #0
 8007270:	602a      	str	r2, [r5, #0]
 8007272:	461a      	mov	r2, r3
 8007274:	f7f9 fdc6 	bl	8000e04 <_read>
 8007278:	1c43      	adds	r3, r0, #1
 800727a:	d102      	bne.n	8007282 <_read_r+0x1e>
 800727c:	682b      	ldr	r3, [r5, #0]
 800727e:	b103      	cbz	r3, 8007282 <_read_r+0x1e>
 8007280:	6023      	str	r3, [r4, #0]
 8007282:	bd38      	pop	{r3, r4, r5, pc}
 8007284:	24000324 	.word	0x24000324

08007288 <_write_r>:
 8007288:	b538      	push	{r3, r4, r5, lr}
 800728a:	4d07      	ldr	r5, [pc, #28]	@ (80072a8 <_write_r+0x20>)
 800728c:	4604      	mov	r4, r0
 800728e:	4608      	mov	r0, r1
 8007290:	4611      	mov	r1, r2
 8007292:	2200      	movs	r2, #0
 8007294:	602a      	str	r2, [r5, #0]
 8007296:	461a      	mov	r2, r3
 8007298:	f7f9 fdd1 	bl	8000e3e <_write>
 800729c:	1c43      	adds	r3, r0, #1
 800729e:	d102      	bne.n	80072a6 <_write_r+0x1e>
 80072a0:	682b      	ldr	r3, [r5, #0]
 80072a2:	b103      	cbz	r3, 80072a6 <_write_r+0x1e>
 80072a4:	6023      	str	r3, [r4, #0]
 80072a6:	bd38      	pop	{r3, r4, r5, pc}
 80072a8:	24000324 	.word	0x24000324

080072ac <__errno>:
 80072ac:	4b01      	ldr	r3, [pc, #4]	@ (80072b4 <__errno+0x8>)
 80072ae:	6818      	ldr	r0, [r3, #0]
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	24000038 	.word	0x24000038

080072b8 <__libc_init_array>:
 80072b8:	b570      	push	{r4, r5, r6, lr}
 80072ba:	4d0d      	ldr	r5, [pc, #52]	@ (80072f0 <__libc_init_array+0x38>)
 80072bc:	4c0d      	ldr	r4, [pc, #52]	@ (80072f4 <__libc_init_array+0x3c>)
 80072be:	1b64      	subs	r4, r4, r5
 80072c0:	10a4      	asrs	r4, r4, #2
 80072c2:	2600      	movs	r6, #0
 80072c4:	42a6      	cmp	r6, r4
 80072c6:	d109      	bne.n	80072dc <__libc_init_array+0x24>
 80072c8:	4d0b      	ldr	r5, [pc, #44]	@ (80072f8 <__libc_init_array+0x40>)
 80072ca:	4c0c      	ldr	r4, [pc, #48]	@ (80072fc <__libc_init_array+0x44>)
 80072cc:	f000 fdb6 	bl	8007e3c <_init>
 80072d0:	1b64      	subs	r4, r4, r5
 80072d2:	10a4      	asrs	r4, r4, #2
 80072d4:	2600      	movs	r6, #0
 80072d6:	42a6      	cmp	r6, r4
 80072d8:	d105      	bne.n	80072e6 <__libc_init_array+0x2e>
 80072da:	bd70      	pop	{r4, r5, r6, pc}
 80072dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80072e0:	4798      	blx	r3
 80072e2:	3601      	adds	r6, #1
 80072e4:	e7ee      	b.n	80072c4 <__libc_init_array+0xc>
 80072e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80072ea:	4798      	blx	r3
 80072ec:	3601      	adds	r6, #1
 80072ee:	e7f2      	b.n	80072d6 <__libc_init_array+0x1e>
 80072f0:	080080b4 	.word	0x080080b4
 80072f4:	080080b4 	.word	0x080080b4
 80072f8:	080080b4 	.word	0x080080b4
 80072fc:	080080b8 	.word	0x080080b8

08007300 <__retarget_lock_init_recursive>:
 8007300:	4770      	bx	lr

08007302 <__retarget_lock_acquire_recursive>:
 8007302:	4770      	bx	lr

08007304 <__retarget_lock_release_recursive>:
 8007304:	4770      	bx	lr
	...

08007308 <_free_r>:
 8007308:	b538      	push	{r3, r4, r5, lr}
 800730a:	4605      	mov	r5, r0
 800730c:	2900      	cmp	r1, #0
 800730e:	d041      	beq.n	8007394 <_free_r+0x8c>
 8007310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007314:	1f0c      	subs	r4, r1, #4
 8007316:	2b00      	cmp	r3, #0
 8007318:	bfb8      	it	lt
 800731a:	18e4      	addlt	r4, r4, r3
 800731c:	f000 f8e0 	bl	80074e0 <__malloc_lock>
 8007320:	4a1d      	ldr	r2, [pc, #116]	@ (8007398 <_free_r+0x90>)
 8007322:	6813      	ldr	r3, [r2, #0]
 8007324:	b933      	cbnz	r3, 8007334 <_free_r+0x2c>
 8007326:	6063      	str	r3, [r4, #4]
 8007328:	6014      	str	r4, [r2, #0]
 800732a:	4628      	mov	r0, r5
 800732c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007330:	f000 b8dc 	b.w	80074ec <__malloc_unlock>
 8007334:	42a3      	cmp	r3, r4
 8007336:	d908      	bls.n	800734a <_free_r+0x42>
 8007338:	6820      	ldr	r0, [r4, #0]
 800733a:	1821      	adds	r1, r4, r0
 800733c:	428b      	cmp	r3, r1
 800733e:	bf01      	itttt	eq
 8007340:	6819      	ldreq	r1, [r3, #0]
 8007342:	685b      	ldreq	r3, [r3, #4]
 8007344:	1809      	addeq	r1, r1, r0
 8007346:	6021      	streq	r1, [r4, #0]
 8007348:	e7ed      	b.n	8007326 <_free_r+0x1e>
 800734a:	461a      	mov	r2, r3
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	b10b      	cbz	r3, 8007354 <_free_r+0x4c>
 8007350:	42a3      	cmp	r3, r4
 8007352:	d9fa      	bls.n	800734a <_free_r+0x42>
 8007354:	6811      	ldr	r1, [r2, #0]
 8007356:	1850      	adds	r0, r2, r1
 8007358:	42a0      	cmp	r0, r4
 800735a:	d10b      	bne.n	8007374 <_free_r+0x6c>
 800735c:	6820      	ldr	r0, [r4, #0]
 800735e:	4401      	add	r1, r0
 8007360:	1850      	adds	r0, r2, r1
 8007362:	4283      	cmp	r3, r0
 8007364:	6011      	str	r1, [r2, #0]
 8007366:	d1e0      	bne.n	800732a <_free_r+0x22>
 8007368:	6818      	ldr	r0, [r3, #0]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	6053      	str	r3, [r2, #4]
 800736e:	4408      	add	r0, r1
 8007370:	6010      	str	r0, [r2, #0]
 8007372:	e7da      	b.n	800732a <_free_r+0x22>
 8007374:	d902      	bls.n	800737c <_free_r+0x74>
 8007376:	230c      	movs	r3, #12
 8007378:	602b      	str	r3, [r5, #0]
 800737a:	e7d6      	b.n	800732a <_free_r+0x22>
 800737c:	6820      	ldr	r0, [r4, #0]
 800737e:	1821      	adds	r1, r4, r0
 8007380:	428b      	cmp	r3, r1
 8007382:	bf04      	itt	eq
 8007384:	6819      	ldreq	r1, [r3, #0]
 8007386:	685b      	ldreq	r3, [r3, #4]
 8007388:	6063      	str	r3, [r4, #4]
 800738a:	bf04      	itt	eq
 800738c:	1809      	addeq	r1, r1, r0
 800738e:	6021      	streq	r1, [r4, #0]
 8007390:	6054      	str	r4, [r2, #4]
 8007392:	e7ca      	b.n	800732a <_free_r+0x22>
 8007394:	bd38      	pop	{r3, r4, r5, pc}
 8007396:	bf00      	nop
 8007398:	24000330 	.word	0x24000330

0800739c <sbrk_aligned>:
 800739c:	b570      	push	{r4, r5, r6, lr}
 800739e:	4e0f      	ldr	r6, [pc, #60]	@ (80073dc <sbrk_aligned+0x40>)
 80073a0:	460c      	mov	r4, r1
 80073a2:	6831      	ldr	r1, [r6, #0]
 80073a4:	4605      	mov	r5, r0
 80073a6:	b911      	cbnz	r1, 80073ae <sbrk_aligned+0x12>
 80073a8:	f000 fcb4 	bl	8007d14 <_sbrk_r>
 80073ac:	6030      	str	r0, [r6, #0]
 80073ae:	4621      	mov	r1, r4
 80073b0:	4628      	mov	r0, r5
 80073b2:	f000 fcaf 	bl	8007d14 <_sbrk_r>
 80073b6:	1c43      	adds	r3, r0, #1
 80073b8:	d103      	bne.n	80073c2 <sbrk_aligned+0x26>
 80073ba:	f04f 34ff 	mov.w	r4, #4294967295
 80073be:	4620      	mov	r0, r4
 80073c0:	bd70      	pop	{r4, r5, r6, pc}
 80073c2:	1cc4      	adds	r4, r0, #3
 80073c4:	f024 0403 	bic.w	r4, r4, #3
 80073c8:	42a0      	cmp	r0, r4
 80073ca:	d0f8      	beq.n	80073be <sbrk_aligned+0x22>
 80073cc:	1a21      	subs	r1, r4, r0
 80073ce:	4628      	mov	r0, r5
 80073d0:	f000 fca0 	bl	8007d14 <_sbrk_r>
 80073d4:	3001      	adds	r0, #1
 80073d6:	d1f2      	bne.n	80073be <sbrk_aligned+0x22>
 80073d8:	e7ef      	b.n	80073ba <sbrk_aligned+0x1e>
 80073da:	bf00      	nop
 80073dc:	2400032c 	.word	0x2400032c

080073e0 <_malloc_r>:
 80073e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073e4:	1ccd      	adds	r5, r1, #3
 80073e6:	f025 0503 	bic.w	r5, r5, #3
 80073ea:	3508      	adds	r5, #8
 80073ec:	2d0c      	cmp	r5, #12
 80073ee:	bf38      	it	cc
 80073f0:	250c      	movcc	r5, #12
 80073f2:	2d00      	cmp	r5, #0
 80073f4:	4606      	mov	r6, r0
 80073f6:	db01      	blt.n	80073fc <_malloc_r+0x1c>
 80073f8:	42a9      	cmp	r1, r5
 80073fa:	d904      	bls.n	8007406 <_malloc_r+0x26>
 80073fc:	230c      	movs	r3, #12
 80073fe:	6033      	str	r3, [r6, #0]
 8007400:	2000      	movs	r0, #0
 8007402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007406:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80074dc <_malloc_r+0xfc>
 800740a:	f000 f869 	bl	80074e0 <__malloc_lock>
 800740e:	f8d8 3000 	ldr.w	r3, [r8]
 8007412:	461c      	mov	r4, r3
 8007414:	bb44      	cbnz	r4, 8007468 <_malloc_r+0x88>
 8007416:	4629      	mov	r1, r5
 8007418:	4630      	mov	r0, r6
 800741a:	f7ff ffbf 	bl	800739c <sbrk_aligned>
 800741e:	1c43      	adds	r3, r0, #1
 8007420:	4604      	mov	r4, r0
 8007422:	d158      	bne.n	80074d6 <_malloc_r+0xf6>
 8007424:	f8d8 4000 	ldr.w	r4, [r8]
 8007428:	4627      	mov	r7, r4
 800742a:	2f00      	cmp	r7, #0
 800742c:	d143      	bne.n	80074b6 <_malloc_r+0xd6>
 800742e:	2c00      	cmp	r4, #0
 8007430:	d04b      	beq.n	80074ca <_malloc_r+0xea>
 8007432:	6823      	ldr	r3, [r4, #0]
 8007434:	4639      	mov	r1, r7
 8007436:	4630      	mov	r0, r6
 8007438:	eb04 0903 	add.w	r9, r4, r3
 800743c:	f000 fc6a 	bl	8007d14 <_sbrk_r>
 8007440:	4581      	cmp	r9, r0
 8007442:	d142      	bne.n	80074ca <_malloc_r+0xea>
 8007444:	6821      	ldr	r1, [r4, #0]
 8007446:	1a6d      	subs	r5, r5, r1
 8007448:	4629      	mov	r1, r5
 800744a:	4630      	mov	r0, r6
 800744c:	f7ff ffa6 	bl	800739c <sbrk_aligned>
 8007450:	3001      	adds	r0, #1
 8007452:	d03a      	beq.n	80074ca <_malloc_r+0xea>
 8007454:	6823      	ldr	r3, [r4, #0]
 8007456:	442b      	add	r3, r5
 8007458:	6023      	str	r3, [r4, #0]
 800745a:	f8d8 3000 	ldr.w	r3, [r8]
 800745e:	685a      	ldr	r2, [r3, #4]
 8007460:	bb62      	cbnz	r2, 80074bc <_malloc_r+0xdc>
 8007462:	f8c8 7000 	str.w	r7, [r8]
 8007466:	e00f      	b.n	8007488 <_malloc_r+0xa8>
 8007468:	6822      	ldr	r2, [r4, #0]
 800746a:	1b52      	subs	r2, r2, r5
 800746c:	d420      	bmi.n	80074b0 <_malloc_r+0xd0>
 800746e:	2a0b      	cmp	r2, #11
 8007470:	d917      	bls.n	80074a2 <_malloc_r+0xc2>
 8007472:	1961      	adds	r1, r4, r5
 8007474:	42a3      	cmp	r3, r4
 8007476:	6025      	str	r5, [r4, #0]
 8007478:	bf18      	it	ne
 800747a:	6059      	strne	r1, [r3, #4]
 800747c:	6863      	ldr	r3, [r4, #4]
 800747e:	bf08      	it	eq
 8007480:	f8c8 1000 	streq.w	r1, [r8]
 8007484:	5162      	str	r2, [r4, r5]
 8007486:	604b      	str	r3, [r1, #4]
 8007488:	4630      	mov	r0, r6
 800748a:	f000 f82f 	bl	80074ec <__malloc_unlock>
 800748e:	f104 000b 	add.w	r0, r4, #11
 8007492:	1d23      	adds	r3, r4, #4
 8007494:	f020 0007 	bic.w	r0, r0, #7
 8007498:	1ac2      	subs	r2, r0, r3
 800749a:	bf1c      	itt	ne
 800749c:	1a1b      	subne	r3, r3, r0
 800749e:	50a3      	strne	r3, [r4, r2]
 80074a0:	e7af      	b.n	8007402 <_malloc_r+0x22>
 80074a2:	6862      	ldr	r2, [r4, #4]
 80074a4:	42a3      	cmp	r3, r4
 80074a6:	bf0c      	ite	eq
 80074a8:	f8c8 2000 	streq.w	r2, [r8]
 80074ac:	605a      	strne	r2, [r3, #4]
 80074ae:	e7eb      	b.n	8007488 <_malloc_r+0xa8>
 80074b0:	4623      	mov	r3, r4
 80074b2:	6864      	ldr	r4, [r4, #4]
 80074b4:	e7ae      	b.n	8007414 <_malloc_r+0x34>
 80074b6:	463c      	mov	r4, r7
 80074b8:	687f      	ldr	r7, [r7, #4]
 80074ba:	e7b6      	b.n	800742a <_malloc_r+0x4a>
 80074bc:	461a      	mov	r2, r3
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	42a3      	cmp	r3, r4
 80074c2:	d1fb      	bne.n	80074bc <_malloc_r+0xdc>
 80074c4:	2300      	movs	r3, #0
 80074c6:	6053      	str	r3, [r2, #4]
 80074c8:	e7de      	b.n	8007488 <_malloc_r+0xa8>
 80074ca:	230c      	movs	r3, #12
 80074cc:	6033      	str	r3, [r6, #0]
 80074ce:	4630      	mov	r0, r6
 80074d0:	f000 f80c 	bl	80074ec <__malloc_unlock>
 80074d4:	e794      	b.n	8007400 <_malloc_r+0x20>
 80074d6:	6005      	str	r5, [r0, #0]
 80074d8:	e7d6      	b.n	8007488 <_malloc_r+0xa8>
 80074da:	bf00      	nop
 80074dc:	24000330 	.word	0x24000330

080074e0 <__malloc_lock>:
 80074e0:	4801      	ldr	r0, [pc, #4]	@ (80074e8 <__malloc_lock+0x8>)
 80074e2:	f7ff bf0e 	b.w	8007302 <__retarget_lock_acquire_recursive>
 80074e6:	bf00      	nop
 80074e8:	24000328 	.word	0x24000328

080074ec <__malloc_unlock>:
 80074ec:	4801      	ldr	r0, [pc, #4]	@ (80074f4 <__malloc_unlock+0x8>)
 80074ee:	f7ff bf09 	b.w	8007304 <__retarget_lock_release_recursive>
 80074f2:	bf00      	nop
 80074f4:	24000328 	.word	0x24000328

080074f8 <__sfputc_r>:
 80074f8:	6893      	ldr	r3, [r2, #8]
 80074fa:	3b01      	subs	r3, #1
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	b410      	push	{r4}
 8007500:	6093      	str	r3, [r2, #8]
 8007502:	da08      	bge.n	8007516 <__sfputc_r+0x1e>
 8007504:	6994      	ldr	r4, [r2, #24]
 8007506:	42a3      	cmp	r3, r4
 8007508:	db01      	blt.n	800750e <__sfputc_r+0x16>
 800750a:	290a      	cmp	r1, #10
 800750c:	d103      	bne.n	8007516 <__sfputc_r+0x1e>
 800750e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007512:	f000 bb6b 	b.w	8007bec <__swbuf_r>
 8007516:	6813      	ldr	r3, [r2, #0]
 8007518:	1c58      	adds	r0, r3, #1
 800751a:	6010      	str	r0, [r2, #0]
 800751c:	7019      	strb	r1, [r3, #0]
 800751e:	4608      	mov	r0, r1
 8007520:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007524:	4770      	bx	lr

08007526 <__sfputs_r>:
 8007526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007528:	4606      	mov	r6, r0
 800752a:	460f      	mov	r7, r1
 800752c:	4614      	mov	r4, r2
 800752e:	18d5      	adds	r5, r2, r3
 8007530:	42ac      	cmp	r4, r5
 8007532:	d101      	bne.n	8007538 <__sfputs_r+0x12>
 8007534:	2000      	movs	r0, #0
 8007536:	e007      	b.n	8007548 <__sfputs_r+0x22>
 8007538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800753c:	463a      	mov	r2, r7
 800753e:	4630      	mov	r0, r6
 8007540:	f7ff ffda 	bl	80074f8 <__sfputc_r>
 8007544:	1c43      	adds	r3, r0, #1
 8007546:	d1f3      	bne.n	8007530 <__sfputs_r+0xa>
 8007548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800754c <_vfiprintf_r>:
 800754c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007550:	460d      	mov	r5, r1
 8007552:	b09d      	sub	sp, #116	@ 0x74
 8007554:	4614      	mov	r4, r2
 8007556:	4698      	mov	r8, r3
 8007558:	4606      	mov	r6, r0
 800755a:	b118      	cbz	r0, 8007564 <_vfiprintf_r+0x18>
 800755c:	6a03      	ldr	r3, [r0, #32]
 800755e:	b90b      	cbnz	r3, 8007564 <_vfiprintf_r+0x18>
 8007560:	f7ff fdca 	bl	80070f8 <__sinit>
 8007564:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007566:	07d9      	lsls	r1, r3, #31
 8007568:	d405      	bmi.n	8007576 <_vfiprintf_r+0x2a>
 800756a:	89ab      	ldrh	r3, [r5, #12]
 800756c:	059a      	lsls	r2, r3, #22
 800756e:	d402      	bmi.n	8007576 <_vfiprintf_r+0x2a>
 8007570:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007572:	f7ff fec6 	bl	8007302 <__retarget_lock_acquire_recursive>
 8007576:	89ab      	ldrh	r3, [r5, #12]
 8007578:	071b      	lsls	r3, r3, #28
 800757a:	d501      	bpl.n	8007580 <_vfiprintf_r+0x34>
 800757c:	692b      	ldr	r3, [r5, #16]
 800757e:	b99b      	cbnz	r3, 80075a8 <_vfiprintf_r+0x5c>
 8007580:	4629      	mov	r1, r5
 8007582:	4630      	mov	r0, r6
 8007584:	f000 fb70 	bl	8007c68 <__swsetup_r>
 8007588:	b170      	cbz	r0, 80075a8 <_vfiprintf_r+0x5c>
 800758a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800758c:	07dc      	lsls	r4, r3, #31
 800758e:	d504      	bpl.n	800759a <_vfiprintf_r+0x4e>
 8007590:	f04f 30ff 	mov.w	r0, #4294967295
 8007594:	b01d      	add	sp, #116	@ 0x74
 8007596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800759a:	89ab      	ldrh	r3, [r5, #12]
 800759c:	0598      	lsls	r0, r3, #22
 800759e:	d4f7      	bmi.n	8007590 <_vfiprintf_r+0x44>
 80075a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075a2:	f7ff feaf 	bl	8007304 <__retarget_lock_release_recursive>
 80075a6:	e7f3      	b.n	8007590 <_vfiprintf_r+0x44>
 80075a8:	2300      	movs	r3, #0
 80075aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80075ac:	2320      	movs	r3, #32
 80075ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80075b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80075b6:	2330      	movs	r3, #48	@ 0x30
 80075b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007768 <_vfiprintf_r+0x21c>
 80075bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80075c0:	f04f 0901 	mov.w	r9, #1
 80075c4:	4623      	mov	r3, r4
 80075c6:	469a      	mov	sl, r3
 80075c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075cc:	b10a      	cbz	r2, 80075d2 <_vfiprintf_r+0x86>
 80075ce:	2a25      	cmp	r2, #37	@ 0x25
 80075d0:	d1f9      	bne.n	80075c6 <_vfiprintf_r+0x7a>
 80075d2:	ebba 0b04 	subs.w	fp, sl, r4
 80075d6:	d00b      	beq.n	80075f0 <_vfiprintf_r+0xa4>
 80075d8:	465b      	mov	r3, fp
 80075da:	4622      	mov	r2, r4
 80075dc:	4629      	mov	r1, r5
 80075de:	4630      	mov	r0, r6
 80075e0:	f7ff ffa1 	bl	8007526 <__sfputs_r>
 80075e4:	3001      	adds	r0, #1
 80075e6:	f000 80a7 	beq.w	8007738 <_vfiprintf_r+0x1ec>
 80075ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075ec:	445a      	add	r2, fp
 80075ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80075f0:	f89a 3000 	ldrb.w	r3, [sl]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f000 809f 	beq.w	8007738 <_vfiprintf_r+0x1ec>
 80075fa:	2300      	movs	r3, #0
 80075fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007600:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007604:	f10a 0a01 	add.w	sl, sl, #1
 8007608:	9304      	str	r3, [sp, #16]
 800760a:	9307      	str	r3, [sp, #28]
 800760c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007610:	931a      	str	r3, [sp, #104]	@ 0x68
 8007612:	4654      	mov	r4, sl
 8007614:	2205      	movs	r2, #5
 8007616:	f814 1b01 	ldrb.w	r1, [r4], #1
 800761a:	4853      	ldr	r0, [pc, #332]	@ (8007768 <_vfiprintf_r+0x21c>)
 800761c:	f7f8 fe60 	bl	80002e0 <memchr>
 8007620:	9a04      	ldr	r2, [sp, #16]
 8007622:	b9d8      	cbnz	r0, 800765c <_vfiprintf_r+0x110>
 8007624:	06d1      	lsls	r1, r2, #27
 8007626:	bf44      	itt	mi
 8007628:	2320      	movmi	r3, #32
 800762a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800762e:	0713      	lsls	r3, r2, #28
 8007630:	bf44      	itt	mi
 8007632:	232b      	movmi	r3, #43	@ 0x2b
 8007634:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007638:	f89a 3000 	ldrb.w	r3, [sl]
 800763c:	2b2a      	cmp	r3, #42	@ 0x2a
 800763e:	d015      	beq.n	800766c <_vfiprintf_r+0x120>
 8007640:	9a07      	ldr	r2, [sp, #28]
 8007642:	4654      	mov	r4, sl
 8007644:	2000      	movs	r0, #0
 8007646:	f04f 0c0a 	mov.w	ip, #10
 800764a:	4621      	mov	r1, r4
 800764c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007650:	3b30      	subs	r3, #48	@ 0x30
 8007652:	2b09      	cmp	r3, #9
 8007654:	d94b      	bls.n	80076ee <_vfiprintf_r+0x1a2>
 8007656:	b1b0      	cbz	r0, 8007686 <_vfiprintf_r+0x13a>
 8007658:	9207      	str	r2, [sp, #28]
 800765a:	e014      	b.n	8007686 <_vfiprintf_r+0x13a>
 800765c:	eba0 0308 	sub.w	r3, r0, r8
 8007660:	fa09 f303 	lsl.w	r3, r9, r3
 8007664:	4313      	orrs	r3, r2
 8007666:	9304      	str	r3, [sp, #16]
 8007668:	46a2      	mov	sl, r4
 800766a:	e7d2      	b.n	8007612 <_vfiprintf_r+0xc6>
 800766c:	9b03      	ldr	r3, [sp, #12]
 800766e:	1d19      	adds	r1, r3, #4
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	9103      	str	r1, [sp, #12]
 8007674:	2b00      	cmp	r3, #0
 8007676:	bfbb      	ittet	lt
 8007678:	425b      	neglt	r3, r3
 800767a:	f042 0202 	orrlt.w	r2, r2, #2
 800767e:	9307      	strge	r3, [sp, #28]
 8007680:	9307      	strlt	r3, [sp, #28]
 8007682:	bfb8      	it	lt
 8007684:	9204      	strlt	r2, [sp, #16]
 8007686:	7823      	ldrb	r3, [r4, #0]
 8007688:	2b2e      	cmp	r3, #46	@ 0x2e
 800768a:	d10a      	bne.n	80076a2 <_vfiprintf_r+0x156>
 800768c:	7863      	ldrb	r3, [r4, #1]
 800768e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007690:	d132      	bne.n	80076f8 <_vfiprintf_r+0x1ac>
 8007692:	9b03      	ldr	r3, [sp, #12]
 8007694:	1d1a      	adds	r2, r3, #4
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	9203      	str	r2, [sp, #12]
 800769a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800769e:	3402      	adds	r4, #2
 80076a0:	9305      	str	r3, [sp, #20]
 80076a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007778 <_vfiprintf_r+0x22c>
 80076a6:	7821      	ldrb	r1, [r4, #0]
 80076a8:	2203      	movs	r2, #3
 80076aa:	4650      	mov	r0, sl
 80076ac:	f7f8 fe18 	bl	80002e0 <memchr>
 80076b0:	b138      	cbz	r0, 80076c2 <_vfiprintf_r+0x176>
 80076b2:	9b04      	ldr	r3, [sp, #16]
 80076b4:	eba0 000a 	sub.w	r0, r0, sl
 80076b8:	2240      	movs	r2, #64	@ 0x40
 80076ba:	4082      	lsls	r2, r0
 80076bc:	4313      	orrs	r3, r2
 80076be:	3401      	adds	r4, #1
 80076c0:	9304      	str	r3, [sp, #16]
 80076c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076c6:	4829      	ldr	r0, [pc, #164]	@ (800776c <_vfiprintf_r+0x220>)
 80076c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80076cc:	2206      	movs	r2, #6
 80076ce:	f7f8 fe07 	bl	80002e0 <memchr>
 80076d2:	2800      	cmp	r0, #0
 80076d4:	d03f      	beq.n	8007756 <_vfiprintf_r+0x20a>
 80076d6:	4b26      	ldr	r3, [pc, #152]	@ (8007770 <_vfiprintf_r+0x224>)
 80076d8:	bb1b      	cbnz	r3, 8007722 <_vfiprintf_r+0x1d6>
 80076da:	9b03      	ldr	r3, [sp, #12]
 80076dc:	3307      	adds	r3, #7
 80076de:	f023 0307 	bic.w	r3, r3, #7
 80076e2:	3308      	adds	r3, #8
 80076e4:	9303      	str	r3, [sp, #12]
 80076e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076e8:	443b      	add	r3, r7
 80076ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80076ec:	e76a      	b.n	80075c4 <_vfiprintf_r+0x78>
 80076ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80076f2:	460c      	mov	r4, r1
 80076f4:	2001      	movs	r0, #1
 80076f6:	e7a8      	b.n	800764a <_vfiprintf_r+0xfe>
 80076f8:	2300      	movs	r3, #0
 80076fa:	3401      	adds	r4, #1
 80076fc:	9305      	str	r3, [sp, #20]
 80076fe:	4619      	mov	r1, r3
 8007700:	f04f 0c0a 	mov.w	ip, #10
 8007704:	4620      	mov	r0, r4
 8007706:	f810 2b01 	ldrb.w	r2, [r0], #1
 800770a:	3a30      	subs	r2, #48	@ 0x30
 800770c:	2a09      	cmp	r2, #9
 800770e:	d903      	bls.n	8007718 <_vfiprintf_r+0x1cc>
 8007710:	2b00      	cmp	r3, #0
 8007712:	d0c6      	beq.n	80076a2 <_vfiprintf_r+0x156>
 8007714:	9105      	str	r1, [sp, #20]
 8007716:	e7c4      	b.n	80076a2 <_vfiprintf_r+0x156>
 8007718:	fb0c 2101 	mla	r1, ip, r1, r2
 800771c:	4604      	mov	r4, r0
 800771e:	2301      	movs	r3, #1
 8007720:	e7f0      	b.n	8007704 <_vfiprintf_r+0x1b8>
 8007722:	ab03      	add	r3, sp, #12
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	462a      	mov	r2, r5
 8007728:	4b12      	ldr	r3, [pc, #72]	@ (8007774 <_vfiprintf_r+0x228>)
 800772a:	a904      	add	r1, sp, #16
 800772c:	4630      	mov	r0, r6
 800772e:	f3af 8000 	nop.w
 8007732:	4607      	mov	r7, r0
 8007734:	1c78      	adds	r0, r7, #1
 8007736:	d1d6      	bne.n	80076e6 <_vfiprintf_r+0x19a>
 8007738:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800773a:	07d9      	lsls	r1, r3, #31
 800773c:	d405      	bmi.n	800774a <_vfiprintf_r+0x1fe>
 800773e:	89ab      	ldrh	r3, [r5, #12]
 8007740:	059a      	lsls	r2, r3, #22
 8007742:	d402      	bmi.n	800774a <_vfiprintf_r+0x1fe>
 8007744:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007746:	f7ff fddd 	bl	8007304 <__retarget_lock_release_recursive>
 800774a:	89ab      	ldrh	r3, [r5, #12]
 800774c:	065b      	lsls	r3, r3, #25
 800774e:	f53f af1f 	bmi.w	8007590 <_vfiprintf_r+0x44>
 8007752:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007754:	e71e      	b.n	8007594 <_vfiprintf_r+0x48>
 8007756:	ab03      	add	r3, sp, #12
 8007758:	9300      	str	r3, [sp, #0]
 800775a:	462a      	mov	r2, r5
 800775c:	4b05      	ldr	r3, [pc, #20]	@ (8007774 <_vfiprintf_r+0x228>)
 800775e:	a904      	add	r1, sp, #16
 8007760:	4630      	mov	r0, r6
 8007762:	f000 f879 	bl	8007858 <_printf_i>
 8007766:	e7e4      	b.n	8007732 <_vfiprintf_r+0x1e6>
 8007768:	08008078 	.word	0x08008078
 800776c:	08008082 	.word	0x08008082
 8007770:	00000000 	.word	0x00000000
 8007774:	08007527 	.word	0x08007527
 8007778:	0800807e 	.word	0x0800807e

0800777c <_printf_common>:
 800777c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007780:	4616      	mov	r6, r2
 8007782:	4698      	mov	r8, r3
 8007784:	688a      	ldr	r2, [r1, #8]
 8007786:	690b      	ldr	r3, [r1, #16]
 8007788:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800778c:	4293      	cmp	r3, r2
 800778e:	bfb8      	it	lt
 8007790:	4613      	movlt	r3, r2
 8007792:	6033      	str	r3, [r6, #0]
 8007794:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007798:	4607      	mov	r7, r0
 800779a:	460c      	mov	r4, r1
 800779c:	b10a      	cbz	r2, 80077a2 <_printf_common+0x26>
 800779e:	3301      	adds	r3, #1
 80077a0:	6033      	str	r3, [r6, #0]
 80077a2:	6823      	ldr	r3, [r4, #0]
 80077a4:	0699      	lsls	r1, r3, #26
 80077a6:	bf42      	ittt	mi
 80077a8:	6833      	ldrmi	r3, [r6, #0]
 80077aa:	3302      	addmi	r3, #2
 80077ac:	6033      	strmi	r3, [r6, #0]
 80077ae:	6825      	ldr	r5, [r4, #0]
 80077b0:	f015 0506 	ands.w	r5, r5, #6
 80077b4:	d106      	bne.n	80077c4 <_printf_common+0x48>
 80077b6:	f104 0a19 	add.w	sl, r4, #25
 80077ba:	68e3      	ldr	r3, [r4, #12]
 80077bc:	6832      	ldr	r2, [r6, #0]
 80077be:	1a9b      	subs	r3, r3, r2
 80077c0:	42ab      	cmp	r3, r5
 80077c2:	dc26      	bgt.n	8007812 <_printf_common+0x96>
 80077c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80077c8:	6822      	ldr	r2, [r4, #0]
 80077ca:	3b00      	subs	r3, #0
 80077cc:	bf18      	it	ne
 80077ce:	2301      	movne	r3, #1
 80077d0:	0692      	lsls	r2, r2, #26
 80077d2:	d42b      	bmi.n	800782c <_printf_common+0xb0>
 80077d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80077d8:	4641      	mov	r1, r8
 80077da:	4638      	mov	r0, r7
 80077dc:	47c8      	blx	r9
 80077de:	3001      	adds	r0, #1
 80077e0:	d01e      	beq.n	8007820 <_printf_common+0xa4>
 80077e2:	6823      	ldr	r3, [r4, #0]
 80077e4:	6922      	ldr	r2, [r4, #16]
 80077e6:	f003 0306 	and.w	r3, r3, #6
 80077ea:	2b04      	cmp	r3, #4
 80077ec:	bf02      	ittt	eq
 80077ee:	68e5      	ldreq	r5, [r4, #12]
 80077f0:	6833      	ldreq	r3, [r6, #0]
 80077f2:	1aed      	subeq	r5, r5, r3
 80077f4:	68a3      	ldr	r3, [r4, #8]
 80077f6:	bf0c      	ite	eq
 80077f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077fc:	2500      	movne	r5, #0
 80077fe:	4293      	cmp	r3, r2
 8007800:	bfc4      	itt	gt
 8007802:	1a9b      	subgt	r3, r3, r2
 8007804:	18ed      	addgt	r5, r5, r3
 8007806:	2600      	movs	r6, #0
 8007808:	341a      	adds	r4, #26
 800780a:	42b5      	cmp	r5, r6
 800780c:	d11a      	bne.n	8007844 <_printf_common+0xc8>
 800780e:	2000      	movs	r0, #0
 8007810:	e008      	b.n	8007824 <_printf_common+0xa8>
 8007812:	2301      	movs	r3, #1
 8007814:	4652      	mov	r2, sl
 8007816:	4641      	mov	r1, r8
 8007818:	4638      	mov	r0, r7
 800781a:	47c8      	blx	r9
 800781c:	3001      	adds	r0, #1
 800781e:	d103      	bne.n	8007828 <_printf_common+0xac>
 8007820:	f04f 30ff 	mov.w	r0, #4294967295
 8007824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007828:	3501      	adds	r5, #1
 800782a:	e7c6      	b.n	80077ba <_printf_common+0x3e>
 800782c:	18e1      	adds	r1, r4, r3
 800782e:	1c5a      	adds	r2, r3, #1
 8007830:	2030      	movs	r0, #48	@ 0x30
 8007832:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007836:	4422      	add	r2, r4
 8007838:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800783c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007840:	3302      	adds	r3, #2
 8007842:	e7c7      	b.n	80077d4 <_printf_common+0x58>
 8007844:	2301      	movs	r3, #1
 8007846:	4622      	mov	r2, r4
 8007848:	4641      	mov	r1, r8
 800784a:	4638      	mov	r0, r7
 800784c:	47c8      	blx	r9
 800784e:	3001      	adds	r0, #1
 8007850:	d0e6      	beq.n	8007820 <_printf_common+0xa4>
 8007852:	3601      	adds	r6, #1
 8007854:	e7d9      	b.n	800780a <_printf_common+0x8e>
	...

08007858 <_printf_i>:
 8007858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800785c:	7e0f      	ldrb	r7, [r1, #24]
 800785e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007860:	2f78      	cmp	r7, #120	@ 0x78
 8007862:	4691      	mov	r9, r2
 8007864:	4680      	mov	r8, r0
 8007866:	460c      	mov	r4, r1
 8007868:	469a      	mov	sl, r3
 800786a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800786e:	d807      	bhi.n	8007880 <_printf_i+0x28>
 8007870:	2f62      	cmp	r7, #98	@ 0x62
 8007872:	d80a      	bhi.n	800788a <_printf_i+0x32>
 8007874:	2f00      	cmp	r7, #0
 8007876:	f000 80d1 	beq.w	8007a1c <_printf_i+0x1c4>
 800787a:	2f58      	cmp	r7, #88	@ 0x58
 800787c:	f000 80b8 	beq.w	80079f0 <_printf_i+0x198>
 8007880:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007884:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007888:	e03a      	b.n	8007900 <_printf_i+0xa8>
 800788a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800788e:	2b15      	cmp	r3, #21
 8007890:	d8f6      	bhi.n	8007880 <_printf_i+0x28>
 8007892:	a101      	add	r1, pc, #4	@ (adr r1, 8007898 <_printf_i+0x40>)
 8007894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007898:	080078f1 	.word	0x080078f1
 800789c:	08007905 	.word	0x08007905
 80078a0:	08007881 	.word	0x08007881
 80078a4:	08007881 	.word	0x08007881
 80078a8:	08007881 	.word	0x08007881
 80078ac:	08007881 	.word	0x08007881
 80078b0:	08007905 	.word	0x08007905
 80078b4:	08007881 	.word	0x08007881
 80078b8:	08007881 	.word	0x08007881
 80078bc:	08007881 	.word	0x08007881
 80078c0:	08007881 	.word	0x08007881
 80078c4:	08007a03 	.word	0x08007a03
 80078c8:	0800792f 	.word	0x0800792f
 80078cc:	080079bd 	.word	0x080079bd
 80078d0:	08007881 	.word	0x08007881
 80078d4:	08007881 	.word	0x08007881
 80078d8:	08007a25 	.word	0x08007a25
 80078dc:	08007881 	.word	0x08007881
 80078e0:	0800792f 	.word	0x0800792f
 80078e4:	08007881 	.word	0x08007881
 80078e8:	08007881 	.word	0x08007881
 80078ec:	080079c5 	.word	0x080079c5
 80078f0:	6833      	ldr	r3, [r6, #0]
 80078f2:	1d1a      	adds	r2, r3, #4
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	6032      	str	r2, [r6, #0]
 80078f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007900:	2301      	movs	r3, #1
 8007902:	e09c      	b.n	8007a3e <_printf_i+0x1e6>
 8007904:	6833      	ldr	r3, [r6, #0]
 8007906:	6820      	ldr	r0, [r4, #0]
 8007908:	1d19      	adds	r1, r3, #4
 800790a:	6031      	str	r1, [r6, #0]
 800790c:	0606      	lsls	r6, r0, #24
 800790e:	d501      	bpl.n	8007914 <_printf_i+0xbc>
 8007910:	681d      	ldr	r5, [r3, #0]
 8007912:	e003      	b.n	800791c <_printf_i+0xc4>
 8007914:	0645      	lsls	r5, r0, #25
 8007916:	d5fb      	bpl.n	8007910 <_printf_i+0xb8>
 8007918:	f9b3 5000 	ldrsh.w	r5, [r3]
 800791c:	2d00      	cmp	r5, #0
 800791e:	da03      	bge.n	8007928 <_printf_i+0xd0>
 8007920:	232d      	movs	r3, #45	@ 0x2d
 8007922:	426d      	negs	r5, r5
 8007924:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007928:	4858      	ldr	r0, [pc, #352]	@ (8007a8c <_printf_i+0x234>)
 800792a:	230a      	movs	r3, #10
 800792c:	e011      	b.n	8007952 <_printf_i+0xfa>
 800792e:	6821      	ldr	r1, [r4, #0]
 8007930:	6833      	ldr	r3, [r6, #0]
 8007932:	0608      	lsls	r0, r1, #24
 8007934:	f853 5b04 	ldr.w	r5, [r3], #4
 8007938:	d402      	bmi.n	8007940 <_printf_i+0xe8>
 800793a:	0649      	lsls	r1, r1, #25
 800793c:	bf48      	it	mi
 800793e:	b2ad      	uxthmi	r5, r5
 8007940:	2f6f      	cmp	r7, #111	@ 0x6f
 8007942:	4852      	ldr	r0, [pc, #328]	@ (8007a8c <_printf_i+0x234>)
 8007944:	6033      	str	r3, [r6, #0]
 8007946:	bf14      	ite	ne
 8007948:	230a      	movne	r3, #10
 800794a:	2308      	moveq	r3, #8
 800794c:	2100      	movs	r1, #0
 800794e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007952:	6866      	ldr	r6, [r4, #4]
 8007954:	60a6      	str	r6, [r4, #8]
 8007956:	2e00      	cmp	r6, #0
 8007958:	db05      	blt.n	8007966 <_printf_i+0x10e>
 800795a:	6821      	ldr	r1, [r4, #0]
 800795c:	432e      	orrs	r6, r5
 800795e:	f021 0104 	bic.w	r1, r1, #4
 8007962:	6021      	str	r1, [r4, #0]
 8007964:	d04b      	beq.n	80079fe <_printf_i+0x1a6>
 8007966:	4616      	mov	r6, r2
 8007968:	fbb5 f1f3 	udiv	r1, r5, r3
 800796c:	fb03 5711 	mls	r7, r3, r1, r5
 8007970:	5dc7      	ldrb	r7, [r0, r7]
 8007972:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007976:	462f      	mov	r7, r5
 8007978:	42bb      	cmp	r3, r7
 800797a:	460d      	mov	r5, r1
 800797c:	d9f4      	bls.n	8007968 <_printf_i+0x110>
 800797e:	2b08      	cmp	r3, #8
 8007980:	d10b      	bne.n	800799a <_printf_i+0x142>
 8007982:	6823      	ldr	r3, [r4, #0]
 8007984:	07df      	lsls	r7, r3, #31
 8007986:	d508      	bpl.n	800799a <_printf_i+0x142>
 8007988:	6923      	ldr	r3, [r4, #16]
 800798a:	6861      	ldr	r1, [r4, #4]
 800798c:	4299      	cmp	r1, r3
 800798e:	bfde      	ittt	le
 8007990:	2330      	movle	r3, #48	@ 0x30
 8007992:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007996:	f106 36ff 	addle.w	r6, r6, #4294967295
 800799a:	1b92      	subs	r2, r2, r6
 800799c:	6122      	str	r2, [r4, #16]
 800799e:	f8cd a000 	str.w	sl, [sp]
 80079a2:	464b      	mov	r3, r9
 80079a4:	aa03      	add	r2, sp, #12
 80079a6:	4621      	mov	r1, r4
 80079a8:	4640      	mov	r0, r8
 80079aa:	f7ff fee7 	bl	800777c <_printf_common>
 80079ae:	3001      	adds	r0, #1
 80079b0:	d14a      	bne.n	8007a48 <_printf_i+0x1f0>
 80079b2:	f04f 30ff 	mov.w	r0, #4294967295
 80079b6:	b004      	add	sp, #16
 80079b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079bc:	6823      	ldr	r3, [r4, #0]
 80079be:	f043 0320 	orr.w	r3, r3, #32
 80079c2:	6023      	str	r3, [r4, #0]
 80079c4:	4832      	ldr	r0, [pc, #200]	@ (8007a90 <_printf_i+0x238>)
 80079c6:	2778      	movs	r7, #120	@ 0x78
 80079c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80079cc:	6823      	ldr	r3, [r4, #0]
 80079ce:	6831      	ldr	r1, [r6, #0]
 80079d0:	061f      	lsls	r7, r3, #24
 80079d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80079d6:	d402      	bmi.n	80079de <_printf_i+0x186>
 80079d8:	065f      	lsls	r7, r3, #25
 80079da:	bf48      	it	mi
 80079dc:	b2ad      	uxthmi	r5, r5
 80079de:	6031      	str	r1, [r6, #0]
 80079e0:	07d9      	lsls	r1, r3, #31
 80079e2:	bf44      	itt	mi
 80079e4:	f043 0320 	orrmi.w	r3, r3, #32
 80079e8:	6023      	strmi	r3, [r4, #0]
 80079ea:	b11d      	cbz	r5, 80079f4 <_printf_i+0x19c>
 80079ec:	2310      	movs	r3, #16
 80079ee:	e7ad      	b.n	800794c <_printf_i+0xf4>
 80079f0:	4826      	ldr	r0, [pc, #152]	@ (8007a8c <_printf_i+0x234>)
 80079f2:	e7e9      	b.n	80079c8 <_printf_i+0x170>
 80079f4:	6823      	ldr	r3, [r4, #0]
 80079f6:	f023 0320 	bic.w	r3, r3, #32
 80079fa:	6023      	str	r3, [r4, #0]
 80079fc:	e7f6      	b.n	80079ec <_printf_i+0x194>
 80079fe:	4616      	mov	r6, r2
 8007a00:	e7bd      	b.n	800797e <_printf_i+0x126>
 8007a02:	6833      	ldr	r3, [r6, #0]
 8007a04:	6825      	ldr	r5, [r4, #0]
 8007a06:	6961      	ldr	r1, [r4, #20]
 8007a08:	1d18      	adds	r0, r3, #4
 8007a0a:	6030      	str	r0, [r6, #0]
 8007a0c:	062e      	lsls	r6, r5, #24
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	d501      	bpl.n	8007a16 <_printf_i+0x1be>
 8007a12:	6019      	str	r1, [r3, #0]
 8007a14:	e002      	b.n	8007a1c <_printf_i+0x1c4>
 8007a16:	0668      	lsls	r0, r5, #25
 8007a18:	d5fb      	bpl.n	8007a12 <_printf_i+0x1ba>
 8007a1a:	8019      	strh	r1, [r3, #0]
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	6123      	str	r3, [r4, #16]
 8007a20:	4616      	mov	r6, r2
 8007a22:	e7bc      	b.n	800799e <_printf_i+0x146>
 8007a24:	6833      	ldr	r3, [r6, #0]
 8007a26:	1d1a      	adds	r2, r3, #4
 8007a28:	6032      	str	r2, [r6, #0]
 8007a2a:	681e      	ldr	r6, [r3, #0]
 8007a2c:	6862      	ldr	r2, [r4, #4]
 8007a2e:	2100      	movs	r1, #0
 8007a30:	4630      	mov	r0, r6
 8007a32:	f7f8 fc55 	bl	80002e0 <memchr>
 8007a36:	b108      	cbz	r0, 8007a3c <_printf_i+0x1e4>
 8007a38:	1b80      	subs	r0, r0, r6
 8007a3a:	6060      	str	r0, [r4, #4]
 8007a3c:	6863      	ldr	r3, [r4, #4]
 8007a3e:	6123      	str	r3, [r4, #16]
 8007a40:	2300      	movs	r3, #0
 8007a42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a46:	e7aa      	b.n	800799e <_printf_i+0x146>
 8007a48:	6923      	ldr	r3, [r4, #16]
 8007a4a:	4632      	mov	r2, r6
 8007a4c:	4649      	mov	r1, r9
 8007a4e:	4640      	mov	r0, r8
 8007a50:	47d0      	blx	sl
 8007a52:	3001      	adds	r0, #1
 8007a54:	d0ad      	beq.n	80079b2 <_printf_i+0x15a>
 8007a56:	6823      	ldr	r3, [r4, #0]
 8007a58:	079b      	lsls	r3, r3, #30
 8007a5a:	d413      	bmi.n	8007a84 <_printf_i+0x22c>
 8007a5c:	68e0      	ldr	r0, [r4, #12]
 8007a5e:	9b03      	ldr	r3, [sp, #12]
 8007a60:	4298      	cmp	r0, r3
 8007a62:	bfb8      	it	lt
 8007a64:	4618      	movlt	r0, r3
 8007a66:	e7a6      	b.n	80079b6 <_printf_i+0x15e>
 8007a68:	2301      	movs	r3, #1
 8007a6a:	4632      	mov	r2, r6
 8007a6c:	4649      	mov	r1, r9
 8007a6e:	4640      	mov	r0, r8
 8007a70:	47d0      	blx	sl
 8007a72:	3001      	adds	r0, #1
 8007a74:	d09d      	beq.n	80079b2 <_printf_i+0x15a>
 8007a76:	3501      	adds	r5, #1
 8007a78:	68e3      	ldr	r3, [r4, #12]
 8007a7a:	9903      	ldr	r1, [sp, #12]
 8007a7c:	1a5b      	subs	r3, r3, r1
 8007a7e:	42ab      	cmp	r3, r5
 8007a80:	dcf2      	bgt.n	8007a68 <_printf_i+0x210>
 8007a82:	e7eb      	b.n	8007a5c <_printf_i+0x204>
 8007a84:	2500      	movs	r5, #0
 8007a86:	f104 0619 	add.w	r6, r4, #25
 8007a8a:	e7f5      	b.n	8007a78 <_printf_i+0x220>
 8007a8c:	08008089 	.word	0x08008089
 8007a90:	0800809a 	.word	0x0800809a

08007a94 <__sflush_r>:
 8007a94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a9c:	0716      	lsls	r6, r2, #28
 8007a9e:	4605      	mov	r5, r0
 8007aa0:	460c      	mov	r4, r1
 8007aa2:	d454      	bmi.n	8007b4e <__sflush_r+0xba>
 8007aa4:	684b      	ldr	r3, [r1, #4]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	dc02      	bgt.n	8007ab0 <__sflush_r+0x1c>
 8007aaa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	dd48      	ble.n	8007b42 <__sflush_r+0xae>
 8007ab0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ab2:	2e00      	cmp	r6, #0
 8007ab4:	d045      	beq.n	8007b42 <__sflush_r+0xae>
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007abc:	682f      	ldr	r7, [r5, #0]
 8007abe:	6a21      	ldr	r1, [r4, #32]
 8007ac0:	602b      	str	r3, [r5, #0]
 8007ac2:	d030      	beq.n	8007b26 <__sflush_r+0x92>
 8007ac4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007ac6:	89a3      	ldrh	r3, [r4, #12]
 8007ac8:	0759      	lsls	r1, r3, #29
 8007aca:	d505      	bpl.n	8007ad8 <__sflush_r+0x44>
 8007acc:	6863      	ldr	r3, [r4, #4]
 8007ace:	1ad2      	subs	r2, r2, r3
 8007ad0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007ad2:	b10b      	cbz	r3, 8007ad8 <__sflush_r+0x44>
 8007ad4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007ad6:	1ad2      	subs	r2, r2, r3
 8007ad8:	2300      	movs	r3, #0
 8007ada:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007adc:	6a21      	ldr	r1, [r4, #32]
 8007ade:	4628      	mov	r0, r5
 8007ae0:	47b0      	blx	r6
 8007ae2:	1c43      	adds	r3, r0, #1
 8007ae4:	89a3      	ldrh	r3, [r4, #12]
 8007ae6:	d106      	bne.n	8007af6 <__sflush_r+0x62>
 8007ae8:	6829      	ldr	r1, [r5, #0]
 8007aea:	291d      	cmp	r1, #29
 8007aec:	d82b      	bhi.n	8007b46 <__sflush_r+0xb2>
 8007aee:	4a2a      	ldr	r2, [pc, #168]	@ (8007b98 <__sflush_r+0x104>)
 8007af0:	40ca      	lsrs	r2, r1
 8007af2:	07d6      	lsls	r6, r2, #31
 8007af4:	d527      	bpl.n	8007b46 <__sflush_r+0xb2>
 8007af6:	2200      	movs	r2, #0
 8007af8:	6062      	str	r2, [r4, #4]
 8007afa:	04d9      	lsls	r1, r3, #19
 8007afc:	6922      	ldr	r2, [r4, #16]
 8007afe:	6022      	str	r2, [r4, #0]
 8007b00:	d504      	bpl.n	8007b0c <__sflush_r+0x78>
 8007b02:	1c42      	adds	r2, r0, #1
 8007b04:	d101      	bne.n	8007b0a <__sflush_r+0x76>
 8007b06:	682b      	ldr	r3, [r5, #0]
 8007b08:	b903      	cbnz	r3, 8007b0c <__sflush_r+0x78>
 8007b0a:	6560      	str	r0, [r4, #84]	@ 0x54
 8007b0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b0e:	602f      	str	r7, [r5, #0]
 8007b10:	b1b9      	cbz	r1, 8007b42 <__sflush_r+0xae>
 8007b12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b16:	4299      	cmp	r1, r3
 8007b18:	d002      	beq.n	8007b20 <__sflush_r+0x8c>
 8007b1a:	4628      	mov	r0, r5
 8007b1c:	f7ff fbf4 	bl	8007308 <_free_r>
 8007b20:	2300      	movs	r3, #0
 8007b22:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b24:	e00d      	b.n	8007b42 <__sflush_r+0xae>
 8007b26:	2301      	movs	r3, #1
 8007b28:	4628      	mov	r0, r5
 8007b2a:	47b0      	blx	r6
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	1c50      	adds	r0, r2, #1
 8007b30:	d1c9      	bne.n	8007ac6 <__sflush_r+0x32>
 8007b32:	682b      	ldr	r3, [r5, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d0c6      	beq.n	8007ac6 <__sflush_r+0x32>
 8007b38:	2b1d      	cmp	r3, #29
 8007b3a:	d001      	beq.n	8007b40 <__sflush_r+0xac>
 8007b3c:	2b16      	cmp	r3, #22
 8007b3e:	d11e      	bne.n	8007b7e <__sflush_r+0xea>
 8007b40:	602f      	str	r7, [r5, #0]
 8007b42:	2000      	movs	r0, #0
 8007b44:	e022      	b.n	8007b8c <__sflush_r+0xf8>
 8007b46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b4a:	b21b      	sxth	r3, r3
 8007b4c:	e01b      	b.n	8007b86 <__sflush_r+0xf2>
 8007b4e:	690f      	ldr	r7, [r1, #16]
 8007b50:	2f00      	cmp	r7, #0
 8007b52:	d0f6      	beq.n	8007b42 <__sflush_r+0xae>
 8007b54:	0793      	lsls	r3, r2, #30
 8007b56:	680e      	ldr	r6, [r1, #0]
 8007b58:	bf08      	it	eq
 8007b5a:	694b      	ldreq	r3, [r1, #20]
 8007b5c:	600f      	str	r7, [r1, #0]
 8007b5e:	bf18      	it	ne
 8007b60:	2300      	movne	r3, #0
 8007b62:	eba6 0807 	sub.w	r8, r6, r7
 8007b66:	608b      	str	r3, [r1, #8]
 8007b68:	f1b8 0f00 	cmp.w	r8, #0
 8007b6c:	dde9      	ble.n	8007b42 <__sflush_r+0xae>
 8007b6e:	6a21      	ldr	r1, [r4, #32]
 8007b70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007b72:	4643      	mov	r3, r8
 8007b74:	463a      	mov	r2, r7
 8007b76:	4628      	mov	r0, r5
 8007b78:	47b0      	blx	r6
 8007b7a:	2800      	cmp	r0, #0
 8007b7c:	dc08      	bgt.n	8007b90 <__sflush_r+0xfc>
 8007b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b86:	81a3      	strh	r3, [r4, #12]
 8007b88:	f04f 30ff 	mov.w	r0, #4294967295
 8007b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b90:	4407      	add	r7, r0
 8007b92:	eba8 0800 	sub.w	r8, r8, r0
 8007b96:	e7e7      	b.n	8007b68 <__sflush_r+0xd4>
 8007b98:	20400001 	.word	0x20400001

08007b9c <_fflush_r>:
 8007b9c:	b538      	push	{r3, r4, r5, lr}
 8007b9e:	690b      	ldr	r3, [r1, #16]
 8007ba0:	4605      	mov	r5, r0
 8007ba2:	460c      	mov	r4, r1
 8007ba4:	b913      	cbnz	r3, 8007bac <_fflush_r+0x10>
 8007ba6:	2500      	movs	r5, #0
 8007ba8:	4628      	mov	r0, r5
 8007baa:	bd38      	pop	{r3, r4, r5, pc}
 8007bac:	b118      	cbz	r0, 8007bb6 <_fflush_r+0x1a>
 8007bae:	6a03      	ldr	r3, [r0, #32]
 8007bb0:	b90b      	cbnz	r3, 8007bb6 <_fflush_r+0x1a>
 8007bb2:	f7ff faa1 	bl	80070f8 <__sinit>
 8007bb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d0f3      	beq.n	8007ba6 <_fflush_r+0xa>
 8007bbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007bc0:	07d0      	lsls	r0, r2, #31
 8007bc2:	d404      	bmi.n	8007bce <_fflush_r+0x32>
 8007bc4:	0599      	lsls	r1, r3, #22
 8007bc6:	d402      	bmi.n	8007bce <_fflush_r+0x32>
 8007bc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007bca:	f7ff fb9a 	bl	8007302 <__retarget_lock_acquire_recursive>
 8007bce:	4628      	mov	r0, r5
 8007bd0:	4621      	mov	r1, r4
 8007bd2:	f7ff ff5f 	bl	8007a94 <__sflush_r>
 8007bd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007bd8:	07da      	lsls	r2, r3, #31
 8007bda:	4605      	mov	r5, r0
 8007bdc:	d4e4      	bmi.n	8007ba8 <_fflush_r+0xc>
 8007bde:	89a3      	ldrh	r3, [r4, #12]
 8007be0:	059b      	lsls	r3, r3, #22
 8007be2:	d4e1      	bmi.n	8007ba8 <_fflush_r+0xc>
 8007be4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007be6:	f7ff fb8d 	bl	8007304 <__retarget_lock_release_recursive>
 8007bea:	e7dd      	b.n	8007ba8 <_fflush_r+0xc>

08007bec <__swbuf_r>:
 8007bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bee:	460e      	mov	r6, r1
 8007bf0:	4614      	mov	r4, r2
 8007bf2:	4605      	mov	r5, r0
 8007bf4:	b118      	cbz	r0, 8007bfe <__swbuf_r+0x12>
 8007bf6:	6a03      	ldr	r3, [r0, #32]
 8007bf8:	b90b      	cbnz	r3, 8007bfe <__swbuf_r+0x12>
 8007bfa:	f7ff fa7d 	bl	80070f8 <__sinit>
 8007bfe:	69a3      	ldr	r3, [r4, #24]
 8007c00:	60a3      	str	r3, [r4, #8]
 8007c02:	89a3      	ldrh	r3, [r4, #12]
 8007c04:	071a      	lsls	r2, r3, #28
 8007c06:	d501      	bpl.n	8007c0c <__swbuf_r+0x20>
 8007c08:	6923      	ldr	r3, [r4, #16]
 8007c0a:	b943      	cbnz	r3, 8007c1e <__swbuf_r+0x32>
 8007c0c:	4621      	mov	r1, r4
 8007c0e:	4628      	mov	r0, r5
 8007c10:	f000 f82a 	bl	8007c68 <__swsetup_r>
 8007c14:	b118      	cbz	r0, 8007c1e <__swbuf_r+0x32>
 8007c16:	f04f 37ff 	mov.w	r7, #4294967295
 8007c1a:	4638      	mov	r0, r7
 8007c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c1e:	6823      	ldr	r3, [r4, #0]
 8007c20:	6922      	ldr	r2, [r4, #16]
 8007c22:	1a98      	subs	r0, r3, r2
 8007c24:	6963      	ldr	r3, [r4, #20]
 8007c26:	b2f6      	uxtb	r6, r6
 8007c28:	4283      	cmp	r3, r0
 8007c2a:	4637      	mov	r7, r6
 8007c2c:	dc05      	bgt.n	8007c3a <__swbuf_r+0x4e>
 8007c2e:	4621      	mov	r1, r4
 8007c30:	4628      	mov	r0, r5
 8007c32:	f7ff ffb3 	bl	8007b9c <_fflush_r>
 8007c36:	2800      	cmp	r0, #0
 8007c38:	d1ed      	bne.n	8007c16 <__swbuf_r+0x2a>
 8007c3a:	68a3      	ldr	r3, [r4, #8]
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	60a3      	str	r3, [r4, #8]
 8007c40:	6823      	ldr	r3, [r4, #0]
 8007c42:	1c5a      	adds	r2, r3, #1
 8007c44:	6022      	str	r2, [r4, #0]
 8007c46:	701e      	strb	r6, [r3, #0]
 8007c48:	6962      	ldr	r2, [r4, #20]
 8007c4a:	1c43      	adds	r3, r0, #1
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d004      	beq.n	8007c5a <__swbuf_r+0x6e>
 8007c50:	89a3      	ldrh	r3, [r4, #12]
 8007c52:	07db      	lsls	r3, r3, #31
 8007c54:	d5e1      	bpl.n	8007c1a <__swbuf_r+0x2e>
 8007c56:	2e0a      	cmp	r6, #10
 8007c58:	d1df      	bne.n	8007c1a <__swbuf_r+0x2e>
 8007c5a:	4621      	mov	r1, r4
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	f7ff ff9d 	bl	8007b9c <_fflush_r>
 8007c62:	2800      	cmp	r0, #0
 8007c64:	d0d9      	beq.n	8007c1a <__swbuf_r+0x2e>
 8007c66:	e7d6      	b.n	8007c16 <__swbuf_r+0x2a>

08007c68 <__swsetup_r>:
 8007c68:	b538      	push	{r3, r4, r5, lr}
 8007c6a:	4b29      	ldr	r3, [pc, #164]	@ (8007d10 <__swsetup_r+0xa8>)
 8007c6c:	4605      	mov	r5, r0
 8007c6e:	6818      	ldr	r0, [r3, #0]
 8007c70:	460c      	mov	r4, r1
 8007c72:	b118      	cbz	r0, 8007c7c <__swsetup_r+0x14>
 8007c74:	6a03      	ldr	r3, [r0, #32]
 8007c76:	b90b      	cbnz	r3, 8007c7c <__swsetup_r+0x14>
 8007c78:	f7ff fa3e 	bl	80070f8 <__sinit>
 8007c7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c80:	0719      	lsls	r1, r3, #28
 8007c82:	d422      	bmi.n	8007cca <__swsetup_r+0x62>
 8007c84:	06da      	lsls	r2, r3, #27
 8007c86:	d407      	bmi.n	8007c98 <__swsetup_r+0x30>
 8007c88:	2209      	movs	r2, #9
 8007c8a:	602a      	str	r2, [r5, #0]
 8007c8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c90:	81a3      	strh	r3, [r4, #12]
 8007c92:	f04f 30ff 	mov.w	r0, #4294967295
 8007c96:	e033      	b.n	8007d00 <__swsetup_r+0x98>
 8007c98:	0758      	lsls	r0, r3, #29
 8007c9a:	d512      	bpl.n	8007cc2 <__swsetup_r+0x5a>
 8007c9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c9e:	b141      	cbz	r1, 8007cb2 <__swsetup_r+0x4a>
 8007ca0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ca4:	4299      	cmp	r1, r3
 8007ca6:	d002      	beq.n	8007cae <__swsetup_r+0x46>
 8007ca8:	4628      	mov	r0, r5
 8007caa:	f7ff fb2d 	bl	8007308 <_free_r>
 8007cae:	2300      	movs	r3, #0
 8007cb0:	6363      	str	r3, [r4, #52]	@ 0x34
 8007cb2:	89a3      	ldrh	r3, [r4, #12]
 8007cb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007cb8:	81a3      	strh	r3, [r4, #12]
 8007cba:	2300      	movs	r3, #0
 8007cbc:	6063      	str	r3, [r4, #4]
 8007cbe:	6923      	ldr	r3, [r4, #16]
 8007cc0:	6023      	str	r3, [r4, #0]
 8007cc2:	89a3      	ldrh	r3, [r4, #12]
 8007cc4:	f043 0308 	orr.w	r3, r3, #8
 8007cc8:	81a3      	strh	r3, [r4, #12]
 8007cca:	6923      	ldr	r3, [r4, #16]
 8007ccc:	b94b      	cbnz	r3, 8007ce2 <__swsetup_r+0x7a>
 8007cce:	89a3      	ldrh	r3, [r4, #12]
 8007cd0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007cd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cd8:	d003      	beq.n	8007ce2 <__swsetup_r+0x7a>
 8007cda:	4621      	mov	r1, r4
 8007cdc:	4628      	mov	r0, r5
 8007cde:	f000 f84f 	bl	8007d80 <__smakebuf_r>
 8007ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ce6:	f013 0201 	ands.w	r2, r3, #1
 8007cea:	d00a      	beq.n	8007d02 <__swsetup_r+0x9a>
 8007cec:	2200      	movs	r2, #0
 8007cee:	60a2      	str	r2, [r4, #8]
 8007cf0:	6962      	ldr	r2, [r4, #20]
 8007cf2:	4252      	negs	r2, r2
 8007cf4:	61a2      	str	r2, [r4, #24]
 8007cf6:	6922      	ldr	r2, [r4, #16]
 8007cf8:	b942      	cbnz	r2, 8007d0c <__swsetup_r+0xa4>
 8007cfa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007cfe:	d1c5      	bne.n	8007c8c <__swsetup_r+0x24>
 8007d00:	bd38      	pop	{r3, r4, r5, pc}
 8007d02:	0799      	lsls	r1, r3, #30
 8007d04:	bf58      	it	pl
 8007d06:	6962      	ldrpl	r2, [r4, #20]
 8007d08:	60a2      	str	r2, [r4, #8]
 8007d0a:	e7f4      	b.n	8007cf6 <__swsetup_r+0x8e>
 8007d0c:	2000      	movs	r0, #0
 8007d0e:	e7f7      	b.n	8007d00 <__swsetup_r+0x98>
 8007d10:	24000038 	.word	0x24000038

08007d14 <_sbrk_r>:
 8007d14:	b538      	push	{r3, r4, r5, lr}
 8007d16:	4d06      	ldr	r5, [pc, #24]	@ (8007d30 <_sbrk_r+0x1c>)
 8007d18:	2300      	movs	r3, #0
 8007d1a:	4604      	mov	r4, r0
 8007d1c:	4608      	mov	r0, r1
 8007d1e:	602b      	str	r3, [r5, #0]
 8007d20:	f7f9 f8de 	bl	8000ee0 <_sbrk>
 8007d24:	1c43      	adds	r3, r0, #1
 8007d26:	d102      	bne.n	8007d2e <_sbrk_r+0x1a>
 8007d28:	682b      	ldr	r3, [r5, #0]
 8007d2a:	b103      	cbz	r3, 8007d2e <_sbrk_r+0x1a>
 8007d2c:	6023      	str	r3, [r4, #0]
 8007d2e:	bd38      	pop	{r3, r4, r5, pc}
 8007d30:	24000324 	.word	0x24000324

08007d34 <__swhatbuf_r>:
 8007d34:	b570      	push	{r4, r5, r6, lr}
 8007d36:	460c      	mov	r4, r1
 8007d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d3c:	2900      	cmp	r1, #0
 8007d3e:	b096      	sub	sp, #88	@ 0x58
 8007d40:	4615      	mov	r5, r2
 8007d42:	461e      	mov	r6, r3
 8007d44:	da0d      	bge.n	8007d62 <__swhatbuf_r+0x2e>
 8007d46:	89a3      	ldrh	r3, [r4, #12]
 8007d48:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007d4c:	f04f 0100 	mov.w	r1, #0
 8007d50:	bf14      	ite	ne
 8007d52:	2340      	movne	r3, #64	@ 0x40
 8007d54:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007d58:	2000      	movs	r0, #0
 8007d5a:	6031      	str	r1, [r6, #0]
 8007d5c:	602b      	str	r3, [r5, #0]
 8007d5e:	b016      	add	sp, #88	@ 0x58
 8007d60:	bd70      	pop	{r4, r5, r6, pc}
 8007d62:	466a      	mov	r2, sp
 8007d64:	f000 f848 	bl	8007df8 <_fstat_r>
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	dbec      	blt.n	8007d46 <__swhatbuf_r+0x12>
 8007d6c:	9901      	ldr	r1, [sp, #4]
 8007d6e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007d72:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007d76:	4259      	negs	r1, r3
 8007d78:	4159      	adcs	r1, r3
 8007d7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d7e:	e7eb      	b.n	8007d58 <__swhatbuf_r+0x24>

08007d80 <__smakebuf_r>:
 8007d80:	898b      	ldrh	r3, [r1, #12]
 8007d82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d84:	079d      	lsls	r5, r3, #30
 8007d86:	4606      	mov	r6, r0
 8007d88:	460c      	mov	r4, r1
 8007d8a:	d507      	bpl.n	8007d9c <__smakebuf_r+0x1c>
 8007d8c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007d90:	6023      	str	r3, [r4, #0]
 8007d92:	6123      	str	r3, [r4, #16]
 8007d94:	2301      	movs	r3, #1
 8007d96:	6163      	str	r3, [r4, #20]
 8007d98:	b003      	add	sp, #12
 8007d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d9c:	ab01      	add	r3, sp, #4
 8007d9e:	466a      	mov	r2, sp
 8007da0:	f7ff ffc8 	bl	8007d34 <__swhatbuf_r>
 8007da4:	9f00      	ldr	r7, [sp, #0]
 8007da6:	4605      	mov	r5, r0
 8007da8:	4639      	mov	r1, r7
 8007daa:	4630      	mov	r0, r6
 8007dac:	f7ff fb18 	bl	80073e0 <_malloc_r>
 8007db0:	b948      	cbnz	r0, 8007dc6 <__smakebuf_r+0x46>
 8007db2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007db6:	059a      	lsls	r2, r3, #22
 8007db8:	d4ee      	bmi.n	8007d98 <__smakebuf_r+0x18>
 8007dba:	f023 0303 	bic.w	r3, r3, #3
 8007dbe:	f043 0302 	orr.w	r3, r3, #2
 8007dc2:	81a3      	strh	r3, [r4, #12]
 8007dc4:	e7e2      	b.n	8007d8c <__smakebuf_r+0xc>
 8007dc6:	89a3      	ldrh	r3, [r4, #12]
 8007dc8:	6020      	str	r0, [r4, #0]
 8007dca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dce:	81a3      	strh	r3, [r4, #12]
 8007dd0:	9b01      	ldr	r3, [sp, #4]
 8007dd2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007dd6:	b15b      	cbz	r3, 8007df0 <__smakebuf_r+0x70>
 8007dd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ddc:	4630      	mov	r0, r6
 8007dde:	f000 f81d 	bl	8007e1c <_isatty_r>
 8007de2:	b128      	cbz	r0, 8007df0 <__smakebuf_r+0x70>
 8007de4:	89a3      	ldrh	r3, [r4, #12]
 8007de6:	f023 0303 	bic.w	r3, r3, #3
 8007dea:	f043 0301 	orr.w	r3, r3, #1
 8007dee:	81a3      	strh	r3, [r4, #12]
 8007df0:	89a3      	ldrh	r3, [r4, #12]
 8007df2:	431d      	orrs	r5, r3
 8007df4:	81a5      	strh	r5, [r4, #12]
 8007df6:	e7cf      	b.n	8007d98 <__smakebuf_r+0x18>

08007df8 <_fstat_r>:
 8007df8:	b538      	push	{r3, r4, r5, lr}
 8007dfa:	4d07      	ldr	r5, [pc, #28]	@ (8007e18 <_fstat_r+0x20>)
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	4604      	mov	r4, r0
 8007e00:	4608      	mov	r0, r1
 8007e02:	4611      	mov	r1, r2
 8007e04:	602b      	str	r3, [r5, #0]
 8007e06:	f7f9 f842 	bl	8000e8e <_fstat>
 8007e0a:	1c43      	adds	r3, r0, #1
 8007e0c:	d102      	bne.n	8007e14 <_fstat_r+0x1c>
 8007e0e:	682b      	ldr	r3, [r5, #0]
 8007e10:	b103      	cbz	r3, 8007e14 <_fstat_r+0x1c>
 8007e12:	6023      	str	r3, [r4, #0]
 8007e14:	bd38      	pop	{r3, r4, r5, pc}
 8007e16:	bf00      	nop
 8007e18:	24000324 	.word	0x24000324

08007e1c <_isatty_r>:
 8007e1c:	b538      	push	{r3, r4, r5, lr}
 8007e1e:	4d06      	ldr	r5, [pc, #24]	@ (8007e38 <_isatty_r+0x1c>)
 8007e20:	2300      	movs	r3, #0
 8007e22:	4604      	mov	r4, r0
 8007e24:	4608      	mov	r0, r1
 8007e26:	602b      	str	r3, [r5, #0]
 8007e28:	f7f9 f841 	bl	8000eae <_isatty>
 8007e2c:	1c43      	adds	r3, r0, #1
 8007e2e:	d102      	bne.n	8007e36 <_isatty_r+0x1a>
 8007e30:	682b      	ldr	r3, [r5, #0]
 8007e32:	b103      	cbz	r3, 8007e36 <_isatty_r+0x1a>
 8007e34:	6023      	str	r3, [r4, #0]
 8007e36:	bd38      	pop	{r3, r4, r5, pc}
 8007e38:	24000324 	.word	0x24000324

08007e3c <_init>:
 8007e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e3e:	bf00      	nop
 8007e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e42:	bc08      	pop	{r3}
 8007e44:	469e      	mov	lr, r3
 8007e46:	4770      	bx	lr

08007e48 <_fini>:
 8007e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e4a:	bf00      	nop
 8007e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e4e:	bc08      	pop	{r3}
 8007e50:	469e      	mov	lr, r3
 8007e52:	4770      	bx	lr
