
STM_to_CC1201.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095e4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018d8  08009884  08009884  0000a884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b15c  0800b15c  0000c15c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b164  0800b164  0000c164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b168  0800b168  0000c168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  24000000  0800b16c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000334  24000088  0800b1f4  0000d088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240003bc  0800b1f4  0000d3bc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d088  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015b40  00000000  00000000  0000d0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c8b  00000000  00000000  00022bf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f28  00000000  00000000  00025888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b9c  00000000  00000000  000267b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000384e5  00000000  00000000  0002734c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016408  00000000  00000000  0005f831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015eebe  00000000  00000000  00075c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d4af7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000045e8  00000000  00000000  001d4b3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000051  00000000  00000000  001d9124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800986c 	.word	0x0800986c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	0800986c 	.word	0x0800986c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <CC1201_SoftReset>:

// Read bit for register addresses
#define CC1201_READ_BIT                 0x80

HAL_StatusTypeDef CC1201_SoftReset(uint8_t *status_byte)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_SOFT_RESET, status_byte);
 80006b4:	6879      	ldr	r1, [r7, #4]
 80006b6:	2030      	movs	r0, #48	@ 0x30
 80006b8:	f000 faca 	bl	8000c50 <CC1201_SendStrobe>
 80006bc:	4603      	mov	r3, r0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <CC1201_FastTxOn>:

HAL_StatusTypeDef CC1201_FastTxOn(uint8_t *status_byte)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_FAST_TX_ON, status_byte);
 80006ce:	6879      	ldr	r1, [r7, #4]
 80006d0:	2031      	movs	r0, #49	@ 0x31
 80006d2:	f000 fabd 	bl	8000c50 <CC1201_SendStrobe>
 80006d6:	4603      	mov	r3, r0
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <CC1201_CalFreqSynth>:
{
    return CC1201_SendStrobe(CC1201_STROBE_OSC_OFF, status_byte);
}

HAL_StatusTypeDef CC1201_CalFreqSynth(uint8_t *status_byte)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_CAL_FREQ_SYNTH, status_byte);
 80006e8:	6879      	ldr	r1, [r7, #4]
 80006ea:	2033      	movs	r0, #51	@ 0x33
 80006ec:	f000 fab0 	bl	8000c50 <CC1201_SendStrobe>
 80006f0:	4603      	mov	r3, r0
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <CC1201_EnterRxMode>:

HAL_StatusTypeDef CC1201_EnterRxMode(uint8_t *status_byte)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b082      	sub	sp, #8
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_RX, status_byte);
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	2034      	movs	r0, #52	@ 0x34
 8000706:	f000 faa3 	bl	8000c50 <CC1201_SendStrobe>
 800070a:	4603      	mov	r3, r0
}
 800070c:	4618      	mov	r0, r3
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <CC1201_EnterTxMode>:

HAL_StatusTypeDef CC1201_EnterTxMode(uint8_t *status_byte)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_TX, status_byte);
 800071c:	6879      	ldr	r1, [r7, #4]
 800071e:	2035      	movs	r0, #53	@ 0x35
 8000720:	f000 fa96 	bl	8000c50 <CC1201_SendStrobe>
 8000724:	4603      	mov	r3, r0
}
 8000726:	4618      	mov	r0, r3
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <CC1201_EnterIdleMode>:

HAL_StatusTypeDef CC1201_EnterIdleMode(uint8_t *status_byte)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	b082      	sub	sp, #8
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_IDLE, status_byte);
 8000736:	6879      	ldr	r1, [r7, #4]
 8000738:	2036      	movs	r0, #54	@ 0x36
 800073a:	f000 fa89 	bl	8000c50 <CC1201_SendStrobe>
 800073e:	4603      	mov	r3, r0
}
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <CC1201_AutoFreqComp>:

HAL_StatusTypeDef CC1201_AutoFreqComp(uint8_t *status_byte)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_AUTO_FREQ_COMP, status_byte);
 8000750:	6879      	ldr	r1, [r7, #4]
 8000752:	2037      	movs	r0, #55	@ 0x37
 8000754:	f000 fa7c 	bl	8000c50 <CC1201_SendStrobe>
 8000758:	4603      	mov	r3, r0
}
 800075a:	4618      	mov	r0, r3
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <CC1201_WakeOnRadio>:

HAL_StatusTypeDef CC1201_WakeOnRadio(uint8_t *status_byte)
{
 8000762:	b580      	push	{r7, lr}
 8000764:	b082      	sub	sp, #8
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_WAKE_ON_RADIO, status_byte);
 800076a:	6879      	ldr	r1, [r7, #4]
 800076c:	2038      	movs	r0, #56	@ 0x38
 800076e:	f000 fa6f 	bl	8000c50 <CC1201_SendStrobe>
 8000772:	4603      	mov	r3, r0
}
 8000774:	4618      	mov	r0, r3
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <CC1201_EnterSleepMode>:

HAL_StatusTypeDef CC1201_EnterSleepMode(uint8_t *status_byte)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_SLEEP, status_byte);
 8000784:	6879      	ldr	r1, [r7, #4]
 8000786:	2039      	movs	r0, #57	@ 0x39
 8000788:	f000 fa62 	bl	8000c50 <CC1201_SendStrobe>
 800078c:	4603      	mov	r3, r0
}
 800078e:	4618      	mov	r0, r3
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <CC1201_FlushRxFifo>:

HAL_StatusTypeDef CC1201_FlushRxFifo(uint8_t *status_byte)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b082      	sub	sp, #8
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_FLUSH_RX, status_byte);
 800079e:	6879      	ldr	r1, [r7, #4]
 80007a0:	203a      	movs	r0, #58	@ 0x3a
 80007a2:	f000 fa55 	bl	8000c50 <CC1201_SendStrobe>
 80007a6:	4603      	mov	r3, r0
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <CC1201_FlushTxFifo>:

HAL_StatusTypeDef CC1201_FlushTxFifo(uint8_t *status_byte)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_FLUSH_TX, status_byte);
 80007b8:	6879      	ldr	r1, [r7, #4]
 80007ba:	203b      	movs	r0, #59	@ 0x3b
 80007bc:	f000 fa48 	bl	8000c50 <CC1201_SendStrobe>
 80007c0:	4603      	mov	r3, r0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <CC1201_WorReset>:

HAL_StatusTypeDef CC1201_WorReset(uint8_t *status_byte)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b082      	sub	sp, #8
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_WOR_RESET, status_byte);
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	203c      	movs	r0, #60	@ 0x3c
 80007d6:	f000 fa3b 	bl	8000c50 <CC1201_SendStrobe>
 80007da:	4603      	mov	r3, r0
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <CC1201_Nop>:

HAL_StatusTypeDef CC1201_Nop(uint8_t *status_byte)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_NOP, status_byte);
 80007ec:	6879      	ldr	r1, [r7, #4]
 80007ee:	203d      	movs	r0, #61	@ 0x3d
 80007f0:	f000 fa2e 	bl	8000c50 <CC1201_SendStrobe>
 80007f4:	4603      	mov	r3, r0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <CC1201_ReadStatus>:
 * @param reg_addr The address of the register to read. The read bit (MSB) will be set internally.
 * @param read_data Pointer to a uint8_t where the read data will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadStatus(uint16_t reg_addr, uint8_t *read_data)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af02      	add	r7, sp, #8
 8000806:	4603      	mov	r3, r0
 8000808:	6039      	str	r1, [r7, #0]
 800080a:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[4];
    uint8_t rx_buffer[4];
    uint8_t buffer_size;

    if (reg_addr > 0xFF) {
 800080c:	88fb      	ldrh	r3, [r7, #6]
 800080e:	2bff      	cmp	r3, #255	@ 0xff
 8000810:	d909      	bls.n	8000826 <CC1201_ReadStatus+0x26>
        // Extended register (burst access)
        tx_buffer[0] = 0x2F; // Extended register access command
 8000812:	232f      	movs	r3, #47	@ 0x2f
 8000814:	743b      	strb	r3, [r7, #16]
        tx_buffer[1] = (uint8_t)(reg_addr & 0xFF); // Low byte of address
 8000816:	88fb      	ldrh	r3, [r7, #6]
 8000818:	b2db      	uxtb	r3, r3
 800081a:	747b      	strb	r3, [r7, #17]
        tx_buffer[2] = 0x00; // Dummy byte for reading
 800081c:	2300      	movs	r3, #0
 800081e:	74bb      	strb	r3, [r7, #18]
        buffer_size = 3;
 8000820:	2303      	movs	r3, #3
 8000822:	75fb      	strb	r3, [r7, #23]
 8000824:	e009      	b.n	800083a <CC1201_ReadStatus+0x3a>
    } else {
        // Standard register
        tx_buffer[0] = (uint8_t)reg_addr | CC1201_READ_BIT;
 8000826:	88fb      	ldrh	r3, [r7, #6]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800082e:	b2db      	uxtb	r3, r3
 8000830:	743b      	strb	r3, [r7, #16]
        tx_buffer[1] = 0x00; // Dummy byte for reading
 8000832:	2300      	movs	r3, #0
 8000834:	747b      	strb	r3, [r7, #17]
        buffer_size = 2;
 8000836:	2302      	movs	r3, #2
 8000838:	75fb      	strb	r3, [r7, #23]
    }

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 800083a:	2200      	movs	r2, #0
 800083c:	2110      	movs	r1, #16
 800083e:	4815      	ldr	r0, [pc, #84]	@ (8000894 <CC1201_ReadStatus+0x94>)
 8000840:	f003 f8a6 	bl	8003990 <HAL_GPIO_WritePin>

    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, tx_buffer, rx_buffer, buffer_size, HAL_MAX_DELAY);
 8000844:	7dfb      	ldrb	r3, [r7, #23]
 8000846:	b29b      	uxth	r3, r3
 8000848:	f107 020c 	add.w	r2, r7, #12
 800084c:	f107 0110 	add.w	r1, r7, #16
 8000850:	f04f 30ff 	mov.w	r0, #4294967295
 8000854:	9000      	str	r0, [sp, #0]
 8000856:	4810      	ldr	r0, [pc, #64]	@ (8000898 <CC1201_ReadStatus+0x98>)
 8000858:	f006 fa2c 	bl	8006cb4 <HAL_SPI_TransmitReceive>
 800085c:	4603      	mov	r3, r0
 800085e:	75bb      	strb	r3, [r7, #22]

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 8000860:	2201      	movs	r2, #1
 8000862:	2110      	movs	r1, #16
 8000864:	480b      	ldr	r0, [pc, #44]	@ (8000894 <CC1201_ReadStatus+0x94>)
 8000866:	f003 f893 	bl	8003990 <HAL_GPIO_WritePin>

    if (status == HAL_OK) {
 800086a:	7dbb      	ldrb	r3, [r7, #22]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d10c      	bne.n	800088a <CC1201_ReadStatus+0x8a>
        if (read_data != NULL) {
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d009      	beq.n	800088a <CC1201_ReadStatus+0x8a>
            if (reg_addr > 0xFF) {
 8000876:	88fb      	ldrh	r3, [r7, #6]
 8000878:	2bff      	cmp	r3, #255	@ 0xff
 800087a:	d903      	bls.n	8000884 <CC1201_ReadStatus+0x84>
                *read_data = rx_buffer[2]; // Extended register data
 800087c:	7bba      	ldrb	r2, [r7, #14]
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	701a      	strb	r2, [r3, #0]
 8000882:	e002      	b.n	800088a <CC1201_ReadStatus+0x8a>
            } else {
                *read_data = rx_buffer[1]; // Standard register data
 8000884:	7b7a      	ldrb	r2, [r7, #13]
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return status;
 800088a:	7dbb      	ldrb	r3, [r7, #22]
}
 800088c:	4618      	mov	r0, r3
 800088e:	3718      	adds	r7, #24
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	58021000 	.word	0x58021000
 8000898:	240000b8 	.word	0x240000b8

0800089c <CC1201_WriteRegister>:
 * @param reg_addr The address of the register to write to.
 * @param write_data The byte of data to write to the register.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteRegister(uint16_t reg_addr, uint8_t write_data)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	460a      	mov	r2, r1
 80008a6:	80fb      	strh	r3, [r7, #6]
 80008a8:	4613      	mov	r3, r2
 80008aa:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[4];
    uint8_t buffer_size;

    if (reg_addr > 0xFF) {
 80008ac:	88fb      	ldrh	r3, [r7, #6]
 80008ae:	2bff      	cmp	r3, #255	@ 0xff
 80008b0:	d909      	bls.n	80008c6 <CC1201_WriteRegister+0x2a>
        // Extended register (burst access)
        tx_buffer[0] = 0x2F; // Extended register access command  
 80008b2:	232f      	movs	r3, #47	@ 0x2f
 80008b4:	723b      	strb	r3, [r7, #8]
        tx_buffer[1] = (uint8_t)(reg_addr & 0xFF); // Low byte of address
 80008b6:	88fb      	ldrh	r3, [r7, #6]
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	727b      	strb	r3, [r7, #9]
        tx_buffer[2] = write_data; // Data to write
 80008bc:	797b      	ldrb	r3, [r7, #5]
 80008be:	72bb      	strb	r3, [r7, #10]
        buffer_size = 3;
 80008c0:	2303      	movs	r3, #3
 80008c2:	73fb      	strb	r3, [r7, #15]
 80008c4:	e006      	b.n	80008d4 <CC1201_WriteRegister+0x38>
    } else {
        // Standard register
        tx_buffer[0] = (uint8_t)reg_addr; // Register address
 80008c6:	88fb      	ldrh	r3, [r7, #6]
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	723b      	strb	r3, [r7, #8]
        tx_buffer[1] = write_data; // Data to write
 80008cc:	797b      	ldrb	r3, [r7, #5]
 80008ce:	727b      	strb	r3, [r7, #9]
        buffer_size = 2;
 80008d0:	2302      	movs	r3, #2
 80008d2:	73fb      	strb	r3, [r7, #15]
    }

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 80008d4:	2200      	movs	r2, #0
 80008d6:	2110      	movs	r1, #16
 80008d8:	480b      	ldr	r0, [pc, #44]	@ (8000908 <CC1201_WriteRegister+0x6c>)
 80008da:	f003 f859 	bl	8003990 <HAL_GPIO_WritePin>

    status = HAL_SPI_Transmit(&CC1201_SPI_HANDLE, tx_buffer, buffer_size, HAL_MAX_DELAY);
 80008de:	7bfb      	ldrb	r3, [r7, #15]
 80008e0:	b29a      	uxth	r2, r3
 80008e2:	f107 0108 	add.w	r1, r7, #8
 80008e6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ea:	4808      	ldr	r0, [pc, #32]	@ (800090c <CC1201_WriteRegister+0x70>)
 80008ec:	f005 fff4 	bl	80068d8 <HAL_SPI_Transmit>
 80008f0:	4603      	mov	r3, r0
 80008f2:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 80008f4:	2201      	movs	r2, #1
 80008f6:	2110      	movs	r1, #16
 80008f8:	4803      	ldr	r0, [pc, #12]	@ (8000908 <CC1201_WriteRegister+0x6c>)
 80008fa:	f003 f849 	bl	8003990 <HAL_GPIO_WritePin>

    return status;
 80008fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8000900:	4618      	mov	r0, r3
 8000902:	3710      	adds	r7, #16
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	58021000 	.word	0x58021000
 800090c:	240000b8 	.word	0x240000b8

08000910 <CC1201_ReadMARCState>:
 *
 * @param marc_state Pointer to a uint8_t where the MARCSTATE value will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadMARCState(uint8_t *marc_state)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_MARCSTATE, marc_state);
 8000918:	6879      	ldr	r1, [r7, #4]
 800091a:	f642 7073 	movw	r0, #12147	@ 0x2f73
 800091e:	f7ff ff6f 	bl	8000800 <CC1201_ReadStatus>
 8000922:	4603      	mov	r3, r0
}
 8000924:	4618      	mov	r0, r3
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <CC1201_GetNumRXBytes>:
 *
 * @param num_bytes Pointer to a uint8_t where the number of RX bytes will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_GetNumRXBytes(uint8_t *num_bytes)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_NUM_RXBYTES, num_bytes);
 8000934:	6879      	ldr	r1, [r7, #4]
 8000936:	f642 707a 	movw	r0, #12154	@ 0x2f7a
 800093a:	f7ff ff61 	bl	8000800 <CC1201_ReadStatus>
 800093e:	4603      	mov	r3, r0
}
 8000940:	4618      	mov	r0, r3
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <CC1201_GetNumTXBytes>:
 *
 * @param num_bytes Pointer to a uint8_t where the number of TX bytes will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_GetNumTXBytes(uint8_t *num_bytes)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_NUM_TXBYTES, num_bytes);
 8000950:	6879      	ldr	r1, [r7, #4]
 8000952:	f642 707b 	movw	r0, #12155	@ 0x2f7b
 8000956:	f7ff ff53 	bl	8000800 <CC1201_ReadStatus>
 800095a:	4603      	mov	r3, r0
}
 800095c:	4618      	mov	r0, r3
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <CC1201_WriteTxFifo>:
 * @param length Number of bytes to write.
 * @param status_byte Pointer to store the status byte returned.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteTxFifo(uint8_t *data, uint8_t length, uint8_t *status_byte)
{
 8000964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000968:	b08f      	sub	sp, #60	@ 0x3c
 800096a:	af02      	add	r7, sp, #8
 800096c:	6178      	str	r0, [r7, #20]
 800096e:	460b      	mov	r3, r1
 8000970:	60fa      	str	r2, [r7, #12]
 8000972:	74fb      	strb	r3, [r7, #19]
 8000974:	466b      	mov	r3, sp
 8000976:	461e      	mov	r6, r3
    if (data == NULL || status_byte == NULL || length == 0) {
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d005      	beq.n	800098a <CC1201_WriteTxFifo+0x26>
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d002      	beq.n	800098a <CC1201_WriteTxFifo+0x26>
 8000984:	7cfb      	ldrb	r3, [r7, #19]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d101      	bne.n	800098e <CC1201_WriteTxFifo+0x2a>
        return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
 800098c:	e088      	b.n	8000aa0 <CC1201_WriteTxFifo+0x13c>
    }
    
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[2 + length]; // Command + address + data
 800098e:	7cfb      	ldrb	r3, [r7, #19]
 8000990:	1c99      	adds	r1, r3, #2
 8000992:	1e4b      	subs	r3, r1, #1
 8000994:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000996:	460a      	mov	r2, r1
 8000998:	2300      	movs	r3, #0
 800099a:	603a      	str	r2, [r7, #0]
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	f04f 0200 	mov.w	r2, #0
 80009a2:	f04f 0300 	mov.w	r3, #0
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	00c3      	lsls	r3, r0, #3
 80009aa:	6838      	ldr	r0, [r7, #0]
 80009ac:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80009b0:	6838      	ldr	r0, [r7, #0]
 80009b2:	00c2      	lsls	r2, r0, #3
 80009b4:	460a      	mov	r2, r1
 80009b6:	2300      	movs	r3, #0
 80009b8:	4692      	mov	sl, r2
 80009ba:	469b      	mov	fp, r3
 80009bc:	f04f 0200 	mov.w	r2, #0
 80009c0:	f04f 0300 	mov.w	r3, #0
 80009c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80009c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80009cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80009d0:	460b      	mov	r3, r1
 80009d2:	3307      	adds	r3, #7
 80009d4:	08db      	lsrs	r3, r3, #3
 80009d6:	00db      	lsls	r3, r3, #3
 80009d8:	ebad 0d03 	sub.w	sp, sp, r3
 80009dc:	ab02      	add	r3, sp, #8
 80009de:	3300      	adds	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t rx_buffer[2 + length];
 80009e2:	7cfb      	ldrb	r3, [r7, #19]
 80009e4:	1c99      	adds	r1, r3, #2
 80009e6:	1e4b      	subs	r3, r1, #1
 80009e8:	623b      	str	r3, [r7, #32]
 80009ea:	460a      	mov	r2, r1
 80009ec:	2300      	movs	r3, #0
 80009ee:	4690      	mov	r8, r2
 80009f0:	4699      	mov	r9, r3
 80009f2:	f04f 0200 	mov.w	r2, #0
 80009f6:	f04f 0300 	mov.w	r3, #0
 80009fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80009fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000a02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000a06:	460a      	mov	r2, r1
 8000a08:	2300      	movs	r3, #0
 8000a0a:	4614      	mov	r4, r2
 8000a0c:	461d      	mov	r5, r3
 8000a0e:	f04f 0200 	mov.w	r2, #0
 8000a12:	f04f 0300 	mov.w	r3, #0
 8000a16:	00eb      	lsls	r3, r5, #3
 8000a18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000a1c:	00e2      	lsls	r2, r4, #3
 8000a1e:	460b      	mov	r3, r1
 8000a20:	3307      	adds	r3, #7
 8000a22:	08db      	lsrs	r3, r3, #3
 8000a24:	00db      	lsls	r3, r3, #3
 8000a26:	ebad 0d03 	sub.w	sp, sp, r3
 8000a2a:	ab02      	add	r3, sp, #8
 8000a2c:	3300      	adds	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
    
    // Build command: burst write to TX FIFO (0x3F | 0x40)
    tx_buffer[0] = 0x7F; // TX FIFO burst write
 8000a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a32:	227f      	movs	r2, #127	@ 0x7f
 8000a34:	701a      	strb	r2, [r3, #0]
    
    // Copy data to transmit buffer
    for (uint8_t i = 0; i < length; i++) {
 8000a36:	2300      	movs	r3, #0
 8000a38:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000a3c:	e00e      	b.n	8000a5c <CC1201_WriteTxFifo+0xf8>
        tx_buffer[1 + i] = data[i];
 8000a3e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a42:	697a      	ldr	r2, [r7, #20]
 8000a44:	441a      	add	r2, r3
 8000a46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	7811      	ldrb	r1, [r2, #0]
 8000a4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a50:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < length; i++) {
 8000a52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a56:	3301      	adds	r3, #1
 8000a58:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000a5c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000a60:	7cfb      	ldrb	r3, [r7, #19]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d3eb      	bcc.n	8000a3e <CC1201_WriteTxFifo+0xda>
    }
    
    // Pull CS low to start SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2110      	movs	r1, #16
 8000a6a:	4810      	ldr	r0, [pc, #64]	@ (8000aac <CC1201_WriteTxFifo+0x148>)
 8000a6c:	f002 ff90 	bl	8003990 <HAL_GPIO_WritePin>
    
    // Perform SPI transaction
    status = HAL_SPI_TransmitReceive(&hspi2, tx_buffer, rx_buffer, length + 1, HAL_MAX_DELAY);
 8000a70:	7cfb      	ldrb	r3, [r7, #19]
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	3301      	adds	r3, #1
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	f04f 32ff 	mov.w	r2, #4294967295
 8000a7c:	9200      	str	r2, [sp, #0]
 8000a7e:	69fa      	ldr	r2, [r7, #28]
 8000a80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000a82:	480b      	ldr	r0, [pc, #44]	@ (8000ab0 <CC1201_WriteTxFifo+0x14c>)
 8000a84:	f006 f916 	bl	8006cb4 <HAL_SPI_TransmitReceive>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	76fb      	strb	r3, [r7, #27]
    
    // Pull CS high to end SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2110      	movs	r1, #16
 8000a90:	4806      	ldr	r0, [pc, #24]	@ (8000aac <CC1201_WriteTxFifo+0x148>)
 8000a92:	f002 ff7d 	bl	8003990 <HAL_GPIO_WritePin>
    
    // Store status byte (first received byte)
    *status_byte = rx_buffer[0];
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	781a      	ldrb	r2, [r3, #0]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	701a      	strb	r2, [r3, #0]
    
    return status;
 8000a9e:	7efb      	ldrb	r3, [r7, #27]
 8000aa0:	46b5      	mov	sp, r6
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3734      	adds	r7, #52	@ 0x34
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000aac:	58021000 	.word	0x58021000
 8000ab0:	240000b8 	.word	0x240000b8

08000ab4 <CC1201_ReadRxFifo>:
 * @param length Number of bytes to read.
 * @param status_byte Pointer to store the status byte returned.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadRxFifo(uint8_t *data, uint8_t length, uint8_t *status_byte)
{
 8000ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ab8:	b08f      	sub	sp, #60	@ 0x3c
 8000aba:	af02      	add	r7, sp, #8
 8000abc:	6178      	str	r0, [r7, #20]
 8000abe:	460b      	mov	r3, r1
 8000ac0:	60fa      	str	r2, [r7, #12]
 8000ac2:	74fb      	strb	r3, [r7, #19]
 8000ac4:	466b      	mov	r3, sp
 8000ac6:	461e      	mov	r6, r3
    if (data == NULL || status_byte == NULL || length == 0) {
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d005      	beq.n	8000ada <CC1201_ReadRxFifo+0x26>
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d002      	beq.n	8000ada <CC1201_ReadRxFifo+0x26>
 8000ad4:	7cfb      	ldrb	r3, [r7, #19]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d101      	bne.n	8000ade <CC1201_ReadRxFifo+0x2a>
        return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	e09b      	b.n	8000c16 <CC1201_ReadRxFifo+0x162>
    }
    
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[1 + length]; // Command + dummy bytes
 8000ade:	7cfb      	ldrb	r3, [r7, #19]
 8000ae0:	1c59      	adds	r1, r3, #1
 8000ae2:	1e4b      	subs	r3, r1, #1
 8000ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ae6:	460a      	mov	r2, r1
 8000ae8:	2300      	movs	r3, #0
 8000aea:	603a      	str	r2, [r7, #0]
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	f04f 0200 	mov.w	r2, #0
 8000af2:	f04f 0300 	mov.w	r3, #0
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	00c3      	lsls	r3, r0, #3
 8000afa:	6838      	ldr	r0, [r7, #0]
 8000afc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b00:	6838      	ldr	r0, [r7, #0]
 8000b02:	00c2      	lsls	r2, r0, #3
 8000b04:	460a      	mov	r2, r1
 8000b06:	2300      	movs	r3, #0
 8000b08:	4692      	mov	sl, r2
 8000b0a:	469b      	mov	fp, r3
 8000b0c:	f04f 0200 	mov.w	r2, #0
 8000b10:	f04f 0300 	mov.w	r3, #0
 8000b14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000b18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000b1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000b20:	460b      	mov	r3, r1
 8000b22:	3307      	adds	r3, #7
 8000b24:	08db      	lsrs	r3, r3, #3
 8000b26:	00db      	lsls	r3, r3, #3
 8000b28:	ebad 0d03 	sub.w	sp, sp, r3
 8000b2c:	ab02      	add	r3, sp, #8
 8000b2e:	3300      	adds	r3, #0
 8000b30:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t rx_buffer[1 + length];
 8000b32:	7cfb      	ldrb	r3, [r7, #19]
 8000b34:	1c59      	adds	r1, r3, #1
 8000b36:	1e4b      	subs	r3, r1, #1
 8000b38:	623b      	str	r3, [r7, #32]
 8000b3a:	460a      	mov	r2, r1
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	4690      	mov	r8, r2
 8000b40:	4699      	mov	r9, r3
 8000b42:	f04f 0200 	mov.w	r2, #0
 8000b46:	f04f 0300 	mov.w	r3, #0
 8000b4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000b4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000b52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000b56:	460a      	mov	r2, r1
 8000b58:	2300      	movs	r3, #0
 8000b5a:	4614      	mov	r4, r2
 8000b5c:	461d      	mov	r5, r3
 8000b5e:	f04f 0200 	mov.w	r2, #0
 8000b62:	f04f 0300 	mov.w	r3, #0
 8000b66:	00eb      	lsls	r3, r5, #3
 8000b68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000b6c:	00e2      	lsls	r2, r4, #3
 8000b6e:	460b      	mov	r3, r1
 8000b70:	3307      	adds	r3, #7
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	00db      	lsls	r3, r3, #3
 8000b76:	ebad 0d03 	sub.w	sp, sp, r3
 8000b7a:	ab02      	add	r3, sp, #8
 8000b7c:	3300      	adds	r3, #0
 8000b7e:	61fb      	str	r3, [r7, #28]
    
    // Build command: burst read from RX FIFO (0x3F | 0x80 | 0x40)
    tx_buffer[0] = 0xFF; // RX FIFO burst read
 8000b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b82:	22ff      	movs	r2, #255	@ 0xff
 8000b84:	701a      	strb	r2, [r3, #0]
    
    // Fill with dummy bytes for reading
    for (uint8_t i = 1; i <= length; i++) {
 8000b86:	2301      	movs	r3, #1
 8000b88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000b8c:	e009      	b.n	8000ba2 <CC1201_ReadRxFifo+0xee>
        tx_buffer[i] = 0x00;
 8000b8e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b94:	2100      	movs	r1, #0
 8000b96:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 1; i <= length; i++) {
 8000b98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000ba2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000ba6:	7cfb      	ldrb	r3, [r7, #19]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d9f0      	bls.n	8000b8e <CC1201_ReadRxFifo+0xda>
    }
    
    // Pull CS low to start SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2110      	movs	r1, #16
 8000bb0:	481c      	ldr	r0, [pc, #112]	@ (8000c24 <CC1201_ReadRxFifo+0x170>)
 8000bb2:	f002 feed 	bl	8003990 <HAL_GPIO_WritePin>
    
    // Perform SPI transaction
    status = HAL_SPI_TransmitReceive(&hspi2, tx_buffer, rx_buffer, length + 1, HAL_MAX_DELAY);
 8000bb6:	7cfb      	ldrb	r3, [r7, #19]
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	3301      	adds	r3, #1
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc2:	9200      	str	r2, [sp, #0]
 8000bc4:	69fa      	ldr	r2, [r7, #28]
 8000bc6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000bc8:	4817      	ldr	r0, [pc, #92]	@ (8000c28 <CC1201_ReadRxFifo+0x174>)
 8000bca:	f006 f873 	bl	8006cb4 <HAL_SPI_TransmitReceive>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	76fb      	strb	r3, [r7, #27]
    
    // Pull CS high to end SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	2110      	movs	r1, #16
 8000bd6:	4813      	ldr	r0, [pc, #76]	@ (8000c24 <CC1201_ReadRxFifo+0x170>)
 8000bd8:	f002 feda 	bl	8003990 <HAL_GPIO_WritePin>
    
    // Store status byte (first received byte)
    *status_byte = rx_buffer[0];
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	781a      	ldrb	r2, [r3, #0]
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	701a      	strb	r2, [r3, #0]
    
    // Copy received data
    for (uint8_t i = 0; i < length; i++) {
 8000be4:	2300      	movs	r3, #0
 8000be6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000bea:	e00e      	b.n	8000c0a <CC1201_ReadRxFifo+0x156>
        data[i] = rx_buffer[1 + i];
 8000bec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000bf0:	1c5a      	adds	r2, r3, #1
 8000bf2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000bf6:	6979      	ldr	r1, [r7, #20]
 8000bf8:	440b      	add	r3, r1
 8000bfa:	69f9      	ldr	r1, [r7, #28]
 8000bfc:	5c8a      	ldrb	r2, [r1, r2]
 8000bfe:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < length; i++) {
 8000c00:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000c04:	3301      	adds	r3, #1
 8000c06:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000c0a:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000c0e:	7cfb      	ldrb	r3, [r7, #19]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d3eb      	bcc.n	8000bec <CC1201_ReadRxFifo+0x138>
    }
    
    return status;
 8000c14:	7efb      	ldrb	r3, [r7, #27]
 8000c16:	46b5      	mov	sp, r6
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3734      	adds	r7, #52	@ 0x34
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c22:	bf00      	nop
 8000c24:	58021000 	.word	0x58021000
 8000c28:	240000b8 	.word	0x240000b8

08000c2c <CC1201_WriteSingleTxFifo>:
 * @param data Single byte to write to TX FIFO.
 * @param status_byte Pointer to store the status byte returned.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteSingleTxFifo(uint8_t data, uint8_t *status_byte)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	6039      	str	r1, [r7, #0]
 8000c36:	71fb      	strb	r3, [r7, #7]
    return CC1201_WriteTxFifo(&data, 1, status_byte);
 8000c38:	1dfb      	adds	r3, r7, #7
 8000c3a:	683a      	ldr	r2, [r7, #0]
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fe90 	bl	8000964 <CC1201_WriteTxFifo>
 8000c44:	4603      	mov	r3, r0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <CC1201_SendStrobe>:
 * @param status_byte Pointer to a uint8_t where the status byte received from the CC1201 will be stored.
 *                    Can be NULL if the status byte is not needed.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_SendStrobe(uint8_t strobe_command, uint8_t *status_byte)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af02      	add	r7, sp, #8
 8000c56:	4603      	mov	r3, r0
 8000c58:	6039      	str	r1, [r7, #0]
 8000c5a:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;
    uint8_t rx_data;

    // Debug: Check CS pin before transaction
    printf("  Strobe 0x%02X: CS before=", strobe_command);
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4827      	ldr	r0, [pc, #156]	@ (8000d00 <CC1201_SendStrobe+0xb0>)
 8000c62:	f007 ff97 	bl	8008b94 <iprintf>
    printf("%s", HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN) == GPIO_PIN_SET ? "HIGH" : "LOW");
 8000c66:	2110      	movs	r1, #16
 8000c68:	4826      	ldr	r0, [pc, #152]	@ (8000d04 <CC1201_SendStrobe+0xb4>)
 8000c6a:	f002 fe79 	bl	8003960 <HAL_GPIO_ReadPin>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d101      	bne.n	8000c78 <CC1201_SendStrobe+0x28>
 8000c74:	4b24      	ldr	r3, [pc, #144]	@ (8000d08 <CC1201_SendStrobe+0xb8>)
 8000c76:	e000      	b.n	8000c7a <CC1201_SendStrobe+0x2a>
 8000c78:	4b24      	ldr	r3, [pc, #144]	@ (8000d0c <CC1201_SendStrobe+0xbc>)
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4824      	ldr	r0, [pc, #144]	@ (8000d10 <CC1201_SendStrobe+0xc0>)
 8000c7e:	f007 ff89 	bl	8008b94 <iprintf>

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 8000c82:	2200      	movs	r2, #0
 8000c84:	2110      	movs	r1, #16
 8000c86:	481f      	ldr	r0, [pc, #124]	@ (8000d04 <CC1201_SendStrobe+0xb4>)
 8000c88:	f002 fe82 	bl	8003990 <HAL_GPIO_WritePin>
    
    // Debug: Check CS pin during transaction
    printf(", CS during=");
 8000c8c:	4821      	ldr	r0, [pc, #132]	@ (8000d14 <CC1201_SendStrobe+0xc4>)
 8000c8e:	f007 ff81 	bl	8008b94 <iprintf>
    printf("%s", HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN) == GPIO_PIN_SET ? "HIGH" : "LOW");
 8000c92:	2110      	movs	r1, #16
 8000c94:	481b      	ldr	r0, [pc, #108]	@ (8000d04 <CC1201_SendStrobe+0xb4>)
 8000c96:	f002 fe63 	bl	8003960 <HAL_GPIO_ReadPin>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d101      	bne.n	8000ca4 <CC1201_SendStrobe+0x54>
 8000ca0:	4b19      	ldr	r3, [pc, #100]	@ (8000d08 <CC1201_SendStrobe+0xb8>)
 8000ca2:	e000      	b.n	8000ca6 <CC1201_SendStrobe+0x56>
 8000ca4:	4b19      	ldr	r3, [pc, #100]	@ (8000d0c <CC1201_SendStrobe+0xbc>)
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4819      	ldr	r0, [pc, #100]	@ (8000d10 <CC1201_SendStrobe+0xc0>)
 8000caa:	f007 ff73 	bl	8008b94 <iprintf>
    
    // Small delay to ensure CS is stable
    HAL_Delay(1);
 8000cae:	2001      	movs	r0, #1
 8000cb0:	f002 f844 	bl	8002d3c <HAL_Delay>

    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, &strobe_command, &rx_data, 1, HAL_MAX_DELAY); // Transmit strobe command and receive status
 8000cb4:	f107 020e 	add.w	r2, r7, #14
 8000cb8:	1df9      	adds	r1, r7, #7
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	4815      	ldr	r0, [pc, #84]	@ (8000d18 <CC1201_SendStrobe+0xc8>)
 8000cc4:	f005 fff6 	bl	8006cb4 <HAL_SPI_TransmitReceive>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 8000ccc:	2201      	movs	r2, #1
 8000cce:	2110      	movs	r1, #16
 8000cd0:	480c      	ldr	r0, [pc, #48]	@ (8000d04 <CC1201_SendStrobe+0xb4>)
 8000cd2:	f002 fe5d 	bl	8003990 <HAL_GPIO_WritePin>

    // Debug output
    printf(", CS after=HIGH, RX=0x%02X, HAL=%d\n\r", rx_data, status);
 8000cd6:	7bbb      	ldrb	r3, [r7, #14]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	480f      	ldr	r0, [pc, #60]	@ (8000d1c <CC1201_SendStrobe+0xcc>)
 8000ce0:	f007 ff58 	bl	8008b94 <iprintf>

    if (status == HAL_OK) {
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d105      	bne.n	8000cf6 <CC1201_SendStrobe+0xa6>
        if (status_byte != NULL) {
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d002      	beq.n	8000cf6 <CC1201_SendStrobe+0xa6>
            *status_byte = rx_data;
 8000cf0:	7bba      	ldrb	r2, [r7, #14]
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	701a      	strb	r2, [r3, #0]
        }
    }
    return status;
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	08009884 	.word	0x08009884
 8000d04:	58021000 	.word	0x58021000
 8000d08:	080098a0 	.word	0x080098a0
 8000d0c:	080098a8 	.word	0x080098a8
 8000d10:	080098ac 	.word	0x080098ac
 8000d14:	080098b0 	.word	0x080098b0
 8000d18:	240000b8 	.word	0x240000b8
 8000d1c:	080098c0 	.word	0x080098c0

08000d20 <CC1201_WriteRegisterConfig>:
 * @param settings Array of register settings to write.
 * @param num_settings Number of settings in the array.
 * @return HAL_StatusTypeDef Status of the configuration (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteRegisterConfig(const registerSetting_t *settings, uint16_t num_settings)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	460b      	mov	r3, r1
 8000d2a:	807b      	strh	r3, [r7, #2]
    HAL_StatusTypeDef status = HAL_OK;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	73fb      	strb	r3, [r7, #15]
    
    for (uint16_t i = 0; i < num_settings; i++) {
 8000d30:	2300      	movs	r3, #0
 8000d32:	81bb      	strh	r3, [r7, #12]
 8000d34:	e024      	b.n	8000d80 <CC1201_WriteRegisterConfig+0x60>
        if (settings[i].addr > 0xFF) {
 8000d36:	89bb      	ldrh	r3, [r7, #12]
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	881b      	ldrh	r3, [r3, #0]
 8000d40:	2bff      	cmp	r3, #255	@ 0xff
 8000d42:	d819      	bhi.n	8000d78 <CC1201_WriteRegisterConfig+0x58>
            // Extended register (requires burst access)
            // For now, skip extended registers in this simple implementation
            continue;
        }
        
        status = CC1201_WriteRegister((uint8_t)settings[i].addr, settings[i].data);
 8000d44:	89bb      	ldrh	r3, [r7, #12]
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	881b      	ldrh	r3, [r3, #0]
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	4618      	mov	r0, r3
 8000d52:	89bb      	ldrh	r3, [r7, #12]
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	789b      	ldrb	r3, [r3, #2]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f7ff fd9d 	bl	800089c <CC1201_WriteRegister>
 8000d62:	4603      	mov	r3, r0
 8000d64:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK) {
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <CC1201_WriteRegisterConfig+0x50>
            return status;
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
 8000d6e:	e00c      	b.n	8000d8a <CC1201_WriteRegisterConfig+0x6a>
        }
        
        HAL_Delay(1); // Small delay between register writes
 8000d70:	2001      	movs	r0, #1
 8000d72:	f001 ffe3 	bl	8002d3c <HAL_Delay>
 8000d76:	e000      	b.n	8000d7a <CC1201_WriteRegisterConfig+0x5a>
            continue;
 8000d78:	bf00      	nop
    for (uint16_t i = 0; i < num_settings; i++) {
 8000d7a:	89bb      	ldrh	r3, [r7, #12]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	81bb      	strh	r3, [r7, #12]
 8000d80:	89ba      	ldrh	r2, [r7, #12]
 8000d82:	887b      	ldrh	r3, [r7, #2]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d3d6      	bcc.n	8000d36 <CC1201_WriteRegisterConfig+0x16>
    }
    
    return status;
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <CC1201_GetNumPreferredSettings>:
 * @brief Gets the number of preferred settings.
 *
 * @return uint16_t Number of settings in the preferred settings array.
 */
uint16_t CC1201_GetNumPreferredSettings(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
    return sizeof(preferredSettings) / sizeof(registerSetting_t);
 8000d96:	2331      	movs	r3, #49	@ 0x31
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
	...

08000da4 <CC1201_GetPreferredSettings>:
 * @brief Gets a pointer to the preferred settings array.
 *
 * @return const registerSetting_t* Pointer to the preferred settings array.
 */
const registerSetting_t* CC1201_GetPreferredSettings(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
    return preferredSettings;
 8000da8:	4b02      	ldr	r3, [pc, #8]	@ (8000db4 <CC1201_GetPreferredSettings+0x10>)
 8000daa:	4618      	mov	r0, r3
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	0800b030 	.word	0x0800b030

08000db8 <print_cc1201_status>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Function to decode and print CC1201 status
void print_cc1201_status(uint8_t status_byte, const char* context) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	6039      	str	r1, [r7, #0]
 8000dc2:	71fb      	strb	r3, [r7, #7]
    uint8_t radio_state = (status_byte >> 4) & 0x0F;
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	091b      	lsrs	r3, r3, #4
 8000dc8:	73fb      	strb	r3, [r7, #15]
    uint8_t fifo_bytes = status_byte & 0x0F;
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	f003 030f 	and.w	r3, r3, #15
 8000dd0:	73bb      	strb	r3, [r7, #14]
    
    printf("  %s: Status=0x%02X, State=0x%X", context, status_byte, radio_state);
 8000dd2:	79fa      	ldrb	r2, [r7, #7]
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
 8000dd6:	6839      	ldr	r1, [r7, #0]
 8000dd8:	4823      	ldr	r0, [pc, #140]	@ (8000e68 <print_cc1201_status+0xb0>)
 8000dda:	f007 fedb 	bl	8008b94 <iprintf>
    switch(radio_state) {
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
 8000de0:	2b07      	cmp	r3, #7
 8000de2:	d833      	bhi.n	8000e4c <print_cc1201_status+0x94>
 8000de4:	a201      	add	r2, pc, #4	@ (adr r2, 8000dec <print_cc1201_status+0x34>)
 8000de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dea:	bf00      	nop
 8000dec:	08000e0d 	.word	0x08000e0d
 8000df0:	08000e15 	.word	0x08000e15
 8000df4:	08000e1d 	.word	0x08000e1d
 8000df8:	08000e25 	.word	0x08000e25
 8000dfc:	08000e2d 	.word	0x08000e2d
 8000e00:	08000e35 	.word	0x08000e35
 8000e04:	08000e3d 	.word	0x08000e3d
 8000e08:	08000e45 	.word	0x08000e45
        case 0x0: printf("(IDLE)"); break;
 8000e0c:	4817      	ldr	r0, [pc, #92]	@ (8000e6c <print_cc1201_status+0xb4>)
 8000e0e:	f007 fec1 	bl	8008b94 <iprintf>
 8000e12:	e01f      	b.n	8000e54 <print_cc1201_status+0x9c>
        case 0x1: printf("(RX)"); break;
 8000e14:	4816      	ldr	r0, [pc, #88]	@ (8000e70 <print_cc1201_status+0xb8>)
 8000e16:	f007 febd 	bl	8008b94 <iprintf>
 8000e1a:	e01b      	b.n	8000e54 <print_cc1201_status+0x9c>
        case 0x2: printf("(TX)"); break;
 8000e1c:	4815      	ldr	r0, [pc, #84]	@ (8000e74 <print_cc1201_status+0xbc>)
 8000e1e:	f007 feb9 	bl	8008b94 <iprintf>
 8000e22:	e017      	b.n	8000e54 <print_cc1201_status+0x9c>
        case 0x3: printf("(FSTXON)"); break;
 8000e24:	4814      	ldr	r0, [pc, #80]	@ (8000e78 <print_cc1201_status+0xc0>)
 8000e26:	f007 feb5 	bl	8008b94 <iprintf>
 8000e2a:	e013      	b.n	8000e54 <print_cc1201_status+0x9c>
        case 0x4: printf("(CALIBRATE)"); break;
 8000e2c:	4813      	ldr	r0, [pc, #76]	@ (8000e7c <print_cc1201_status+0xc4>)
 8000e2e:	f007 feb1 	bl	8008b94 <iprintf>
 8000e32:	e00f      	b.n	8000e54 <print_cc1201_status+0x9c>
        case 0x5: printf("(SETTLING)"); break;
 8000e34:	4812      	ldr	r0, [pc, #72]	@ (8000e80 <print_cc1201_status+0xc8>)
 8000e36:	f007 fead 	bl	8008b94 <iprintf>
 8000e3a:	e00b      	b.n	8000e54 <print_cc1201_status+0x9c>
        case 0x6: printf("(RX_FIFO_ERR)"); break;
 8000e3c:	4811      	ldr	r0, [pc, #68]	@ (8000e84 <print_cc1201_status+0xcc>)
 8000e3e:	f007 fea9 	bl	8008b94 <iprintf>
 8000e42:	e007      	b.n	8000e54 <print_cc1201_status+0x9c>
        case 0x7: printf("(TX_FIFO_ERR)"); break;
 8000e44:	4810      	ldr	r0, [pc, #64]	@ (8000e88 <print_cc1201_status+0xd0>)
 8000e46:	f007 fea5 	bl	8008b94 <iprintf>
 8000e4a:	e003      	b.n	8000e54 <print_cc1201_status+0x9c>
        default: printf("(UNKNOWN)"); break;
 8000e4c:	480f      	ldr	r0, [pc, #60]	@ (8000e8c <print_cc1201_status+0xd4>)
 8000e4e:	f007 fea1 	bl	8008b94 <iprintf>
 8000e52:	bf00      	nop
    }
    printf(", FIFO=%d\n\r", fifo_bytes);
 8000e54:	7bbb      	ldrb	r3, [r7, #14]
 8000e56:	4619      	mov	r1, r3
 8000e58:	480d      	ldr	r0, [pc, #52]	@ (8000e90 <print_cc1201_status+0xd8>)
 8000e5a:	f007 fe9b 	bl	8008b94 <iprintf>
}
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	080098e8 	.word	0x080098e8
 8000e6c:	08009908 	.word	0x08009908
 8000e70:	08009910 	.word	0x08009910
 8000e74:	08009918 	.word	0x08009918
 8000e78:	08009920 	.word	0x08009920
 8000e7c:	0800992c 	.word	0x0800992c
 8000e80:	08009938 	.word	0x08009938
 8000e84:	08009944 	.word	0x08009944
 8000e88:	08009954 	.word	0x08009954
 8000e8c:	08009964 	.word	0x08009964
 8000e90:	08009970 	.word	0x08009970

08000e94 <test_all_strobe_commands>:

// Comprehensive CC1201 strobe command test
void test_all_strobe_commands(void) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
    uint8_t status_byte = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef hal_status;
    
    printf("\n=== COMPREHENSIVE STROBE COMMAND TEST ===\n\r");
 8000e9e:	48b7      	ldr	r0, [pc, #732]	@ (800117c <test_all_strobe_commands+0x2e8>)
 8000ea0:	f007 fe78 	bl	8008b94 <iprintf>
    
    // Test 1: NOP Command (baseline)
    printf("1. NOP Command (baseline test)\n\r");
 8000ea4:	48b6      	ldr	r0, [pc, #728]	@ (8001180 <test_all_strobe_commands+0x2ec>)
 8000ea6:	f007 fe75 	bl	8008b94 <iprintf>
    hal_status = CC1201_Nop(&status_byte);
 8000eaa:	1dbb      	adds	r3, r7, #6
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fc99 	bl	80007e4 <CC1201_Nop>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d111      	bne.n	8000ee0 <test_all_strobe_commands+0x4c>
        print_cc1201_status(status_byte, "NOP");
 8000ebc:	79bb      	ldrb	r3, [r7, #6]
 8000ebe:	49b1      	ldr	r1, [pc, #708]	@ (8001184 <test_all_strobe_commands+0x2f0>)
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff ff79 	bl	8000db8 <print_cc1201_status>
        printf("  NOP FAILED - HAL Error: %d\n\r", hal_status);
        return;
    }
    
    // Test 2: Soft Reset
    printf("\n2. Soft Reset\n\r");
 8000ec6:	48b0      	ldr	r0, [pc, #704]	@ (8001188 <test_all_strobe_commands+0x2f4>)
 8000ec8:	f007 fe64 	bl	8008b94 <iprintf>
    hal_status = CC1201_SoftReset(&status_byte);
 8000ecc:	1dbb      	adds	r3, r7, #6
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fbec 	bl	80006ac <CC1201_SoftReset>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d10f      	bne.n	8000efe <test_all_strobe_commands+0x6a>
 8000ede:	e005      	b.n	8000eec <test_all_strobe_commands+0x58>
        printf("  NOP FAILED - HAL Error: %d\n\r", hal_status);
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	48a9      	ldr	r0, [pc, #676]	@ (800118c <test_all_strobe_commands+0x2f8>)
 8000ee6:	f007 fe55 	bl	8008b94 <iprintf>
 8000eea:	e144      	b.n	8001176 <test_all_strobe_commands+0x2e2>
        print_cc1201_status(status_byte, "RESET");
 8000eec:	79bb      	ldrb	r3, [r7, #6]
 8000eee:	49a8      	ldr	r1, [pc, #672]	@ (8001190 <test_all_strobe_commands+0x2fc>)
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff61 	bl	8000db8 <print_cc1201_status>
        HAL_Delay(100); // Wait for reset to complete
 8000ef6:	2064      	movs	r0, #100	@ 0x64
 8000ef8:	f001 ff20 	bl	8002d3c <HAL_Delay>
 8000efc:	e004      	b.n	8000f08 <test_all_strobe_commands+0x74>
    } else {
        printf("  RESET FAILED - HAL Error: %d\n\r", hal_status);
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	4619      	mov	r1, r3
 8000f02:	48a4      	ldr	r0, [pc, #656]	@ (8001194 <test_all_strobe_commands+0x300>)
 8000f04:	f007 fe46 	bl	8008b94 <iprintf>
    }
    
    // Test 3: Enter Idle Mode
    printf("\n3. Enter Idle Mode\n\r");
 8000f08:	48a3      	ldr	r0, [pc, #652]	@ (8001198 <test_all_strobe_commands+0x304>)
 8000f0a:	f007 fe43 	bl	8008b94 <iprintf>
    hal_status = CC1201_EnterIdleMode(&status_byte);
 8000f0e:	1dbb      	adds	r3, r7, #6
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fc0c 	bl	800072e <CC1201_EnterIdleMode>
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d105      	bne.n	8000f2c <test_all_strobe_commands+0x98>
        print_cc1201_status(status_byte, "IDLE");
 8000f20:	79bb      	ldrb	r3, [r7, #6]
 8000f22:	499e      	ldr	r1, [pc, #632]	@ (800119c <test_all_strobe_commands+0x308>)
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff47 	bl	8000db8 <print_cc1201_status>
 8000f2a:	e004      	b.n	8000f36 <test_all_strobe_commands+0xa2>
    } else {
        printf("  IDLE FAILED - HAL Error: %d\n\r", hal_status);
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	4619      	mov	r1, r3
 8000f30:	489b      	ldr	r0, [pc, #620]	@ (80011a0 <test_all_strobe_commands+0x30c>)
 8000f32:	f007 fe2f 	bl	8008b94 <iprintf>
    }
    
    // Test 4: Calibrate Frequency Synthesizer
    printf("\n4. Calibrate Frequency Synthesizer\n\r");
 8000f36:	489b      	ldr	r0, [pc, #620]	@ (80011a4 <test_all_strobe_commands+0x310>)
 8000f38:	f007 fe2c 	bl	8008b94 <iprintf>
    hal_status = CC1201_CalFreqSynth(&status_byte);
 8000f3c:	1dbb      	adds	r3, r7, #6
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fbce 	bl	80006e0 <CC1201_CalFreqSynth>
 8000f44:	4603      	mov	r3, r0
 8000f46:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d108      	bne.n	8000f60 <test_all_strobe_commands+0xcc>
        print_cc1201_status(status_byte, "CALIBRATE");
 8000f4e:	79bb      	ldrb	r3, [r7, #6]
 8000f50:	4995      	ldr	r1, [pc, #596]	@ (80011a8 <test_all_strobe_commands+0x314>)
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ff30 	bl	8000db8 <print_cc1201_status>
        HAL_Delay(50); // Wait for calibration
 8000f58:	2032      	movs	r0, #50	@ 0x32
 8000f5a:	f001 feef 	bl	8002d3c <HAL_Delay>
 8000f5e:	e004      	b.n	8000f6a <test_all_strobe_commands+0xd6>
    } else {
        printf("  CALIBRATE FAILED - HAL Error: %d\n\r", hal_status);
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	4619      	mov	r1, r3
 8000f64:	4891      	ldr	r0, [pc, #580]	@ (80011ac <test_all_strobe_commands+0x318>)
 8000f66:	f007 fe15 	bl	8008b94 <iprintf>
    }
    
    // Test 5: Fast TX On
    printf("\n5. Fast TX On\n\r");
 8000f6a:	4891      	ldr	r0, [pc, #580]	@ (80011b0 <test_all_strobe_commands+0x31c>)
 8000f6c:	f007 fe12 	bl	8008b94 <iprintf>
    hal_status = CC1201_FastTxOn(&status_byte);
 8000f70:	1dbb      	adds	r3, r7, #6
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fba7 	bl	80006c6 <CC1201_FastTxOn>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d105      	bne.n	8000f8e <test_all_strobe_commands+0xfa>
        print_cc1201_status(status_byte, "FAST_TX_ON");
 8000f82:	79bb      	ldrb	r3, [r7, #6]
 8000f84:	498b      	ldr	r1, [pc, #556]	@ (80011b4 <test_all_strobe_commands+0x320>)
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff ff16 	bl	8000db8 <print_cc1201_status>
 8000f8c:	e004      	b.n	8000f98 <test_all_strobe_commands+0x104>
    } else {
        printf("  FAST_TX_ON FAILED - HAL Error: %d\n\r", hal_status);
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	4619      	mov	r1, r3
 8000f92:	4889      	ldr	r0, [pc, #548]	@ (80011b8 <test_all_strobe_commands+0x324>)
 8000f94:	f007 fdfe 	bl	8008b94 <iprintf>
    }
    
    // Test 6: Enter TX Mode
    printf("\n6. Enter TX Mode\n\r");
 8000f98:	4888      	ldr	r0, [pc, #544]	@ (80011bc <test_all_strobe_commands+0x328>)
 8000f9a:	f007 fdfb 	bl	8008b94 <iprintf>
    hal_status = CC1201_EnterTxMode(&status_byte);
 8000f9e:	1dbb      	adds	r3, r7, #6
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fbb7 	bl	8000714 <CC1201_EnterTxMode>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d108      	bne.n	8000fc2 <test_all_strobe_commands+0x12e>
        print_cc1201_status(status_byte, "TX_MODE");
 8000fb0:	79bb      	ldrb	r3, [r7, #6]
 8000fb2:	4983      	ldr	r1, [pc, #524]	@ (80011c0 <test_all_strobe_commands+0x32c>)
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff feff 	bl	8000db8 <print_cc1201_status>
        HAL_Delay(10);
 8000fba:	200a      	movs	r0, #10
 8000fbc:	f001 febe 	bl	8002d3c <HAL_Delay>
 8000fc0:	e004      	b.n	8000fcc <test_all_strobe_commands+0x138>
    } else {
        printf("  TX_MODE FAILED - HAL Error: %d\n\r", hal_status);
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	487f      	ldr	r0, [pc, #508]	@ (80011c4 <test_all_strobe_commands+0x330>)
 8000fc8:	f007 fde4 	bl	8008b94 <iprintf>
    }
    
    // Return to idle before RX test
    hal_status = CC1201_EnterIdleMode(&status_byte);
 8000fcc:	1dbb      	adds	r3, r7, #6
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fbad 	bl	800072e <CC1201_EnterIdleMode>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(10);
 8000fd8:	200a      	movs	r0, #10
 8000fda:	f001 feaf 	bl	8002d3c <HAL_Delay>
    
    // Test 7: Enter RX Mode
    printf("\n7. Enter RX Mode\n\r");
 8000fde:	487a      	ldr	r0, [pc, #488]	@ (80011c8 <test_all_strobe_commands+0x334>)
 8000fe0:	f007 fdd8 	bl	8008b94 <iprintf>
    hal_status = CC1201_EnterRxMode(&status_byte);
 8000fe4:	1dbb      	adds	r3, r7, #6
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fb87 	bl	80006fa <CC1201_EnterRxMode>
 8000fec:	4603      	mov	r3, r0
 8000fee:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d108      	bne.n	8001008 <test_all_strobe_commands+0x174>
        print_cc1201_status(status_byte, "RX_MODE");
 8000ff6:	79bb      	ldrb	r3, [r7, #6]
 8000ff8:	4974      	ldr	r1, [pc, #464]	@ (80011cc <test_all_strobe_commands+0x338>)
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fedc 	bl	8000db8 <print_cc1201_status>
        HAL_Delay(10);
 8001000:	200a      	movs	r0, #10
 8001002:	f001 fe9b 	bl	8002d3c <HAL_Delay>
 8001006:	e004      	b.n	8001012 <test_all_strobe_commands+0x17e>
    } else {
        printf("  RX_MODE FAILED - HAL Error: %d\n\r", hal_status);
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	4619      	mov	r1, r3
 800100c:	4870      	ldr	r0, [pc, #448]	@ (80011d0 <test_all_strobe_commands+0x33c>)
 800100e:	f007 fdc1 	bl	8008b94 <iprintf>
    }
    
    // Test 8: Flush RX FIFO
    printf("\n8. Flush RX FIFO\n\r");
 8001012:	4870      	ldr	r0, [pc, #448]	@ (80011d4 <test_all_strobe_commands+0x340>)
 8001014:	f007 fdbe 	bl	8008b94 <iprintf>
    hal_status = CC1201_FlushRxFifo(&status_byte);
 8001018:	1dbb      	adds	r3, r7, #6
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fbbb 	bl	8000796 <CC1201_FlushRxFifo>
 8001020:	4603      	mov	r3, r0
 8001022:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d105      	bne.n	8001036 <test_all_strobe_commands+0x1a2>
        print_cc1201_status(status_byte, "FLUSH_RX");
 800102a:	79bb      	ldrb	r3, [r7, #6]
 800102c:	496a      	ldr	r1, [pc, #424]	@ (80011d8 <test_all_strobe_commands+0x344>)
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fec2 	bl	8000db8 <print_cc1201_status>
 8001034:	e004      	b.n	8001040 <test_all_strobe_commands+0x1ac>
    } else {
        printf("  FLUSH_RX FAILED - HAL Error: %d\n\r", hal_status);
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	4619      	mov	r1, r3
 800103a:	4868      	ldr	r0, [pc, #416]	@ (80011dc <test_all_strobe_commands+0x348>)
 800103c:	f007 fdaa 	bl	8008b94 <iprintf>
    }
    
    // Test 9: Flush TX FIFO
    printf("\n9. Flush TX FIFO\n\r");
 8001040:	4867      	ldr	r0, [pc, #412]	@ (80011e0 <test_all_strobe_commands+0x34c>)
 8001042:	f007 fda7 	bl	8008b94 <iprintf>
    hal_status = CC1201_FlushTxFifo(&status_byte);
 8001046:	1dbb      	adds	r3, r7, #6
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fbb1 	bl	80007b0 <CC1201_FlushTxFifo>
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d105      	bne.n	8001064 <test_all_strobe_commands+0x1d0>
        print_cc1201_status(status_byte, "FLUSH_TX");
 8001058:	79bb      	ldrb	r3, [r7, #6]
 800105a:	4962      	ldr	r1, [pc, #392]	@ (80011e4 <test_all_strobe_commands+0x350>)
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff feab 	bl	8000db8 <print_cc1201_status>
 8001062:	e004      	b.n	800106e <test_all_strobe_commands+0x1da>
    } else {
        printf("  FLUSH_TX FAILED - HAL Error: %d\n\r", hal_status);
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	4619      	mov	r1, r3
 8001068:	485f      	ldr	r0, [pc, #380]	@ (80011e8 <test_all_strobe_commands+0x354>)
 800106a:	f007 fd93 	bl	8008b94 <iprintf>
    }
    
    // Test 10: Auto Frequency Compensation
    printf("\n10. Auto Frequency Compensation\n\r");
 800106e:	485f      	ldr	r0, [pc, #380]	@ (80011ec <test_all_strobe_commands+0x358>)
 8001070:	f007 fd90 	bl	8008b94 <iprintf>
    hal_status = CC1201_AutoFreqComp(&status_byte);
 8001074:	1dbb      	adds	r3, r7, #6
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fb66 	bl	8000748 <CC1201_AutoFreqComp>
 800107c:	4603      	mov	r3, r0
 800107e:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d105      	bne.n	8001092 <test_all_strobe_commands+0x1fe>
        print_cc1201_status(status_byte, "AFC");
 8001086:	79bb      	ldrb	r3, [r7, #6]
 8001088:	4959      	ldr	r1, [pc, #356]	@ (80011f0 <test_all_strobe_commands+0x35c>)
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fe94 	bl	8000db8 <print_cc1201_status>
 8001090:	e004      	b.n	800109c <test_all_strobe_commands+0x208>
    } else {
        printf("  AFC FAILED - HAL Error: %d\n\r", hal_status);
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	4619      	mov	r1, r3
 8001096:	4857      	ldr	r0, [pc, #348]	@ (80011f4 <test_all_strobe_commands+0x360>)
 8001098:	f007 fd7c 	bl	8008b94 <iprintf>
    }
    
    // Test 11: Wake on Radio
    printf("\n11. Wake on Radio\n\r");
 800109c:	4856      	ldr	r0, [pc, #344]	@ (80011f8 <test_all_strobe_commands+0x364>)
 800109e:	f007 fd79 	bl	8008b94 <iprintf>
    hal_status = CC1201_WakeOnRadio(&status_byte);
 80010a2:	1dbb      	adds	r3, r7, #6
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fb5c 	bl	8000762 <CC1201_WakeOnRadio>
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d105      	bne.n	80010c0 <test_all_strobe_commands+0x22c>
        print_cc1201_status(status_byte, "WOR");
 80010b4:	79bb      	ldrb	r3, [r7, #6]
 80010b6:	4951      	ldr	r1, [pc, #324]	@ (80011fc <test_all_strobe_commands+0x368>)
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fe7d 	bl	8000db8 <print_cc1201_status>
 80010be:	e004      	b.n	80010ca <test_all_strobe_commands+0x236>
    } else {
        printf("  WOR FAILED - HAL Error: %d\n\r", hal_status);
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	4619      	mov	r1, r3
 80010c4:	484e      	ldr	r0, [pc, #312]	@ (8001200 <test_all_strobe_commands+0x36c>)
 80010c6:	f007 fd65 	bl	8008b94 <iprintf>
    }
    
    // Test 12: WOR Reset
    printf("\n12. WOR Reset\n\r");
 80010ca:	484e      	ldr	r0, [pc, #312]	@ (8001204 <test_all_strobe_commands+0x370>)
 80010cc:	f007 fd62 	bl	8008b94 <iprintf>
    hal_status = CC1201_WorReset(&status_byte);
 80010d0:	1dbb      	adds	r3, r7, #6
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff fb79 	bl	80007ca <CC1201_WorReset>
 80010d8:	4603      	mov	r3, r0
 80010da:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d105      	bne.n	80010ee <test_all_strobe_commands+0x25a>
        print_cc1201_status(status_byte, "WOR_RESET");
 80010e2:	79bb      	ldrb	r3, [r7, #6]
 80010e4:	4948      	ldr	r1, [pc, #288]	@ (8001208 <test_all_strobe_commands+0x374>)
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fe66 	bl	8000db8 <print_cc1201_status>
 80010ec:	e004      	b.n	80010f8 <test_all_strobe_commands+0x264>
    } else {
        printf("  WOR_RESET FAILED - HAL Error: %d\n\r", hal_status);
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	4619      	mov	r1, r3
 80010f2:	4846      	ldr	r0, [pc, #280]	@ (800120c <test_all_strobe_commands+0x378>)
 80010f4:	f007 fd4e 	bl	8008b94 <iprintf>
    }
    
    // Test 13: Enter Sleep Mode
    printf("\n13. Enter Sleep Mode\n\r");
 80010f8:	4845      	ldr	r0, [pc, #276]	@ (8001210 <test_all_strobe_commands+0x37c>)
 80010fa:	f007 fd4b 	bl	8008b94 <iprintf>
    hal_status = CC1201_EnterSleepMode(&status_byte);
 80010fe:	1dbb      	adds	r3, r7, #6
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fb3b 	bl	800077c <CC1201_EnterSleepMode>
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d108      	bne.n	8001122 <test_all_strobe_commands+0x28e>
        print_cc1201_status(status_byte, "SLEEP");
 8001110:	79bb      	ldrb	r3, [r7, #6]
 8001112:	4940      	ldr	r1, [pc, #256]	@ (8001214 <test_all_strobe_commands+0x380>)
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fe4f 	bl	8000db8 <print_cc1201_status>
        HAL_Delay(100);
 800111a:	2064      	movs	r0, #100	@ 0x64
 800111c:	f001 fe0e 	bl	8002d3c <HAL_Delay>
 8001120:	e004      	b.n	800112c <test_all_strobe_commands+0x298>
    } else {
        printf("  SLEEP FAILED - HAL Error: %d\n\r", hal_status);
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	4619      	mov	r1, r3
 8001126:	483c      	ldr	r0, [pc, #240]	@ (8001218 <test_all_strobe_commands+0x384>)
 8001128:	f007 fd34 	bl	8008b94 <iprintf>
    }
    
    // Test 14: Wake up from sleep with NOP
    printf("\n14. Wake up from Sleep with NOP\n\r");
 800112c:	483b      	ldr	r0, [pc, #236]	@ (800121c <test_all_strobe_commands+0x388>)
 800112e:	f007 fd31 	bl	8008b94 <iprintf>
    hal_status = CC1201_Nop(&status_byte);
 8001132:	1dbb      	adds	r3, r7, #6
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fb55 	bl	80007e4 <CC1201_Nop>
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d105      	bne.n	8001150 <test_all_strobe_commands+0x2bc>
        print_cc1201_status(status_byte, "WAKE_UP");
 8001144:	79bb      	ldrb	r3, [r7, #6]
 8001146:	4936      	ldr	r1, [pc, #216]	@ (8001220 <test_all_strobe_commands+0x38c>)
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fe35 	bl	8000db8 <print_cc1201_status>
 800114e:	e004      	b.n	800115a <test_all_strobe_commands+0x2c6>
    } else {
        printf("  WAKE_UP FAILED - HAL Error: %d\n\r", hal_status);
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	4619      	mov	r1, r3
 8001154:	4833      	ldr	r0, [pc, #204]	@ (8001224 <test_all_strobe_commands+0x390>)
 8001156:	f007 fd1d 	bl	8008b94 <iprintf>
    }
    
    // Return to idle state
    hal_status = CC1201_EnterIdleMode(&status_byte);
 800115a:	1dbb      	adds	r3, r7, #6
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fae6 	bl	800072e <CC1201_EnterIdleMode>
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
    print_cc1201_status(status_byte, "FINAL_IDLE");
 8001166:	79bb      	ldrb	r3, [r7, #6]
 8001168:	492f      	ldr	r1, [pc, #188]	@ (8001228 <test_all_strobe_commands+0x394>)
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fe24 	bl	8000db8 <print_cc1201_status>
    
    printf("=== STROBE COMMAND TEST COMPLETE ===\n\r");
 8001170:	482e      	ldr	r0, [pc, #184]	@ (800122c <test_all_strobe_commands+0x398>)
 8001172:	f007 fd0f 	bl	8008b94 <iprintf>
}
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	0800997c 	.word	0x0800997c
 8001180:	080099ac 	.word	0x080099ac
 8001184:	080099d0 	.word	0x080099d0
 8001188:	080099f4 	.word	0x080099f4
 800118c:	080099d4 	.word	0x080099d4
 8001190:	08009a08 	.word	0x08009a08
 8001194:	08009a10 	.word	0x08009a10
 8001198:	08009a34 	.word	0x08009a34
 800119c:	08009a4c 	.word	0x08009a4c
 80011a0:	08009a54 	.word	0x08009a54
 80011a4:	08009a74 	.word	0x08009a74
 80011a8:	08009a9c 	.word	0x08009a9c
 80011ac:	08009aa8 	.word	0x08009aa8
 80011b0:	08009ad0 	.word	0x08009ad0
 80011b4:	08009ae4 	.word	0x08009ae4
 80011b8:	08009af0 	.word	0x08009af0
 80011bc:	08009b18 	.word	0x08009b18
 80011c0:	08009b2c 	.word	0x08009b2c
 80011c4:	08009b34 	.word	0x08009b34
 80011c8:	08009b58 	.word	0x08009b58
 80011cc:	08009b6c 	.word	0x08009b6c
 80011d0:	08009b74 	.word	0x08009b74
 80011d4:	08009b98 	.word	0x08009b98
 80011d8:	08009bac 	.word	0x08009bac
 80011dc:	08009bb8 	.word	0x08009bb8
 80011e0:	08009bdc 	.word	0x08009bdc
 80011e4:	08009bf0 	.word	0x08009bf0
 80011e8:	08009bfc 	.word	0x08009bfc
 80011ec:	08009c20 	.word	0x08009c20
 80011f0:	08009c44 	.word	0x08009c44
 80011f4:	08009c48 	.word	0x08009c48
 80011f8:	08009c68 	.word	0x08009c68
 80011fc:	08009c80 	.word	0x08009c80
 8001200:	08009c84 	.word	0x08009c84
 8001204:	08009ca4 	.word	0x08009ca4
 8001208:	08009cb8 	.word	0x08009cb8
 800120c:	08009cc4 	.word	0x08009cc4
 8001210:	08009cec 	.word	0x08009cec
 8001214:	08009d04 	.word	0x08009d04
 8001218:	08009d0c 	.word	0x08009d0c
 800121c:	08009d30 	.word	0x08009d30
 8001220:	08009d54 	.word	0x08009d54
 8001224:	08009d5c 	.word	0x08009d5c
 8001228:	08009d80 	.word	0x08009d80
 800122c:	08009d8c 	.word	0x08009d8c

08001230 <test_status_registers>:

// Test reading status registers
void test_status_registers(void) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
    uint8_t data = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef hal_status;
    
    printf("\n=== STATUS REGISTER TEST ===\n\r");
 800123a:	4827      	ldr	r0, [pc, #156]	@ (80012d8 <test_status_registers+0xa8>)
 800123c:	f007 fcaa 	bl	8008b94 <iprintf>
    
    // Test MARC State
    printf("1. Reading MARC State\n\r");
 8001240:	4826      	ldr	r0, [pc, #152]	@ (80012dc <test_status_registers+0xac>)
 8001242:	f007 fca7 	bl	8008b94 <iprintf>
    hal_status = CC1201_ReadMARCState(&data);
 8001246:	1dbb      	adds	r3, r7, #6
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fb61 	bl	8000910 <CC1201_ReadMARCState>
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d105      	bne.n	8001264 <test_status_registers+0x34>
        printf("  MARC State: 0x%02X\n\r", data);
 8001258:	79bb      	ldrb	r3, [r7, #6]
 800125a:	4619      	mov	r1, r3
 800125c:	4820      	ldr	r0, [pc, #128]	@ (80012e0 <test_status_registers+0xb0>)
 800125e:	f007 fc99 	bl	8008b94 <iprintf>
 8001262:	e004      	b.n	800126e <test_status_registers+0x3e>
    } else {
        printf("  MARC State read FAILED - HAL Error: %d\n\r", hal_status);
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	4619      	mov	r1, r3
 8001268:	481e      	ldr	r0, [pc, #120]	@ (80012e4 <test_status_registers+0xb4>)
 800126a:	f007 fc93 	bl	8008b94 <iprintf>
    }
    
    // Test RX Bytes
    printf("2. Reading RX FIFO Bytes\n\r");
 800126e:	481e      	ldr	r0, [pc, #120]	@ (80012e8 <test_status_registers+0xb8>)
 8001270:	f007 fc90 	bl	8008b94 <iprintf>
    hal_status = CC1201_GetNumRXBytes(&data);
 8001274:	1dbb      	adds	r3, r7, #6
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fb58 	bl	800092c <CC1201_GetNumRXBytes>
 800127c:	4603      	mov	r3, r0
 800127e:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d105      	bne.n	8001292 <test_status_registers+0x62>
        printf("  RX FIFO Bytes: %d\n\r", data);
 8001286:	79bb      	ldrb	r3, [r7, #6]
 8001288:	4619      	mov	r1, r3
 800128a:	4818      	ldr	r0, [pc, #96]	@ (80012ec <test_status_registers+0xbc>)
 800128c:	f007 fc82 	bl	8008b94 <iprintf>
 8001290:	e004      	b.n	800129c <test_status_registers+0x6c>
    } else {
        printf("  RX Bytes read FAILED - HAL Error: %d\n\r", hal_status);
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	4619      	mov	r1, r3
 8001296:	4816      	ldr	r0, [pc, #88]	@ (80012f0 <test_status_registers+0xc0>)
 8001298:	f007 fc7c 	bl	8008b94 <iprintf>
    }
    
    // Test TX Bytes
    printf("3. Reading TX FIFO Bytes\n\r");
 800129c:	4815      	ldr	r0, [pc, #84]	@ (80012f4 <test_status_registers+0xc4>)
 800129e:	f007 fc79 	bl	8008b94 <iprintf>
    hal_status = CC1201_GetNumTXBytes(&data);
 80012a2:	1dbb      	adds	r3, r7, #6
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fb4f 	bl	8000948 <CC1201_GetNumTXBytes>
 80012aa:	4603      	mov	r3, r0
 80012ac:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d105      	bne.n	80012c0 <test_status_registers+0x90>
        printf("  TX FIFO Bytes: %d\n\r", data);
 80012b4:	79bb      	ldrb	r3, [r7, #6]
 80012b6:	4619      	mov	r1, r3
 80012b8:	480f      	ldr	r0, [pc, #60]	@ (80012f8 <test_status_registers+0xc8>)
 80012ba:	f007 fc6b 	bl	8008b94 <iprintf>
 80012be:	e004      	b.n	80012ca <test_status_registers+0x9a>
    } else {
        printf("  TX Bytes read FAILED - HAL Error: %d\n\r", hal_status);
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	4619      	mov	r1, r3
 80012c4:	480d      	ldr	r0, [pc, #52]	@ (80012fc <test_status_registers+0xcc>)
 80012c6:	f007 fc65 	bl	8008b94 <iprintf>
    }
    
    printf("=== STATUS REGISTER TEST COMPLETE ===\n\r");
 80012ca:	480d      	ldr	r0, [pc, #52]	@ (8001300 <test_status_registers+0xd0>)
 80012cc:	f007 fc62 	bl	8008b94 <iprintf>
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	08009db4 	.word	0x08009db4
 80012dc:	08009dd4 	.word	0x08009dd4
 80012e0:	08009dec 	.word	0x08009dec
 80012e4:	08009e04 	.word	0x08009e04
 80012e8:	08009e30 	.word	0x08009e30
 80012ec:	08009e4c 	.word	0x08009e4c
 80012f0:	08009e64 	.word	0x08009e64
 80012f4:	08009e90 	.word	0x08009e90
 80012f8:	08009eac 	.word	0x08009eac
 80012fc:	08009ec4 	.word	0x08009ec4
 8001300:	08009ef0 	.word	0x08009ef0

08001304 <test_register_operations>:

// Test register read/write operations
void test_register_operations(void) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef hal_status;
    uint8_t write_data = 0x55; // Test pattern
 800130a:	2355      	movs	r3, #85	@ 0x55
 800130c:	71fb      	strb	r3, [r7, #7]
    uint8_t read_data = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	713b      	strb	r3, [r7, #4]
    
    printf("\n=== REGISTER READ/WRITE TEST ===\n\r");
 8001312:	4831      	ldr	r0, [pc, #196]	@ (80013d8 <test_register_operations+0xd4>)
 8001314:	f007 fc3e 	bl	8008b94 <iprintf>
    
    // Test with a safe register (IOCFG2 - 0x01)
    printf("1. Testing Register Write/Read (IOCFG2)\n\r");
 8001318:	4830      	ldr	r0, [pc, #192]	@ (80013dc <test_register_operations+0xd8>)
 800131a:	f007 fc3b 	bl	8008b94 <iprintf>
    
    // First read original value
    hal_status = CC1201_ReadStatus(0x01, &read_data);
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	4619      	mov	r1, r3
 8001322:	2001      	movs	r0, #1
 8001324:	f7ff fa6c 	bl	8000800 <CC1201_ReadStatus>
 8001328:	4603      	mov	r3, r0
 800132a:	71bb      	strb	r3, [r7, #6]
    if (hal_status == HAL_OK) {
 800132c:	79bb      	ldrb	r3, [r7, #6]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d146      	bne.n	80013c0 <test_register_operations+0xbc>
        printf("  Original IOCFG2 value: 0x%02X\n\r", read_data);
 8001332:	793b      	ldrb	r3, [r7, #4]
 8001334:	4619      	mov	r1, r3
 8001336:	482a      	ldr	r0, [pc, #168]	@ (80013e0 <test_register_operations+0xdc>)
 8001338:	f007 fc2c 	bl	8008b94 <iprintf>
        uint8_t original_value = read_data;
 800133c:	793b      	ldrb	r3, [r7, #4]
 800133e:	717b      	strb	r3, [r7, #5]
        
        // Write test pattern
        hal_status = CC1201_WriteRegister(0x01, write_data);
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	4619      	mov	r1, r3
 8001344:	2001      	movs	r0, #1
 8001346:	f7ff faa9 	bl	800089c <CC1201_WriteRegister>
 800134a:	4603      	mov	r3, r0
 800134c:	71bb      	strb	r3, [r7, #6]
        if (hal_status == HAL_OK) {
 800134e:	79bb      	ldrb	r3, [r7, #6]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d12f      	bne.n	80013b4 <test_register_operations+0xb0>
            printf("  Write 0x%02X to IOCFG2: OK\n\r", write_data);
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	4619      	mov	r1, r3
 8001358:	4822      	ldr	r0, [pc, #136]	@ (80013e4 <test_register_operations+0xe0>)
 800135a:	f007 fc1b 	bl	8008b94 <iprintf>
            
            // Read back
            hal_status = CC1201_ReadStatus(0x01, &read_data);
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	4619      	mov	r1, r3
 8001362:	2001      	movs	r0, #1
 8001364:	f7ff fa4c 	bl	8000800 <CC1201_ReadStatus>
 8001368:	4603      	mov	r3, r0
 800136a:	71bb      	strb	r3, [r7, #6]
            if (hal_status == HAL_OK) {
 800136c:	79bb      	ldrb	r3, [r7, #6]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d11a      	bne.n	80013a8 <test_register_operations+0xa4>
                printf("  Read back: 0x%02X\n\r", read_data);
 8001372:	793b      	ldrb	r3, [r7, #4]
 8001374:	4619      	mov	r1, r3
 8001376:	481c      	ldr	r0, [pc, #112]	@ (80013e8 <test_register_operations+0xe4>)
 8001378:	f007 fc0c 	bl	8008b94 <iprintf>
                if (read_data == write_data) {
 800137c:	793b      	ldrb	r3, [r7, #4]
 800137e:	79fa      	ldrb	r2, [r7, #7]
 8001380:	429a      	cmp	r2, r3
 8001382:	d103      	bne.n	800138c <test_register_operations+0x88>
                    printf("  ✓ Register write/read SUCCESS!\n\r");
 8001384:	4819      	ldr	r0, [pc, #100]	@ (80013ec <test_register_operations+0xe8>)
 8001386:	f007 fc05 	bl	8008b94 <iprintf>
 800138a:	e002      	b.n	8001392 <test_register_operations+0x8e>
                } else {
                    printf("  ✗ Register write/read FAILED - Data mismatch\n\r");
 800138c:	4818      	ldr	r0, [pc, #96]	@ (80013f0 <test_register_operations+0xec>)
 800138e:	f007 fc01 	bl	8008b94 <iprintf>
                }
                
                // Restore original value
                CC1201_WriteRegister(0x01, original_value);
 8001392:	797b      	ldrb	r3, [r7, #5]
 8001394:	4619      	mov	r1, r3
 8001396:	2001      	movs	r0, #1
 8001398:	f7ff fa80 	bl	800089c <CC1201_WriteRegister>
                printf("  Restored original value: 0x%02X\n\r", original_value);
 800139c:	797b      	ldrb	r3, [r7, #5]
 800139e:	4619      	mov	r1, r3
 80013a0:	4814      	ldr	r0, [pc, #80]	@ (80013f4 <test_register_operations+0xf0>)
 80013a2:	f007 fbf7 	bl	8008b94 <iprintf>
 80013a6:	e010      	b.n	80013ca <test_register_operations+0xc6>
            } else {
                printf("  Read back FAILED - HAL Error: %d\n\r", hal_status);
 80013a8:	79bb      	ldrb	r3, [r7, #6]
 80013aa:	4619      	mov	r1, r3
 80013ac:	4812      	ldr	r0, [pc, #72]	@ (80013f8 <test_register_operations+0xf4>)
 80013ae:	f007 fbf1 	bl	8008b94 <iprintf>
 80013b2:	e00a      	b.n	80013ca <test_register_operations+0xc6>
            }
        } else {
            printf("  Write FAILED - HAL Error: %d\n\r", hal_status);
 80013b4:	79bb      	ldrb	r3, [r7, #6]
 80013b6:	4619      	mov	r1, r3
 80013b8:	4810      	ldr	r0, [pc, #64]	@ (80013fc <test_register_operations+0xf8>)
 80013ba:	f007 fbeb 	bl	8008b94 <iprintf>
 80013be:	e004      	b.n	80013ca <test_register_operations+0xc6>
        }
    } else {
        printf("  Initial read FAILED - HAL Error: %d\n\r", hal_status);
 80013c0:	79bb      	ldrb	r3, [r7, #6]
 80013c2:	4619      	mov	r1, r3
 80013c4:	480e      	ldr	r0, [pc, #56]	@ (8001400 <test_register_operations+0xfc>)
 80013c6:	f007 fbe5 	bl	8008b94 <iprintf>
    }
    
    printf("=== REGISTER TEST COMPLETE ===\n\r");
 80013ca:	480e      	ldr	r0, [pc, #56]	@ (8001404 <test_register_operations+0x100>)
 80013cc:	f007 fbe2 	bl	8008b94 <iprintf>
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	08009f18 	.word	0x08009f18
 80013dc:	08009f3c 	.word	0x08009f3c
 80013e0:	08009f68 	.word	0x08009f68
 80013e4:	08009f8c 	.word	0x08009f8c
 80013e8:	08009fac 	.word	0x08009fac
 80013ec:	08009fc4 	.word	0x08009fc4
 80013f0:	08009fec 	.word	0x08009fec
 80013f4:	0800a020 	.word	0x0800a020
 80013f8:	0800a044 	.word	0x0800a044
 80013fc:	0800a06c 	.word	0x0800a06c
 8001400:	0800a090 	.word	0x0800a090
 8001404:	0800a0b8 	.word	0x0800a0b8

08001408 <test_configuration_write>:

// Test configuration writing
void test_configuration_write(void) {
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef hal_status;
    
    printf("\n=== CONFIGURATION WRITE TEST ===\n\r");
 800140e:	4825      	ldr	r0, [pc, #148]	@ (80014a4 <test_configuration_write+0x9c>)
 8001410:	f007 fbc0 	bl	8008b94 <iprintf>
    
    const registerSetting_t* settings = CC1201_GetPreferredSettings();
 8001414:	f7ff fcc6 	bl	8000da4 <CC1201_GetPreferredSettings>
 8001418:	6078      	str	r0, [r7, #4]
    uint16_t num_settings = CC1201_GetNumPreferredSettings();
 800141a:	f7ff fcba 	bl	8000d92 <CC1201_GetNumPreferredSettings>
 800141e:	4603      	mov	r3, r0
 8001420:	807b      	strh	r3, [r7, #2]
    
    printf("Writing %d configuration registers...\n\r", num_settings);
 8001422:	887b      	ldrh	r3, [r7, #2]
 8001424:	4619      	mov	r1, r3
 8001426:	4820      	ldr	r0, [pc, #128]	@ (80014a8 <test_configuration_write+0xa0>)
 8001428:	f007 fbb4 	bl	8008b94 <iprintf>
    
    hal_status = CC1201_WriteRegisterConfig(settings, num_settings);
 800142c:	887b      	ldrh	r3, [r7, #2]
 800142e:	4619      	mov	r1, r3
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff fc75 	bl	8000d20 <CC1201_WriteRegisterConfig>
 8001436:	4603      	mov	r3, r0
 8001438:	707b      	strb	r3, [r7, #1]
    if (hal_status == HAL_OK) {
 800143a:	787b      	ldrb	r3, [r7, #1]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d124      	bne.n	800148a <test_configuration_write+0x82>
        printf("  ✓ Configuration write SUCCESS!\n\r");
 8001440:	481a      	ldr	r0, [pc, #104]	@ (80014ac <test_configuration_write+0xa4>)
 8001442:	f007 fba7 	bl	8008b94 <iprintf>
        
        // Verify a few key registers
        uint8_t read_data;
        printf("Verifying key registers:\n\r");
 8001446:	481a      	ldr	r0, [pc, #104]	@ (80014b0 <test_configuration_write+0xa8>)
 8001448:	f007 fba4 	bl	8008b94 <iprintf>
        
        // Check SYNC3 (should be 0x55)
        hal_status = CC1201_ReadStatus(0x03, &read_data);
 800144c:	463b      	mov	r3, r7
 800144e:	4619      	mov	r1, r3
 8001450:	2003      	movs	r0, #3
 8001452:	f7ff f9d5 	bl	8000800 <CC1201_ReadStatus>
 8001456:	4603      	mov	r3, r0
 8001458:	707b      	strb	r3, [r7, #1]
        if (hal_status == HAL_OK) {
 800145a:	787b      	ldrb	r3, [r7, #1]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d104      	bne.n	800146a <test_configuration_write+0x62>
            printf("  SYNC3: 0x%02X (expected: 0x55)\n\r", read_data);
 8001460:	783b      	ldrb	r3, [r7, #0]
 8001462:	4619      	mov	r1, r3
 8001464:	4813      	ldr	r0, [pc, #76]	@ (80014b4 <test_configuration_write+0xac>)
 8001466:	f007 fb95 	bl	8008b94 <iprintf>
        }
        
        // Check PKT_LEN (should be 0xFF)
        hal_status = CC1201_ReadStatus(0x25, &read_data);
 800146a:	463b      	mov	r3, r7
 800146c:	4619      	mov	r1, r3
 800146e:	2025      	movs	r0, #37	@ 0x25
 8001470:	f7ff f9c6 	bl	8000800 <CC1201_ReadStatus>
 8001474:	4603      	mov	r3, r0
 8001476:	707b      	strb	r3, [r7, #1]
        if (hal_status == HAL_OK) {
 8001478:	787b      	ldrb	r3, [r7, #1]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10a      	bne.n	8001494 <test_configuration_write+0x8c>
            printf("  PKT_LEN: 0x%02X (expected: 0xFF)\n\r", read_data);
 800147e:	783b      	ldrb	r3, [r7, #0]
 8001480:	4619      	mov	r1, r3
 8001482:	480d      	ldr	r0, [pc, #52]	@ (80014b8 <test_configuration_write+0xb0>)
 8001484:	f007 fb86 	bl	8008b94 <iprintf>
 8001488:	e004      	b.n	8001494 <test_configuration_write+0x8c>
        }
        
    } else {
        printf("  ✗ Configuration write FAILED - HAL Error: %d\n\r", hal_status);
 800148a:	787b      	ldrb	r3, [r7, #1]
 800148c:	4619      	mov	r1, r3
 800148e:	480b      	ldr	r0, [pc, #44]	@ (80014bc <test_configuration_write+0xb4>)
 8001490:	f007 fb80 	bl	8008b94 <iprintf>
    }
    
    printf("=== CONFIGURATION TEST COMPLETE ===\n\r");
 8001494:	480a      	ldr	r0, [pc, #40]	@ (80014c0 <test_configuration_write+0xb8>)
 8001496:	f007 fb7d 	bl	8008b94 <iprintf>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	0800a0dc 	.word	0x0800a0dc
 80014a8:	0800a100 	.word	0x0800a100
 80014ac:	0800a128 	.word	0x0800a128
 80014b0:	0800a150 	.word	0x0800a150
 80014b4:	0800a16c 	.word	0x0800a16c
 80014b8:	0800a190 	.word	0x0800a190
 80014bc:	0800a1b8 	.word	0x0800a1b8
 80014c0:	0800a1ec 	.word	0x0800a1ec

080014c4 <test_fifo_operations>:

// Test FIFO operations (read/write buffer tests)
void test_fifo_operations(void) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef hal_status;
    uint8_t status_byte = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	777b      	strb	r3, [r7, #29]
    
    printf("\n=== FIFO OPERATIONS TEST ===\n\r");
 80014ce:	489b      	ldr	r0, [pc, #620]	@ (800173c <test_fifo_operations+0x278>)
 80014d0:	f007 fb60 	bl	8008b94 <iprintf>
    
    // First ensure we're in IDLE state
    hal_status = CC1201_EnterIdleMode(&status_byte);
 80014d4:	f107 031d 	add.w	r3, r7, #29
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff f928 	bl	800072e <CC1201_EnterIdleMode>
 80014de:	4603      	mov	r3, r0
 80014e0:	77fb      	strb	r3, [r7, #31]
    if (hal_status != HAL_OK) {
 80014e2:	7ffb      	ldrb	r3, [r7, #31]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d003      	beq.n	80014f0 <test_fifo_operations+0x2c>
        printf("  ✗ Failed to enter IDLE mode\n\r");
 80014e8:	4895      	ldr	r0, [pc, #596]	@ (8001740 <test_fifo_operations+0x27c>)
 80014ea:	f007 fb53 	bl	8008b94 <iprintf>
 80014ee:	e121      	b.n	8001734 <test_fifo_operations+0x270>
        return;
    }
    print_cc1201_status(status_byte, "IDLE_FOR_FIFO");
 80014f0:	7f7b      	ldrb	r3, [r7, #29]
 80014f2:	4994      	ldr	r1, [pc, #592]	@ (8001744 <test_fifo_operations+0x280>)
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fc5f 	bl	8000db8 <print_cc1201_status>
    
    // Test 1: Flush both FIFOs to start clean
    printf("1. Flushing FIFOs\n\r");
 80014fa:	4893      	ldr	r0, [pc, #588]	@ (8001748 <test_fifo_operations+0x284>)
 80014fc:	f007 fb4a 	bl	8008b94 <iprintf>
    hal_status = CC1201_FlushTxFifo(&status_byte);
 8001500:	f107 031d 	add.w	r3, r7, #29
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f953 	bl	80007b0 <CC1201_FlushTxFifo>
 800150a:	4603      	mov	r3, r0
 800150c:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 800150e:	7ffb      	ldrb	r3, [r7, #31]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d104      	bne.n	800151e <test_fifo_operations+0x5a>
        print_cc1201_status(status_byte, "FLUSH_TX");
 8001514:	7f7b      	ldrb	r3, [r7, #29]
 8001516:	498d      	ldr	r1, [pc, #564]	@ (800174c <test_fifo_operations+0x288>)
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff fc4d 	bl	8000db8 <print_cc1201_status>
    }
    
    hal_status = CC1201_FlushRxFifo(&status_byte);
 800151e:	f107 031d 	add.w	r3, r7, #29
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff f937 	bl	8000796 <CC1201_FlushRxFifo>
 8001528:	4603      	mov	r3, r0
 800152a:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 800152c:	7ffb      	ldrb	r3, [r7, #31]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d104      	bne.n	800153c <test_fifo_operations+0x78>
        print_cc1201_status(status_byte, "FLUSH_RX");
 8001532:	7f7b      	ldrb	r3, [r7, #29]
 8001534:	4986      	ldr	r1, [pc, #536]	@ (8001750 <test_fifo_operations+0x28c>)
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fc3e 	bl	8000db8 <print_cc1201_status>
    }
    
    // Test 2: Check initial FIFO byte counts
    printf("2. Initial FIFO status\n\r");
 800153c:	4885      	ldr	r0, [pc, #532]	@ (8001754 <test_fifo_operations+0x290>)
 800153e:	f007 fb29 	bl	8008b94 <iprintf>
    uint8_t tx_bytes = 0, rx_bytes = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	773b      	strb	r3, [r7, #28]
 8001546:	2300      	movs	r3, #0
 8001548:	76fb      	strb	r3, [r7, #27]
    
    hal_status = CC1201_GetNumTXBytes(&tx_bytes);
 800154a:	f107 031c 	add.w	r3, r7, #28
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff f9fa 	bl	8000948 <CC1201_GetNumTXBytes>
 8001554:	4603      	mov	r3, r0
 8001556:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 8001558:	7ffb      	ldrb	r3, [r7, #31]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d104      	bne.n	8001568 <test_fifo_operations+0xa4>
        printf("  TX FIFO bytes: %d\n\r", tx_bytes);
 800155e:	7f3b      	ldrb	r3, [r7, #28]
 8001560:	4619      	mov	r1, r3
 8001562:	487d      	ldr	r0, [pc, #500]	@ (8001758 <test_fifo_operations+0x294>)
 8001564:	f007 fb16 	bl	8008b94 <iprintf>
    }
    
    hal_status = CC1201_GetNumRXBytes(&rx_bytes);
 8001568:	f107 031b 	add.w	r3, r7, #27
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff f9dd 	bl	800092c <CC1201_GetNumRXBytes>
 8001572:	4603      	mov	r3, r0
 8001574:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 8001576:	7ffb      	ldrb	r3, [r7, #31]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d104      	bne.n	8001586 <test_fifo_operations+0xc2>
        printf("  RX FIFO bytes: %d\n\r", rx_bytes);
 800157c:	7efb      	ldrb	r3, [r7, #27]
 800157e:	4619      	mov	r1, r3
 8001580:	4876      	ldr	r0, [pc, #472]	@ (800175c <test_fifo_operations+0x298>)
 8001582:	f007 fb07 	bl	8008b94 <iprintf>
    }
    
    // Test 3: Write test data to TX FIFO
    printf("3. Writing test data to TX FIFO\n\r");
 8001586:	4876      	ldr	r0, [pc, #472]	@ (8001760 <test_fifo_operations+0x29c>)
 8001588:	f007 fb04 	bl	8008b94 <iprintf>
    uint8_t test_data[] = {0xAA, 0x55, 0xCC, 0x33, 0xFF, 0x00, 0x11, 0x22};
 800158c:	4a75      	ldr	r2, [pc, #468]	@ (8001764 <test_fifo_operations+0x2a0>)
 800158e:	f107 0310 	add.w	r3, r7, #16
 8001592:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001596:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t test_data_length = sizeof(test_data);
 800159a:	2308      	movs	r3, #8
 800159c:	77bb      	strb	r3, [r7, #30]
    
    hal_status = CC1201_WriteTxFifo(test_data, test_data_length, &status_byte);
 800159e:	f107 021d 	add.w	r2, r7, #29
 80015a2:	7fb9      	ldrb	r1, [r7, #30]
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff f9db 	bl	8000964 <CC1201_WriteTxFifo>
 80015ae:	4603      	mov	r3, r0
 80015b0:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 80015b2:	7ffb      	ldrb	r3, [r7, #31]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d126      	bne.n	8001606 <test_fifo_operations+0x142>
        printf("  ✓ Wrote %d bytes to TX FIFO\n\r", test_data_length);
 80015b8:	7fbb      	ldrb	r3, [r7, #30]
 80015ba:	4619      	mov	r1, r3
 80015bc:	486a      	ldr	r0, [pc, #424]	@ (8001768 <test_fifo_operations+0x2a4>)
 80015be:	f007 fae9 	bl	8008b94 <iprintf>
        print_cc1201_status(status_byte, "TX_WRITE");
 80015c2:	7f7b      	ldrb	r3, [r7, #29]
 80015c4:	4969      	ldr	r1, [pc, #420]	@ (800176c <test_fifo_operations+0x2a8>)
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fbf6 	bl	8000db8 <print_cc1201_status>
        
        // Check TX FIFO count after write
        hal_status = CC1201_GetNumTXBytes(&tx_bytes);
 80015cc:	f107 031c 	add.w	r3, r7, #28
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff f9b9 	bl	8000948 <CC1201_GetNumTXBytes>
 80015d6:	4603      	mov	r3, r0
 80015d8:	77fb      	strb	r3, [r7, #31]
        if (hal_status == HAL_OK) {
 80015da:	7ffb      	ldrb	r3, [r7, #31]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d117      	bne.n	8001610 <test_fifo_operations+0x14c>
            printf("  TX FIFO bytes after write: %d (expected: %d)\n\r", tx_bytes, test_data_length);
 80015e0:	7f3b      	ldrb	r3, [r7, #28]
 80015e2:	4619      	mov	r1, r3
 80015e4:	7fbb      	ldrb	r3, [r7, #30]
 80015e6:	461a      	mov	r2, r3
 80015e8:	4861      	ldr	r0, [pc, #388]	@ (8001770 <test_fifo_operations+0x2ac>)
 80015ea:	f007 fad3 	bl	8008b94 <iprintf>
            if (tx_bytes == test_data_length) {
 80015ee:	7f3b      	ldrb	r3, [r7, #28]
 80015f0:	7fba      	ldrb	r2, [r7, #30]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d103      	bne.n	80015fe <test_fifo_operations+0x13a>
                printf("  ✓ TX FIFO count matches written data\n\r");
 80015f6:	485f      	ldr	r0, [pc, #380]	@ (8001774 <test_fifo_operations+0x2b0>)
 80015f8:	f007 facc 	bl	8008b94 <iprintf>
 80015fc:	e008      	b.n	8001610 <test_fifo_operations+0x14c>
            } else {
                printf("  ✗ TX FIFO count mismatch\n\r");
 80015fe:	485e      	ldr	r0, [pc, #376]	@ (8001778 <test_fifo_operations+0x2b4>)
 8001600:	f007 fac8 	bl	8008b94 <iprintf>
 8001604:	e004      	b.n	8001610 <test_fifo_operations+0x14c>
            }
        }
    } else {
        printf("  ✗ TX FIFO write FAILED - HAL Error: %d\n\r", hal_status);
 8001606:	7ffb      	ldrb	r3, [r7, #31]
 8001608:	4619      	mov	r1, r3
 800160a:	485c      	ldr	r0, [pc, #368]	@ (800177c <test_fifo_operations+0x2b8>)
 800160c:	f007 fac2 	bl	8008b94 <iprintf>
    }
    
    // Test 4: Write single byte to TX FIFO
    printf("4. Writing single byte to TX FIFO\n\r");
 8001610:	485b      	ldr	r0, [pc, #364]	@ (8001780 <test_fifo_operations+0x2bc>)
 8001612:	f007 fabf 	bl	8008b94 <iprintf>
    hal_status = CC1201_WriteSingleTxFifo(0x42, &status_byte);
 8001616:	f107 031d 	add.w	r3, r7, #29
 800161a:	4619      	mov	r1, r3
 800161c:	2042      	movs	r0, #66	@ 0x42
 800161e:	f7ff fb05 	bl	8000c2c <CC1201_WriteSingleTxFifo>
 8001622:	4603      	mov	r3, r0
 8001624:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 8001626:	7ffb      	ldrb	r3, [r7, #31]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d117      	bne.n	800165c <test_fifo_operations+0x198>
        printf("  ✓ Wrote single byte (0x42) to TX FIFO\n\r");
 800162c:	4855      	ldr	r0, [pc, #340]	@ (8001784 <test_fifo_operations+0x2c0>)
 800162e:	f007 fab1 	bl	8008b94 <iprintf>
        print_cc1201_status(status_byte, "TX_SINGLE");
 8001632:	7f7b      	ldrb	r3, [r7, #29]
 8001634:	4954      	ldr	r1, [pc, #336]	@ (8001788 <test_fifo_operations+0x2c4>)
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fbbe 	bl	8000db8 <print_cc1201_status>
        
        // Check updated count
        hal_status = CC1201_GetNumTXBytes(&tx_bytes);
 800163c:	f107 031c 	add.w	r3, r7, #28
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff f981 	bl	8000948 <CC1201_GetNumTXBytes>
 8001646:	4603      	mov	r3, r0
 8001648:	77fb      	strb	r3, [r7, #31]
        if (hal_status == HAL_OK) {
 800164a:	7ffb      	ldrb	r3, [r7, #31]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d10a      	bne.n	8001666 <test_fifo_operations+0x1a2>
            printf("  TX FIFO bytes after single write: %d\n\r", tx_bytes);
 8001650:	7f3b      	ldrb	r3, [r7, #28]
 8001652:	4619      	mov	r1, r3
 8001654:	484d      	ldr	r0, [pc, #308]	@ (800178c <test_fifo_operations+0x2c8>)
 8001656:	f007 fa9d 	bl	8008b94 <iprintf>
 800165a:	e004      	b.n	8001666 <test_fifo_operations+0x1a2>
        }
    } else {
        printf("  ✗ Single TX write FAILED - HAL Error: %d\n\r", hal_status);
 800165c:	7ffb      	ldrb	r3, [r7, #31]
 800165e:	4619      	mov	r1, r3
 8001660:	484b      	ldr	r0, [pc, #300]	@ (8001790 <test_fifo_operations+0x2cc>)
 8001662:	f007 fa97 	bl	8008b94 <iprintf>
    }
    
    // Test 5: Attempt to read from RX FIFO (should be empty)
    printf("5. Reading from empty RX FIFO\n\r");
 8001666:	484b      	ldr	r0, [pc, #300]	@ (8001794 <test_fifo_operations+0x2d0>)
 8001668:	f007 fa94 	bl	8008b94 <iprintf>
    uint8_t read_buffer[10] = {0};
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	811a      	strh	r2, [r3, #8]
    hal_status = CC1201_ReadRxFifo(read_buffer, 1, &status_byte);
 8001676:	f107 021d 	add.w	r2, r7, #29
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	2101      	movs	r1, #1
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fa18 	bl	8000ab4 <CC1201_ReadRxFifo>
 8001684:	4603      	mov	r3, r0
 8001686:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 8001688:	7ffb      	ldrb	r3, [r7, #31]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d119      	bne.n	80016c2 <test_fifo_operations+0x1fe>
        printf("  Read from RX FIFO: 0x%02X\n\r", read_buffer[0]);
 800168e:	793b      	ldrb	r3, [r7, #4]
 8001690:	4619      	mov	r1, r3
 8001692:	4841      	ldr	r0, [pc, #260]	@ (8001798 <test_fifo_operations+0x2d4>)
 8001694:	f007 fa7e 	bl	8008b94 <iprintf>
        print_cc1201_status(status_byte, "RX_READ_EMPTY");
 8001698:	7f7b      	ldrb	r3, [r7, #29]
 800169a:	4940      	ldr	r1, [pc, #256]	@ (800179c <test_fifo_operations+0x2d8>)
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fb8b 	bl	8000db8 <print_cc1201_status>
        
        hal_status = CC1201_GetNumRXBytes(&rx_bytes);
 80016a2:	f107 031b 	add.w	r3, r7, #27
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff f940 	bl	800092c <CC1201_GetNumRXBytes>
 80016ac:	4603      	mov	r3, r0
 80016ae:	77fb      	strb	r3, [r7, #31]
        if (hal_status == HAL_OK) {
 80016b0:	7ffb      	ldrb	r3, [r7, #31]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d10a      	bne.n	80016cc <test_fifo_operations+0x208>
            printf("  RX FIFO bytes after read: %d\n\r", rx_bytes);
 80016b6:	7efb      	ldrb	r3, [r7, #27]
 80016b8:	4619      	mov	r1, r3
 80016ba:	4839      	ldr	r0, [pc, #228]	@ (80017a0 <test_fifo_operations+0x2dc>)
 80016bc:	f007 fa6a 	bl	8008b94 <iprintf>
 80016c0:	e004      	b.n	80016cc <test_fifo_operations+0x208>
        }
    } else {
        printf("  ✗ RX FIFO read FAILED - HAL Error: %d\n\r", hal_status);
 80016c2:	7ffb      	ldrb	r3, [r7, #31]
 80016c4:	4619      	mov	r1, r3
 80016c6:	4837      	ldr	r0, [pc, #220]	@ (80017a4 <test_fifo_operations+0x2e0>)
 80016c8:	f007 fa64 	bl	8008b94 <iprintf>
    }
    
    // Test 6: Flush TX FIFO and verify
    printf("6. Flushing TX FIFO and verifying\n\r");
 80016cc:	4836      	ldr	r0, [pc, #216]	@ (80017a8 <test_fifo_operations+0x2e4>)
 80016ce:	f007 fa61 	bl	8008b94 <iprintf>
    hal_status = CC1201_FlushTxFifo(&status_byte);
 80016d2:	f107 031d 	add.w	r3, r7, #29
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff f86a 	bl	80007b0 <CC1201_FlushTxFifo>
 80016dc:	4603      	mov	r3, r0
 80016de:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 80016e0:	7ffb      	ldrb	r3, [r7, #31]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d11e      	bne.n	8001724 <test_fifo_operations+0x260>
        print_cc1201_status(status_byte, "FINAL_FLUSH_TX");
 80016e6:	7f7b      	ldrb	r3, [r7, #29]
 80016e8:	4930      	ldr	r1, [pc, #192]	@ (80017ac <test_fifo_operations+0x2e8>)
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fb64 	bl	8000db8 <print_cc1201_status>
        
        hal_status = CC1201_GetNumTXBytes(&tx_bytes);
 80016f0:	f107 031c 	add.w	r3, r7, #28
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff f927 	bl	8000948 <CC1201_GetNumTXBytes>
 80016fa:	4603      	mov	r3, r0
 80016fc:	77fb      	strb	r3, [r7, #31]
        if (hal_status == HAL_OK) {
 80016fe:	7ffb      	ldrb	r3, [r7, #31]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d114      	bne.n	800172e <test_fifo_operations+0x26a>
            printf("  TX FIFO bytes after flush: %d (expected: 0)\n\r", tx_bytes);
 8001704:	7f3b      	ldrb	r3, [r7, #28]
 8001706:	4619      	mov	r1, r3
 8001708:	4829      	ldr	r0, [pc, #164]	@ (80017b0 <test_fifo_operations+0x2ec>)
 800170a:	f007 fa43 	bl	8008b94 <iprintf>
            if (tx_bytes == 0) {
 800170e:	7f3b      	ldrb	r3, [r7, #28]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d103      	bne.n	800171c <test_fifo_operations+0x258>
                printf("  ✓ TX FIFO successfully flushed\n\r");
 8001714:	4827      	ldr	r0, [pc, #156]	@ (80017b4 <test_fifo_operations+0x2f0>)
 8001716:	f007 fa3d 	bl	8008b94 <iprintf>
 800171a:	e008      	b.n	800172e <test_fifo_operations+0x26a>
            } else {
                printf("  ✗ TX FIFO flush incomplete\n\r");
 800171c:	4826      	ldr	r0, [pc, #152]	@ (80017b8 <test_fifo_operations+0x2f4>)
 800171e:	f007 fa39 	bl	8008b94 <iprintf>
 8001722:	e004      	b.n	800172e <test_fifo_operations+0x26a>
            }
        }
    } else {
        printf("  ✗ TX FIFO flush FAILED - HAL Error: %d\n\r", hal_status);
 8001724:	7ffb      	ldrb	r3, [r7, #31]
 8001726:	4619      	mov	r1, r3
 8001728:	4824      	ldr	r0, [pc, #144]	@ (80017bc <test_fifo_operations+0x2f8>)
 800172a:	f007 fa33 	bl	8008b94 <iprintf>
    }
    
    printf("=== FIFO OPERATIONS TEST COMPLETE ===\n\r");
 800172e:	4824      	ldr	r0, [pc, #144]	@ (80017c0 <test_fifo_operations+0x2fc>)
 8001730:	f007 fa30 	bl	8008b94 <iprintf>
}
 8001734:	3720      	adds	r7, #32
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	0800a214 	.word	0x0800a214
 8001740:	0800a234 	.word	0x0800a234
 8001744:	0800a258 	.word	0x0800a258
 8001748:	0800a268 	.word	0x0800a268
 800174c:	08009bf0 	.word	0x08009bf0
 8001750:	08009bac 	.word	0x08009bac
 8001754:	0800a27c 	.word	0x0800a27c
 8001758:	0800a298 	.word	0x0800a298
 800175c:	0800a2b0 	.word	0x0800a2b0
 8001760:	0800a2c8 	.word	0x0800a2c8
 8001764:	0800a62c 	.word	0x0800a62c
 8001768:	0800a2ec 	.word	0x0800a2ec
 800176c:	0800a310 	.word	0x0800a310
 8001770:	0800a31c 	.word	0x0800a31c
 8001774:	0800a350 	.word	0x0800a350
 8001778:	0800a37c 	.word	0x0800a37c
 800177c:	0800a39c 	.word	0x0800a39c
 8001780:	0800a3cc 	.word	0x0800a3cc
 8001784:	0800a3f0 	.word	0x0800a3f0
 8001788:	0800a41c 	.word	0x0800a41c
 800178c:	0800a428 	.word	0x0800a428
 8001790:	0800a454 	.word	0x0800a454
 8001794:	0800a484 	.word	0x0800a484
 8001798:	0800a4a4 	.word	0x0800a4a4
 800179c:	0800a4c4 	.word	0x0800a4c4
 80017a0:	0800a4d4 	.word	0x0800a4d4
 80017a4:	0800a4f8 	.word	0x0800a4f8
 80017a8:	0800a524 	.word	0x0800a524
 80017ac:	0800a548 	.word	0x0800a548
 80017b0:	0800a558 	.word	0x0800a558
 80017b4:	0800a588 	.word	0x0800a588
 80017b8:	0800a5b0 	.word	0x0800a5b0
 80017bc:	0800a5d4 	.word	0x0800a5d4
 80017c0:	0800a604 	.word	0x0800a604

080017c4 <test_power_states>:

// Advanced power state testing
void test_power_states(void) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef hal_status;
    uint8_t status_byte = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	71bb      	strb	r3, [r7, #6]
    
    printf("\n=== POWER STATE TESTING ===\n\r");
 80017ce:	4860      	ldr	r0, [pc, #384]	@ (8001950 <test_power_states+0x18c>)
 80017d0:	f007 f9e0 	bl	8008b94 <iprintf>
    
    // Test 1: Start from IDLE
    printf("1. Starting from IDLE state\n\r");
 80017d4:	485f      	ldr	r0, [pc, #380]	@ (8001954 <test_power_states+0x190>)
 80017d6:	f007 f9dd 	bl	8008b94 <iprintf>
    hal_status = CC1201_EnterIdleMode(&status_byte);
 80017da:	1dbb      	adds	r3, r7, #6
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe ffa6 	bl	800072e <CC1201_EnterIdleMode>
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d104      	bne.n	80017f6 <test_power_states+0x32>
        print_cc1201_status(status_byte, "START_IDLE");
 80017ec:	79bb      	ldrb	r3, [r7, #6]
 80017ee:	495a      	ldr	r1, [pc, #360]	@ (8001958 <test_power_states+0x194>)
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fae1 	bl	8000db8 <print_cc1201_status>
    }
    
    // Test 2: Enter RX mode
    printf("2. Entering RX mode\n\r");
 80017f6:	4859      	ldr	r0, [pc, #356]	@ (800195c <test_power_states+0x198>)
 80017f8:	f007 f9cc 	bl	8008b94 <iprintf>
    hal_status = CC1201_EnterRxMode(&status_byte);
 80017fc:	1dbb      	adds	r3, r7, #6
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe ff7b 	bl	80006fa <CC1201_EnterRxMode>
 8001804:	4603      	mov	r3, r0
 8001806:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d107      	bne.n	800181e <test_power_states+0x5a>
        print_cc1201_status(status_byte, "RX_MODE");
 800180e:	79bb      	ldrb	r3, [r7, #6]
 8001810:	4953      	ldr	r1, [pc, #332]	@ (8001960 <test_power_states+0x19c>)
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff fad0 	bl	8000db8 <print_cc1201_status>
        HAL_Delay(100); // Stay in RX for a moment
 8001818:	2064      	movs	r0, #100	@ 0x64
 800181a:	f001 fa8f 	bl	8002d3c <HAL_Delay>
    }
    
    // Test 3: Return to IDLE from RX
    printf("3. Returning to IDLE from RX\n\r");
 800181e:	4851      	ldr	r0, [pc, #324]	@ (8001964 <test_power_states+0x1a0>)
 8001820:	f007 f9b8 	bl	8008b94 <iprintf>
    hal_status = CC1201_EnterIdleMode(&status_byte);
 8001824:	1dbb      	adds	r3, r7, #6
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe ff81 	bl	800072e <CC1201_EnterIdleMode>
 800182c:	4603      	mov	r3, r0
 800182e:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d104      	bne.n	8001840 <test_power_states+0x7c>
        print_cc1201_status(status_byte, "IDLE_FROM_RX");
 8001836:	79bb      	ldrb	r3, [r7, #6]
 8001838:	494b      	ldr	r1, [pc, #300]	@ (8001968 <test_power_states+0x1a4>)
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fabc 	bl	8000db8 <print_cc1201_status>
    }
    
    // Test 4: Enter TX mode
    printf("4. Entering TX mode\n\r");
 8001840:	484a      	ldr	r0, [pc, #296]	@ (800196c <test_power_states+0x1a8>)
 8001842:	f007 f9a7 	bl	8008b94 <iprintf>
    hal_status = CC1201_EnterTxMode(&status_byte);
 8001846:	1dbb      	adds	r3, r7, #6
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe ff63 	bl	8000714 <CC1201_EnterTxMode>
 800184e:	4603      	mov	r3, r0
 8001850:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d107      	bne.n	8001868 <test_power_states+0xa4>
        print_cc1201_status(status_byte, "TX_MODE");
 8001858:	79bb      	ldrb	r3, [r7, #6]
 800185a:	4945      	ldr	r1, [pc, #276]	@ (8001970 <test_power_states+0x1ac>)
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff faab 	bl	8000db8 <print_cc1201_status>
        HAL_Delay(50); // Brief TX state
 8001862:	2032      	movs	r0, #50	@ 0x32
 8001864:	f001 fa6a 	bl	8002d3c <HAL_Delay>
    }
    
    // Test 5: Return to IDLE from TX
    printf("5. Returning to IDLE from TX\n\r");
 8001868:	4842      	ldr	r0, [pc, #264]	@ (8001974 <test_power_states+0x1b0>)
 800186a:	f007 f993 	bl	8008b94 <iprintf>
    hal_status = CC1201_EnterIdleMode(&status_byte);
 800186e:	1dbb      	adds	r3, r7, #6
 8001870:	4618      	mov	r0, r3
 8001872:	f7fe ff5c 	bl	800072e <CC1201_EnterIdleMode>
 8001876:	4603      	mov	r3, r0
 8001878:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d104      	bne.n	800188a <test_power_states+0xc6>
        print_cc1201_status(status_byte, "IDLE_FROM_TX");
 8001880:	79bb      	ldrb	r3, [r7, #6]
 8001882:	493d      	ldr	r1, [pc, #244]	@ (8001978 <test_power_states+0x1b4>)
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fa97 	bl	8000db8 <print_cc1201_status>
    }
    
    // Test 6: Fast TX On (FSTXON state)
    printf("6. Fast TX On (FSTXON state)\n\r");
 800188a:	483c      	ldr	r0, [pc, #240]	@ (800197c <test_power_states+0x1b8>)
 800188c:	f007 f982 	bl	8008b94 <iprintf>
    hal_status = CC1201_FastTxOn(&status_byte);
 8001890:	1dbb      	adds	r3, r7, #6
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe ff17 	bl	80006c6 <CC1201_FastTxOn>
 8001898:	4603      	mov	r3, r0
 800189a:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d107      	bne.n	80018b2 <test_power_states+0xee>
        print_cc1201_status(status_byte, "FSTXON");
 80018a2:	79bb      	ldrb	r3, [r7, #6]
 80018a4:	4936      	ldr	r1, [pc, #216]	@ (8001980 <test_power_states+0x1bc>)
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff fa86 	bl	8000db8 <print_cc1201_status>
        HAL_Delay(50);
 80018ac:	2032      	movs	r0, #50	@ 0x32
 80018ae:	f001 fa45 	bl	8002d3c <HAL_Delay>
    }
    
    // Test 7: Return to IDLE from FSTXON
    printf("7. Returning to IDLE from FSTXON\n\r");
 80018b2:	4834      	ldr	r0, [pc, #208]	@ (8001984 <test_power_states+0x1c0>)
 80018b4:	f007 f96e 	bl	8008b94 <iprintf>
    hal_status = CC1201_EnterIdleMode(&status_byte);
 80018b8:	1dbb      	adds	r3, r7, #6
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7fe ff37 	bl	800072e <CC1201_EnterIdleMode>
 80018c0:	4603      	mov	r3, r0
 80018c2:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d104      	bne.n	80018d4 <test_power_states+0x110>
        print_cc1201_status(status_byte, "IDLE_FROM_FSTXON");
 80018ca:	79bb      	ldrb	r3, [r7, #6]
 80018cc:	492e      	ldr	r1, [pc, #184]	@ (8001988 <test_power_states+0x1c4>)
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fa72 	bl	8000db8 <print_cc1201_status>
    }
    
    // Test 8: Enter Sleep mode
    printf("8. Entering Sleep mode\n\r");
 80018d4:	482d      	ldr	r0, [pc, #180]	@ (800198c <test_power_states+0x1c8>)
 80018d6:	f007 f95d 	bl	8008b94 <iprintf>
    hal_status = CC1201_EnterSleepMode(&status_byte);
 80018da:	1dbb      	adds	r3, r7, #6
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe ff4d 	bl	800077c <CC1201_EnterSleepMode>
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d107      	bne.n	80018fc <test_power_states+0x138>
        print_cc1201_status(status_byte, "SLEEP");
 80018ec:	79bb      	ldrb	r3, [r7, #6]
 80018ee:	4928      	ldr	r1, [pc, #160]	@ (8001990 <test_power_states+0x1cc>)
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fa61 	bl	8000db8 <print_cc1201_status>
        HAL_Delay(200); // Sleep for a moment
 80018f6:	20c8      	movs	r0, #200	@ 0xc8
 80018f8:	f001 fa20 	bl	8002d3c <HAL_Delay>
    }
    
    // Test 9: Wake up from Sleep with NOP
    printf("9. Waking up from Sleep\n\r");
 80018fc:	4825      	ldr	r0, [pc, #148]	@ (8001994 <test_power_states+0x1d0>)
 80018fe:	f007 f949 	bl	8008b94 <iprintf>
    hal_status = CC1201_Nop(&status_byte);
 8001902:	1dbb      	adds	r3, r7, #6
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe ff6d 	bl	80007e4 <CC1201_Nop>
 800190a:	4603      	mov	r3, r0
 800190c:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d104      	bne.n	800191e <test_power_states+0x15a>
        print_cc1201_status(status_byte, "WAKE_FROM_SLEEP");
 8001914:	79bb      	ldrb	r3, [r7, #6]
 8001916:	4920      	ldr	r1, [pc, #128]	@ (8001998 <test_power_states+0x1d4>)
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff fa4d 	bl	8000db8 <print_cc1201_status>
    }
    
    // Test 10: Final IDLE state
    printf("10. Final IDLE state\n\r");
 800191e:	481f      	ldr	r0, [pc, #124]	@ (800199c <test_power_states+0x1d8>)
 8001920:	f007 f938 	bl	8008b94 <iprintf>
    hal_status = CC1201_EnterIdleMode(&status_byte);
 8001924:	1dbb      	adds	r3, r7, #6
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe ff01 	bl	800072e <CC1201_EnterIdleMode>
 800192c:	4603      	mov	r3, r0
 800192e:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d104      	bne.n	8001940 <test_power_states+0x17c>
        print_cc1201_status(status_byte, "FINAL_IDLE");
 8001936:	79bb      	ldrb	r3, [r7, #6]
 8001938:	4919      	ldr	r1, [pc, #100]	@ (80019a0 <test_power_states+0x1dc>)
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fa3c 	bl	8000db8 <print_cc1201_status>
    }
    
    printf("=== POWER STATE TESTING COMPLETE ===\n\r");
 8001940:	4818      	ldr	r0, [pc, #96]	@ (80019a4 <test_power_states+0x1e0>)
 8001942:	f007 f927 	bl	8008b94 <iprintf>
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	0800a634 	.word	0x0800a634
 8001954:	0800a654 	.word	0x0800a654
 8001958:	0800a674 	.word	0x0800a674
 800195c:	0800a680 	.word	0x0800a680
 8001960:	08009b6c 	.word	0x08009b6c
 8001964:	0800a698 	.word	0x0800a698
 8001968:	0800a6b8 	.word	0x0800a6b8
 800196c:	0800a6c8 	.word	0x0800a6c8
 8001970:	08009b2c 	.word	0x08009b2c
 8001974:	0800a6e0 	.word	0x0800a6e0
 8001978:	0800a700 	.word	0x0800a700
 800197c:	0800a710 	.word	0x0800a710
 8001980:	0800a730 	.word	0x0800a730
 8001984:	0800a738 	.word	0x0800a738
 8001988:	0800a75c 	.word	0x0800a75c
 800198c:	0800a770 	.word	0x0800a770
 8001990:	08009d04 	.word	0x08009d04
 8001994:	0800a78c 	.word	0x0800a78c
 8001998:	0800a7a8 	.word	0x0800a7a8
 800199c:	0800a7b8 	.word	0x0800a7b8
 80019a0:	08009d80 	.word	0x08009d80
 80019a4:	0800a7d0 	.word	0x0800a7d0

080019a8 <run_comprehensive_cc1201_test>:

// Comprehensive test sequence
void run_comprehensive_cc1201_test(void) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
    printf("\n🚀 STARTING COMPREHENSIVE CC1201 TEST SEQUENCE 🚀\n\r");
 80019ac:	4818      	ldr	r0, [pc, #96]	@ (8001a10 <run_comprehensive_cc1201_test+0x68>)
 80019ae:	f007 f8f1 	bl	8008b94 <iprintf>
    printf("================================================\n\r");
 80019b2:	4818      	ldr	r0, [pc, #96]	@ (8001a14 <run_comprehensive_cc1201_test+0x6c>)
 80019b4:	f007 f8ee 	bl	8008b94 <iprintf>
    
    test_all_strobe_commands();
 80019b8:	f7ff fa6c 	bl	8000e94 <test_all_strobe_commands>
    HAL_Delay(500);
 80019bc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019c0:	f001 f9bc 	bl	8002d3c <HAL_Delay>
    
    test_status_registers();
 80019c4:	f7ff fc34 	bl	8001230 <test_status_registers>
    HAL_Delay(500);
 80019c8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019cc:	f001 f9b6 	bl	8002d3c <HAL_Delay>
    
    test_register_operations();
 80019d0:	f7ff fc98 	bl	8001304 <test_register_operations>
    HAL_Delay(500);
 80019d4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019d8:	f001 f9b0 	bl	8002d3c <HAL_Delay>
    
    test_configuration_write();
 80019dc:	f7ff fd14 	bl	8001408 <test_configuration_write>
    HAL_Delay(500);
 80019e0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019e4:	f001 f9aa 	bl	8002d3c <HAL_Delay>
    
    test_fifo_operations();
 80019e8:	f7ff fd6c 	bl	80014c4 <test_fifo_operations>
    HAL_Delay(500);
 80019ec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019f0:	f001 f9a4 	bl	8002d3c <HAL_Delay>
    
    test_power_states();
 80019f4:	f7ff fee6 	bl	80017c4 <test_power_states>
    HAL_Delay(500);
 80019f8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019fc:	f001 f99e 	bl	8002d3c <HAL_Delay>
    
    printf("\n🎉 COMPREHENSIVE TEST SEQUENCE COMPLETE! 🎉\n\r");
 8001a00:	4805      	ldr	r0, [pc, #20]	@ (8001a18 <run_comprehensive_cc1201_test+0x70>)
 8001a02:	f007 f8c7 	bl	8008b94 <iprintf>
    printf("==============================================\n\r");
 8001a06:	4805      	ldr	r0, [pc, #20]	@ (8001a1c <run_comprehensive_cc1201_test+0x74>)
 8001a08:	f007 f8c4 	bl	8008b94 <iprintf>
}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	0800a7f8 	.word	0x0800a7f8
 8001a14:	0800a834 	.word	0x0800a834
 8001a18:	0800a868 	.word	0x0800a868
 8001a1c:	0800a89c 	.word	0x0800a89c

08001a20 <test_GPIO_pins>:

// Function to test GPIO pin states
void test_GPIO_pins(void) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
    printf("=== GPIO Pin Test ===\n\r");
 8001a26:	4831      	ldr	r0, [pc, #196]	@ (8001aec <test_GPIO_pins+0xcc>)
 8001a28:	f007 f8b4 	bl	8008b94 <iprintf>
    
    // Test CS pin
    printf("CS Pin (PE4): ");
 8001a2c:	4830      	ldr	r0, [pc, #192]	@ (8001af0 <test_GPIO_pins+0xd0>)
 8001a2e:	f007 f8b1 	bl	8008b94 <iprintf>
    GPIO_PinState cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 8001a32:	2110      	movs	r1, #16
 8001a34:	482f      	ldr	r0, [pc, #188]	@ (8001af4 <test_GPIO_pins+0xd4>)
 8001a36:	f001 ff93 	bl	8003960 <HAL_GPIO_ReadPin>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	71fb      	strb	r3, [r7, #7]
    printf("%s\n\r", cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d101      	bne.n	8001a48 <test_GPIO_pins+0x28>
 8001a44:	4b2c      	ldr	r3, [pc, #176]	@ (8001af8 <test_GPIO_pins+0xd8>)
 8001a46:	e000      	b.n	8001a4a <test_GPIO_pins+0x2a>
 8001a48:	4b2c      	ldr	r3, [pc, #176]	@ (8001afc <test_GPIO_pins+0xdc>)
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	482c      	ldr	r0, [pc, #176]	@ (8001b00 <test_GPIO_pins+0xe0>)
 8001a4e:	f007 f8a1 	bl	8008b94 <iprintf>
    
    // Toggle CS pin to test control
    printf("Toggling CS pin...\n\r");
 8001a52:	482c      	ldr	r0, [pc, #176]	@ (8001b04 <test_GPIO_pins+0xe4>)
 8001a54:	f007 f89e 	bl	8008b94 <iprintf>
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2110      	movs	r1, #16
 8001a5c:	4825      	ldr	r0, [pc, #148]	@ (8001af4 <test_GPIO_pins+0xd4>)
 8001a5e:	f001 ff97 	bl	8003990 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001a62:	2064      	movs	r0, #100	@ 0x64
 8001a64:	f001 f96a 	bl	8002d3c <HAL_Delay>
    cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 8001a68:	2110      	movs	r1, #16
 8001a6a:	4822      	ldr	r0, [pc, #136]	@ (8001af4 <test_GPIO_pins+0xd4>)
 8001a6c:	f001 ff78 	bl	8003960 <HAL_GPIO_ReadPin>
 8001a70:	4603      	mov	r3, r0
 8001a72:	71fb      	strb	r3, [r7, #7]
    printf("CS Pin after LOW: %s\n\r", cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d101      	bne.n	8001a7e <test_GPIO_pins+0x5e>
 8001a7a:	4b1f      	ldr	r3, [pc, #124]	@ (8001af8 <test_GPIO_pins+0xd8>)
 8001a7c:	e000      	b.n	8001a80 <test_GPIO_pins+0x60>
 8001a7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001afc <test_GPIO_pins+0xdc>)
 8001a80:	4619      	mov	r1, r3
 8001a82:	4821      	ldr	r0, [pc, #132]	@ (8001b08 <test_GPIO_pins+0xe8>)
 8001a84:	f007 f886 	bl	8008b94 <iprintf>
    
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 8001a88:	2201      	movs	r2, #1
 8001a8a:	2110      	movs	r1, #16
 8001a8c:	4819      	ldr	r0, [pc, #100]	@ (8001af4 <test_GPIO_pins+0xd4>)
 8001a8e:	f001 ff7f 	bl	8003990 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001a92:	2064      	movs	r0, #100	@ 0x64
 8001a94:	f001 f952 	bl	8002d3c <HAL_Delay>
    cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 8001a98:	2110      	movs	r1, #16
 8001a9a:	4816      	ldr	r0, [pc, #88]	@ (8001af4 <test_GPIO_pins+0xd4>)
 8001a9c:	f001 ff60 	bl	8003960 <HAL_GPIO_ReadPin>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	71fb      	strb	r3, [r7, #7]
    printf("CS Pin after HIGH: %s\n\r", cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d101      	bne.n	8001aae <test_GPIO_pins+0x8e>
 8001aaa:	4b13      	ldr	r3, [pc, #76]	@ (8001af8 <test_GPIO_pins+0xd8>)
 8001aac:	e000      	b.n	8001ab0 <test_GPIO_pins+0x90>
 8001aae:	4b13      	ldr	r3, [pc, #76]	@ (8001afc <test_GPIO_pins+0xdc>)
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4816      	ldr	r0, [pc, #88]	@ (8001b0c <test_GPIO_pins+0xec>)
 8001ab4:	f007 f86e 	bl	8008b94 <iprintf>
    
    // Test INT pin
    printf("INT Pin (PD4): ");
 8001ab8:	4815      	ldr	r0, [pc, #84]	@ (8001b10 <test_GPIO_pins+0xf0>)
 8001aba:	f007 f86b 	bl	8008b94 <iprintf>
    GPIO_PinState int_state = HAL_GPIO_ReadPin(CC1201_INT_PORT, CC1201_INT_PIN);
 8001abe:	2110      	movs	r1, #16
 8001ac0:	4814      	ldr	r0, [pc, #80]	@ (8001b14 <test_GPIO_pins+0xf4>)
 8001ac2:	f001 ff4d 	bl	8003960 <HAL_GPIO_ReadPin>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71bb      	strb	r3, [r7, #6]
    printf("%s\n\r", int_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 8001aca:	79bb      	ldrb	r3, [r7, #6]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d101      	bne.n	8001ad4 <test_GPIO_pins+0xb4>
 8001ad0:	4b09      	ldr	r3, [pc, #36]	@ (8001af8 <test_GPIO_pins+0xd8>)
 8001ad2:	e000      	b.n	8001ad6 <test_GPIO_pins+0xb6>
 8001ad4:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <test_GPIO_pins+0xdc>)
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4809      	ldr	r0, [pc, #36]	@ (8001b00 <test_GPIO_pins+0xe0>)
 8001ada:	f007 f85b 	bl	8008b94 <iprintf>
    
    printf("===================\n\r");
 8001ade:	480e      	ldr	r0, [pc, #56]	@ (8001b18 <test_GPIO_pins+0xf8>)
 8001ae0:	f007 f858 	bl	8008b94 <iprintf>
}
 8001ae4:	bf00      	nop
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	0800a8d0 	.word	0x0800a8d0
 8001af0:	0800a8e8 	.word	0x0800a8e8
 8001af4:	58021000 	.word	0x58021000
 8001af8:	0800a8f8 	.word	0x0800a8f8
 8001afc:	0800a900 	.word	0x0800a900
 8001b00:	0800a904 	.word	0x0800a904
 8001b04:	0800a90c 	.word	0x0800a90c
 8001b08:	0800a924 	.word	0x0800a924
 8001b0c:	0800a93c 	.word	0x0800a93c
 8001b10:	0800a954 	.word	0x0800a954
 8001b14:	58020c00 	.word	0x58020c00
 8001b18:	0800a964 	.word	0x0800a964

08001b1c <initialize_CC1201>:

// Function to initialize CC1201 with preferred settings
HAL_StatusTypeDef initialize_CC1201(void) {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
    uint8_t status_byte = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef hal_status;
    
    printf("Initializing CC1201...\n\r");
 8001b26:	4827      	ldr	r0, [pc, #156]	@ (8001bc4 <initialize_CC1201+0xa8>)
 8001b28:	f007 f834 	bl	8008b94 <iprintf>
    
    // Step 1: Soft reset
    hal_status = CC1201_SoftReset(&status_byte);
 8001b2c:	1d7b      	adds	r3, r7, #5
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7fe fdbc 	bl	80006ac <CC1201_SoftReset>
 8001b34:	4603      	mov	r3, r0
 8001b36:	73fb      	strb	r3, [r7, #15]
    if (hal_status != HAL_OK) {
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d004      	beq.n	8001b48 <initialize_CC1201+0x2c>
        printf("CC1201 Reset Failed!\n\r");
 8001b3e:	4822      	ldr	r0, [pc, #136]	@ (8001bc8 <initialize_CC1201+0xac>)
 8001b40:	f007 f828 	bl	8008b94 <iprintf>
        return hal_status;
 8001b44:	7bfb      	ldrb	r3, [r7, #15]
 8001b46:	e039      	b.n	8001bbc <initialize_CC1201+0xa0>
    }
    printf("CC1201 Reset OK - Status: 0x%02X\n\r", status_byte);
 8001b48:	797b      	ldrb	r3, [r7, #5]
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	481f      	ldr	r0, [pc, #124]	@ (8001bcc <initialize_CC1201+0xb0>)
 8001b4e:	f007 f821 	bl	8008b94 <iprintf>
    
    HAL_Delay(100); // Wait for reset to complete
 8001b52:	2064      	movs	r0, #100	@ 0x64
 8001b54:	f001 f8f2 	bl	8002d3c <HAL_Delay>
    
    // Step 2: Write preferred settings (basic registers only)
    const registerSetting_t* settings = CC1201_GetPreferredSettings();
 8001b58:	f7ff f924 	bl	8000da4 <CC1201_GetPreferredSettings>
 8001b5c:	60b8      	str	r0, [r7, #8]
    uint16_t num_settings = CC1201_GetNumPreferredSettings();
 8001b5e:	f7ff f918 	bl	8000d92 <CC1201_GetNumPreferredSettings>
 8001b62:	4603      	mov	r3, r0
 8001b64:	80fb      	strh	r3, [r7, #6]
    
    printf("Writing %d configuration registers...\n\r", num_settings);
 8001b66:	88fb      	ldrh	r3, [r7, #6]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4819      	ldr	r0, [pc, #100]	@ (8001bd0 <initialize_CC1201+0xb4>)
 8001b6c:	f007 f812 	bl	8008b94 <iprintf>
    hal_status = CC1201_WriteRegisterConfig(settings, num_settings);
 8001b70:	88fb      	ldrh	r3, [r7, #6]
 8001b72:	4619      	mov	r1, r3
 8001b74:	68b8      	ldr	r0, [r7, #8]
 8001b76:	f7ff f8d3 	bl	8000d20 <CC1201_WriteRegisterConfig>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	73fb      	strb	r3, [r7, #15]
    if (hal_status != HAL_OK) {
 8001b7e:	7bfb      	ldrb	r3, [r7, #15]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d004      	beq.n	8001b8e <initialize_CC1201+0x72>
        printf("Configuration write failed!\n\r");
 8001b84:	4813      	ldr	r0, [pc, #76]	@ (8001bd4 <initialize_CC1201+0xb8>)
 8001b86:	f007 f805 	bl	8008b94 <iprintf>
        return hal_status;
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	e016      	b.n	8001bbc <initialize_CC1201+0xa0>
    }
    printf("Configuration complete!\n\r");
 8001b8e:	4812      	ldr	r0, [pc, #72]	@ (8001bd8 <initialize_CC1201+0xbc>)
 8001b90:	f007 f800 	bl	8008b94 <iprintf>
    
    // Step 3: Enter idle mode
    hal_status = CC1201_EnterIdleMode(&status_byte);
 8001b94:	1d7b      	adds	r3, r7, #5
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe fdc9 	bl	800072e <CC1201_EnterIdleMode>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	73fb      	strb	r3, [r7, #15]
    if (hal_status != HAL_OK) {
 8001ba0:	7bfb      	ldrb	r3, [r7, #15]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d004      	beq.n	8001bb0 <initialize_CC1201+0x94>
        printf("Enter Idle Failed!\n\r");
 8001ba6:	480d      	ldr	r0, [pc, #52]	@ (8001bdc <initialize_CC1201+0xc0>)
 8001ba8:	f006 fff4 	bl	8008b94 <iprintf>
        return hal_status;
 8001bac:	7bfb      	ldrb	r3, [r7, #15]
 8001bae:	e005      	b.n	8001bbc <initialize_CC1201+0xa0>
    }
    printf("Enter Idle OK - Status: 0x%02X\n\r", status_byte);
 8001bb0:	797b      	ldrb	r3, [r7, #5]
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	480a      	ldr	r0, [pc, #40]	@ (8001be0 <initialize_CC1201+0xc4>)
 8001bb6:	f006 ffed 	bl	8008b94 <iprintf>
    
    return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	0800a97c 	.word	0x0800a97c
 8001bc8:	0800a998 	.word	0x0800a998
 8001bcc:	0800a9b0 	.word	0x0800a9b0
 8001bd0:	0800a100 	.word	0x0800a100
 8001bd4:	0800a9d4 	.word	0x0800a9d4
 8001bd8:	0800a9f4 	.word	0x0800a9f4
 8001bdc:	0800aa10 	.word	0x0800aa10
 8001be0:	0800aa28 	.word	0x0800aa28

08001be4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001bea:	f000 fa99 	bl	8002120 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bee:	f001 f813 	bl	8002c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bf2:	f000 f8f1 	bl	8001dd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bf6:	f000 fa19 	bl	800202c <MX_GPIO_Init>
  MX_SPI4_Init();
 8001bfa:	f000 f9c1 	bl	8001f80 <MX_SPI4_Init>
  MX_SPI2_Init();
 8001bfe:	f000 f969 	bl	8001ed4 <MX_SPI2_Init>
  // CC1201 testing will be done after UART is initialized

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8001c02:	2000      	movs	r0, #0
 8001c04:	f000 fdb2 	bl	800276c <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8001c08:	2001      	movs	r0, #1
 8001c0a:	f000 fdaf 	bl	800276c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8001c0e:	2002      	movs	r0, #2
 8001c10:	f000 fdac 	bl	800276c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8001c14:	2101      	movs	r1, #1
 8001c16:	2000      	movs	r0, #0
 8001c18:	f000 fe9c 	bl	8002954 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8001c1c:	4b61      	ldr	r3, [pc, #388]	@ (8001da4 <main+0x1c0>)
 8001c1e:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c22:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8001c24:	4b5f      	ldr	r3, [pc, #380]	@ (8001da4 <main+0x1c0>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8001c2a:	4b5e      	ldr	r3, [pc, #376]	@ (8001da4 <main+0x1c0>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8001c30:	4b5c      	ldr	r3, [pc, #368]	@ (8001da4 <main+0x1c0>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8001c36:	4b5b      	ldr	r3, [pc, #364]	@ (8001da4 <main+0x1c0>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8001c3c:	4959      	ldr	r1, [pc, #356]	@ (8001da4 <main+0x1c0>)
 8001c3e:	2000      	movs	r0, #0
 8001c40:	f000 ff0c 	bl	8002a5c <BSP_COM_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <main+0x6a>
  {
    Error_Handler();
 8001c4a:	f000 faa9 	bl	80021a0 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8001c4e:	4856      	ldr	r0, [pc, #344]	@ (8001da8 <main+0x1c4>)
 8001c50:	f006 ffa0 	bl	8008b94 <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8001c54:	2000      	movs	r0, #0
 8001c56:	f000 fdff 	bl	8002858 <BSP_LED_On>
  BSP_LED_On(LED_YELLOW);
 8001c5a:	2001      	movs	r0, #1
 8001c5c:	f000 fdfc 	bl	8002858 <BSP_LED_On>
  BSP_LED_On(LED_RED);
 8001c60:	2002      	movs	r0, #2
 8001c62:	f000 fdf9 	bl	8002858 <BSP_LED_On>
  
  // Now that UART is initialized, start CC1201 testing
  printf("\n=== CC1201 COMMUNICATION SYSTEM STARTUP ===\n\r");
 8001c66:	4851      	ldr	r0, [pc, #324]	@ (8001dac <main+0x1c8>)
 8001c68:	f006 ff94 	bl	8008b94 <iprintf>
  
  // Test GPIO pins first
  test_GPIO_pins();
 8001c6c:	f7ff fed8 	bl	8001a20 <test_GPIO_pins>
  
  // Initialize and test CC1201 communication
  printf("Starting CC1201 initialization...\n\r");
 8001c70:	484f      	ldr	r0, [pc, #316]	@ (8001db0 <main+0x1cc>)
 8001c72:	f006 ff8f 	bl	8008b94 <iprintf>
  HAL_Delay(100); // Give CC1201 time to power up
 8001c76:	2064      	movs	r0, #100	@ 0x64
 8001c78:	f001 f860 	bl	8002d3c <HAL_Delay>
  
  if (initialize_CC1201() == HAL_OK) {
 8001c7c:	f7ff ff4e 	bl	8001b1c <initialize_CC1201>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d109      	bne.n	8001c9a <main+0xb6>
      printf("CC1201 initialization successful!\n\r");
 8001c86:	484b      	ldr	r0, [pc, #300]	@ (8001db4 <main+0x1d0>)
 8001c88:	f006 ff84 	bl	8008b94 <iprintf>
      BSP_LED_Off(LED_RED);
 8001c8c:	2002      	movs	r0, #2
 8001c8e:	f000 fe0d 	bl	80028ac <BSP_LED_Off>
      BSP_LED_On(LED_GREEN);
 8001c92:	2000      	movs	r0, #0
 8001c94:	f000 fde0 	bl	8002858 <BSP_LED_On>
 8001c98:	e008      	b.n	8001cac <main+0xc8>
  } else {
      printf("CC1201 initialization failed!\n\r");
 8001c9a:	4847      	ldr	r0, [pc, #284]	@ (8001db8 <main+0x1d4>)
 8001c9c:	f006 ff7a 	bl	8008b94 <iprintf>
      BSP_LED_Off(LED_GREEN);
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f000 fe03 	bl	80028ac <BSP_LED_Off>
      BSP_LED_On(LED_RED);
 8001ca6:	2002      	movs	r0, #2
 8001ca8:	f000 fdd6 	bl	8002858 <BSP_LED_On>

  /* USER CODE END BSP */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t last_comprehensive_test = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60fb      	str	r3, [r7, #12]
  uint32_t last_quick_test = 0;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60bb      	str	r3, [r7, #8]
  uint32_t test_counter = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	607b      	str	r3, [r7, #4]
  
  printf("\n🚀 STARTING COMPREHENSIVE CC1201 TEST MODE 🚀\n\r");
 8001cb8:	4840      	ldr	r0, [pc, #256]	@ (8001dbc <main+0x1d8>)
 8001cba:	f006 ff6b 	bl	8008b94 <iprintf>
  
  while (1)
  {

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 8001cbe:	4b40      	ldr	r3, [pc, #256]	@ (8001dc0 <main+0x1dc>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d110      	bne.n	8001ce8 <main+0x104>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 8001cc6:	4b3e      	ldr	r3, [pc, #248]	@ (8001dc0 <main+0x1dc>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle leds ---- */
      BSP_LED_Toggle(LED_GREEN);
 8001ccc:	2000      	movs	r0, #0
 8001cce:	f000 fe17 	bl	8002900 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_YELLOW);
 8001cd2:	2001      	movs	r0, #1
 8001cd4:	f000 fe14 	bl	8002900 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_RED);
 8001cd8:	2002      	movs	r0, #2
 8001cda:	f000 fe11 	bl	8002900 <BSP_LED_Toggle>

      /* ..... Perform your action ..... */
      printf("\n[BUTTON] Manual comprehensive test triggered...\n\r");
 8001cde:	4839      	ldr	r0, [pc, #228]	@ (8001dc4 <main+0x1e0>)
 8001ce0:	f006 ff58 	bl	8008b94 <iprintf>
      run_comprehensive_cc1201_test();
 8001ce4:	f7ff fe60 	bl	80019a8 <run_comprehensive_cc1201_test>
    }
    
    // Run comprehensive test every 30 seconds
    if (HAL_GetTick() - last_comprehensive_test > 30000) {
 8001ce8:	f001 f81c 	bl	8002d24 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d90e      	bls.n	8001d18 <main+0x134>
      printf("\n[%lu] 🔄 Running Comprehensive Test Cycle %lu\n\r", HAL_GetTick(), ++test_counter);
 8001cfa:	f001 f813 	bl	8002d24 <HAL_GetTick>
 8001cfe:	4601      	mov	r1, r0
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3301      	adds	r3, #1
 8001d04:	607b      	str	r3, [r7, #4]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	482f      	ldr	r0, [pc, #188]	@ (8001dc8 <main+0x1e4>)
 8001d0a:	f006 ff43 	bl	8008b94 <iprintf>
      run_comprehensive_cc1201_test();
 8001d0e:	f7ff fe4b 	bl	80019a8 <run_comprehensive_cc1201_test>
      last_comprehensive_test = HAL_GetTick();
 8001d12:	f001 f807 	bl	8002d24 <HAL_GetTick>
 8001d16:	60f8      	str	r0, [r7, #12]
    }
    
    // Quick status check every 3 seconds
    if (HAL_GetTick() - last_quick_test > 3000) {
 8001d18:	f001 f804 	bl	8002d24 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d938      	bls.n	8001d9c <main+0x1b8>
      uint8_t status_byte = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	707b      	strb	r3, [r7, #1]
      HAL_StatusTypeDef hal_status = CC1201_Nop(&status_byte);
 8001d2e:	1c7b      	adds	r3, r7, #1
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe fd57 	bl	80007e4 <CC1201_Nop>
 8001d36:	4603      	mov	r3, r0
 8001d38:	70fb      	strb	r3, [r7, #3]
      
      printf("[%lu] Quick Status: ", HAL_GetTick());
 8001d3a:	f000 fff3 	bl	8002d24 <HAL_GetTick>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	4619      	mov	r1, r3
 8001d42:	4822      	ldr	r0, [pc, #136]	@ (8001dcc <main+0x1e8>)
 8001d44:	f006 ff26 	bl	8008b94 <iprintf>
      if (hal_status == HAL_OK) {
 8001d48:	78fb      	ldrb	r3, [r7, #3]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d118      	bne.n	8001d80 <main+0x19c>
        print_cc1201_status(status_byte, "NOP");
 8001d4e:	787b      	ldrb	r3, [r7, #1]
 8001d50:	491f      	ldr	r1, [pc, #124]	@ (8001dd0 <main+0x1ec>)
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff f830 	bl	8000db8 <print_cc1201_status>
        
        // Update LEDs based on status
        uint8_t radio_state = (status_byte >> 4) & 0x0F;
 8001d58:	787b      	ldrb	r3, [r7, #1]
 8001d5a:	091b      	lsrs	r3, r3, #4
 8001d5c:	70bb      	strb	r3, [r7, #2]
        if (radio_state == 0x0) {  // IDLE state expected
 8001d5e:	78bb      	ldrb	r3, [r7, #2]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d106      	bne.n	8001d72 <main+0x18e>
          BSP_LED_On(LED_GREEN);
 8001d64:	2000      	movs	r0, #0
 8001d66:	f000 fd77 	bl	8002858 <BSP_LED_On>
          BSP_LED_Off(LED_RED);
 8001d6a:	2002      	movs	r0, #2
 8001d6c:	f000 fd9e 	bl	80028ac <BSP_LED_Off>
 8001d70:	e011      	b.n	8001d96 <main+0x1b2>
        } else {
          BSP_LED_Off(LED_GREEN);
 8001d72:	2000      	movs	r0, #0
 8001d74:	f000 fd9a 	bl	80028ac <BSP_LED_Off>
          BSP_LED_On(LED_YELLOW);  // Unexpected state
 8001d78:	2001      	movs	r0, #1
 8001d7a:	f000 fd6d 	bl	8002858 <BSP_LED_On>
 8001d7e:	e00a      	b.n	8001d96 <main+0x1b2>
        }
      } else {
        printf("COMMUNICATION ERROR - HAL: %d\n\r", hal_status);
 8001d80:	78fb      	ldrb	r3, [r7, #3]
 8001d82:	4619      	mov	r1, r3
 8001d84:	4813      	ldr	r0, [pc, #76]	@ (8001dd4 <main+0x1f0>)
 8001d86:	f006 ff05 	bl	8008b94 <iprintf>
        BSP_LED_Off(LED_GREEN);
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	f000 fd8e 	bl	80028ac <BSP_LED_Off>
        BSP_LED_On(LED_RED);
 8001d90:	2002      	movs	r0, #2
 8001d92:	f000 fd61 	bl	8002858 <BSP_LED_On>
      }
      
      last_quick_test = HAL_GetTick();
 8001d96:	f000 ffc5 	bl	8002d24 <HAL_GetTick>
 8001d9a:	60b8      	str	r0, [r7, #8]
    }
    
    HAL_Delay(100); // Small delay to prevent overwhelming output
 8001d9c:	2064      	movs	r0, #100	@ 0x64
 8001d9e:	f000 ffcd 	bl	8002d3c <HAL_Delay>
    if (BspButtonState == BUTTON_PRESSED)
 8001da2:	e78c      	b.n	8001cbe <main+0xda>
 8001da4:	240000a4 	.word	0x240000a4
 8001da8:	0800ae24 	.word	0x0800ae24
 8001dac:	0800ae40 	.word	0x0800ae40
 8001db0:	0800ae70 	.word	0x0800ae70
 8001db4:	0800ae94 	.word	0x0800ae94
 8001db8:	0800aeb8 	.word	0x0800aeb8
 8001dbc:	0800aed8 	.word	0x0800aed8
 8001dc0:	240000b4 	.word	0x240000b4
 8001dc4:	0800af10 	.word	0x0800af10
 8001dc8:	0800af44 	.word	0x0800af44
 8001dcc:	0800af78 	.word	0x0800af78
 8001dd0:	080099d0 	.word	0x080099d0
 8001dd4:	0800af90 	.word	0x0800af90

08001dd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b09c      	sub	sp, #112	@ 0x70
 8001ddc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001de2:	224c      	movs	r2, #76	@ 0x4c
 8001de4:	2100      	movs	r1, #0
 8001de6:	4618      	mov	r0, r3
 8001de8:	f006 ff29 	bl	8008c3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dec:	1d3b      	adds	r3, r7, #4
 8001dee:	2220      	movs	r2, #32
 8001df0:	2100      	movs	r1, #0
 8001df2:	4618      	mov	r0, r3
 8001df4:	f006 ff23 	bl	8008c3e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001df8:	2002      	movs	r0, #2
 8001dfa:	f001 fdfd 	bl	80039f8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001dfe:	2300      	movs	r3, #0
 8001e00:	603b      	str	r3, [r7, #0]
 8001e02:	4b32      	ldr	r3, [pc, #200]	@ (8001ecc <SystemClock_Config+0xf4>)
 8001e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e06:	4a31      	ldr	r2, [pc, #196]	@ (8001ecc <SystemClock_Config+0xf4>)
 8001e08:	f023 0301 	bic.w	r3, r3, #1
 8001e0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001e0e:	4b2f      	ldr	r3, [pc, #188]	@ (8001ecc <SystemClock_Config+0xf4>)
 8001e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	603b      	str	r3, [r7, #0]
 8001e18:	4b2d      	ldr	r3, [pc, #180]	@ (8001ed0 <SystemClock_Config+0xf8>)
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001e20:	4a2b      	ldr	r2, [pc, #172]	@ (8001ed0 <SystemClock_Config+0xf8>)
 8001e22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e26:	6193      	str	r3, [r2, #24]
 8001e28:	4b29      	ldr	r3, [pc, #164]	@ (8001ed0 <SystemClock_Config+0xf8>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e30:	603b      	str	r3, [r7, #0]
 8001e32:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001e34:	bf00      	nop
 8001e36:	4b26      	ldr	r3, [pc, #152]	@ (8001ed0 <SystemClock_Config+0xf8>)
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e42:	d1f8      	bne.n	8001e36 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e44:	2302      	movs	r3, #2
 8001e46:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e4c:	2340      	movs	r3, #64	@ 0x40
 8001e4e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e50:	2302      	movs	r3, #2
 8001e52:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e54:	2300      	movs	r3, #0
 8001e56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001e58:	2304      	movs	r3, #4
 8001e5a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001e5c:	230a      	movs	r3, #10
 8001e5e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001e60:	2302      	movs	r3, #2
 8001e62:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001e64:	2302      	movs	r3, #2
 8001e66:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001e6c:	230c      	movs	r3, #12
 8001e6e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001e70:	2302      	movs	r3, #2
 8001e72:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f001 fdf5 	bl	8003a6c <HAL_RCC_OscConfig>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001e88:	f000 f98a 	bl	80021a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e8c:	233f      	movs	r3, #63	@ 0x3f
 8001e8e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001e94:	2300      	movs	r3, #0
 8001e96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001ea4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ea8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001eae:	1d3b      	adds	r3, r7, #4
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f002 fa34 	bl	8004320 <HAL_RCC_ClockConfig>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8001ebe:	f000 f96f 	bl	80021a0 <Error_Handler>
  }
}
 8001ec2:	bf00      	nop
 8001ec4:	3770      	adds	r7, #112	@ 0x70
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	58000400 	.word	0x58000400
 8001ed0:	58024800 	.word	0x58024800

08001ed4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001ed8:	4b27      	ldr	r3, [pc, #156]	@ (8001f78 <MX_SPI2_Init+0xa4>)
 8001eda:	4a28      	ldr	r2, [pc, #160]	@ (8001f7c <MX_SPI2_Init+0xa8>)
 8001edc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ede:	4b26      	ldr	r3, [pc, #152]	@ (8001f78 <MX_SPI2_Init+0xa4>)
 8001ee0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001ee4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001ee6:	4b24      	ldr	r3, [pc, #144]	@ (8001f78 <MX_SPI2_Init+0xa4>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001eec:	4b22      	ldr	r3, [pc, #136]	@ (8001f78 <MX_SPI2_Init+0xa4>)
 8001eee:	2203      	movs	r2, #3
 8001ef0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ef2:	4b21      	ldr	r3, [pc, #132]	@ (8001f78 <MX_SPI2_Init+0xa4>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ef8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f78 <MX_SPI2_Init+0xa4>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001efe:	4b1e      	ldr	r3, [pc, #120]	@ (8001f78 <MX_SPI2_Init+0xa4>)
 8001f00:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001f04:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f06:	4b1c      	ldr	r3, [pc, #112]	@ (8001f78 <MX_SPI2_Init+0xa4>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001f78 <MX_SPI2_Init+0xa4>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f12:	4b19      	ldr	r3, [pc, #100]	@ (8001f78 <MX_SPI2_Init+0xa4>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f18:	4b17      	ldr	r3, [pc, #92]	@ (8001f78 <MX_SPI2_Init+0xa4>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001f1e:	4b16      	ldr	r3, [pc, #88]	@ (8001f78 <MX_SPI2_Init+0xa4>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f24:	4b14      	ldr	r3, [pc, #80]	@ (8001f78 <MX_SPI2_Init+0xa4>)
 8001f26:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f2a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001f2c:	4b12      	ldr	r3, [pc, #72]	@ (8001f78 <MX_SPI2_Init+0xa4>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001f32:	4b11      	ldr	r3, [pc, #68]	@ (8001f78 <MX_SPI2_Init+0xa4>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f38:	4b0f      	ldr	r3, [pc, #60]	@ (8001f78 <MX_SPI2_Init+0xa4>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f78 <MX_SPI2_Init+0xa4>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001f44:	4b0c      	ldr	r3, [pc, #48]	@ (8001f78 <MX_SPI2_Init+0xa4>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f78 <MX_SPI2_Init+0xa4>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001f50:	4b09      	ldr	r3, [pc, #36]	@ (8001f78 <MX_SPI2_Init+0xa4>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001f56:	4b08      	ldr	r3, [pc, #32]	@ (8001f78 <MX_SPI2_Init+0xa4>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001f5c:	4b06      	ldr	r3, [pc, #24]	@ (8001f78 <MX_SPI2_Init+0xa4>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f62:	4805      	ldr	r0, [pc, #20]	@ (8001f78 <MX_SPI2_Init+0xa4>)
 8001f64:	f004 fb94 	bl	8006690 <HAL_SPI_Init>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8001f6e:	f000 f917 	bl	80021a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	240000b8 	.word	0x240000b8
 8001f7c:	40003800 	.word	0x40003800

08001f80 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001f84:	4b27      	ldr	r3, [pc, #156]	@ (8002024 <MX_SPI4_Init+0xa4>)
 8001f86:	4a28      	ldr	r2, [pc, #160]	@ (8002028 <MX_SPI4_Init+0xa8>)
 8001f88:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001f8a:	4b26      	ldr	r3, [pc, #152]	@ (8002024 <MX_SPI4_Init+0xa4>)
 8001f8c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001f90:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001f92:	4b24      	ldr	r3, [pc, #144]	@ (8002024 <MX_SPI4_Init+0xa4>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8001f98:	4b22      	ldr	r3, [pc, #136]	@ (8002024 <MX_SPI4_Init+0xa4>)
 8001f9a:	2203      	movs	r2, #3
 8001f9c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f9e:	4b21      	ldr	r3, [pc, #132]	@ (8002024 <MX_SPI4_Init+0xa4>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fa4:	4b1f      	ldr	r3, [pc, #124]	@ (8002024 <MX_SPI4_Init+0xa4>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001faa:	4b1e      	ldr	r3, [pc, #120]	@ (8002024 <MX_SPI4_Init+0xa4>)
 8001fac:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001fb0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8002024 <MX_SPI4_Init+0xa4>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fb8:	4b1a      	ldr	r3, [pc, #104]	@ (8002024 <MX_SPI4_Init+0xa4>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fbe:	4b19      	ldr	r3, [pc, #100]	@ (8002024 <MX_SPI4_Init+0xa4>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fc4:	4b17      	ldr	r3, [pc, #92]	@ (8002024 <MX_SPI4_Init+0xa4>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001fca:	4b16      	ldr	r3, [pc, #88]	@ (8002024 <MX_SPI4_Init+0xa4>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001fd0:	4b14      	ldr	r3, [pc, #80]	@ (8002024 <MX_SPI4_Init+0xa4>)
 8001fd2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001fd6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001fd8:	4b12      	ldr	r3, [pc, #72]	@ (8002024 <MX_SPI4_Init+0xa4>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001fde:	4b11      	ldr	r3, [pc, #68]	@ (8002024 <MX_SPI4_Init+0xa4>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8002024 <MX_SPI4_Init+0xa4>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001fea:	4b0e      	ldr	r3, [pc, #56]	@ (8002024 <MX_SPI4_Init+0xa4>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8002024 <MX_SPI4_Init+0xa4>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8002024 <MX_SPI4_Init+0xa4>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001ffc:	4b09      	ldr	r3, [pc, #36]	@ (8002024 <MX_SPI4_Init+0xa4>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002002:	4b08      	ldr	r3, [pc, #32]	@ (8002024 <MX_SPI4_Init+0xa4>)
 8002004:	2200      	movs	r2, #0
 8002006:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002008:	4b06      	ldr	r3, [pc, #24]	@ (8002024 <MX_SPI4_Init+0xa4>)
 800200a:	2200      	movs	r2, #0
 800200c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800200e:	4805      	ldr	r0, [pc, #20]	@ (8002024 <MX_SPI4_Init+0xa4>)
 8002010:	f004 fb3e 	bl	8006690 <HAL_SPI_Init>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 800201a:	f000 f8c1 	bl	80021a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	24000140 	.word	0x24000140
 8002028:	40013400 	.word	0x40013400

0800202c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b08c      	sub	sp, #48	@ 0x30
 8002030:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002032:	f107 031c 	add.w	r3, r7, #28
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	60da      	str	r2, [r3, #12]
 8002040:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002042:	4b35      	ldr	r3, [pc, #212]	@ (8002118 <MX_GPIO_Init+0xec>)
 8002044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002048:	4a33      	ldr	r2, [pc, #204]	@ (8002118 <MX_GPIO_Init+0xec>)
 800204a:	f043 0310 	orr.w	r3, r3, #16
 800204e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002052:	4b31      	ldr	r3, [pc, #196]	@ (8002118 <MX_GPIO_Init+0xec>)
 8002054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002058:	f003 0310 	and.w	r3, r3, #16
 800205c:	61bb      	str	r3, [r7, #24]
 800205e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002060:	4b2d      	ldr	r3, [pc, #180]	@ (8002118 <MX_GPIO_Init+0xec>)
 8002062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002066:	4a2c      	ldr	r2, [pc, #176]	@ (8002118 <MX_GPIO_Init+0xec>)
 8002068:	f043 0304 	orr.w	r3, r3, #4
 800206c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002070:	4b29      	ldr	r3, [pc, #164]	@ (8002118 <MX_GPIO_Init+0xec>)
 8002072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	617b      	str	r3, [r7, #20]
 800207c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800207e:	4b26      	ldr	r3, [pc, #152]	@ (8002118 <MX_GPIO_Init+0xec>)
 8002080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002084:	4a24      	ldr	r2, [pc, #144]	@ (8002118 <MX_GPIO_Init+0xec>)
 8002086:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800208a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800208e:	4b22      	ldr	r3, [pc, #136]	@ (8002118 <MX_GPIO_Init+0xec>)
 8002090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002094:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800209c:	4b1e      	ldr	r3, [pc, #120]	@ (8002118 <MX_GPIO_Init+0xec>)
 800209e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002118 <MX_GPIO_Init+0xec>)
 80020a4:	f043 0302 	orr.w	r3, r3, #2
 80020a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002118 <MX_GPIO_Init+0xec>)
 80020ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ba:	4b17      	ldr	r3, [pc, #92]	@ (8002118 <MX_GPIO_Init+0xec>)
 80020bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020c0:	4a15      	ldr	r2, [pc, #84]	@ (8002118 <MX_GPIO_Init+0xec>)
 80020c2:	f043 0301 	orr.w	r3, r3, #1
 80020c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020ca:	4b13      	ldr	r3, [pc, #76]	@ (8002118 <MX_GPIO_Init+0xec>)
 80020cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002118 <MX_GPIO_Init+0xec>)
 80020da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020de:	4a0e      	ldr	r2, [pc, #56]	@ (8002118 <MX_GPIO_Init+0xec>)
 80020e0:	f043 0308 	orr.w	r3, r3, #8
 80020e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002118 <MX_GPIO_Init+0xec>)
 80020ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	607b      	str	r3, [r7, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020f6:	2310      	movs	r3, #16
 80020f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020fa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80020fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002104:	f107 031c 	add.w	r3, r7, #28
 8002108:	4619      	mov	r1, r3
 800210a:	4804      	ldr	r0, [pc, #16]	@ (800211c <MX_GPIO_Init+0xf0>)
 800210c:	f001 fa78 	bl	8003600 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002110:	bf00      	nop
 8002112:	3730      	adds	r7, #48	@ 0x30
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	58024400 	.word	0x58024400
 800211c:	58020c00 	.word	0x58020c00

08002120 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002126:	463b      	mov	r3, r7
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	609a      	str	r2, [r3, #8]
 8002130:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002132:	f000 ff43 	bl	8002fbc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002136:	2301      	movs	r3, #1
 8002138:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800213a:	2300      	movs	r3, #0
 800213c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800213e:	2300      	movs	r3, #0
 8002140:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002142:	231f      	movs	r3, #31
 8002144:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8002146:	2387      	movs	r3, #135	@ 0x87
 8002148:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800214a:	2300      	movs	r3, #0
 800214c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800214e:	2300      	movs	r3, #0
 8002150:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002152:	2301      	movs	r3, #1
 8002154:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002156:	2301      	movs	r3, #1
 8002158:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800215a:	2300      	movs	r3, #0
 800215c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800215e:	2300      	movs	r3, #0
 8002160:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002162:	463b      	mov	r3, r7
 8002164:	4618      	mov	r0, r3
 8002166:	f000 ff61 	bl	800302c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800216a:	2004      	movs	r0, #4
 800216c:	f000 ff3e 	bl	8002fec <HAL_MPU_Enable>

}
 8002170:	bf00      	nop
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d102      	bne.n	800218e <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8002188:	4b04      	ldr	r3, [pc, #16]	@ (800219c <BSP_PB_Callback+0x24>)
 800218a:	2201      	movs	r2, #1
 800218c:	601a      	str	r2, [r3, #0]
  }
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	240000b4 	.word	0x240000b4

080021a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021a4:	b672      	cpsid	i
}
 80021a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021a8:	bf00      	nop
 80021aa:	e7fd      	b.n	80021a8 <Error_Handler+0x8>

080021ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b2:	4b0a      	ldr	r3, [pc, #40]	@ (80021dc <HAL_MspInit+0x30>)
 80021b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021b8:	4a08      	ldr	r2, [pc, #32]	@ (80021dc <HAL_MspInit+0x30>)
 80021ba:	f043 0302 	orr.w	r3, r3, #2
 80021be:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80021c2:	4b06      	ldr	r3, [pc, #24]	@ (80021dc <HAL_MspInit+0x30>)
 80021c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	607b      	str	r3, [r7, #4]
 80021ce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	58024400 	.word	0x58024400

080021e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b0bc      	sub	sp, #240	@ 0xf0
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021f8:	f107 0318 	add.w	r3, r7, #24
 80021fc:	22c0      	movs	r2, #192	@ 0xc0
 80021fe:	2100      	movs	r1, #0
 8002200:	4618      	mov	r0, r3
 8002202:	f006 fd1c 	bl	8008c3e <memset>
  if(hspi->Instance==SPI2)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a69      	ldr	r2, [pc, #420]	@ (80023b0 <HAL_SPI_MspInit+0x1d0>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d164      	bne.n	80022da <HAL_SPI_MspInit+0xfa>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002210:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800221c:	2300      	movs	r3, #0
 800221e:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002220:	f107 0318 	add.w	r3, r7, #24
 8002224:	4618      	mov	r0, r3
 8002226:	f002 fc07 	bl	8004a38 <HAL_RCCEx_PeriphCLKConfig>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002230:	f7ff ffb6 	bl	80021a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002234:	4b5f      	ldr	r3, [pc, #380]	@ (80023b4 <HAL_SPI_MspInit+0x1d4>)
 8002236:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800223a:	4a5e      	ldr	r2, [pc, #376]	@ (80023b4 <HAL_SPI_MspInit+0x1d4>)
 800223c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002240:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002244:	4b5b      	ldr	r3, [pc, #364]	@ (80023b4 <HAL_SPI_MspInit+0x1d4>)
 8002246:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800224a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002252:	4b58      	ldr	r3, [pc, #352]	@ (80023b4 <HAL_SPI_MspInit+0x1d4>)
 8002254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002258:	4a56      	ldr	r2, [pc, #344]	@ (80023b4 <HAL_SPI_MspInit+0x1d4>)
 800225a:	f043 0302 	orr.w	r3, r3, #2
 800225e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002262:	4b54      	ldr	r3, [pc, #336]	@ (80023b4 <HAL_SPI_MspInit+0x1d4>)
 8002264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	693b      	ldr	r3, [r7, #16]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002270:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002274:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002278:	2302      	movs	r3, #2
 800227a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800227e:	2301      	movs	r3, #1
 8002280:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002284:	2300      	movs	r3, #0
 8002286:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800228a:	2305      	movs	r3, #5
 800228c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002290:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002294:	4619      	mov	r1, r3
 8002296:	4848      	ldr	r0, [pc, #288]	@ (80023b8 <HAL_SPI_MspInit+0x1d8>)
 8002298:	f001 f9b2 	bl	8003600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800229c:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80022a0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a4:	2302      	movs	r3, #2
 80022a6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b0:	2300      	movs	r3, #0
 80022b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022b6:	2305      	movs	r3, #5
 80022b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022bc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80022c0:	4619      	mov	r1, r3
 80022c2:	483d      	ldr	r0, [pc, #244]	@ (80023b8 <HAL_SPI_MspInit+0x1d8>)
 80022c4:	f001 f99c 	bl	8003600 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80022c8:	2200      	movs	r2, #0
 80022ca:	2100      	movs	r1, #0
 80022cc:	2024      	movs	r0, #36	@ 0x24
 80022ce:	f000 fe40 	bl	8002f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80022d2:	2024      	movs	r0, #36	@ 0x24
 80022d4:	f000 fe57 	bl	8002f86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80022d8:	e066      	b.n	80023a8 <HAL_SPI_MspInit+0x1c8>
  else if(hspi->Instance==SPI4)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a37      	ldr	r2, [pc, #220]	@ (80023bc <HAL_SPI_MspInit+0x1dc>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d161      	bne.n	80023a8 <HAL_SPI_MspInit+0x1c8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80022e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022e8:	f04f 0300 	mov.w	r3, #0
 80022ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80022f0:	2300      	movs	r3, #0
 80022f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022f4:	f107 0318 	add.w	r3, r7, #24
 80022f8:	4618      	mov	r0, r3
 80022fa:	f002 fb9d 	bl	8004a38 <HAL_RCCEx_PeriphCLKConfig>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <HAL_SPI_MspInit+0x128>
      Error_Handler();
 8002304:	f7ff ff4c 	bl	80021a0 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002308:	4b2a      	ldr	r3, [pc, #168]	@ (80023b4 <HAL_SPI_MspInit+0x1d4>)
 800230a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800230e:	4a29      	ldr	r2, [pc, #164]	@ (80023b4 <HAL_SPI_MspInit+0x1d4>)
 8002310:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002314:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002318:	4b26      	ldr	r3, [pc, #152]	@ (80023b4 <HAL_SPI_MspInit+0x1d4>)
 800231a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800231e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002326:	4b23      	ldr	r3, [pc, #140]	@ (80023b4 <HAL_SPI_MspInit+0x1d4>)
 8002328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800232c:	4a21      	ldr	r2, [pc, #132]	@ (80023b4 <HAL_SPI_MspInit+0x1d4>)
 800232e:	f043 0310 	orr.w	r3, r3, #16
 8002332:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002336:	4b1f      	ldr	r3, [pc, #124]	@ (80023b4 <HAL_SPI_MspInit+0x1d4>)
 8002338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800233c:	f003 0310 	and.w	r3, r3, #16
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002344:	2364      	movs	r3, #100	@ 0x64
 8002346:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234a:	2302      	movs	r3, #2
 800234c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002350:	2300      	movs	r3, #0
 8002352:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002356:	2300      	movs	r3, #0
 8002358:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800235c:	2305      	movs	r3, #5
 800235e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002362:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002366:	4619      	mov	r1, r3
 8002368:	4815      	ldr	r0, [pc, #84]	@ (80023c0 <HAL_SPI_MspInit+0x1e0>)
 800236a:	f001 f949 	bl	8003600 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800236e:	2310      	movs	r3, #16
 8002370:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002374:	2302      	movs	r3, #2
 8002376:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800237a:	2301      	movs	r3, #1
 800237c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002380:	2300      	movs	r3, #0
 8002382:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002386:	2305      	movs	r3, #5
 8002388:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800238c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002390:	4619      	mov	r1, r3
 8002392:	480b      	ldr	r0, [pc, #44]	@ (80023c0 <HAL_SPI_MspInit+0x1e0>)
 8002394:	f001 f934 	bl	8003600 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8002398:	2200      	movs	r2, #0
 800239a:	2100      	movs	r1, #0
 800239c:	2054      	movs	r0, #84	@ 0x54
 800239e:	f000 fdd8 	bl	8002f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80023a2:	2054      	movs	r0, #84	@ 0x54
 80023a4:	f000 fdef 	bl	8002f86 <HAL_NVIC_EnableIRQ>
}
 80023a8:	bf00      	nop
 80023aa:	37f0      	adds	r7, #240	@ 0xf0
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40003800 	.word	0x40003800
 80023b4:	58024400 	.word	0x58024400
 80023b8:	58020400 	.word	0x58020400
 80023bc:	40013400 	.word	0x40013400
 80023c0:	58021000 	.word	0x58021000

080023c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023c8:	bf00      	nop
 80023ca:	e7fd      	b.n	80023c8 <NMI_Handler+0x4>

080023cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023d0:	bf00      	nop
 80023d2:	e7fd      	b.n	80023d0 <HardFault_Handler+0x4>

080023d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023d8:	bf00      	nop
 80023da:	e7fd      	b.n	80023d8 <MemManage_Handler+0x4>

080023dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023e0:	bf00      	nop
 80023e2:	e7fd      	b.n	80023e0 <BusFault_Handler+0x4>

080023e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023e8:	bf00      	nop
 80023ea:	e7fd      	b.n	80023e8 <UsageFault_Handler+0x4>

080023ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023fa:	b480      	push	{r7}
 80023fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800241a:	f000 fc6f 	bl	8002cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002428:	4802      	ldr	r0, [pc, #8]	@ (8002434 <SPI2_IRQHandler+0x10>)
 800242a:	f004 ff7d 	bl	8007328 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	240000b8 	.word	0x240000b8

08002438 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800243c:	2000      	movs	r0, #0
 800243e:	f000 fafb 	bl	8002a38 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 800244c:	4802      	ldr	r0, [pc, #8]	@ (8002458 <SPI4_IRQHandler+0x10>)
 800244e:	f004 ff6b 	bl	8007328 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	24000140 	.word	0x24000140

0800245c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]
 800246c:	e00a      	b.n	8002484 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800246e:	f3af 8000 	nop.w
 8002472:	4601      	mov	r1, r0
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	1c5a      	adds	r2, r3, #1
 8002478:	60ba      	str	r2, [r7, #8]
 800247a:	b2ca      	uxtb	r2, r1
 800247c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	3301      	adds	r3, #1
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	429a      	cmp	r2, r3
 800248a:	dbf0      	blt.n	800246e <_read+0x12>
  }

  return len;
 800248c:	687b      	ldr	r3, [r7, #4]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b086      	sub	sp, #24
 800249a:	af00      	add	r7, sp, #0
 800249c:	60f8      	str	r0, [r7, #12]
 800249e:	60b9      	str	r1, [r7, #8]
 80024a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024a2:	2300      	movs	r3, #0
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	e009      	b.n	80024bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	1c5a      	adds	r2, r3, #1
 80024ac:	60ba      	str	r2, [r7, #8]
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 fb35 	bl	8002b20 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	3301      	adds	r3, #1
 80024ba:	617b      	str	r3, [r7, #20]
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	dbf1      	blt.n	80024a8 <_write+0x12>
  }
  return len;
 80024c4:	687b      	ldr	r3, [r7, #4]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <_close>:

int _close(int file)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024da:	4618      	mov	r0, r3
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024f6:	605a      	str	r2, [r3, #4]
  return 0;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <_isatty>:

int _isatty(int file)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800250e:	2301      	movs	r3, #1
}
 8002510:	4618      	mov	r0, r3
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
	...

08002538 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002540:	4a14      	ldr	r2, [pc, #80]	@ (8002594 <_sbrk+0x5c>)
 8002542:	4b15      	ldr	r3, [pc, #84]	@ (8002598 <_sbrk+0x60>)
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800254c:	4b13      	ldr	r3, [pc, #76]	@ (800259c <_sbrk+0x64>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d102      	bne.n	800255a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002554:	4b11      	ldr	r3, [pc, #68]	@ (800259c <_sbrk+0x64>)
 8002556:	4a12      	ldr	r2, [pc, #72]	@ (80025a0 <_sbrk+0x68>)
 8002558:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800255a:	4b10      	ldr	r3, [pc, #64]	@ (800259c <_sbrk+0x64>)
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4413      	add	r3, r2
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	429a      	cmp	r2, r3
 8002566:	d207      	bcs.n	8002578 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002568:	f006 fbb8 	bl	8008cdc <__errno>
 800256c:	4603      	mov	r3, r0
 800256e:	220c      	movs	r2, #12
 8002570:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002572:	f04f 33ff 	mov.w	r3, #4294967295
 8002576:	e009      	b.n	800258c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002578:	4b08      	ldr	r3, [pc, #32]	@ (800259c <_sbrk+0x64>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800257e:	4b07      	ldr	r3, [pc, #28]	@ (800259c <_sbrk+0x64>)
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4413      	add	r3, r2
 8002586:	4a05      	ldr	r2, [pc, #20]	@ (800259c <_sbrk+0x64>)
 8002588:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800258a:	68fb      	ldr	r3, [r7, #12]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	24080000 	.word	0x24080000
 8002598:	00000400 	.word	0x00000400
 800259c:	240001c8 	.word	0x240001c8
 80025a0:	240003c0 	.word	0x240003c0

080025a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80025a8:	4b43      	ldr	r3, [pc, #268]	@ (80026b8 <SystemInit+0x114>)
 80025aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ae:	4a42      	ldr	r2, [pc, #264]	@ (80026b8 <SystemInit+0x114>)
 80025b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80025b8:	4b40      	ldr	r3, [pc, #256]	@ (80026bc <SystemInit+0x118>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 030f 	and.w	r3, r3, #15
 80025c0:	2b06      	cmp	r3, #6
 80025c2:	d807      	bhi.n	80025d4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025c4:	4b3d      	ldr	r3, [pc, #244]	@ (80026bc <SystemInit+0x118>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f023 030f 	bic.w	r3, r3, #15
 80025cc:	4a3b      	ldr	r2, [pc, #236]	@ (80026bc <SystemInit+0x118>)
 80025ce:	f043 0307 	orr.w	r3, r3, #7
 80025d2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80025d4:	4b3a      	ldr	r3, [pc, #232]	@ (80026c0 <SystemInit+0x11c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a39      	ldr	r2, [pc, #228]	@ (80026c0 <SystemInit+0x11c>)
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80025e0:	4b37      	ldr	r3, [pc, #220]	@ (80026c0 <SystemInit+0x11c>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80025e6:	4b36      	ldr	r3, [pc, #216]	@ (80026c0 <SystemInit+0x11c>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	4935      	ldr	r1, [pc, #212]	@ (80026c0 <SystemInit+0x11c>)
 80025ec:	4b35      	ldr	r3, [pc, #212]	@ (80026c4 <SystemInit+0x120>)
 80025ee:	4013      	ands	r3, r2
 80025f0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80025f2:	4b32      	ldr	r3, [pc, #200]	@ (80026bc <SystemInit+0x118>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d007      	beq.n	800260e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025fe:	4b2f      	ldr	r3, [pc, #188]	@ (80026bc <SystemInit+0x118>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f023 030f 	bic.w	r3, r3, #15
 8002606:	4a2d      	ldr	r2, [pc, #180]	@ (80026bc <SystemInit+0x118>)
 8002608:	f043 0307 	orr.w	r3, r3, #7
 800260c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800260e:	4b2c      	ldr	r3, [pc, #176]	@ (80026c0 <SystemInit+0x11c>)
 8002610:	2200      	movs	r2, #0
 8002612:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002614:	4b2a      	ldr	r3, [pc, #168]	@ (80026c0 <SystemInit+0x11c>)
 8002616:	2200      	movs	r2, #0
 8002618:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800261a:	4b29      	ldr	r3, [pc, #164]	@ (80026c0 <SystemInit+0x11c>)
 800261c:	2200      	movs	r2, #0
 800261e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002620:	4b27      	ldr	r3, [pc, #156]	@ (80026c0 <SystemInit+0x11c>)
 8002622:	4a29      	ldr	r2, [pc, #164]	@ (80026c8 <SystemInit+0x124>)
 8002624:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002626:	4b26      	ldr	r3, [pc, #152]	@ (80026c0 <SystemInit+0x11c>)
 8002628:	4a28      	ldr	r2, [pc, #160]	@ (80026cc <SystemInit+0x128>)
 800262a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800262c:	4b24      	ldr	r3, [pc, #144]	@ (80026c0 <SystemInit+0x11c>)
 800262e:	4a28      	ldr	r2, [pc, #160]	@ (80026d0 <SystemInit+0x12c>)
 8002630:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002632:	4b23      	ldr	r3, [pc, #140]	@ (80026c0 <SystemInit+0x11c>)
 8002634:	2200      	movs	r2, #0
 8002636:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002638:	4b21      	ldr	r3, [pc, #132]	@ (80026c0 <SystemInit+0x11c>)
 800263a:	4a25      	ldr	r2, [pc, #148]	@ (80026d0 <SystemInit+0x12c>)
 800263c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800263e:	4b20      	ldr	r3, [pc, #128]	@ (80026c0 <SystemInit+0x11c>)
 8002640:	2200      	movs	r2, #0
 8002642:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002644:	4b1e      	ldr	r3, [pc, #120]	@ (80026c0 <SystemInit+0x11c>)
 8002646:	4a22      	ldr	r2, [pc, #136]	@ (80026d0 <SystemInit+0x12c>)
 8002648:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800264a:	4b1d      	ldr	r3, [pc, #116]	@ (80026c0 <SystemInit+0x11c>)
 800264c:	2200      	movs	r2, #0
 800264e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002650:	4b1b      	ldr	r3, [pc, #108]	@ (80026c0 <SystemInit+0x11c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a1a      	ldr	r2, [pc, #104]	@ (80026c0 <SystemInit+0x11c>)
 8002656:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800265a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800265c:	4b18      	ldr	r3, [pc, #96]	@ (80026c0 <SystemInit+0x11c>)
 800265e:	2200      	movs	r2, #0
 8002660:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002662:	4b1c      	ldr	r3, [pc, #112]	@ (80026d4 <SystemInit+0x130>)
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	4b1c      	ldr	r3, [pc, #112]	@ (80026d8 <SystemInit+0x134>)
 8002668:	4013      	ands	r3, r2
 800266a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800266e:	d202      	bcs.n	8002676 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002670:	4b1a      	ldr	r3, [pc, #104]	@ (80026dc <SystemInit+0x138>)
 8002672:	2201      	movs	r2, #1
 8002674:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8002676:	4b12      	ldr	r3, [pc, #72]	@ (80026c0 <SystemInit+0x11c>)
 8002678:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800267c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d113      	bne.n	80026ac <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002684:	4b0e      	ldr	r3, [pc, #56]	@ (80026c0 <SystemInit+0x11c>)
 8002686:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800268a:	4a0d      	ldr	r2, [pc, #52]	@ (80026c0 <SystemInit+0x11c>)
 800268c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002690:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002694:	4b12      	ldr	r3, [pc, #72]	@ (80026e0 <SystemInit+0x13c>)
 8002696:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800269a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800269c:	4b08      	ldr	r3, [pc, #32]	@ (80026c0 <SystemInit+0x11c>)
 800269e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80026a2:	4a07      	ldr	r2, [pc, #28]	@ (80026c0 <SystemInit+0x11c>)
 80026a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80026a8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80026ac:	bf00      	nop
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	e000ed00 	.word	0xe000ed00
 80026bc:	52002000 	.word	0x52002000
 80026c0:	58024400 	.word	0x58024400
 80026c4:	eaf6ed7f 	.word	0xeaf6ed7f
 80026c8:	02020200 	.word	0x02020200
 80026cc:	01ff0000 	.word	0x01ff0000
 80026d0:	01010280 	.word	0x01010280
 80026d4:	5c001000 	.word	0x5c001000
 80026d8:	ffff0000 	.word	0xffff0000
 80026dc:	51008108 	.word	0x51008108
 80026e0:	52004000 	.word	0x52004000

080026e4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80026e8:	4b09      	ldr	r3, [pc, #36]	@ (8002710 <ExitRun0Mode+0x2c>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	4a08      	ldr	r2, [pc, #32]	@ (8002710 <ExitRun0Mode+0x2c>)
 80026ee:	f043 0302 	orr.w	r3, r3, #2
 80026f2:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80026f4:	bf00      	nop
 80026f6:	4b06      	ldr	r3, [pc, #24]	@ (8002710 <ExitRun0Mode+0x2c>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0f9      	beq.n	80026f6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002702:	bf00      	nop
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	58024800 	.word	0x58024800

08002714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002714:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002750 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002718:	f7ff ffe4 	bl	80026e4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800271c:	f7ff ff42 	bl	80025a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002720:	480c      	ldr	r0, [pc, #48]	@ (8002754 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002722:	490d      	ldr	r1, [pc, #52]	@ (8002758 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002724:	4a0d      	ldr	r2, [pc, #52]	@ (800275c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002728:	e002      	b.n	8002730 <LoopCopyDataInit>

0800272a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800272a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800272c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800272e:	3304      	adds	r3, #4

08002730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002734:	d3f9      	bcc.n	800272a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002736:	4a0a      	ldr	r2, [pc, #40]	@ (8002760 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002738:	4c0a      	ldr	r4, [pc, #40]	@ (8002764 <LoopFillZerobss+0x22>)
  movs r3, #0
 800273a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800273c:	e001      	b.n	8002742 <LoopFillZerobss>

0800273e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800273e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002740:	3204      	adds	r2, #4

08002742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002744:	d3fb      	bcc.n	800273e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002746:	f006 facf 	bl	8008ce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800274a:	f7ff fa4b 	bl	8001be4 <main>
  bx  lr
 800274e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002750:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002754:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002758:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 800275c:	0800b16c 	.word	0x0800b16c
  ldr r2, =_sbss
 8002760:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 8002764:	240003bc 	.word	0x240003bc

08002768 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002768:	e7fe      	b.n	8002768 <ADC3_IRQHandler>
	...

0800276c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08c      	sub	sp, #48	@ 0x30
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002776:	2300      	movs	r3, #0
 8002778:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d009      	beq.n	8002794 <BSP_LED_Init+0x28>
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d006      	beq.n	8002794 <BSP_LED_Init+0x28>
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	2b02      	cmp	r3, #2
 800278a:	d003      	beq.n	8002794 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800278c:	f06f 0301 	mvn.w	r3, #1
 8002790:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002792:	e055      	b.n	8002840 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10f      	bne.n	80027ba <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 800279a:	4b2c      	ldr	r3, [pc, #176]	@ (800284c <BSP_LED_Init+0xe0>)
 800279c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027a0:	4a2a      	ldr	r2, [pc, #168]	@ (800284c <BSP_LED_Init+0xe0>)
 80027a2:	f043 0302 	orr.w	r3, r3, #2
 80027a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027aa:	4b28      	ldr	r3, [pc, #160]	@ (800284c <BSP_LED_Init+0xe0>)
 80027ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	617b      	str	r3, [r7, #20]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	e021      	b.n	80027fe <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d10f      	bne.n	80027e0 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80027c0:	4b22      	ldr	r3, [pc, #136]	@ (800284c <BSP_LED_Init+0xe0>)
 80027c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027c6:	4a21      	ldr	r2, [pc, #132]	@ (800284c <BSP_LED_Init+0xe0>)
 80027c8:	f043 0310 	orr.w	r3, r3, #16
 80027cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027d0:	4b1e      	ldr	r3, [pc, #120]	@ (800284c <BSP_LED_Init+0xe0>)
 80027d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027d6:	f003 0310 	and.w	r3, r3, #16
 80027da:	613b      	str	r3, [r7, #16]
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	e00e      	b.n	80027fe <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80027e0:	4b1a      	ldr	r3, [pc, #104]	@ (800284c <BSP_LED_Init+0xe0>)
 80027e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027e6:	4a19      	ldr	r2, [pc, #100]	@ (800284c <BSP_LED_Init+0xe0>)
 80027e8:	f043 0302 	orr.w	r3, r3, #2
 80027ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027f0:	4b16      	ldr	r3, [pc, #88]	@ (800284c <BSP_LED_Init+0xe0>)
 80027f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	4a13      	ldr	r2, [pc, #76]	@ (8002850 <BSP_LED_Init+0xe4>)
 8002802:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002806:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002808:	2301      	movs	r3, #1
 800280a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800280c:	2300      	movs	r3, #0
 800280e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002810:	2303      	movs	r3, #3
 8002812:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002814:	79fb      	ldrb	r3, [r7, #7]
 8002816:	4a0f      	ldr	r2, [pc, #60]	@ (8002854 <BSP_LED_Init+0xe8>)
 8002818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800281c:	f107 0218 	add.w	r2, r7, #24
 8002820:	4611      	mov	r1, r2
 8002822:	4618      	mov	r0, r3
 8002824:	f000 feec 	bl	8003600 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	4a0a      	ldr	r2, [pc, #40]	@ (8002854 <BSP_LED_Init+0xe8>)
 800282c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002830:	79fb      	ldrb	r3, [r7, #7]
 8002832:	4a07      	ldr	r2, [pc, #28]	@ (8002850 <BSP_LED_Init+0xe4>)
 8002834:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002838:	2200      	movs	r2, #0
 800283a:	4619      	mov	r1, r3
 800283c:	f001 f8a8 	bl	8003990 <HAL_GPIO_WritePin>
  }

  return ret;
 8002840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002842:	4618      	mov	r0, r3
 8002844:	3730      	adds	r7, #48	@ 0x30
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	58024400 	.word	0x58024400
 8002850:	0800b104 	.word	0x0800b104
 8002854:	2400000c 	.word	0x2400000c

08002858 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002862:	2300      	movs	r3, #0
 8002864:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d009      	beq.n	8002880 <BSP_LED_On+0x28>
 800286c:	79fb      	ldrb	r3, [r7, #7]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d006      	beq.n	8002880 <BSP_LED_On+0x28>
 8002872:	79fb      	ldrb	r3, [r7, #7]
 8002874:	2b02      	cmp	r3, #2
 8002876:	d003      	beq.n	8002880 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002878:	f06f 0301 	mvn.w	r3, #1
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	e00b      	b.n	8002898 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8002880:	79fb      	ldrb	r3, [r7, #7]
 8002882:	4a08      	ldr	r2, [pc, #32]	@ (80028a4 <BSP_LED_On+0x4c>)
 8002884:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002888:	79fb      	ldrb	r3, [r7, #7]
 800288a:	4a07      	ldr	r2, [pc, #28]	@ (80028a8 <BSP_LED_On+0x50>)
 800288c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002890:	2201      	movs	r2, #1
 8002892:	4619      	mov	r1, r3
 8002894:	f001 f87c 	bl	8003990 <HAL_GPIO_WritePin>
  }

  return ret;
 8002898:	68fb      	ldr	r3, [r7, #12]
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	2400000c 	.word	0x2400000c
 80028a8:	0800b104 	.word	0x0800b104

080028ac <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	4603      	mov	r3, r0
 80028b4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d009      	beq.n	80028d4 <BSP_LED_Off+0x28>
 80028c0:	79fb      	ldrb	r3, [r7, #7]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d006      	beq.n	80028d4 <BSP_LED_Off+0x28>
 80028c6:	79fb      	ldrb	r3, [r7, #7]
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d003      	beq.n	80028d4 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80028cc:	f06f 0301 	mvn.w	r3, #1
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	e00b      	b.n	80028ec <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80028d4:	79fb      	ldrb	r3, [r7, #7]
 80028d6:	4a08      	ldr	r2, [pc, #32]	@ (80028f8 <BSP_LED_Off+0x4c>)
 80028d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80028dc:	79fb      	ldrb	r3, [r7, #7]
 80028de:	4a07      	ldr	r2, [pc, #28]	@ (80028fc <BSP_LED_Off+0x50>)
 80028e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028e4:	2200      	movs	r2, #0
 80028e6:	4619      	mov	r1, r3
 80028e8:	f001 f852 	bl	8003990 <HAL_GPIO_WritePin>
  }

  return ret;
 80028ec:	68fb      	ldr	r3, [r7, #12]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	2400000c 	.word	0x2400000c
 80028fc:	0800b104 	.word	0x0800b104

08002900 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	4603      	mov	r3, r0
 8002908:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800290e:	79fb      	ldrb	r3, [r7, #7]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d009      	beq.n	8002928 <BSP_LED_Toggle+0x28>
 8002914:	79fb      	ldrb	r3, [r7, #7]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d006      	beq.n	8002928 <BSP_LED_Toggle+0x28>
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	2b02      	cmp	r3, #2
 800291e:	d003      	beq.n	8002928 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002920:	f06f 0301 	mvn.w	r3, #1
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	e00b      	b.n	8002940 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002928:	79fb      	ldrb	r3, [r7, #7]
 800292a:	4a08      	ldr	r2, [pc, #32]	@ (800294c <BSP_LED_Toggle+0x4c>)
 800292c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	4907      	ldr	r1, [pc, #28]	@ (8002950 <BSP_LED_Toggle+0x50>)
 8002934:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002938:	4619      	mov	r1, r3
 800293a:	4610      	mov	r0, r2
 800293c:	f001 f841 	bl	80039c2 <HAL_GPIO_TogglePin>
  }

  return ret;
 8002940:	68fb      	ldr	r3, [r7, #12]
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	2400000c 	.word	0x2400000c
 8002950:	0800b104 	.word	0x0800b104

08002954 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b088      	sub	sp, #32
 8002958:	af00      	add	r7, sp, #0
 800295a:	4603      	mov	r3, r0
 800295c:	460a      	mov	r2, r1
 800295e:	71fb      	strb	r3, [r7, #7]
 8002960:	4613      	mov	r3, r2
 8002962:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8002964:	4b2e      	ldr	r3, [pc, #184]	@ (8002a20 <BSP_PB_Init+0xcc>)
 8002966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800296a:	4a2d      	ldr	r2, [pc, #180]	@ (8002a20 <BSP_PB_Init+0xcc>)
 800296c:	f043 0304 	orr.w	r3, r3, #4
 8002970:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002974:	4b2a      	ldr	r3, [pc, #168]	@ (8002a20 <BSP_PB_Init+0xcc>)
 8002976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800297a:	f003 0304 	and.w	r3, r3, #4
 800297e:	60bb      	str	r3, [r7, #8]
 8002980:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8002982:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002986:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002988:	2302      	movs	r3, #2
 800298a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800298c:	2302      	movs	r3, #2
 800298e:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8002990:	79bb      	ldrb	r3, [r7, #6]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10c      	bne.n	80029b0 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002996:	2300      	movs	r3, #0
 8002998:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800299a:	79fb      	ldrb	r3, [r7, #7]
 800299c:	4a21      	ldr	r2, [pc, #132]	@ (8002a24 <BSP_PB_Init+0xd0>)
 800299e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a2:	f107 020c 	add.w	r2, r7, #12
 80029a6:	4611      	mov	r1, r2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f000 fe29 	bl	8003600 <HAL_GPIO_Init>
 80029ae:	e031      	b.n	8002a14 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80029b0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80029b4:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80029b6:	79fb      	ldrb	r3, [r7, #7]
 80029b8:	4a1a      	ldr	r2, [pc, #104]	@ (8002a24 <BSP_PB_Init+0xd0>)
 80029ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029be:	f107 020c 	add.w	r2, r7, #12
 80029c2:	4611      	mov	r1, r2
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 fe1b 	bl	8003600 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	4a16      	ldr	r2, [pc, #88]	@ (8002a28 <BSP_PB_Init+0xd4>)
 80029d0:	441a      	add	r2, r3
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	4915      	ldr	r1, [pc, #84]	@ (8002a2c <BSP_PB_Init+0xd8>)
 80029d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80029da:	4619      	mov	r1, r3
 80029dc:	4610      	mov	r0, r2
 80029de:	f000 fdca 	bl	8003576 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4a10      	ldr	r2, [pc, #64]	@ (8002a28 <BSP_PB_Init+0xd4>)
 80029e8:	1898      	adds	r0, r3, r2
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	4a10      	ldr	r2, [pc, #64]	@ (8002a30 <BSP_PB_Init+0xdc>)
 80029ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f2:	461a      	mov	r2, r3
 80029f4:	2100      	movs	r1, #0
 80029f6:	f000 fd9f 	bl	8003538 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80029fa:	2028      	movs	r0, #40	@ 0x28
 80029fc:	79fb      	ldrb	r3, [r7, #7]
 80029fe:	4a0d      	ldr	r2, [pc, #52]	@ (8002a34 <BSP_PB_Init+0xe0>)
 8002a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a04:	2200      	movs	r2, #0
 8002a06:	4619      	mov	r1, r3
 8002a08:	f000 faa3 	bl	8002f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002a0c:	2328      	movs	r3, #40	@ 0x28
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 fab9 	bl	8002f86 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3720      	adds	r7, #32
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	58024400 	.word	0x58024400
 8002a24:	24000018 	.word	0x24000018
 8002a28:	240001cc 	.word	0x240001cc
 8002a2c:	0800b10c 	.word	0x0800b10c
 8002a30:	2400001c 	.word	0x2400001c
 8002a34:	24000020 	.word	0x24000020

08002a38 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4603      	mov	r3, r0
 8002a40:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8002a42:	79fb      	ldrb	r3, [r7, #7]
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	4a04      	ldr	r2, [pc, #16]	@ (8002a58 <BSP_PB_IRQHandler+0x20>)
 8002a48:	4413      	add	r3, r2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 fda8 	bl	80035a0 <HAL_EXTI_IRQHandler>
}
 8002a50:	bf00      	nop
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	240001cc 	.word	0x240001cc

08002a5c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	6039      	str	r1, [r7, #0]
 8002a66:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8002a6c:	79fb      	ldrb	r3, [r7, #7]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002a72:	f06f 0301 	mvn.w	r3, #1
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	e018      	b.n	8002aac <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	2294      	movs	r2, #148	@ 0x94
 8002a7e:	fb02 f303 	mul.w	r3, r2, r3
 8002a82:	4a0d      	ldr	r2, [pc, #52]	@ (8002ab8 <BSP_COM_Init+0x5c>)
 8002a84:	4413      	add	r3, r2
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 f86e 	bl	8002b68 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8002a8c:	79fb      	ldrb	r3, [r7, #7]
 8002a8e:	2294      	movs	r2, #148	@ 0x94
 8002a90:	fb02 f303 	mul.w	r3, r2, r3
 8002a94:	4a08      	ldr	r2, [pc, #32]	@ (8002ab8 <BSP_COM_Init+0x5c>)
 8002a96:	4413      	add	r3, r2
 8002a98:	6839      	ldr	r1, [r7, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 f80e 	bl	8002abc <MX_USART3_Init>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d002      	beq.n	8002aac <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002aa6:	f06f 0303 	mvn.w	r3, #3
 8002aaa:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002aac:	68fb      	ldr	r3, [r7, #12]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	240001d4 	.word	0x240001d4

08002abc <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8002ac6:	4b15      	ldr	r3, [pc, #84]	@ (8002b1c <MX_USART3_Init+0x60>)
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	220c      	movs	r2, #12
 8002ada:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	895b      	ldrh	r3, [r3, #10]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	891b      	ldrh	r3, [r3, #8]
 8002af2:	461a      	mov	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	899b      	ldrh	r3, [r3, #12]
 8002afc:	461a      	mov	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002b08:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f004 ff0f 	bl	800792e <HAL_UART_Init>
 8002b10:	4603      	mov	r3, r0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	24000008 	.word	0x24000008

08002b20 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8002b28:	4b09      	ldr	r3, [pc, #36]	@ (8002b50 <__io_putchar+0x30>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	2394      	movs	r3, #148	@ 0x94
 8002b30:	fb02 f303 	mul.w	r3, r2, r3
 8002b34:	4a07      	ldr	r2, [pc, #28]	@ (8002b54 <__io_putchar+0x34>)
 8002b36:	1898      	adds	r0, r3, r2
 8002b38:	1d39      	adds	r1, r7, #4
 8002b3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f004 ff4f 	bl	80079e2 <HAL_UART_Transmit>
  return ch;
 8002b44:	687b      	ldr	r3, [r7, #4]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	24000268 	.word	0x24000268
 8002b54:	240001d4 	.word	0x240001d4

08002b58 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002b5c:	2000      	movs	r0, #0
 8002b5e:	f7ff fb0b 	bl	8002178 <BSP_PB_Callback>
}
 8002b62:	bf00      	nop
 8002b64:	bd80      	pop	{r7, pc}
	...

08002b68 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08a      	sub	sp, #40	@ 0x28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8002b70:	4b27      	ldr	r3, [pc, #156]	@ (8002c10 <COM1_MspInit+0xa8>)
 8002b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b76:	4a26      	ldr	r2, [pc, #152]	@ (8002c10 <COM1_MspInit+0xa8>)
 8002b78:	f043 0308 	orr.w	r3, r3, #8
 8002b7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b80:	4b23      	ldr	r3, [pc, #140]	@ (8002c10 <COM1_MspInit+0xa8>)
 8002b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	613b      	str	r3, [r7, #16]
 8002b8c:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8002b8e:	4b20      	ldr	r3, [pc, #128]	@ (8002c10 <COM1_MspInit+0xa8>)
 8002b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b94:	4a1e      	ldr	r2, [pc, #120]	@ (8002c10 <COM1_MspInit+0xa8>)
 8002b96:	f043 0308 	orr.w	r3, r3, #8
 8002b9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8002c10 <COM1_MspInit+0xa8>)
 8002ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ba4:	f003 0308 	and.w	r3, r3, #8
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8002bac:	4b18      	ldr	r3, [pc, #96]	@ (8002c10 <COM1_MspInit+0xa8>)
 8002bae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002bb2:	4a17      	ldr	r2, [pc, #92]	@ (8002c10 <COM1_MspInit+0xa8>)
 8002bb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bb8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002bbc:	4b14      	ldr	r3, [pc, #80]	@ (8002c10 <COM1_MspInit+0xa8>)
 8002bbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002bc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bc6:	60bb      	str	r3, [r7, #8]
 8002bc8:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8002bca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bce:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8002bdc:	2307      	movs	r3, #7
 8002bde:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002be0:	f107 0314 	add.w	r3, r7, #20
 8002be4:	4619      	mov	r1, r3
 8002be6:	480b      	ldr	r0, [pc, #44]	@ (8002c14 <COM1_MspInit+0xac>)
 8002be8:	f000 fd0a 	bl	8003600 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8002bec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bf0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8002bf6:	2307      	movs	r3, #7
 8002bf8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8002bfa:	f107 0314 	add.w	r3, r7, #20
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4804      	ldr	r0, [pc, #16]	@ (8002c14 <COM1_MspInit+0xac>)
 8002c02:	f000 fcfd 	bl	8003600 <HAL_GPIO_Init>
}
 8002c06:	bf00      	nop
 8002c08:	3728      	adds	r7, #40	@ 0x28
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	58024400 	.word	0x58024400
 8002c14:	58020c00 	.word	0x58020c00

08002c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c1e:	2003      	movs	r0, #3
 8002c20:	f000 f98c 	bl	8002f3c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002c24:	f001 fd32 	bl	800468c <HAL_RCC_GetSysClockFreq>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	4b15      	ldr	r3, [pc, #84]	@ (8002c80 <HAL_Init+0x68>)
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	0a1b      	lsrs	r3, r3, #8
 8002c30:	f003 030f 	and.w	r3, r3, #15
 8002c34:	4913      	ldr	r1, [pc, #76]	@ (8002c84 <HAL_Init+0x6c>)
 8002c36:	5ccb      	ldrb	r3, [r1, r3]
 8002c38:	f003 031f 	and.w	r3, r3, #31
 8002c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c40:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c42:	4b0f      	ldr	r3, [pc, #60]	@ (8002c80 <HAL_Init+0x68>)
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	4a0e      	ldr	r2, [pc, #56]	@ (8002c84 <HAL_Init+0x6c>)
 8002c4c:	5cd3      	ldrb	r3, [r2, r3]
 8002c4e:	f003 031f 	and.w	r3, r3, #31
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	fa22 f303 	lsr.w	r3, r2, r3
 8002c58:	4a0b      	ldr	r2, [pc, #44]	@ (8002c88 <HAL_Init+0x70>)
 8002c5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c5c:	4a0b      	ldr	r2, [pc, #44]	@ (8002c8c <HAL_Init+0x74>)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c62:	2000      	movs	r0, #0
 8002c64:	f000 f814 	bl	8002c90 <HAL_InitTick>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e002      	b.n	8002c78 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002c72:	f7ff fa9b 	bl	80021ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	58024400 	.word	0x58024400
 8002c84:	0800b0f4 	.word	0x0800b0f4
 8002c88:	24000004 	.word	0x24000004
 8002c8c:	24000000 	.word	0x24000000

08002c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002c98:	4b15      	ldr	r3, [pc, #84]	@ (8002cf0 <HAL_InitTick+0x60>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e021      	b.n	8002ce8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002ca4:	4b13      	ldr	r3, [pc, #76]	@ (8002cf4 <HAL_InitTick+0x64>)
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	4b11      	ldr	r3, [pc, #68]	@ (8002cf0 <HAL_InitTick+0x60>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	4619      	mov	r1, r3
 8002cae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 f971 	bl	8002fa2 <HAL_SYSTICK_Config>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e00e      	b.n	8002ce8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b0f      	cmp	r3, #15
 8002cce:	d80a      	bhi.n	8002ce6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd8:	f000 f93b 	bl	8002f52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cdc:	4a06      	ldr	r2, [pc, #24]	@ (8002cf8 <HAL_InitTick+0x68>)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	e000      	b.n	8002ce8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	24000028 	.word	0x24000028
 8002cf4:	24000000 	.word	0x24000000
 8002cf8:	24000024 	.word	0x24000024

08002cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d00:	4b06      	ldr	r3, [pc, #24]	@ (8002d1c <HAL_IncTick+0x20>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	461a      	mov	r2, r3
 8002d06:	4b06      	ldr	r3, [pc, #24]	@ (8002d20 <HAL_IncTick+0x24>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	4a04      	ldr	r2, [pc, #16]	@ (8002d20 <HAL_IncTick+0x24>)
 8002d0e:	6013      	str	r3, [r2, #0]
}
 8002d10:	bf00      	nop
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	24000028 	.word	0x24000028
 8002d20:	2400026c 	.word	0x2400026c

08002d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  return uwTick;
 8002d28:	4b03      	ldr	r3, [pc, #12]	@ (8002d38 <HAL_GetTick+0x14>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	2400026c 	.word	0x2400026c

08002d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d44:	f7ff ffee 	bl	8002d24 <HAL_GetTick>
 8002d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d54:	d005      	beq.n	8002d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d56:	4b0a      	ldr	r3, [pc, #40]	@ (8002d80 <HAL_Delay+0x44>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4413      	add	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d62:	bf00      	nop
 8002d64:	f7ff ffde 	bl	8002d24 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d8f7      	bhi.n	8002d64 <HAL_Delay+0x28>
  {
  }
}
 8002d74:	bf00      	nop
 8002d76:	bf00      	nop
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	24000028 	.word	0x24000028

08002d84 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002d88:	4b03      	ldr	r3, [pc, #12]	@ (8002d98 <HAL_GetREVID+0x14>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	0c1b      	lsrs	r3, r3, #16
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	5c001000 	.word	0x5c001000

08002d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dac:	4b0b      	ldr	r3, [pc, #44]	@ (8002ddc <__NVIC_SetPriorityGrouping+0x40>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002db8:	4013      	ands	r3, r2
 8002dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002dc4:	4b06      	ldr	r3, [pc, #24]	@ (8002de0 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dca:	4a04      	ldr	r2, [pc, #16]	@ (8002ddc <__NVIC_SetPriorityGrouping+0x40>)
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	60d3      	str	r3, [r2, #12]
}
 8002dd0:	bf00      	nop
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	e000ed00 	.word	0xe000ed00
 8002de0:	05fa0000 	.word	0x05fa0000

08002de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002de8:	4b04      	ldr	r3, [pc, #16]	@ (8002dfc <__NVIC_GetPriorityGrouping+0x18>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	0a1b      	lsrs	r3, r3, #8
 8002dee:	f003 0307 	and.w	r3, r3, #7
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	e000ed00 	.word	0xe000ed00

08002e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	db0b      	blt.n	8002e2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e12:	88fb      	ldrh	r3, [r7, #6]
 8002e14:	f003 021f 	and.w	r2, r3, #31
 8002e18:	4907      	ldr	r1, [pc, #28]	@ (8002e38 <__NVIC_EnableIRQ+0x38>)
 8002e1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	2001      	movs	r0, #1
 8002e22:	fa00 f202 	lsl.w	r2, r0, r2
 8002e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	e000e100 	.word	0xe000e100

08002e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	6039      	str	r1, [r7, #0]
 8002e46:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	db0a      	blt.n	8002e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	490c      	ldr	r1, [pc, #48]	@ (8002e88 <__NVIC_SetPriority+0x4c>)
 8002e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e5a:	0112      	lsls	r2, r2, #4
 8002e5c:	b2d2      	uxtb	r2, r2
 8002e5e:	440b      	add	r3, r1
 8002e60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e64:	e00a      	b.n	8002e7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	4908      	ldr	r1, [pc, #32]	@ (8002e8c <__NVIC_SetPriority+0x50>)
 8002e6c:	88fb      	ldrh	r3, [r7, #6]
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	3b04      	subs	r3, #4
 8002e74:	0112      	lsls	r2, r2, #4
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	440b      	add	r3, r1
 8002e7a:	761a      	strb	r2, [r3, #24]
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	e000e100 	.word	0xe000e100
 8002e8c:	e000ed00 	.word	0xe000ed00

08002e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b089      	sub	sp, #36	@ 0x24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	f1c3 0307 	rsb	r3, r3, #7
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	bf28      	it	cs
 8002eae:	2304      	movcs	r3, #4
 8002eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	2b06      	cmp	r3, #6
 8002eb8:	d902      	bls.n	8002ec0 <NVIC_EncodePriority+0x30>
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	3b03      	subs	r3, #3
 8002ebe:	e000      	b.n	8002ec2 <NVIC_EncodePriority+0x32>
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	43da      	mvns	r2, r3
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	401a      	ands	r2, r3
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee2:	43d9      	mvns	r1, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee8:	4313      	orrs	r3, r2
         );
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3724      	adds	r7, #36	@ 0x24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
	...

08002ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f08:	d301      	bcc.n	8002f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e00f      	b.n	8002f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f38 <SysTick_Config+0x40>)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3b01      	subs	r3, #1
 8002f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f16:	210f      	movs	r1, #15
 8002f18:	f04f 30ff 	mov.w	r0, #4294967295
 8002f1c:	f7ff ff8e 	bl	8002e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f20:	4b05      	ldr	r3, [pc, #20]	@ (8002f38 <SysTick_Config+0x40>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f26:	4b04      	ldr	r3, [pc, #16]	@ (8002f38 <SysTick_Config+0x40>)
 8002f28:	2207      	movs	r2, #7
 8002f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	e000e010 	.word	0xe000e010

08002f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7ff ff29 	bl	8002d9c <__NVIC_SetPriorityGrouping>
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b086      	sub	sp, #24
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	4603      	mov	r3, r0
 8002f5a:	60b9      	str	r1, [r7, #8]
 8002f5c:	607a      	str	r2, [r7, #4]
 8002f5e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f60:	f7ff ff40 	bl	8002de4 <__NVIC_GetPriorityGrouping>
 8002f64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	68b9      	ldr	r1, [r7, #8]
 8002f6a:	6978      	ldr	r0, [r7, #20]
 8002f6c:	f7ff ff90 	bl	8002e90 <NVIC_EncodePriority>
 8002f70:	4602      	mov	r2, r0
 8002f72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f76:	4611      	mov	r1, r2
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff ff5f 	bl	8002e3c <__NVIC_SetPriority>
}
 8002f7e:	bf00      	nop
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b082      	sub	sp, #8
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff ff33 	bl	8002e00 <__NVIC_EnableIRQ>
}
 8002f9a:	bf00      	nop
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b082      	sub	sp, #8
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7ff ffa4 	bl	8002ef8 <SysTick_Config>
 8002fb0:	4603      	mov	r3, r0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
	...

08002fbc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002fc0:	f3bf 8f5f 	dmb	sy
}
 8002fc4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002fc6:	4b07      	ldr	r3, [pc, #28]	@ (8002fe4 <HAL_MPU_Disable+0x28>)
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fca:	4a06      	ldr	r2, [pc, #24]	@ (8002fe4 <HAL_MPU_Disable+0x28>)
 8002fcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fd0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002fd2:	4b05      	ldr	r3, [pc, #20]	@ (8002fe8 <HAL_MPU_Disable+0x2c>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	605a      	str	r2, [r3, #4]
}
 8002fd8:	bf00      	nop
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	e000ed00 	.word	0xe000ed00
 8002fe8:	e000ed90 	.word	0xe000ed90

08002fec <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002ff4:	4a0b      	ldr	r2, [pc, #44]	@ (8003024 <HAL_MPU_Enable+0x38>)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f043 0301 	orr.w	r3, r3, #1
 8002ffc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8003028 <HAL_MPU_Enable+0x3c>)
 8003000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003002:	4a09      	ldr	r2, [pc, #36]	@ (8003028 <HAL_MPU_Enable+0x3c>)
 8003004:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003008:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800300a:	f3bf 8f4f 	dsb	sy
}
 800300e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003010:	f3bf 8f6f 	isb	sy
}
 8003014:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	e000ed90 	.word	0xe000ed90
 8003028:	e000ed00 	.word	0xe000ed00

0800302c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	785a      	ldrb	r2, [r3, #1]
 8003038:	4b1b      	ldr	r3, [pc, #108]	@ (80030a8 <HAL_MPU_ConfigRegion+0x7c>)
 800303a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800303c:	4b1a      	ldr	r3, [pc, #104]	@ (80030a8 <HAL_MPU_ConfigRegion+0x7c>)
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	4a19      	ldr	r2, [pc, #100]	@ (80030a8 <HAL_MPU_ConfigRegion+0x7c>)
 8003042:	f023 0301 	bic.w	r3, r3, #1
 8003046:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003048:	4a17      	ldr	r2, [pc, #92]	@ (80030a8 <HAL_MPU_ConfigRegion+0x7c>)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	7b1b      	ldrb	r3, [r3, #12]
 8003054:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	7adb      	ldrb	r3, [r3, #11]
 800305a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800305c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	7a9b      	ldrb	r3, [r3, #10]
 8003062:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003064:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	7b5b      	ldrb	r3, [r3, #13]
 800306a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800306c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	7b9b      	ldrb	r3, [r3, #14]
 8003072:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003074:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	7bdb      	ldrb	r3, [r3, #15]
 800307a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800307c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	7a5b      	ldrb	r3, [r3, #9]
 8003082:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003084:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	7a1b      	ldrb	r3, [r3, #8]
 800308a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800308c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	7812      	ldrb	r2, [r2, #0]
 8003092:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003094:	4a04      	ldr	r2, [pc, #16]	@ (80030a8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003096:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003098:	6113      	str	r3, [r2, #16]
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	e000ed90 	.word	0xe000ed90

080030ac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e237      	b.n	800352e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d004      	beq.n	80030d4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2280      	movs	r2, #128	@ 0x80
 80030ce:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e22c      	b.n	800352e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a5c      	ldr	r2, [pc, #368]	@ (800324c <HAL_DMA_Abort_IT+0x1a0>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d04a      	beq.n	8003174 <HAL_DMA_Abort_IT+0xc8>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a5b      	ldr	r2, [pc, #364]	@ (8003250 <HAL_DMA_Abort_IT+0x1a4>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d045      	beq.n	8003174 <HAL_DMA_Abort_IT+0xc8>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a59      	ldr	r2, [pc, #356]	@ (8003254 <HAL_DMA_Abort_IT+0x1a8>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d040      	beq.n	8003174 <HAL_DMA_Abort_IT+0xc8>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a58      	ldr	r2, [pc, #352]	@ (8003258 <HAL_DMA_Abort_IT+0x1ac>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d03b      	beq.n	8003174 <HAL_DMA_Abort_IT+0xc8>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a56      	ldr	r2, [pc, #344]	@ (800325c <HAL_DMA_Abort_IT+0x1b0>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d036      	beq.n	8003174 <HAL_DMA_Abort_IT+0xc8>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a55      	ldr	r2, [pc, #340]	@ (8003260 <HAL_DMA_Abort_IT+0x1b4>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d031      	beq.n	8003174 <HAL_DMA_Abort_IT+0xc8>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a53      	ldr	r2, [pc, #332]	@ (8003264 <HAL_DMA_Abort_IT+0x1b8>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d02c      	beq.n	8003174 <HAL_DMA_Abort_IT+0xc8>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a52      	ldr	r2, [pc, #328]	@ (8003268 <HAL_DMA_Abort_IT+0x1bc>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d027      	beq.n	8003174 <HAL_DMA_Abort_IT+0xc8>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a50      	ldr	r2, [pc, #320]	@ (800326c <HAL_DMA_Abort_IT+0x1c0>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d022      	beq.n	8003174 <HAL_DMA_Abort_IT+0xc8>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a4f      	ldr	r2, [pc, #316]	@ (8003270 <HAL_DMA_Abort_IT+0x1c4>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d01d      	beq.n	8003174 <HAL_DMA_Abort_IT+0xc8>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a4d      	ldr	r2, [pc, #308]	@ (8003274 <HAL_DMA_Abort_IT+0x1c8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d018      	beq.n	8003174 <HAL_DMA_Abort_IT+0xc8>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a4c      	ldr	r2, [pc, #304]	@ (8003278 <HAL_DMA_Abort_IT+0x1cc>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d013      	beq.n	8003174 <HAL_DMA_Abort_IT+0xc8>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a4a      	ldr	r2, [pc, #296]	@ (800327c <HAL_DMA_Abort_IT+0x1d0>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d00e      	beq.n	8003174 <HAL_DMA_Abort_IT+0xc8>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a49      	ldr	r2, [pc, #292]	@ (8003280 <HAL_DMA_Abort_IT+0x1d4>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d009      	beq.n	8003174 <HAL_DMA_Abort_IT+0xc8>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a47      	ldr	r2, [pc, #284]	@ (8003284 <HAL_DMA_Abort_IT+0x1d8>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d004      	beq.n	8003174 <HAL_DMA_Abort_IT+0xc8>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a46      	ldr	r2, [pc, #280]	@ (8003288 <HAL_DMA_Abort_IT+0x1dc>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d101      	bne.n	8003178 <HAL_DMA_Abort_IT+0xcc>
 8003174:	2301      	movs	r3, #1
 8003176:	e000      	b.n	800317a <HAL_DMA_Abort_IT+0xce>
 8003178:	2300      	movs	r3, #0
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 8086 	beq.w	800328c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2204      	movs	r2, #4
 8003184:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a2f      	ldr	r2, [pc, #188]	@ (800324c <HAL_DMA_Abort_IT+0x1a0>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d04a      	beq.n	8003228 <HAL_DMA_Abort_IT+0x17c>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a2e      	ldr	r2, [pc, #184]	@ (8003250 <HAL_DMA_Abort_IT+0x1a4>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d045      	beq.n	8003228 <HAL_DMA_Abort_IT+0x17c>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a2c      	ldr	r2, [pc, #176]	@ (8003254 <HAL_DMA_Abort_IT+0x1a8>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d040      	beq.n	8003228 <HAL_DMA_Abort_IT+0x17c>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a2b      	ldr	r2, [pc, #172]	@ (8003258 <HAL_DMA_Abort_IT+0x1ac>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d03b      	beq.n	8003228 <HAL_DMA_Abort_IT+0x17c>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a29      	ldr	r2, [pc, #164]	@ (800325c <HAL_DMA_Abort_IT+0x1b0>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d036      	beq.n	8003228 <HAL_DMA_Abort_IT+0x17c>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a28      	ldr	r2, [pc, #160]	@ (8003260 <HAL_DMA_Abort_IT+0x1b4>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d031      	beq.n	8003228 <HAL_DMA_Abort_IT+0x17c>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a26      	ldr	r2, [pc, #152]	@ (8003264 <HAL_DMA_Abort_IT+0x1b8>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d02c      	beq.n	8003228 <HAL_DMA_Abort_IT+0x17c>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a25      	ldr	r2, [pc, #148]	@ (8003268 <HAL_DMA_Abort_IT+0x1bc>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d027      	beq.n	8003228 <HAL_DMA_Abort_IT+0x17c>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a23      	ldr	r2, [pc, #140]	@ (800326c <HAL_DMA_Abort_IT+0x1c0>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d022      	beq.n	8003228 <HAL_DMA_Abort_IT+0x17c>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a22      	ldr	r2, [pc, #136]	@ (8003270 <HAL_DMA_Abort_IT+0x1c4>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d01d      	beq.n	8003228 <HAL_DMA_Abort_IT+0x17c>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a20      	ldr	r2, [pc, #128]	@ (8003274 <HAL_DMA_Abort_IT+0x1c8>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d018      	beq.n	8003228 <HAL_DMA_Abort_IT+0x17c>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a1f      	ldr	r2, [pc, #124]	@ (8003278 <HAL_DMA_Abort_IT+0x1cc>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d013      	beq.n	8003228 <HAL_DMA_Abort_IT+0x17c>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a1d      	ldr	r2, [pc, #116]	@ (800327c <HAL_DMA_Abort_IT+0x1d0>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d00e      	beq.n	8003228 <HAL_DMA_Abort_IT+0x17c>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a1c      	ldr	r2, [pc, #112]	@ (8003280 <HAL_DMA_Abort_IT+0x1d4>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d009      	beq.n	8003228 <HAL_DMA_Abort_IT+0x17c>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a1a      	ldr	r2, [pc, #104]	@ (8003284 <HAL_DMA_Abort_IT+0x1d8>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d004      	beq.n	8003228 <HAL_DMA_Abort_IT+0x17c>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a19      	ldr	r2, [pc, #100]	@ (8003288 <HAL_DMA_Abort_IT+0x1dc>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d108      	bne.n	800323a <HAL_DMA_Abort_IT+0x18e>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0201 	bic.w	r2, r2, #1
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	e178      	b.n	800352c <HAL_DMA_Abort_IT+0x480>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 0201 	bic.w	r2, r2, #1
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	e16f      	b.n	800352c <HAL_DMA_Abort_IT+0x480>
 800324c:	40020010 	.word	0x40020010
 8003250:	40020028 	.word	0x40020028
 8003254:	40020040 	.word	0x40020040
 8003258:	40020058 	.word	0x40020058
 800325c:	40020070 	.word	0x40020070
 8003260:	40020088 	.word	0x40020088
 8003264:	400200a0 	.word	0x400200a0
 8003268:	400200b8 	.word	0x400200b8
 800326c:	40020410 	.word	0x40020410
 8003270:	40020428 	.word	0x40020428
 8003274:	40020440 	.word	0x40020440
 8003278:	40020458 	.word	0x40020458
 800327c:	40020470 	.word	0x40020470
 8003280:	40020488 	.word	0x40020488
 8003284:	400204a0 	.word	0x400204a0
 8003288:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 020e 	bic.w	r2, r2, #14
 800329a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a6c      	ldr	r2, [pc, #432]	@ (8003454 <HAL_DMA_Abort_IT+0x3a8>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d04a      	beq.n	800333c <HAL_DMA_Abort_IT+0x290>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a6b      	ldr	r2, [pc, #428]	@ (8003458 <HAL_DMA_Abort_IT+0x3ac>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d045      	beq.n	800333c <HAL_DMA_Abort_IT+0x290>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a69      	ldr	r2, [pc, #420]	@ (800345c <HAL_DMA_Abort_IT+0x3b0>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d040      	beq.n	800333c <HAL_DMA_Abort_IT+0x290>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a68      	ldr	r2, [pc, #416]	@ (8003460 <HAL_DMA_Abort_IT+0x3b4>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d03b      	beq.n	800333c <HAL_DMA_Abort_IT+0x290>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a66      	ldr	r2, [pc, #408]	@ (8003464 <HAL_DMA_Abort_IT+0x3b8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d036      	beq.n	800333c <HAL_DMA_Abort_IT+0x290>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a65      	ldr	r2, [pc, #404]	@ (8003468 <HAL_DMA_Abort_IT+0x3bc>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d031      	beq.n	800333c <HAL_DMA_Abort_IT+0x290>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a63      	ldr	r2, [pc, #396]	@ (800346c <HAL_DMA_Abort_IT+0x3c0>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d02c      	beq.n	800333c <HAL_DMA_Abort_IT+0x290>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a62      	ldr	r2, [pc, #392]	@ (8003470 <HAL_DMA_Abort_IT+0x3c4>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d027      	beq.n	800333c <HAL_DMA_Abort_IT+0x290>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a60      	ldr	r2, [pc, #384]	@ (8003474 <HAL_DMA_Abort_IT+0x3c8>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d022      	beq.n	800333c <HAL_DMA_Abort_IT+0x290>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a5f      	ldr	r2, [pc, #380]	@ (8003478 <HAL_DMA_Abort_IT+0x3cc>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d01d      	beq.n	800333c <HAL_DMA_Abort_IT+0x290>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a5d      	ldr	r2, [pc, #372]	@ (800347c <HAL_DMA_Abort_IT+0x3d0>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d018      	beq.n	800333c <HAL_DMA_Abort_IT+0x290>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a5c      	ldr	r2, [pc, #368]	@ (8003480 <HAL_DMA_Abort_IT+0x3d4>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d013      	beq.n	800333c <HAL_DMA_Abort_IT+0x290>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a5a      	ldr	r2, [pc, #360]	@ (8003484 <HAL_DMA_Abort_IT+0x3d8>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d00e      	beq.n	800333c <HAL_DMA_Abort_IT+0x290>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a59      	ldr	r2, [pc, #356]	@ (8003488 <HAL_DMA_Abort_IT+0x3dc>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d009      	beq.n	800333c <HAL_DMA_Abort_IT+0x290>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a57      	ldr	r2, [pc, #348]	@ (800348c <HAL_DMA_Abort_IT+0x3e0>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d004      	beq.n	800333c <HAL_DMA_Abort_IT+0x290>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a56      	ldr	r2, [pc, #344]	@ (8003490 <HAL_DMA_Abort_IT+0x3e4>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d108      	bne.n	800334e <HAL_DMA_Abort_IT+0x2a2>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0201 	bic.w	r2, r2, #1
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	e007      	b.n	800335e <HAL_DMA_Abort_IT+0x2b2>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0201 	bic.w	r2, r2, #1
 800335c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a3c      	ldr	r2, [pc, #240]	@ (8003454 <HAL_DMA_Abort_IT+0x3a8>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d072      	beq.n	800344e <HAL_DMA_Abort_IT+0x3a2>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a3a      	ldr	r2, [pc, #232]	@ (8003458 <HAL_DMA_Abort_IT+0x3ac>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d06d      	beq.n	800344e <HAL_DMA_Abort_IT+0x3a2>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a39      	ldr	r2, [pc, #228]	@ (800345c <HAL_DMA_Abort_IT+0x3b0>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d068      	beq.n	800344e <HAL_DMA_Abort_IT+0x3a2>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a37      	ldr	r2, [pc, #220]	@ (8003460 <HAL_DMA_Abort_IT+0x3b4>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d063      	beq.n	800344e <HAL_DMA_Abort_IT+0x3a2>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a36      	ldr	r2, [pc, #216]	@ (8003464 <HAL_DMA_Abort_IT+0x3b8>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d05e      	beq.n	800344e <HAL_DMA_Abort_IT+0x3a2>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a34      	ldr	r2, [pc, #208]	@ (8003468 <HAL_DMA_Abort_IT+0x3bc>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d059      	beq.n	800344e <HAL_DMA_Abort_IT+0x3a2>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a33      	ldr	r2, [pc, #204]	@ (800346c <HAL_DMA_Abort_IT+0x3c0>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d054      	beq.n	800344e <HAL_DMA_Abort_IT+0x3a2>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a31      	ldr	r2, [pc, #196]	@ (8003470 <HAL_DMA_Abort_IT+0x3c4>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d04f      	beq.n	800344e <HAL_DMA_Abort_IT+0x3a2>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a30      	ldr	r2, [pc, #192]	@ (8003474 <HAL_DMA_Abort_IT+0x3c8>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d04a      	beq.n	800344e <HAL_DMA_Abort_IT+0x3a2>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a2e      	ldr	r2, [pc, #184]	@ (8003478 <HAL_DMA_Abort_IT+0x3cc>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d045      	beq.n	800344e <HAL_DMA_Abort_IT+0x3a2>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a2d      	ldr	r2, [pc, #180]	@ (800347c <HAL_DMA_Abort_IT+0x3d0>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d040      	beq.n	800344e <HAL_DMA_Abort_IT+0x3a2>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a2b      	ldr	r2, [pc, #172]	@ (8003480 <HAL_DMA_Abort_IT+0x3d4>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d03b      	beq.n	800344e <HAL_DMA_Abort_IT+0x3a2>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a2a      	ldr	r2, [pc, #168]	@ (8003484 <HAL_DMA_Abort_IT+0x3d8>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d036      	beq.n	800344e <HAL_DMA_Abort_IT+0x3a2>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a28      	ldr	r2, [pc, #160]	@ (8003488 <HAL_DMA_Abort_IT+0x3dc>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d031      	beq.n	800344e <HAL_DMA_Abort_IT+0x3a2>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a27      	ldr	r2, [pc, #156]	@ (800348c <HAL_DMA_Abort_IT+0x3e0>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d02c      	beq.n	800344e <HAL_DMA_Abort_IT+0x3a2>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a25      	ldr	r2, [pc, #148]	@ (8003490 <HAL_DMA_Abort_IT+0x3e4>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d027      	beq.n	800344e <HAL_DMA_Abort_IT+0x3a2>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a24      	ldr	r2, [pc, #144]	@ (8003494 <HAL_DMA_Abort_IT+0x3e8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d022      	beq.n	800344e <HAL_DMA_Abort_IT+0x3a2>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a22      	ldr	r2, [pc, #136]	@ (8003498 <HAL_DMA_Abort_IT+0x3ec>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d01d      	beq.n	800344e <HAL_DMA_Abort_IT+0x3a2>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a21      	ldr	r2, [pc, #132]	@ (800349c <HAL_DMA_Abort_IT+0x3f0>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d018      	beq.n	800344e <HAL_DMA_Abort_IT+0x3a2>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a1f      	ldr	r2, [pc, #124]	@ (80034a0 <HAL_DMA_Abort_IT+0x3f4>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d013      	beq.n	800344e <HAL_DMA_Abort_IT+0x3a2>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a1e      	ldr	r2, [pc, #120]	@ (80034a4 <HAL_DMA_Abort_IT+0x3f8>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d00e      	beq.n	800344e <HAL_DMA_Abort_IT+0x3a2>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a1c      	ldr	r2, [pc, #112]	@ (80034a8 <HAL_DMA_Abort_IT+0x3fc>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d009      	beq.n	800344e <HAL_DMA_Abort_IT+0x3a2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a1b      	ldr	r2, [pc, #108]	@ (80034ac <HAL_DMA_Abort_IT+0x400>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d004      	beq.n	800344e <HAL_DMA_Abort_IT+0x3a2>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a19      	ldr	r2, [pc, #100]	@ (80034b0 <HAL_DMA_Abort_IT+0x404>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d132      	bne.n	80034b4 <HAL_DMA_Abort_IT+0x408>
 800344e:	2301      	movs	r3, #1
 8003450:	e031      	b.n	80034b6 <HAL_DMA_Abort_IT+0x40a>
 8003452:	bf00      	nop
 8003454:	40020010 	.word	0x40020010
 8003458:	40020028 	.word	0x40020028
 800345c:	40020040 	.word	0x40020040
 8003460:	40020058 	.word	0x40020058
 8003464:	40020070 	.word	0x40020070
 8003468:	40020088 	.word	0x40020088
 800346c:	400200a0 	.word	0x400200a0
 8003470:	400200b8 	.word	0x400200b8
 8003474:	40020410 	.word	0x40020410
 8003478:	40020428 	.word	0x40020428
 800347c:	40020440 	.word	0x40020440
 8003480:	40020458 	.word	0x40020458
 8003484:	40020470 	.word	0x40020470
 8003488:	40020488 	.word	0x40020488
 800348c:	400204a0 	.word	0x400204a0
 8003490:	400204b8 	.word	0x400204b8
 8003494:	58025408 	.word	0x58025408
 8003498:	5802541c 	.word	0x5802541c
 800349c:	58025430 	.word	0x58025430
 80034a0:	58025444 	.word	0x58025444
 80034a4:	58025458 	.word	0x58025458
 80034a8:	5802546c 	.word	0x5802546c
 80034ac:	58025480 	.word	0x58025480
 80034b0:	58025494 	.word	0x58025494
 80034b4:	2300      	movs	r3, #0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d028      	beq.n	800350c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034c8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ce:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034d4:	f003 031f 	and.w	r3, r3, #31
 80034d8:	2201      	movs	r2, #1
 80034da:	409a      	lsls	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80034e8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00c      	beq.n	800350c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003500:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800350a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003520:	2b00      	cmp	r3, #0
 8003522:	d003      	beq.n	800352c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop

08003538 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8003538:	b480      	push	{r7}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	460b      	mov	r3, r1
 8003542:	607a      	str	r2, [r7, #4]
 8003544:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003546:	2300      	movs	r3, #0
 8003548:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e00a      	b.n	800356a <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8003554:	7afb      	ldrb	r3, [r7, #11]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d103      	bne.n	8003562 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	605a      	str	r2, [r3, #4]
      break;
 8003560:	e002      	b.n	8003568 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	75fb      	strb	r3, [r7, #23]
      break;
 8003566:	bf00      	nop
  }

  return status;
 8003568:	7dfb      	ldrb	r3, [r7, #23]
}
 800356a:	4618      	mov	r0, r3
 800356c:	371c      	adds	r7, #28
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e003      	b.n	8003592 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003590:	2300      	movs	r3, #0
  }
}
 8003592:	4618      	mov	r0, r3
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
	...

080035a0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	0c1b      	lsrs	r3, r3, #16
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 031f 	and.w	r3, r3, #31
 80035bc:	2201      	movs	r2, #1
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	011a      	lsls	r2, r3, #4
 80035c8:	4b0c      	ldr	r3, [pc, #48]	@ (80035fc <HAL_EXTI_IRQHandler+0x5c>)
 80035ca:	4413      	add	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	4013      	ands	r3, r2
 80035d6:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d009      	beq.n	80035f2 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d002      	beq.n	80035f2 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	4798      	blx	r3
    }
  }
}
 80035f2:	bf00      	nop
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	58000088 	.word	0x58000088

08003600 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003600:	b480      	push	{r7}
 8003602:	b089      	sub	sp, #36	@ 0x24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800360a:	2300      	movs	r3, #0
 800360c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800360e:	4b89      	ldr	r3, [pc, #548]	@ (8003834 <HAL_GPIO_Init+0x234>)
 8003610:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003612:	e194      	b.n	800393e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	2101      	movs	r1, #1
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	fa01 f303 	lsl.w	r3, r1, r3
 8003620:	4013      	ands	r3, r2
 8003622:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 8186 	beq.w	8003938 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f003 0303 	and.w	r3, r3, #3
 8003634:	2b01      	cmp	r3, #1
 8003636:	d005      	beq.n	8003644 <HAL_GPIO_Init+0x44>
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f003 0303 	and.w	r3, r3, #3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d130      	bne.n	80036a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	2203      	movs	r2, #3
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	43db      	mvns	r3, r3
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	4013      	ands	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	68da      	ldr	r2, [r3, #12]
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	4313      	orrs	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800367a:	2201      	movs	r2, #1
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	43db      	mvns	r3, r3
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	4013      	ands	r3, r2
 8003688:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	091b      	lsrs	r3, r3, #4
 8003690:	f003 0201 	and.w	r2, r3, #1
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	4313      	orrs	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	2b03      	cmp	r3, #3
 80036b0:	d017      	beq.n	80036e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	2203      	movs	r2, #3
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43db      	mvns	r3, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4013      	ands	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	4313      	orrs	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f003 0303 	and.w	r3, r3, #3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d123      	bne.n	8003736 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	08da      	lsrs	r2, r3, #3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	3208      	adds	r2, #8
 80036f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	220f      	movs	r2, #15
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	43db      	mvns	r3, r3
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	4013      	ands	r3, r2
 8003710:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	691a      	ldr	r2, [r3, #16]
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	4313      	orrs	r3, r2
 8003726:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	08da      	lsrs	r2, r3, #3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3208      	adds	r2, #8
 8003730:	69b9      	ldr	r1, [r7, #24]
 8003732:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	2203      	movs	r2, #3
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	43db      	mvns	r3, r3
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4013      	ands	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f003 0203 	and.w	r2, r3, #3
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	fa02 f303 	lsl.w	r3, r2, r3
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	4313      	orrs	r3, r2
 8003762:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003772:	2b00      	cmp	r3, #0
 8003774:	f000 80e0 	beq.w	8003938 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003778:	4b2f      	ldr	r3, [pc, #188]	@ (8003838 <HAL_GPIO_Init+0x238>)
 800377a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800377e:	4a2e      	ldr	r2, [pc, #184]	@ (8003838 <HAL_GPIO_Init+0x238>)
 8003780:	f043 0302 	orr.w	r3, r3, #2
 8003784:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003788:	4b2b      	ldr	r3, [pc, #172]	@ (8003838 <HAL_GPIO_Init+0x238>)
 800378a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003796:	4a29      	ldr	r2, [pc, #164]	@ (800383c <HAL_GPIO_Init+0x23c>)
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	089b      	lsrs	r3, r3, #2
 800379c:	3302      	adds	r3, #2
 800379e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	220f      	movs	r2, #15
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	43db      	mvns	r3, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4013      	ands	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a20      	ldr	r2, [pc, #128]	@ (8003840 <HAL_GPIO_Init+0x240>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d052      	beq.n	8003868 <HAL_GPIO_Init+0x268>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a1f      	ldr	r2, [pc, #124]	@ (8003844 <HAL_GPIO_Init+0x244>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d031      	beq.n	800382e <HAL_GPIO_Init+0x22e>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a1e      	ldr	r2, [pc, #120]	@ (8003848 <HAL_GPIO_Init+0x248>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d02b      	beq.n	800382a <HAL_GPIO_Init+0x22a>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a1d      	ldr	r2, [pc, #116]	@ (800384c <HAL_GPIO_Init+0x24c>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d025      	beq.n	8003826 <HAL_GPIO_Init+0x226>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a1c      	ldr	r2, [pc, #112]	@ (8003850 <HAL_GPIO_Init+0x250>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d01f      	beq.n	8003822 <HAL_GPIO_Init+0x222>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a1b      	ldr	r2, [pc, #108]	@ (8003854 <HAL_GPIO_Init+0x254>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d019      	beq.n	800381e <HAL_GPIO_Init+0x21e>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a1a      	ldr	r2, [pc, #104]	@ (8003858 <HAL_GPIO_Init+0x258>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d013      	beq.n	800381a <HAL_GPIO_Init+0x21a>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a19      	ldr	r2, [pc, #100]	@ (800385c <HAL_GPIO_Init+0x25c>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d00d      	beq.n	8003816 <HAL_GPIO_Init+0x216>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a18      	ldr	r2, [pc, #96]	@ (8003860 <HAL_GPIO_Init+0x260>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d007      	beq.n	8003812 <HAL_GPIO_Init+0x212>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a17      	ldr	r2, [pc, #92]	@ (8003864 <HAL_GPIO_Init+0x264>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d101      	bne.n	800380e <HAL_GPIO_Init+0x20e>
 800380a:	2309      	movs	r3, #9
 800380c:	e02d      	b.n	800386a <HAL_GPIO_Init+0x26a>
 800380e:	230a      	movs	r3, #10
 8003810:	e02b      	b.n	800386a <HAL_GPIO_Init+0x26a>
 8003812:	2308      	movs	r3, #8
 8003814:	e029      	b.n	800386a <HAL_GPIO_Init+0x26a>
 8003816:	2307      	movs	r3, #7
 8003818:	e027      	b.n	800386a <HAL_GPIO_Init+0x26a>
 800381a:	2306      	movs	r3, #6
 800381c:	e025      	b.n	800386a <HAL_GPIO_Init+0x26a>
 800381e:	2305      	movs	r3, #5
 8003820:	e023      	b.n	800386a <HAL_GPIO_Init+0x26a>
 8003822:	2304      	movs	r3, #4
 8003824:	e021      	b.n	800386a <HAL_GPIO_Init+0x26a>
 8003826:	2303      	movs	r3, #3
 8003828:	e01f      	b.n	800386a <HAL_GPIO_Init+0x26a>
 800382a:	2302      	movs	r3, #2
 800382c:	e01d      	b.n	800386a <HAL_GPIO_Init+0x26a>
 800382e:	2301      	movs	r3, #1
 8003830:	e01b      	b.n	800386a <HAL_GPIO_Init+0x26a>
 8003832:	bf00      	nop
 8003834:	58000080 	.word	0x58000080
 8003838:	58024400 	.word	0x58024400
 800383c:	58000400 	.word	0x58000400
 8003840:	58020000 	.word	0x58020000
 8003844:	58020400 	.word	0x58020400
 8003848:	58020800 	.word	0x58020800
 800384c:	58020c00 	.word	0x58020c00
 8003850:	58021000 	.word	0x58021000
 8003854:	58021400 	.word	0x58021400
 8003858:	58021800 	.word	0x58021800
 800385c:	58021c00 	.word	0x58021c00
 8003860:	58022000 	.word	0x58022000
 8003864:	58022400 	.word	0x58022400
 8003868:	2300      	movs	r3, #0
 800386a:	69fa      	ldr	r2, [r7, #28]
 800386c:	f002 0203 	and.w	r2, r2, #3
 8003870:	0092      	lsls	r2, r2, #2
 8003872:	4093      	lsls	r3, r2
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	4313      	orrs	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800387a:	4938      	ldr	r1, [pc, #224]	@ (800395c <HAL_GPIO_Init+0x35c>)
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	089b      	lsrs	r3, r3, #2
 8003880:	3302      	adds	r3, #2
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003888:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	43db      	mvns	r3, r3
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	4013      	ands	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80038ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80038b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	43db      	mvns	r3, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4013      	ands	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d003      	beq.n	80038dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	4313      	orrs	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80038dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	43db      	mvns	r3, r3
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	4013      	ands	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	4313      	orrs	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	43db      	mvns	r3, r3
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	4013      	ands	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	4313      	orrs	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	3301      	adds	r3, #1
 800393c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	fa22 f303 	lsr.w	r3, r2, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	f47f ae63 	bne.w	8003614 <HAL_GPIO_Init+0x14>
  }
}
 800394e:	bf00      	nop
 8003950:	bf00      	nop
 8003952:	3724      	adds	r7, #36	@ 0x24
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	58000400 	.word	0x58000400

08003960 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	460b      	mov	r3, r1
 800396a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	887b      	ldrh	r3, [r7, #2]
 8003972:	4013      	ands	r3, r2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d002      	beq.n	800397e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003978:	2301      	movs	r3, #1
 800397a:	73fb      	strb	r3, [r7, #15]
 800397c:	e001      	b.n	8003982 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800397e:	2300      	movs	r3, #0
 8003980:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003982:	7bfb      	ldrb	r3, [r7, #15]
}
 8003984:	4618      	mov	r0, r3
 8003986:	3714      	adds	r7, #20
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	460b      	mov	r3, r1
 800399a:	807b      	strh	r3, [r7, #2]
 800399c:	4613      	mov	r3, r2
 800399e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039a0:	787b      	ldrb	r3, [r7, #1]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039a6:	887a      	ldrh	r2, [r7, #2]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80039ac:	e003      	b.n	80039b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80039ae:	887b      	ldrh	r3, [r7, #2]
 80039b0:	041a      	lsls	r2, r3, #16
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	619a      	str	r2, [r3, #24]
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b085      	sub	sp, #20
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
 80039ca:	460b      	mov	r3, r1
 80039cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039d4:	887a      	ldrh	r2, [r7, #2]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	4013      	ands	r3, r2
 80039da:	041a      	lsls	r2, r3, #16
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	43d9      	mvns	r1, r3
 80039e0:	887b      	ldrh	r3, [r7, #2]
 80039e2:	400b      	ands	r3, r1
 80039e4:	431a      	orrs	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	619a      	str	r2, [r3, #24]
}
 80039ea:	bf00      	nop
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
	...

080039f8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003a00:	4b19      	ldr	r3, [pc, #100]	@ (8003a68 <HAL_PWREx_ConfigSupply+0x70>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	d00a      	beq.n	8003a22 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003a0c:	4b16      	ldr	r3, [pc, #88]	@ (8003a68 <HAL_PWREx_ConfigSupply+0x70>)
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d001      	beq.n	8003a1e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e01f      	b.n	8003a5e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	e01d      	b.n	8003a5e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003a22:	4b11      	ldr	r3, [pc, #68]	@ (8003a68 <HAL_PWREx_ConfigSupply+0x70>)
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f023 0207 	bic.w	r2, r3, #7
 8003a2a:	490f      	ldr	r1, [pc, #60]	@ (8003a68 <HAL_PWREx_ConfigSupply+0x70>)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003a32:	f7ff f977 	bl	8002d24 <HAL_GetTick>
 8003a36:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a38:	e009      	b.n	8003a4e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003a3a:	f7ff f973 	bl	8002d24 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a48:	d901      	bls.n	8003a4e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e007      	b.n	8003a5e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a4e:	4b06      	ldr	r3, [pc, #24]	@ (8003a68 <HAL_PWREx_ConfigSupply+0x70>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a5a:	d1ee      	bne.n	8003a3a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	58024800 	.word	0x58024800

08003a6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b08c      	sub	sp, #48	@ 0x30
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d102      	bne.n	8003a80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	f000 bc48 	b.w	8004310 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 8088 	beq.w	8003b9e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a8e:	4b99      	ldr	r3, [pc, #612]	@ (8003cf4 <HAL_RCC_OscConfig+0x288>)
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a98:	4b96      	ldr	r3, [pc, #600]	@ (8003cf4 <HAL_RCC_OscConfig+0x288>)
 8003a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aa0:	2b10      	cmp	r3, #16
 8003aa2:	d007      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x48>
 8003aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aa6:	2b18      	cmp	r3, #24
 8003aa8:	d111      	bne.n	8003ace <HAL_RCC_OscConfig+0x62>
 8003aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aac:	f003 0303 	and.w	r3, r3, #3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d10c      	bne.n	8003ace <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab4:	4b8f      	ldr	r3, [pc, #572]	@ (8003cf4 <HAL_RCC_OscConfig+0x288>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d06d      	beq.n	8003b9c <HAL_RCC_OscConfig+0x130>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d169      	bne.n	8003b9c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	f000 bc21 	b.w	8004310 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ad6:	d106      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x7a>
 8003ad8:	4b86      	ldr	r3, [pc, #536]	@ (8003cf4 <HAL_RCC_OscConfig+0x288>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a85      	ldr	r2, [pc, #532]	@ (8003cf4 <HAL_RCC_OscConfig+0x288>)
 8003ade:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ae2:	6013      	str	r3, [r2, #0]
 8003ae4:	e02e      	b.n	8003b44 <HAL_RCC_OscConfig+0xd8>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10c      	bne.n	8003b08 <HAL_RCC_OscConfig+0x9c>
 8003aee:	4b81      	ldr	r3, [pc, #516]	@ (8003cf4 <HAL_RCC_OscConfig+0x288>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a80      	ldr	r2, [pc, #512]	@ (8003cf4 <HAL_RCC_OscConfig+0x288>)
 8003af4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	4b7e      	ldr	r3, [pc, #504]	@ (8003cf4 <HAL_RCC_OscConfig+0x288>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a7d      	ldr	r2, [pc, #500]	@ (8003cf4 <HAL_RCC_OscConfig+0x288>)
 8003b00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b04:	6013      	str	r3, [r2, #0]
 8003b06:	e01d      	b.n	8003b44 <HAL_RCC_OscConfig+0xd8>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b10:	d10c      	bne.n	8003b2c <HAL_RCC_OscConfig+0xc0>
 8003b12:	4b78      	ldr	r3, [pc, #480]	@ (8003cf4 <HAL_RCC_OscConfig+0x288>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a77      	ldr	r2, [pc, #476]	@ (8003cf4 <HAL_RCC_OscConfig+0x288>)
 8003b18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	4b75      	ldr	r3, [pc, #468]	@ (8003cf4 <HAL_RCC_OscConfig+0x288>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a74      	ldr	r2, [pc, #464]	@ (8003cf4 <HAL_RCC_OscConfig+0x288>)
 8003b24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	e00b      	b.n	8003b44 <HAL_RCC_OscConfig+0xd8>
 8003b2c:	4b71      	ldr	r3, [pc, #452]	@ (8003cf4 <HAL_RCC_OscConfig+0x288>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a70      	ldr	r2, [pc, #448]	@ (8003cf4 <HAL_RCC_OscConfig+0x288>)
 8003b32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b36:	6013      	str	r3, [r2, #0]
 8003b38:	4b6e      	ldr	r3, [pc, #440]	@ (8003cf4 <HAL_RCC_OscConfig+0x288>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a6d      	ldr	r2, [pc, #436]	@ (8003cf4 <HAL_RCC_OscConfig+0x288>)
 8003b3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d013      	beq.n	8003b74 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4c:	f7ff f8ea 	bl	8002d24 <HAL_GetTick>
 8003b50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b54:	f7ff f8e6 	bl	8002d24 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b64      	cmp	r3, #100	@ 0x64
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e3d4      	b.n	8004310 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b66:	4b63      	ldr	r3, [pc, #396]	@ (8003cf4 <HAL_RCC_OscConfig+0x288>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0f0      	beq.n	8003b54 <HAL_RCC_OscConfig+0xe8>
 8003b72:	e014      	b.n	8003b9e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b74:	f7ff f8d6 	bl	8002d24 <HAL_GetTick>
 8003b78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b7c:	f7ff f8d2 	bl	8002d24 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b64      	cmp	r3, #100	@ 0x64
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e3c0      	b.n	8004310 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b8e:	4b59      	ldr	r3, [pc, #356]	@ (8003cf4 <HAL_RCC_OscConfig+0x288>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1f0      	bne.n	8003b7c <HAL_RCC_OscConfig+0x110>
 8003b9a:	e000      	b.n	8003b9e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 80ca 	beq.w	8003d40 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bac:	4b51      	ldr	r3, [pc, #324]	@ (8003cf4 <HAL_RCC_OscConfig+0x288>)
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bb4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003bb6:	4b4f      	ldr	r3, [pc, #316]	@ (8003cf4 <HAL_RCC_OscConfig+0x288>)
 8003bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bba:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003bbc:	6a3b      	ldr	r3, [r7, #32]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d007      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x166>
 8003bc2:	6a3b      	ldr	r3, [r7, #32]
 8003bc4:	2b18      	cmp	r3, #24
 8003bc6:	d156      	bne.n	8003c76 <HAL_RCC_OscConfig+0x20a>
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	f003 0303 	and.w	r3, r3, #3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d151      	bne.n	8003c76 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bd2:	4b48      	ldr	r3, [pc, #288]	@ (8003cf4 <HAL_RCC_OscConfig+0x288>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0304 	and.w	r3, r3, #4
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d005      	beq.n	8003bea <HAL_RCC_OscConfig+0x17e>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e392      	b.n	8004310 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003bea:	4b42      	ldr	r3, [pc, #264]	@ (8003cf4 <HAL_RCC_OscConfig+0x288>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f023 0219 	bic.w	r2, r3, #25
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	493f      	ldr	r1, [pc, #252]	@ (8003cf4 <HAL_RCC_OscConfig+0x288>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfc:	f7ff f892 	bl	8002d24 <HAL_GetTick>
 8003c00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c04:	f7ff f88e 	bl	8002d24 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e37c      	b.n	8004310 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c16:	4b37      	ldr	r3, [pc, #220]	@ (8003cf4 <HAL_RCC_OscConfig+0x288>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0304 	and.w	r3, r3, #4
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0f0      	beq.n	8003c04 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c22:	f7ff f8af 	bl	8002d84 <HAL_GetREVID>
 8003c26:	4603      	mov	r3, r0
 8003c28:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d817      	bhi.n	8003c60 <HAL_RCC_OscConfig+0x1f4>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	2b40      	cmp	r3, #64	@ 0x40
 8003c36:	d108      	bne.n	8003c4a <HAL_RCC_OscConfig+0x1de>
 8003c38:	4b2e      	ldr	r3, [pc, #184]	@ (8003cf4 <HAL_RCC_OscConfig+0x288>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003c40:	4a2c      	ldr	r2, [pc, #176]	@ (8003cf4 <HAL_RCC_OscConfig+0x288>)
 8003c42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c46:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c48:	e07a      	b.n	8003d40 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c4a:	4b2a      	ldr	r3, [pc, #168]	@ (8003cf4 <HAL_RCC_OscConfig+0x288>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	031b      	lsls	r3, r3, #12
 8003c58:	4926      	ldr	r1, [pc, #152]	@ (8003cf4 <HAL_RCC_OscConfig+0x288>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c5e:	e06f      	b.n	8003d40 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c60:	4b24      	ldr	r3, [pc, #144]	@ (8003cf4 <HAL_RCC_OscConfig+0x288>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	061b      	lsls	r3, r3, #24
 8003c6e:	4921      	ldr	r1, [pc, #132]	@ (8003cf4 <HAL_RCC_OscConfig+0x288>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c74:	e064      	b.n	8003d40 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d047      	beq.n	8003d0e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8003cf4 <HAL_RCC_OscConfig+0x288>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f023 0219 	bic.w	r2, r3, #25
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	491a      	ldr	r1, [pc, #104]	@ (8003cf4 <HAL_RCC_OscConfig+0x288>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c90:	f7ff f848 	bl	8002d24 <HAL_GetTick>
 8003c94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c98:	f7ff f844 	bl	8002d24 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e332      	b.n	8004310 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003caa:	4b12      	ldr	r3, [pc, #72]	@ (8003cf4 <HAL_RCC_OscConfig+0x288>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0304 	and.w	r3, r3, #4
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0f0      	beq.n	8003c98 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb6:	f7ff f865 	bl	8002d84 <HAL_GetREVID>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d819      	bhi.n	8003cf8 <HAL_RCC_OscConfig+0x28c>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	2b40      	cmp	r3, #64	@ 0x40
 8003cca:	d108      	bne.n	8003cde <HAL_RCC_OscConfig+0x272>
 8003ccc:	4b09      	ldr	r3, [pc, #36]	@ (8003cf4 <HAL_RCC_OscConfig+0x288>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003cd4:	4a07      	ldr	r2, [pc, #28]	@ (8003cf4 <HAL_RCC_OscConfig+0x288>)
 8003cd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cda:	6053      	str	r3, [r2, #4]
 8003cdc:	e030      	b.n	8003d40 <HAL_RCC_OscConfig+0x2d4>
 8003cde:	4b05      	ldr	r3, [pc, #20]	@ (8003cf4 <HAL_RCC_OscConfig+0x288>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	031b      	lsls	r3, r3, #12
 8003cec:	4901      	ldr	r1, [pc, #4]	@ (8003cf4 <HAL_RCC_OscConfig+0x288>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	604b      	str	r3, [r1, #4]
 8003cf2:	e025      	b.n	8003d40 <HAL_RCC_OscConfig+0x2d4>
 8003cf4:	58024400 	.word	0x58024400
 8003cf8:	4b9a      	ldr	r3, [pc, #616]	@ (8003f64 <HAL_RCC_OscConfig+0x4f8>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	061b      	lsls	r3, r3, #24
 8003d06:	4997      	ldr	r1, [pc, #604]	@ (8003f64 <HAL_RCC_OscConfig+0x4f8>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	604b      	str	r3, [r1, #4]
 8003d0c:	e018      	b.n	8003d40 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d0e:	4b95      	ldr	r3, [pc, #596]	@ (8003f64 <HAL_RCC_OscConfig+0x4f8>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a94      	ldr	r2, [pc, #592]	@ (8003f64 <HAL_RCC_OscConfig+0x4f8>)
 8003d14:	f023 0301 	bic.w	r3, r3, #1
 8003d18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d1a:	f7ff f803 	bl	8002d24 <HAL_GetTick>
 8003d1e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d20:	e008      	b.n	8003d34 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d22:	f7fe ffff 	bl	8002d24 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e2ed      	b.n	8004310 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d34:	4b8b      	ldr	r3, [pc, #556]	@ (8003f64 <HAL_RCC_OscConfig+0x4f8>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1f0      	bne.n	8003d22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0310 	and.w	r3, r3, #16
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 80a9 	beq.w	8003ea0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d4e:	4b85      	ldr	r3, [pc, #532]	@ (8003f64 <HAL_RCC_OscConfig+0x4f8>)
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d56:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d58:	4b82      	ldr	r3, [pc, #520]	@ (8003f64 <HAL_RCC_OscConfig+0x4f8>)
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	d007      	beq.n	8003d74 <HAL_RCC_OscConfig+0x308>
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	2b18      	cmp	r3, #24
 8003d68:	d13a      	bne.n	8003de0 <HAL_RCC_OscConfig+0x374>
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f003 0303 	and.w	r3, r3, #3
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d135      	bne.n	8003de0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d74:	4b7b      	ldr	r3, [pc, #492]	@ (8003f64 <HAL_RCC_OscConfig+0x4f8>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d005      	beq.n	8003d8c <HAL_RCC_OscConfig+0x320>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	69db      	ldr	r3, [r3, #28]
 8003d84:	2b80      	cmp	r3, #128	@ 0x80
 8003d86:	d001      	beq.n	8003d8c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e2c1      	b.n	8004310 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d8c:	f7fe fffa 	bl	8002d84 <HAL_GetREVID>
 8003d90:	4603      	mov	r3, r0
 8003d92:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d817      	bhi.n	8003dca <HAL_RCC_OscConfig+0x35e>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	2b20      	cmp	r3, #32
 8003da0:	d108      	bne.n	8003db4 <HAL_RCC_OscConfig+0x348>
 8003da2:	4b70      	ldr	r3, [pc, #448]	@ (8003f64 <HAL_RCC_OscConfig+0x4f8>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003daa:	4a6e      	ldr	r2, [pc, #440]	@ (8003f64 <HAL_RCC_OscConfig+0x4f8>)
 8003dac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003db0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003db2:	e075      	b.n	8003ea0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003db4:	4b6b      	ldr	r3, [pc, #428]	@ (8003f64 <HAL_RCC_OscConfig+0x4f8>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	069b      	lsls	r3, r3, #26
 8003dc2:	4968      	ldr	r1, [pc, #416]	@ (8003f64 <HAL_RCC_OscConfig+0x4f8>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003dc8:	e06a      	b.n	8003ea0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003dca:	4b66      	ldr	r3, [pc, #408]	@ (8003f64 <HAL_RCC_OscConfig+0x4f8>)
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	061b      	lsls	r3, r3, #24
 8003dd8:	4962      	ldr	r1, [pc, #392]	@ (8003f64 <HAL_RCC_OscConfig+0x4f8>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003dde:	e05f      	b.n	8003ea0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d042      	beq.n	8003e6e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003de8:	4b5e      	ldr	r3, [pc, #376]	@ (8003f64 <HAL_RCC_OscConfig+0x4f8>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a5d      	ldr	r2, [pc, #372]	@ (8003f64 <HAL_RCC_OscConfig+0x4f8>)
 8003dee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003df2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df4:	f7fe ff96 	bl	8002d24 <HAL_GetTick>
 8003df8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003dfc:	f7fe ff92 	bl	8002d24 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e280      	b.n	8004310 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e0e:	4b55      	ldr	r3, [pc, #340]	@ (8003f64 <HAL_RCC_OscConfig+0x4f8>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0f0      	beq.n	8003dfc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e1a:	f7fe ffb3 	bl	8002d84 <HAL_GetREVID>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d817      	bhi.n	8003e58 <HAL_RCC_OscConfig+0x3ec>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	2b20      	cmp	r3, #32
 8003e2e:	d108      	bne.n	8003e42 <HAL_RCC_OscConfig+0x3d6>
 8003e30:	4b4c      	ldr	r3, [pc, #304]	@ (8003f64 <HAL_RCC_OscConfig+0x4f8>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003e38:	4a4a      	ldr	r2, [pc, #296]	@ (8003f64 <HAL_RCC_OscConfig+0x4f8>)
 8003e3a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e3e:	6053      	str	r3, [r2, #4]
 8003e40:	e02e      	b.n	8003ea0 <HAL_RCC_OscConfig+0x434>
 8003e42:	4b48      	ldr	r3, [pc, #288]	@ (8003f64 <HAL_RCC_OscConfig+0x4f8>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	069b      	lsls	r3, r3, #26
 8003e50:	4944      	ldr	r1, [pc, #272]	@ (8003f64 <HAL_RCC_OscConfig+0x4f8>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	604b      	str	r3, [r1, #4]
 8003e56:	e023      	b.n	8003ea0 <HAL_RCC_OscConfig+0x434>
 8003e58:	4b42      	ldr	r3, [pc, #264]	@ (8003f64 <HAL_RCC_OscConfig+0x4f8>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	061b      	lsls	r3, r3, #24
 8003e66:	493f      	ldr	r1, [pc, #252]	@ (8003f64 <HAL_RCC_OscConfig+0x4f8>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	60cb      	str	r3, [r1, #12]
 8003e6c:	e018      	b.n	8003ea0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003e6e:	4b3d      	ldr	r3, [pc, #244]	@ (8003f64 <HAL_RCC_OscConfig+0x4f8>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a3c      	ldr	r2, [pc, #240]	@ (8003f64 <HAL_RCC_OscConfig+0x4f8>)
 8003e74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7a:	f7fe ff53 	bl	8002d24 <HAL_GetTick>
 8003e7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e80:	e008      	b.n	8003e94 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003e82:	f7fe ff4f 	bl	8002d24 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e23d      	b.n	8004310 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e94:	4b33      	ldr	r3, [pc, #204]	@ (8003f64 <HAL_RCC_OscConfig+0x4f8>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1f0      	bne.n	8003e82 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0308 	and.w	r3, r3, #8
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d036      	beq.n	8003f1a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d019      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8003f64 <HAL_RCC_OscConfig+0x4f8>)
 8003eb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eb8:	4a2a      	ldr	r2, [pc, #168]	@ (8003f64 <HAL_RCC_OscConfig+0x4f8>)
 8003eba:	f043 0301 	orr.w	r3, r3, #1
 8003ebe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec0:	f7fe ff30 	bl	8002d24 <HAL_GetTick>
 8003ec4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ec8:	f7fe ff2c 	bl	8002d24 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e21a      	b.n	8004310 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003eda:	4b22      	ldr	r3, [pc, #136]	@ (8003f64 <HAL_RCC_OscConfig+0x4f8>)
 8003edc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0f0      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x45c>
 8003ee6:	e018      	b.n	8003f1a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ee8:	4b1e      	ldr	r3, [pc, #120]	@ (8003f64 <HAL_RCC_OscConfig+0x4f8>)
 8003eea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eec:	4a1d      	ldr	r2, [pc, #116]	@ (8003f64 <HAL_RCC_OscConfig+0x4f8>)
 8003eee:	f023 0301 	bic.w	r3, r3, #1
 8003ef2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef4:	f7fe ff16 	bl	8002d24 <HAL_GetTick>
 8003ef8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003efc:	f7fe ff12 	bl	8002d24 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e200      	b.n	8004310 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f0e:	4b15      	ldr	r3, [pc, #84]	@ (8003f64 <HAL_RCC_OscConfig+0x4f8>)
 8003f10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f0      	bne.n	8003efc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0320 	and.w	r3, r3, #32
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d039      	beq.n	8003f9a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d01c      	beq.n	8003f68 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f64 <HAL_RCC_OscConfig+0x4f8>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a0c      	ldr	r2, [pc, #48]	@ (8003f64 <HAL_RCC_OscConfig+0x4f8>)
 8003f34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003f38:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f3a:	f7fe fef3 	bl	8002d24 <HAL_GetTick>
 8003f3e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f40:	e008      	b.n	8003f54 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f42:	f7fe feef 	bl	8002d24 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e1dd      	b.n	8004310 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f54:	4b03      	ldr	r3, [pc, #12]	@ (8003f64 <HAL_RCC_OscConfig+0x4f8>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0f0      	beq.n	8003f42 <HAL_RCC_OscConfig+0x4d6>
 8003f60:	e01b      	b.n	8003f9a <HAL_RCC_OscConfig+0x52e>
 8003f62:	bf00      	nop
 8003f64:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f68:	4b9b      	ldr	r3, [pc, #620]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a9a      	ldr	r2, [pc, #616]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 8003f6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f72:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f74:	f7fe fed6 	bl	8002d24 <HAL_GetTick>
 8003f78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f7c:	f7fe fed2 	bl	8002d24 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e1c0      	b.n	8004310 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f8e:	4b92      	ldr	r3, [pc, #584]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1f0      	bne.n	8003f7c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0304 	and.w	r3, r3, #4
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 8081 	beq.w	80040aa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003fa8:	4b8c      	ldr	r3, [pc, #560]	@ (80041dc <HAL_RCC_OscConfig+0x770>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a8b      	ldr	r2, [pc, #556]	@ (80041dc <HAL_RCC_OscConfig+0x770>)
 8003fae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fb4:	f7fe feb6 	bl	8002d24 <HAL_GetTick>
 8003fb8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fbc:	f7fe feb2 	bl	8002d24 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b64      	cmp	r3, #100	@ 0x64
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e1a0      	b.n	8004310 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fce:	4b83      	ldr	r3, [pc, #524]	@ (80041dc <HAL_RCC_OscConfig+0x770>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0f0      	beq.n	8003fbc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d106      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x584>
 8003fe2:	4b7d      	ldr	r3, [pc, #500]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 8003fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe6:	4a7c      	ldr	r2, [pc, #496]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 8003fe8:	f043 0301 	orr.w	r3, r3, #1
 8003fec:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fee:	e02d      	b.n	800404c <HAL_RCC_OscConfig+0x5e0>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10c      	bne.n	8004012 <HAL_RCC_OscConfig+0x5a6>
 8003ff8:	4b77      	ldr	r3, [pc, #476]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 8003ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ffc:	4a76      	ldr	r2, [pc, #472]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 8003ffe:	f023 0301 	bic.w	r3, r3, #1
 8004002:	6713      	str	r3, [r2, #112]	@ 0x70
 8004004:	4b74      	ldr	r3, [pc, #464]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 8004006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004008:	4a73      	ldr	r2, [pc, #460]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 800400a:	f023 0304 	bic.w	r3, r3, #4
 800400e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004010:	e01c      	b.n	800404c <HAL_RCC_OscConfig+0x5e0>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	2b05      	cmp	r3, #5
 8004018:	d10c      	bne.n	8004034 <HAL_RCC_OscConfig+0x5c8>
 800401a:	4b6f      	ldr	r3, [pc, #444]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 800401c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800401e:	4a6e      	ldr	r2, [pc, #440]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 8004020:	f043 0304 	orr.w	r3, r3, #4
 8004024:	6713      	str	r3, [r2, #112]	@ 0x70
 8004026:	4b6c      	ldr	r3, [pc, #432]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 8004028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800402a:	4a6b      	ldr	r2, [pc, #428]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 800402c:	f043 0301 	orr.w	r3, r3, #1
 8004030:	6713      	str	r3, [r2, #112]	@ 0x70
 8004032:	e00b      	b.n	800404c <HAL_RCC_OscConfig+0x5e0>
 8004034:	4b68      	ldr	r3, [pc, #416]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 8004036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004038:	4a67      	ldr	r2, [pc, #412]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 800403a:	f023 0301 	bic.w	r3, r3, #1
 800403e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004040:	4b65      	ldr	r3, [pc, #404]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 8004042:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004044:	4a64      	ldr	r2, [pc, #400]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 8004046:	f023 0304 	bic.w	r3, r3, #4
 800404a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d015      	beq.n	8004080 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004054:	f7fe fe66 	bl	8002d24 <HAL_GetTick>
 8004058:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800405a:	e00a      	b.n	8004072 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800405c:	f7fe fe62 	bl	8002d24 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800406a:	4293      	cmp	r3, r2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e14e      	b.n	8004310 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004072:	4b59      	ldr	r3, [pc, #356]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 8004074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0ee      	beq.n	800405c <HAL_RCC_OscConfig+0x5f0>
 800407e:	e014      	b.n	80040aa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004080:	f7fe fe50 	bl	8002d24 <HAL_GetTick>
 8004084:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004086:	e00a      	b.n	800409e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004088:	f7fe fe4c 	bl	8002d24 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004096:	4293      	cmp	r3, r2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e138      	b.n	8004310 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800409e:	4b4e      	ldr	r3, [pc, #312]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 80040a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1ee      	bne.n	8004088 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 812d 	beq.w	800430e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80040b4:	4b48      	ldr	r3, [pc, #288]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040bc:	2b18      	cmp	r3, #24
 80040be:	f000 80bd 	beq.w	800423c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	f040 809e 	bne.w	8004208 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040cc:	4b42      	ldr	r3, [pc, #264]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a41      	ldr	r2, [pc, #260]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 80040d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d8:	f7fe fe24 	bl	8002d24 <HAL_GetTick>
 80040dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040e0:	f7fe fe20 	bl	8002d24 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e10e      	b.n	8004310 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040f2:	4b39      	ldr	r3, [pc, #228]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1f0      	bne.n	80040e0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040fe:	4b36      	ldr	r3, [pc, #216]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 8004100:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004102:	4b37      	ldr	r3, [pc, #220]	@ (80041e0 <HAL_RCC_OscConfig+0x774>)
 8004104:	4013      	ands	r3, r2
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800410e:	0112      	lsls	r2, r2, #4
 8004110:	430a      	orrs	r2, r1
 8004112:	4931      	ldr	r1, [pc, #196]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 8004114:	4313      	orrs	r3, r2
 8004116:	628b      	str	r3, [r1, #40]	@ 0x28
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800411c:	3b01      	subs	r3, #1
 800411e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004126:	3b01      	subs	r3, #1
 8004128:	025b      	lsls	r3, r3, #9
 800412a:	b29b      	uxth	r3, r3
 800412c:	431a      	orrs	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004132:	3b01      	subs	r3, #1
 8004134:	041b      	lsls	r3, r3, #16
 8004136:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004140:	3b01      	subs	r3, #1
 8004142:	061b      	lsls	r3, r3, #24
 8004144:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004148:	4923      	ldr	r1, [pc, #140]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 800414a:	4313      	orrs	r3, r2
 800414c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800414e:	4b22      	ldr	r3, [pc, #136]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 8004150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004152:	4a21      	ldr	r2, [pc, #132]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 8004154:	f023 0301 	bic.w	r3, r3, #1
 8004158:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800415a:	4b1f      	ldr	r3, [pc, #124]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 800415c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800415e:	4b21      	ldr	r3, [pc, #132]	@ (80041e4 <HAL_RCC_OscConfig+0x778>)
 8004160:	4013      	ands	r3, r2
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004166:	00d2      	lsls	r2, r2, #3
 8004168:	491b      	ldr	r1, [pc, #108]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 800416a:	4313      	orrs	r3, r2
 800416c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800416e:	4b1a      	ldr	r3, [pc, #104]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 8004170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004172:	f023 020c 	bic.w	r2, r3, #12
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417a:	4917      	ldr	r1, [pc, #92]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 800417c:	4313      	orrs	r3, r2
 800417e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004180:	4b15      	ldr	r3, [pc, #84]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 8004182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004184:	f023 0202 	bic.w	r2, r3, #2
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800418c:	4912      	ldr	r1, [pc, #72]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 800418e:	4313      	orrs	r3, r2
 8004190:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004192:	4b11      	ldr	r3, [pc, #68]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 8004194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004196:	4a10      	ldr	r2, [pc, #64]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 8004198:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800419c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800419e:	4b0e      	ldr	r3, [pc, #56]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 80041a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a2:	4a0d      	ldr	r2, [pc, #52]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 80041a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80041aa:	4b0b      	ldr	r3, [pc, #44]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 80041ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ae:	4a0a      	ldr	r2, [pc, #40]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 80041b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80041b6:	4b08      	ldr	r3, [pc, #32]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 80041b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ba:	4a07      	ldr	r2, [pc, #28]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 80041bc:	f043 0301 	orr.w	r3, r3, #1
 80041c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041c2:	4b05      	ldr	r3, [pc, #20]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a04      	ldr	r2, [pc, #16]	@ (80041d8 <HAL_RCC_OscConfig+0x76c>)
 80041c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ce:	f7fe fda9 	bl	8002d24 <HAL_GetTick>
 80041d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041d4:	e011      	b.n	80041fa <HAL_RCC_OscConfig+0x78e>
 80041d6:	bf00      	nop
 80041d8:	58024400 	.word	0x58024400
 80041dc:	58024800 	.word	0x58024800
 80041e0:	fffffc0c 	.word	0xfffffc0c
 80041e4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041e8:	f7fe fd9c 	bl	8002d24 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e08a      	b.n	8004310 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041fa:	4b47      	ldr	r3, [pc, #284]	@ (8004318 <HAL_RCC_OscConfig+0x8ac>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0f0      	beq.n	80041e8 <HAL_RCC_OscConfig+0x77c>
 8004206:	e082      	b.n	800430e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004208:	4b43      	ldr	r3, [pc, #268]	@ (8004318 <HAL_RCC_OscConfig+0x8ac>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a42      	ldr	r2, [pc, #264]	@ (8004318 <HAL_RCC_OscConfig+0x8ac>)
 800420e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004212:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004214:	f7fe fd86 	bl	8002d24 <HAL_GetTick>
 8004218:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800421c:	f7fe fd82 	bl	8002d24 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e070      	b.n	8004310 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800422e:	4b3a      	ldr	r3, [pc, #232]	@ (8004318 <HAL_RCC_OscConfig+0x8ac>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1f0      	bne.n	800421c <HAL_RCC_OscConfig+0x7b0>
 800423a:	e068      	b.n	800430e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800423c:	4b36      	ldr	r3, [pc, #216]	@ (8004318 <HAL_RCC_OscConfig+0x8ac>)
 800423e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004240:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004242:	4b35      	ldr	r3, [pc, #212]	@ (8004318 <HAL_RCC_OscConfig+0x8ac>)
 8004244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004246:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424c:	2b01      	cmp	r3, #1
 800424e:	d031      	beq.n	80042b4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	f003 0203 	and.w	r2, r3, #3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800425a:	429a      	cmp	r2, r3
 800425c:	d12a      	bne.n	80042b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	091b      	lsrs	r3, r3, #4
 8004262:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800426a:	429a      	cmp	r2, r3
 800426c:	d122      	bne.n	80042b4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004278:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800427a:	429a      	cmp	r2, r3
 800427c:	d11a      	bne.n	80042b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	0a5b      	lsrs	r3, r3, #9
 8004282:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800428a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800428c:	429a      	cmp	r2, r3
 800428e:	d111      	bne.n	80042b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	0c1b      	lsrs	r3, r3, #16
 8004294:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800429c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800429e:	429a      	cmp	r2, r3
 80042a0:	d108      	bne.n	80042b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	0e1b      	lsrs	r3, r3, #24
 80042a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d001      	beq.n	80042b8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e02b      	b.n	8004310 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80042b8:	4b17      	ldr	r3, [pc, #92]	@ (8004318 <HAL_RCC_OscConfig+0x8ac>)
 80042ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042bc:	08db      	lsrs	r3, r3, #3
 80042be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042c2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d01f      	beq.n	800430e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80042ce:	4b12      	ldr	r3, [pc, #72]	@ (8004318 <HAL_RCC_OscConfig+0x8ac>)
 80042d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d2:	4a11      	ldr	r2, [pc, #68]	@ (8004318 <HAL_RCC_OscConfig+0x8ac>)
 80042d4:	f023 0301 	bic.w	r3, r3, #1
 80042d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80042da:	f7fe fd23 	bl	8002d24 <HAL_GetTick>
 80042de:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80042e0:	bf00      	nop
 80042e2:	f7fe fd1f 	bl	8002d24 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d0f9      	beq.n	80042e2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80042ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004318 <HAL_RCC_OscConfig+0x8ac>)
 80042f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042f2:	4b0a      	ldr	r3, [pc, #40]	@ (800431c <HAL_RCC_OscConfig+0x8b0>)
 80042f4:	4013      	ands	r3, r2
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80042fa:	00d2      	lsls	r2, r2, #3
 80042fc:	4906      	ldr	r1, [pc, #24]	@ (8004318 <HAL_RCC_OscConfig+0x8ac>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004302:	4b05      	ldr	r3, [pc, #20]	@ (8004318 <HAL_RCC_OscConfig+0x8ac>)
 8004304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004306:	4a04      	ldr	r2, [pc, #16]	@ (8004318 <HAL_RCC_OscConfig+0x8ac>)
 8004308:	f043 0301 	orr.w	r3, r3, #1
 800430c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3730      	adds	r7, #48	@ 0x30
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	58024400 	.word	0x58024400
 800431c:	ffff0007 	.word	0xffff0007

08004320 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e19c      	b.n	800466e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004334:	4b8a      	ldr	r3, [pc, #552]	@ (8004560 <HAL_RCC_ClockConfig+0x240>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 030f 	and.w	r3, r3, #15
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	429a      	cmp	r2, r3
 8004340:	d910      	bls.n	8004364 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004342:	4b87      	ldr	r3, [pc, #540]	@ (8004560 <HAL_RCC_ClockConfig+0x240>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f023 020f 	bic.w	r2, r3, #15
 800434a:	4985      	ldr	r1, [pc, #532]	@ (8004560 <HAL_RCC_ClockConfig+0x240>)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	4313      	orrs	r3, r2
 8004350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004352:	4b83      	ldr	r3, [pc, #524]	@ (8004560 <HAL_RCC_ClockConfig+0x240>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 030f 	and.w	r3, r3, #15
 800435a:	683a      	ldr	r2, [r7, #0]
 800435c:	429a      	cmp	r2, r3
 800435e:	d001      	beq.n	8004364 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e184      	b.n	800466e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	2b00      	cmp	r3, #0
 800436e:	d010      	beq.n	8004392 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691a      	ldr	r2, [r3, #16]
 8004374:	4b7b      	ldr	r3, [pc, #492]	@ (8004564 <HAL_RCC_ClockConfig+0x244>)
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800437c:	429a      	cmp	r2, r3
 800437e:	d908      	bls.n	8004392 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004380:	4b78      	ldr	r3, [pc, #480]	@ (8004564 <HAL_RCC_ClockConfig+0x244>)
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	4975      	ldr	r1, [pc, #468]	@ (8004564 <HAL_RCC_ClockConfig+0x244>)
 800438e:	4313      	orrs	r3, r2
 8004390:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0308 	and.w	r3, r3, #8
 800439a:	2b00      	cmp	r3, #0
 800439c:	d010      	beq.n	80043c0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	695a      	ldr	r2, [r3, #20]
 80043a2:	4b70      	ldr	r3, [pc, #448]	@ (8004564 <HAL_RCC_ClockConfig+0x244>)
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d908      	bls.n	80043c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80043ae:	4b6d      	ldr	r3, [pc, #436]	@ (8004564 <HAL_RCC_ClockConfig+0x244>)
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	496a      	ldr	r1, [pc, #424]	@ (8004564 <HAL_RCC_ClockConfig+0x244>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0310 	and.w	r3, r3, #16
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d010      	beq.n	80043ee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	699a      	ldr	r2, [r3, #24]
 80043d0:	4b64      	ldr	r3, [pc, #400]	@ (8004564 <HAL_RCC_ClockConfig+0x244>)
 80043d2:	69db      	ldr	r3, [r3, #28]
 80043d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80043d8:	429a      	cmp	r2, r3
 80043da:	d908      	bls.n	80043ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043dc:	4b61      	ldr	r3, [pc, #388]	@ (8004564 <HAL_RCC_ClockConfig+0x244>)
 80043de:	69db      	ldr	r3, [r3, #28]
 80043e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	495e      	ldr	r1, [pc, #376]	@ (8004564 <HAL_RCC_ClockConfig+0x244>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0320 	and.w	r3, r3, #32
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d010      	beq.n	800441c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	69da      	ldr	r2, [r3, #28]
 80043fe:	4b59      	ldr	r3, [pc, #356]	@ (8004564 <HAL_RCC_ClockConfig+0x244>)
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004406:	429a      	cmp	r2, r3
 8004408:	d908      	bls.n	800441c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800440a:	4b56      	ldr	r3, [pc, #344]	@ (8004564 <HAL_RCC_ClockConfig+0x244>)
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	4953      	ldr	r1, [pc, #332]	@ (8004564 <HAL_RCC_ClockConfig+0x244>)
 8004418:	4313      	orrs	r3, r2
 800441a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d010      	beq.n	800444a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	4b4d      	ldr	r3, [pc, #308]	@ (8004564 <HAL_RCC_ClockConfig+0x244>)
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	f003 030f 	and.w	r3, r3, #15
 8004434:	429a      	cmp	r2, r3
 8004436:	d908      	bls.n	800444a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004438:	4b4a      	ldr	r3, [pc, #296]	@ (8004564 <HAL_RCC_ClockConfig+0x244>)
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	f023 020f 	bic.w	r2, r3, #15
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	4947      	ldr	r1, [pc, #284]	@ (8004564 <HAL_RCC_ClockConfig+0x244>)
 8004446:	4313      	orrs	r3, r2
 8004448:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d055      	beq.n	8004502 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004456:	4b43      	ldr	r3, [pc, #268]	@ (8004564 <HAL_RCC_ClockConfig+0x244>)
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	4940      	ldr	r1, [pc, #256]	@ (8004564 <HAL_RCC_ClockConfig+0x244>)
 8004464:	4313      	orrs	r3, r2
 8004466:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	2b02      	cmp	r3, #2
 800446e:	d107      	bne.n	8004480 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004470:	4b3c      	ldr	r3, [pc, #240]	@ (8004564 <HAL_RCC_ClockConfig+0x244>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d121      	bne.n	80044c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e0f6      	b.n	800466e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	2b03      	cmp	r3, #3
 8004486:	d107      	bne.n	8004498 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004488:	4b36      	ldr	r3, [pc, #216]	@ (8004564 <HAL_RCC_ClockConfig+0x244>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d115      	bne.n	80044c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e0ea      	b.n	800466e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d107      	bne.n	80044b0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80044a0:	4b30      	ldr	r3, [pc, #192]	@ (8004564 <HAL_RCC_ClockConfig+0x244>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d109      	bne.n	80044c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e0de      	b.n	800466e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044b0:	4b2c      	ldr	r3, [pc, #176]	@ (8004564 <HAL_RCC_ClockConfig+0x244>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0304 	and.w	r3, r3, #4
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e0d6      	b.n	800466e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044c0:	4b28      	ldr	r3, [pc, #160]	@ (8004564 <HAL_RCC_ClockConfig+0x244>)
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	f023 0207 	bic.w	r2, r3, #7
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	4925      	ldr	r1, [pc, #148]	@ (8004564 <HAL_RCC_ClockConfig+0x244>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044d2:	f7fe fc27 	bl	8002d24 <HAL_GetTick>
 80044d6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044d8:	e00a      	b.n	80044f0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044da:	f7fe fc23 	bl	8002d24 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e0be      	b.n	800466e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044f0:	4b1c      	ldr	r3, [pc, #112]	@ (8004564 <HAL_RCC_ClockConfig+0x244>)
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	00db      	lsls	r3, r3, #3
 80044fe:	429a      	cmp	r2, r3
 8004500:	d1eb      	bne.n	80044da <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d010      	beq.n	8004530 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	4b14      	ldr	r3, [pc, #80]	@ (8004564 <HAL_RCC_ClockConfig+0x244>)
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	f003 030f 	and.w	r3, r3, #15
 800451a:	429a      	cmp	r2, r3
 800451c:	d208      	bcs.n	8004530 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800451e:	4b11      	ldr	r3, [pc, #68]	@ (8004564 <HAL_RCC_ClockConfig+0x244>)
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	f023 020f 	bic.w	r2, r3, #15
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	490e      	ldr	r1, [pc, #56]	@ (8004564 <HAL_RCC_ClockConfig+0x244>)
 800452c:	4313      	orrs	r3, r2
 800452e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004530:	4b0b      	ldr	r3, [pc, #44]	@ (8004560 <HAL_RCC_ClockConfig+0x240>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 030f 	and.w	r3, r3, #15
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	429a      	cmp	r2, r3
 800453c:	d214      	bcs.n	8004568 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800453e:	4b08      	ldr	r3, [pc, #32]	@ (8004560 <HAL_RCC_ClockConfig+0x240>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f023 020f 	bic.w	r2, r3, #15
 8004546:	4906      	ldr	r1, [pc, #24]	@ (8004560 <HAL_RCC_ClockConfig+0x240>)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	4313      	orrs	r3, r2
 800454c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800454e:	4b04      	ldr	r3, [pc, #16]	@ (8004560 <HAL_RCC_ClockConfig+0x240>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 030f 	and.w	r3, r3, #15
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	429a      	cmp	r2, r3
 800455a:	d005      	beq.n	8004568 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e086      	b.n	800466e <HAL_RCC_ClockConfig+0x34e>
 8004560:	52002000 	.word	0x52002000
 8004564:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b00      	cmp	r3, #0
 8004572:	d010      	beq.n	8004596 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	691a      	ldr	r2, [r3, #16]
 8004578:	4b3f      	ldr	r3, [pc, #252]	@ (8004678 <HAL_RCC_ClockConfig+0x358>)
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004580:	429a      	cmp	r2, r3
 8004582:	d208      	bcs.n	8004596 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004584:	4b3c      	ldr	r3, [pc, #240]	@ (8004678 <HAL_RCC_ClockConfig+0x358>)
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	4939      	ldr	r1, [pc, #228]	@ (8004678 <HAL_RCC_ClockConfig+0x358>)
 8004592:	4313      	orrs	r3, r2
 8004594:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d010      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	695a      	ldr	r2, [r3, #20]
 80045a6:	4b34      	ldr	r3, [pc, #208]	@ (8004678 <HAL_RCC_ClockConfig+0x358>)
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d208      	bcs.n	80045c4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80045b2:	4b31      	ldr	r3, [pc, #196]	@ (8004678 <HAL_RCC_ClockConfig+0x358>)
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	492e      	ldr	r1, [pc, #184]	@ (8004678 <HAL_RCC_ClockConfig+0x358>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0310 	and.w	r3, r3, #16
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d010      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	699a      	ldr	r2, [r3, #24]
 80045d4:	4b28      	ldr	r3, [pc, #160]	@ (8004678 <HAL_RCC_ClockConfig+0x358>)
 80045d6:	69db      	ldr	r3, [r3, #28]
 80045d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80045dc:	429a      	cmp	r2, r3
 80045de:	d208      	bcs.n	80045f2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80045e0:	4b25      	ldr	r3, [pc, #148]	@ (8004678 <HAL_RCC_ClockConfig+0x358>)
 80045e2:	69db      	ldr	r3, [r3, #28]
 80045e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	4922      	ldr	r1, [pc, #136]	@ (8004678 <HAL_RCC_ClockConfig+0x358>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0320 	and.w	r3, r3, #32
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d010      	beq.n	8004620 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	69da      	ldr	r2, [r3, #28]
 8004602:	4b1d      	ldr	r3, [pc, #116]	@ (8004678 <HAL_RCC_ClockConfig+0x358>)
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800460a:	429a      	cmp	r2, r3
 800460c:	d208      	bcs.n	8004620 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800460e:	4b1a      	ldr	r3, [pc, #104]	@ (8004678 <HAL_RCC_ClockConfig+0x358>)
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	4917      	ldr	r1, [pc, #92]	@ (8004678 <HAL_RCC_ClockConfig+0x358>)
 800461c:	4313      	orrs	r3, r2
 800461e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004620:	f000 f834 	bl	800468c <HAL_RCC_GetSysClockFreq>
 8004624:	4602      	mov	r2, r0
 8004626:	4b14      	ldr	r3, [pc, #80]	@ (8004678 <HAL_RCC_ClockConfig+0x358>)
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	0a1b      	lsrs	r3, r3, #8
 800462c:	f003 030f 	and.w	r3, r3, #15
 8004630:	4912      	ldr	r1, [pc, #72]	@ (800467c <HAL_RCC_ClockConfig+0x35c>)
 8004632:	5ccb      	ldrb	r3, [r1, r3]
 8004634:	f003 031f 	and.w	r3, r3, #31
 8004638:	fa22 f303 	lsr.w	r3, r2, r3
 800463c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800463e:	4b0e      	ldr	r3, [pc, #56]	@ (8004678 <HAL_RCC_ClockConfig+0x358>)
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	f003 030f 	and.w	r3, r3, #15
 8004646:	4a0d      	ldr	r2, [pc, #52]	@ (800467c <HAL_RCC_ClockConfig+0x35c>)
 8004648:	5cd3      	ldrb	r3, [r2, r3]
 800464a:	f003 031f 	and.w	r3, r3, #31
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	fa22 f303 	lsr.w	r3, r2, r3
 8004654:	4a0a      	ldr	r2, [pc, #40]	@ (8004680 <HAL_RCC_ClockConfig+0x360>)
 8004656:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004658:	4a0a      	ldr	r2, [pc, #40]	@ (8004684 <HAL_RCC_ClockConfig+0x364>)
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800465e:	4b0a      	ldr	r3, [pc, #40]	@ (8004688 <HAL_RCC_ClockConfig+0x368>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4618      	mov	r0, r3
 8004664:	f7fe fb14 	bl	8002c90 <HAL_InitTick>
 8004668:	4603      	mov	r3, r0
 800466a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800466c:	7bfb      	ldrb	r3, [r7, #15]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	58024400 	.word	0x58024400
 800467c:	0800b0f4 	.word	0x0800b0f4
 8004680:	24000004 	.word	0x24000004
 8004684:	24000000 	.word	0x24000000
 8004688:	24000024 	.word	0x24000024

0800468c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800468c:	b480      	push	{r7}
 800468e:	b089      	sub	sp, #36	@ 0x24
 8004690:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004692:	4bb3      	ldr	r3, [pc, #716]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800469a:	2b18      	cmp	r3, #24
 800469c:	f200 8155 	bhi.w	800494a <HAL_RCC_GetSysClockFreq+0x2be>
 80046a0:	a201      	add	r2, pc, #4	@ (adr r2, 80046a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80046a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a6:	bf00      	nop
 80046a8:	0800470d 	.word	0x0800470d
 80046ac:	0800494b 	.word	0x0800494b
 80046b0:	0800494b 	.word	0x0800494b
 80046b4:	0800494b 	.word	0x0800494b
 80046b8:	0800494b 	.word	0x0800494b
 80046bc:	0800494b 	.word	0x0800494b
 80046c0:	0800494b 	.word	0x0800494b
 80046c4:	0800494b 	.word	0x0800494b
 80046c8:	08004733 	.word	0x08004733
 80046cc:	0800494b 	.word	0x0800494b
 80046d0:	0800494b 	.word	0x0800494b
 80046d4:	0800494b 	.word	0x0800494b
 80046d8:	0800494b 	.word	0x0800494b
 80046dc:	0800494b 	.word	0x0800494b
 80046e0:	0800494b 	.word	0x0800494b
 80046e4:	0800494b 	.word	0x0800494b
 80046e8:	08004739 	.word	0x08004739
 80046ec:	0800494b 	.word	0x0800494b
 80046f0:	0800494b 	.word	0x0800494b
 80046f4:	0800494b 	.word	0x0800494b
 80046f8:	0800494b 	.word	0x0800494b
 80046fc:	0800494b 	.word	0x0800494b
 8004700:	0800494b 	.word	0x0800494b
 8004704:	0800494b 	.word	0x0800494b
 8004708:	0800473f 	.word	0x0800473f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800470c:	4b94      	ldr	r3, [pc, #592]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0320 	and.w	r3, r3, #32
 8004714:	2b00      	cmp	r3, #0
 8004716:	d009      	beq.n	800472c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004718:	4b91      	ldr	r3, [pc, #580]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	08db      	lsrs	r3, r3, #3
 800471e:	f003 0303 	and.w	r3, r3, #3
 8004722:	4a90      	ldr	r2, [pc, #576]	@ (8004964 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004724:	fa22 f303 	lsr.w	r3, r2, r3
 8004728:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800472a:	e111      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800472c:	4b8d      	ldr	r3, [pc, #564]	@ (8004964 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800472e:	61bb      	str	r3, [r7, #24]
      break;
 8004730:	e10e      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004732:	4b8d      	ldr	r3, [pc, #564]	@ (8004968 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004734:	61bb      	str	r3, [r7, #24]
      break;
 8004736:	e10b      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004738:	4b8c      	ldr	r3, [pc, #560]	@ (800496c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800473a:	61bb      	str	r3, [r7, #24]
      break;
 800473c:	e108      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800473e:	4b88      	ldr	r3, [pc, #544]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004742:	f003 0303 	and.w	r3, r3, #3
 8004746:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004748:	4b85      	ldr	r3, [pc, #532]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800474a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800474c:	091b      	lsrs	r3, r3, #4
 800474e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004752:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004754:	4b82      	ldr	r3, [pc, #520]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800475e:	4b80      	ldr	r3, [pc, #512]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004762:	08db      	lsrs	r3, r3, #3
 8004764:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	fb02 f303 	mul.w	r3, r2, r3
 800476e:	ee07 3a90 	vmov	s15, r3
 8004772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004776:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 80e1 	beq.w	8004944 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	2b02      	cmp	r3, #2
 8004786:	f000 8083 	beq.w	8004890 <HAL_RCC_GetSysClockFreq+0x204>
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	2b02      	cmp	r3, #2
 800478e:	f200 80a1 	bhi.w	80048d4 <HAL_RCC_GetSysClockFreq+0x248>
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d003      	beq.n	80047a0 <HAL_RCC_GetSysClockFreq+0x114>
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d056      	beq.n	800484c <HAL_RCC_GetSysClockFreq+0x1c0>
 800479e:	e099      	b.n	80048d4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047a0:	4b6f      	ldr	r3, [pc, #444]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0320 	and.w	r3, r3, #32
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d02d      	beq.n	8004808 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047ac:	4b6c      	ldr	r3, [pc, #432]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	08db      	lsrs	r3, r3, #3
 80047b2:	f003 0303 	and.w	r3, r3, #3
 80047b6:	4a6b      	ldr	r2, [pc, #428]	@ (8004964 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80047b8:	fa22 f303 	lsr.w	r3, r2, r3
 80047bc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	ee07 3a90 	vmov	s15, r3
 80047c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	ee07 3a90 	vmov	s15, r3
 80047ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047d6:	4b62      	ldr	r3, [pc, #392]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047de:	ee07 3a90 	vmov	s15, r3
 80047e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80047ea:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004970 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004802:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004806:	e087      	b.n	8004918 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	ee07 3a90 	vmov	s15, r3
 800480e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004812:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004974 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800481a:	4b51      	ldr	r3, [pc, #324]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800481c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800481e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004822:	ee07 3a90 	vmov	s15, r3
 8004826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800482a:	ed97 6a02 	vldr	s12, [r7, #8]
 800482e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004970 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800483a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800483e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004846:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800484a:	e065      	b.n	8004918 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	ee07 3a90 	vmov	s15, r3
 8004852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004856:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004978 <HAL_RCC_GetSysClockFreq+0x2ec>
 800485a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800485e:	4b40      	ldr	r3, [pc, #256]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004866:	ee07 3a90 	vmov	s15, r3
 800486a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800486e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004872:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004970 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800487a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800487e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800488a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800488e:	e043      	b.n	8004918 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	ee07 3a90 	vmov	s15, r3
 8004896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800489a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800497c <HAL_RCC_GetSysClockFreq+0x2f0>
 800489e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048a2:	4b2f      	ldr	r3, [pc, #188]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048aa:	ee07 3a90 	vmov	s15, r3
 80048ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80048b6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004970 <HAL_RCC_GetSysClockFreq+0x2e4>
 80048ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80048d2:	e021      	b.n	8004918 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	ee07 3a90 	vmov	s15, r3
 80048da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048de:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004978 <HAL_RCC_GetSysClockFreq+0x2ec>
 80048e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048e6:	4b1e      	ldr	r3, [pc, #120]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ee:	ee07 3a90 	vmov	s15, r3
 80048f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80048fa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004970 <HAL_RCC_GetSysClockFreq+0x2e4>
 80048fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004906:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800490a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800490e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004912:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004916:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004918:	4b11      	ldr	r3, [pc, #68]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800491a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800491c:	0a5b      	lsrs	r3, r3, #9
 800491e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004922:	3301      	adds	r3, #1
 8004924:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	ee07 3a90 	vmov	s15, r3
 800492c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004930:	edd7 6a07 	vldr	s13, [r7, #28]
 8004934:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004938:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800493c:	ee17 3a90 	vmov	r3, s15
 8004940:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004942:	e005      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	61bb      	str	r3, [r7, #24]
      break;
 8004948:	e002      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800494a:	4b07      	ldr	r3, [pc, #28]	@ (8004968 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800494c:	61bb      	str	r3, [r7, #24]
      break;
 800494e:	bf00      	nop
  }

  return sysclockfreq;
 8004950:	69bb      	ldr	r3, [r7, #24]
}
 8004952:	4618      	mov	r0, r3
 8004954:	3724      	adds	r7, #36	@ 0x24
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	58024400 	.word	0x58024400
 8004964:	03d09000 	.word	0x03d09000
 8004968:	003d0900 	.word	0x003d0900
 800496c:	017d7840 	.word	0x017d7840
 8004970:	46000000 	.word	0x46000000
 8004974:	4c742400 	.word	0x4c742400
 8004978:	4a742400 	.word	0x4a742400
 800497c:	4bbebc20 	.word	0x4bbebc20

08004980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004986:	f7ff fe81 	bl	800468c <HAL_RCC_GetSysClockFreq>
 800498a:	4602      	mov	r2, r0
 800498c:	4b10      	ldr	r3, [pc, #64]	@ (80049d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	0a1b      	lsrs	r3, r3, #8
 8004992:	f003 030f 	and.w	r3, r3, #15
 8004996:	490f      	ldr	r1, [pc, #60]	@ (80049d4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004998:	5ccb      	ldrb	r3, [r1, r3]
 800499a:	f003 031f 	and.w	r3, r3, #31
 800499e:	fa22 f303 	lsr.w	r3, r2, r3
 80049a2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80049a4:	4b0a      	ldr	r3, [pc, #40]	@ (80049d0 <HAL_RCC_GetHCLKFreq+0x50>)
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	f003 030f 	and.w	r3, r3, #15
 80049ac:	4a09      	ldr	r2, [pc, #36]	@ (80049d4 <HAL_RCC_GetHCLKFreq+0x54>)
 80049ae:	5cd3      	ldrb	r3, [r2, r3]
 80049b0:	f003 031f 	and.w	r3, r3, #31
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	fa22 f303 	lsr.w	r3, r2, r3
 80049ba:	4a07      	ldr	r2, [pc, #28]	@ (80049d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80049bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80049be:	4a07      	ldr	r2, [pc, #28]	@ (80049dc <HAL_RCC_GetHCLKFreq+0x5c>)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80049c4:	4b04      	ldr	r3, [pc, #16]	@ (80049d8 <HAL_RCC_GetHCLKFreq+0x58>)
 80049c6:	681b      	ldr	r3, [r3, #0]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3708      	adds	r7, #8
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	58024400 	.word	0x58024400
 80049d4:	0800b0f4 	.word	0x0800b0f4
 80049d8:	24000004 	.word	0x24000004
 80049dc:	24000000 	.word	0x24000000

080049e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80049e4:	f7ff ffcc 	bl	8004980 <HAL_RCC_GetHCLKFreq>
 80049e8:	4602      	mov	r2, r0
 80049ea:	4b06      	ldr	r3, [pc, #24]	@ (8004a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	091b      	lsrs	r3, r3, #4
 80049f0:	f003 0307 	and.w	r3, r3, #7
 80049f4:	4904      	ldr	r1, [pc, #16]	@ (8004a08 <HAL_RCC_GetPCLK1Freq+0x28>)
 80049f6:	5ccb      	ldrb	r3, [r1, r3]
 80049f8:	f003 031f 	and.w	r3, r3, #31
 80049fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	58024400 	.word	0x58024400
 8004a08:	0800b0f4 	.word	0x0800b0f4

08004a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004a10:	f7ff ffb6 	bl	8004980 <HAL_RCC_GetHCLKFreq>
 8004a14:	4602      	mov	r2, r0
 8004a16:	4b06      	ldr	r3, [pc, #24]	@ (8004a30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	0a1b      	lsrs	r3, r3, #8
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	4904      	ldr	r1, [pc, #16]	@ (8004a34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a22:	5ccb      	ldrb	r3, [r1, r3]
 8004a24:	f003 031f 	and.w	r3, r3, #31
 8004a28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	58024400 	.word	0x58024400
 8004a34:	0800b0f4 	.word	0x0800b0f4

08004a38 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a3c:	b0ca      	sub	sp, #296	@ 0x128
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a44:	2300      	movs	r3, #0
 8004a46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a58:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004a5c:	2500      	movs	r5, #0
 8004a5e:	ea54 0305 	orrs.w	r3, r4, r5
 8004a62:	d049      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a6a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a6e:	d02f      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004a70:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004a74:	d828      	bhi.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004a76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a7a:	d01a      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004a7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a80:	d822      	bhi.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004a86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a8a:	d007      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a8c:	e01c      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a8e:	4bb8      	ldr	r3, [pc, #736]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a92:	4ab7      	ldr	r2, [pc, #732]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004a9a:	e01a      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa0:	3308      	adds	r3, #8
 8004aa2:	2102      	movs	r1, #2
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f001 fc8f 	bl	80063c8 <RCCEx_PLL2_Config>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004ab0:	e00f      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab6:	3328      	adds	r3, #40	@ 0x28
 8004ab8:	2102      	movs	r1, #2
 8004aba:	4618      	mov	r0, r3
 8004abc:	f001 fd36 	bl	800652c <RCCEx_PLL3_Config>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004ac6:	e004      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ace:	e000      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004ad0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10a      	bne.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004ada:	4ba5      	ldr	r3, [pc, #660]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004adc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ade:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ae6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ae8:	4aa1      	ldr	r2, [pc, #644]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004aea:	430b      	orrs	r3, r1
 8004aec:	6513      	str	r3, [r2, #80]	@ 0x50
 8004aee:	e003      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004af4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b00:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004b04:	f04f 0900 	mov.w	r9, #0
 8004b08:	ea58 0309 	orrs.w	r3, r8, r9
 8004b0c:	d047      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d82a      	bhi.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004b18:	a201      	add	r2, pc, #4	@ (adr r2, 8004b20 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1e:	bf00      	nop
 8004b20:	08004b35 	.word	0x08004b35
 8004b24:	08004b43 	.word	0x08004b43
 8004b28:	08004b59 	.word	0x08004b59
 8004b2c:	08004b77 	.word	0x08004b77
 8004b30:	08004b77 	.word	0x08004b77
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b34:	4b8e      	ldr	r3, [pc, #568]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b38:	4a8d      	ldr	r2, [pc, #564]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b40:	e01a      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b46:	3308      	adds	r3, #8
 8004b48:	2100      	movs	r1, #0
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f001 fc3c 	bl	80063c8 <RCCEx_PLL2_Config>
 8004b50:	4603      	mov	r3, r0
 8004b52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b56:	e00f      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b5c:	3328      	adds	r3, #40	@ 0x28
 8004b5e:	2100      	movs	r1, #0
 8004b60:	4618      	mov	r0, r3
 8004b62:	f001 fce3 	bl	800652c <RCCEx_PLL3_Config>
 8004b66:	4603      	mov	r3, r0
 8004b68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b6c:	e004      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b74:	e000      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004b76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10a      	bne.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b80:	4b7b      	ldr	r3, [pc, #492]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b84:	f023 0107 	bic.w	r1, r3, #7
 8004b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b8e:	4a78      	ldr	r2, [pc, #480]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b90:	430b      	orrs	r3, r1
 8004b92:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b94:	e003      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004baa:	f04f 0b00 	mov.w	fp, #0
 8004bae:	ea5a 030b 	orrs.w	r3, sl, fp
 8004bb2:	d04c      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bbe:	d030      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004bc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bc4:	d829      	bhi.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004bc6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004bc8:	d02d      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004bca:	2bc0      	cmp	r3, #192	@ 0xc0
 8004bcc:	d825      	bhi.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004bce:	2b80      	cmp	r3, #128	@ 0x80
 8004bd0:	d018      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004bd2:	2b80      	cmp	r3, #128	@ 0x80
 8004bd4:	d821      	bhi.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d002      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004bda:	2b40      	cmp	r3, #64	@ 0x40
 8004bdc:	d007      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004bde:	e01c      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004be0:	4b63      	ldr	r3, [pc, #396]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be4:	4a62      	ldr	r2, [pc, #392]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004be6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004bec:	e01c      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bf2:	3308      	adds	r3, #8
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f001 fbe6 	bl	80063c8 <RCCEx_PLL2_Config>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004c02:	e011      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c08:	3328      	adds	r3, #40	@ 0x28
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f001 fc8d 	bl	800652c <RCCEx_PLL3_Config>
 8004c12:	4603      	mov	r3, r0
 8004c14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004c18:	e006      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c20:	e002      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004c22:	bf00      	nop
 8004c24:	e000      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004c26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10a      	bne.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004c30:	4b4f      	ldr	r3, [pc, #316]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c34:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c3e:	4a4c      	ldr	r2, [pc, #304]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c40:	430b      	orrs	r3, r1
 8004c42:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c44:	e003      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c56:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004c5a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004c5e:	2300      	movs	r3, #0
 8004c60:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004c64:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004c68:	460b      	mov	r3, r1
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	d053      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004c76:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c7a:	d035      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004c7c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c80:	d82e      	bhi.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004c82:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004c86:	d031      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004c88:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004c8c:	d828      	bhi.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004c8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c92:	d01a      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004c94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c98:	d822      	bhi.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004c9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ca2:	d007      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004ca4:	e01c      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ca6:	4b32      	ldr	r3, [pc, #200]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004caa:	4a31      	ldr	r2, [pc, #196]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004cb2:	e01c      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cb8:	3308      	adds	r3, #8
 8004cba:	2100      	movs	r1, #0
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f001 fb83 	bl	80063c8 <RCCEx_PLL2_Config>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004cc8:	e011      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cce:	3328      	adds	r3, #40	@ 0x28
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f001 fc2a 	bl	800652c <RCCEx_PLL3_Config>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004cde:	e006      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ce6:	e002      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004ce8:	bf00      	nop
 8004cea:	e000      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004cec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10b      	bne.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004cf6:	4b1e      	ldr	r3, [pc, #120]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cfa:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004d06:	4a1a      	ldr	r2, [pc, #104]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d08:	430b      	orrs	r3, r1
 8004d0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d0c:	e003      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004d22:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004d26:	2300      	movs	r3, #0
 8004d28:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004d2c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004d30:	460b      	mov	r3, r1
 8004d32:	4313      	orrs	r3, r2
 8004d34:	d056      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004d3e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d42:	d038      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004d44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d48:	d831      	bhi.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004d4a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d4e:	d034      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004d50:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004d54:	d82b      	bhi.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004d56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d5a:	d01d      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004d5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d60:	d825      	bhi.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d006      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004d66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d6a:	d00a      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004d6c:	e01f      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004d6e:	bf00      	nop
 8004d70:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d74:	4ba2      	ldr	r3, [pc, #648]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d78:	4aa1      	ldr	r2, [pc, #644]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d80:	e01c      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d86:	3308      	adds	r3, #8
 8004d88:	2100      	movs	r1, #0
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f001 fb1c 	bl	80063c8 <RCCEx_PLL2_Config>
 8004d90:	4603      	mov	r3, r0
 8004d92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004d96:	e011      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d9c:	3328      	adds	r3, #40	@ 0x28
 8004d9e:	2100      	movs	r1, #0
 8004da0:	4618      	mov	r0, r3
 8004da2:	f001 fbc3 	bl	800652c <RCCEx_PLL3_Config>
 8004da6:	4603      	mov	r3, r0
 8004da8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004dac:	e006      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004db4:	e002      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004db6:	bf00      	nop
 8004db8:	e000      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004dba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10b      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004dc4:	4b8e      	ldr	r3, [pc, #568]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dc8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dd0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004dd4:	4a8a      	ldr	r2, [pc, #552]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004dd6:	430b      	orrs	r3, r1
 8004dd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004dda:	e003      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ddc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004de0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dec:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004df0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004df4:	2300      	movs	r3, #0
 8004df6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004dfa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004dfe:	460b      	mov	r3, r1
 8004e00:	4313      	orrs	r3, r2
 8004e02:	d03a      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e0a:	2b30      	cmp	r3, #48	@ 0x30
 8004e0c:	d01f      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004e0e:	2b30      	cmp	r3, #48	@ 0x30
 8004e10:	d819      	bhi.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004e12:	2b20      	cmp	r3, #32
 8004e14:	d00c      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004e16:	2b20      	cmp	r3, #32
 8004e18:	d815      	bhi.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d019      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004e1e:	2b10      	cmp	r3, #16
 8004e20:	d111      	bne.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e22:	4b77      	ldr	r3, [pc, #476]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e26:	4a76      	ldr	r2, [pc, #472]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004e2e:	e011      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e34:	3308      	adds	r3, #8
 8004e36:	2102      	movs	r1, #2
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f001 fac5 	bl	80063c8 <RCCEx_PLL2_Config>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004e44:	e006      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e4c:	e002      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004e4e:	bf00      	nop
 8004e50:	e000      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004e52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10a      	bne.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004e5c:	4b68      	ldr	r3, [pc, #416]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e60:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e6a:	4a65      	ldr	r2, [pc, #404]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e6c:	430b      	orrs	r3, r1
 8004e6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e70:	e003      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e82:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004e86:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004e90:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004e94:	460b      	mov	r3, r1
 8004e96:	4313      	orrs	r3, r2
 8004e98:	d051      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ea0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ea4:	d035      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004ea6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004eaa:	d82e      	bhi.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004eac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004eb0:	d031      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004eb2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004eb6:	d828      	bhi.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004eb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ebc:	d01a      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004ebe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ec2:	d822      	bhi.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d003      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004ec8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ecc:	d007      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004ece:	e01c      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ed0:	4b4b      	ldr	r3, [pc, #300]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed4:	4a4a      	ldr	r2, [pc, #296]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ed6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004eda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004edc:	e01c      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ee2:	3308      	adds	r3, #8
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f001 fa6e 	bl	80063c8 <RCCEx_PLL2_Config>
 8004eec:	4603      	mov	r3, r0
 8004eee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ef2:	e011      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ef8:	3328      	adds	r3, #40	@ 0x28
 8004efa:	2100      	movs	r1, #0
 8004efc:	4618      	mov	r0, r3
 8004efe:	f001 fb15 	bl	800652c <RCCEx_PLL3_Config>
 8004f02:	4603      	mov	r3, r0
 8004f04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004f08:	e006      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f10:	e002      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004f12:	bf00      	nop
 8004f14:	e000      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004f16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d10a      	bne.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004f20:	4b37      	ldr	r3, [pc, #220]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f24:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f2e:	4a34      	ldr	r2, [pc, #208]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f30:	430b      	orrs	r3, r1
 8004f32:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f34:	e003      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f46:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004f4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004f4e:	2300      	movs	r3, #0
 8004f50:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004f54:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004f58:	460b      	mov	r3, r1
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	d056      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f68:	d033      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004f6a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f6e:	d82c      	bhi.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004f70:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f74:	d02f      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004f76:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f7a:	d826      	bhi.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004f7c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f80:	d02b      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004f82:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f86:	d820      	bhi.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004f88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f8c:	d012      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004f8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f92:	d81a      	bhi.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d022      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004f98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f9c:	d115      	bne.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fa2:	3308      	adds	r3, #8
 8004fa4:	2101      	movs	r1, #1
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f001 fa0e 	bl	80063c8 <RCCEx_PLL2_Config>
 8004fac:	4603      	mov	r3, r0
 8004fae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004fb2:	e015      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fb8:	3328      	adds	r3, #40	@ 0x28
 8004fba:	2101      	movs	r1, #1
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f001 fab5 	bl	800652c <RCCEx_PLL3_Config>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004fc8:	e00a      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fd0:	e006      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004fd2:	bf00      	nop
 8004fd4:	e004      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004fd6:	bf00      	nop
 8004fd8:	e002      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004fda:	bf00      	nop
 8004fdc:	e000      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004fde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fe0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10d      	bne.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004fe8:	4b05      	ldr	r3, [pc, #20]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fec:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ff4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ff6:	4a02      	ldr	r2, [pc, #8]	@ (8005000 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ff8:	430b      	orrs	r3, r1
 8004ffa:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ffc:	e006      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004ffe:	bf00      	nop
 8005000:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005004:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005008:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800500c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005014:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005018:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800501c:	2300      	movs	r3, #0
 800501e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005022:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005026:	460b      	mov	r3, r1
 8005028:	4313      	orrs	r3, r2
 800502a:	d055      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800502c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005030:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005034:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005038:	d033      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800503a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800503e:	d82c      	bhi.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005044:	d02f      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005046:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800504a:	d826      	bhi.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800504c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005050:	d02b      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005052:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005056:	d820      	bhi.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005058:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800505c:	d012      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800505e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005062:	d81a      	bhi.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005064:	2b00      	cmp	r3, #0
 8005066:	d022      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005068:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800506c:	d115      	bne.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800506e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005072:	3308      	adds	r3, #8
 8005074:	2101      	movs	r1, #1
 8005076:	4618      	mov	r0, r3
 8005078:	f001 f9a6 	bl	80063c8 <RCCEx_PLL2_Config>
 800507c:	4603      	mov	r3, r0
 800507e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005082:	e015      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005088:	3328      	adds	r3, #40	@ 0x28
 800508a:	2101      	movs	r1, #1
 800508c:	4618      	mov	r0, r3
 800508e:	f001 fa4d 	bl	800652c <RCCEx_PLL3_Config>
 8005092:	4603      	mov	r3, r0
 8005094:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005098:	e00a      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050a0:	e006      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80050a2:	bf00      	nop
 80050a4:	e004      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80050a6:	bf00      	nop
 80050a8:	e002      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80050aa:	bf00      	nop
 80050ac:	e000      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80050ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10b      	bne.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80050b8:	4ba3      	ldr	r3, [pc, #652]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050bc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80050c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80050c8:	4a9f      	ldr	r2, [pc, #636]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050ca:	430b      	orrs	r3, r1
 80050cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80050ce:	e003      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80050d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80050e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80050e8:	2300      	movs	r3, #0
 80050ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80050ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80050f2:	460b      	mov	r3, r1
 80050f4:	4313      	orrs	r3, r2
 80050f6:	d037      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80050f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005102:	d00e      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005104:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005108:	d816      	bhi.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800510a:	2b00      	cmp	r3, #0
 800510c:	d018      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800510e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005112:	d111      	bne.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005114:	4b8c      	ldr	r3, [pc, #560]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005118:	4a8b      	ldr	r2, [pc, #556]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800511a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800511e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005120:	e00f      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005126:	3308      	adds	r3, #8
 8005128:	2101      	movs	r1, #1
 800512a:	4618      	mov	r0, r3
 800512c:	f001 f94c 	bl	80063c8 <RCCEx_PLL2_Config>
 8005130:	4603      	mov	r3, r0
 8005132:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005136:	e004      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800513e:	e000      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005140:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005142:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10a      	bne.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800514a:	4b7f      	ldr	r3, [pc, #508]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800514c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800514e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005158:	4a7b      	ldr	r2, [pc, #492]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800515a:	430b      	orrs	r3, r1
 800515c:	6513      	str	r3, [r2, #80]	@ 0x50
 800515e:	e003      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005160:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005164:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800516c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005170:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005174:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005178:	2300      	movs	r3, #0
 800517a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800517e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005182:	460b      	mov	r3, r1
 8005184:	4313      	orrs	r3, r2
 8005186:	d039      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800518c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800518e:	2b03      	cmp	r3, #3
 8005190:	d81c      	bhi.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005192:	a201      	add	r2, pc, #4	@ (adr r2, 8005198 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005198:	080051d5 	.word	0x080051d5
 800519c:	080051a9 	.word	0x080051a9
 80051a0:	080051b7 	.word	0x080051b7
 80051a4:	080051d5 	.word	0x080051d5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051a8:	4b67      	ldr	r3, [pc, #412]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ac:	4a66      	ldr	r2, [pc, #408]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80051b4:	e00f      	b.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80051b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ba:	3308      	adds	r3, #8
 80051bc:	2102      	movs	r1, #2
 80051be:	4618      	mov	r0, r3
 80051c0:	f001 f902 	bl	80063c8 <RCCEx_PLL2_Config>
 80051c4:	4603      	mov	r3, r0
 80051c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80051ca:	e004      	b.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80051d2:	e000      	b.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80051d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10a      	bne.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80051de:	4b5a      	ldr	r3, [pc, #360]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051e2:	f023 0103 	bic.w	r1, r3, #3
 80051e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051ec:	4a56      	ldr	r2, [pc, #344]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051ee:	430b      	orrs	r3, r1
 80051f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80051f2:	e003      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005204:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005208:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800520c:	2300      	movs	r3, #0
 800520e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005212:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005216:	460b      	mov	r3, r1
 8005218:	4313      	orrs	r3, r2
 800521a:	f000 809f 	beq.w	800535c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800521e:	4b4b      	ldr	r3, [pc, #300]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a4a      	ldr	r2, [pc, #296]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005224:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005228:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800522a:	f7fd fd7b 	bl	8002d24 <HAL_GetTick>
 800522e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005232:	e00b      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005234:	f7fd fd76 	bl	8002d24 <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	2b64      	cmp	r3, #100	@ 0x64
 8005242:	d903      	bls.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800524a:	e005      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800524c:	4b3f      	ldr	r3, [pc, #252]	@ (800534c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005254:	2b00      	cmp	r3, #0
 8005256:	d0ed      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005258:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800525c:	2b00      	cmp	r3, #0
 800525e:	d179      	bne.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005260:	4b39      	ldr	r3, [pc, #228]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005262:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005268:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800526c:	4053      	eors	r3, r2
 800526e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005272:	2b00      	cmp	r3, #0
 8005274:	d015      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005276:	4b34      	ldr	r3, [pc, #208]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800527a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800527e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005282:	4b31      	ldr	r3, [pc, #196]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005286:	4a30      	ldr	r2, [pc, #192]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005288:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800528c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800528e:	4b2e      	ldr	r3, [pc, #184]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005292:	4a2d      	ldr	r2, [pc, #180]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005294:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005298:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800529a:	4a2b      	ldr	r2, [pc, #172]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800529c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80052a0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80052a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80052aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052ae:	d118      	bne.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b0:	f7fd fd38 	bl	8002d24 <HAL_GetTick>
 80052b4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052b8:	e00d      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ba:	f7fd fd33 	bl	8002d24 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80052c4:	1ad2      	subs	r2, r2, r3
 80052c6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d903      	bls.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80052d4:	e005      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052d6:	4b1c      	ldr	r3, [pc, #112]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d0eb      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80052e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d129      	bne.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80052f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052fa:	d10e      	bne.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80052fc:	4b12      	ldr	r3, [pc, #72]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005308:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800530c:	091a      	lsrs	r2, r3, #4
 800530e:	4b10      	ldr	r3, [pc, #64]	@ (8005350 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005310:	4013      	ands	r3, r2
 8005312:	4a0d      	ldr	r2, [pc, #52]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005314:	430b      	orrs	r3, r1
 8005316:	6113      	str	r3, [r2, #16]
 8005318:	e005      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800531a:	4b0b      	ldr	r3, [pc, #44]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	4a0a      	ldr	r2, [pc, #40]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005320:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005324:	6113      	str	r3, [r2, #16]
 8005326:	4b08      	ldr	r3, [pc, #32]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005328:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800532a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800532e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005332:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005336:	4a04      	ldr	r2, [pc, #16]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005338:	430b      	orrs	r3, r1
 800533a:	6713      	str	r3, [r2, #112]	@ 0x70
 800533c:	e00e      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800533e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005342:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005346:	e009      	b.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005348:	58024400 	.word	0x58024400
 800534c:	58024800 	.word	0x58024800
 8005350:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005354:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005358:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800535c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005364:	f002 0301 	and.w	r3, r2, #1
 8005368:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800536c:	2300      	movs	r3, #0
 800536e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005372:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005376:	460b      	mov	r3, r1
 8005378:	4313      	orrs	r3, r2
 800537a:	f000 8089 	beq.w	8005490 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800537e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005382:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005384:	2b28      	cmp	r3, #40	@ 0x28
 8005386:	d86b      	bhi.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005388:	a201      	add	r2, pc, #4	@ (adr r2, 8005390 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800538a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538e:	bf00      	nop
 8005390:	08005469 	.word	0x08005469
 8005394:	08005461 	.word	0x08005461
 8005398:	08005461 	.word	0x08005461
 800539c:	08005461 	.word	0x08005461
 80053a0:	08005461 	.word	0x08005461
 80053a4:	08005461 	.word	0x08005461
 80053a8:	08005461 	.word	0x08005461
 80053ac:	08005461 	.word	0x08005461
 80053b0:	08005435 	.word	0x08005435
 80053b4:	08005461 	.word	0x08005461
 80053b8:	08005461 	.word	0x08005461
 80053bc:	08005461 	.word	0x08005461
 80053c0:	08005461 	.word	0x08005461
 80053c4:	08005461 	.word	0x08005461
 80053c8:	08005461 	.word	0x08005461
 80053cc:	08005461 	.word	0x08005461
 80053d0:	0800544b 	.word	0x0800544b
 80053d4:	08005461 	.word	0x08005461
 80053d8:	08005461 	.word	0x08005461
 80053dc:	08005461 	.word	0x08005461
 80053e0:	08005461 	.word	0x08005461
 80053e4:	08005461 	.word	0x08005461
 80053e8:	08005461 	.word	0x08005461
 80053ec:	08005461 	.word	0x08005461
 80053f0:	08005469 	.word	0x08005469
 80053f4:	08005461 	.word	0x08005461
 80053f8:	08005461 	.word	0x08005461
 80053fc:	08005461 	.word	0x08005461
 8005400:	08005461 	.word	0x08005461
 8005404:	08005461 	.word	0x08005461
 8005408:	08005461 	.word	0x08005461
 800540c:	08005461 	.word	0x08005461
 8005410:	08005469 	.word	0x08005469
 8005414:	08005461 	.word	0x08005461
 8005418:	08005461 	.word	0x08005461
 800541c:	08005461 	.word	0x08005461
 8005420:	08005461 	.word	0x08005461
 8005424:	08005461 	.word	0x08005461
 8005428:	08005461 	.word	0x08005461
 800542c:	08005461 	.word	0x08005461
 8005430:	08005469 	.word	0x08005469
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005438:	3308      	adds	r3, #8
 800543a:	2101      	movs	r1, #1
 800543c:	4618      	mov	r0, r3
 800543e:	f000 ffc3 	bl	80063c8 <RCCEx_PLL2_Config>
 8005442:	4603      	mov	r3, r0
 8005444:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005448:	e00f      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800544a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800544e:	3328      	adds	r3, #40	@ 0x28
 8005450:	2101      	movs	r1, #1
 8005452:	4618      	mov	r0, r3
 8005454:	f001 f86a 	bl	800652c <RCCEx_PLL3_Config>
 8005458:	4603      	mov	r3, r0
 800545a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800545e:	e004      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005466:	e000      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005468:	bf00      	nop
    }

    if (ret == HAL_OK)
 800546a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10a      	bne.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005472:	4bbf      	ldr	r3, [pc, #764]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005476:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800547a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800547e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005480:	4abb      	ldr	r2, [pc, #748]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005482:	430b      	orrs	r3, r1
 8005484:	6553      	str	r3, [r2, #84]	@ 0x54
 8005486:	e003      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005488:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800548c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005498:	f002 0302 	and.w	r3, r2, #2
 800549c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80054a0:	2300      	movs	r3, #0
 80054a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80054a6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80054aa:	460b      	mov	r3, r1
 80054ac:	4313      	orrs	r3, r2
 80054ae:	d041      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80054b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054b6:	2b05      	cmp	r3, #5
 80054b8:	d824      	bhi.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80054ba:	a201      	add	r2, pc, #4	@ (adr r2, 80054c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80054bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c0:	0800550d 	.word	0x0800550d
 80054c4:	080054d9 	.word	0x080054d9
 80054c8:	080054ef 	.word	0x080054ef
 80054cc:	0800550d 	.word	0x0800550d
 80054d0:	0800550d 	.word	0x0800550d
 80054d4:	0800550d 	.word	0x0800550d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054dc:	3308      	adds	r3, #8
 80054de:	2101      	movs	r1, #1
 80054e0:	4618      	mov	r0, r3
 80054e2:	f000 ff71 	bl	80063c8 <RCCEx_PLL2_Config>
 80054e6:	4603      	mov	r3, r0
 80054e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80054ec:	e00f      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054f2:	3328      	adds	r3, #40	@ 0x28
 80054f4:	2101      	movs	r1, #1
 80054f6:	4618      	mov	r0, r3
 80054f8:	f001 f818 	bl	800652c <RCCEx_PLL3_Config>
 80054fc:	4603      	mov	r3, r0
 80054fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005502:	e004      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800550a:	e000      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800550c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800550e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005512:	2b00      	cmp	r3, #0
 8005514:	d10a      	bne.n	800552c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005516:	4b96      	ldr	r3, [pc, #600]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800551a:	f023 0107 	bic.w	r1, r3, #7
 800551e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005522:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005524:	4a92      	ldr	r2, [pc, #584]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005526:	430b      	orrs	r3, r1
 8005528:	6553      	str	r3, [r2, #84]	@ 0x54
 800552a:	e003      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800552c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005530:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553c:	f002 0304 	and.w	r3, r2, #4
 8005540:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005544:	2300      	movs	r3, #0
 8005546:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800554a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800554e:	460b      	mov	r3, r1
 8005550:	4313      	orrs	r3, r2
 8005552:	d044      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005558:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800555c:	2b05      	cmp	r3, #5
 800555e:	d825      	bhi.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005560:	a201      	add	r2, pc, #4	@ (adr r2, 8005568 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005566:	bf00      	nop
 8005568:	080055b5 	.word	0x080055b5
 800556c:	08005581 	.word	0x08005581
 8005570:	08005597 	.word	0x08005597
 8005574:	080055b5 	.word	0x080055b5
 8005578:	080055b5 	.word	0x080055b5
 800557c:	080055b5 	.word	0x080055b5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005584:	3308      	adds	r3, #8
 8005586:	2101      	movs	r1, #1
 8005588:	4618      	mov	r0, r3
 800558a:	f000 ff1d 	bl	80063c8 <RCCEx_PLL2_Config>
 800558e:	4603      	mov	r3, r0
 8005590:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005594:	e00f      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800559a:	3328      	adds	r3, #40	@ 0x28
 800559c:	2101      	movs	r1, #1
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 ffc4 	bl	800652c <RCCEx_PLL3_Config>
 80055a4:	4603      	mov	r3, r0
 80055a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80055aa:	e004      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055b2:	e000      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80055b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10b      	bne.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055be:	4b6c      	ldr	r3, [pc, #432]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055c2:	f023 0107 	bic.w	r1, r3, #7
 80055c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055ce:	4a68      	ldr	r2, [pc, #416]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055d0:	430b      	orrs	r3, r1
 80055d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80055d4:	e003      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80055de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e6:	f002 0320 	and.w	r3, r2, #32
 80055ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80055ee:	2300      	movs	r3, #0
 80055f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80055f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80055f8:	460b      	mov	r3, r1
 80055fa:	4313      	orrs	r3, r2
 80055fc:	d055      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80055fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005606:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800560a:	d033      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800560c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005610:	d82c      	bhi.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005616:	d02f      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005618:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800561c:	d826      	bhi.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800561e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005622:	d02b      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005624:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005628:	d820      	bhi.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800562a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800562e:	d012      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005630:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005634:	d81a      	bhi.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005636:	2b00      	cmp	r3, #0
 8005638:	d022      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800563a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800563e:	d115      	bne.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005644:	3308      	adds	r3, #8
 8005646:	2100      	movs	r1, #0
 8005648:	4618      	mov	r0, r3
 800564a:	f000 febd 	bl	80063c8 <RCCEx_PLL2_Config>
 800564e:	4603      	mov	r3, r0
 8005650:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005654:	e015      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800565a:	3328      	adds	r3, #40	@ 0x28
 800565c:	2102      	movs	r1, #2
 800565e:	4618      	mov	r0, r3
 8005660:	f000 ff64 	bl	800652c <RCCEx_PLL3_Config>
 8005664:	4603      	mov	r3, r0
 8005666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800566a:	e00a      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005672:	e006      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005674:	bf00      	nop
 8005676:	e004      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005678:	bf00      	nop
 800567a:	e002      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800567c:	bf00      	nop
 800567e:	e000      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005680:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005682:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10b      	bne.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800568a:	4b39      	ldr	r3, [pc, #228]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800568c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800568e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800569a:	4a35      	ldr	r2, [pc, #212]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800569c:	430b      	orrs	r3, r1
 800569e:	6553      	str	r3, [r2, #84]	@ 0x54
 80056a0:	e003      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80056aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80056b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80056ba:	2300      	movs	r3, #0
 80056bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80056c0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80056c4:	460b      	mov	r3, r1
 80056c6:	4313      	orrs	r3, r2
 80056c8:	d058      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80056ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056d2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80056d6:	d033      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80056d8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80056dc:	d82c      	bhi.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80056de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056e2:	d02f      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80056e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056e8:	d826      	bhi.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80056ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056ee:	d02b      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80056f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056f4:	d820      	bhi.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80056f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056fa:	d012      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80056fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005700:	d81a      	bhi.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005702:	2b00      	cmp	r3, #0
 8005704:	d022      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005706:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800570a:	d115      	bne.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800570c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005710:	3308      	adds	r3, #8
 8005712:	2100      	movs	r1, #0
 8005714:	4618      	mov	r0, r3
 8005716:	f000 fe57 	bl	80063c8 <RCCEx_PLL2_Config>
 800571a:	4603      	mov	r3, r0
 800571c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005720:	e015      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005726:	3328      	adds	r3, #40	@ 0x28
 8005728:	2102      	movs	r1, #2
 800572a:	4618      	mov	r0, r3
 800572c:	f000 fefe 	bl	800652c <RCCEx_PLL3_Config>
 8005730:	4603      	mov	r3, r0
 8005732:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005736:	e00a      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800573e:	e006      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005740:	bf00      	nop
 8005742:	e004      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005744:	bf00      	nop
 8005746:	e002      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005748:	bf00      	nop
 800574a:	e000      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800574c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800574e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10e      	bne.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005756:	4b06      	ldr	r3, [pc, #24]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800575a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800575e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005762:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005766:	4a02      	ldr	r2, [pc, #8]	@ (8005770 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005768:	430b      	orrs	r3, r1
 800576a:	6593      	str	r3, [r2, #88]	@ 0x58
 800576c:	e006      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800576e:	bf00      	nop
 8005770:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005774:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005778:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800577c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005784:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005788:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800578c:	2300      	movs	r3, #0
 800578e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005792:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005796:	460b      	mov	r3, r1
 8005798:	4313      	orrs	r3, r2
 800579a:	d055      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800579c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80057a4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80057a8:	d033      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80057aa:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80057ae:	d82c      	bhi.n	800580a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80057b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057b4:	d02f      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80057b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057ba:	d826      	bhi.n	800580a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80057bc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80057c0:	d02b      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80057c2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80057c6:	d820      	bhi.n	800580a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80057c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057cc:	d012      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80057ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057d2:	d81a      	bhi.n	800580a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d022      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80057d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057dc:	d115      	bne.n	800580a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057e2:	3308      	adds	r3, #8
 80057e4:	2100      	movs	r1, #0
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 fdee 	bl	80063c8 <RCCEx_PLL2_Config>
 80057ec:	4603      	mov	r3, r0
 80057ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80057f2:	e015      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80057f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057f8:	3328      	adds	r3, #40	@ 0x28
 80057fa:	2102      	movs	r1, #2
 80057fc:	4618      	mov	r0, r3
 80057fe:	f000 fe95 	bl	800652c <RCCEx_PLL3_Config>
 8005802:	4603      	mov	r3, r0
 8005804:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005808:	e00a      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005810:	e006      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005812:	bf00      	nop
 8005814:	e004      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005816:	bf00      	nop
 8005818:	e002      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800581a:	bf00      	nop
 800581c:	e000      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800581e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005820:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10b      	bne.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005828:	4ba1      	ldr	r3, [pc, #644]	@ (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800582a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800582c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005834:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005838:	4a9d      	ldr	r2, [pc, #628]	@ (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800583a:	430b      	orrs	r3, r1
 800583c:	6593      	str	r3, [r2, #88]	@ 0x58
 800583e:	e003      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005840:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005844:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800584c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005850:	f002 0308 	and.w	r3, r2, #8
 8005854:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005858:	2300      	movs	r3, #0
 800585a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800585e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005862:	460b      	mov	r3, r1
 8005864:	4313      	orrs	r3, r2
 8005866:	d01e      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800586c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005870:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005874:	d10c      	bne.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800587a:	3328      	adds	r3, #40	@ 0x28
 800587c:	2102      	movs	r1, #2
 800587e:	4618      	mov	r0, r3
 8005880:	f000 fe54 	bl	800652c <RCCEx_PLL3_Config>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d002      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005890:	4b87      	ldr	r3, [pc, #540]	@ (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005894:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800589c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058a0:	4a83      	ldr	r2, [pc, #524]	@ (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058a2:	430b      	orrs	r3, r1
 80058a4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80058a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ae:	f002 0310 	and.w	r3, r2, #16
 80058b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80058b6:	2300      	movs	r3, #0
 80058b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80058bc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80058c0:	460b      	mov	r3, r1
 80058c2:	4313      	orrs	r3, r2
 80058c4:	d01e      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80058c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80058ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058d2:	d10c      	bne.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80058d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058d8:	3328      	adds	r3, #40	@ 0x28
 80058da:	2102      	movs	r1, #2
 80058dc:	4618      	mov	r0, r3
 80058de:	f000 fe25 	bl	800652c <RCCEx_PLL3_Config>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d002      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80058ee:	4b70      	ldr	r3, [pc, #448]	@ (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80058f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80058fe:	4a6c      	ldr	r2, [pc, #432]	@ (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005900:	430b      	orrs	r3, r1
 8005902:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005904:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005910:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005914:	2300      	movs	r3, #0
 8005916:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800591a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800591e:	460b      	mov	r3, r1
 8005920:	4313      	orrs	r3, r2
 8005922:	d03e      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005928:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800592c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005930:	d022      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005932:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005936:	d81b      	bhi.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005938:	2b00      	cmp	r3, #0
 800593a:	d003      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800593c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005940:	d00b      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005942:	e015      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005948:	3308      	adds	r3, #8
 800594a:	2100      	movs	r1, #0
 800594c:	4618      	mov	r0, r3
 800594e:	f000 fd3b 	bl	80063c8 <RCCEx_PLL2_Config>
 8005952:	4603      	mov	r3, r0
 8005954:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005958:	e00f      	b.n	800597a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800595a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800595e:	3328      	adds	r3, #40	@ 0x28
 8005960:	2102      	movs	r1, #2
 8005962:	4618      	mov	r0, r3
 8005964:	f000 fde2 	bl	800652c <RCCEx_PLL3_Config>
 8005968:	4603      	mov	r3, r0
 800596a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800596e:	e004      	b.n	800597a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005976:	e000      	b.n	800597a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005978:	bf00      	nop
    }

    if (ret == HAL_OK)
 800597a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10b      	bne.n	800599a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005982:	4b4b      	ldr	r3, [pc, #300]	@ (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005986:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800598a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800598e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005992:	4a47      	ldr	r2, [pc, #284]	@ (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005994:	430b      	orrs	r3, r1
 8005996:	6593      	str	r3, [r2, #88]	@ 0x58
 8005998:	e003      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800599a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800599e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80059a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059aa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80059ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 80059b0:	2300      	movs	r3, #0
 80059b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80059b4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80059b8:	460b      	mov	r3, r1
 80059ba:	4313      	orrs	r3, r2
 80059bc:	d03b      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80059be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80059ca:	d01f      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80059cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80059d0:	d818      	bhi.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80059d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059d6:	d003      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80059d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059dc:	d007      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80059de:	e011      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059e0:	4b33      	ldr	r3, [pc, #204]	@ (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e4:	4a32      	ldr	r2, [pc, #200]	@ (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80059ec:	e00f      	b.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059f2:	3328      	adds	r3, #40	@ 0x28
 80059f4:	2101      	movs	r1, #1
 80059f6:	4618      	mov	r0, r3
 80059f8:	f000 fd98 	bl	800652c <RCCEx_PLL3_Config>
 80059fc:	4603      	mov	r3, r0
 80059fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005a02:	e004      	b.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a0a:	e000      	b.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005a0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10b      	bne.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a16:	4b26      	ldr	r3, [pc, #152]	@ (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a1a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a26:	4a22      	ldr	r2, [pc, #136]	@ (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a28:	430b      	orrs	r3, r1
 8005a2a:	6553      	str	r3, [r2, #84]	@ 0x54
 8005a2c:	e003      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005a42:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a44:	2300      	movs	r3, #0
 8005a46:	677b      	str	r3, [r7, #116]	@ 0x74
 8005a48:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	d034      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d003      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005a5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a60:	d007      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005a62:	e011      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a64:	4b12      	ldr	r3, [pc, #72]	@ (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a68:	4a11      	ldr	r2, [pc, #68]	@ (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005a70:	e00e      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a76:	3308      	adds	r3, #8
 8005a78:	2102      	movs	r1, #2
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 fca4 	bl	80063c8 <RCCEx_PLL2_Config>
 8005a80:	4603      	mov	r3, r0
 8005a82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005a86:	e003      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d10d      	bne.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005a98:	4b05      	ldr	r3, [pc, #20]	@ (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a9c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aa6:	4a02      	ldr	r2, [pc, #8]	@ (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005aa8:	430b      	orrs	r3, r1
 8005aaa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005aac:	e006      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005aae:	bf00      	nop
 8005ab0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ab4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ab8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005ac8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005aca:	2300      	movs	r3, #0
 8005acc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ace:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	d00c      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005adc:	3328      	adds	r3, #40	@ 0x28
 8005ade:	2102      	movs	r1, #2
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 fd23 	bl	800652c <RCCEx_PLL3_Config>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005afe:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b00:	2300      	movs	r3, #0
 8005b02:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b04:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005b08:	460b      	mov	r3, r1
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	d038      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b1a:	d018      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005b1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b20:	d811      	bhi.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005b22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b26:	d014      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005b28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b2c:	d80b      	bhi.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d011      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005b32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b36:	d106      	bne.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b38:	4bc3      	ldr	r3, [pc, #780]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b3c:	4ac2      	ldr	r2, [pc, #776]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005b44:	e008      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b4c:	e004      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005b4e:	bf00      	nop
 8005b50:	e002      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005b52:	bf00      	nop
 8005b54:	e000      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005b56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10b      	bne.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b60:	4bb9      	ldr	r3, [pc, #740]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b64:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b70:	4ab5      	ldr	r2, [pc, #724]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b72:	430b      	orrs	r3, r1
 8005b74:	6553      	str	r3, [r2, #84]	@ 0x54
 8005b76:	e003      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b88:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005b8c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b8e:	2300      	movs	r3, #0
 8005b90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b92:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005b96:	460b      	mov	r3, r1
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	d009      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005b9c:	4baa      	ldr	r3, [pc, #680]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ba0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005baa:	4aa7      	ldr	r2, [pc, #668]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bac:	430b      	orrs	r3, r1
 8005bae:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005bbc:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	657b      	str	r3, [r7, #84]	@ 0x54
 8005bc2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	d00a      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005bcc:	4b9e      	ldr	r3, [pc, #632]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005bdc:	4a9a      	ldr	r2, [pc, #616]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005bde:	430b      	orrs	r3, r1
 8005be0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bea:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005bee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bf4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	d009      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005bfe:	4b92      	ldr	r3, [pc, #584]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c02:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c0c:	4a8e      	ldr	r2, [pc, #568]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c0e:	430b      	orrs	r3, r1
 8005c10:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005c1e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c20:	2300      	movs	r3, #0
 8005c22:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c24:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005c28:	460b      	mov	r3, r1
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	d00e      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c2e:	4b86      	ldr	r3, [pc, #536]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	4a85      	ldr	r2, [pc, #532]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c34:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005c38:	6113      	str	r3, [r2, #16]
 8005c3a:	4b83      	ldr	r3, [pc, #524]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c3c:	6919      	ldr	r1, [r3, #16]
 8005c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c42:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005c46:	4a80      	ldr	r2, [pc, #512]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c48:	430b      	orrs	r3, r1
 8005c4a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c54:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005c58:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c5e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005c62:	460b      	mov	r3, r1
 8005c64:	4313      	orrs	r3, r2
 8005c66:	d009      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005c68:	4b77      	ldr	r3, [pc, #476]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c6c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c76:	4a74      	ldr	r2, [pc, #464]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c78:	430b      	orrs	r3, r1
 8005c7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c84:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005c88:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c8e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005c92:	460b      	mov	r3, r1
 8005c94:	4313      	orrs	r3, r2
 8005c96:	d00a      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005c98:	4b6b      	ldr	r3, [pc, #428]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c9c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ca4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ca8:	4a67      	ldr	r2, [pc, #412]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005caa:	430b      	orrs	r3, r1
 8005cac:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb6:	2100      	movs	r1, #0
 8005cb8:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cc0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	d011      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cce:	3308      	adds	r3, #8
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 fb78 	bl	80063c8 <RCCEx_PLL2_Config>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005cde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d003      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf6:	2100      	movs	r1, #0
 8005cf8:	6239      	str	r1, [r7, #32]
 8005cfa:	f003 0302 	and.w	r3, r3, #2
 8005cfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d00:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005d04:	460b      	mov	r3, r1
 8005d06:	4313      	orrs	r3, r2
 8005d08:	d011      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d0e:	3308      	adds	r3, #8
 8005d10:	2101      	movs	r1, #1
 8005d12:	4618      	mov	r0, r3
 8005d14:	f000 fb58 	bl	80063c8 <RCCEx_PLL2_Config>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d003      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d36:	2100      	movs	r1, #0
 8005d38:	61b9      	str	r1, [r7, #24]
 8005d3a:	f003 0304 	and.w	r3, r3, #4
 8005d3e:	61fb      	str	r3, [r7, #28]
 8005d40:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005d44:	460b      	mov	r3, r1
 8005d46:	4313      	orrs	r3, r2
 8005d48:	d011      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d4e:	3308      	adds	r3, #8
 8005d50:	2102      	movs	r1, #2
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 fb38 	bl	80063c8 <RCCEx_PLL2_Config>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005d5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d003      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d76:	2100      	movs	r1, #0
 8005d78:	6139      	str	r1, [r7, #16]
 8005d7a:	f003 0308 	and.w	r3, r3, #8
 8005d7e:	617b      	str	r3, [r7, #20]
 8005d80:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005d84:	460b      	mov	r3, r1
 8005d86:	4313      	orrs	r3, r2
 8005d88:	d011      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d8e:	3328      	adds	r3, #40	@ 0x28
 8005d90:	2100      	movs	r1, #0
 8005d92:	4618      	mov	r0, r3
 8005d94:	f000 fbca 	bl	800652c <RCCEx_PLL3_Config>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005da6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005daa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db6:	2100      	movs	r1, #0
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	f003 0310 	and.w	r3, r3, #16
 8005dbe:	60fb      	str	r3, [r7, #12]
 8005dc0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	d011      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dce:	3328      	adds	r3, #40	@ 0x28
 8005dd0:	2101      	movs	r1, #1
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 fbaa 	bl	800652c <RCCEx_PLL3_Config>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005dde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d003      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005de6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df6:	2100      	movs	r1, #0
 8005df8:	6039      	str	r1, [r7, #0]
 8005dfa:	f003 0320 	and.w	r3, r3, #32
 8005dfe:	607b      	str	r3, [r7, #4]
 8005e00:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005e04:	460b      	mov	r3, r1
 8005e06:	4313      	orrs	r3, r2
 8005e08:	d011      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e0e:	3328      	adds	r3, #40	@ 0x28
 8005e10:	2102      	movs	r1, #2
 8005e12:	4618      	mov	r0, r3
 8005e14:	f000 fb8a 	bl	800652c <RCCEx_PLL3_Config>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005e1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d003      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005e2e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d101      	bne.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005e36:	2300      	movs	r3, #0
 8005e38:	e000      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005e42:	46bd      	mov	sp, r7
 8005e44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e48:	58024400 	.word	0x58024400

08005e4c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005e50:	f7fe fd96 	bl	8004980 <HAL_RCC_GetHCLKFreq>
 8005e54:	4602      	mov	r2, r0
 8005e56:	4b06      	ldr	r3, [pc, #24]	@ (8005e70 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	091b      	lsrs	r3, r3, #4
 8005e5c:	f003 0307 	and.w	r3, r3, #7
 8005e60:	4904      	ldr	r1, [pc, #16]	@ (8005e74 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005e62:	5ccb      	ldrb	r3, [r1, r3]
 8005e64:	f003 031f 	and.w	r3, r3, #31
 8005e68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	58024400 	.word	0x58024400
 8005e74:	0800b0f4 	.word	0x0800b0f4

08005e78 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b089      	sub	sp, #36	@ 0x24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e80:	4ba1      	ldr	r3, [pc, #644]	@ (8006108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e84:	f003 0303 	and.w	r3, r3, #3
 8005e88:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005e8a:	4b9f      	ldr	r3, [pc, #636]	@ (8006108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e8e:	0b1b      	lsrs	r3, r3, #12
 8005e90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e94:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005e96:	4b9c      	ldr	r3, [pc, #624]	@ (8006108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e9a:	091b      	lsrs	r3, r3, #4
 8005e9c:	f003 0301 	and.w	r3, r3, #1
 8005ea0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005ea2:	4b99      	ldr	r3, [pc, #612]	@ (8006108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ea6:	08db      	lsrs	r3, r3, #3
 8005ea8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	fb02 f303 	mul.w	r3, r2, r3
 8005eb2:	ee07 3a90 	vmov	s15, r3
 8005eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f000 8111 	beq.w	80060e8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	f000 8083 	beq.w	8005fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	f200 80a1 	bhi.w	8006018 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d003      	beq.n	8005ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d056      	beq.n	8005f90 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005ee2:	e099      	b.n	8006018 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ee4:	4b88      	ldr	r3, [pc, #544]	@ (8006108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0320 	and.w	r3, r3, #32
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d02d      	beq.n	8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ef0:	4b85      	ldr	r3, [pc, #532]	@ (8006108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	08db      	lsrs	r3, r3, #3
 8005ef6:	f003 0303 	and.w	r3, r3, #3
 8005efa:	4a84      	ldr	r2, [pc, #528]	@ (800610c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005efc:	fa22 f303 	lsr.w	r3, r2, r3
 8005f00:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	ee07 3a90 	vmov	s15, r3
 8005f08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	ee07 3a90 	vmov	s15, r3
 8005f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f1a:	4b7b      	ldr	r3, [pc, #492]	@ (8006108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f22:	ee07 3a90 	vmov	s15, r3
 8005f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f2e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006110 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f46:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005f4a:	e087      	b.n	800605c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	ee07 3a90 	vmov	s15, r3
 8005f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f56:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006114 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f5e:	4b6a      	ldr	r3, [pc, #424]	@ (8006108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f66:	ee07 3a90 	vmov	s15, r3
 8005f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f72:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006110 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f8e:	e065      	b.n	800605c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	ee07 3a90 	vmov	s15, r3
 8005f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f9a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006118 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fa2:	4b59      	ldr	r3, [pc, #356]	@ (8006108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005faa:	ee07 3a90 	vmov	s15, r3
 8005fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fb6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006110 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fd2:	e043      	b.n	800605c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	ee07 3a90 	vmov	s15, r3
 8005fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fde:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800611c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fe6:	4b48      	ldr	r3, [pc, #288]	@ (8006108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fee:	ee07 3a90 	vmov	s15, r3
 8005ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ff6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ffa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006110 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006006:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800600a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800600e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006012:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006016:	e021      	b.n	800605c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	ee07 3a90 	vmov	s15, r3
 800601e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006022:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006118 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800602a:	4b37      	ldr	r3, [pc, #220]	@ (8006108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800602c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800602e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006032:	ee07 3a90 	vmov	s15, r3
 8006036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800603a:	ed97 6a03 	vldr	s12, [r7, #12]
 800603e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006110 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800604a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800604e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006056:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800605a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800605c:	4b2a      	ldr	r3, [pc, #168]	@ (8006108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800605e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006060:	0a5b      	lsrs	r3, r3, #9
 8006062:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006066:	ee07 3a90 	vmov	s15, r3
 800606a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800606e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006072:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006076:	edd7 6a07 	vldr	s13, [r7, #28]
 800607a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800607e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006082:	ee17 2a90 	vmov	r2, s15
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800608a:	4b1f      	ldr	r3, [pc, #124]	@ (8006108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800608c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800608e:	0c1b      	lsrs	r3, r3, #16
 8006090:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006094:	ee07 3a90 	vmov	s15, r3
 8006098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800609c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80060a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060b0:	ee17 2a90 	vmov	r2, s15
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80060b8:	4b13      	ldr	r3, [pc, #76]	@ (8006108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060bc:	0e1b      	lsrs	r3, r3, #24
 80060be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060c2:	ee07 3a90 	vmov	s15, r3
 80060c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80060d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060de:	ee17 2a90 	vmov	r2, s15
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80060e6:	e008      	b.n	80060fa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	609a      	str	r2, [r3, #8]
}
 80060fa:	bf00      	nop
 80060fc:	3724      	adds	r7, #36	@ 0x24
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	58024400 	.word	0x58024400
 800610c:	03d09000 	.word	0x03d09000
 8006110:	46000000 	.word	0x46000000
 8006114:	4c742400 	.word	0x4c742400
 8006118:	4a742400 	.word	0x4a742400
 800611c:	4bbebc20 	.word	0x4bbebc20

08006120 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006120:	b480      	push	{r7}
 8006122:	b089      	sub	sp, #36	@ 0x24
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006128:	4ba1      	ldr	r3, [pc, #644]	@ (80063b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800612a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800612c:	f003 0303 	and.w	r3, r3, #3
 8006130:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006132:	4b9f      	ldr	r3, [pc, #636]	@ (80063b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006136:	0d1b      	lsrs	r3, r3, #20
 8006138:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800613c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800613e:	4b9c      	ldr	r3, [pc, #624]	@ (80063b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006142:	0a1b      	lsrs	r3, r3, #8
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800614a:	4b99      	ldr	r3, [pc, #612]	@ (80063b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800614c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800614e:	08db      	lsrs	r3, r3, #3
 8006150:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	fb02 f303 	mul.w	r3, r2, r3
 800615a:	ee07 3a90 	vmov	s15, r3
 800615e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006162:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 8111 	beq.w	8006390 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	2b02      	cmp	r3, #2
 8006172:	f000 8083 	beq.w	800627c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	2b02      	cmp	r3, #2
 800617a:	f200 80a1 	bhi.w	80062c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d003      	beq.n	800618c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	2b01      	cmp	r3, #1
 8006188:	d056      	beq.n	8006238 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800618a:	e099      	b.n	80062c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800618c:	4b88      	ldr	r3, [pc, #544]	@ (80063b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0320 	and.w	r3, r3, #32
 8006194:	2b00      	cmp	r3, #0
 8006196:	d02d      	beq.n	80061f4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006198:	4b85      	ldr	r3, [pc, #532]	@ (80063b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	08db      	lsrs	r3, r3, #3
 800619e:	f003 0303 	and.w	r3, r3, #3
 80061a2:	4a84      	ldr	r2, [pc, #528]	@ (80063b4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80061a4:	fa22 f303 	lsr.w	r3, r2, r3
 80061a8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	ee07 3a90 	vmov	s15, r3
 80061b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	ee07 3a90 	vmov	s15, r3
 80061ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061c2:	4b7b      	ldr	r3, [pc, #492]	@ (80063b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ca:	ee07 3a90 	vmov	s15, r3
 80061ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80061d6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80063b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80061da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80061f2:	e087      	b.n	8006304 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	ee07 3a90 	vmov	s15, r3
 80061fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061fe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80063bc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006206:	4b6a      	ldr	r3, [pc, #424]	@ (80063b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800620a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800620e:	ee07 3a90 	vmov	s15, r3
 8006212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006216:	ed97 6a03 	vldr	s12, [r7, #12]
 800621a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80063b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800621e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006226:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800622a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800622e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006232:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006236:	e065      	b.n	8006304 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	ee07 3a90 	vmov	s15, r3
 800623e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006242:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80063c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800624a:	4b59      	ldr	r3, [pc, #356]	@ (80063b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800624c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800624e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006252:	ee07 3a90 	vmov	s15, r3
 8006256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800625a:	ed97 6a03 	vldr	s12, [r7, #12]
 800625e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80063b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800626a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800626e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006276:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800627a:	e043      	b.n	8006304 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	ee07 3a90 	vmov	s15, r3
 8006282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006286:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80063c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800628a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800628e:	4b48      	ldr	r3, [pc, #288]	@ (80063b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006296:	ee07 3a90 	vmov	s15, r3
 800629a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800629e:	ed97 6a03 	vldr	s12, [r7, #12]
 80062a2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80063b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80062a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062be:	e021      	b.n	8006304 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	ee07 3a90 	vmov	s15, r3
 80062c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ca:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80063c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80062ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062d2:	4b37      	ldr	r3, [pc, #220]	@ (80063b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062da:	ee07 3a90 	vmov	s15, r3
 80062de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80062e6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80063b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80062ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006302:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006304:	4b2a      	ldr	r3, [pc, #168]	@ (80063b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006308:	0a5b      	lsrs	r3, r3, #9
 800630a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800630e:	ee07 3a90 	vmov	s15, r3
 8006312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006316:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800631a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800631e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006326:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800632a:	ee17 2a90 	vmov	r2, s15
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006332:	4b1f      	ldr	r3, [pc, #124]	@ (80063b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006336:	0c1b      	lsrs	r3, r3, #16
 8006338:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800633c:	ee07 3a90 	vmov	s15, r3
 8006340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006344:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006348:	ee37 7a87 	vadd.f32	s14, s15, s14
 800634c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006350:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006354:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006358:	ee17 2a90 	vmov	r2, s15
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006360:	4b13      	ldr	r3, [pc, #76]	@ (80063b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006364:	0e1b      	lsrs	r3, r3, #24
 8006366:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800636a:	ee07 3a90 	vmov	s15, r3
 800636e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006372:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006376:	ee37 7a87 	vadd.f32	s14, s15, s14
 800637a:	edd7 6a07 	vldr	s13, [r7, #28]
 800637e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006382:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006386:	ee17 2a90 	vmov	r2, s15
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800638e:	e008      	b.n	80063a2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	609a      	str	r2, [r3, #8]
}
 80063a2:	bf00      	nop
 80063a4:	3724      	adds	r7, #36	@ 0x24
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	58024400 	.word	0x58024400
 80063b4:	03d09000 	.word	0x03d09000
 80063b8:	46000000 	.word	0x46000000
 80063bc:	4c742400 	.word	0x4c742400
 80063c0:	4a742400 	.word	0x4a742400
 80063c4:	4bbebc20 	.word	0x4bbebc20

080063c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063d2:	2300      	movs	r3, #0
 80063d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80063d6:	4b53      	ldr	r3, [pc, #332]	@ (8006524 <RCCEx_PLL2_Config+0x15c>)
 80063d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063da:	f003 0303 	and.w	r3, r3, #3
 80063de:	2b03      	cmp	r3, #3
 80063e0:	d101      	bne.n	80063e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e099      	b.n	800651a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80063e6:	4b4f      	ldr	r3, [pc, #316]	@ (8006524 <RCCEx_PLL2_Config+0x15c>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a4e      	ldr	r2, [pc, #312]	@ (8006524 <RCCEx_PLL2_Config+0x15c>)
 80063ec:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80063f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063f2:	f7fc fc97 	bl	8002d24 <HAL_GetTick>
 80063f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80063f8:	e008      	b.n	800640c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80063fa:	f7fc fc93 	bl	8002d24 <HAL_GetTick>
 80063fe:	4602      	mov	r2, r0
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	2b02      	cmp	r3, #2
 8006406:	d901      	bls.n	800640c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e086      	b.n	800651a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800640c:	4b45      	ldr	r3, [pc, #276]	@ (8006524 <RCCEx_PLL2_Config+0x15c>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d1f0      	bne.n	80063fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006418:	4b42      	ldr	r3, [pc, #264]	@ (8006524 <RCCEx_PLL2_Config+0x15c>)
 800641a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800641c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	031b      	lsls	r3, r3, #12
 8006426:	493f      	ldr	r1, [pc, #252]	@ (8006524 <RCCEx_PLL2_Config+0x15c>)
 8006428:	4313      	orrs	r3, r2
 800642a:	628b      	str	r3, [r1, #40]	@ 0x28
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	3b01      	subs	r3, #1
 8006432:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	3b01      	subs	r3, #1
 800643c:	025b      	lsls	r3, r3, #9
 800643e:	b29b      	uxth	r3, r3
 8006440:	431a      	orrs	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	3b01      	subs	r3, #1
 8006448:	041b      	lsls	r3, r3, #16
 800644a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800644e:	431a      	orrs	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	3b01      	subs	r3, #1
 8006456:	061b      	lsls	r3, r3, #24
 8006458:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800645c:	4931      	ldr	r1, [pc, #196]	@ (8006524 <RCCEx_PLL2_Config+0x15c>)
 800645e:	4313      	orrs	r3, r2
 8006460:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006462:	4b30      	ldr	r3, [pc, #192]	@ (8006524 <RCCEx_PLL2_Config+0x15c>)
 8006464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006466:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	695b      	ldr	r3, [r3, #20]
 800646e:	492d      	ldr	r1, [pc, #180]	@ (8006524 <RCCEx_PLL2_Config+0x15c>)
 8006470:	4313      	orrs	r3, r2
 8006472:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006474:	4b2b      	ldr	r3, [pc, #172]	@ (8006524 <RCCEx_PLL2_Config+0x15c>)
 8006476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006478:	f023 0220 	bic.w	r2, r3, #32
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	4928      	ldr	r1, [pc, #160]	@ (8006524 <RCCEx_PLL2_Config+0x15c>)
 8006482:	4313      	orrs	r3, r2
 8006484:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006486:	4b27      	ldr	r3, [pc, #156]	@ (8006524 <RCCEx_PLL2_Config+0x15c>)
 8006488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800648a:	4a26      	ldr	r2, [pc, #152]	@ (8006524 <RCCEx_PLL2_Config+0x15c>)
 800648c:	f023 0310 	bic.w	r3, r3, #16
 8006490:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006492:	4b24      	ldr	r3, [pc, #144]	@ (8006524 <RCCEx_PLL2_Config+0x15c>)
 8006494:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006496:	4b24      	ldr	r3, [pc, #144]	@ (8006528 <RCCEx_PLL2_Config+0x160>)
 8006498:	4013      	ands	r3, r2
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	69d2      	ldr	r2, [r2, #28]
 800649e:	00d2      	lsls	r2, r2, #3
 80064a0:	4920      	ldr	r1, [pc, #128]	@ (8006524 <RCCEx_PLL2_Config+0x15c>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80064a6:	4b1f      	ldr	r3, [pc, #124]	@ (8006524 <RCCEx_PLL2_Config+0x15c>)
 80064a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064aa:	4a1e      	ldr	r2, [pc, #120]	@ (8006524 <RCCEx_PLL2_Config+0x15c>)
 80064ac:	f043 0310 	orr.w	r3, r3, #16
 80064b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d106      	bne.n	80064c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80064b8:	4b1a      	ldr	r3, [pc, #104]	@ (8006524 <RCCEx_PLL2_Config+0x15c>)
 80064ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064bc:	4a19      	ldr	r2, [pc, #100]	@ (8006524 <RCCEx_PLL2_Config+0x15c>)
 80064be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80064c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80064c4:	e00f      	b.n	80064e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d106      	bne.n	80064da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80064cc:	4b15      	ldr	r3, [pc, #84]	@ (8006524 <RCCEx_PLL2_Config+0x15c>)
 80064ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d0:	4a14      	ldr	r2, [pc, #80]	@ (8006524 <RCCEx_PLL2_Config+0x15c>)
 80064d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80064d8:	e005      	b.n	80064e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80064da:	4b12      	ldr	r3, [pc, #72]	@ (8006524 <RCCEx_PLL2_Config+0x15c>)
 80064dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064de:	4a11      	ldr	r2, [pc, #68]	@ (8006524 <RCCEx_PLL2_Config+0x15c>)
 80064e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80064e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80064e6:	4b0f      	ldr	r3, [pc, #60]	@ (8006524 <RCCEx_PLL2_Config+0x15c>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a0e      	ldr	r2, [pc, #56]	@ (8006524 <RCCEx_PLL2_Config+0x15c>)
 80064ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80064f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064f2:	f7fc fc17 	bl	8002d24 <HAL_GetTick>
 80064f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80064f8:	e008      	b.n	800650c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80064fa:	f7fc fc13 	bl	8002d24 <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	2b02      	cmp	r3, #2
 8006506:	d901      	bls.n	800650c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e006      	b.n	800651a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800650c:	4b05      	ldr	r3, [pc, #20]	@ (8006524 <RCCEx_PLL2_Config+0x15c>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d0f0      	beq.n	80064fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006518:	7bfb      	ldrb	r3, [r7, #15]
}
 800651a:	4618      	mov	r0, r3
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	58024400 	.word	0x58024400
 8006528:	ffff0007 	.word	0xffff0007

0800652c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006536:	2300      	movs	r3, #0
 8006538:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800653a:	4b53      	ldr	r3, [pc, #332]	@ (8006688 <RCCEx_PLL3_Config+0x15c>)
 800653c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800653e:	f003 0303 	and.w	r3, r3, #3
 8006542:	2b03      	cmp	r3, #3
 8006544:	d101      	bne.n	800654a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e099      	b.n	800667e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800654a:	4b4f      	ldr	r3, [pc, #316]	@ (8006688 <RCCEx_PLL3_Config+0x15c>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a4e      	ldr	r2, [pc, #312]	@ (8006688 <RCCEx_PLL3_Config+0x15c>)
 8006550:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006554:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006556:	f7fc fbe5 	bl	8002d24 <HAL_GetTick>
 800655a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800655c:	e008      	b.n	8006570 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800655e:	f7fc fbe1 	bl	8002d24 <HAL_GetTick>
 8006562:	4602      	mov	r2, r0
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	2b02      	cmp	r3, #2
 800656a:	d901      	bls.n	8006570 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e086      	b.n	800667e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006570:	4b45      	ldr	r3, [pc, #276]	@ (8006688 <RCCEx_PLL3_Config+0x15c>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1f0      	bne.n	800655e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800657c:	4b42      	ldr	r3, [pc, #264]	@ (8006688 <RCCEx_PLL3_Config+0x15c>)
 800657e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006580:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	051b      	lsls	r3, r3, #20
 800658a:	493f      	ldr	r1, [pc, #252]	@ (8006688 <RCCEx_PLL3_Config+0x15c>)
 800658c:	4313      	orrs	r3, r2
 800658e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	3b01      	subs	r3, #1
 8006596:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	3b01      	subs	r3, #1
 80065a0:	025b      	lsls	r3, r3, #9
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	431a      	orrs	r2, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	3b01      	subs	r3, #1
 80065ac:	041b      	lsls	r3, r3, #16
 80065ae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80065b2:	431a      	orrs	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	3b01      	subs	r3, #1
 80065ba:	061b      	lsls	r3, r3, #24
 80065bc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80065c0:	4931      	ldr	r1, [pc, #196]	@ (8006688 <RCCEx_PLL3_Config+0x15c>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80065c6:	4b30      	ldr	r3, [pc, #192]	@ (8006688 <RCCEx_PLL3_Config+0x15c>)
 80065c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	492d      	ldr	r1, [pc, #180]	@ (8006688 <RCCEx_PLL3_Config+0x15c>)
 80065d4:	4313      	orrs	r3, r2
 80065d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80065d8:	4b2b      	ldr	r3, [pc, #172]	@ (8006688 <RCCEx_PLL3_Config+0x15c>)
 80065da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065dc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	4928      	ldr	r1, [pc, #160]	@ (8006688 <RCCEx_PLL3_Config+0x15c>)
 80065e6:	4313      	orrs	r3, r2
 80065e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80065ea:	4b27      	ldr	r3, [pc, #156]	@ (8006688 <RCCEx_PLL3_Config+0x15c>)
 80065ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ee:	4a26      	ldr	r2, [pc, #152]	@ (8006688 <RCCEx_PLL3_Config+0x15c>)
 80065f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80065f6:	4b24      	ldr	r3, [pc, #144]	@ (8006688 <RCCEx_PLL3_Config+0x15c>)
 80065f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065fa:	4b24      	ldr	r3, [pc, #144]	@ (800668c <RCCEx_PLL3_Config+0x160>)
 80065fc:	4013      	ands	r3, r2
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	69d2      	ldr	r2, [r2, #28]
 8006602:	00d2      	lsls	r2, r2, #3
 8006604:	4920      	ldr	r1, [pc, #128]	@ (8006688 <RCCEx_PLL3_Config+0x15c>)
 8006606:	4313      	orrs	r3, r2
 8006608:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800660a:	4b1f      	ldr	r3, [pc, #124]	@ (8006688 <RCCEx_PLL3_Config+0x15c>)
 800660c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800660e:	4a1e      	ldr	r2, [pc, #120]	@ (8006688 <RCCEx_PLL3_Config+0x15c>)
 8006610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006614:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d106      	bne.n	800662a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800661c:	4b1a      	ldr	r3, [pc, #104]	@ (8006688 <RCCEx_PLL3_Config+0x15c>)
 800661e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006620:	4a19      	ldr	r2, [pc, #100]	@ (8006688 <RCCEx_PLL3_Config+0x15c>)
 8006622:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006626:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006628:	e00f      	b.n	800664a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d106      	bne.n	800663e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006630:	4b15      	ldr	r3, [pc, #84]	@ (8006688 <RCCEx_PLL3_Config+0x15c>)
 8006632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006634:	4a14      	ldr	r2, [pc, #80]	@ (8006688 <RCCEx_PLL3_Config+0x15c>)
 8006636:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800663a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800663c:	e005      	b.n	800664a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800663e:	4b12      	ldr	r3, [pc, #72]	@ (8006688 <RCCEx_PLL3_Config+0x15c>)
 8006640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006642:	4a11      	ldr	r2, [pc, #68]	@ (8006688 <RCCEx_PLL3_Config+0x15c>)
 8006644:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006648:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800664a:	4b0f      	ldr	r3, [pc, #60]	@ (8006688 <RCCEx_PLL3_Config+0x15c>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a0e      	ldr	r2, [pc, #56]	@ (8006688 <RCCEx_PLL3_Config+0x15c>)
 8006650:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006654:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006656:	f7fc fb65 	bl	8002d24 <HAL_GetTick>
 800665a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800665c:	e008      	b.n	8006670 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800665e:	f7fc fb61 	bl	8002d24 <HAL_GetTick>
 8006662:	4602      	mov	r2, r0
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	2b02      	cmp	r3, #2
 800666a:	d901      	bls.n	8006670 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	e006      	b.n	800667e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006670:	4b05      	ldr	r3, [pc, #20]	@ (8006688 <RCCEx_PLL3_Config+0x15c>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d0f0      	beq.n	800665e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800667c:	7bfb      	ldrb	r3, [r7, #15]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	58024400 	.word	0x58024400
 800668c:	ffff0007 	.word	0xffff0007

08006690 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e10f      	b.n	80068c2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a87      	ldr	r2, [pc, #540]	@ (80068cc <HAL_SPI_Init+0x23c>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d00f      	beq.n	80066d2 <HAL_SPI_Init+0x42>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a86      	ldr	r2, [pc, #536]	@ (80068d0 <HAL_SPI_Init+0x240>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d00a      	beq.n	80066d2 <HAL_SPI_Init+0x42>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a84      	ldr	r2, [pc, #528]	@ (80068d4 <HAL_SPI_Init+0x244>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d005      	beq.n	80066d2 <HAL_SPI_Init+0x42>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	2b0f      	cmp	r3, #15
 80066cc:	d901      	bls.n	80066d2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e0f7      	b.n	80068c2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f001 f910 	bl	80078f8 <SPI_GetPacketSize>
 80066d8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a7b      	ldr	r2, [pc, #492]	@ (80068cc <HAL_SPI_Init+0x23c>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d00c      	beq.n	80066fe <HAL_SPI_Init+0x6e>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a79      	ldr	r2, [pc, #484]	@ (80068d0 <HAL_SPI_Init+0x240>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d007      	beq.n	80066fe <HAL_SPI_Init+0x6e>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a78      	ldr	r2, [pc, #480]	@ (80068d4 <HAL_SPI_Init+0x244>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d002      	beq.n	80066fe <HAL_SPI_Init+0x6e>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2b08      	cmp	r3, #8
 80066fc:	d811      	bhi.n	8006722 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006702:	4a72      	ldr	r2, [pc, #456]	@ (80068cc <HAL_SPI_Init+0x23c>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d009      	beq.n	800671c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a70      	ldr	r2, [pc, #448]	@ (80068d0 <HAL_SPI_Init+0x240>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d004      	beq.n	800671c <HAL_SPI_Init+0x8c>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a6f      	ldr	r2, [pc, #444]	@ (80068d4 <HAL_SPI_Init+0x244>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d104      	bne.n	8006726 <HAL_SPI_Init+0x96>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2b10      	cmp	r3, #16
 8006720:	d901      	bls.n	8006726 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e0cd      	b.n	80068c2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800672c:	b2db      	uxtb	r3, r3
 800672e:	2b00      	cmp	r3, #0
 8006730:	d106      	bne.n	8006740 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7fb fd50 	bl	80021e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2202      	movs	r2, #2
 8006744:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f022 0201 	bic.w	r2, r2, #1
 8006756:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006762:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800676c:	d119      	bne.n	80067a2 <HAL_SPI_Init+0x112>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006776:	d103      	bne.n	8006780 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800677c:	2b00      	cmp	r3, #0
 800677e:	d008      	beq.n	8006792 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006784:	2b00      	cmp	r3, #0
 8006786:	d10c      	bne.n	80067a2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800678c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006790:	d107      	bne.n	80067a2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80067a0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00f      	beq.n	80067ce <HAL_SPI_Init+0x13e>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	2b06      	cmp	r3, #6
 80067b4:	d90b      	bls.n	80067ce <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	430a      	orrs	r2, r1
 80067ca:	601a      	str	r2, [r3, #0]
 80067cc:	e007      	b.n	80067de <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80067dc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	69da      	ldr	r2, [r3, #28]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e6:	431a      	orrs	r2, r3
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	431a      	orrs	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067f0:	ea42 0103 	orr.w	r1, r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	68da      	ldr	r2, [r3, #12]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	430a      	orrs	r2, r1
 80067fe:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006808:	431a      	orrs	r2, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800680e:	431a      	orrs	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	431a      	orrs	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	431a      	orrs	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	695b      	ldr	r3, [r3, #20]
 8006820:	431a      	orrs	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	431a      	orrs	r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	431a      	orrs	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006832:	431a      	orrs	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	431a      	orrs	r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800683e:	ea42 0103 	orr.w	r1, r2, r3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	430a      	orrs	r2, r1
 800684c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d113      	bne.n	800687e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006868:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800687c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f022 0201 	bic.w	r2, r2, #1
 800688c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00a      	beq.n	80068b0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	430a      	orrs	r2, r1
 80068ae:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	40013000 	.word	0x40013000
 80068d0:	40003800 	.word	0x40003800
 80068d4:	40003c00 	.word	0x40003c00

080068d8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b088      	sub	sp, #32
 80068dc:	af02      	add	r7, sp, #8
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	603b      	str	r3, [r7, #0]
 80068e4:	4613      	mov	r3, r2
 80068e6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	3320      	adds	r3, #32
 80068ee:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068f0:	f7fc fa18 	bl	8002d24 <HAL_GetTick>
 80068f4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d001      	beq.n	8006906 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8006902:	2302      	movs	r3, #2
 8006904:	e1d1      	b.n	8006caa <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d002      	beq.n	8006912 <HAL_SPI_Transmit+0x3a>
 800690c:	88fb      	ldrh	r3, [r7, #6]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d101      	bne.n	8006916 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e1c9      	b.n	8006caa <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800691c:	2b01      	cmp	r3, #1
 800691e:	d101      	bne.n	8006924 <HAL_SPI_Transmit+0x4c>
 8006920:	2302      	movs	r3, #2
 8006922:	e1c2      	b.n	8006caa <HAL_SPI_Transmit+0x3d2>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2203      	movs	r2, #3
 8006930:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	88fa      	ldrh	r2, [r7, #6]
 8006946:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	88fa      	ldrh	r2, [r7, #6]
 800694e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800697c:	d108      	bne.n	8006990 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800698c:	601a      	str	r2, [r3, #0]
 800698e:	e009      	b.n	80069a4 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80069a2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	685a      	ldr	r2, [r3, #4]
 80069aa:	4b96      	ldr	r3, [pc, #600]	@ (8006c04 <HAL_SPI_Transmit+0x32c>)
 80069ac:	4013      	ands	r3, r2
 80069ae:	88f9      	ldrh	r1, [r7, #6]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	6812      	ldr	r2, [r2, #0]
 80069b4:	430b      	orrs	r3, r1
 80069b6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f042 0201 	orr.w	r2, r2, #1
 80069c6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069d0:	d107      	bne.n	80069e2 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	2b0f      	cmp	r3, #15
 80069e8:	d947      	bls.n	8006a7a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80069ea:	e03f      	b.n	8006a6c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	f003 0302 	and.w	r3, r3, #2
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d114      	bne.n	8006a24 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	6812      	ldr	r2, [r2, #0]
 8006a04:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a0a:	1d1a      	adds	r2, r3, #4
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006a22:	e023      	b.n	8006a6c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a24:	f7fc f97e 	bl	8002d24 <HAL_GetTick>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	683a      	ldr	r2, [r7, #0]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d803      	bhi.n	8006a3c <HAL_SPI_Transmit+0x164>
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a3a:	d102      	bne.n	8006a42 <HAL_SPI_Transmit+0x16a>
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d114      	bne.n	8006a6c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f000 fe8a 	bl	800775c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a4e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	e11e      	b.n	8006caa <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1b9      	bne.n	80069ec <HAL_SPI_Transmit+0x114>
 8006a78:	e0f1      	b.n	8006c5e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	2b07      	cmp	r3, #7
 8006a80:	f240 80e6 	bls.w	8006c50 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006a84:	e05d      	b.n	8006b42 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	695b      	ldr	r3, [r3, #20]
 8006a8c:	f003 0302 	and.w	r3, r3, #2
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d132      	bne.n	8006afa <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d918      	bls.n	8006ad2 <HAL_SPI_Transmit+0x1fa>
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d014      	beq.n	8006ad2 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6812      	ldr	r2, [r2, #0]
 8006ab2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ab8:	1d1a      	adds	r2, r3, #4
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	3b02      	subs	r3, #2
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006ad0:	e037      	b.n	8006b42 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ad6:	881a      	ldrh	r2, [r3, #0]
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ae0:	1c9a      	adds	r2, r3, #2
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	3b01      	subs	r3, #1
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006af8:	e023      	b.n	8006b42 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006afa:	f7fc f913 	bl	8002d24 <HAL_GetTick>
 8006afe:	4602      	mov	r2, r0
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	683a      	ldr	r2, [r7, #0]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d803      	bhi.n	8006b12 <HAL_SPI_Transmit+0x23a>
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b10:	d102      	bne.n	8006b18 <HAL_SPI_Transmit+0x240>
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d114      	bne.n	8006b42 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f000 fe1f 	bl	800775c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b24:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e0b3      	b.n	8006caa <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d19b      	bne.n	8006a86 <HAL_SPI_Transmit+0x1ae>
 8006b4e:	e086      	b.n	8006c5e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	695b      	ldr	r3, [r3, #20]
 8006b56:	f003 0302 	and.w	r3, r3, #2
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d154      	bne.n	8006c08 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	2b03      	cmp	r3, #3
 8006b68:	d918      	bls.n	8006b9c <HAL_SPI_Transmit+0x2c4>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b6e:	2b40      	cmp	r3, #64	@ 0x40
 8006b70:	d914      	bls.n	8006b9c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	6812      	ldr	r2, [r2, #0]
 8006b7c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b82:	1d1a      	adds	r2, r3, #4
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	3b04      	subs	r3, #4
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006b9a:	e059      	b.n	8006c50 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d917      	bls.n	8006bd8 <HAL_SPI_Transmit+0x300>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d013      	beq.n	8006bd8 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bb4:	881a      	ldrh	r2, [r3, #0]
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bbe:	1c9a      	adds	r2, r3, #2
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	3b02      	subs	r3, #2
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006bd6:	e03b      	b.n	8006c50 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	3320      	adds	r3, #32
 8006be2:	7812      	ldrb	r2, [r2, #0]
 8006be4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bea:	1c5a      	adds	r2, r3, #1
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006c02:	e025      	b.n	8006c50 <HAL_SPI_Transmit+0x378>
 8006c04:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c08:	f7fc f88c 	bl	8002d24 <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d803      	bhi.n	8006c20 <HAL_SPI_Transmit+0x348>
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c1e:	d102      	bne.n	8006c26 <HAL_SPI_Transmit+0x34e>
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d114      	bne.n	8006c50 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f000 fd98 	bl	800775c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c32:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	e02c      	b.n	8006caa <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f47f af79 	bne.w	8006b50 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	9300      	str	r3, [sp, #0]
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	2200      	movs	r2, #0
 8006c66:	2108      	movs	r1, #8
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f000 fe17 	bl	800789c <SPI_WaitOnFlagUntilTimeout>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d007      	beq.n	8006c84 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c7a:	f043 0220 	orr.w	r2, r3, #32
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f000 fd69 	bl	800775c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d001      	beq.n	8006ca8 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e000      	b.n	8006caa <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
  }
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3718      	adds	r7, #24
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop

08006cb4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b08e      	sub	sp, #56	@ 0x38
 8006cb8:	af02      	add	r7, sp, #8
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	607a      	str	r2, [r7, #4]
 8006cc0:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	3320      	adds	r3, #32
 8006cc8:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	3330      	adds	r3, #48	@ 0x30
 8006cd0:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cd6:	095b      	lsrs	r3, r3, #5
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	3301      	adds	r3, #1
 8006cdc:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cde:	f7fc f821 	bl	8002d24 <HAL_GetTick>
 8006ce2:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8006ce4:	887b      	ldrh	r3, [r7, #2]
 8006ce6:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8006ce8:	887b      	ldrh	r3, [r7, #2]
 8006cea:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d001      	beq.n	8006cfc <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	e310      	b.n	800731e <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d005      	beq.n	8006d0e <HAL_SPI_TransmitReceive+0x5a>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d002      	beq.n	8006d0e <HAL_SPI_TransmitReceive+0x5a>
 8006d08:	887b      	ldrh	r3, [r7, #2]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e305      	b.n	800731e <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d101      	bne.n	8006d20 <HAL_SPI_TransmitReceive+0x6c>
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	e2fe      	b.n	800731e <HAL_SPI_TransmitReceive+0x66a>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2205      	movs	r2, #5
 8006d2c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	887a      	ldrh	r2, [r7, #2]
 8006d42:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	887a      	ldrh	r2, [r7, #2]
 8006d4a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	68ba      	ldr	r2, [r7, #8]
 8006d52:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	887a      	ldrh	r2, [r7, #2]
 8006d58:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	887a      	ldrh	r2, [r7, #2]
 8006d60:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2200      	movs	r2, #0
 8006d68:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68da      	ldr	r2, [r3, #12]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8006d7e:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a70      	ldr	r2, [pc, #448]	@ (8006f48 <HAL_SPI_TransmitReceive+0x294>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d009      	beq.n	8006d9e <HAL_SPI_TransmitReceive+0xea>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a6f      	ldr	r2, [pc, #444]	@ (8006f4c <HAL_SPI_TransmitReceive+0x298>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d004      	beq.n	8006d9e <HAL_SPI_TransmitReceive+0xea>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a6d      	ldr	r2, [pc, #436]	@ (8006f50 <HAL_SPI_TransmitReceive+0x29c>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d102      	bne.n	8006da4 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8006d9e:	2310      	movs	r3, #16
 8006da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006da2:	e001      	b.n	8006da8 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8006da4:	2308      	movs	r3, #8
 8006da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	685a      	ldr	r2, [r3, #4]
 8006dae:	4b69      	ldr	r3, [pc, #420]	@ (8006f54 <HAL_SPI_TransmitReceive+0x2a0>)
 8006db0:	4013      	ands	r3, r2
 8006db2:	8879      	ldrh	r1, [r7, #2]
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	6812      	ldr	r2, [r2, #0]
 8006db8:	430b      	orrs	r3, r1
 8006dba:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f042 0201 	orr.w	r2, r2, #1
 8006dca:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006dd4:	d107      	bne.n	8006de6 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006de4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	2b0f      	cmp	r3, #15
 8006dec:	f240 80a2 	bls.w	8006f34 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8006df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006df2:	089b      	lsrs	r3, r3, #2
 8006df4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006df6:	e094      	b.n	8006f22 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	695b      	ldr	r3, [r3, #20]
 8006dfe:	f003 0302 	and.w	r3, r3, #2
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d120      	bne.n	8006e48 <HAL_SPI_TransmitReceive+0x194>
 8006e06:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d01d      	beq.n	8006e48 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006e0c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006e0e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e12:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d217      	bcs.n	8006e48 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	6812      	ldr	r2, [r2, #0]
 8006e22:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e28:	1d1a      	adds	r2, r3, #4
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	3b01      	subs	r3, #1
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006e46:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	695b      	ldr	r3, [r3, #20]
 8006e4e:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8006e50:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d065      	beq.n	8006f22 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	695b      	ldr	r3, [r3, #20]
 8006e5c:	f003 0301 	and.w	r3, r3, #1
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d118      	bne.n	8006e96 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e6c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006e6e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e74:	1d1a      	adds	r2, r3, #4
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	3b01      	subs	r3, #1
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006e92:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006e94:	e045      	b.n	8006f22 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006e96:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006e98:	8bfb      	ldrh	r3, [r7, #30]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d21d      	bcs.n	8006eda <HAL_SPI_TransmitReceive+0x226>
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d018      	beq.n	8006eda <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006eb0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006eb2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006eb8:	1d1a      	adds	r2, r3, #4
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006ed6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006ed8:	e023      	b.n	8006f22 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006eda:	f7fb ff23 	bl	8002d24 <HAL_GetTick>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	1ad3      	subs	r3, r2, r3
 8006ee4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d803      	bhi.n	8006ef2 <HAL_SPI_TransmitReceive+0x23e>
 8006eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef0:	d102      	bne.n	8006ef8 <HAL_SPI_TransmitReceive+0x244>
 8006ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d114      	bne.n	8006f22 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f000 fc2f 	bl	800775c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f04:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2201      	movs	r2, #1
 8006f12:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	e1fd      	b.n	800731e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006f22:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f47f af67 	bne.w	8006df8 <HAL_SPI_TransmitReceive+0x144>
 8006f2a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f47f af63 	bne.w	8006df8 <HAL_SPI_TransmitReceive+0x144>
 8006f32:	e1ce      	b.n	80072d2 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	2b07      	cmp	r3, #7
 8006f3a:	f240 81c2 	bls.w	80072c2 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8006f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f40:	085b      	lsrs	r3, r3, #1
 8006f42:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006f44:	e0c9      	b.n	80070da <HAL_SPI_TransmitReceive+0x426>
 8006f46:	bf00      	nop
 8006f48:	40013000 	.word	0x40013000
 8006f4c:	40003800 	.word	0x40003800
 8006f50:	40003c00 	.word	0x40003c00
 8006f54:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	695b      	ldr	r3, [r3, #20]
 8006f5e:	f003 0302 	and.w	r3, r3, #2
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	d11f      	bne.n	8006fa6 <HAL_SPI_TransmitReceive+0x2f2>
 8006f66:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d01c      	beq.n	8006fa6 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006f6c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006f6e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f72:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d216      	bcs.n	8006fa6 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f7c:	881a      	ldrh	r2, [r3, #0]
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f80:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f86:	1c9a      	adds	r2, r3, #2
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	3b01      	subs	r3, #1
 8006f96:	b29a      	uxth	r2, r3
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006fa4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	695b      	ldr	r3, [r3, #20]
 8006fac:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8006fae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	f000 8092 	beq.w	80070da <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	695b      	ldr	r3, [r3, #20]
 8006fbc:	f003 0301 	and.w	r3, r3, #1
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d118      	bne.n	8006ff6 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fc8:	6a3a      	ldr	r2, [r7, #32]
 8006fca:	8812      	ldrh	r2, [r2, #0]
 8006fcc:	b292      	uxth	r2, r2
 8006fce:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fd4:	1c9a      	adds	r2, r3, #2
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006ff2:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006ff4:	e071      	b.n	80070da <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006ff6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006ff8:	8bfb      	ldrh	r3, [r7, #30]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d228      	bcs.n	8007050 <HAL_SPI_TransmitReceive+0x39c>
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d023      	beq.n	8007050 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800700c:	6a3a      	ldr	r2, [r7, #32]
 800700e:	8812      	ldrh	r2, [r2, #0]
 8007010:	b292      	uxth	r2, r2
 8007012:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007018:	1c9a      	adds	r2, r3, #2
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007022:	6a3a      	ldr	r2, [r7, #32]
 8007024:	8812      	ldrh	r2, [r2, #0]
 8007026:	b292      	uxth	r2, r2
 8007028:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800702e:	1c9a      	adds	r2, r3, #2
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800703a:	b29b      	uxth	r3, r3
 800703c:	3b02      	subs	r3, #2
 800703e:	b29a      	uxth	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800704c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800704e:	e044      	b.n	80070da <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8007050:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007052:	2b01      	cmp	r3, #1
 8007054:	d11d      	bne.n	8007092 <HAL_SPI_TransmitReceive+0x3de>
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800705c:	2b00      	cmp	r3, #0
 800705e:	d018      	beq.n	8007092 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007064:	6a3a      	ldr	r2, [r7, #32]
 8007066:	8812      	ldrh	r2, [r2, #0]
 8007068:	b292      	uxth	r2, r2
 800706a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007070:	1c9a      	adds	r2, r3, #2
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800707c:	b29b      	uxth	r3, r3
 800707e:	3b01      	subs	r3, #1
 8007080:	b29a      	uxth	r2, r3
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800708e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007090:	e023      	b.n	80070da <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007092:	f7fb fe47 	bl	8002d24 <HAL_GetTick>
 8007096:	4602      	mov	r2, r0
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800709e:	429a      	cmp	r2, r3
 80070a0:	d803      	bhi.n	80070aa <HAL_SPI_TransmitReceive+0x3f6>
 80070a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a8:	d102      	bne.n	80070b0 <HAL_SPI_TransmitReceive+0x3fc>
 80070aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d114      	bne.n	80070da <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f000 fb53 	bl	800775c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070bc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e121      	b.n	800731e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80070da:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f47f af3b 	bne.w	8006f58 <HAL_SPI_TransmitReceive+0x2a4>
 80070e2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f47f af37 	bne.w	8006f58 <HAL_SPI_TransmitReceive+0x2a4>
 80070ea:	e0f2      	b.n	80072d2 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	f003 0302 	and.w	r3, r3, #2
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d121      	bne.n	800713e <HAL_SPI_TransmitReceive+0x48a>
 80070fa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d01e      	beq.n	800713e <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8007100:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007102:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8007104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007106:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007108:	429a      	cmp	r2, r3
 800710a:	d218      	bcs.n	800713e <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	3320      	adds	r3, #32
 8007116:	7812      	ldrb	r2, [r2, #0]
 8007118:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800711e:	1c5a      	adds	r2, r3, #1
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800712a:	b29b      	uxth	r3, r3
 800712c:	3b01      	subs	r3, #1
 800712e:	b29a      	uxth	r2, r3
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800713c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8007146:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007148:	2b00      	cmp	r3, #0
 800714a:	f000 80ba 	beq.w	80072c2 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	695b      	ldr	r3, [r3, #20]
 8007154:	f003 0301 	and.w	r3, r3, #1
 8007158:	2b01      	cmp	r3, #1
 800715a:	d11b      	bne.n	8007194 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007168:	7812      	ldrb	r2, [r2, #0]
 800716a:	b2d2      	uxtb	r2, r2
 800716c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007172:	1c5a      	adds	r2, r3, #1
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800717e:	b29b      	uxth	r3, r3
 8007180:	3b01      	subs	r3, #1
 8007182:	b29a      	uxth	r2, r3
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007190:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007192:	e096      	b.n	80072c2 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007194:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007196:	8bfb      	ldrh	r3, [r7, #30]
 8007198:	429a      	cmp	r2, r3
 800719a:	d24a      	bcs.n	8007232 <HAL_SPI_TransmitReceive+0x57e>
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d045      	beq.n	8007232 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071b2:	7812      	ldrb	r2, [r2, #0]
 80071b4:	b2d2      	uxtb	r2, r2
 80071b6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071bc:	1c5a      	adds	r2, r3, #1
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071ce:	7812      	ldrb	r2, [r2, #0]
 80071d0:	b2d2      	uxtb	r2, r2
 80071d2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071d8:	1c5a      	adds	r2, r3, #1
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071ea:	7812      	ldrb	r2, [r2, #0]
 80071ec:	b2d2      	uxtb	r2, r2
 80071ee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071f4:	1c5a      	adds	r2, r3, #1
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007206:	7812      	ldrb	r2, [r2, #0]
 8007208:	b2d2      	uxtb	r2, r2
 800720a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007210:	1c5a      	adds	r2, r3, #1
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800721c:	b29b      	uxth	r3, r3
 800721e:	3b04      	subs	r3, #4
 8007220:	b29a      	uxth	r2, r3
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800722e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007230:	e047      	b.n	80072c2 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8007232:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007234:	2b03      	cmp	r3, #3
 8007236:	d820      	bhi.n	800727a <HAL_SPI_TransmitReceive+0x5c6>
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800723e:	2b00      	cmp	r3, #0
 8007240:	d01b      	beq.n	800727a <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800724e:	7812      	ldrb	r2, [r2, #0]
 8007250:	b2d2      	uxtb	r2, r2
 8007252:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007258:	1c5a      	adds	r2, r3, #1
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007264:	b29b      	uxth	r3, r3
 8007266:	3b01      	subs	r3, #1
 8007268:	b29a      	uxth	r2, r3
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007276:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007278:	e023      	b.n	80072c2 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800727a:	f7fb fd53 	bl	8002d24 <HAL_GetTick>
 800727e:	4602      	mov	r2, r0
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007286:	429a      	cmp	r2, r3
 8007288:	d803      	bhi.n	8007292 <HAL_SPI_TransmitReceive+0x5de>
 800728a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800728c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007290:	d102      	bne.n	8007298 <HAL_SPI_TransmitReceive+0x5e4>
 8007292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007294:	2b00      	cmp	r3, #0
 8007296:	d114      	bne.n	80072c2 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f000 fa5f 	bl	800775c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072a4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2201      	movs	r2, #1
 80072b2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80072be:	2303      	movs	r3, #3
 80072c0:	e02d      	b.n	800731e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80072c2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f47f af11 	bne.w	80070ec <HAL_SPI_TransmitReceive+0x438>
 80072ca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f47f af0d 	bne.w	80070ec <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	9300      	str	r3, [sp, #0]
 80072d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072d8:	2200      	movs	r2, #0
 80072da:	2108      	movs	r1, #8
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	f000 fadd 	bl	800789c <SPI_WaitOnFlagUntilTimeout>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d007      	beq.n	80072f8 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072ee:	f043 0220 	orr.w	r2, r3, #32
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f000 fa2f 	bl	800775c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2201      	movs	r2, #1
 8007302:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007314:	2b00      	cmp	r3, #0
 8007316:	d001      	beq.n	800731c <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	e000      	b.n	800731e <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800731c:	2300      	movs	r3, #0
  }
}
 800731e:	4618      	mov	r0, r3
 8007320:	3730      	adds	r7, #48	@ 0x30
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop

08007328 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b08a      	sub	sp, #40	@ 0x28
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	695b      	ldr	r3, [r3, #20]
 800733e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007340:	6a3a      	ldr	r2, [r7, #32]
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	4013      	ands	r3, r2
 8007346:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007350:	2300      	movs	r3, #0
 8007352:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800735a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	3330      	adds	r3, #48	@ 0x30
 8007362:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800736a:	2b00      	cmp	r3, #0
 800736c:	d010      	beq.n	8007390 <HAL_SPI_IRQHandler+0x68>
 800736e:	6a3b      	ldr	r3, [r7, #32]
 8007370:	f003 0308 	and.w	r3, r3, #8
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00b      	beq.n	8007390 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	699a      	ldr	r2, [r3, #24]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007386:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 f9c3 	bl	8007714 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800738e:	e192      	b.n	80076b6 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007396:	2b00      	cmp	r3, #0
 8007398:	d113      	bne.n	80073c2 <HAL_SPI_IRQHandler+0x9a>
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	f003 0320 	and.w	r3, r3, #32
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d10e      	bne.n	80073c2 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d009      	beq.n	80073c2 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	4798      	blx	r3
    hspi->RxISR(hspi);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	4798      	blx	r3
    handled = 1UL;
 80073be:	2301      	movs	r3, #1
 80073c0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10f      	bne.n	80073ec <HAL_SPI_IRQHandler+0xc4>
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	f003 0301 	and.w	r3, r3, #1
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00a      	beq.n	80073ec <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d105      	bne.n	80073ec <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	4798      	blx	r3
    handled = 1UL;
 80073e8:	2301      	movs	r3, #1
 80073ea:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	f003 0320 	and.w	r3, r3, #32
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d10f      	bne.n	8007416 <HAL_SPI_IRQHandler+0xee>
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	f003 0302 	and.w	r3, r3, #2
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00a      	beq.n	8007416 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007406:	2b00      	cmp	r3, #0
 8007408:	d105      	bne.n	8007416 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	4798      	blx	r3
    handled = 1UL;
 8007412:	2301      	movs	r3, #1
 8007414:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8007416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007418:	2b00      	cmp	r3, #0
 800741a:	f040 8147 	bne.w	80076ac <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	f003 0308 	and.w	r3, r3, #8
 8007424:	2b00      	cmp	r3, #0
 8007426:	f000 808b 	beq.w	8007540 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	699a      	ldr	r2, [r3, #24]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f042 0208 	orr.w	r2, r2, #8
 8007438:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	699a      	ldr	r2, [r3, #24]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f042 0210 	orr.w	r2, r2, #16
 8007448:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	699a      	ldr	r2, [r3, #24]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007458:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	691a      	ldr	r2, [r3, #16]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f022 0208 	bic.w	r2, r2, #8
 8007468:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007474:	2b00      	cmp	r3, #0
 8007476:	d13d      	bne.n	80074f4 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8007478:	e036      	b.n	80074e8 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	2b0f      	cmp	r3, #15
 8007480:	d90b      	bls.n	800749a <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800748a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800748c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007492:	1d1a      	adds	r2, r3, #4
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	665a      	str	r2, [r3, #100]	@ 0x64
 8007498:	e01d      	b.n	80074d6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	2b07      	cmp	r3, #7
 80074a0:	d90b      	bls.n	80074ba <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074a6:	68fa      	ldr	r2, [r7, #12]
 80074a8:	8812      	ldrh	r2, [r2, #0]
 80074aa:	b292      	uxth	r2, r2
 80074ac:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074b2:	1c9a      	adds	r2, r3, #2
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	665a      	str	r2, [r3, #100]	@ 0x64
 80074b8:	e00d      	b.n	80074d6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074c6:	7812      	ldrb	r2, [r2, #0]
 80074c8:	b2d2      	uxtb	r2, r2
 80074ca:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074d0:	1c5a      	adds	r2, r3, #1
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80074dc:	b29b      	uxth	r3, r3
 80074de:	3b01      	subs	r3, #1
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d1c2      	bne.n	800747a <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 f931 	bl	800775c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007508:	2b00      	cmp	r3, #0
 800750a:	d003      	beq.n	8007514 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 f8f7 	bl	8007700 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007512:	e0d0      	b.n	80076b6 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007514:	7cfb      	ldrb	r3, [r7, #19]
 8007516:	2b05      	cmp	r3, #5
 8007518:	d103      	bne.n	8007522 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 f8e6 	bl	80076ec <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8007520:	e0c6      	b.n	80076b0 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007522:	7cfb      	ldrb	r3, [r7, #19]
 8007524:	2b04      	cmp	r3, #4
 8007526:	d103      	bne.n	8007530 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 f8d5 	bl	80076d8 <HAL_SPI_RxCpltCallback>
    return;
 800752e:	e0bf      	b.n	80076b0 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007530:	7cfb      	ldrb	r3, [r7, #19]
 8007532:	2b03      	cmp	r3, #3
 8007534:	f040 80bc 	bne.w	80076b0 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 f8c3 	bl	80076c4 <HAL_SPI_TxCpltCallback>
    return;
 800753e:	e0b7      	b.n	80076b0 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8007546:	2b00      	cmp	r3, #0
 8007548:	f000 80b5 	beq.w	80076b6 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00f      	beq.n	8007576 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800755c:	f043 0204 	orr.w	r2, r3, #4
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	699a      	ldr	r2, [r3, #24]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007574:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00f      	beq.n	80075a0 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007586:	f043 0201 	orr.w	r2, r3, #1
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	699a      	ldr	r2, [r3, #24]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800759e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00f      	beq.n	80075ca <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075b0:	f043 0208 	orr.w	r2, r3, #8
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	699a      	ldr	r2, [r3, #24]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80075c8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	f003 0320 	and.w	r3, r3, #32
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d00f      	beq.n	80075f4 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075da:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	699a      	ldr	r2, [r3, #24]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f042 0220 	orr.w	r2, r2, #32
 80075f2:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d05a      	beq.n	80076b4 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f022 0201 	bic.w	r2, r2, #1
 800760c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	6919      	ldr	r1, [r3, #16]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	4b28      	ldr	r3, [pc, #160]	@ (80076bc <HAL_SPI_IRQHandler+0x394>)
 800761a:	400b      	ands	r3, r1
 800761c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007624:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007628:	d138      	bne.n	800769c <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	689a      	ldr	r2, [r3, #8]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007638:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800763e:	2b00      	cmp	r3, #0
 8007640:	d013      	beq.n	800766a <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007646:	4a1e      	ldr	r2, [pc, #120]	@ (80076c0 <HAL_SPI_IRQHandler+0x398>)
 8007648:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800764e:	4618      	mov	r0, r3
 8007650:	f7fb fd2c 	bl	80030ac <HAL_DMA_Abort_IT>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	d007      	beq.n	800766a <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007660:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800766e:	2b00      	cmp	r3, #0
 8007670:	d020      	beq.n	80076b4 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007676:	4a12      	ldr	r2, [pc, #72]	@ (80076c0 <HAL_SPI_IRQHandler+0x398>)
 8007678:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800767e:	4618      	mov	r0, r3
 8007680:	f7fb fd14 	bl	80030ac <HAL_DMA_Abort_IT>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d014      	beq.n	80076b4 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007690:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800769a:	e00b      	b.n	80076b4 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 f82b 	bl	8007700 <HAL_SPI_ErrorCallback>
    return;
 80076aa:	e003      	b.n	80076b4 <HAL_SPI_IRQHandler+0x38c>
    return;
 80076ac:	bf00      	nop
 80076ae:	e002      	b.n	80076b6 <HAL_SPI_IRQHandler+0x38e>
    return;
 80076b0:	bf00      	nop
 80076b2:	e000      	b.n	80076b6 <HAL_SPI_IRQHandler+0x38e>
    return;
 80076b4:	bf00      	nop
  }
}
 80076b6:	3728      	adds	r7, #40	@ 0x28
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	fffffc94 	.word	0xfffffc94
 80076c0:	08007729 	.word	0x08007729

080076c4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80076cc:	bf00      	nop
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80076e0:	bf00      	nop
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80076f4:	bf00      	nop
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800771c:	bf00      	nop
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007734:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2200      	movs	r2, #0
 800773a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2201      	movs	r2, #1
 800774a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	f7ff ffd6 	bl	8007700 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007754:	bf00      	nop
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800775c:	b480      	push	{r7}
 800775e:	b085      	sub	sp, #20
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	699a      	ldr	r2, [r3, #24]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f042 0208 	orr.w	r2, r2, #8
 800777a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	699a      	ldr	r2, [r3, #24]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f042 0210 	orr.w	r2, r2, #16
 800778a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f022 0201 	bic.w	r2, r2, #1
 800779a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	6919      	ldr	r1, [r3, #16]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	4b3c      	ldr	r3, [pc, #240]	@ (8007898 <SPI_CloseTransfer+0x13c>)
 80077a8:	400b      	ands	r3, r1
 80077aa:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	689a      	ldr	r2, [r3, #8]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80077ba:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	2b04      	cmp	r3, #4
 80077c6:	d014      	beq.n	80077f2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f003 0320 	and.w	r3, r3, #32
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00f      	beq.n	80077f2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077d8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	699a      	ldr	r2, [r3, #24]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f042 0220 	orr.w	r2, r2, #32
 80077f0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	2b03      	cmp	r3, #3
 80077fc:	d014      	beq.n	8007828 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007804:	2b00      	cmp	r3, #0
 8007806:	d00f      	beq.n	8007828 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800780e:	f043 0204 	orr.w	r2, r3, #4
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	699a      	ldr	r2, [r3, #24]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007826:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00f      	beq.n	8007852 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007838:	f043 0201 	orr.w	r2, r3, #1
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	699a      	ldr	r2, [r3, #24]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007850:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00f      	beq.n	800787c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007862:	f043 0208 	orr.w	r2, r3, #8
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	699a      	ldr	r2, [r3, #24]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800787a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800788c:	bf00      	nop
 800788e:	3714      	adds	r7, #20
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr
 8007898:	fffffc90 	.word	0xfffffc90

0800789c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	603b      	str	r3, [r7, #0]
 80078a8:	4613      	mov	r3, r2
 80078aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80078ac:	e010      	b.n	80078d0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078ae:	f7fb fa39 	bl	8002d24 <HAL_GetTick>
 80078b2:	4602      	mov	r2, r0
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	683a      	ldr	r2, [r7, #0]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d803      	bhi.n	80078c6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c4:	d102      	bne.n	80078cc <SPI_WaitOnFlagUntilTimeout+0x30>
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d101      	bne.n	80078d0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80078cc:	2303      	movs	r3, #3
 80078ce:	e00f      	b.n	80078f0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	695a      	ldr	r2, [r3, #20]
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	4013      	ands	r3, r2
 80078da:	68ba      	ldr	r2, [r7, #8]
 80078dc:	429a      	cmp	r2, r3
 80078de:	bf0c      	ite	eq
 80078e0:	2301      	moveq	r3, #1
 80078e2:	2300      	movne	r3, #0
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	461a      	mov	r2, r3
 80078e8:	79fb      	ldrb	r3, [r7, #7]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d0df      	beq.n	80078ae <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3710      	adds	r7, #16
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b085      	sub	sp, #20
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007904:	095b      	lsrs	r3, r3, #5
 8007906:	3301      	adds	r3, #1
 8007908:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	3301      	adds	r3, #1
 8007910:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	3307      	adds	r3, #7
 8007916:	08db      	lsrs	r3, r3, #3
 8007918:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	fb02 f303 	mul.w	r3, r2, r3
}
 8007922:	4618      	mov	r0, r3
 8007924:	3714      	adds	r7, #20
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr

0800792e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b082      	sub	sp, #8
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d101      	bne.n	8007940 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	e042      	b.n	80079c6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007946:	2b00      	cmp	r3, #0
 8007948:	d106      	bne.n	8007958 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f83b 	bl	80079ce <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2224      	movs	r2, #36	@ 0x24
 800795c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f022 0201 	bic.w	r2, r2, #1
 800796e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007974:	2b00      	cmp	r3, #0
 8007976:	d002      	beq.n	800797e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 fe29 	bl	80085d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 f8be 	bl	8007b00 <UART_SetConfig>
 8007984:	4603      	mov	r3, r0
 8007986:	2b01      	cmp	r3, #1
 8007988:	d101      	bne.n	800798e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	e01b      	b.n	80079c6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	685a      	ldr	r2, [r3, #4]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800799c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	689a      	ldr	r2, [r3, #8]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80079ac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f042 0201 	orr.w	r2, r2, #1
 80079bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 fea8 	bl	8008714 <UART_CheckIdleState>
 80079c4:	4603      	mov	r3, r0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3708      	adds	r7, #8
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80079ce:	b480      	push	{r7}
 80079d0:	b083      	sub	sp, #12
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80079d6:	bf00      	nop
 80079d8:	370c      	adds	r7, #12
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr

080079e2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b08a      	sub	sp, #40	@ 0x28
 80079e6:	af02      	add	r7, sp, #8
 80079e8:	60f8      	str	r0, [r7, #12]
 80079ea:	60b9      	str	r1, [r7, #8]
 80079ec:	603b      	str	r3, [r7, #0]
 80079ee:	4613      	mov	r3, r2
 80079f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079f8:	2b20      	cmp	r3, #32
 80079fa:	d17b      	bne.n	8007af4 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d002      	beq.n	8007a08 <HAL_UART_Transmit+0x26>
 8007a02:	88fb      	ldrh	r3, [r7, #6]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d101      	bne.n	8007a0c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e074      	b.n	8007af6 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2221      	movs	r2, #33	@ 0x21
 8007a18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a1c:	f7fb f982 	bl	8002d24 <HAL_GetTick>
 8007a20:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	88fa      	ldrh	r2, [r7, #6]
 8007a26:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	88fa      	ldrh	r2, [r7, #6]
 8007a2e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a3a:	d108      	bne.n	8007a4e <HAL_UART_Transmit+0x6c>
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d104      	bne.n	8007a4e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007a44:	2300      	movs	r3, #0
 8007a46:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	61bb      	str	r3, [r7, #24]
 8007a4c:	e003      	b.n	8007a56 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a52:	2300      	movs	r3, #0
 8007a54:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007a56:	e030      	b.n	8007aba <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	9300      	str	r3, [sp, #0]
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	2180      	movs	r1, #128	@ 0x80
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	f000 ff00 	bl	8008868 <UART_WaitOnFlagUntilTimeout>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d005      	beq.n	8007a7a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2220      	movs	r2, #32
 8007a72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007a76:	2303      	movs	r3, #3
 8007a78:	e03d      	b.n	8007af6 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d10b      	bne.n	8007a98 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	881b      	ldrh	r3, [r3, #0]
 8007a84:	461a      	mov	r2, r3
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a8e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	3302      	adds	r3, #2
 8007a94:	61bb      	str	r3, [r7, #24]
 8007a96:	e007      	b.n	8007aa8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	781a      	ldrb	r2, [r3, #0]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	b29a      	uxth	r2, r3
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1c8      	bne.n	8007a58 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	9300      	str	r3, [sp, #0]
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	2200      	movs	r2, #0
 8007ace:	2140      	movs	r1, #64	@ 0x40
 8007ad0:	68f8      	ldr	r0, [r7, #12]
 8007ad2:	f000 fec9 	bl	8008868 <UART_WaitOnFlagUntilTimeout>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d005      	beq.n	8007ae8 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2220      	movs	r2, #32
 8007ae0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e006      	b.n	8007af6 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2220      	movs	r2, #32
 8007aec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007af0:	2300      	movs	r3, #0
 8007af2:	e000      	b.n	8007af6 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007af4:	2302      	movs	r3, #2
  }
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3720      	adds	r7, #32
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
	...

08007b00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b04:	b092      	sub	sp, #72	@ 0x48
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	689a      	ldr	r2, [r3, #8]
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	431a      	orrs	r2, r3
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	431a      	orrs	r2, r3
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	69db      	ldr	r3, [r3, #28]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	4bbe      	ldr	r3, [pc, #760]	@ (8007e28 <UART_SetConfig+0x328>)
 8007b30:	4013      	ands	r3, r2
 8007b32:	697a      	ldr	r2, [r7, #20]
 8007b34:	6812      	ldr	r2, [r2, #0]
 8007b36:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007b38:	430b      	orrs	r3, r1
 8007b3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	68da      	ldr	r2, [r3, #12]
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	430a      	orrs	r2, r1
 8007b50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	699b      	ldr	r3, [r3, #24]
 8007b56:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4ab3      	ldr	r2, [pc, #716]	@ (8007e2c <UART_SetConfig+0x32c>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d004      	beq.n	8007b6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	6a1b      	ldr	r3, [r3, #32]
 8007b66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	689a      	ldr	r2, [r3, #8]
 8007b72:	4baf      	ldr	r3, [pc, #700]	@ (8007e30 <UART_SetConfig+0x330>)
 8007b74:	4013      	ands	r3, r2
 8007b76:	697a      	ldr	r2, [r7, #20]
 8007b78:	6812      	ldr	r2, [r2, #0]
 8007b7a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007b7c:	430b      	orrs	r3, r1
 8007b7e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b86:	f023 010f 	bic.w	r1, r3, #15
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	430a      	orrs	r2, r1
 8007b94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4aa6      	ldr	r2, [pc, #664]	@ (8007e34 <UART_SetConfig+0x334>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d177      	bne.n	8007c90 <UART_SetConfig+0x190>
 8007ba0:	4ba5      	ldr	r3, [pc, #660]	@ (8007e38 <UART_SetConfig+0x338>)
 8007ba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ba4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ba8:	2b28      	cmp	r3, #40	@ 0x28
 8007baa:	d86d      	bhi.n	8007c88 <UART_SetConfig+0x188>
 8007bac:	a201      	add	r2, pc, #4	@ (adr r2, 8007bb4 <UART_SetConfig+0xb4>)
 8007bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb2:	bf00      	nop
 8007bb4:	08007c59 	.word	0x08007c59
 8007bb8:	08007c89 	.word	0x08007c89
 8007bbc:	08007c89 	.word	0x08007c89
 8007bc0:	08007c89 	.word	0x08007c89
 8007bc4:	08007c89 	.word	0x08007c89
 8007bc8:	08007c89 	.word	0x08007c89
 8007bcc:	08007c89 	.word	0x08007c89
 8007bd0:	08007c89 	.word	0x08007c89
 8007bd4:	08007c61 	.word	0x08007c61
 8007bd8:	08007c89 	.word	0x08007c89
 8007bdc:	08007c89 	.word	0x08007c89
 8007be0:	08007c89 	.word	0x08007c89
 8007be4:	08007c89 	.word	0x08007c89
 8007be8:	08007c89 	.word	0x08007c89
 8007bec:	08007c89 	.word	0x08007c89
 8007bf0:	08007c89 	.word	0x08007c89
 8007bf4:	08007c69 	.word	0x08007c69
 8007bf8:	08007c89 	.word	0x08007c89
 8007bfc:	08007c89 	.word	0x08007c89
 8007c00:	08007c89 	.word	0x08007c89
 8007c04:	08007c89 	.word	0x08007c89
 8007c08:	08007c89 	.word	0x08007c89
 8007c0c:	08007c89 	.word	0x08007c89
 8007c10:	08007c89 	.word	0x08007c89
 8007c14:	08007c71 	.word	0x08007c71
 8007c18:	08007c89 	.word	0x08007c89
 8007c1c:	08007c89 	.word	0x08007c89
 8007c20:	08007c89 	.word	0x08007c89
 8007c24:	08007c89 	.word	0x08007c89
 8007c28:	08007c89 	.word	0x08007c89
 8007c2c:	08007c89 	.word	0x08007c89
 8007c30:	08007c89 	.word	0x08007c89
 8007c34:	08007c79 	.word	0x08007c79
 8007c38:	08007c89 	.word	0x08007c89
 8007c3c:	08007c89 	.word	0x08007c89
 8007c40:	08007c89 	.word	0x08007c89
 8007c44:	08007c89 	.word	0x08007c89
 8007c48:	08007c89 	.word	0x08007c89
 8007c4c:	08007c89 	.word	0x08007c89
 8007c50:	08007c89 	.word	0x08007c89
 8007c54:	08007c81 	.word	0x08007c81
 8007c58:	2301      	movs	r3, #1
 8007c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c5e:	e222      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007c60:	2304      	movs	r3, #4
 8007c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c66:	e21e      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007c68:	2308      	movs	r3, #8
 8007c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c6e:	e21a      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007c70:	2310      	movs	r3, #16
 8007c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c76:	e216      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007c78:	2320      	movs	r3, #32
 8007c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c7e:	e212      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007c80:	2340      	movs	r3, #64	@ 0x40
 8007c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c86:	e20e      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007c88:	2380      	movs	r3, #128	@ 0x80
 8007c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c8e:	e20a      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a69      	ldr	r2, [pc, #420]	@ (8007e3c <UART_SetConfig+0x33c>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d130      	bne.n	8007cfc <UART_SetConfig+0x1fc>
 8007c9a:	4b67      	ldr	r3, [pc, #412]	@ (8007e38 <UART_SetConfig+0x338>)
 8007c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c9e:	f003 0307 	and.w	r3, r3, #7
 8007ca2:	2b05      	cmp	r3, #5
 8007ca4:	d826      	bhi.n	8007cf4 <UART_SetConfig+0x1f4>
 8007ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8007cac <UART_SetConfig+0x1ac>)
 8007ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cac:	08007cc5 	.word	0x08007cc5
 8007cb0:	08007ccd 	.word	0x08007ccd
 8007cb4:	08007cd5 	.word	0x08007cd5
 8007cb8:	08007cdd 	.word	0x08007cdd
 8007cbc:	08007ce5 	.word	0x08007ce5
 8007cc0:	08007ced 	.word	0x08007ced
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cca:	e1ec      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007ccc:	2304      	movs	r3, #4
 8007cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cd2:	e1e8      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007cd4:	2308      	movs	r3, #8
 8007cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cda:	e1e4      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007cdc:	2310      	movs	r3, #16
 8007cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ce2:	e1e0      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007ce4:	2320      	movs	r3, #32
 8007ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cea:	e1dc      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007cec:	2340      	movs	r3, #64	@ 0x40
 8007cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cf2:	e1d8      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007cf4:	2380      	movs	r3, #128	@ 0x80
 8007cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cfa:	e1d4      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a4f      	ldr	r2, [pc, #316]	@ (8007e40 <UART_SetConfig+0x340>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d130      	bne.n	8007d68 <UART_SetConfig+0x268>
 8007d06:	4b4c      	ldr	r3, [pc, #304]	@ (8007e38 <UART_SetConfig+0x338>)
 8007d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d0a:	f003 0307 	and.w	r3, r3, #7
 8007d0e:	2b05      	cmp	r3, #5
 8007d10:	d826      	bhi.n	8007d60 <UART_SetConfig+0x260>
 8007d12:	a201      	add	r2, pc, #4	@ (adr r2, 8007d18 <UART_SetConfig+0x218>)
 8007d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d18:	08007d31 	.word	0x08007d31
 8007d1c:	08007d39 	.word	0x08007d39
 8007d20:	08007d41 	.word	0x08007d41
 8007d24:	08007d49 	.word	0x08007d49
 8007d28:	08007d51 	.word	0x08007d51
 8007d2c:	08007d59 	.word	0x08007d59
 8007d30:	2300      	movs	r3, #0
 8007d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d36:	e1b6      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007d38:	2304      	movs	r3, #4
 8007d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d3e:	e1b2      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007d40:	2308      	movs	r3, #8
 8007d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d46:	e1ae      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007d48:	2310      	movs	r3, #16
 8007d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d4e:	e1aa      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007d50:	2320      	movs	r3, #32
 8007d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d56:	e1a6      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007d58:	2340      	movs	r3, #64	@ 0x40
 8007d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d5e:	e1a2      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007d60:	2380      	movs	r3, #128	@ 0x80
 8007d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d66:	e19e      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a35      	ldr	r2, [pc, #212]	@ (8007e44 <UART_SetConfig+0x344>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d130      	bne.n	8007dd4 <UART_SetConfig+0x2d4>
 8007d72:	4b31      	ldr	r3, [pc, #196]	@ (8007e38 <UART_SetConfig+0x338>)
 8007d74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d76:	f003 0307 	and.w	r3, r3, #7
 8007d7a:	2b05      	cmp	r3, #5
 8007d7c:	d826      	bhi.n	8007dcc <UART_SetConfig+0x2cc>
 8007d7e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d84 <UART_SetConfig+0x284>)
 8007d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d84:	08007d9d 	.word	0x08007d9d
 8007d88:	08007da5 	.word	0x08007da5
 8007d8c:	08007dad 	.word	0x08007dad
 8007d90:	08007db5 	.word	0x08007db5
 8007d94:	08007dbd 	.word	0x08007dbd
 8007d98:	08007dc5 	.word	0x08007dc5
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007da2:	e180      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007da4:	2304      	movs	r3, #4
 8007da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007daa:	e17c      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007dac:	2308      	movs	r3, #8
 8007dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007db2:	e178      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007db4:	2310      	movs	r3, #16
 8007db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dba:	e174      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007dbc:	2320      	movs	r3, #32
 8007dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dc2:	e170      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007dc4:	2340      	movs	r3, #64	@ 0x40
 8007dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dca:	e16c      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007dcc:	2380      	movs	r3, #128	@ 0x80
 8007dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dd2:	e168      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a1b      	ldr	r2, [pc, #108]	@ (8007e48 <UART_SetConfig+0x348>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d142      	bne.n	8007e64 <UART_SetConfig+0x364>
 8007dde:	4b16      	ldr	r3, [pc, #88]	@ (8007e38 <UART_SetConfig+0x338>)
 8007de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007de2:	f003 0307 	and.w	r3, r3, #7
 8007de6:	2b05      	cmp	r3, #5
 8007de8:	d838      	bhi.n	8007e5c <UART_SetConfig+0x35c>
 8007dea:	a201      	add	r2, pc, #4	@ (adr r2, 8007df0 <UART_SetConfig+0x2f0>)
 8007dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df0:	08007e09 	.word	0x08007e09
 8007df4:	08007e11 	.word	0x08007e11
 8007df8:	08007e19 	.word	0x08007e19
 8007dfc:	08007e21 	.word	0x08007e21
 8007e00:	08007e4d 	.word	0x08007e4d
 8007e04:	08007e55 	.word	0x08007e55
 8007e08:	2300      	movs	r3, #0
 8007e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e0e:	e14a      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007e10:	2304      	movs	r3, #4
 8007e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e16:	e146      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007e18:	2308      	movs	r3, #8
 8007e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e1e:	e142      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007e20:	2310      	movs	r3, #16
 8007e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e26:	e13e      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007e28:	cfff69f3 	.word	0xcfff69f3
 8007e2c:	58000c00 	.word	0x58000c00
 8007e30:	11fff4ff 	.word	0x11fff4ff
 8007e34:	40011000 	.word	0x40011000
 8007e38:	58024400 	.word	0x58024400
 8007e3c:	40004400 	.word	0x40004400
 8007e40:	40004800 	.word	0x40004800
 8007e44:	40004c00 	.word	0x40004c00
 8007e48:	40005000 	.word	0x40005000
 8007e4c:	2320      	movs	r3, #32
 8007e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e52:	e128      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007e54:	2340      	movs	r3, #64	@ 0x40
 8007e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e5a:	e124      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007e5c:	2380      	movs	r3, #128	@ 0x80
 8007e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e62:	e120      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4acb      	ldr	r2, [pc, #812]	@ (8008198 <UART_SetConfig+0x698>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d176      	bne.n	8007f5c <UART_SetConfig+0x45c>
 8007e6e:	4bcb      	ldr	r3, [pc, #812]	@ (800819c <UART_SetConfig+0x69c>)
 8007e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e76:	2b28      	cmp	r3, #40	@ 0x28
 8007e78:	d86c      	bhi.n	8007f54 <UART_SetConfig+0x454>
 8007e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e80 <UART_SetConfig+0x380>)
 8007e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e80:	08007f25 	.word	0x08007f25
 8007e84:	08007f55 	.word	0x08007f55
 8007e88:	08007f55 	.word	0x08007f55
 8007e8c:	08007f55 	.word	0x08007f55
 8007e90:	08007f55 	.word	0x08007f55
 8007e94:	08007f55 	.word	0x08007f55
 8007e98:	08007f55 	.word	0x08007f55
 8007e9c:	08007f55 	.word	0x08007f55
 8007ea0:	08007f2d 	.word	0x08007f2d
 8007ea4:	08007f55 	.word	0x08007f55
 8007ea8:	08007f55 	.word	0x08007f55
 8007eac:	08007f55 	.word	0x08007f55
 8007eb0:	08007f55 	.word	0x08007f55
 8007eb4:	08007f55 	.word	0x08007f55
 8007eb8:	08007f55 	.word	0x08007f55
 8007ebc:	08007f55 	.word	0x08007f55
 8007ec0:	08007f35 	.word	0x08007f35
 8007ec4:	08007f55 	.word	0x08007f55
 8007ec8:	08007f55 	.word	0x08007f55
 8007ecc:	08007f55 	.word	0x08007f55
 8007ed0:	08007f55 	.word	0x08007f55
 8007ed4:	08007f55 	.word	0x08007f55
 8007ed8:	08007f55 	.word	0x08007f55
 8007edc:	08007f55 	.word	0x08007f55
 8007ee0:	08007f3d 	.word	0x08007f3d
 8007ee4:	08007f55 	.word	0x08007f55
 8007ee8:	08007f55 	.word	0x08007f55
 8007eec:	08007f55 	.word	0x08007f55
 8007ef0:	08007f55 	.word	0x08007f55
 8007ef4:	08007f55 	.word	0x08007f55
 8007ef8:	08007f55 	.word	0x08007f55
 8007efc:	08007f55 	.word	0x08007f55
 8007f00:	08007f45 	.word	0x08007f45
 8007f04:	08007f55 	.word	0x08007f55
 8007f08:	08007f55 	.word	0x08007f55
 8007f0c:	08007f55 	.word	0x08007f55
 8007f10:	08007f55 	.word	0x08007f55
 8007f14:	08007f55 	.word	0x08007f55
 8007f18:	08007f55 	.word	0x08007f55
 8007f1c:	08007f55 	.word	0x08007f55
 8007f20:	08007f4d 	.word	0x08007f4d
 8007f24:	2301      	movs	r3, #1
 8007f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f2a:	e0bc      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007f2c:	2304      	movs	r3, #4
 8007f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f32:	e0b8      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007f34:	2308      	movs	r3, #8
 8007f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f3a:	e0b4      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007f3c:	2310      	movs	r3, #16
 8007f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f42:	e0b0      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007f44:	2320      	movs	r3, #32
 8007f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f4a:	e0ac      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007f4c:	2340      	movs	r3, #64	@ 0x40
 8007f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f52:	e0a8      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007f54:	2380      	movs	r3, #128	@ 0x80
 8007f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f5a:	e0a4      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a8f      	ldr	r2, [pc, #572]	@ (80081a0 <UART_SetConfig+0x6a0>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d130      	bne.n	8007fc8 <UART_SetConfig+0x4c8>
 8007f66:	4b8d      	ldr	r3, [pc, #564]	@ (800819c <UART_SetConfig+0x69c>)
 8007f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f6a:	f003 0307 	and.w	r3, r3, #7
 8007f6e:	2b05      	cmp	r3, #5
 8007f70:	d826      	bhi.n	8007fc0 <UART_SetConfig+0x4c0>
 8007f72:	a201      	add	r2, pc, #4	@ (adr r2, 8007f78 <UART_SetConfig+0x478>)
 8007f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f78:	08007f91 	.word	0x08007f91
 8007f7c:	08007f99 	.word	0x08007f99
 8007f80:	08007fa1 	.word	0x08007fa1
 8007f84:	08007fa9 	.word	0x08007fa9
 8007f88:	08007fb1 	.word	0x08007fb1
 8007f8c:	08007fb9 	.word	0x08007fb9
 8007f90:	2300      	movs	r3, #0
 8007f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f96:	e086      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007f98:	2304      	movs	r3, #4
 8007f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f9e:	e082      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007fa0:	2308      	movs	r3, #8
 8007fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fa6:	e07e      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007fa8:	2310      	movs	r3, #16
 8007faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fae:	e07a      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007fb0:	2320      	movs	r3, #32
 8007fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fb6:	e076      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007fb8:	2340      	movs	r3, #64	@ 0x40
 8007fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fbe:	e072      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007fc0:	2380      	movs	r3, #128	@ 0x80
 8007fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fc6:	e06e      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a75      	ldr	r2, [pc, #468]	@ (80081a4 <UART_SetConfig+0x6a4>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d130      	bne.n	8008034 <UART_SetConfig+0x534>
 8007fd2:	4b72      	ldr	r3, [pc, #456]	@ (800819c <UART_SetConfig+0x69c>)
 8007fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fd6:	f003 0307 	and.w	r3, r3, #7
 8007fda:	2b05      	cmp	r3, #5
 8007fdc:	d826      	bhi.n	800802c <UART_SetConfig+0x52c>
 8007fde:	a201      	add	r2, pc, #4	@ (adr r2, 8007fe4 <UART_SetConfig+0x4e4>)
 8007fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe4:	08007ffd 	.word	0x08007ffd
 8007fe8:	08008005 	.word	0x08008005
 8007fec:	0800800d 	.word	0x0800800d
 8007ff0:	08008015 	.word	0x08008015
 8007ff4:	0800801d 	.word	0x0800801d
 8007ff8:	08008025 	.word	0x08008025
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008002:	e050      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8008004:	2304      	movs	r3, #4
 8008006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800800a:	e04c      	b.n	80080a6 <UART_SetConfig+0x5a6>
 800800c:	2308      	movs	r3, #8
 800800e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008012:	e048      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8008014:	2310      	movs	r3, #16
 8008016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800801a:	e044      	b.n	80080a6 <UART_SetConfig+0x5a6>
 800801c:	2320      	movs	r3, #32
 800801e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008022:	e040      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8008024:	2340      	movs	r3, #64	@ 0x40
 8008026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800802a:	e03c      	b.n	80080a6 <UART_SetConfig+0x5a6>
 800802c:	2380      	movs	r3, #128	@ 0x80
 800802e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008032:	e038      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a5b      	ldr	r2, [pc, #364]	@ (80081a8 <UART_SetConfig+0x6a8>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d130      	bne.n	80080a0 <UART_SetConfig+0x5a0>
 800803e:	4b57      	ldr	r3, [pc, #348]	@ (800819c <UART_SetConfig+0x69c>)
 8008040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008042:	f003 0307 	and.w	r3, r3, #7
 8008046:	2b05      	cmp	r3, #5
 8008048:	d826      	bhi.n	8008098 <UART_SetConfig+0x598>
 800804a:	a201      	add	r2, pc, #4	@ (adr r2, 8008050 <UART_SetConfig+0x550>)
 800804c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008050:	08008069 	.word	0x08008069
 8008054:	08008071 	.word	0x08008071
 8008058:	08008079 	.word	0x08008079
 800805c:	08008081 	.word	0x08008081
 8008060:	08008089 	.word	0x08008089
 8008064:	08008091 	.word	0x08008091
 8008068:	2302      	movs	r3, #2
 800806a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800806e:	e01a      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8008070:	2304      	movs	r3, #4
 8008072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008076:	e016      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8008078:	2308      	movs	r3, #8
 800807a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800807e:	e012      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8008080:	2310      	movs	r3, #16
 8008082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008086:	e00e      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8008088:	2320      	movs	r3, #32
 800808a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800808e:	e00a      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8008090:	2340      	movs	r3, #64	@ 0x40
 8008092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008096:	e006      	b.n	80080a6 <UART_SetConfig+0x5a6>
 8008098:	2380      	movs	r3, #128	@ 0x80
 800809a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800809e:	e002      	b.n	80080a6 <UART_SetConfig+0x5a6>
 80080a0:	2380      	movs	r3, #128	@ 0x80
 80080a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a3f      	ldr	r2, [pc, #252]	@ (80081a8 <UART_SetConfig+0x6a8>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	f040 80f8 	bne.w	80082a2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80080b2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80080b6:	2b20      	cmp	r3, #32
 80080b8:	dc46      	bgt.n	8008148 <UART_SetConfig+0x648>
 80080ba:	2b02      	cmp	r3, #2
 80080bc:	f2c0 8082 	blt.w	80081c4 <UART_SetConfig+0x6c4>
 80080c0:	3b02      	subs	r3, #2
 80080c2:	2b1e      	cmp	r3, #30
 80080c4:	d87e      	bhi.n	80081c4 <UART_SetConfig+0x6c4>
 80080c6:	a201      	add	r2, pc, #4	@ (adr r2, 80080cc <UART_SetConfig+0x5cc>)
 80080c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080cc:	0800814f 	.word	0x0800814f
 80080d0:	080081c5 	.word	0x080081c5
 80080d4:	08008157 	.word	0x08008157
 80080d8:	080081c5 	.word	0x080081c5
 80080dc:	080081c5 	.word	0x080081c5
 80080e0:	080081c5 	.word	0x080081c5
 80080e4:	08008167 	.word	0x08008167
 80080e8:	080081c5 	.word	0x080081c5
 80080ec:	080081c5 	.word	0x080081c5
 80080f0:	080081c5 	.word	0x080081c5
 80080f4:	080081c5 	.word	0x080081c5
 80080f8:	080081c5 	.word	0x080081c5
 80080fc:	080081c5 	.word	0x080081c5
 8008100:	080081c5 	.word	0x080081c5
 8008104:	08008177 	.word	0x08008177
 8008108:	080081c5 	.word	0x080081c5
 800810c:	080081c5 	.word	0x080081c5
 8008110:	080081c5 	.word	0x080081c5
 8008114:	080081c5 	.word	0x080081c5
 8008118:	080081c5 	.word	0x080081c5
 800811c:	080081c5 	.word	0x080081c5
 8008120:	080081c5 	.word	0x080081c5
 8008124:	080081c5 	.word	0x080081c5
 8008128:	080081c5 	.word	0x080081c5
 800812c:	080081c5 	.word	0x080081c5
 8008130:	080081c5 	.word	0x080081c5
 8008134:	080081c5 	.word	0x080081c5
 8008138:	080081c5 	.word	0x080081c5
 800813c:	080081c5 	.word	0x080081c5
 8008140:	080081c5 	.word	0x080081c5
 8008144:	080081b7 	.word	0x080081b7
 8008148:	2b40      	cmp	r3, #64	@ 0x40
 800814a:	d037      	beq.n	80081bc <UART_SetConfig+0x6bc>
 800814c:	e03a      	b.n	80081c4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800814e:	f7fd fe7d 	bl	8005e4c <HAL_RCCEx_GetD3PCLK1Freq>
 8008152:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008154:	e03c      	b.n	80081d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008156:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800815a:	4618      	mov	r0, r3
 800815c:	f7fd fe8c 	bl	8005e78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008164:	e034      	b.n	80081d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008166:	f107 0318 	add.w	r3, r7, #24
 800816a:	4618      	mov	r0, r3
 800816c:	f7fd ffd8 	bl	8006120 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008174:	e02c      	b.n	80081d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008176:	4b09      	ldr	r3, [pc, #36]	@ (800819c <UART_SetConfig+0x69c>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 0320 	and.w	r3, r3, #32
 800817e:	2b00      	cmp	r3, #0
 8008180:	d016      	beq.n	80081b0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008182:	4b06      	ldr	r3, [pc, #24]	@ (800819c <UART_SetConfig+0x69c>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	08db      	lsrs	r3, r3, #3
 8008188:	f003 0303 	and.w	r3, r3, #3
 800818c:	4a07      	ldr	r2, [pc, #28]	@ (80081ac <UART_SetConfig+0x6ac>)
 800818e:	fa22 f303 	lsr.w	r3, r2, r3
 8008192:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008194:	e01c      	b.n	80081d0 <UART_SetConfig+0x6d0>
 8008196:	bf00      	nop
 8008198:	40011400 	.word	0x40011400
 800819c:	58024400 	.word	0x58024400
 80081a0:	40007800 	.word	0x40007800
 80081a4:	40007c00 	.word	0x40007c00
 80081a8:	58000c00 	.word	0x58000c00
 80081ac:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80081b0:	4b9d      	ldr	r3, [pc, #628]	@ (8008428 <UART_SetConfig+0x928>)
 80081b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081b4:	e00c      	b.n	80081d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80081b6:	4b9d      	ldr	r3, [pc, #628]	@ (800842c <UART_SetConfig+0x92c>)
 80081b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081ba:	e009      	b.n	80081d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081c2:	e005      	b.n	80081d0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80081c4:	2300      	movs	r3, #0
 80081c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80081ce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80081d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f000 81de 	beq.w	8008594 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081dc:	4a94      	ldr	r2, [pc, #592]	@ (8008430 <UART_SetConfig+0x930>)
 80081de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081e2:	461a      	mov	r2, r3
 80081e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80081ea:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	685a      	ldr	r2, [r3, #4]
 80081f0:	4613      	mov	r3, r2
 80081f2:	005b      	lsls	r3, r3, #1
 80081f4:	4413      	add	r3, r2
 80081f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d305      	bcc.n	8008208 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008202:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008204:	429a      	cmp	r2, r3
 8008206:	d903      	bls.n	8008210 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800820e:	e1c1      	b.n	8008594 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008210:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008212:	2200      	movs	r2, #0
 8008214:	60bb      	str	r3, [r7, #8]
 8008216:	60fa      	str	r2, [r7, #12]
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800821c:	4a84      	ldr	r2, [pc, #528]	@ (8008430 <UART_SetConfig+0x930>)
 800821e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008222:	b29b      	uxth	r3, r3
 8008224:	2200      	movs	r2, #0
 8008226:	603b      	str	r3, [r7, #0]
 8008228:	607a      	str	r2, [r7, #4]
 800822a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800822e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008232:	f7f8 f8a5 	bl	8000380 <__aeabi_uldivmod>
 8008236:	4602      	mov	r2, r0
 8008238:	460b      	mov	r3, r1
 800823a:	4610      	mov	r0, r2
 800823c:	4619      	mov	r1, r3
 800823e:	f04f 0200 	mov.w	r2, #0
 8008242:	f04f 0300 	mov.w	r3, #0
 8008246:	020b      	lsls	r3, r1, #8
 8008248:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800824c:	0202      	lsls	r2, r0, #8
 800824e:	6979      	ldr	r1, [r7, #20]
 8008250:	6849      	ldr	r1, [r1, #4]
 8008252:	0849      	lsrs	r1, r1, #1
 8008254:	2000      	movs	r0, #0
 8008256:	460c      	mov	r4, r1
 8008258:	4605      	mov	r5, r0
 800825a:	eb12 0804 	adds.w	r8, r2, r4
 800825e:	eb43 0905 	adc.w	r9, r3, r5
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	469a      	mov	sl, r3
 800826a:	4693      	mov	fp, r2
 800826c:	4652      	mov	r2, sl
 800826e:	465b      	mov	r3, fp
 8008270:	4640      	mov	r0, r8
 8008272:	4649      	mov	r1, r9
 8008274:	f7f8 f884 	bl	8000380 <__aeabi_uldivmod>
 8008278:	4602      	mov	r2, r0
 800827a:	460b      	mov	r3, r1
 800827c:	4613      	mov	r3, r2
 800827e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008282:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008286:	d308      	bcc.n	800829a <UART_SetConfig+0x79a>
 8008288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800828a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800828e:	d204      	bcs.n	800829a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008296:	60da      	str	r2, [r3, #12]
 8008298:	e17c      	b.n	8008594 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80082a0:	e178      	b.n	8008594 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	69db      	ldr	r3, [r3, #28]
 80082a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082aa:	f040 80c5 	bne.w	8008438 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80082ae:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80082b2:	2b20      	cmp	r3, #32
 80082b4:	dc48      	bgt.n	8008348 <UART_SetConfig+0x848>
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	db7b      	blt.n	80083b2 <UART_SetConfig+0x8b2>
 80082ba:	2b20      	cmp	r3, #32
 80082bc:	d879      	bhi.n	80083b2 <UART_SetConfig+0x8b2>
 80082be:	a201      	add	r2, pc, #4	@ (adr r2, 80082c4 <UART_SetConfig+0x7c4>)
 80082c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c4:	0800834f 	.word	0x0800834f
 80082c8:	08008357 	.word	0x08008357
 80082cc:	080083b3 	.word	0x080083b3
 80082d0:	080083b3 	.word	0x080083b3
 80082d4:	0800835f 	.word	0x0800835f
 80082d8:	080083b3 	.word	0x080083b3
 80082dc:	080083b3 	.word	0x080083b3
 80082e0:	080083b3 	.word	0x080083b3
 80082e4:	0800836f 	.word	0x0800836f
 80082e8:	080083b3 	.word	0x080083b3
 80082ec:	080083b3 	.word	0x080083b3
 80082f0:	080083b3 	.word	0x080083b3
 80082f4:	080083b3 	.word	0x080083b3
 80082f8:	080083b3 	.word	0x080083b3
 80082fc:	080083b3 	.word	0x080083b3
 8008300:	080083b3 	.word	0x080083b3
 8008304:	0800837f 	.word	0x0800837f
 8008308:	080083b3 	.word	0x080083b3
 800830c:	080083b3 	.word	0x080083b3
 8008310:	080083b3 	.word	0x080083b3
 8008314:	080083b3 	.word	0x080083b3
 8008318:	080083b3 	.word	0x080083b3
 800831c:	080083b3 	.word	0x080083b3
 8008320:	080083b3 	.word	0x080083b3
 8008324:	080083b3 	.word	0x080083b3
 8008328:	080083b3 	.word	0x080083b3
 800832c:	080083b3 	.word	0x080083b3
 8008330:	080083b3 	.word	0x080083b3
 8008334:	080083b3 	.word	0x080083b3
 8008338:	080083b3 	.word	0x080083b3
 800833c:	080083b3 	.word	0x080083b3
 8008340:	080083b3 	.word	0x080083b3
 8008344:	080083a5 	.word	0x080083a5
 8008348:	2b40      	cmp	r3, #64	@ 0x40
 800834a:	d02e      	beq.n	80083aa <UART_SetConfig+0x8aa>
 800834c:	e031      	b.n	80083b2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800834e:	f7fc fb47 	bl	80049e0 <HAL_RCC_GetPCLK1Freq>
 8008352:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008354:	e033      	b.n	80083be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008356:	f7fc fb59 	bl	8004a0c <HAL_RCC_GetPCLK2Freq>
 800835a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800835c:	e02f      	b.n	80083be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800835e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008362:	4618      	mov	r0, r3
 8008364:	f7fd fd88 	bl	8005e78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800836a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800836c:	e027      	b.n	80083be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800836e:	f107 0318 	add.w	r3, r7, #24
 8008372:	4618      	mov	r0, r3
 8008374:	f7fd fed4 	bl	8006120 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800837c:	e01f      	b.n	80083be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800837e:	4b2d      	ldr	r3, [pc, #180]	@ (8008434 <UART_SetConfig+0x934>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f003 0320 	and.w	r3, r3, #32
 8008386:	2b00      	cmp	r3, #0
 8008388:	d009      	beq.n	800839e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800838a:	4b2a      	ldr	r3, [pc, #168]	@ (8008434 <UART_SetConfig+0x934>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	08db      	lsrs	r3, r3, #3
 8008390:	f003 0303 	and.w	r3, r3, #3
 8008394:	4a24      	ldr	r2, [pc, #144]	@ (8008428 <UART_SetConfig+0x928>)
 8008396:	fa22 f303 	lsr.w	r3, r2, r3
 800839a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800839c:	e00f      	b.n	80083be <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800839e:	4b22      	ldr	r3, [pc, #136]	@ (8008428 <UART_SetConfig+0x928>)
 80083a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083a2:	e00c      	b.n	80083be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80083a4:	4b21      	ldr	r3, [pc, #132]	@ (800842c <UART_SetConfig+0x92c>)
 80083a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083a8:	e009      	b.n	80083be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083b0:	e005      	b.n	80083be <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80083b2:	2300      	movs	r3, #0
 80083b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80083bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80083be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f000 80e7 	beq.w	8008594 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ca:	4a19      	ldr	r2, [pc, #100]	@ (8008430 <UART_SetConfig+0x930>)
 80083cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083d0:	461a      	mov	r2, r3
 80083d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80083d8:	005a      	lsls	r2, r3, #1
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	085b      	lsrs	r3, r3, #1
 80083e0:	441a      	add	r2, r3
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ee:	2b0f      	cmp	r3, #15
 80083f0:	d916      	bls.n	8008420 <UART_SetConfig+0x920>
 80083f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083f8:	d212      	bcs.n	8008420 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80083fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	f023 030f 	bic.w	r3, r3, #15
 8008402:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008406:	085b      	lsrs	r3, r3, #1
 8008408:	b29b      	uxth	r3, r3
 800840a:	f003 0307 	and.w	r3, r3, #7
 800840e:	b29a      	uxth	r2, r3
 8008410:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008412:	4313      	orrs	r3, r2
 8008414:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800841c:	60da      	str	r2, [r3, #12]
 800841e:	e0b9      	b.n	8008594 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008426:	e0b5      	b.n	8008594 <UART_SetConfig+0xa94>
 8008428:	03d09000 	.word	0x03d09000
 800842c:	003d0900 	.word	0x003d0900
 8008430:	0800b110 	.word	0x0800b110
 8008434:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008438:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800843c:	2b20      	cmp	r3, #32
 800843e:	dc49      	bgt.n	80084d4 <UART_SetConfig+0x9d4>
 8008440:	2b00      	cmp	r3, #0
 8008442:	db7c      	blt.n	800853e <UART_SetConfig+0xa3e>
 8008444:	2b20      	cmp	r3, #32
 8008446:	d87a      	bhi.n	800853e <UART_SetConfig+0xa3e>
 8008448:	a201      	add	r2, pc, #4	@ (adr r2, 8008450 <UART_SetConfig+0x950>)
 800844a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800844e:	bf00      	nop
 8008450:	080084db 	.word	0x080084db
 8008454:	080084e3 	.word	0x080084e3
 8008458:	0800853f 	.word	0x0800853f
 800845c:	0800853f 	.word	0x0800853f
 8008460:	080084eb 	.word	0x080084eb
 8008464:	0800853f 	.word	0x0800853f
 8008468:	0800853f 	.word	0x0800853f
 800846c:	0800853f 	.word	0x0800853f
 8008470:	080084fb 	.word	0x080084fb
 8008474:	0800853f 	.word	0x0800853f
 8008478:	0800853f 	.word	0x0800853f
 800847c:	0800853f 	.word	0x0800853f
 8008480:	0800853f 	.word	0x0800853f
 8008484:	0800853f 	.word	0x0800853f
 8008488:	0800853f 	.word	0x0800853f
 800848c:	0800853f 	.word	0x0800853f
 8008490:	0800850b 	.word	0x0800850b
 8008494:	0800853f 	.word	0x0800853f
 8008498:	0800853f 	.word	0x0800853f
 800849c:	0800853f 	.word	0x0800853f
 80084a0:	0800853f 	.word	0x0800853f
 80084a4:	0800853f 	.word	0x0800853f
 80084a8:	0800853f 	.word	0x0800853f
 80084ac:	0800853f 	.word	0x0800853f
 80084b0:	0800853f 	.word	0x0800853f
 80084b4:	0800853f 	.word	0x0800853f
 80084b8:	0800853f 	.word	0x0800853f
 80084bc:	0800853f 	.word	0x0800853f
 80084c0:	0800853f 	.word	0x0800853f
 80084c4:	0800853f 	.word	0x0800853f
 80084c8:	0800853f 	.word	0x0800853f
 80084cc:	0800853f 	.word	0x0800853f
 80084d0:	08008531 	.word	0x08008531
 80084d4:	2b40      	cmp	r3, #64	@ 0x40
 80084d6:	d02e      	beq.n	8008536 <UART_SetConfig+0xa36>
 80084d8:	e031      	b.n	800853e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084da:	f7fc fa81 	bl	80049e0 <HAL_RCC_GetPCLK1Freq>
 80084de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80084e0:	e033      	b.n	800854a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084e2:	f7fc fa93 	bl	8004a0c <HAL_RCC_GetPCLK2Freq>
 80084e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80084e8:	e02f      	b.n	800854a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80084ee:	4618      	mov	r0, r3
 80084f0:	f7fd fcc2 	bl	8005e78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80084f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084f8:	e027      	b.n	800854a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084fa:	f107 0318 	add.w	r3, r7, #24
 80084fe:	4618      	mov	r0, r3
 8008500:	f7fd fe0e 	bl	8006120 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008508:	e01f      	b.n	800854a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800850a:	4b2d      	ldr	r3, [pc, #180]	@ (80085c0 <UART_SetConfig+0xac0>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 0320 	and.w	r3, r3, #32
 8008512:	2b00      	cmp	r3, #0
 8008514:	d009      	beq.n	800852a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008516:	4b2a      	ldr	r3, [pc, #168]	@ (80085c0 <UART_SetConfig+0xac0>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	08db      	lsrs	r3, r3, #3
 800851c:	f003 0303 	and.w	r3, r3, #3
 8008520:	4a28      	ldr	r2, [pc, #160]	@ (80085c4 <UART_SetConfig+0xac4>)
 8008522:	fa22 f303 	lsr.w	r3, r2, r3
 8008526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008528:	e00f      	b.n	800854a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800852a:	4b26      	ldr	r3, [pc, #152]	@ (80085c4 <UART_SetConfig+0xac4>)
 800852c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800852e:	e00c      	b.n	800854a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008530:	4b25      	ldr	r3, [pc, #148]	@ (80085c8 <UART_SetConfig+0xac8>)
 8008532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008534:	e009      	b.n	800854a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008536:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800853a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800853c:	e005      	b.n	800854a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800853e:	2300      	movs	r3, #0
 8008540:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008548:	bf00      	nop
    }

    if (pclk != 0U)
 800854a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800854c:	2b00      	cmp	r3, #0
 800854e:	d021      	beq.n	8008594 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008554:	4a1d      	ldr	r2, [pc, #116]	@ (80085cc <UART_SetConfig+0xacc>)
 8008556:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800855a:	461a      	mov	r2, r3
 800855c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800855e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	085b      	lsrs	r3, r3, #1
 8008568:	441a      	add	r2, r3
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008572:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008576:	2b0f      	cmp	r3, #15
 8008578:	d909      	bls.n	800858e <UART_SetConfig+0xa8e>
 800857a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800857c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008580:	d205      	bcs.n	800858e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008584:	b29a      	uxth	r2, r3
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	60da      	str	r2, [r3, #12]
 800858c:	e002      	b.n	8008594 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	2201      	movs	r2, #1
 8008598:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	2201      	movs	r2, #1
 80085a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	2200      	movs	r2, #0
 80085a8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	2200      	movs	r2, #0
 80085ae:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80085b0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3748      	adds	r7, #72	@ 0x48
 80085b8:	46bd      	mov	sp, r7
 80085ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085be:	bf00      	nop
 80085c0:	58024400 	.word	0x58024400
 80085c4:	03d09000 	.word	0x03d09000
 80085c8:	003d0900 	.word	0x003d0900
 80085cc:	0800b110 	.word	0x0800b110

080085d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085dc:	f003 0308 	and.w	r3, r3, #8
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d00a      	beq.n	80085fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	430a      	orrs	r2, r1
 80085f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085fe:	f003 0301 	and.w	r3, r3, #1
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00a      	beq.n	800861c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	430a      	orrs	r2, r1
 800861a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008620:	f003 0302 	and.w	r3, r3, #2
 8008624:	2b00      	cmp	r3, #0
 8008626:	d00a      	beq.n	800863e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	430a      	orrs	r2, r1
 800863c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008642:	f003 0304 	and.w	r3, r3, #4
 8008646:	2b00      	cmp	r3, #0
 8008648:	d00a      	beq.n	8008660 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	430a      	orrs	r2, r1
 800865e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008664:	f003 0310 	and.w	r3, r3, #16
 8008668:	2b00      	cmp	r3, #0
 800866a:	d00a      	beq.n	8008682 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	430a      	orrs	r2, r1
 8008680:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008686:	f003 0320 	and.w	r3, r3, #32
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00a      	beq.n	80086a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	430a      	orrs	r2, r1
 80086a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d01a      	beq.n	80086e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	430a      	orrs	r2, r1
 80086c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086ce:	d10a      	bne.n	80086e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	430a      	orrs	r2, r1
 80086e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d00a      	beq.n	8008708 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	430a      	orrs	r2, r1
 8008706:	605a      	str	r2, [r3, #4]
  }
}
 8008708:	bf00      	nop
 800870a:	370c      	adds	r7, #12
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b098      	sub	sp, #96	@ 0x60
 8008718:	af02      	add	r7, sp, #8
 800871a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2200      	movs	r2, #0
 8008720:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008724:	f7fa fafe 	bl	8002d24 <HAL_GetTick>
 8008728:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f003 0308 	and.w	r3, r3, #8
 8008734:	2b08      	cmp	r3, #8
 8008736:	d12f      	bne.n	8008798 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008738:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800873c:	9300      	str	r3, [sp, #0]
 800873e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008740:	2200      	movs	r2, #0
 8008742:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 f88e 	bl	8008868 <UART_WaitOnFlagUntilTimeout>
 800874c:	4603      	mov	r3, r0
 800874e:	2b00      	cmp	r3, #0
 8008750:	d022      	beq.n	8008798 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800875a:	e853 3f00 	ldrex	r3, [r3]
 800875e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008762:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008766:	653b      	str	r3, [r7, #80]	@ 0x50
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	461a      	mov	r2, r3
 800876e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008770:	647b      	str	r3, [r7, #68]	@ 0x44
 8008772:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008774:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008776:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008778:	e841 2300 	strex	r3, r2, [r1]
 800877c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800877e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008780:	2b00      	cmp	r3, #0
 8008782:	d1e6      	bne.n	8008752 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2220      	movs	r2, #32
 8008788:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2200      	movs	r2, #0
 8008790:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008794:	2303      	movs	r3, #3
 8008796:	e063      	b.n	8008860 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f003 0304 	and.w	r3, r3, #4
 80087a2:	2b04      	cmp	r3, #4
 80087a4:	d149      	bne.n	800883a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087a6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80087aa:	9300      	str	r3, [sp, #0]
 80087ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80087ae:	2200      	movs	r2, #0
 80087b0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 f857 	bl	8008868 <UART_WaitOnFlagUntilTimeout>
 80087ba:	4603      	mov	r3, r0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d03c      	beq.n	800883a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c8:	e853 3f00 	ldrex	r3, [r3]
 80087cc:	623b      	str	r3, [r7, #32]
   return(result);
 80087ce:	6a3b      	ldr	r3, [r7, #32]
 80087d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80087d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	461a      	mov	r2, r3
 80087dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087de:	633b      	str	r3, [r7, #48]	@ 0x30
 80087e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087e6:	e841 2300 	strex	r3, r2, [r1]
 80087ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80087ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d1e6      	bne.n	80087c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	3308      	adds	r3, #8
 80087f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	e853 3f00 	ldrex	r3, [r3]
 8008800:	60fb      	str	r3, [r7, #12]
   return(result);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f023 0301 	bic.w	r3, r3, #1
 8008808:	64bb      	str	r3, [r7, #72]	@ 0x48
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	3308      	adds	r3, #8
 8008810:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008812:	61fa      	str	r2, [r7, #28]
 8008814:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008816:	69b9      	ldr	r1, [r7, #24]
 8008818:	69fa      	ldr	r2, [r7, #28]
 800881a:	e841 2300 	strex	r3, r2, [r1]
 800881e:	617b      	str	r3, [r7, #20]
   return(result);
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d1e5      	bne.n	80087f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2220      	movs	r2, #32
 800882a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008836:	2303      	movs	r3, #3
 8008838:	e012      	b.n	8008860 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2220      	movs	r2, #32
 800883e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2220      	movs	r2, #32
 8008846:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3758      	adds	r7, #88	@ 0x58
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	603b      	str	r3, [r7, #0]
 8008874:	4613      	mov	r3, r2
 8008876:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008878:	e04f      	b.n	800891a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008880:	d04b      	beq.n	800891a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008882:	f7fa fa4f 	bl	8002d24 <HAL_GetTick>
 8008886:	4602      	mov	r2, r0
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	1ad3      	subs	r3, r2, r3
 800888c:	69ba      	ldr	r2, [r7, #24]
 800888e:	429a      	cmp	r2, r3
 8008890:	d302      	bcc.n	8008898 <UART_WaitOnFlagUntilTimeout+0x30>
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d101      	bne.n	800889c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008898:	2303      	movs	r3, #3
 800889a:	e04e      	b.n	800893a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f003 0304 	and.w	r3, r3, #4
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d037      	beq.n	800891a <UART_WaitOnFlagUntilTimeout+0xb2>
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	2b80      	cmp	r3, #128	@ 0x80
 80088ae:	d034      	beq.n	800891a <UART_WaitOnFlagUntilTimeout+0xb2>
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	2b40      	cmp	r3, #64	@ 0x40
 80088b4:	d031      	beq.n	800891a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	69db      	ldr	r3, [r3, #28]
 80088bc:	f003 0308 	and.w	r3, r3, #8
 80088c0:	2b08      	cmp	r3, #8
 80088c2:	d110      	bne.n	80088e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2208      	movs	r2, #8
 80088ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088cc:	68f8      	ldr	r0, [r7, #12]
 80088ce:	f000 f839 	bl	8008944 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2208      	movs	r2, #8
 80088d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2200      	movs	r2, #0
 80088de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	e029      	b.n	800893a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	69db      	ldr	r3, [r3, #28]
 80088ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80088f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088f4:	d111      	bne.n	800891a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80088fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008900:	68f8      	ldr	r0, [r7, #12]
 8008902:	f000 f81f 	bl	8008944 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2220      	movs	r2, #32
 800890a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2200      	movs	r2, #0
 8008912:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008916:	2303      	movs	r3, #3
 8008918:	e00f      	b.n	800893a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	69da      	ldr	r2, [r3, #28]
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	4013      	ands	r3, r2
 8008924:	68ba      	ldr	r2, [r7, #8]
 8008926:	429a      	cmp	r2, r3
 8008928:	bf0c      	ite	eq
 800892a:	2301      	moveq	r3, #1
 800892c:	2300      	movne	r3, #0
 800892e:	b2db      	uxtb	r3, r3
 8008930:	461a      	mov	r2, r3
 8008932:	79fb      	ldrb	r3, [r7, #7]
 8008934:	429a      	cmp	r2, r3
 8008936:	d0a0      	beq.n	800887a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008938:	2300      	movs	r3, #0
}
 800893a:	4618      	mov	r0, r3
 800893c:	3710      	adds	r7, #16
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
	...

08008944 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008944:	b480      	push	{r7}
 8008946:	b095      	sub	sp, #84	@ 0x54
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008954:	e853 3f00 	ldrex	r3, [r3]
 8008958:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800895a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800895c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008960:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	461a      	mov	r2, r3
 8008968:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800896a:	643b      	str	r3, [r7, #64]	@ 0x40
 800896c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008970:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008972:	e841 2300 	strex	r3, r2, [r1]
 8008976:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800897a:	2b00      	cmp	r3, #0
 800897c:	d1e6      	bne.n	800894c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	3308      	adds	r3, #8
 8008984:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008986:	6a3b      	ldr	r3, [r7, #32]
 8008988:	e853 3f00 	ldrex	r3, [r3]
 800898c:	61fb      	str	r3, [r7, #28]
   return(result);
 800898e:	69fa      	ldr	r2, [r7, #28]
 8008990:	4b1e      	ldr	r3, [pc, #120]	@ (8008a0c <UART_EndRxTransfer+0xc8>)
 8008992:	4013      	ands	r3, r2
 8008994:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	3308      	adds	r3, #8
 800899c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800899e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80089a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089a6:	e841 2300 	strex	r3, r2, [r1]
 80089aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80089ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1e5      	bne.n	800897e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d118      	bne.n	80089ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	e853 3f00 	ldrex	r3, [r3]
 80089c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	f023 0310 	bic.w	r3, r3, #16
 80089ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	461a      	mov	r2, r3
 80089d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089d8:	61bb      	str	r3, [r7, #24]
 80089da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089dc:	6979      	ldr	r1, [r7, #20]
 80089de:	69ba      	ldr	r2, [r7, #24]
 80089e0:	e841 2300 	strex	r3, r2, [r1]
 80089e4:	613b      	str	r3, [r7, #16]
   return(result);
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d1e6      	bne.n	80089ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2220      	movs	r2, #32
 80089f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008a00:	bf00      	nop
 8008a02:	3754      	adds	r7, #84	@ 0x54
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr
 8008a0c:	effffffe 	.word	0xeffffffe

08008a10 <std>:
 8008a10:	2300      	movs	r3, #0
 8008a12:	b510      	push	{r4, lr}
 8008a14:	4604      	mov	r4, r0
 8008a16:	e9c0 3300 	strd	r3, r3, [r0]
 8008a1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a1e:	6083      	str	r3, [r0, #8]
 8008a20:	8181      	strh	r1, [r0, #12]
 8008a22:	6643      	str	r3, [r0, #100]	@ 0x64
 8008a24:	81c2      	strh	r2, [r0, #14]
 8008a26:	6183      	str	r3, [r0, #24]
 8008a28:	4619      	mov	r1, r3
 8008a2a:	2208      	movs	r2, #8
 8008a2c:	305c      	adds	r0, #92	@ 0x5c
 8008a2e:	f000 f906 	bl	8008c3e <memset>
 8008a32:	4b0d      	ldr	r3, [pc, #52]	@ (8008a68 <std+0x58>)
 8008a34:	6263      	str	r3, [r4, #36]	@ 0x24
 8008a36:	4b0d      	ldr	r3, [pc, #52]	@ (8008a6c <std+0x5c>)
 8008a38:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8008a70 <std+0x60>)
 8008a3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8008a74 <std+0x64>)
 8008a40:	6323      	str	r3, [r4, #48]	@ 0x30
 8008a42:	4b0d      	ldr	r3, [pc, #52]	@ (8008a78 <std+0x68>)
 8008a44:	6224      	str	r4, [r4, #32]
 8008a46:	429c      	cmp	r4, r3
 8008a48:	d006      	beq.n	8008a58 <std+0x48>
 8008a4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008a4e:	4294      	cmp	r4, r2
 8008a50:	d002      	beq.n	8008a58 <std+0x48>
 8008a52:	33d0      	adds	r3, #208	@ 0xd0
 8008a54:	429c      	cmp	r4, r3
 8008a56:	d105      	bne.n	8008a64 <std+0x54>
 8008a58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a60:	f000 b966 	b.w	8008d30 <__retarget_lock_init_recursive>
 8008a64:	bd10      	pop	{r4, pc}
 8008a66:	bf00      	nop
 8008a68:	08008bb9 	.word	0x08008bb9
 8008a6c:	08008bdb 	.word	0x08008bdb
 8008a70:	08008c13 	.word	0x08008c13
 8008a74:	08008c37 	.word	0x08008c37
 8008a78:	24000270 	.word	0x24000270

08008a7c <stdio_exit_handler>:
 8008a7c:	4a02      	ldr	r2, [pc, #8]	@ (8008a88 <stdio_exit_handler+0xc>)
 8008a7e:	4903      	ldr	r1, [pc, #12]	@ (8008a8c <stdio_exit_handler+0x10>)
 8008a80:	4803      	ldr	r0, [pc, #12]	@ (8008a90 <stdio_exit_handler+0x14>)
 8008a82:	f000 b869 	b.w	8008b58 <_fwalk_sglue>
 8008a86:	bf00      	nop
 8008a88:	2400002c 	.word	0x2400002c
 8008a8c:	080095cd 	.word	0x080095cd
 8008a90:	2400003c 	.word	0x2400003c

08008a94 <cleanup_stdio>:
 8008a94:	6841      	ldr	r1, [r0, #4]
 8008a96:	4b0c      	ldr	r3, [pc, #48]	@ (8008ac8 <cleanup_stdio+0x34>)
 8008a98:	4299      	cmp	r1, r3
 8008a9a:	b510      	push	{r4, lr}
 8008a9c:	4604      	mov	r4, r0
 8008a9e:	d001      	beq.n	8008aa4 <cleanup_stdio+0x10>
 8008aa0:	f000 fd94 	bl	80095cc <_fflush_r>
 8008aa4:	68a1      	ldr	r1, [r4, #8]
 8008aa6:	4b09      	ldr	r3, [pc, #36]	@ (8008acc <cleanup_stdio+0x38>)
 8008aa8:	4299      	cmp	r1, r3
 8008aaa:	d002      	beq.n	8008ab2 <cleanup_stdio+0x1e>
 8008aac:	4620      	mov	r0, r4
 8008aae:	f000 fd8d 	bl	80095cc <_fflush_r>
 8008ab2:	68e1      	ldr	r1, [r4, #12]
 8008ab4:	4b06      	ldr	r3, [pc, #24]	@ (8008ad0 <cleanup_stdio+0x3c>)
 8008ab6:	4299      	cmp	r1, r3
 8008ab8:	d004      	beq.n	8008ac4 <cleanup_stdio+0x30>
 8008aba:	4620      	mov	r0, r4
 8008abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ac0:	f000 bd84 	b.w	80095cc <_fflush_r>
 8008ac4:	bd10      	pop	{r4, pc}
 8008ac6:	bf00      	nop
 8008ac8:	24000270 	.word	0x24000270
 8008acc:	240002d8 	.word	0x240002d8
 8008ad0:	24000340 	.word	0x24000340

08008ad4 <global_stdio_init.part.0>:
 8008ad4:	b510      	push	{r4, lr}
 8008ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8008b04 <global_stdio_init.part.0+0x30>)
 8008ad8:	4c0b      	ldr	r4, [pc, #44]	@ (8008b08 <global_stdio_init.part.0+0x34>)
 8008ada:	4a0c      	ldr	r2, [pc, #48]	@ (8008b0c <global_stdio_init.part.0+0x38>)
 8008adc:	601a      	str	r2, [r3, #0]
 8008ade:	4620      	mov	r0, r4
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	2104      	movs	r1, #4
 8008ae4:	f7ff ff94 	bl	8008a10 <std>
 8008ae8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008aec:	2201      	movs	r2, #1
 8008aee:	2109      	movs	r1, #9
 8008af0:	f7ff ff8e 	bl	8008a10 <std>
 8008af4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008af8:	2202      	movs	r2, #2
 8008afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008afe:	2112      	movs	r1, #18
 8008b00:	f7ff bf86 	b.w	8008a10 <std>
 8008b04:	240003a8 	.word	0x240003a8
 8008b08:	24000270 	.word	0x24000270
 8008b0c:	08008a7d 	.word	0x08008a7d

08008b10 <__sfp_lock_acquire>:
 8008b10:	4801      	ldr	r0, [pc, #4]	@ (8008b18 <__sfp_lock_acquire+0x8>)
 8008b12:	f000 b90e 	b.w	8008d32 <__retarget_lock_acquire_recursive>
 8008b16:	bf00      	nop
 8008b18:	240003b1 	.word	0x240003b1

08008b1c <__sfp_lock_release>:
 8008b1c:	4801      	ldr	r0, [pc, #4]	@ (8008b24 <__sfp_lock_release+0x8>)
 8008b1e:	f000 b909 	b.w	8008d34 <__retarget_lock_release_recursive>
 8008b22:	bf00      	nop
 8008b24:	240003b1 	.word	0x240003b1

08008b28 <__sinit>:
 8008b28:	b510      	push	{r4, lr}
 8008b2a:	4604      	mov	r4, r0
 8008b2c:	f7ff fff0 	bl	8008b10 <__sfp_lock_acquire>
 8008b30:	6a23      	ldr	r3, [r4, #32]
 8008b32:	b11b      	cbz	r3, 8008b3c <__sinit+0x14>
 8008b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b38:	f7ff bff0 	b.w	8008b1c <__sfp_lock_release>
 8008b3c:	4b04      	ldr	r3, [pc, #16]	@ (8008b50 <__sinit+0x28>)
 8008b3e:	6223      	str	r3, [r4, #32]
 8008b40:	4b04      	ldr	r3, [pc, #16]	@ (8008b54 <__sinit+0x2c>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d1f5      	bne.n	8008b34 <__sinit+0xc>
 8008b48:	f7ff ffc4 	bl	8008ad4 <global_stdio_init.part.0>
 8008b4c:	e7f2      	b.n	8008b34 <__sinit+0xc>
 8008b4e:	bf00      	nop
 8008b50:	08008a95 	.word	0x08008a95
 8008b54:	240003a8 	.word	0x240003a8

08008b58 <_fwalk_sglue>:
 8008b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b5c:	4607      	mov	r7, r0
 8008b5e:	4688      	mov	r8, r1
 8008b60:	4614      	mov	r4, r2
 8008b62:	2600      	movs	r6, #0
 8008b64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b68:	f1b9 0901 	subs.w	r9, r9, #1
 8008b6c:	d505      	bpl.n	8008b7a <_fwalk_sglue+0x22>
 8008b6e:	6824      	ldr	r4, [r4, #0]
 8008b70:	2c00      	cmp	r4, #0
 8008b72:	d1f7      	bne.n	8008b64 <_fwalk_sglue+0xc>
 8008b74:	4630      	mov	r0, r6
 8008b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b7a:	89ab      	ldrh	r3, [r5, #12]
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d907      	bls.n	8008b90 <_fwalk_sglue+0x38>
 8008b80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b84:	3301      	adds	r3, #1
 8008b86:	d003      	beq.n	8008b90 <_fwalk_sglue+0x38>
 8008b88:	4629      	mov	r1, r5
 8008b8a:	4638      	mov	r0, r7
 8008b8c:	47c0      	blx	r8
 8008b8e:	4306      	orrs	r6, r0
 8008b90:	3568      	adds	r5, #104	@ 0x68
 8008b92:	e7e9      	b.n	8008b68 <_fwalk_sglue+0x10>

08008b94 <iprintf>:
 8008b94:	b40f      	push	{r0, r1, r2, r3}
 8008b96:	b507      	push	{r0, r1, r2, lr}
 8008b98:	4906      	ldr	r1, [pc, #24]	@ (8008bb4 <iprintf+0x20>)
 8008b9a:	ab04      	add	r3, sp, #16
 8008b9c:	6808      	ldr	r0, [r1, #0]
 8008b9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ba2:	6881      	ldr	r1, [r0, #8]
 8008ba4:	9301      	str	r3, [sp, #4]
 8008ba6:	f000 f9e9 	bl	8008f7c <_vfiprintf_r>
 8008baa:	b003      	add	sp, #12
 8008bac:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bb0:	b004      	add	sp, #16
 8008bb2:	4770      	bx	lr
 8008bb4:	24000038 	.word	0x24000038

08008bb8 <__sread>:
 8008bb8:	b510      	push	{r4, lr}
 8008bba:	460c      	mov	r4, r1
 8008bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bc0:	f000 f868 	bl	8008c94 <_read_r>
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	bfab      	itete	ge
 8008bc8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008bca:	89a3      	ldrhlt	r3, [r4, #12]
 8008bcc:	181b      	addge	r3, r3, r0
 8008bce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008bd2:	bfac      	ite	ge
 8008bd4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008bd6:	81a3      	strhlt	r3, [r4, #12]
 8008bd8:	bd10      	pop	{r4, pc}

08008bda <__swrite>:
 8008bda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bde:	461f      	mov	r7, r3
 8008be0:	898b      	ldrh	r3, [r1, #12]
 8008be2:	05db      	lsls	r3, r3, #23
 8008be4:	4605      	mov	r5, r0
 8008be6:	460c      	mov	r4, r1
 8008be8:	4616      	mov	r6, r2
 8008bea:	d505      	bpl.n	8008bf8 <__swrite+0x1e>
 8008bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bf0:	2302      	movs	r3, #2
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f000 f83c 	bl	8008c70 <_lseek_r>
 8008bf8:	89a3      	ldrh	r3, [r4, #12]
 8008bfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bfe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008c02:	81a3      	strh	r3, [r4, #12]
 8008c04:	4632      	mov	r2, r6
 8008c06:	463b      	mov	r3, r7
 8008c08:	4628      	mov	r0, r5
 8008c0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c0e:	f000 b853 	b.w	8008cb8 <_write_r>

08008c12 <__sseek>:
 8008c12:	b510      	push	{r4, lr}
 8008c14:	460c      	mov	r4, r1
 8008c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c1a:	f000 f829 	bl	8008c70 <_lseek_r>
 8008c1e:	1c43      	adds	r3, r0, #1
 8008c20:	89a3      	ldrh	r3, [r4, #12]
 8008c22:	bf15      	itete	ne
 8008c24:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008c26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008c2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008c2e:	81a3      	strheq	r3, [r4, #12]
 8008c30:	bf18      	it	ne
 8008c32:	81a3      	strhne	r3, [r4, #12]
 8008c34:	bd10      	pop	{r4, pc}

08008c36 <__sclose>:
 8008c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c3a:	f000 b809 	b.w	8008c50 <_close_r>

08008c3e <memset>:
 8008c3e:	4402      	add	r2, r0
 8008c40:	4603      	mov	r3, r0
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d100      	bne.n	8008c48 <memset+0xa>
 8008c46:	4770      	bx	lr
 8008c48:	f803 1b01 	strb.w	r1, [r3], #1
 8008c4c:	e7f9      	b.n	8008c42 <memset+0x4>
	...

08008c50 <_close_r>:
 8008c50:	b538      	push	{r3, r4, r5, lr}
 8008c52:	4d06      	ldr	r5, [pc, #24]	@ (8008c6c <_close_r+0x1c>)
 8008c54:	2300      	movs	r3, #0
 8008c56:	4604      	mov	r4, r0
 8008c58:	4608      	mov	r0, r1
 8008c5a:	602b      	str	r3, [r5, #0]
 8008c5c:	f7f9 fc37 	bl	80024ce <_close>
 8008c60:	1c43      	adds	r3, r0, #1
 8008c62:	d102      	bne.n	8008c6a <_close_r+0x1a>
 8008c64:	682b      	ldr	r3, [r5, #0]
 8008c66:	b103      	cbz	r3, 8008c6a <_close_r+0x1a>
 8008c68:	6023      	str	r3, [r4, #0]
 8008c6a:	bd38      	pop	{r3, r4, r5, pc}
 8008c6c:	240003ac 	.word	0x240003ac

08008c70 <_lseek_r>:
 8008c70:	b538      	push	{r3, r4, r5, lr}
 8008c72:	4d07      	ldr	r5, [pc, #28]	@ (8008c90 <_lseek_r+0x20>)
 8008c74:	4604      	mov	r4, r0
 8008c76:	4608      	mov	r0, r1
 8008c78:	4611      	mov	r1, r2
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	602a      	str	r2, [r5, #0]
 8008c7e:	461a      	mov	r2, r3
 8008c80:	f7f9 fc4c 	bl	800251c <_lseek>
 8008c84:	1c43      	adds	r3, r0, #1
 8008c86:	d102      	bne.n	8008c8e <_lseek_r+0x1e>
 8008c88:	682b      	ldr	r3, [r5, #0]
 8008c8a:	b103      	cbz	r3, 8008c8e <_lseek_r+0x1e>
 8008c8c:	6023      	str	r3, [r4, #0]
 8008c8e:	bd38      	pop	{r3, r4, r5, pc}
 8008c90:	240003ac 	.word	0x240003ac

08008c94 <_read_r>:
 8008c94:	b538      	push	{r3, r4, r5, lr}
 8008c96:	4d07      	ldr	r5, [pc, #28]	@ (8008cb4 <_read_r+0x20>)
 8008c98:	4604      	mov	r4, r0
 8008c9a:	4608      	mov	r0, r1
 8008c9c:	4611      	mov	r1, r2
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	602a      	str	r2, [r5, #0]
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	f7f9 fbda 	bl	800245c <_read>
 8008ca8:	1c43      	adds	r3, r0, #1
 8008caa:	d102      	bne.n	8008cb2 <_read_r+0x1e>
 8008cac:	682b      	ldr	r3, [r5, #0]
 8008cae:	b103      	cbz	r3, 8008cb2 <_read_r+0x1e>
 8008cb0:	6023      	str	r3, [r4, #0]
 8008cb2:	bd38      	pop	{r3, r4, r5, pc}
 8008cb4:	240003ac 	.word	0x240003ac

08008cb8 <_write_r>:
 8008cb8:	b538      	push	{r3, r4, r5, lr}
 8008cba:	4d07      	ldr	r5, [pc, #28]	@ (8008cd8 <_write_r+0x20>)
 8008cbc:	4604      	mov	r4, r0
 8008cbe:	4608      	mov	r0, r1
 8008cc0:	4611      	mov	r1, r2
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	602a      	str	r2, [r5, #0]
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	f7f9 fbe5 	bl	8002496 <_write>
 8008ccc:	1c43      	adds	r3, r0, #1
 8008cce:	d102      	bne.n	8008cd6 <_write_r+0x1e>
 8008cd0:	682b      	ldr	r3, [r5, #0]
 8008cd2:	b103      	cbz	r3, 8008cd6 <_write_r+0x1e>
 8008cd4:	6023      	str	r3, [r4, #0]
 8008cd6:	bd38      	pop	{r3, r4, r5, pc}
 8008cd8:	240003ac 	.word	0x240003ac

08008cdc <__errno>:
 8008cdc:	4b01      	ldr	r3, [pc, #4]	@ (8008ce4 <__errno+0x8>)
 8008cde:	6818      	ldr	r0, [r3, #0]
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop
 8008ce4:	24000038 	.word	0x24000038

08008ce8 <__libc_init_array>:
 8008ce8:	b570      	push	{r4, r5, r6, lr}
 8008cea:	4d0d      	ldr	r5, [pc, #52]	@ (8008d20 <__libc_init_array+0x38>)
 8008cec:	4c0d      	ldr	r4, [pc, #52]	@ (8008d24 <__libc_init_array+0x3c>)
 8008cee:	1b64      	subs	r4, r4, r5
 8008cf0:	10a4      	asrs	r4, r4, #2
 8008cf2:	2600      	movs	r6, #0
 8008cf4:	42a6      	cmp	r6, r4
 8008cf6:	d109      	bne.n	8008d0c <__libc_init_array+0x24>
 8008cf8:	4d0b      	ldr	r5, [pc, #44]	@ (8008d28 <__libc_init_array+0x40>)
 8008cfa:	4c0c      	ldr	r4, [pc, #48]	@ (8008d2c <__libc_init_array+0x44>)
 8008cfc:	f000 fdb6 	bl	800986c <_init>
 8008d00:	1b64      	subs	r4, r4, r5
 8008d02:	10a4      	asrs	r4, r4, #2
 8008d04:	2600      	movs	r6, #0
 8008d06:	42a6      	cmp	r6, r4
 8008d08:	d105      	bne.n	8008d16 <__libc_init_array+0x2e>
 8008d0a:	bd70      	pop	{r4, r5, r6, pc}
 8008d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d10:	4798      	blx	r3
 8008d12:	3601      	adds	r6, #1
 8008d14:	e7ee      	b.n	8008cf4 <__libc_init_array+0xc>
 8008d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d1a:	4798      	blx	r3
 8008d1c:	3601      	adds	r6, #1
 8008d1e:	e7f2      	b.n	8008d06 <__libc_init_array+0x1e>
 8008d20:	0800b164 	.word	0x0800b164
 8008d24:	0800b164 	.word	0x0800b164
 8008d28:	0800b164 	.word	0x0800b164
 8008d2c:	0800b168 	.word	0x0800b168

08008d30 <__retarget_lock_init_recursive>:
 8008d30:	4770      	bx	lr

08008d32 <__retarget_lock_acquire_recursive>:
 8008d32:	4770      	bx	lr

08008d34 <__retarget_lock_release_recursive>:
 8008d34:	4770      	bx	lr
	...

08008d38 <_free_r>:
 8008d38:	b538      	push	{r3, r4, r5, lr}
 8008d3a:	4605      	mov	r5, r0
 8008d3c:	2900      	cmp	r1, #0
 8008d3e:	d041      	beq.n	8008dc4 <_free_r+0x8c>
 8008d40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d44:	1f0c      	subs	r4, r1, #4
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	bfb8      	it	lt
 8008d4a:	18e4      	addlt	r4, r4, r3
 8008d4c:	f000 f8e0 	bl	8008f10 <__malloc_lock>
 8008d50:	4a1d      	ldr	r2, [pc, #116]	@ (8008dc8 <_free_r+0x90>)
 8008d52:	6813      	ldr	r3, [r2, #0]
 8008d54:	b933      	cbnz	r3, 8008d64 <_free_r+0x2c>
 8008d56:	6063      	str	r3, [r4, #4]
 8008d58:	6014      	str	r4, [r2, #0]
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d60:	f000 b8dc 	b.w	8008f1c <__malloc_unlock>
 8008d64:	42a3      	cmp	r3, r4
 8008d66:	d908      	bls.n	8008d7a <_free_r+0x42>
 8008d68:	6820      	ldr	r0, [r4, #0]
 8008d6a:	1821      	adds	r1, r4, r0
 8008d6c:	428b      	cmp	r3, r1
 8008d6e:	bf01      	itttt	eq
 8008d70:	6819      	ldreq	r1, [r3, #0]
 8008d72:	685b      	ldreq	r3, [r3, #4]
 8008d74:	1809      	addeq	r1, r1, r0
 8008d76:	6021      	streq	r1, [r4, #0]
 8008d78:	e7ed      	b.n	8008d56 <_free_r+0x1e>
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	b10b      	cbz	r3, 8008d84 <_free_r+0x4c>
 8008d80:	42a3      	cmp	r3, r4
 8008d82:	d9fa      	bls.n	8008d7a <_free_r+0x42>
 8008d84:	6811      	ldr	r1, [r2, #0]
 8008d86:	1850      	adds	r0, r2, r1
 8008d88:	42a0      	cmp	r0, r4
 8008d8a:	d10b      	bne.n	8008da4 <_free_r+0x6c>
 8008d8c:	6820      	ldr	r0, [r4, #0]
 8008d8e:	4401      	add	r1, r0
 8008d90:	1850      	adds	r0, r2, r1
 8008d92:	4283      	cmp	r3, r0
 8008d94:	6011      	str	r1, [r2, #0]
 8008d96:	d1e0      	bne.n	8008d5a <_free_r+0x22>
 8008d98:	6818      	ldr	r0, [r3, #0]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	6053      	str	r3, [r2, #4]
 8008d9e:	4408      	add	r0, r1
 8008da0:	6010      	str	r0, [r2, #0]
 8008da2:	e7da      	b.n	8008d5a <_free_r+0x22>
 8008da4:	d902      	bls.n	8008dac <_free_r+0x74>
 8008da6:	230c      	movs	r3, #12
 8008da8:	602b      	str	r3, [r5, #0]
 8008daa:	e7d6      	b.n	8008d5a <_free_r+0x22>
 8008dac:	6820      	ldr	r0, [r4, #0]
 8008dae:	1821      	adds	r1, r4, r0
 8008db0:	428b      	cmp	r3, r1
 8008db2:	bf04      	itt	eq
 8008db4:	6819      	ldreq	r1, [r3, #0]
 8008db6:	685b      	ldreq	r3, [r3, #4]
 8008db8:	6063      	str	r3, [r4, #4]
 8008dba:	bf04      	itt	eq
 8008dbc:	1809      	addeq	r1, r1, r0
 8008dbe:	6021      	streq	r1, [r4, #0]
 8008dc0:	6054      	str	r4, [r2, #4]
 8008dc2:	e7ca      	b.n	8008d5a <_free_r+0x22>
 8008dc4:	bd38      	pop	{r3, r4, r5, pc}
 8008dc6:	bf00      	nop
 8008dc8:	240003b8 	.word	0x240003b8

08008dcc <sbrk_aligned>:
 8008dcc:	b570      	push	{r4, r5, r6, lr}
 8008dce:	4e0f      	ldr	r6, [pc, #60]	@ (8008e0c <sbrk_aligned+0x40>)
 8008dd0:	460c      	mov	r4, r1
 8008dd2:	6831      	ldr	r1, [r6, #0]
 8008dd4:	4605      	mov	r5, r0
 8008dd6:	b911      	cbnz	r1, 8008dde <sbrk_aligned+0x12>
 8008dd8:	f000 fcb4 	bl	8009744 <_sbrk_r>
 8008ddc:	6030      	str	r0, [r6, #0]
 8008dde:	4621      	mov	r1, r4
 8008de0:	4628      	mov	r0, r5
 8008de2:	f000 fcaf 	bl	8009744 <_sbrk_r>
 8008de6:	1c43      	adds	r3, r0, #1
 8008de8:	d103      	bne.n	8008df2 <sbrk_aligned+0x26>
 8008dea:	f04f 34ff 	mov.w	r4, #4294967295
 8008dee:	4620      	mov	r0, r4
 8008df0:	bd70      	pop	{r4, r5, r6, pc}
 8008df2:	1cc4      	adds	r4, r0, #3
 8008df4:	f024 0403 	bic.w	r4, r4, #3
 8008df8:	42a0      	cmp	r0, r4
 8008dfa:	d0f8      	beq.n	8008dee <sbrk_aligned+0x22>
 8008dfc:	1a21      	subs	r1, r4, r0
 8008dfe:	4628      	mov	r0, r5
 8008e00:	f000 fca0 	bl	8009744 <_sbrk_r>
 8008e04:	3001      	adds	r0, #1
 8008e06:	d1f2      	bne.n	8008dee <sbrk_aligned+0x22>
 8008e08:	e7ef      	b.n	8008dea <sbrk_aligned+0x1e>
 8008e0a:	bf00      	nop
 8008e0c:	240003b4 	.word	0x240003b4

08008e10 <_malloc_r>:
 8008e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e14:	1ccd      	adds	r5, r1, #3
 8008e16:	f025 0503 	bic.w	r5, r5, #3
 8008e1a:	3508      	adds	r5, #8
 8008e1c:	2d0c      	cmp	r5, #12
 8008e1e:	bf38      	it	cc
 8008e20:	250c      	movcc	r5, #12
 8008e22:	2d00      	cmp	r5, #0
 8008e24:	4606      	mov	r6, r0
 8008e26:	db01      	blt.n	8008e2c <_malloc_r+0x1c>
 8008e28:	42a9      	cmp	r1, r5
 8008e2a:	d904      	bls.n	8008e36 <_malloc_r+0x26>
 8008e2c:	230c      	movs	r3, #12
 8008e2e:	6033      	str	r3, [r6, #0]
 8008e30:	2000      	movs	r0, #0
 8008e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008f0c <_malloc_r+0xfc>
 8008e3a:	f000 f869 	bl	8008f10 <__malloc_lock>
 8008e3e:	f8d8 3000 	ldr.w	r3, [r8]
 8008e42:	461c      	mov	r4, r3
 8008e44:	bb44      	cbnz	r4, 8008e98 <_malloc_r+0x88>
 8008e46:	4629      	mov	r1, r5
 8008e48:	4630      	mov	r0, r6
 8008e4a:	f7ff ffbf 	bl	8008dcc <sbrk_aligned>
 8008e4e:	1c43      	adds	r3, r0, #1
 8008e50:	4604      	mov	r4, r0
 8008e52:	d158      	bne.n	8008f06 <_malloc_r+0xf6>
 8008e54:	f8d8 4000 	ldr.w	r4, [r8]
 8008e58:	4627      	mov	r7, r4
 8008e5a:	2f00      	cmp	r7, #0
 8008e5c:	d143      	bne.n	8008ee6 <_malloc_r+0xd6>
 8008e5e:	2c00      	cmp	r4, #0
 8008e60:	d04b      	beq.n	8008efa <_malloc_r+0xea>
 8008e62:	6823      	ldr	r3, [r4, #0]
 8008e64:	4639      	mov	r1, r7
 8008e66:	4630      	mov	r0, r6
 8008e68:	eb04 0903 	add.w	r9, r4, r3
 8008e6c:	f000 fc6a 	bl	8009744 <_sbrk_r>
 8008e70:	4581      	cmp	r9, r0
 8008e72:	d142      	bne.n	8008efa <_malloc_r+0xea>
 8008e74:	6821      	ldr	r1, [r4, #0]
 8008e76:	1a6d      	subs	r5, r5, r1
 8008e78:	4629      	mov	r1, r5
 8008e7a:	4630      	mov	r0, r6
 8008e7c:	f7ff ffa6 	bl	8008dcc <sbrk_aligned>
 8008e80:	3001      	adds	r0, #1
 8008e82:	d03a      	beq.n	8008efa <_malloc_r+0xea>
 8008e84:	6823      	ldr	r3, [r4, #0]
 8008e86:	442b      	add	r3, r5
 8008e88:	6023      	str	r3, [r4, #0]
 8008e8a:	f8d8 3000 	ldr.w	r3, [r8]
 8008e8e:	685a      	ldr	r2, [r3, #4]
 8008e90:	bb62      	cbnz	r2, 8008eec <_malloc_r+0xdc>
 8008e92:	f8c8 7000 	str.w	r7, [r8]
 8008e96:	e00f      	b.n	8008eb8 <_malloc_r+0xa8>
 8008e98:	6822      	ldr	r2, [r4, #0]
 8008e9a:	1b52      	subs	r2, r2, r5
 8008e9c:	d420      	bmi.n	8008ee0 <_malloc_r+0xd0>
 8008e9e:	2a0b      	cmp	r2, #11
 8008ea0:	d917      	bls.n	8008ed2 <_malloc_r+0xc2>
 8008ea2:	1961      	adds	r1, r4, r5
 8008ea4:	42a3      	cmp	r3, r4
 8008ea6:	6025      	str	r5, [r4, #0]
 8008ea8:	bf18      	it	ne
 8008eaa:	6059      	strne	r1, [r3, #4]
 8008eac:	6863      	ldr	r3, [r4, #4]
 8008eae:	bf08      	it	eq
 8008eb0:	f8c8 1000 	streq.w	r1, [r8]
 8008eb4:	5162      	str	r2, [r4, r5]
 8008eb6:	604b      	str	r3, [r1, #4]
 8008eb8:	4630      	mov	r0, r6
 8008eba:	f000 f82f 	bl	8008f1c <__malloc_unlock>
 8008ebe:	f104 000b 	add.w	r0, r4, #11
 8008ec2:	1d23      	adds	r3, r4, #4
 8008ec4:	f020 0007 	bic.w	r0, r0, #7
 8008ec8:	1ac2      	subs	r2, r0, r3
 8008eca:	bf1c      	itt	ne
 8008ecc:	1a1b      	subne	r3, r3, r0
 8008ece:	50a3      	strne	r3, [r4, r2]
 8008ed0:	e7af      	b.n	8008e32 <_malloc_r+0x22>
 8008ed2:	6862      	ldr	r2, [r4, #4]
 8008ed4:	42a3      	cmp	r3, r4
 8008ed6:	bf0c      	ite	eq
 8008ed8:	f8c8 2000 	streq.w	r2, [r8]
 8008edc:	605a      	strne	r2, [r3, #4]
 8008ede:	e7eb      	b.n	8008eb8 <_malloc_r+0xa8>
 8008ee0:	4623      	mov	r3, r4
 8008ee2:	6864      	ldr	r4, [r4, #4]
 8008ee4:	e7ae      	b.n	8008e44 <_malloc_r+0x34>
 8008ee6:	463c      	mov	r4, r7
 8008ee8:	687f      	ldr	r7, [r7, #4]
 8008eea:	e7b6      	b.n	8008e5a <_malloc_r+0x4a>
 8008eec:	461a      	mov	r2, r3
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	42a3      	cmp	r3, r4
 8008ef2:	d1fb      	bne.n	8008eec <_malloc_r+0xdc>
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	6053      	str	r3, [r2, #4]
 8008ef8:	e7de      	b.n	8008eb8 <_malloc_r+0xa8>
 8008efa:	230c      	movs	r3, #12
 8008efc:	6033      	str	r3, [r6, #0]
 8008efe:	4630      	mov	r0, r6
 8008f00:	f000 f80c 	bl	8008f1c <__malloc_unlock>
 8008f04:	e794      	b.n	8008e30 <_malloc_r+0x20>
 8008f06:	6005      	str	r5, [r0, #0]
 8008f08:	e7d6      	b.n	8008eb8 <_malloc_r+0xa8>
 8008f0a:	bf00      	nop
 8008f0c:	240003b8 	.word	0x240003b8

08008f10 <__malloc_lock>:
 8008f10:	4801      	ldr	r0, [pc, #4]	@ (8008f18 <__malloc_lock+0x8>)
 8008f12:	f7ff bf0e 	b.w	8008d32 <__retarget_lock_acquire_recursive>
 8008f16:	bf00      	nop
 8008f18:	240003b0 	.word	0x240003b0

08008f1c <__malloc_unlock>:
 8008f1c:	4801      	ldr	r0, [pc, #4]	@ (8008f24 <__malloc_unlock+0x8>)
 8008f1e:	f7ff bf09 	b.w	8008d34 <__retarget_lock_release_recursive>
 8008f22:	bf00      	nop
 8008f24:	240003b0 	.word	0x240003b0

08008f28 <__sfputc_r>:
 8008f28:	6893      	ldr	r3, [r2, #8]
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	b410      	push	{r4}
 8008f30:	6093      	str	r3, [r2, #8]
 8008f32:	da08      	bge.n	8008f46 <__sfputc_r+0x1e>
 8008f34:	6994      	ldr	r4, [r2, #24]
 8008f36:	42a3      	cmp	r3, r4
 8008f38:	db01      	blt.n	8008f3e <__sfputc_r+0x16>
 8008f3a:	290a      	cmp	r1, #10
 8008f3c:	d103      	bne.n	8008f46 <__sfputc_r+0x1e>
 8008f3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f42:	f000 bb6b 	b.w	800961c <__swbuf_r>
 8008f46:	6813      	ldr	r3, [r2, #0]
 8008f48:	1c58      	adds	r0, r3, #1
 8008f4a:	6010      	str	r0, [r2, #0]
 8008f4c:	7019      	strb	r1, [r3, #0]
 8008f4e:	4608      	mov	r0, r1
 8008f50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f54:	4770      	bx	lr

08008f56 <__sfputs_r>:
 8008f56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f58:	4606      	mov	r6, r0
 8008f5a:	460f      	mov	r7, r1
 8008f5c:	4614      	mov	r4, r2
 8008f5e:	18d5      	adds	r5, r2, r3
 8008f60:	42ac      	cmp	r4, r5
 8008f62:	d101      	bne.n	8008f68 <__sfputs_r+0x12>
 8008f64:	2000      	movs	r0, #0
 8008f66:	e007      	b.n	8008f78 <__sfputs_r+0x22>
 8008f68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f6c:	463a      	mov	r2, r7
 8008f6e:	4630      	mov	r0, r6
 8008f70:	f7ff ffda 	bl	8008f28 <__sfputc_r>
 8008f74:	1c43      	adds	r3, r0, #1
 8008f76:	d1f3      	bne.n	8008f60 <__sfputs_r+0xa>
 8008f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f7c <_vfiprintf_r>:
 8008f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f80:	460d      	mov	r5, r1
 8008f82:	b09d      	sub	sp, #116	@ 0x74
 8008f84:	4614      	mov	r4, r2
 8008f86:	4698      	mov	r8, r3
 8008f88:	4606      	mov	r6, r0
 8008f8a:	b118      	cbz	r0, 8008f94 <_vfiprintf_r+0x18>
 8008f8c:	6a03      	ldr	r3, [r0, #32]
 8008f8e:	b90b      	cbnz	r3, 8008f94 <_vfiprintf_r+0x18>
 8008f90:	f7ff fdca 	bl	8008b28 <__sinit>
 8008f94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f96:	07d9      	lsls	r1, r3, #31
 8008f98:	d405      	bmi.n	8008fa6 <_vfiprintf_r+0x2a>
 8008f9a:	89ab      	ldrh	r3, [r5, #12]
 8008f9c:	059a      	lsls	r2, r3, #22
 8008f9e:	d402      	bmi.n	8008fa6 <_vfiprintf_r+0x2a>
 8008fa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fa2:	f7ff fec6 	bl	8008d32 <__retarget_lock_acquire_recursive>
 8008fa6:	89ab      	ldrh	r3, [r5, #12]
 8008fa8:	071b      	lsls	r3, r3, #28
 8008faa:	d501      	bpl.n	8008fb0 <_vfiprintf_r+0x34>
 8008fac:	692b      	ldr	r3, [r5, #16]
 8008fae:	b99b      	cbnz	r3, 8008fd8 <_vfiprintf_r+0x5c>
 8008fb0:	4629      	mov	r1, r5
 8008fb2:	4630      	mov	r0, r6
 8008fb4:	f000 fb70 	bl	8009698 <__swsetup_r>
 8008fb8:	b170      	cbz	r0, 8008fd8 <_vfiprintf_r+0x5c>
 8008fba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fbc:	07dc      	lsls	r4, r3, #31
 8008fbe:	d504      	bpl.n	8008fca <_vfiprintf_r+0x4e>
 8008fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc4:	b01d      	add	sp, #116	@ 0x74
 8008fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fca:	89ab      	ldrh	r3, [r5, #12]
 8008fcc:	0598      	lsls	r0, r3, #22
 8008fce:	d4f7      	bmi.n	8008fc0 <_vfiprintf_r+0x44>
 8008fd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fd2:	f7ff feaf 	bl	8008d34 <__retarget_lock_release_recursive>
 8008fd6:	e7f3      	b.n	8008fc0 <_vfiprintf_r+0x44>
 8008fd8:	2300      	movs	r3, #0
 8008fda:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fdc:	2320      	movs	r3, #32
 8008fde:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008fe2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fe6:	2330      	movs	r3, #48	@ 0x30
 8008fe8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009198 <_vfiprintf_r+0x21c>
 8008fec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ff0:	f04f 0901 	mov.w	r9, #1
 8008ff4:	4623      	mov	r3, r4
 8008ff6:	469a      	mov	sl, r3
 8008ff8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ffc:	b10a      	cbz	r2, 8009002 <_vfiprintf_r+0x86>
 8008ffe:	2a25      	cmp	r2, #37	@ 0x25
 8009000:	d1f9      	bne.n	8008ff6 <_vfiprintf_r+0x7a>
 8009002:	ebba 0b04 	subs.w	fp, sl, r4
 8009006:	d00b      	beq.n	8009020 <_vfiprintf_r+0xa4>
 8009008:	465b      	mov	r3, fp
 800900a:	4622      	mov	r2, r4
 800900c:	4629      	mov	r1, r5
 800900e:	4630      	mov	r0, r6
 8009010:	f7ff ffa1 	bl	8008f56 <__sfputs_r>
 8009014:	3001      	adds	r0, #1
 8009016:	f000 80a7 	beq.w	8009168 <_vfiprintf_r+0x1ec>
 800901a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800901c:	445a      	add	r2, fp
 800901e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009020:	f89a 3000 	ldrb.w	r3, [sl]
 8009024:	2b00      	cmp	r3, #0
 8009026:	f000 809f 	beq.w	8009168 <_vfiprintf_r+0x1ec>
 800902a:	2300      	movs	r3, #0
 800902c:	f04f 32ff 	mov.w	r2, #4294967295
 8009030:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009034:	f10a 0a01 	add.w	sl, sl, #1
 8009038:	9304      	str	r3, [sp, #16]
 800903a:	9307      	str	r3, [sp, #28]
 800903c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009040:	931a      	str	r3, [sp, #104]	@ 0x68
 8009042:	4654      	mov	r4, sl
 8009044:	2205      	movs	r2, #5
 8009046:	f814 1b01 	ldrb.w	r1, [r4], #1
 800904a:	4853      	ldr	r0, [pc, #332]	@ (8009198 <_vfiprintf_r+0x21c>)
 800904c:	f7f7 f948 	bl	80002e0 <memchr>
 8009050:	9a04      	ldr	r2, [sp, #16]
 8009052:	b9d8      	cbnz	r0, 800908c <_vfiprintf_r+0x110>
 8009054:	06d1      	lsls	r1, r2, #27
 8009056:	bf44      	itt	mi
 8009058:	2320      	movmi	r3, #32
 800905a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800905e:	0713      	lsls	r3, r2, #28
 8009060:	bf44      	itt	mi
 8009062:	232b      	movmi	r3, #43	@ 0x2b
 8009064:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009068:	f89a 3000 	ldrb.w	r3, [sl]
 800906c:	2b2a      	cmp	r3, #42	@ 0x2a
 800906e:	d015      	beq.n	800909c <_vfiprintf_r+0x120>
 8009070:	9a07      	ldr	r2, [sp, #28]
 8009072:	4654      	mov	r4, sl
 8009074:	2000      	movs	r0, #0
 8009076:	f04f 0c0a 	mov.w	ip, #10
 800907a:	4621      	mov	r1, r4
 800907c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009080:	3b30      	subs	r3, #48	@ 0x30
 8009082:	2b09      	cmp	r3, #9
 8009084:	d94b      	bls.n	800911e <_vfiprintf_r+0x1a2>
 8009086:	b1b0      	cbz	r0, 80090b6 <_vfiprintf_r+0x13a>
 8009088:	9207      	str	r2, [sp, #28]
 800908a:	e014      	b.n	80090b6 <_vfiprintf_r+0x13a>
 800908c:	eba0 0308 	sub.w	r3, r0, r8
 8009090:	fa09 f303 	lsl.w	r3, r9, r3
 8009094:	4313      	orrs	r3, r2
 8009096:	9304      	str	r3, [sp, #16]
 8009098:	46a2      	mov	sl, r4
 800909a:	e7d2      	b.n	8009042 <_vfiprintf_r+0xc6>
 800909c:	9b03      	ldr	r3, [sp, #12]
 800909e:	1d19      	adds	r1, r3, #4
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	9103      	str	r1, [sp, #12]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	bfbb      	ittet	lt
 80090a8:	425b      	neglt	r3, r3
 80090aa:	f042 0202 	orrlt.w	r2, r2, #2
 80090ae:	9307      	strge	r3, [sp, #28]
 80090b0:	9307      	strlt	r3, [sp, #28]
 80090b2:	bfb8      	it	lt
 80090b4:	9204      	strlt	r2, [sp, #16]
 80090b6:	7823      	ldrb	r3, [r4, #0]
 80090b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80090ba:	d10a      	bne.n	80090d2 <_vfiprintf_r+0x156>
 80090bc:	7863      	ldrb	r3, [r4, #1]
 80090be:	2b2a      	cmp	r3, #42	@ 0x2a
 80090c0:	d132      	bne.n	8009128 <_vfiprintf_r+0x1ac>
 80090c2:	9b03      	ldr	r3, [sp, #12]
 80090c4:	1d1a      	adds	r2, r3, #4
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	9203      	str	r2, [sp, #12]
 80090ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80090ce:	3402      	adds	r4, #2
 80090d0:	9305      	str	r3, [sp, #20]
 80090d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80091a8 <_vfiprintf_r+0x22c>
 80090d6:	7821      	ldrb	r1, [r4, #0]
 80090d8:	2203      	movs	r2, #3
 80090da:	4650      	mov	r0, sl
 80090dc:	f7f7 f900 	bl	80002e0 <memchr>
 80090e0:	b138      	cbz	r0, 80090f2 <_vfiprintf_r+0x176>
 80090e2:	9b04      	ldr	r3, [sp, #16]
 80090e4:	eba0 000a 	sub.w	r0, r0, sl
 80090e8:	2240      	movs	r2, #64	@ 0x40
 80090ea:	4082      	lsls	r2, r0
 80090ec:	4313      	orrs	r3, r2
 80090ee:	3401      	adds	r4, #1
 80090f0:	9304      	str	r3, [sp, #16]
 80090f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090f6:	4829      	ldr	r0, [pc, #164]	@ (800919c <_vfiprintf_r+0x220>)
 80090f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80090fc:	2206      	movs	r2, #6
 80090fe:	f7f7 f8ef 	bl	80002e0 <memchr>
 8009102:	2800      	cmp	r0, #0
 8009104:	d03f      	beq.n	8009186 <_vfiprintf_r+0x20a>
 8009106:	4b26      	ldr	r3, [pc, #152]	@ (80091a0 <_vfiprintf_r+0x224>)
 8009108:	bb1b      	cbnz	r3, 8009152 <_vfiprintf_r+0x1d6>
 800910a:	9b03      	ldr	r3, [sp, #12]
 800910c:	3307      	adds	r3, #7
 800910e:	f023 0307 	bic.w	r3, r3, #7
 8009112:	3308      	adds	r3, #8
 8009114:	9303      	str	r3, [sp, #12]
 8009116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009118:	443b      	add	r3, r7
 800911a:	9309      	str	r3, [sp, #36]	@ 0x24
 800911c:	e76a      	b.n	8008ff4 <_vfiprintf_r+0x78>
 800911e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009122:	460c      	mov	r4, r1
 8009124:	2001      	movs	r0, #1
 8009126:	e7a8      	b.n	800907a <_vfiprintf_r+0xfe>
 8009128:	2300      	movs	r3, #0
 800912a:	3401      	adds	r4, #1
 800912c:	9305      	str	r3, [sp, #20]
 800912e:	4619      	mov	r1, r3
 8009130:	f04f 0c0a 	mov.w	ip, #10
 8009134:	4620      	mov	r0, r4
 8009136:	f810 2b01 	ldrb.w	r2, [r0], #1
 800913a:	3a30      	subs	r2, #48	@ 0x30
 800913c:	2a09      	cmp	r2, #9
 800913e:	d903      	bls.n	8009148 <_vfiprintf_r+0x1cc>
 8009140:	2b00      	cmp	r3, #0
 8009142:	d0c6      	beq.n	80090d2 <_vfiprintf_r+0x156>
 8009144:	9105      	str	r1, [sp, #20]
 8009146:	e7c4      	b.n	80090d2 <_vfiprintf_r+0x156>
 8009148:	fb0c 2101 	mla	r1, ip, r1, r2
 800914c:	4604      	mov	r4, r0
 800914e:	2301      	movs	r3, #1
 8009150:	e7f0      	b.n	8009134 <_vfiprintf_r+0x1b8>
 8009152:	ab03      	add	r3, sp, #12
 8009154:	9300      	str	r3, [sp, #0]
 8009156:	462a      	mov	r2, r5
 8009158:	4b12      	ldr	r3, [pc, #72]	@ (80091a4 <_vfiprintf_r+0x228>)
 800915a:	a904      	add	r1, sp, #16
 800915c:	4630      	mov	r0, r6
 800915e:	f3af 8000 	nop.w
 8009162:	4607      	mov	r7, r0
 8009164:	1c78      	adds	r0, r7, #1
 8009166:	d1d6      	bne.n	8009116 <_vfiprintf_r+0x19a>
 8009168:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800916a:	07d9      	lsls	r1, r3, #31
 800916c:	d405      	bmi.n	800917a <_vfiprintf_r+0x1fe>
 800916e:	89ab      	ldrh	r3, [r5, #12]
 8009170:	059a      	lsls	r2, r3, #22
 8009172:	d402      	bmi.n	800917a <_vfiprintf_r+0x1fe>
 8009174:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009176:	f7ff fddd 	bl	8008d34 <__retarget_lock_release_recursive>
 800917a:	89ab      	ldrh	r3, [r5, #12]
 800917c:	065b      	lsls	r3, r3, #25
 800917e:	f53f af1f 	bmi.w	8008fc0 <_vfiprintf_r+0x44>
 8009182:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009184:	e71e      	b.n	8008fc4 <_vfiprintf_r+0x48>
 8009186:	ab03      	add	r3, sp, #12
 8009188:	9300      	str	r3, [sp, #0]
 800918a:	462a      	mov	r2, r5
 800918c:	4b05      	ldr	r3, [pc, #20]	@ (80091a4 <_vfiprintf_r+0x228>)
 800918e:	a904      	add	r1, sp, #16
 8009190:	4630      	mov	r0, r6
 8009192:	f000 f879 	bl	8009288 <_printf_i>
 8009196:	e7e4      	b.n	8009162 <_vfiprintf_r+0x1e6>
 8009198:	0800b128 	.word	0x0800b128
 800919c:	0800b132 	.word	0x0800b132
 80091a0:	00000000 	.word	0x00000000
 80091a4:	08008f57 	.word	0x08008f57
 80091a8:	0800b12e 	.word	0x0800b12e

080091ac <_printf_common>:
 80091ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091b0:	4616      	mov	r6, r2
 80091b2:	4698      	mov	r8, r3
 80091b4:	688a      	ldr	r2, [r1, #8]
 80091b6:	690b      	ldr	r3, [r1, #16]
 80091b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80091bc:	4293      	cmp	r3, r2
 80091be:	bfb8      	it	lt
 80091c0:	4613      	movlt	r3, r2
 80091c2:	6033      	str	r3, [r6, #0]
 80091c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80091c8:	4607      	mov	r7, r0
 80091ca:	460c      	mov	r4, r1
 80091cc:	b10a      	cbz	r2, 80091d2 <_printf_common+0x26>
 80091ce:	3301      	adds	r3, #1
 80091d0:	6033      	str	r3, [r6, #0]
 80091d2:	6823      	ldr	r3, [r4, #0]
 80091d4:	0699      	lsls	r1, r3, #26
 80091d6:	bf42      	ittt	mi
 80091d8:	6833      	ldrmi	r3, [r6, #0]
 80091da:	3302      	addmi	r3, #2
 80091dc:	6033      	strmi	r3, [r6, #0]
 80091de:	6825      	ldr	r5, [r4, #0]
 80091e0:	f015 0506 	ands.w	r5, r5, #6
 80091e4:	d106      	bne.n	80091f4 <_printf_common+0x48>
 80091e6:	f104 0a19 	add.w	sl, r4, #25
 80091ea:	68e3      	ldr	r3, [r4, #12]
 80091ec:	6832      	ldr	r2, [r6, #0]
 80091ee:	1a9b      	subs	r3, r3, r2
 80091f0:	42ab      	cmp	r3, r5
 80091f2:	dc26      	bgt.n	8009242 <_printf_common+0x96>
 80091f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80091f8:	6822      	ldr	r2, [r4, #0]
 80091fa:	3b00      	subs	r3, #0
 80091fc:	bf18      	it	ne
 80091fe:	2301      	movne	r3, #1
 8009200:	0692      	lsls	r2, r2, #26
 8009202:	d42b      	bmi.n	800925c <_printf_common+0xb0>
 8009204:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009208:	4641      	mov	r1, r8
 800920a:	4638      	mov	r0, r7
 800920c:	47c8      	blx	r9
 800920e:	3001      	adds	r0, #1
 8009210:	d01e      	beq.n	8009250 <_printf_common+0xa4>
 8009212:	6823      	ldr	r3, [r4, #0]
 8009214:	6922      	ldr	r2, [r4, #16]
 8009216:	f003 0306 	and.w	r3, r3, #6
 800921a:	2b04      	cmp	r3, #4
 800921c:	bf02      	ittt	eq
 800921e:	68e5      	ldreq	r5, [r4, #12]
 8009220:	6833      	ldreq	r3, [r6, #0]
 8009222:	1aed      	subeq	r5, r5, r3
 8009224:	68a3      	ldr	r3, [r4, #8]
 8009226:	bf0c      	ite	eq
 8009228:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800922c:	2500      	movne	r5, #0
 800922e:	4293      	cmp	r3, r2
 8009230:	bfc4      	itt	gt
 8009232:	1a9b      	subgt	r3, r3, r2
 8009234:	18ed      	addgt	r5, r5, r3
 8009236:	2600      	movs	r6, #0
 8009238:	341a      	adds	r4, #26
 800923a:	42b5      	cmp	r5, r6
 800923c:	d11a      	bne.n	8009274 <_printf_common+0xc8>
 800923e:	2000      	movs	r0, #0
 8009240:	e008      	b.n	8009254 <_printf_common+0xa8>
 8009242:	2301      	movs	r3, #1
 8009244:	4652      	mov	r2, sl
 8009246:	4641      	mov	r1, r8
 8009248:	4638      	mov	r0, r7
 800924a:	47c8      	blx	r9
 800924c:	3001      	adds	r0, #1
 800924e:	d103      	bne.n	8009258 <_printf_common+0xac>
 8009250:	f04f 30ff 	mov.w	r0, #4294967295
 8009254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009258:	3501      	adds	r5, #1
 800925a:	e7c6      	b.n	80091ea <_printf_common+0x3e>
 800925c:	18e1      	adds	r1, r4, r3
 800925e:	1c5a      	adds	r2, r3, #1
 8009260:	2030      	movs	r0, #48	@ 0x30
 8009262:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009266:	4422      	add	r2, r4
 8009268:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800926c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009270:	3302      	adds	r3, #2
 8009272:	e7c7      	b.n	8009204 <_printf_common+0x58>
 8009274:	2301      	movs	r3, #1
 8009276:	4622      	mov	r2, r4
 8009278:	4641      	mov	r1, r8
 800927a:	4638      	mov	r0, r7
 800927c:	47c8      	blx	r9
 800927e:	3001      	adds	r0, #1
 8009280:	d0e6      	beq.n	8009250 <_printf_common+0xa4>
 8009282:	3601      	adds	r6, #1
 8009284:	e7d9      	b.n	800923a <_printf_common+0x8e>
	...

08009288 <_printf_i>:
 8009288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800928c:	7e0f      	ldrb	r7, [r1, #24]
 800928e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009290:	2f78      	cmp	r7, #120	@ 0x78
 8009292:	4691      	mov	r9, r2
 8009294:	4680      	mov	r8, r0
 8009296:	460c      	mov	r4, r1
 8009298:	469a      	mov	sl, r3
 800929a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800929e:	d807      	bhi.n	80092b0 <_printf_i+0x28>
 80092a0:	2f62      	cmp	r7, #98	@ 0x62
 80092a2:	d80a      	bhi.n	80092ba <_printf_i+0x32>
 80092a4:	2f00      	cmp	r7, #0
 80092a6:	f000 80d1 	beq.w	800944c <_printf_i+0x1c4>
 80092aa:	2f58      	cmp	r7, #88	@ 0x58
 80092ac:	f000 80b8 	beq.w	8009420 <_printf_i+0x198>
 80092b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80092b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80092b8:	e03a      	b.n	8009330 <_printf_i+0xa8>
 80092ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80092be:	2b15      	cmp	r3, #21
 80092c0:	d8f6      	bhi.n	80092b0 <_printf_i+0x28>
 80092c2:	a101      	add	r1, pc, #4	@ (adr r1, 80092c8 <_printf_i+0x40>)
 80092c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092c8:	08009321 	.word	0x08009321
 80092cc:	08009335 	.word	0x08009335
 80092d0:	080092b1 	.word	0x080092b1
 80092d4:	080092b1 	.word	0x080092b1
 80092d8:	080092b1 	.word	0x080092b1
 80092dc:	080092b1 	.word	0x080092b1
 80092e0:	08009335 	.word	0x08009335
 80092e4:	080092b1 	.word	0x080092b1
 80092e8:	080092b1 	.word	0x080092b1
 80092ec:	080092b1 	.word	0x080092b1
 80092f0:	080092b1 	.word	0x080092b1
 80092f4:	08009433 	.word	0x08009433
 80092f8:	0800935f 	.word	0x0800935f
 80092fc:	080093ed 	.word	0x080093ed
 8009300:	080092b1 	.word	0x080092b1
 8009304:	080092b1 	.word	0x080092b1
 8009308:	08009455 	.word	0x08009455
 800930c:	080092b1 	.word	0x080092b1
 8009310:	0800935f 	.word	0x0800935f
 8009314:	080092b1 	.word	0x080092b1
 8009318:	080092b1 	.word	0x080092b1
 800931c:	080093f5 	.word	0x080093f5
 8009320:	6833      	ldr	r3, [r6, #0]
 8009322:	1d1a      	adds	r2, r3, #4
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	6032      	str	r2, [r6, #0]
 8009328:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800932c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009330:	2301      	movs	r3, #1
 8009332:	e09c      	b.n	800946e <_printf_i+0x1e6>
 8009334:	6833      	ldr	r3, [r6, #0]
 8009336:	6820      	ldr	r0, [r4, #0]
 8009338:	1d19      	adds	r1, r3, #4
 800933a:	6031      	str	r1, [r6, #0]
 800933c:	0606      	lsls	r6, r0, #24
 800933e:	d501      	bpl.n	8009344 <_printf_i+0xbc>
 8009340:	681d      	ldr	r5, [r3, #0]
 8009342:	e003      	b.n	800934c <_printf_i+0xc4>
 8009344:	0645      	lsls	r5, r0, #25
 8009346:	d5fb      	bpl.n	8009340 <_printf_i+0xb8>
 8009348:	f9b3 5000 	ldrsh.w	r5, [r3]
 800934c:	2d00      	cmp	r5, #0
 800934e:	da03      	bge.n	8009358 <_printf_i+0xd0>
 8009350:	232d      	movs	r3, #45	@ 0x2d
 8009352:	426d      	negs	r5, r5
 8009354:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009358:	4858      	ldr	r0, [pc, #352]	@ (80094bc <_printf_i+0x234>)
 800935a:	230a      	movs	r3, #10
 800935c:	e011      	b.n	8009382 <_printf_i+0xfa>
 800935e:	6821      	ldr	r1, [r4, #0]
 8009360:	6833      	ldr	r3, [r6, #0]
 8009362:	0608      	lsls	r0, r1, #24
 8009364:	f853 5b04 	ldr.w	r5, [r3], #4
 8009368:	d402      	bmi.n	8009370 <_printf_i+0xe8>
 800936a:	0649      	lsls	r1, r1, #25
 800936c:	bf48      	it	mi
 800936e:	b2ad      	uxthmi	r5, r5
 8009370:	2f6f      	cmp	r7, #111	@ 0x6f
 8009372:	4852      	ldr	r0, [pc, #328]	@ (80094bc <_printf_i+0x234>)
 8009374:	6033      	str	r3, [r6, #0]
 8009376:	bf14      	ite	ne
 8009378:	230a      	movne	r3, #10
 800937a:	2308      	moveq	r3, #8
 800937c:	2100      	movs	r1, #0
 800937e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009382:	6866      	ldr	r6, [r4, #4]
 8009384:	60a6      	str	r6, [r4, #8]
 8009386:	2e00      	cmp	r6, #0
 8009388:	db05      	blt.n	8009396 <_printf_i+0x10e>
 800938a:	6821      	ldr	r1, [r4, #0]
 800938c:	432e      	orrs	r6, r5
 800938e:	f021 0104 	bic.w	r1, r1, #4
 8009392:	6021      	str	r1, [r4, #0]
 8009394:	d04b      	beq.n	800942e <_printf_i+0x1a6>
 8009396:	4616      	mov	r6, r2
 8009398:	fbb5 f1f3 	udiv	r1, r5, r3
 800939c:	fb03 5711 	mls	r7, r3, r1, r5
 80093a0:	5dc7      	ldrb	r7, [r0, r7]
 80093a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80093a6:	462f      	mov	r7, r5
 80093a8:	42bb      	cmp	r3, r7
 80093aa:	460d      	mov	r5, r1
 80093ac:	d9f4      	bls.n	8009398 <_printf_i+0x110>
 80093ae:	2b08      	cmp	r3, #8
 80093b0:	d10b      	bne.n	80093ca <_printf_i+0x142>
 80093b2:	6823      	ldr	r3, [r4, #0]
 80093b4:	07df      	lsls	r7, r3, #31
 80093b6:	d508      	bpl.n	80093ca <_printf_i+0x142>
 80093b8:	6923      	ldr	r3, [r4, #16]
 80093ba:	6861      	ldr	r1, [r4, #4]
 80093bc:	4299      	cmp	r1, r3
 80093be:	bfde      	ittt	le
 80093c0:	2330      	movle	r3, #48	@ 0x30
 80093c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80093c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80093ca:	1b92      	subs	r2, r2, r6
 80093cc:	6122      	str	r2, [r4, #16]
 80093ce:	f8cd a000 	str.w	sl, [sp]
 80093d2:	464b      	mov	r3, r9
 80093d4:	aa03      	add	r2, sp, #12
 80093d6:	4621      	mov	r1, r4
 80093d8:	4640      	mov	r0, r8
 80093da:	f7ff fee7 	bl	80091ac <_printf_common>
 80093de:	3001      	adds	r0, #1
 80093e0:	d14a      	bne.n	8009478 <_printf_i+0x1f0>
 80093e2:	f04f 30ff 	mov.w	r0, #4294967295
 80093e6:	b004      	add	sp, #16
 80093e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093ec:	6823      	ldr	r3, [r4, #0]
 80093ee:	f043 0320 	orr.w	r3, r3, #32
 80093f2:	6023      	str	r3, [r4, #0]
 80093f4:	4832      	ldr	r0, [pc, #200]	@ (80094c0 <_printf_i+0x238>)
 80093f6:	2778      	movs	r7, #120	@ 0x78
 80093f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80093fc:	6823      	ldr	r3, [r4, #0]
 80093fe:	6831      	ldr	r1, [r6, #0]
 8009400:	061f      	lsls	r7, r3, #24
 8009402:	f851 5b04 	ldr.w	r5, [r1], #4
 8009406:	d402      	bmi.n	800940e <_printf_i+0x186>
 8009408:	065f      	lsls	r7, r3, #25
 800940a:	bf48      	it	mi
 800940c:	b2ad      	uxthmi	r5, r5
 800940e:	6031      	str	r1, [r6, #0]
 8009410:	07d9      	lsls	r1, r3, #31
 8009412:	bf44      	itt	mi
 8009414:	f043 0320 	orrmi.w	r3, r3, #32
 8009418:	6023      	strmi	r3, [r4, #0]
 800941a:	b11d      	cbz	r5, 8009424 <_printf_i+0x19c>
 800941c:	2310      	movs	r3, #16
 800941e:	e7ad      	b.n	800937c <_printf_i+0xf4>
 8009420:	4826      	ldr	r0, [pc, #152]	@ (80094bc <_printf_i+0x234>)
 8009422:	e7e9      	b.n	80093f8 <_printf_i+0x170>
 8009424:	6823      	ldr	r3, [r4, #0]
 8009426:	f023 0320 	bic.w	r3, r3, #32
 800942a:	6023      	str	r3, [r4, #0]
 800942c:	e7f6      	b.n	800941c <_printf_i+0x194>
 800942e:	4616      	mov	r6, r2
 8009430:	e7bd      	b.n	80093ae <_printf_i+0x126>
 8009432:	6833      	ldr	r3, [r6, #0]
 8009434:	6825      	ldr	r5, [r4, #0]
 8009436:	6961      	ldr	r1, [r4, #20]
 8009438:	1d18      	adds	r0, r3, #4
 800943a:	6030      	str	r0, [r6, #0]
 800943c:	062e      	lsls	r6, r5, #24
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	d501      	bpl.n	8009446 <_printf_i+0x1be>
 8009442:	6019      	str	r1, [r3, #0]
 8009444:	e002      	b.n	800944c <_printf_i+0x1c4>
 8009446:	0668      	lsls	r0, r5, #25
 8009448:	d5fb      	bpl.n	8009442 <_printf_i+0x1ba>
 800944a:	8019      	strh	r1, [r3, #0]
 800944c:	2300      	movs	r3, #0
 800944e:	6123      	str	r3, [r4, #16]
 8009450:	4616      	mov	r6, r2
 8009452:	e7bc      	b.n	80093ce <_printf_i+0x146>
 8009454:	6833      	ldr	r3, [r6, #0]
 8009456:	1d1a      	adds	r2, r3, #4
 8009458:	6032      	str	r2, [r6, #0]
 800945a:	681e      	ldr	r6, [r3, #0]
 800945c:	6862      	ldr	r2, [r4, #4]
 800945e:	2100      	movs	r1, #0
 8009460:	4630      	mov	r0, r6
 8009462:	f7f6 ff3d 	bl	80002e0 <memchr>
 8009466:	b108      	cbz	r0, 800946c <_printf_i+0x1e4>
 8009468:	1b80      	subs	r0, r0, r6
 800946a:	6060      	str	r0, [r4, #4]
 800946c:	6863      	ldr	r3, [r4, #4]
 800946e:	6123      	str	r3, [r4, #16]
 8009470:	2300      	movs	r3, #0
 8009472:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009476:	e7aa      	b.n	80093ce <_printf_i+0x146>
 8009478:	6923      	ldr	r3, [r4, #16]
 800947a:	4632      	mov	r2, r6
 800947c:	4649      	mov	r1, r9
 800947e:	4640      	mov	r0, r8
 8009480:	47d0      	blx	sl
 8009482:	3001      	adds	r0, #1
 8009484:	d0ad      	beq.n	80093e2 <_printf_i+0x15a>
 8009486:	6823      	ldr	r3, [r4, #0]
 8009488:	079b      	lsls	r3, r3, #30
 800948a:	d413      	bmi.n	80094b4 <_printf_i+0x22c>
 800948c:	68e0      	ldr	r0, [r4, #12]
 800948e:	9b03      	ldr	r3, [sp, #12]
 8009490:	4298      	cmp	r0, r3
 8009492:	bfb8      	it	lt
 8009494:	4618      	movlt	r0, r3
 8009496:	e7a6      	b.n	80093e6 <_printf_i+0x15e>
 8009498:	2301      	movs	r3, #1
 800949a:	4632      	mov	r2, r6
 800949c:	4649      	mov	r1, r9
 800949e:	4640      	mov	r0, r8
 80094a0:	47d0      	blx	sl
 80094a2:	3001      	adds	r0, #1
 80094a4:	d09d      	beq.n	80093e2 <_printf_i+0x15a>
 80094a6:	3501      	adds	r5, #1
 80094a8:	68e3      	ldr	r3, [r4, #12]
 80094aa:	9903      	ldr	r1, [sp, #12]
 80094ac:	1a5b      	subs	r3, r3, r1
 80094ae:	42ab      	cmp	r3, r5
 80094b0:	dcf2      	bgt.n	8009498 <_printf_i+0x210>
 80094b2:	e7eb      	b.n	800948c <_printf_i+0x204>
 80094b4:	2500      	movs	r5, #0
 80094b6:	f104 0619 	add.w	r6, r4, #25
 80094ba:	e7f5      	b.n	80094a8 <_printf_i+0x220>
 80094bc:	0800b139 	.word	0x0800b139
 80094c0:	0800b14a 	.word	0x0800b14a

080094c4 <__sflush_r>:
 80094c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80094c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094cc:	0716      	lsls	r6, r2, #28
 80094ce:	4605      	mov	r5, r0
 80094d0:	460c      	mov	r4, r1
 80094d2:	d454      	bmi.n	800957e <__sflush_r+0xba>
 80094d4:	684b      	ldr	r3, [r1, #4]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	dc02      	bgt.n	80094e0 <__sflush_r+0x1c>
 80094da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80094dc:	2b00      	cmp	r3, #0
 80094de:	dd48      	ble.n	8009572 <__sflush_r+0xae>
 80094e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80094e2:	2e00      	cmp	r6, #0
 80094e4:	d045      	beq.n	8009572 <__sflush_r+0xae>
 80094e6:	2300      	movs	r3, #0
 80094e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80094ec:	682f      	ldr	r7, [r5, #0]
 80094ee:	6a21      	ldr	r1, [r4, #32]
 80094f0:	602b      	str	r3, [r5, #0]
 80094f2:	d030      	beq.n	8009556 <__sflush_r+0x92>
 80094f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80094f6:	89a3      	ldrh	r3, [r4, #12]
 80094f8:	0759      	lsls	r1, r3, #29
 80094fa:	d505      	bpl.n	8009508 <__sflush_r+0x44>
 80094fc:	6863      	ldr	r3, [r4, #4]
 80094fe:	1ad2      	subs	r2, r2, r3
 8009500:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009502:	b10b      	cbz	r3, 8009508 <__sflush_r+0x44>
 8009504:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009506:	1ad2      	subs	r2, r2, r3
 8009508:	2300      	movs	r3, #0
 800950a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800950c:	6a21      	ldr	r1, [r4, #32]
 800950e:	4628      	mov	r0, r5
 8009510:	47b0      	blx	r6
 8009512:	1c43      	adds	r3, r0, #1
 8009514:	89a3      	ldrh	r3, [r4, #12]
 8009516:	d106      	bne.n	8009526 <__sflush_r+0x62>
 8009518:	6829      	ldr	r1, [r5, #0]
 800951a:	291d      	cmp	r1, #29
 800951c:	d82b      	bhi.n	8009576 <__sflush_r+0xb2>
 800951e:	4a2a      	ldr	r2, [pc, #168]	@ (80095c8 <__sflush_r+0x104>)
 8009520:	40ca      	lsrs	r2, r1
 8009522:	07d6      	lsls	r6, r2, #31
 8009524:	d527      	bpl.n	8009576 <__sflush_r+0xb2>
 8009526:	2200      	movs	r2, #0
 8009528:	6062      	str	r2, [r4, #4]
 800952a:	04d9      	lsls	r1, r3, #19
 800952c:	6922      	ldr	r2, [r4, #16]
 800952e:	6022      	str	r2, [r4, #0]
 8009530:	d504      	bpl.n	800953c <__sflush_r+0x78>
 8009532:	1c42      	adds	r2, r0, #1
 8009534:	d101      	bne.n	800953a <__sflush_r+0x76>
 8009536:	682b      	ldr	r3, [r5, #0]
 8009538:	b903      	cbnz	r3, 800953c <__sflush_r+0x78>
 800953a:	6560      	str	r0, [r4, #84]	@ 0x54
 800953c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800953e:	602f      	str	r7, [r5, #0]
 8009540:	b1b9      	cbz	r1, 8009572 <__sflush_r+0xae>
 8009542:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009546:	4299      	cmp	r1, r3
 8009548:	d002      	beq.n	8009550 <__sflush_r+0x8c>
 800954a:	4628      	mov	r0, r5
 800954c:	f7ff fbf4 	bl	8008d38 <_free_r>
 8009550:	2300      	movs	r3, #0
 8009552:	6363      	str	r3, [r4, #52]	@ 0x34
 8009554:	e00d      	b.n	8009572 <__sflush_r+0xae>
 8009556:	2301      	movs	r3, #1
 8009558:	4628      	mov	r0, r5
 800955a:	47b0      	blx	r6
 800955c:	4602      	mov	r2, r0
 800955e:	1c50      	adds	r0, r2, #1
 8009560:	d1c9      	bne.n	80094f6 <__sflush_r+0x32>
 8009562:	682b      	ldr	r3, [r5, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d0c6      	beq.n	80094f6 <__sflush_r+0x32>
 8009568:	2b1d      	cmp	r3, #29
 800956a:	d001      	beq.n	8009570 <__sflush_r+0xac>
 800956c:	2b16      	cmp	r3, #22
 800956e:	d11e      	bne.n	80095ae <__sflush_r+0xea>
 8009570:	602f      	str	r7, [r5, #0]
 8009572:	2000      	movs	r0, #0
 8009574:	e022      	b.n	80095bc <__sflush_r+0xf8>
 8009576:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800957a:	b21b      	sxth	r3, r3
 800957c:	e01b      	b.n	80095b6 <__sflush_r+0xf2>
 800957e:	690f      	ldr	r7, [r1, #16]
 8009580:	2f00      	cmp	r7, #0
 8009582:	d0f6      	beq.n	8009572 <__sflush_r+0xae>
 8009584:	0793      	lsls	r3, r2, #30
 8009586:	680e      	ldr	r6, [r1, #0]
 8009588:	bf08      	it	eq
 800958a:	694b      	ldreq	r3, [r1, #20]
 800958c:	600f      	str	r7, [r1, #0]
 800958e:	bf18      	it	ne
 8009590:	2300      	movne	r3, #0
 8009592:	eba6 0807 	sub.w	r8, r6, r7
 8009596:	608b      	str	r3, [r1, #8]
 8009598:	f1b8 0f00 	cmp.w	r8, #0
 800959c:	dde9      	ble.n	8009572 <__sflush_r+0xae>
 800959e:	6a21      	ldr	r1, [r4, #32]
 80095a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80095a2:	4643      	mov	r3, r8
 80095a4:	463a      	mov	r2, r7
 80095a6:	4628      	mov	r0, r5
 80095a8:	47b0      	blx	r6
 80095aa:	2800      	cmp	r0, #0
 80095ac:	dc08      	bgt.n	80095c0 <__sflush_r+0xfc>
 80095ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095b6:	81a3      	strh	r3, [r4, #12]
 80095b8:	f04f 30ff 	mov.w	r0, #4294967295
 80095bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095c0:	4407      	add	r7, r0
 80095c2:	eba8 0800 	sub.w	r8, r8, r0
 80095c6:	e7e7      	b.n	8009598 <__sflush_r+0xd4>
 80095c8:	20400001 	.word	0x20400001

080095cc <_fflush_r>:
 80095cc:	b538      	push	{r3, r4, r5, lr}
 80095ce:	690b      	ldr	r3, [r1, #16]
 80095d0:	4605      	mov	r5, r0
 80095d2:	460c      	mov	r4, r1
 80095d4:	b913      	cbnz	r3, 80095dc <_fflush_r+0x10>
 80095d6:	2500      	movs	r5, #0
 80095d8:	4628      	mov	r0, r5
 80095da:	bd38      	pop	{r3, r4, r5, pc}
 80095dc:	b118      	cbz	r0, 80095e6 <_fflush_r+0x1a>
 80095de:	6a03      	ldr	r3, [r0, #32]
 80095e0:	b90b      	cbnz	r3, 80095e6 <_fflush_r+0x1a>
 80095e2:	f7ff faa1 	bl	8008b28 <__sinit>
 80095e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d0f3      	beq.n	80095d6 <_fflush_r+0xa>
 80095ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80095f0:	07d0      	lsls	r0, r2, #31
 80095f2:	d404      	bmi.n	80095fe <_fflush_r+0x32>
 80095f4:	0599      	lsls	r1, r3, #22
 80095f6:	d402      	bmi.n	80095fe <_fflush_r+0x32>
 80095f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80095fa:	f7ff fb9a 	bl	8008d32 <__retarget_lock_acquire_recursive>
 80095fe:	4628      	mov	r0, r5
 8009600:	4621      	mov	r1, r4
 8009602:	f7ff ff5f 	bl	80094c4 <__sflush_r>
 8009606:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009608:	07da      	lsls	r2, r3, #31
 800960a:	4605      	mov	r5, r0
 800960c:	d4e4      	bmi.n	80095d8 <_fflush_r+0xc>
 800960e:	89a3      	ldrh	r3, [r4, #12]
 8009610:	059b      	lsls	r3, r3, #22
 8009612:	d4e1      	bmi.n	80095d8 <_fflush_r+0xc>
 8009614:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009616:	f7ff fb8d 	bl	8008d34 <__retarget_lock_release_recursive>
 800961a:	e7dd      	b.n	80095d8 <_fflush_r+0xc>

0800961c <__swbuf_r>:
 800961c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800961e:	460e      	mov	r6, r1
 8009620:	4614      	mov	r4, r2
 8009622:	4605      	mov	r5, r0
 8009624:	b118      	cbz	r0, 800962e <__swbuf_r+0x12>
 8009626:	6a03      	ldr	r3, [r0, #32]
 8009628:	b90b      	cbnz	r3, 800962e <__swbuf_r+0x12>
 800962a:	f7ff fa7d 	bl	8008b28 <__sinit>
 800962e:	69a3      	ldr	r3, [r4, #24]
 8009630:	60a3      	str	r3, [r4, #8]
 8009632:	89a3      	ldrh	r3, [r4, #12]
 8009634:	071a      	lsls	r2, r3, #28
 8009636:	d501      	bpl.n	800963c <__swbuf_r+0x20>
 8009638:	6923      	ldr	r3, [r4, #16]
 800963a:	b943      	cbnz	r3, 800964e <__swbuf_r+0x32>
 800963c:	4621      	mov	r1, r4
 800963e:	4628      	mov	r0, r5
 8009640:	f000 f82a 	bl	8009698 <__swsetup_r>
 8009644:	b118      	cbz	r0, 800964e <__swbuf_r+0x32>
 8009646:	f04f 37ff 	mov.w	r7, #4294967295
 800964a:	4638      	mov	r0, r7
 800964c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800964e:	6823      	ldr	r3, [r4, #0]
 8009650:	6922      	ldr	r2, [r4, #16]
 8009652:	1a98      	subs	r0, r3, r2
 8009654:	6963      	ldr	r3, [r4, #20]
 8009656:	b2f6      	uxtb	r6, r6
 8009658:	4283      	cmp	r3, r0
 800965a:	4637      	mov	r7, r6
 800965c:	dc05      	bgt.n	800966a <__swbuf_r+0x4e>
 800965e:	4621      	mov	r1, r4
 8009660:	4628      	mov	r0, r5
 8009662:	f7ff ffb3 	bl	80095cc <_fflush_r>
 8009666:	2800      	cmp	r0, #0
 8009668:	d1ed      	bne.n	8009646 <__swbuf_r+0x2a>
 800966a:	68a3      	ldr	r3, [r4, #8]
 800966c:	3b01      	subs	r3, #1
 800966e:	60a3      	str	r3, [r4, #8]
 8009670:	6823      	ldr	r3, [r4, #0]
 8009672:	1c5a      	adds	r2, r3, #1
 8009674:	6022      	str	r2, [r4, #0]
 8009676:	701e      	strb	r6, [r3, #0]
 8009678:	6962      	ldr	r2, [r4, #20]
 800967a:	1c43      	adds	r3, r0, #1
 800967c:	429a      	cmp	r2, r3
 800967e:	d004      	beq.n	800968a <__swbuf_r+0x6e>
 8009680:	89a3      	ldrh	r3, [r4, #12]
 8009682:	07db      	lsls	r3, r3, #31
 8009684:	d5e1      	bpl.n	800964a <__swbuf_r+0x2e>
 8009686:	2e0a      	cmp	r6, #10
 8009688:	d1df      	bne.n	800964a <__swbuf_r+0x2e>
 800968a:	4621      	mov	r1, r4
 800968c:	4628      	mov	r0, r5
 800968e:	f7ff ff9d 	bl	80095cc <_fflush_r>
 8009692:	2800      	cmp	r0, #0
 8009694:	d0d9      	beq.n	800964a <__swbuf_r+0x2e>
 8009696:	e7d6      	b.n	8009646 <__swbuf_r+0x2a>

08009698 <__swsetup_r>:
 8009698:	b538      	push	{r3, r4, r5, lr}
 800969a:	4b29      	ldr	r3, [pc, #164]	@ (8009740 <__swsetup_r+0xa8>)
 800969c:	4605      	mov	r5, r0
 800969e:	6818      	ldr	r0, [r3, #0]
 80096a0:	460c      	mov	r4, r1
 80096a2:	b118      	cbz	r0, 80096ac <__swsetup_r+0x14>
 80096a4:	6a03      	ldr	r3, [r0, #32]
 80096a6:	b90b      	cbnz	r3, 80096ac <__swsetup_r+0x14>
 80096a8:	f7ff fa3e 	bl	8008b28 <__sinit>
 80096ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096b0:	0719      	lsls	r1, r3, #28
 80096b2:	d422      	bmi.n	80096fa <__swsetup_r+0x62>
 80096b4:	06da      	lsls	r2, r3, #27
 80096b6:	d407      	bmi.n	80096c8 <__swsetup_r+0x30>
 80096b8:	2209      	movs	r2, #9
 80096ba:	602a      	str	r2, [r5, #0]
 80096bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096c0:	81a3      	strh	r3, [r4, #12]
 80096c2:	f04f 30ff 	mov.w	r0, #4294967295
 80096c6:	e033      	b.n	8009730 <__swsetup_r+0x98>
 80096c8:	0758      	lsls	r0, r3, #29
 80096ca:	d512      	bpl.n	80096f2 <__swsetup_r+0x5a>
 80096cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80096ce:	b141      	cbz	r1, 80096e2 <__swsetup_r+0x4a>
 80096d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80096d4:	4299      	cmp	r1, r3
 80096d6:	d002      	beq.n	80096de <__swsetup_r+0x46>
 80096d8:	4628      	mov	r0, r5
 80096da:	f7ff fb2d 	bl	8008d38 <_free_r>
 80096de:	2300      	movs	r3, #0
 80096e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80096e2:	89a3      	ldrh	r3, [r4, #12]
 80096e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80096e8:	81a3      	strh	r3, [r4, #12]
 80096ea:	2300      	movs	r3, #0
 80096ec:	6063      	str	r3, [r4, #4]
 80096ee:	6923      	ldr	r3, [r4, #16]
 80096f0:	6023      	str	r3, [r4, #0]
 80096f2:	89a3      	ldrh	r3, [r4, #12]
 80096f4:	f043 0308 	orr.w	r3, r3, #8
 80096f8:	81a3      	strh	r3, [r4, #12]
 80096fa:	6923      	ldr	r3, [r4, #16]
 80096fc:	b94b      	cbnz	r3, 8009712 <__swsetup_r+0x7a>
 80096fe:	89a3      	ldrh	r3, [r4, #12]
 8009700:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009704:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009708:	d003      	beq.n	8009712 <__swsetup_r+0x7a>
 800970a:	4621      	mov	r1, r4
 800970c:	4628      	mov	r0, r5
 800970e:	f000 f84f 	bl	80097b0 <__smakebuf_r>
 8009712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009716:	f013 0201 	ands.w	r2, r3, #1
 800971a:	d00a      	beq.n	8009732 <__swsetup_r+0x9a>
 800971c:	2200      	movs	r2, #0
 800971e:	60a2      	str	r2, [r4, #8]
 8009720:	6962      	ldr	r2, [r4, #20]
 8009722:	4252      	negs	r2, r2
 8009724:	61a2      	str	r2, [r4, #24]
 8009726:	6922      	ldr	r2, [r4, #16]
 8009728:	b942      	cbnz	r2, 800973c <__swsetup_r+0xa4>
 800972a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800972e:	d1c5      	bne.n	80096bc <__swsetup_r+0x24>
 8009730:	bd38      	pop	{r3, r4, r5, pc}
 8009732:	0799      	lsls	r1, r3, #30
 8009734:	bf58      	it	pl
 8009736:	6962      	ldrpl	r2, [r4, #20]
 8009738:	60a2      	str	r2, [r4, #8]
 800973a:	e7f4      	b.n	8009726 <__swsetup_r+0x8e>
 800973c:	2000      	movs	r0, #0
 800973e:	e7f7      	b.n	8009730 <__swsetup_r+0x98>
 8009740:	24000038 	.word	0x24000038

08009744 <_sbrk_r>:
 8009744:	b538      	push	{r3, r4, r5, lr}
 8009746:	4d06      	ldr	r5, [pc, #24]	@ (8009760 <_sbrk_r+0x1c>)
 8009748:	2300      	movs	r3, #0
 800974a:	4604      	mov	r4, r0
 800974c:	4608      	mov	r0, r1
 800974e:	602b      	str	r3, [r5, #0]
 8009750:	f7f8 fef2 	bl	8002538 <_sbrk>
 8009754:	1c43      	adds	r3, r0, #1
 8009756:	d102      	bne.n	800975e <_sbrk_r+0x1a>
 8009758:	682b      	ldr	r3, [r5, #0]
 800975a:	b103      	cbz	r3, 800975e <_sbrk_r+0x1a>
 800975c:	6023      	str	r3, [r4, #0]
 800975e:	bd38      	pop	{r3, r4, r5, pc}
 8009760:	240003ac 	.word	0x240003ac

08009764 <__swhatbuf_r>:
 8009764:	b570      	push	{r4, r5, r6, lr}
 8009766:	460c      	mov	r4, r1
 8009768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800976c:	2900      	cmp	r1, #0
 800976e:	b096      	sub	sp, #88	@ 0x58
 8009770:	4615      	mov	r5, r2
 8009772:	461e      	mov	r6, r3
 8009774:	da0d      	bge.n	8009792 <__swhatbuf_r+0x2e>
 8009776:	89a3      	ldrh	r3, [r4, #12]
 8009778:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800977c:	f04f 0100 	mov.w	r1, #0
 8009780:	bf14      	ite	ne
 8009782:	2340      	movne	r3, #64	@ 0x40
 8009784:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009788:	2000      	movs	r0, #0
 800978a:	6031      	str	r1, [r6, #0]
 800978c:	602b      	str	r3, [r5, #0]
 800978e:	b016      	add	sp, #88	@ 0x58
 8009790:	bd70      	pop	{r4, r5, r6, pc}
 8009792:	466a      	mov	r2, sp
 8009794:	f000 f848 	bl	8009828 <_fstat_r>
 8009798:	2800      	cmp	r0, #0
 800979a:	dbec      	blt.n	8009776 <__swhatbuf_r+0x12>
 800979c:	9901      	ldr	r1, [sp, #4]
 800979e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80097a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80097a6:	4259      	negs	r1, r3
 80097a8:	4159      	adcs	r1, r3
 80097aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80097ae:	e7eb      	b.n	8009788 <__swhatbuf_r+0x24>

080097b0 <__smakebuf_r>:
 80097b0:	898b      	ldrh	r3, [r1, #12]
 80097b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097b4:	079d      	lsls	r5, r3, #30
 80097b6:	4606      	mov	r6, r0
 80097b8:	460c      	mov	r4, r1
 80097ba:	d507      	bpl.n	80097cc <__smakebuf_r+0x1c>
 80097bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80097c0:	6023      	str	r3, [r4, #0]
 80097c2:	6123      	str	r3, [r4, #16]
 80097c4:	2301      	movs	r3, #1
 80097c6:	6163      	str	r3, [r4, #20]
 80097c8:	b003      	add	sp, #12
 80097ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097cc:	ab01      	add	r3, sp, #4
 80097ce:	466a      	mov	r2, sp
 80097d0:	f7ff ffc8 	bl	8009764 <__swhatbuf_r>
 80097d4:	9f00      	ldr	r7, [sp, #0]
 80097d6:	4605      	mov	r5, r0
 80097d8:	4639      	mov	r1, r7
 80097da:	4630      	mov	r0, r6
 80097dc:	f7ff fb18 	bl	8008e10 <_malloc_r>
 80097e0:	b948      	cbnz	r0, 80097f6 <__smakebuf_r+0x46>
 80097e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097e6:	059a      	lsls	r2, r3, #22
 80097e8:	d4ee      	bmi.n	80097c8 <__smakebuf_r+0x18>
 80097ea:	f023 0303 	bic.w	r3, r3, #3
 80097ee:	f043 0302 	orr.w	r3, r3, #2
 80097f2:	81a3      	strh	r3, [r4, #12]
 80097f4:	e7e2      	b.n	80097bc <__smakebuf_r+0xc>
 80097f6:	89a3      	ldrh	r3, [r4, #12]
 80097f8:	6020      	str	r0, [r4, #0]
 80097fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097fe:	81a3      	strh	r3, [r4, #12]
 8009800:	9b01      	ldr	r3, [sp, #4]
 8009802:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009806:	b15b      	cbz	r3, 8009820 <__smakebuf_r+0x70>
 8009808:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800980c:	4630      	mov	r0, r6
 800980e:	f000 f81d 	bl	800984c <_isatty_r>
 8009812:	b128      	cbz	r0, 8009820 <__smakebuf_r+0x70>
 8009814:	89a3      	ldrh	r3, [r4, #12]
 8009816:	f023 0303 	bic.w	r3, r3, #3
 800981a:	f043 0301 	orr.w	r3, r3, #1
 800981e:	81a3      	strh	r3, [r4, #12]
 8009820:	89a3      	ldrh	r3, [r4, #12]
 8009822:	431d      	orrs	r5, r3
 8009824:	81a5      	strh	r5, [r4, #12]
 8009826:	e7cf      	b.n	80097c8 <__smakebuf_r+0x18>

08009828 <_fstat_r>:
 8009828:	b538      	push	{r3, r4, r5, lr}
 800982a:	4d07      	ldr	r5, [pc, #28]	@ (8009848 <_fstat_r+0x20>)
 800982c:	2300      	movs	r3, #0
 800982e:	4604      	mov	r4, r0
 8009830:	4608      	mov	r0, r1
 8009832:	4611      	mov	r1, r2
 8009834:	602b      	str	r3, [r5, #0]
 8009836:	f7f8 fe56 	bl	80024e6 <_fstat>
 800983a:	1c43      	adds	r3, r0, #1
 800983c:	d102      	bne.n	8009844 <_fstat_r+0x1c>
 800983e:	682b      	ldr	r3, [r5, #0]
 8009840:	b103      	cbz	r3, 8009844 <_fstat_r+0x1c>
 8009842:	6023      	str	r3, [r4, #0]
 8009844:	bd38      	pop	{r3, r4, r5, pc}
 8009846:	bf00      	nop
 8009848:	240003ac 	.word	0x240003ac

0800984c <_isatty_r>:
 800984c:	b538      	push	{r3, r4, r5, lr}
 800984e:	4d06      	ldr	r5, [pc, #24]	@ (8009868 <_isatty_r+0x1c>)
 8009850:	2300      	movs	r3, #0
 8009852:	4604      	mov	r4, r0
 8009854:	4608      	mov	r0, r1
 8009856:	602b      	str	r3, [r5, #0]
 8009858:	f7f8 fe55 	bl	8002506 <_isatty>
 800985c:	1c43      	adds	r3, r0, #1
 800985e:	d102      	bne.n	8009866 <_isatty_r+0x1a>
 8009860:	682b      	ldr	r3, [r5, #0]
 8009862:	b103      	cbz	r3, 8009866 <_isatty_r+0x1a>
 8009864:	6023      	str	r3, [r4, #0]
 8009866:	bd38      	pop	{r3, r4, r5, pc}
 8009868:	240003ac 	.word	0x240003ac

0800986c <_init>:
 800986c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800986e:	bf00      	nop
 8009870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009872:	bc08      	pop	{r3}
 8009874:	469e      	mov	lr, r3
 8009876:	4770      	bx	lr

08009878 <_fini>:
 8009878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800987a:	bf00      	nop
 800987c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800987e:	bc08      	pop	{r3}
 8009880:	469e      	mov	lr, r3
 8009882:	4770      	bx	lr
