
STM_to_CC1201.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a13c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003b04  0800a3dc  0800a3dc  0000b3dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dee0  0800dee0  0000eee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800dee8  0800dee8  0000eee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800deec  0800deec  0000eeec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  24000000  0800def0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002ac  24000088  0800df78  0000f088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000334  0800df78  0000f334  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000f088  2**0
                  CONTENTS, READONLY
 10 .debug_info   000179bb  00000000  00000000  0000f0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000032d2  00000000  00000000  00026a71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000fa8  00000000  00000000  00029d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000bf9  00000000  00000000  0002acf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000391c6  00000000  00000000  0002b8e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001943f  00000000  00000000  00064aaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015f240  00000000  00000000  0007deee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001dd12e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000046e0  00000000  00000000  001dd174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000051  00000000  00000000  001e1854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a3c4 	.word	0x0800a3c4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	0800a3c4 	.word	0x0800a3c4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <CC1201_SoftReset>:

// Read bit for register addresses
#define CC1201_READ_BIT                 0x80

HAL_StatusTypeDef CC1201_SoftReset(uint8_t *status_byte)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    printf("[DEBUG] Entered CC1201_SoftReset function\n\r");
 80006b4:	4809      	ldr	r0, [pc, #36]	@ (80006dc <CC1201_SoftReset+0x30>)
 80006b6:	f009 f819 	bl	80096ec <iprintf>
    HAL_StatusTypeDef result = CC1201_SendStrobe(CC1201_STROBE_SOFT_RESET, status_byte);
 80006ba:	6879      	ldr	r1, [r7, #4]
 80006bc:	2030      	movs	r0, #48	@ 0x30
 80006be:	f000 fd6d 	bl	800119c <CC1201_SendStrobe>
 80006c2:	4603      	mov	r3, r0
 80006c4:	73fb      	strb	r3, [r7, #15]
    printf("[DEBUG] CC1201_SoftReset about to return: %d\n\r", result);
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	4619      	mov	r1, r3
 80006ca:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <CC1201_SoftReset+0x34>)
 80006cc:	f009 f80e 	bl	80096ec <iprintf>
    return result;
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	0800a3dc 	.word	0x0800a3dc
 80006e0:	0800a408 	.word	0x0800a408

080006e4 <CC1201_FastTxOn>:

HAL_StatusTypeDef CC1201_FastTxOn(uint8_t *status_byte)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_FAST_TX_ON, status_byte);
 80006ec:	6879      	ldr	r1, [r7, #4]
 80006ee:	2031      	movs	r0, #49	@ 0x31
 80006f0:	f000 fd54 	bl	800119c <CC1201_SendStrobe>
 80006f4:	4603      	mov	r3, r0
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <CC1201_CalFreqSynth>:
{
    return CC1201_SendStrobe(CC1201_STROBE_OSC_OFF, status_byte);
}

HAL_StatusTypeDef CC1201_CalFreqSynth(uint8_t *status_byte)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	b082      	sub	sp, #8
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_CAL_FREQ_SYNTH, status_byte);
 8000706:	6879      	ldr	r1, [r7, #4]
 8000708:	2033      	movs	r0, #51	@ 0x33
 800070a:	f000 fd47 	bl	800119c <CC1201_SendStrobe>
 800070e:	4603      	mov	r3, r0
}
 8000710:	4618      	mov	r0, r3
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <CC1201_EnterTxMode>:
{
    return CC1201_SendStrobe(CC1201_STROBE_RX, status_byte);
}

HAL_StatusTypeDef CC1201_EnterTxMode(uint8_t *status_byte)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_TX, status_byte);
 8000720:	6879      	ldr	r1, [r7, #4]
 8000722:	2035      	movs	r0, #53	@ 0x35
 8000724:	f000 fd3a 	bl	800119c <CC1201_SendStrobe>
 8000728:	4603      	mov	r3, r0
}
 800072a:	4618      	mov	r0, r3
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <CC1201_EnterIdleMode>:

HAL_StatusTypeDef CC1201_EnterIdleMode(uint8_t *status_byte)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	b082      	sub	sp, #8
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_IDLE, status_byte);
 800073a:	6879      	ldr	r1, [r7, #4]
 800073c:	2036      	movs	r0, #54	@ 0x36
 800073e:	f000 fd2d 	bl	800119c <CC1201_SendStrobe>
 8000742:	4603      	mov	r3, r0
}
 8000744:	4618      	mov	r0, r3
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <CC1201_FlushRxFifo>:
{
    return CC1201_SendStrobe(CC1201_STROBE_SLEEP, status_byte);
}

HAL_StatusTypeDef CC1201_FlushRxFifo(uint8_t *status_byte)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_FLUSH_RX, status_byte);
 8000754:	6879      	ldr	r1, [r7, #4]
 8000756:	203a      	movs	r0, #58	@ 0x3a
 8000758:	f000 fd20 	bl	800119c <CC1201_SendStrobe>
 800075c:	4603      	mov	r3, r0
}
 800075e:	4618      	mov	r0, r3
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <CC1201_FlushTxFifo>:

HAL_StatusTypeDef CC1201_FlushTxFifo(uint8_t *status_byte)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b082      	sub	sp, #8
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_FLUSH_TX, status_byte);
 800076e:	6879      	ldr	r1, [r7, #4]
 8000770:	203b      	movs	r0, #59	@ 0x3b
 8000772:	f000 fd13 	bl	800119c <CC1201_SendStrobe>
 8000776:	4603      	mov	r3, r0
}
 8000778:	4618      	mov	r0, r3
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <CC1201_Nop>:
{
    return CC1201_SendStrobe(CC1201_STROBE_WOR_RESET, status_byte);
}

HAL_StatusTypeDef CC1201_Nop(uint8_t *status_byte)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
    printf("[DEBUG] Entered CC1201_Nop function\n\r");
 8000788:	4809      	ldr	r0, [pc, #36]	@ (80007b0 <CC1201_Nop+0x30>)
 800078a:	f008 ffaf 	bl	80096ec <iprintf>
    HAL_StatusTypeDef result = CC1201_SendStrobe(CC1201_STROBE_NOP, status_byte);
 800078e:	6879      	ldr	r1, [r7, #4]
 8000790:	203d      	movs	r0, #61	@ 0x3d
 8000792:	f000 fd03 	bl	800119c <CC1201_SendStrobe>
 8000796:	4603      	mov	r3, r0
 8000798:	73fb      	strb	r3, [r7, #15]
    printf("[DEBUG] CC1201_Nop about to return: %d\n\r", result);
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	4619      	mov	r1, r3
 800079e:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <CC1201_Nop+0x34>)
 80007a0:	f008 ffa4 	bl	80096ec <iprintf>
    return result;
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	0800a438 	.word	0x0800a438
 80007b4:	0800a460 	.word	0x0800a460

080007b8 <CC1201_ReadStatus>:
 * @param reg_addr The address of the register to read. The read bit (MSB) will be set internally.
 * @param read_data Pointer to a uint8_t where the read data will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadStatus(uint16_t reg_addr, uint8_t *read_data)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b088      	sub	sp, #32
 80007bc:	af02      	add	r7, sp, #8
 80007be:	4603      	mov	r3, r0
 80007c0:	6039      	str	r1, [r7, #0]
 80007c2:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[4];
    uint8_t rx_buffer[4];
    uint8_t buffer_size;

    if (reg_addr > 0xFF) {
 80007c4:	88fb      	ldrh	r3, [r7, #6]
 80007c6:	2bff      	cmp	r3, #255	@ 0xff
 80007c8:	d909      	bls.n	80007de <CC1201_ReadStatus+0x26>
        // Extended register (burst access)
        tx_buffer[0] = 0x2F; // Extended register access command
 80007ca:	232f      	movs	r3, #47	@ 0x2f
 80007cc:	743b      	strb	r3, [r7, #16]
        tx_buffer[1] = (uint8_t)(reg_addr & 0xFF); // Low byte of address
 80007ce:	88fb      	ldrh	r3, [r7, #6]
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	747b      	strb	r3, [r7, #17]
        tx_buffer[2] = 0x00; // Dummy byte for reading
 80007d4:	2300      	movs	r3, #0
 80007d6:	74bb      	strb	r3, [r7, #18]
        buffer_size = 3;
 80007d8:	2303      	movs	r3, #3
 80007da:	75fb      	strb	r3, [r7, #23]
 80007dc:	e009      	b.n	80007f2 <CC1201_ReadStatus+0x3a>
    } else {
        // Standard register
        tx_buffer[0] = (uint8_t)reg_addr | CC1201_READ_BIT;
 80007de:	88fb      	ldrh	r3, [r7, #6]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	743b      	strb	r3, [r7, #16]
        tx_buffer[1] = 0x00; // Dummy byte for reading
 80007ea:	2300      	movs	r3, #0
 80007ec:	747b      	strb	r3, [r7, #17]
        buffer_size = 2;
 80007ee:	2302      	movs	r3, #2
 80007f0:	75fb      	strb	r3, [r7, #23]
    }

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 80007f2:	2200      	movs	r2, #0
 80007f4:	2110      	movs	r1, #16
 80007f6:	4815      	ldr	r0, [pc, #84]	@ (800084c <CC1201_ReadStatus+0x94>)
 80007f8:	f004 f83a 	bl	8004870 <HAL_GPIO_WritePin>

    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, tx_buffer, rx_buffer, buffer_size, HAL_MAX_DELAY);
 80007fc:	7dfb      	ldrb	r3, [r7, #23]
 80007fe:	b29b      	uxth	r3, r3
 8000800:	f107 020c 	add.w	r2, r7, #12
 8000804:	f107 0110 	add.w	r1, r7, #16
 8000808:	f04f 30ff 	mov.w	r0, #4294967295
 800080c:	9000      	str	r0, [sp, #0]
 800080e:	4810      	ldr	r0, [pc, #64]	@ (8000850 <CC1201_ReadStatus+0x98>)
 8000810:	f006 fffc 	bl	800780c <HAL_SPI_TransmitReceive>
 8000814:	4603      	mov	r3, r0
 8000816:	75bb      	strb	r3, [r7, #22]

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 8000818:	2201      	movs	r2, #1
 800081a:	2110      	movs	r1, #16
 800081c:	480b      	ldr	r0, [pc, #44]	@ (800084c <CC1201_ReadStatus+0x94>)
 800081e:	f004 f827 	bl	8004870 <HAL_GPIO_WritePin>

    if (status == HAL_OK) {
 8000822:	7dbb      	ldrb	r3, [r7, #22]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d10c      	bne.n	8000842 <CC1201_ReadStatus+0x8a>
        if (read_data != NULL) {
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d009      	beq.n	8000842 <CC1201_ReadStatus+0x8a>
            if (reg_addr > 0xFF) {
 800082e:	88fb      	ldrh	r3, [r7, #6]
 8000830:	2bff      	cmp	r3, #255	@ 0xff
 8000832:	d903      	bls.n	800083c <CC1201_ReadStatus+0x84>
                *read_data = rx_buffer[2]; // Extended register data
 8000834:	7bba      	ldrb	r2, [r7, #14]
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	701a      	strb	r2, [r3, #0]
 800083a:	e002      	b.n	8000842 <CC1201_ReadStatus+0x8a>
            } else {
                *read_data = rx_buffer[1]; // Standard register data
 800083c:	7b7a      	ldrb	r2, [r7, #13]
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return status;
 8000842:	7dbb      	ldrb	r3, [r7, #22]
}
 8000844:	4618      	mov	r0, r3
 8000846:	3718      	adds	r7, #24
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	58021000 	.word	0x58021000
 8000850:	240000b8 	.word	0x240000b8

08000854 <CC1201_ReadMARCState>:
 *
 * @param marc_state Pointer to a uint8_t where the MARCSTATE value will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadMARCState(uint8_t *marc_state)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_MARCSTATE, marc_state);
 800085c:	6879      	ldr	r1, [r7, #4]
 800085e:	f642 7073 	movw	r0, #12147	@ 0x2f73
 8000862:	f7ff ffa9 	bl	80007b8 <CC1201_ReadStatus>
 8000866:	4603      	mov	r3, r0
}
 8000868:	4618      	mov	r0, r3
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <CC1201_GetNumRXBytes>:
 *
 * @param num_bytes Pointer to a uint8_t where the number of RX bytes will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_GetNumRXBytes(uint8_t *num_bytes)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_NUM_RXBYTES, num_bytes);
 8000878:	6879      	ldr	r1, [r7, #4]
 800087a:	f642 707a 	movw	r0, #12154	@ 0x2f7a
 800087e:	f7ff ff9b 	bl	80007b8 <CC1201_ReadStatus>
 8000882:	4603      	mov	r3, r0
}
 8000884:	4618      	mov	r0, r3
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <CC1201_GetNumTXBytes>:
 *
 * @param num_bytes Pointer to a uint8_t where the number of TX bytes will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_GetNumTXBytes(uint8_t *num_bytes)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_NUM_TXBYTES, num_bytes);
 8000894:	6879      	ldr	r1, [r7, #4]
 8000896:	f642 707b 	movw	r0, #12155	@ 0x2f7b
 800089a:	f7ff ff8d 	bl	80007b8 <CC1201_ReadStatus>
 800089e:	4603      	mov	r3, r0
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <CC1201_WriteTxFifo>:
 * @param length Number of bytes to write.
 * @param status_byte Pointer to store the status byte returned.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteTxFifo(uint8_t *data, uint8_t length, uint8_t *status_byte)
{
 80008a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008ac:	b08f      	sub	sp, #60	@ 0x3c
 80008ae:	af02      	add	r7, sp, #8
 80008b0:	6178      	str	r0, [r7, #20]
 80008b2:	460b      	mov	r3, r1
 80008b4:	60fa      	str	r2, [r7, #12]
 80008b6:	74fb      	strb	r3, [r7, #19]
 80008b8:	466b      	mov	r3, sp
 80008ba:	461e      	mov	r6, r3
    if (data == NULL || status_byte == NULL || length == 0) {
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d005      	beq.n	80008ce <CC1201_WriteTxFifo+0x26>
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d002      	beq.n	80008ce <CC1201_WriteTxFifo+0x26>
 80008c8:	7cfb      	ldrb	r3, [r7, #19]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d101      	bne.n	80008d2 <CC1201_WriteTxFifo+0x2a>
        return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
 80008d0:	e088      	b.n	80009e4 <CC1201_WriteTxFifo+0x13c>
    }
    
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[2 + length]; // Command + address + data
 80008d2:	7cfb      	ldrb	r3, [r7, #19]
 80008d4:	1c99      	adds	r1, r3, #2
 80008d6:	1e4b      	subs	r3, r1, #1
 80008d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80008da:	460a      	mov	r2, r1
 80008dc:	2300      	movs	r3, #0
 80008de:	603a      	str	r2, [r7, #0]
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	f04f 0200 	mov.w	r2, #0
 80008e6:	f04f 0300 	mov.w	r3, #0
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	00c3      	lsls	r3, r0, #3
 80008ee:	6838      	ldr	r0, [r7, #0]
 80008f0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80008f4:	6838      	ldr	r0, [r7, #0]
 80008f6:	00c2      	lsls	r2, r0, #3
 80008f8:	460a      	mov	r2, r1
 80008fa:	2300      	movs	r3, #0
 80008fc:	4692      	mov	sl, r2
 80008fe:	469b      	mov	fp, r3
 8000900:	f04f 0200 	mov.w	r2, #0
 8000904:	f04f 0300 	mov.w	r3, #0
 8000908:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800090c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000910:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000914:	460b      	mov	r3, r1
 8000916:	3307      	adds	r3, #7
 8000918:	08db      	lsrs	r3, r3, #3
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	ebad 0d03 	sub.w	sp, sp, r3
 8000920:	ab02      	add	r3, sp, #8
 8000922:	3300      	adds	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t rx_buffer[2 + length];
 8000926:	7cfb      	ldrb	r3, [r7, #19]
 8000928:	1c99      	adds	r1, r3, #2
 800092a:	1e4b      	subs	r3, r1, #1
 800092c:	623b      	str	r3, [r7, #32]
 800092e:	460a      	mov	r2, r1
 8000930:	2300      	movs	r3, #0
 8000932:	4690      	mov	r8, r2
 8000934:	4699      	mov	r9, r3
 8000936:	f04f 0200 	mov.w	r2, #0
 800093a:	f04f 0300 	mov.w	r3, #0
 800093e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000942:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000946:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800094a:	460a      	mov	r2, r1
 800094c:	2300      	movs	r3, #0
 800094e:	4614      	mov	r4, r2
 8000950:	461d      	mov	r5, r3
 8000952:	f04f 0200 	mov.w	r2, #0
 8000956:	f04f 0300 	mov.w	r3, #0
 800095a:	00eb      	lsls	r3, r5, #3
 800095c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000960:	00e2      	lsls	r2, r4, #3
 8000962:	460b      	mov	r3, r1
 8000964:	3307      	adds	r3, #7
 8000966:	08db      	lsrs	r3, r3, #3
 8000968:	00db      	lsls	r3, r3, #3
 800096a:	ebad 0d03 	sub.w	sp, sp, r3
 800096e:	ab02      	add	r3, sp, #8
 8000970:	3300      	adds	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
    
    // Build command: burst write to TX FIFO (0x3F | 0x40)
    tx_buffer[0] = 0x7F; // TX FIFO burst write
 8000974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000976:	227f      	movs	r2, #127	@ 0x7f
 8000978:	701a      	strb	r2, [r3, #0]
    
    // Copy data to transmit buffer
    for (uint8_t i = 0; i < length; i++) {
 800097a:	2300      	movs	r3, #0
 800097c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000980:	e00e      	b.n	80009a0 <CC1201_WriteTxFifo+0xf8>
        tx_buffer[1 + i] = data[i];
 8000982:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000986:	697a      	ldr	r2, [r7, #20]
 8000988:	441a      	add	r2, r3
 800098a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800098e:	3301      	adds	r3, #1
 8000990:	7811      	ldrb	r1, [r2, #0]
 8000992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000994:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < length; i++) {
 8000996:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800099a:	3301      	adds	r3, #1
 800099c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80009a0:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80009a4:	7cfb      	ldrb	r3, [r7, #19]
 80009a6:	429a      	cmp	r2, r3
 80009a8:	d3eb      	bcc.n	8000982 <CC1201_WriteTxFifo+0xda>
    }
    
    // Pull CS low to start SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2110      	movs	r1, #16
 80009ae:	4810      	ldr	r0, [pc, #64]	@ (80009f0 <CC1201_WriteTxFifo+0x148>)
 80009b0:	f003 ff5e 	bl	8004870 <HAL_GPIO_WritePin>
    
    // Perform SPI transaction
    status = HAL_SPI_TransmitReceive(&hspi2, tx_buffer, rx_buffer, length + 1, HAL_MAX_DELAY);
 80009b4:	7cfb      	ldrb	r3, [r7, #19]
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	3301      	adds	r3, #1
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	f04f 32ff 	mov.w	r2, #4294967295
 80009c0:	9200      	str	r2, [sp, #0]
 80009c2:	69fa      	ldr	r2, [r7, #28]
 80009c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80009c6:	480b      	ldr	r0, [pc, #44]	@ (80009f4 <CC1201_WriteTxFifo+0x14c>)
 80009c8:	f006 ff20 	bl	800780c <HAL_SPI_TransmitReceive>
 80009cc:	4603      	mov	r3, r0
 80009ce:	76fb      	strb	r3, [r7, #27]
    
    // Pull CS high to end SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 80009d0:	2201      	movs	r2, #1
 80009d2:	2110      	movs	r1, #16
 80009d4:	4806      	ldr	r0, [pc, #24]	@ (80009f0 <CC1201_WriteTxFifo+0x148>)
 80009d6:	f003 ff4b 	bl	8004870 <HAL_GPIO_WritePin>
    
    // Store status byte (first received byte)
    *status_byte = rx_buffer[0];
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	781a      	ldrb	r2, [r3, #0]
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	701a      	strb	r2, [r3, #0]
    
    return status;
 80009e2:	7efb      	ldrb	r3, [r7, #27]
 80009e4:	46b5      	mov	sp, r6
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3734      	adds	r7, #52	@ 0x34
 80009ea:	46bd      	mov	sp, r7
 80009ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009f0:	58021000 	.word	0x58021000
 80009f4:	240000b8 	.word	0x240000b8

080009f8 <CC1201_ReadRxFifo>:
 * @param length Number of bytes to read.
 * @param status_byte Pointer to store the status byte returned.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadRxFifo(uint8_t *data, uint8_t length, uint8_t *status_byte)
{
 80009f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009fc:	b08f      	sub	sp, #60	@ 0x3c
 80009fe:	af02      	add	r7, sp, #8
 8000a00:	6178      	str	r0, [r7, #20]
 8000a02:	460b      	mov	r3, r1
 8000a04:	60fa      	str	r2, [r7, #12]
 8000a06:	74fb      	strb	r3, [r7, #19]
 8000a08:	466b      	mov	r3, sp
 8000a0a:	461e      	mov	r6, r3
    if (data == NULL || status_byte == NULL || length == 0) {
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d005      	beq.n	8000a1e <CC1201_ReadRxFifo+0x26>
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d002      	beq.n	8000a1e <CC1201_ReadRxFifo+0x26>
 8000a18:	7cfb      	ldrb	r3, [r7, #19]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d101      	bne.n	8000a22 <CC1201_ReadRxFifo+0x2a>
        return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e09b      	b.n	8000b5a <CC1201_ReadRxFifo+0x162>
    }
    
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[1 + length]; // Command + dummy bytes
 8000a22:	7cfb      	ldrb	r3, [r7, #19]
 8000a24:	1c59      	adds	r1, r3, #1
 8000a26:	1e4b      	subs	r3, r1, #1
 8000a28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000a2a:	460a      	mov	r2, r1
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	603a      	str	r2, [r7, #0]
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	f04f 0200 	mov.w	r2, #0
 8000a36:	f04f 0300 	mov.w	r3, #0
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	00c3      	lsls	r3, r0, #3
 8000a3e:	6838      	ldr	r0, [r7, #0]
 8000a40:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000a44:	6838      	ldr	r0, [r7, #0]
 8000a46:	00c2      	lsls	r2, r0, #3
 8000a48:	460a      	mov	r2, r1
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	4692      	mov	sl, r2
 8000a4e:	469b      	mov	fp, r3
 8000a50:	f04f 0200 	mov.w	r2, #0
 8000a54:	f04f 0300 	mov.w	r3, #0
 8000a58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000a5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000a60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000a64:	460b      	mov	r3, r1
 8000a66:	3307      	adds	r3, #7
 8000a68:	08db      	lsrs	r3, r3, #3
 8000a6a:	00db      	lsls	r3, r3, #3
 8000a6c:	ebad 0d03 	sub.w	sp, sp, r3
 8000a70:	ab02      	add	r3, sp, #8
 8000a72:	3300      	adds	r3, #0
 8000a74:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t rx_buffer[1 + length];
 8000a76:	7cfb      	ldrb	r3, [r7, #19]
 8000a78:	1c59      	adds	r1, r3, #1
 8000a7a:	1e4b      	subs	r3, r1, #1
 8000a7c:	623b      	str	r3, [r7, #32]
 8000a7e:	460a      	mov	r2, r1
 8000a80:	2300      	movs	r3, #0
 8000a82:	4690      	mov	r8, r2
 8000a84:	4699      	mov	r9, r3
 8000a86:	f04f 0200 	mov.w	r2, #0
 8000a8a:	f04f 0300 	mov.w	r3, #0
 8000a8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000a92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000a96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000a9a:	460a      	mov	r2, r1
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	4614      	mov	r4, r2
 8000aa0:	461d      	mov	r5, r3
 8000aa2:	f04f 0200 	mov.w	r2, #0
 8000aa6:	f04f 0300 	mov.w	r3, #0
 8000aaa:	00eb      	lsls	r3, r5, #3
 8000aac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000ab0:	00e2      	lsls	r2, r4, #3
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	3307      	adds	r3, #7
 8000ab6:	08db      	lsrs	r3, r3, #3
 8000ab8:	00db      	lsls	r3, r3, #3
 8000aba:	ebad 0d03 	sub.w	sp, sp, r3
 8000abe:	ab02      	add	r3, sp, #8
 8000ac0:	3300      	adds	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
    
    // Build command: burst read from RX FIFO (0x3F | 0x80 | 0x40)
    tx_buffer[0] = 0xFF; // RX FIFO burst read
 8000ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac6:	22ff      	movs	r2, #255	@ 0xff
 8000ac8:	701a      	strb	r2, [r3, #0]
    
    // Fill with dummy bytes for reading
    for (uint8_t i = 1; i <= length; i++) {
 8000aca:	2301      	movs	r3, #1
 8000acc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000ad0:	e009      	b.n	8000ae6 <CC1201_ReadRxFifo+0xee>
        tx_buffer[i] = 0x00;
 8000ad2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ad6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ad8:	2100      	movs	r1, #0
 8000ada:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 1; i <= length; i++) {
 8000adc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000ae6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000aea:	7cfb      	ldrb	r3, [r7, #19]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d9f0      	bls.n	8000ad2 <CC1201_ReadRxFifo+0xda>
    }
    
    // Pull CS low to start SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2110      	movs	r1, #16
 8000af4:	481c      	ldr	r0, [pc, #112]	@ (8000b68 <CC1201_ReadRxFifo+0x170>)
 8000af6:	f003 febb 	bl	8004870 <HAL_GPIO_WritePin>
    
    // Perform SPI transaction
    status = HAL_SPI_TransmitReceive(&hspi2, tx_buffer, rx_buffer, length + 1, HAL_MAX_DELAY);
 8000afa:	7cfb      	ldrb	r3, [r7, #19]
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	3301      	adds	r3, #1
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	f04f 32ff 	mov.w	r2, #4294967295
 8000b06:	9200      	str	r2, [sp, #0]
 8000b08:	69fa      	ldr	r2, [r7, #28]
 8000b0a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000b0c:	4817      	ldr	r0, [pc, #92]	@ (8000b6c <CC1201_ReadRxFifo+0x174>)
 8000b0e:	f006 fe7d 	bl	800780c <HAL_SPI_TransmitReceive>
 8000b12:	4603      	mov	r3, r0
 8000b14:	76fb      	strb	r3, [r7, #27]
    
    // Pull CS high to end SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 8000b16:	2201      	movs	r2, #1
 8000b18:	2110      	movs	r1, #16
 8000b1a:	4813      	ldr	r0, [pc, #76]	@ (8000b68 <CC1201_ReadRxFifo+0x170>)
 8000b1c:	f003 fea8 	bl	8004870 <HAL_GPIO_WritePin>
    
    // Store status byte (first received byte)
    *status_byte = rx_buffer[0];
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	781a      	ldrb	r2, [r3, #0]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	701a      	strb	r2, [r3, #0]
    
    // Copy received data
    for (uint8_t i = 0; i < length; i++) {
 8000b28:	2300      	movs	r3, #0
 8000b2a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000b2e:	e00e      	b.n	8000b4e <CC1201_ReadRxFifo+0x156>
        data[i] = rx_buffer[1 + i];
 8000b30:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000b34:	1c5a      	adds	r2, r3, #1
 8000b36:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000b3a:	6979      	ldr	r1, [r7, #20]
 8000b3c:	440b      	add	r3, r1
 8000b3e:	69f9      	ldr	r1, [r7, #28]
 8000b40:	5c8a      	ldrb	r2, [r1, r2]
 8000b42:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < length; i++) {
 8000b44:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000b48:	3301      	adds	r3, #1
 8000b4a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000b4e:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000b52:	7cfb      	ldrb	r3, [r7, #19]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d3eb      	bcc.n	8000b30 <CC1201_ReadRxFifo+0x138>
    }
    
    return status;
 8000b58:	7efb      	ldrb	r3, [r7, #27]
 8000b5a:	46b5      	mov	sp, r6
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3734      	adds	r7, #52	@ 0x34
 8000b60:	46bd      	mov	sp, r7
 8000b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b66:	bf00      	nop
 8000b68:	58021000 	.word	0x58021000
 8000b6c:	240000b8 	.word	0x240000b8

08000b70 <CC1201_WriteSingleTxFifo>:
 * @param data Single byte to write to TX FIFO.
 * @param status_byte Pointer to store the status byte returned.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteSingleTxFifo(uint8_t data, uint8_t *status_byte)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	6039      	str	r1, [r7, #0]
 8000b7a:	71fb      	strb	r3, [r7, #7]
    return CC1201_WriteTxFifo(&data, 1, status_byte);
 8000b7c:	1dfb      	adds	r3, r7, #7
 8000b7e:	683a      	ldr	r2, [r7, #0]
 8000b80:	2101      	movs	r1, #1
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff fe90 	bl	80008a8 <CC1201_WriteTxFifo>
 8000b88:	4603      	mov	r3, r0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <CC1201_ChipDetectionTest>:

/**
 * @brief Simple CC1201 chip detection test
 * Tries various commands to see if chip responds with anything other than 0x00
 */
uint8_t CC1201_ChipDetectionTest(void) {
 8000b94:	b5b0      	push	{r4, r5, r7, lr}
 8000b96:	b094      	sub	sp, #80	@ 0x50
 8000b98:	af00      	add	r7, sp, #0
    printf("\n=== CC1201 CHIP DETECTION TEST ===\n\r");
 8000b9a:	4898      	ldr	r0, [pc, #608]	@ (8000dfc <CC1201_ChipDetectionTest+0x268>)
 8000b9c:	f008 fda6 	bl	80096ec <iprintf>
    
    uint8_t detection_score = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    uint8_t non_zero_responses = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
    uint8_t response_pattern[16];
    
    // Test 1: Try multiple NOP commands
    printf("1. Testing NOP command pattern:\n\r");
 8000bac:	4894      	ldr	r0, [pc, #592]	@ (8000e00 <CC1201_ChipDetectionTest+0x26c>)
 8000bae:	f008 fd9d 	bl	80096ec <iprintf>
    for (int i = 0; i < 8; i++) {
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000bb6:	e028      	b.n	8000c0a <CC1201_ChipDetectionTest+0x76>
        uint8_t status = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	707b      	strb	r3, [r7, #1]
        CC1201_SendStrobe(0x3D, &status); // NOP
 8000bbc:	1c7b      	adds	r3, r7, #1
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	203d      	movs	r0, #61	@ 0x3d
 8000bc2:	f000 faeb 	bl	800119c <CC1201_SendStrobe>
        response_pattern[i] = status;
 8000bc6:	7879      	ldrb	r1, [r7, #1]
 8000bc8:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8000bcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000bce:	4413      	add	r3, r2
 8000bd0:	460a      	mov	r2, r1
 8000bd2:	701a      	strb	r2, [r3, #0]
        printf("   NOP %d: 0x%02X", i+1, status);
 8000bd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	787a      	ldrb	r2, [r7, #1]
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4889      	ldr	r0, [pc, #548]	@ (8000e04 <CC1201_ChipDetectionTest+0x270>)
 8000bde:	f008 fd85 	bl	80096ec <iprintf>
        
        if (status != 0x00) {
 8000be2:	787b      	ldrb	r3, [r7, #1]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d007      	beq.n	8000bf8 <CC1201_ChipDetectionTest+0x64>
            non_zero_responses++;
 8000be8:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000bec:	3301      	adds	r3, #1
 8000bee:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
            printf(" ✓");
 8000bf2:	4885      	ldr	r0, [pc, #532]	@ (8000e08 <CC1201_ChipDetectionTest+0x274>)
 8000bf4:	f008 fd7a 	bl	80096ec <iprintf>
        }
        printf("\n\r");
 8000bf8:	4884      	ldr	r0, [pc, #528]	@ (8000e0c <CC1201_ChipDetectionTest+0x278>)
 8000bfa:	f008 fd77 	bl	80096ec <iprintf>
        HAL_Delay(10);
 8000bfe:	200a      	movs	r0, #10
 8000c00:	f002 fed0 	bl	80039a4 <HAL_Delay>
    for (int i = 0; i < 8; i++) {
 8000c04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000c06:	3301      	adds	r3, #1
 8000c08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000c0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000c0c:	2b07      	cmp	r3, #7
 8000c0e:	ddd3      	ble.n	8000bb8 <CC1201_ChipDetectionTest+0x24>
    }
    
    // Test 2: Try different strobe commands
    printf("\n2. Testing different strobe commands:\n\r");
 8000c10:	487f      	ldr	r0, [pc, #508]	@ (8000e10 <CC1201_ChipDetectionTest+0x27c>)
 8000c12:	f008 fd6b 	bl	80096ec <iprintf>
    uint8_t strobes[] = {0x30, 0x34, 0x36, 0x37, 0x38, 0x3A, 0x3B, 0x3C};
 8000c16:	4a7f      	ldr	r2, [pc, #508]	@ (8000e14 <CC1201_ChipDetectionTest+0x280>)
 8000c18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c20:	e883 0003 	stmia.w	r3, {r0, r1}
    const char* names[] = {"RESET", "IDLE", "CAL", "TX", "RX", "FLUSH_RX", "FLUSH_TX", "WOR_RST"};
 8000c24:	4b7c      	ldr	r3, [pc, #496]	@ (8000e18 <CC1201_ChipDetectionTest+0x284>)
 8000c26:	1d3c      	adds	r4, r7, #4
 8000c28:	461d      	mov	r5, r3
 8000c2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c2e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000c32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    for (int i = 0; i < 8; i++) {
 8000c36:	2300      	movs	r3, #0
 8000c38:	647b      	str	r3, [r7, #68]	@ 0x44
 8000c3a:	e031      	b.n	8000ca0 <CC1201_ChipDetectionTest+0x10c>
        uint8_t status = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	703b      	strb	r3, [r7, #0]
        CC1201_SendStrobe(strobes[i], &status);
 8000c40:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000c44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c46:	4413      	add	r3, r2
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	463a      	mov	r2, r7
 8000c4c:	4611      	mov	r1, r2
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 faa4 	bl	800119c <CC1201_SendStrobe>
        response_pattern[i + 8] = status;
 8000c54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c56:	3308      	adds	r3, #8
 8000c58:	783a      	ldrb	r2, [r7, #0]
 8000c5a:	3350      	adds	r3, #80	@ 0x50
 8000c5c:	443b      	add	r3, r7
 8000c5e:	f803 2c24 	strb.w	r2, [r3, #-36]
        printf("   %s: 0x%02X", names[i], status);
 8000c62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	3350      	adds	r3, #80	@ 0x50
 8000c68:	443b      	add	r3, r7
 8000c6a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8000c6e:	783a      	ldrb	r2, [r7, #0]
 8000c70:	4619      	mov	r1, r3
 8000c72:	486a      	ldr	r0, [pc, #424]	@ (8000e1c <CC1201_ChipDetectionTest+0x288>)
 8000c74:	f008 fd3a 	bl	80096ec <iprintf>
        
        if (status != 0x00) {
 8000c78:	783b      	ldrb	r3, [r7, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d007      	beq.n	8000c8e <CC1201_ChipDetectionTest+0xfa>
            non_zero_responses++;
 8000c7e:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000c82:	3301      	adds	r3, #1
 8000c84:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
            printf(" ✓");
 8000c88:	485f      	ldr	r0, [pc, #380]	@ (8000e08 <CC1201_ChipDetectionTest+0x274>)
 8000c8a:	f008 fd2f 	bl	80096ec <iprintf>
        }
        printf("\n\r");
 8000c8e:	485f      	ldr	r0, [pc, #380]	@ (8000e0c <CC1201_ChipDetectionTest+0x278>)
 8000c90:	f008 fd2c 	bl	80096ec <iprintf>
        HAL_Delay(50); // Longer delay for state changes
 8000c94:	2032      	movs	r0, #50	@ 0x32
 8000c96:	f002 fe85 	bl	80039a4 <HAL_Delay>
    for (int i = 0; i < 8; i++) {
 8000c9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8000ca0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ca2:	2b07      	cmp	r3, #7
 8000ca4:	ddca      	ble.n	8000c3c <CC1201_ChipDetectionTest+0xa8>
    }
    
    // Test 3: Analysis
    printf("\n3. DETECTION ANALYSIS:\n\r");
 8000ca6:	485e      	ldr	r0, [pc, #376]	@ (8000e20 <CC1201_ChipDetectionTest+0x28c>)
 8000ca8:	f008 fd20 	bl	80096ec <iprintf>
    printf("   Non-zero responses: %d/16\n\r", non_zero_responses);
 8000cac:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	485c      	ldr	r0, [pc, #368]	@ (8000e24 <CC1201_ChipDetectionTest+0x290>)
 8000cb4:	f008 fd1a 	bl	80096ec <iprintf>
    
    // Check for patterns that suggest a working chip
    uint8_t all_same = 1;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    for (int i = 1; i < 16; i++) {
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000cc2:	e00f      	b.n	8000ce4 <CC1201_ChipDetectionTest+0x150>
        if (response_pattern[i] != response_pattern[0]) {
 8000cc4:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8000cc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000cca:	4413      	add	r3, r2
 8000ccc:	781a      	ldrb	r2, [r3, #0]
 8000cce:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d003      	beq.n	8000cde <CC1201_ChipDetectionTest+0x14a>
            all_same = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
            break;
 8000cdc:	e005      	b.n	8000cea <CC1201_ChipDetectionTest+0x156>
    for (int i = 1; i < 16; i++) {
 8000cde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000ce4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ce6:	2b0f      	cmp	r3, #15
 8000ce8:	ddec      	ble.n	8000cc4 <CC1201_ChipDetectionTest+0x130>
        }
    }
    
    if (all_same) {
 8000cea:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d009      	beq.n	8000d06 <CC1201_ChipDetectionTest+0x172>
        printf("   ⚠ All responses identical (0x%02X) - likely no chip response\n\r", response_pattern[0]);
 8000cf2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	484b      	ldr	r0, [pc, #300]	@ (8000e28 <CC1201_ChipDetectionTest+0x294>)
 8000cfa:	f008 fcf7 	bl	80096ec <iprintf>
        detection_score = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8000d04:	e00b      	b.n	8000d1e <CC1201_ChipDetectionTest+0x18a>
    } else {
        printf("   ✓ Response variation detected - chip likely present\n\r");
 8000d06:	4849      	ldr	r0, [pc, #292]	@ (8000e2c <CC1201_ChipDetectionTest+0x298>)
 8000d08:	f008 fcf0 	bl	80096ec <iprintf>
        detection_score = 50 + (non_zero_responses * 3);
 8000d0c:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000d10:	461a      	mov	r2, r3
 8000d12:	0052      	lsls	r2, r2, #1
 8000d14:	4413      	add	r3, r2
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	3332      	adds	r3, #50	@ 0x32
 8000d1a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }
    
    // Test 4: Look for specific CC1201 behavior
    printf("\n4. CC1201 SPECIFIC BEHAVIOR TEST:\n\r");
 8000d1e:	4844      	ldr	r0, [pc, #272]	@ (8000e30 <CC1201_ChipDetectionTest+0x29c>)
 8000d20:	f008 fce4 	bl	80096ec <iprintf>
    
    // CC1201 should respond to RESET with a status change
    uint8_t status_before = 0, status_after = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	70fb      	strb	r3, [r7, #3]
 8000d28:	2300      	movs	r3, #0
 8000d2a:	70bb      	strb	r3, [r7, #2]
    CC1201_SendStrobe(0x3D, &status_before); // NOP to get current status
 8000d2c:	1cfb      	adds	r3, r7, #3
 8000d2e:	4619      	mov	r1, r3
 8000d30:	203d      	movs	r0, #61	@ 0x3d
 8000d32:	f000 fa33 	bl	800119c <CC1201_SendStrobe>
    HAL_Delay(10);
 8000d36:	200a      	movs	r0, #10
 8000d38:	f002 fe34 	bl	80039a4 <HAL_Delay>
    CC1201_SendStrobe(0x30, &status_after);  // RESET
 8000d3c:	1cbb      	adds	r3, r7, #2
 8000d3e:	4619      	mov	r1, r3
 8000d40:	2030      	movs	r0, #48	@ 0x30
 8000d42:	f000 fa2b 	bl	800119c <CC1201_SendStrobe>
    HAL_Delay(100); // Wait for reset
 8000d46:	2064      	movs	r0, #100	@ 0x64
 8000d48:	f002 fe2c 	bl	80039a4 <HAL_Delay>
    
    printf("   Status before reset: 0x%02X\n\r", status_before);
 8000d4c:	78fb      	ldrb	r3, [r7, #3]
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4838      	ldr	r0, [pc, #224]	@ (8000e34 <CC1201_ChipDetectionTest+0x2a0>)
 8000d52:	f008 fccb 	bl	80096ec <iprintf>
    printf("   Status after reset:  0x%02X\n\r", status_after);
 8000d56:	78bb      	ldrb	r3, [r7, #2]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4837      	ldr	r0, [pc, #220]	@ (8000e38 <CC1201_ChipDetectionTest+0x2a4>)
 8000d5c:	f008 fcc6 	bl	80096ec <iprintf>
    
    if (status_before != status_after && (status_before != 0x00 || status_after != 0x00)) {
 8000d60:	78fa      	ldrb	r2, [r7, #3]
 8000d62:	78bb      	ldrb	r3, [r7, #2]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d00e      	beq.n	8000d86 <CC1201_ChipDetectionTest+0x1f2>
 8000d68:	78fb      	ldrb	r3, [r7, #3]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d102      	bne.n	8000d74 <CC1201_ChipDetectionTest+0x1e0>
 8000d6e:	78bb      	ldrb	r3, [r7, #2]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d008      	beq.n	8000d86 <CC1201_ChipDetectionTest+0x1f2>
        printf("   ✓ Status changed after reset - good sign\n\r");
 8000d74:	4831      	ldr	r0, [pc, #196]	@ (8000e3c <CC1201_ChipDetectionTest+0x2a8>)
 8000d76:	f008 fcb9 	bl	80096ec <iprintf>
        detection_score += 25;
 8000d7a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000d7e:	3319      	adds	r3, #25
 8000d80:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8000d84:	e002      	b.n	8000d8c <CC1201_ChipDetectionTest+0x1f8>
    } else {
        printf("   ⚠ No status change after reset\n\r");
 8000d86:	482e      	ldr	r0, [pc, #184]	@ (8000e40 <CC1201_ChipDetectionTest+0x2ac>)
 8000d88:	f008 fcb0 	bl	80096ec <iprintf>
    }
    
    // Final detection verdict
    printf("\n5. DETECTION VERDICT:\n\r");
 8000d8c:	482d      	ldr	r0, [pc, #180]	@ (8000e44 <CC1201_ChipDetectionTest+0x2b0>)
 8000d8e:	f008 fcad 	bl	80096ec <iprintf>
    printf("   Detection Score: %d/100\n\r", detection_score);
 8000d92:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000d96:	4619      	mov	r1, r3
 8000d98:	482b      	ldr	r0, [pc, #172]	@ (8000e48 <CC1201_ChipDetectionTest+0x2b4>)
 8000d9a:	f008 fca7 	bl	80096ec <iprintf>
    
    if (detection_score >= 75) {
 8000d9e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000da2:	2b4a      	cmp	r3, #74	@ 0x4a
 8000da4:	d903      	bls.n	8000dae <CC1201_ChipDetectionTest+0x21a>
        printf("   ✅ CC1201 DETECTED - Chip responding normally\n\r");
 8000da6:	4829      	ldr	r0, [pc, #164]	@ (8000e4c <CC1201_ChipDetectionTest+0x2b8>)
 8000da8:	f008 fca0 	bl	80096ec <iprintf>
 8000dac:	e01c      	b.n	8000de8 <CC1201_ChipDetectionTest+0x254>
    } else if (detection_score >= 25) {
 8000dae:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000db2:	2b18      	cmp	r3, #24
 8000db4:	d903      	bls.n	8000dbe <CC1201_ChipDetectionTest+0x22a>
        printf("   ⚠ PARTIAL DETECTION - Chip may be present but not fully functional\n\r");
 8000db6:	4826      	ldr	r0, [pc, #152]	@ (8000e50 <CC1201_ChipDetectionTest+0x2bc>)
 8000db8:	f008 fc98 	bl	80096ec <iprintf>
 8000dbc:	e014      	b.n	8000de8 <CC1201_ChipDetectionTest+0x254>
    } else {
        printf("   ❌ NO DETECTION - CC1201 likely not present or not responding\n\r");
 8000dbe:	4825      	ldr	r0, [pc, #148]	@ (8000e54 <CC1201_ChipDetectionTest+0x2c0>)
 8000dc0:	f008 fc94 	bl	80096ec <iprintf>
        printf("      Possible causes:\n\r");
 8000dc4:	4824      	ldr	r0, [pc, #144]	@ (8000e58 <CC1201_ChipDetectionTest+0x2c4>)
 8000dc6:	f008 fc91 	bl	80096ec <iprintf>
        printf("      • CC1201 not connected to SPI bus\n\r");
 8000dca:	4824      	ldr	r0, [pc, #144]	@ (8000e5c <CC1201_ChipDetectionTest+0x2c8>)
 8000dcc:	f008 fc8e 	bl	80096ec <iprintf>
        printf("      • Power supply issue (check 3.3V)\n\r");
 8000dd0:	4823      	ldr	r0, [pc, #140]	@ (8000e60 <CC1201_ChipDetectionTest+0x2cc>)
 8000dd2:	f008 fc8b 	bl	80096ec <iprintf>
        printf("      • MISO line disconnected\n\r");
 8000dd6:	4823      	ldr	r0, [pc, #140]	@ (8000e64 <CC1201_ChipDetectionTest+0x2d0>)
 8000dd8:	f008 fc88 	bl	80096ec <iprintf>
        printf("      • CC1201 in reset or sleep state\n\r");
 8000ddc:	4822      	ldr	r0, [pc, #136]	@ (8000e68 <CC1201_ChipDetectionTest+0x2d4>)
 8000dde:	f008 fc85 	bl	80096ec <iprintf>
        printf("      • Wrong SPI pin mapping\n\r");
 8000de2:	4822      	ldr	r0, [pc, #136]	@ (8000e6c <CC1201_ChipDetectionTest+0x2d8>)
 8000de4:	f008 fc82 	bl	80096ec <iprintf>
    }
    
    printf("=== CHIP DETECTION TEST COMPLETE ===\n\r");
 8000de8:	4821      	ldr	r0, [pc, #132]	@ (8000e70 <CC1201_ChipDetectionTest+0x2dc>)
 8000dea:	f008 fc7f 	bl	80096ec <iprintf>
    return detection_score;
 8000dee:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3750      	adds	r7, #80	@ 0x50
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bdb0      	pop	{r4, r5, r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	0800a48c 	.word	0x0800a48c
 8000e00:	0800a4b4 	.word	0x0800a4b4
 8000e04:	0800a4d8 	.word	0x0800a4d8
 8000e08:	0800a4ec 	.word	0x0800a4ec
 8000e0c:	0800a4f4 	.word	0x0800a4f4
 8000e10:	0800a4f8 	.word	0x0800a4f8
 8000e14:	0800a8c8 	.word	0x0800a8c8
 8000e18:	0800a90c 	.word	0x0800a90c
 8000e1c:	0800a524 	.word	0x0800a524
 8000e20:	0800a534 	.word	0x0800a534
 8000e24:	0800a550 	.word	0x0800a550
 8000e28:	0800a570 	.word	0x0800a570
 8000e2c:	0800a5b4 	.word	0x0800a5b4
 8000e30:	0800a5f0 	.word	0x0800a5f0
 8000e34:	0800a618 	.word	0x0800a618
 8000e38:	0800a63c 	.word	0x0800a63c
 8000e3c:	0800a660 	.word	0x0800a660
 8000e40:	0800a690 	.word	0x0800a690
 8000e44:	0800a6b8 	.word	0x0800a6b8
 8000e48:	0800a6d4 	.word	0x0800a6d4
 8000e4c:	0800a6f4 	.word	0x0800a6f4
 8000e50:	0800a728 	.word	0x0800a728
 8000e54:	0800a774 	.word	0x0800a774
 8000e58:	0800a7b8 	.word	0x0800a7b8
 8000e5c:	0800a7d4 	.word	0x0800a7d4
 8000e60:	0800a800 	.word	0x0800a800
 8000e64:	0800a82c 	.word	0x0800a82c
 8000e68:	0800a850 	.word	0x0800a850
 8000e6c:	0800a87c 	.word	0x0800a87c
 8000e70:	0800a8a0 	.word	0x0800a8a0

08000e74 <CC1201_HardwareDiagnostic>:
#include <stdio.h>

/**
 * @brief Comprehensive hardware diagnostic test for CC1201
 */
void CC1201_HardwareDiagnostic(void) {
 8000e74:	b590      	push	{r4, r7, lr}
 8000e76:	b08f      	sub	sp, #60	@ 0x3c
 8000e78:	af02      	add	r7, sp, #8
    printf("\n=== CC1201 HARDWARE DIAGNOSTIC TEST ===\n\r");
 8000e7a:	489e      	ldr	r0, [pc, #632]	@ (80010f4 <CC1201_HardwareDiagnostic+0x280>)
 8000e7c:	f008 fc36 	bl	80096ec <iprintf>
    
    // 1. Test SPI with different patterns
    printf("1. SPI COMMUNICATION PATTERN TEST\n\r");
 8000e80:	489d      	ldr	r0, [pc, #628]	@ (80010f8 <CC1201_HardwareDiagnostic+0x284>)
 8000e82:	f008 fc33 	bl	80096ec <iprintf>
    
    uint8_t test_commands[] = {0x3D, 0x30, 0x34, 0x36}; // NOP, RESET, IDLE, CALIBRATE
 8000e86:	4b9d      	ldr	r3, [pc, #628]	@ (80010fc <CC1201_HardwareDiagnostic+0x288>)
 8000e88:	623b      	str	r3, [r7, #32]
    const char* cmd_names[] = {"NOP", "RESET", "IDLE", "CALIBRATE"};
 8000e8a:	4b9d      	ldr	r3, [pc, #628]	@ (8001100 <CC1201_HardwareDiagnostic+0x28c>)
 8000e8c:	f107 0410 	add.w	r4, r7, #16
 8000e90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    for (int i = 0; i < 4; i++) {
 8000e96:	2300      	movs	r3, #0
 8000e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e9a:	e04c      	b.n	8000f36 <CC1201_HardwareDiagnostic+0xc2>
        uint8_t tx_data = test_commands[i];
 8000e9c:	f107 0220 	add.w	r2, r7, #32
 8000ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ea2:	4413      	add	r3, r2
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	71fb      	strb	r3, [r7, #7]
        uint8_t rx_data = 0xFF; // Initialize with known pattern
 8000ea8:	23ff      	movs	r3, #255	@ 0xff
 8000eaa:	71bb      	strb	r3, [r7, #6]
        
        // Manual SPI transaction to see exact response
        HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2110      	movs	r1, #16
 8000eb0:	4894      	ldr	r0, [pc, #592]	@ (8001104 <CC1201_HardwareDiagnostic+0x290>)
 8000eb2:	f003 fcdd 	bl	8004870 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	f002 fd74 	bl	80039a4 <HAL_Delay>
        HAL_StatusTypeDef spi_status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, &tx_data, &rx_data, 1, 1000);
 8000ebc:	1dba      	adds	r2, r7, #6
 8000ebe:	1df9      	adds	r1, r7, #7
 8000ec0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	488f      	ldr	r0, [pc, #572]	@ (8001108 <CC1201_HardwareDiagnostic+0x294>)
 8000eca:	f006 fc9f 	bl	800780c <HAL_SPI_TransmitReceive>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	2110      	movs	r1, #16
 8000ed8:	488a      	ldr	r0, [pc, #552]	@ (8001104 <CC1201_HardwareDiagnostic+0x290>)
 8000eda:	f003 fcc9 	bl	8004870 <HAL_GPIO_WritePin>
        
        printf("  %s (0x%02X): TX=0x%02X -> RX=0x%02X, HAL=%d\n\r", 
 8000ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	3330      	adds	r3, #48	@ 0x30
 8000ee4:	443b      	add	r3, r7
 8000ee6:	f853 1c20 	ldr.w	r1, [r3, #-32]
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	4618      	mov	r0, r3
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	461c      	mov	r4, r3
 8000ef2:	79bb      	ldrb	r3, [r7, #6]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000efa:	9301      	str	r3, [sp, #4]
 8000efc:	9200      	str	r2, [sp, #0]
 8000efe:	4623      	mov	r3, r4
 8000f00:	4602      	mov	r2, r0
 8000f02:	4882      	ldr	r0, [pc, #520]	@ (800110c <CC1201_HardwareDiagnostic+0x298>)
 8000f04:	f008 fbf2 	bl	80096ec <iprintf>
               cmd_names[i], tx_data, tx_data, rx_data, spi_status);
        
        if (rx_data == 0xFF) {
 8000f08:	79bb      	ldrb	r3, [r7, #6]
 8000f0a:	2bff      	cmp	r3, #255	@ 0xff
 8000f0c:	d103      	bne.n	8000f16 <CC1201_HardwareDiagnostic+0xa2>
            printf("    ⚠ MISO may be disconnected (received same as initialized)\n\r");
 8000f0e:	4880      	ldr	r0, [pc, #512]	@ (8001110 <CC1201_HardwareDiagnostic+0x29c>)
 8000f10:	f008 fbec 	bl	80096ec <iprintf>
 8000f14:	e009      	b.n	8000f2a <CC1201_HardwareDiagnostic+0xb6>
        } else if (rx_data == 0x00) {
 8000f16:	79bb      	ldrb	r3, [r7, #6]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d103      	bne.n	8000f24 <CC1201_HardwareDiagnostic+0xb0>
            printf("    ⚠ Consistent 0x00 - CC1201 may not be responding\n\r");
 8000f1c:	487d      	ldr	r0, [pc, #500]	@ (8001114 <CC1201_HardwareDiagnostic+0x2a0>)
 8000f1e:	f008 fbe5 	bl	80096ec <iprintf>
 8000f22:	e002      	b.n	8000f2a <CC1201_HardwareDiagnostic+0xb6>
        } else {
            printf("    ✓ Got response - CC1201 may be communicating\n\r");
 8000f24:	487c      	ldr	r0, [pc, #496]	@ (8001118 <CC1201_HardwareDiagnostic+0x2a4>)
 8000f26:	f008 fbe1 	bl	80096ec <iprintf>
        }
        HAL_Delay(10);
 8000f2a:	200a      	movs	r0, #10
 8000f2c:	f002 fd3a 	bl	80039a4 <HAL_Delay>
    for (int i = 0; i < 4; i++) {
 8000f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f32:	3301      	adds	r3, #1
 8000f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f38:	2b03      	cmp	r3, #3
 8000f3a:	ddaf      	ble.n	8000e9c <CC1201_HardwareDiagnostic+0x28>
    }
    
    // 2. Test with different SPI settings
    printf("\n2. SPI CONFIGURATION VERIFICATION\n\r");
 8000f3c:	4877      	ldr	r0, [pc, #476]	@ (800111c <CC1201_HardwareDiagnostic+0x2a8>)
 8000f3e:	f008 fbd5 	bl	80096ec <iprintf>
    printf("  Current SPI2 Settings:\n\r");
 8000f42:	4877      	ldr	r0, [pc, #476]	@ (8001120 <CC1201_HardwareDiagnostic+0x2ac>)
 8000f44:	f008 fbd2 	bl	80096ec <iprintf>
    printf("    Mode: 0x%08lX (0x00400000 = Master)\n\r", (unsigned long)CC1201_SPI_HANDLE.Init.Mode);
 8000f48:	4b6f      	ldr	r3, [pc, #444]	@ (8001108 <CC1201_HardwareDiagnostic+0x294>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4875      	ldr	r0, [pc, #468]	@ (8001124 <CC1201_HardwareDiagnostic+0x2b0>)
 8000f50:	f008 fbcc 	bl	80096ec <iprintf>
    printf("    DataSize: 0x%08lX (0x00000007 = 8-bit)\n\r", (unsigned long)CC1201_SPI_HANDLE.Init.DataSize);
 8000f54:	4b6c      	ldr	r3, [pc, #432]	@ (8001108 <CC1201_HardwareDiagnostic+0x294>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4873      	ldr	r0, [pc, #460]	@ (8001128 <CC1201_HardwareDiagnostic+0x2b4>)
 8000f5c:	f008 fbc6 	bl	80096ec <iprintf>
    printf("    CPOL: %lu (0 = Low)\n\r", (unsigned long)CC1201_SPI_HANDLE.Init.CLKPolarity);
 8000f60:	4b69      	ldr	r3, [pc, #420]	@ (8001108 <CC1201_HardwareDiagnostic+0x294>)
 8000f62:	691b      	ldr	r3, [r3, #16]
 8000f64:	4619      	mov	r1, r3
 8000f66:	4871      	ldr	r0, [pc, #452]	@ (800112c <CC1201_HardwareDiagnostic+0x2b8>)
 8000f68:	f008 fbc0 	bl	80096ec <iprintf>
    printf("    CPHA: %lu (0 = 1st Edge)\n\r", (unsigned long)CC1201_SPI_HANDLE.Init.CLKPhase);
 8000f6c:	4b66      	ldr	r3, [pc, #408]	@ (8001108 <CC1201_HardwareDiagnostic+0x294>)
 8000f6e:	695b      	ldr	r3, [r3, #20]
 8000f70:	4619      	mov	r1, r3
 8000f72:	486f      	ldr	r0, [pc, #444]	@ (8001130 <CC1201_HardwareDiagnostic+0x2bc>)
 8000f74:	f008 fbba 	bl	80096ec <iprintf>
    printf("    BaudRate: 0x%08lX\n\r", (unsigned long)CC1201_SPI_HANDLE.Init.BaudRatePrescaler);
 8000f78:	4b63      	ldr	r3, [pc, #396]	@ (8001108 <CC1201_HardwareDiagnostic+0x294>)
 8000f7a:	69db      	ldr	r3, [r3, #28]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	486d      	ldr	r0, [pc, #436]	@ (8001134 <CC1201_HardwareDiagnostic+0x2c0>)
 8000f80:	f008 fbb4 	bl	80096ec <iprintf>
    
    // 3. GPIO Pin State Check
    printf("\n3. GPIO PIN STATE CHECK\n\r");
 8000f84:	486c      	ldr	r0, [pc, #432]	@ (8001138 <CC1201_HardwareDiagnostic+0x2c4>)
 8000f86:	f008 fbb1 	bl	80096ec <iprintf>
    GPIO_PinState cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 8000f8a:	2110      	movs	r1, #16
 8000f8c:	485d      	ldr	r0, [pc, #372]	@ (8001104 <CC1201_HardwareDiagnostic+0x290>)
 8000f8e:	f003 fc57 	bl	8004840 <HAL_GPIO_ReadPin>
 8000f92:	4603      	mov	r3, r0
 8000f94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    printf("  CS Pin (PE4) current state: %s\n\r", cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 8000f98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d101      	bne.n	8000fa4 <CC1201_HardwareDiagnostic+0x130>
 8000fa0:	4b66      	ldr	r3, [pc, #408]	@ (800113c <CC1201_HardwareDiagnostic+0x2c8>)
 8000fa2:	e000      	b.n	8000fa6 <CC1201_HardwareDiagnostic+0x132>
 8000fa4:	4b66      	ldr	r3, [pc, #408]	@ (8001140 <CC1201_HardwareDiagnostic+0x2cc>)
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4866      	ldr	r0, [pc, #408]	@ (8001144 <CC1201_HardwareDiagnostic+0x2d0>)
 8000faa:	f008 fb9f 	bl	80096ec <iprintf>
    
    // Toggle CS pin to verify control
    printf("  Testing CS pin control:\n\r");
 8000fae:	4866      	ldr	r0, [pc, #408]	@ (8001148 <CC1201_HardwareDiagnostic+0x2d4>)
 8000fb0:	f008 fb9c 	bl	80096ec <iprintf>
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2110      	movs	r1, #16
 8000fb8:	4852      	ldr	r0, [pc, #328]	@ (8001104 <CC1201_HardwareDiagnostic+0x290>)
 8000fba:	f003 fc59 	bl	8004870 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f002 fcf0 	bl	80039a4 <HAL_Delay>
    cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 8000fc4:	2110      	movs	r1, #16
 8000fc6:	484f      	ldr	r0, [pc, #316]	@ (8001104 <CC1201_HardwareDiagnostic+0x290>)
 8000fc8:	f003 fc3a 	bl	8004840 <HAL_GPIO_ReadPin>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    printf("    After setting LOW: %s\n\r", cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 8000fd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d101      	bne.n	8000fde <CC1201_HardwareDiagnostic+0x16a>
 8000fda:	4b58      	ldr	r3, [pc, #352]	@ (800113c <CC1201_HardwareDiagnostic+0x2c8>)
 8000fdc:	e000      	b.n	8000fe0 <CC1201_HardwareDiagnostic+0x16c>
 8000fde:	4b58      	ldr	r3, [pc, #352]	@ (8001140 <CC1201_HardwareDiagnostic+0x2cc>)
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	485a      	ldr	r0, [pc, #360]	@ (800114c <CC1201_HardwareDiagnostic+0x2d8>)
 8000fe4:	f008 fb82 	bl	80096ec <iprintf>
    
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	2110      	movs	r1, #16
 8000fec:	4845      	ldr	r0, [pc, #276]	@ (8001104 <CC1201_HardwareDiagnostic+0x290>)
 8000fee:	f003 fc3f 	bl	8004870 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	f002 fcd6 	bl	80039a4 <HAL_Delay>
    cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 8000ff8:	2110      	movs	r1, #16
 8000ffa:	4842      	ldr	r0, [pc, #264]	@ (8001104 <CC1201_HardwareDiagnostic+0x290>)
 8000ffc:	f003 fc20 	bl	8004840 <HAL_GPIO_ReadPin>
 8001000:	4603      	mov	r3, r0
 8001002:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    printf("    After setting HIGH: %s\n\r", cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 8001006:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800100a:	2b01      	cmp	r3, #1
 800100c:	d101      	bne.n	8001012 <CC1201_HardwareDiagnostic+0x19e>
 800100e:	4b4b      	ldr	r3, [pc, #300]	@ (800113c <CC1201_HardwareDiagnostic+0x2c8>)
 8001010:	e000      	b.n	8001014 <CC1201_HardwareDiagnostic+0x1a0>
 8001012:	4b4b      	ldr	r3, [pc, #300]	@ (8001140 <CC1201_HardwareDiagnostic+0x2cc>)
 8001014:	4619      	mov	r1, r3
 8001016:	484e      	ldr	r0, [pc, #312]	@ (8001150 <CC1201_HardwareDiagnostic+0x2dc>)
 8001018:	f008 fb68 	bl	80096ec <iprintf>
    
    // 4. Loopback test (if possible)
    printf("\n4. SPI LOOPBACK TEST (Connect MOSI to MISO temporarily)\n\r");
 800101c:	484d      	ldr	r0, [pc, #308]	@ (8001154 <CC1201_HardwareDiagnostic+0x2e0>)
 800101e:	f008 fb65 	bl	80096ec <iprintf>
    uint8_t loopback_patterns[] = {0xAA, 0x55, 0xFF, 0x00, 0xA5};
 8001022:	4a4d      	ldr	r2, [pc, #308]	@ (8001158 <CC1201_HardwareDiagnostic+0x2e4>)
 8001024:	f107 0308 	add.w	r3, r7, #8
 8001028:	e892 0003 	ldmia.w	r2, {r0, r1}
 800102c:	6018      	str	r0, [r3, #0]
 800102e:	3304      	adds	r3, #4
 8001030:	7019      	strb	r1, [r3, #0]
    
    for (int i = 0; i < 5; i++) {
 8001032:	2300      	movs	r3, #0
 8001034:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001036:	e02e      	b.n	8001096 <CC1201_HardwareDiagnostic+0x222>
        uint8_t tx = loopback_patterns[i];
 8001038:	f107 0208 	add.w	r2, r7, #8
 800103c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800103e:	4413      	add	r3, r2
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	717b      	strb	r3, [r7, #5]
        uint8_t rx = 0x00;
 8001044:	2300      	movs	r3, #0
 8001046:	713b      	strb	r3, [r7, #4]
        
        HAL_StatusTypeDef status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, &tx, &rx, 1, 1000);
 8001048:	1d3a      	adds	r2, r7, #4
 800104a:	1d79      	adds	r1, r7, #5
 800104c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2301      	movs	r3, #1
 8001054:	482c      	ldr	r0, [pc, #176]	@ (8001108 <CC1201_HardwareDiagnostic+0x294>)
 8001056:	f006 fbd9 	bl	800780c <HAL_SPI_TransmitReceive>
 800105a:	4603      	mov	r3, r0
 800105c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        printf("  Pattern 0x%02X: TX=0x%02X -> RX=0x%02X, HAL=%d", tx, tx, rx, status);
 8001060:	797b      	ldrb	r3, [r7, #5]
 8001062:	4619      	mov	r1, r3
 8001064:	797b      	ldrb	r3, [r7, #5]
 8001066:	461a      	mov	r2, r3
 8001068:	793b      	ldrb	r3, [r7, #4]
 800106a:	4618      	mov	r0, r3
 800106c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	4603      	mov	r3, r0
 8001074:	4839      	ldr	r0, [pc, #228]	@ (800115c <CC1201_HardwareDiagnostic+0x2e8>)
 8001076:	f008 fb39 	bl	80096ec <iprintf>
        
        if (rx == tx) {
 800107a:	793a      	ldrb	r2, [r7, #4]
 800107c:	797b      	ldrb	r3, [r7, #5]
 800107e:	429a      	cmp	r2, r3
 8001080:	d103      	bne.n	800108a <CC1201_HardwareDiagnostic+0x216>
            printf(" ✓ LOOPBACK OK\n\r");
 8001082:	4837      	ldr	r0, [pc, #220]	@ (8001160 <CC1201_HardwareDiagnostic+0x2ec>)
 8001084:	f008 fb32 	bl	80096ec <iprintf>
 8001088:	e002      	b.n	8001090 <CC1201_HardwareDiagnostic+0x21c>
        } else {
            printf(" ✗ No loopback\n\r");
 800108a:	4836      	ldr	r0, [pc, #216]	@ (8001164 <CC1201_HardwareDiagnostic+0x2f0>)
 800108c:	f008 fb2e 	bl	80096ec <iprintf>
    for (int i = 0; i < 5; i++) {
 8001090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001092:	3301      	adds	r3, #1
 8001094:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001098:	2b04      	cmp	r3, #4
 800109a:	ddcd      	ble.n	8001038 <CC1201_HardwareDiagnostic+0x1c4>
        }
    }
    
    // 5. Diagnostic Summary
    printf("\n5. DIAGNOSTIC SUMMARY\n\r");
 800109c:	4832      	ldr	r0, [pc, #200]	@ (8001168 <CC1201_HardwareDiagnostic+0x2f4>)
 800109e:	f008 fb25 	bl	80096ec <iprintf>
    printf("  If all RX data is 0x00:\n\r");
 80010a2:	4832      	ldr	r0, [pc, #200]	@ (800116c <CC1201_HardwareDiagnostic+0x2f8>)
 80010a4:	f008 fb22 	bl	80096ec <iprintf>
    printf("    - Check CC1201 power supply (3.3V)\n\r");
 80010a8:	4831      	ldr	r0, [pc, #196]	@ (8001170 <CC1201_HardwareDiagnostic+0x2fc>)
 80010aa:	f008 fb1f 	bl	80096ec <iprintf>
    printf("    - Check MISO connection (CC1201 SO pin to STM32 PA6)\n\r");
 80010ae:	4831      	ldr	r0, [pc, #196]	@ (8001174 <CC1201_HardwareDiagnostic+0x300>)
 80010b0:	f008 fb1c 	bl	80096ec <iprintf>
    printf("    - Check if CC1201 is in reset or sleep state\n\r");
 80010b4:	4830      	ldr	r0, [pc, #192]	@ (8001178 <CC1201_HardwareDiagnostic+0x304>)
 80010b6:	f008 fb19 	bl	80096ec <iprintf>
    printf("    - Verify CC1201 crystal oscillator is running\n\r");
 80010ba:	4830      	ldr	r0, [pc, #192]	@ (800117c <CC1201_HardwareDiagnostic+0x308>)
 80010bc:	f008 fb16 	bl	80096ec <iprintf>
    printf("\n  If all RX data is 0xFF:\n\r");
 80010c0:	482f      	ldr	r0, [pc, #188]	@ (8001180 <CC1201_HardwareDiagnostic+0x30c>)
 80010c2:	f008 fb13 	bl	80096ec <iprintf>
    printf("    - MISO line may be floating (not connected)\n\r");
 80010c6:	482f      	ldr	r0, [pc, #188]	@ (8001184 <CC1201_HardwareDiagnostic+0x310>)
 80010c8:	f008 fb10 	bl	80096ec <iprintf>
    printf("    - Check SPI MISO pin configuration\n\r");
 80010cc:	482e      	ldr	r0, [pc, #184]	@ (8001188 <CC1201_HardwareDiagnostic+0x314>)
 80010ce:	f008 fb0d 	bl	80096ec <iprintf>
    printf("\n  If RX data varies:\n\r");
 80010d2:	482e      	ldr	r0, [pc, #184]	@ (800118c <CC1201_HardwareDiagnostic+0x318>)
 80010d4:	f008 fb0a 	bl	80096ec <iprintf>
    printf("    - CC1201 is responding - check command format\n\r");
 80010d8:	482d      	ldr	r0, [pc, #180]	@ (8001190 <CC1201_HardwareDiagnostic+0x31c>)
 80010da:	f008 fb07 	bl	80096ec <iprintf>
    printf("    - May need proper initialization sequence\n\r");
 80010de:	482d      	ldr	r0, [pc, #180]	@ (8001194 <CC1201_HardwareDiagnostic+0x320>)
 80010e0:	f008 fb04 	bl	80096ec <iprintf>
    
    printf("=== HARDWARE DIAGNOSTIC COMPLETE ===\n\r");
 80010e4:	482c      	ldr	r0, [pc, #176]	@ (8001198 <CC1201_HardwareDiagnostic+0x324>)
 80010e6:	f008 fb01 	bl	80096ec <iprintf>
}
 80010ea:	bf00      	nop
 80010ec:	3734      	adds	r7, #52	@ 0x34
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd90      	pop	{r4, r7, pc}
 80010f2:	bf00      	nop
 80010f4:	0800a92c 	.word	0x0800a92c
 80010f8:	0800a958 	.word	0x0800a958
 80010fc:	3634303d 	.word	0x3634303d
 8001100:	0800aee0 	.word	0x0800aee0
 8001104:	58021000 	.word	0x58021000
 8001108:	240000b8 	.word	0x240000b8
 800110c:	0800a97c 	.word	0x0800a97c
 8001110:	0800a9ac 	.word	0x0800a9ac
 8001114:	0800a9f0 	.word	0x0800a9f0
 8001118:	0800aa2c 	.word	0x0800aa2c
 800111c:	0800aa64 	.word	0x0800aa64
 8001120:	0800aa8c 	.word	0x0800aa8c
 8001124:	0800aaa8 	.word	0x0800aaa8
 8001128:	0800aad4 	.word	0x0800aad4
 800112c:	0800ab04 	.word	0x0800ab04
 8001130:	0800ab20 	.word	0x0800ab20
 8001134:	0800ab40 	.word	0x0800ab40
 8001138:	0800ab58 	.word	0x0800ab58
 800113c:	0800ab74 	.word	0x0800ab74
 8001140:	0800ab7c 	.word	0x0800ab7c
 8001144:	0800ab80 	.word	0x0800ab80
 8001148:	0800aba4 	.word	0x0800aba4
 800114c:	0800abc0 	.word	0x0800abc0
 8001150:	0800abdc 	.word	0x0800abdc
 8001154:	0800abfc 	.word	0x0800abfc
 8001158:	0800aef0 	.word	0x0800aef0
 800115c:	0800ac38 	.word	0x0800ac38
 8001160:	0800ac6c 	.word	0x0800ac6c
 8001164:	0800ac80 	.word	0x0800ac80
 8001168:	0800ac94 	.word	0x0800ac94
 800116c:	0800acb0 	.word	0x0800acb0
 8001170:	0800accc 	.word	0x0800accc
 8001174:	0800acf8 	.word	0x0800acf8
 8001178:	0800ad34 	.word	0x0800ad34
 800117c:	0800ad68 	.word	0x0800ad68
 8001180:	0800ad9c 	.word	0x0800ad9c
 8001184:	0800adbc 	.word	0x0800adbc
 8001188:	0800adf0 	.word	0x0800adf0
 800118c:	0800ae1c 	.word	0x0800ae1c
 8001190:	0800ae34 	.word	0x0800ae34
 8001194:	0800ae68 	.word	0x0800ae68
 8001198:	0800ae98 	.word	0x0800ae98

0800119c <CC1201_SendStrobe>:
 * @param status_byte Pointer to a uint8_t where the status byte received from the CC1201 will be stored.
 *                    Can be NULL if the status byte is not needed.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_SendStrobe(uint8_t strobe_command, uint8_t *status_byte)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af02      	add	r7, sp, #8
 80011a2:	4603      	mov	r3, r0
 80011a4:	6039      	str	r1, [r7, #0]
 80011a6:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;
    uint8_t rx_data;

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 80011a8:	2200      	movs	r2, #0
 80011aa:	2110      	movs	r1, #16
 80011ac:	4812      	ldr	r0, [pc, #72]	@ (80011f8 <CC1201_SendStrobe+0x5c>)
 80011ae:	f003 fb5f 	bl	8004870 <HAL_GPIO_WritePin>
    
    // Small delay to ensure CS is stable
    HAL_Delay(1);
 80011b2:	2001      	movs	r0, #1
 80011b4:	f002 fbf6 	bl	80039a4 <HAL_Delay>

    // Perform SPI transaction
    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, &strobe_command, &rx_data, 1, 1000);
 80011b8:	f107 020e 	add.w	r2, r7, #14
 80011bc:	1df9      	adds	r1, r7, #7
 80011be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	2301      	movs	r3, #1
 80011c6:	480d      	ldr	r0, [pc, #52]	@ (80011fc <CC1201_SendStrobe+0x60>)
 80011c8:	f006 fb20 	bl	800780c <HAL_SPI_TransmitReceive>
 80011cc:	4603      	mov	r3, r0
 80011ce:	73fb      	strb	r3, [r7, #15]
    
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 80011d0:	2201      	movs	r2, #1
 80011d2:	2110      	movs	r1, #16
 80011d4:	4808      	ldr	r0, [pc, #32]	@ (80011f8 <CC1201_SendStrobe+0x5c>)
 80011d6:	f003 fb4b 	bl	8004870 <HAL_GPIO_WritePin>
    
    if (status == HAL_OK) {
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d105      	bne.n	80011ec <CC1201_SendStrobe+0x50>
        if (status_byte != NULL) {
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d002      	beq.n	80011ec <CC1201_SendStrobe+0x50>
            *status_byte = rx_data;
 80011e6:	7bba      	ldrb	r2, [r7, #14]
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	701a      	strb	r2, [r3, #0]
        }
    }
    return status;
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	58021000 	.word	0x58021000
 80011fc:	240000b8 	.word	0x240000b8

08001200 <STM32_PinConfigDiagnostic>:
#include <stdio.h>

/**
 * @brief Comprehensive STM32 pin configuration and state diagnostic
 */
void STM32_PinConfigDiagnostic(void) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b0a6      	sub	sp, #152	@ 0x98
 8001204:	af00      	add	r7, sp, #0
    printf("\n=== STM32 PIN CONFIGURATION DIAGNOSTIC ===\n\r");
 8001206:	48b0      	ldr	r0, [pc, #704]	@ (80014c8 <STM32_PinConfigDiagnostic+0x2c8>)
 8001208:	f008 fa70 	bl	80096ec <iprintf>
    
    // 1. SPI2 Pin Configuration Check
    printf("1. SPI2 PIN CONFIGURATION ANALYSIS\n\r");
 800120c:	48af      	ldr	r0, [pc, #700]	@ (80014cc <STM32_PinConfigDiagnostic+0x2cc>)
 800120e:	f008 fa6d 	bl	80096ec <iprintf>
    // Check SPI2 pins (assuming standard STM32H7 Nucleo mapping)
    // SPI2_SCK  = PB10 or PB13 or PA9
    // SPI2_MISO = PB14 or PC2  or PA6  
    // SPI2_MOSI = PB15 or PC3  or PA10
    
    printf("  Checking potential SPI2 pins:\n\r");
 8001212:	48af      	ldr	r0, [pc, #700]	@ (80014d0 <STM32_PinConfigDiagnostic+0x2d0>)
 8001214:	f008 fa6a 	bl	80096ec <iprintf>
    
    // Check PA6 (likely MISO)
    GPIO_TypeDef* porta = GPIOA;
 8001218:	4bae      	ldr	r3, [pc, #696]	@ (80014d4 <STM32_PinConfigDiagnostic+0x2d4>)
 800121a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    uint32_t moder_a6 = (porta->MODER >> (6 * 2)) & 0x3;
 800121e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	0b1b      	lsrs	r3, r3, #12
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    uint32_t afr_a6 = (porta->AFR[0] >> (6 * 4)) & 0xF;
 800122e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001232:	6a1b      	ldr	r3, [r3, #32]
 8001234:	0e1b      	lsrs	r3, r3, #24
 8001236:	f003 030f 	and.w	r3, r3, #15
 800123a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_PinState state_a6 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 800123e:	2140      	movs	r1, #64	@ 0x40
 8001240:	48a4      	ldr	r0, [pc, #656]	@ (80014d4 <STM32_PinConfigDiagnostic+0x2d4>)
 8001242:	f003 fafd 	bl	8004840 <HAL_GPIO_ReadPin>
 8001246:	4603      	mov	r3, r0
 8001248:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    
    printf("    PA6 (MISO): MODE=%lu (2=AF), AF=%lu (5=SPI2), STATE=%s\n\r", 
 800124c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001250:	2b01      	cmp	r3, #1
 8001252:	d101      	bne.n	8001258 <STM32_PinConfigDiagnostic+0x58>
 8001254:	4ba0      	ldr	r3, [pc, #640]	@ (80014d8 <STM32_PinConfigDiagnostic+0x2d8>)
 8001256:	e000      	b.n	800125a <STM32_PinConfigDiagnostic+0x5a>
 8001258:	4ba0      	ldr	r3, [pc, #640]	@ (80014dc <STM32_PinConfigDiagnostic+0x2dc>)
 800125a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800125e:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8001262:	489f      	ldr	r0, [pc, #636]	@ (80014e0 <STM32_PinConfigDiagnostic+0x2e0>)
 8001264:	f008 fa42 	bl	80096ec <iprintf>
           moder_a6, afr_a6, state_a6 == GPIO_PIN_SET ? "HIGH" : "LOW");
    
    // Check PA10 (likely MOSI)  
    uint32_t moder_a10 = (porta->MODER >> (10 * 2)) & 0x3;
 8001268:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	0d1b      	lsrs	r3, r3, #20
 8001270:	f003 0303 	and.w	r3, r3, #3
 8001274:	67bb      	str	r3, [r7, #120]	@ 0x78
    uint32_t afr_a10 = (porta->AFR[1] >> ((10-8) * 4)) & 0xF;
 8001276:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800127a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800127c:	0a1b      	lsrs	r3, r3, #8
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_PinState state_a10 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8001284:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001288:	4892      	ldr	r0, [pc, #584]	@ (80014d4 <STM32_PinConfigDiagnostic+0x2d4>)
 800128a:	f003 fad9 	bl	8004840 <HAL_GPIO_ReadPin>
 800128e:	4603      	mov	r3, r0
 8001290:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
    
    printf("    PA10 (MOSI): MODE=%lu (2=AF), AF=%lu (5=SPI2), STATE=%s\n\r", 
 8001294:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001298:	2b01      	cmp	r3, #1
 800129a:	d101      	bne.n	80012a0 <STM32_PinConfigDiagnostic+0xa0>
 800129c:	4b8e      	ldr	r3, [pc, #568]	@ (80014d8 <STM32_PinConfigDiagnostic+0x2d8>)
 800129e:	e000      	b.n	80012a2 <STM32_PinConfigDiagnostic+0xa2>
 80012a0:	4b8e      	ldr	r3, [pc, #568]	@ (80014dc <STM32_PinConfigDiagnostic+0x2dc>)
 80012a2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80012a4:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80012a6:	488f      	ldr	r0, [pc, #572]	@ (80014e4 <STM32_PinConfigDiagnostic+0x2e4>)
 80012a8:	f008 fa20 	bl	80096ec <iprintf>
           moder_a10, afr_a10, state_a10 == GPIO_PIN_SET ? "HIGH" : "LOW");
    
    // Check PB10 (likely SCK)
    GPIO_TypeDef* portb = GPIOB;
 80012ac:	4b8e      	ldr	r3, [pc, #568]	@ (80014e8 <STM32_PinConfigDiagnostic+0x2e8>)
 80012ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
    uint32_t moder_b10 = (portb->MODER >> (10 * 2)) & 0x3;
 80012b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	0d1b      	lsrs	r3, r3, #20
 80012b6:	f003 0303 	and.w	r3, r3, #3
 80012ba:	66bb      	str	r3, [r7, #104]	@ 0x68
    uint32_t afr_b10 = (portb->AFR[1] >> ((10-8) * 4)) & 0xF;
 80012bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80012be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c0:	0a1b      	lsrs	r3, r3, #8
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_PinState state_b10 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
 80012c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012cc:	4886      	ldr	r0, [pc, #536]	@ (80014e8 <STM32_PinConfigDiagnostic+0x2e8>)
 80012ce:	f003 fab7 	bl	8004840 <HAL_GPIO_ReadPin>
 80012d2:	4603      	mov	r3, r0
 80012d4:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
    
    printf("    PB10 (SCK): MODE=%lu (2=AF), AF=%lu (5=SPI2), STATE=%s\n\r", 
 80012d8:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d101      	bne.n	80012e4 <STM32_PinConfigDiagnostic+0xe4>
 80012e0:	4b7d      	ldr	r3, [pc, #500]	@ (80014d8 <STM32_PinConfigDiagnostic+0x2d8>)
 80012e2:	e000      	b.n	80012e6 <STM32_PinConfigDiagnostic+0xe6>
 80012e4:	4b7d      	ldr	r3, [pc, #500]	@ (80014dc <STM32_PinConfigDiagnostic+0x2dc>)
 80012e6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80012e8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80012ea:	4880      	ldr	r0, [pc, #512]	@ (80014ec <STM32_PinConfigDiagnostic+0x2ec>)
 80012ec:	f008 f9fe 	bl	80096ec <iprintf>
           moder_b10, afr_b10, state_b10 == GPIO_PIN_SET ? "HIGH" : "LOW");
    
    // 2. CS Pin (PE4) Detailed Analysis
    printf("\n2. CS PIN (PE4) DETAILED ANALYSIS\n\r");
 80012f0:	487f      	ldr	r0, [pc, #508]	@ (80014f0 <STM32_PinConfigDiagnostic+0x2f0>)
 80012f2:	f008 f9fb 	bl	80096ec <iprintf>
    GPIO_TypeDef* porte = GPIOE;
 80012f6:	4b7f      	ldr	r3, [pc, #508]	@ (80014f4 <STM32_PinConfigDiagnostic+0x2f4>)
 80012f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    uint32_t moder_e4 = (porte->MODER >> (4 * 2)) & 0x3;
 80012fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	0a1b      	lsrs	r3, r3, #8
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	65bb      	str	r3, [r7, #88]	@ 0x58
    uint32_t otyper_e4 = (porte->OTYPER >> 4) & 0x1;
 8001306:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	091b      	lsrs	r3, r3, #4
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	657b      	str	r3, [r7, #84]	@ 0x54
    uint32_t ospeedr_e4 = (porte->OSPEEDR >> (4 * 2)) & 0x3;
 8001312:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	0a1b      	lsrs	r3, r3, #8
 8001318:	f003 0303 	and.w	r3, r3, #3
 800131c:	653b      	str	r3, [r7, #80]	@ 0x50
    uint32_t pupdr_e4 = (porte->PUPDR >> (4 * 2)) & 0x3;
 800131e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	0a1b      	lsrs	r3, r3, #8
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_PinState state_e4 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4);
 800132a:	2110      	movs	r1, #16
 800132c:	4871      	ldr	r0, [pc, #452]	@ (80014f4 <STM32_PinConfigDiagnostic+0x2f4>)
 800132e:	f003 fa87 	bl	8004840 <HAL_GPIO_ReadPin>
 8001332:	4603      	mov	r3, r0
 8001334:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    
    printf("    PE4 Configuration:\n\r");
 8001338:	486f      	ldr	r0, [pc, #444]	@ (80014f8 <STM32_PinConfigDiagnostic+0x2f8>)
 800133a:	f008 f9d7 	bl	80096ec <iprintf>
    printf("      MODE: %lu (0=Input, 1=Output, 2=AF, 3=Analog)\n\r", moder_e4);
 800133e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001340:	486e      	ldr	r0, [pc, #440]	@ (80014fc <STM32_PinConfigDiagnostic+0x2fc>)
 8001342:	f008 f9d3 	bl	80096ec <iprintf>
    printf("      OTYPE: %lu (0=Push-pull, 1=Open-drain)\n\r", otyper_e4);
 8001346:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001348:	486d      	ldr	r0, [pc, #436]	@ (8001500 <STM32_PinConfigDiagnostic+0x300>)
 800134a:	f008 f9cf 	bl	80096ec <iprintf>
    printf("      SPEED: %lu (0=Low, 1=Medium, 2=High, 3=VeryHigh)\n\r", ospeedr_e4);
 800134e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001350:	486c      	ldr	r0, [pc, #432]	@ (8001504 <STM32_PinConfigDiagnostic+0x304>)
 8001352:	f008 f9cb 	bl	80096ec <iprintf>
    printf("      PUPD: %lu (0=None, 1=Pull-up, 2=Pull-down)\n\r", pupdr_e4);
 8001356:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001358:	486b      	ldr	r0, [pc, #428]	@ (8001508 <STM32_PinConfigDiagnostic+0x308>)
 800135a:	f008 f9c7 	bl	80096ec <iprintf>
    printf("      STATE: %s\n\r", state_e4 == GPIO_PIN_SET ? "HIGH" : "LOW");
 800135e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001362:	2b01      	cmp	r3, #1
 8001364:	d101      	bne.n	800136a <STM32_PinConfigDiagnostic+0x16a>
 8001366:	4b5c      	ldr	r3, [pc, #368]	@ (80014d8 <STM32_PinConfigDiagnostic+0x2d8>)
 8001368:	e000      	b.n	800136c <STM32_PinConfigDiagnostic+0x16c>
 800136a:	4b5c      	ldr	r3, [pc, #368]	@ (80014dc <STM32_PinConfigDiagnostic+0x2dc>)
 800136c:	4619      	mov	r1, r3
 800136e:	4867      	ldr	r0, [pc, #412]	@ (800150c <STM32_PinConfigDiagnostic+0x30c>)
 8001370:	f008 f9bc 	bl	80096ec <iprintf>
    
    // 3. INT Pin (PD4) Analysis
    printf("\n3. INT PIN (PD4) ANALYSIS\n\r");
 8001374:	4866      	ldr	r0, [pc, #408]	@ (8001510 <STM32_PinConfigDiagnostic+0x310>)
 8001376:	f008 f9b9 	bl	80096ec <iprintf>
    GPIO_TypeDef* portd = GPIOD;
 800137a:	4b66      	ldr	r3, [pc, #408]	@ (8001514 <STM32_PinConfigDiagnostic+0x314>)
 800137c:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t moder_d4 = (portd->MODER >> (4 * 2)) & 0x3;
 800137e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	0a1b      	lsrs	r3, r3, #8
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	643b      	str	r3, [r7, #64]	@ 0x40
    uint32_t pupdr_d4 = (portd->PUPDR >> (4 * 2)) & 0x3;
 800138a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	0a1b      	lsrs	r3, r3, #8
 8001390:	f003 0303 	and.w	r3, r3, #3
 8001394:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_PinState state_d4 = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4);
 8001396:	2110      	movs	r1, #16
 8001398:	485e      	ldr	r0, [pc, #376]	@ (8001514 <STM32_PinConfigDiagnostic+0x314>)
 800139a:	f003 fa51 	bl	8004840 <HAL_GPIO_ReadPin>
 800139e:	4603      	mov	r3, r0
 80013a0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    
    printf("    PD4 Configuration:\n\r");
 80013a4:	485c      	ldr	r0, [pc, #368]	@ (8001518 <STM32_PinConfigDiagnostic+0x318>)
 80013a6:	f008 f9a1 	bl	80096ec <iprintf>
    printf("      MODE: %lu (0=Input, 1=Output, 2=AF, 3=Analog)\n\r", moder_d4);
 80013aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80013ac:	4853      	ldr	r0, [pc, #332]	@ (80014fc <STM32_PinConfigDiagnostic+0x2fc>)
 80013ae:	f008 f99d 	bl	80096ec <iprintf>
    printf("      PUPD: %lu (0=None, 1=Pull-up, 2=Pull-down)\n\r", pupdr_d4);
 80013b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80013b4:	4854      	ldr	r0, [pc, #336]	@ (8001508 <STM32_PinConfigDiagnostic+0x308>)
 80013b6:	f008 f999 	bl	80096ec <iprintf>
    printf("      STATE: %s\n\r", state_d4 == GPIO_PIN_SET ? "HIGH" : "LOW");
 80013ba:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d101      	bne.n	80013c6 <STM32_PinConfigDiagnostic+0x1c6>
 80013c2:	4b45      	ldr	r3, [pc, #276]	@ (80014d8 <STM32_PinConfigDiagnostic+0x2d8>)
 80013c4:	e000      	b.n	80013c8 <STM32_PinConfigDiagnostic+0x1c8>
 80013c6:	4b45      	ldr	r3, [pc, #276]	@ (80014dc <STM32_PinConfigDiagnostic+0x2dc>)
 80013c8:	4619      	mov	r1, r3
 80013ca:	4850      	ldr	r0, [pc, #320]	@ (800150c <STM32_PinConfigDiagnostic+0x30c>)
 80013cc:	f008 f98e 	bl	80096ec <iprintf>
    
    // 4. Alternative Pin Scanning
    printf("\n4. SCANNING FOR POTENTIAL SPI PINS\n\r");
 80013d0:	4852      	ldr	r0, [pc, #328]	@ (800151c <STM32_PinConfigDiagnostic+0x31c>)
 80013d2:	f008 f98b 	bl	80096ec <iprintf>
    printf("  Checking all GPIO ports for AF5 (SPI2) configuration:\n\r");
 80013d6:	4852      	ldr	r0, [pc, #328]	@ (8001520 <STM32_PinConfigDiagnostic+0x320>)
 80013d8:	f008 f988 	bl	80096ec <iprintf>
    
    // Port A scan
    printf("    Port A:\n\r");
 80013dc:	4851      	ldr	r0, [pc, #324]	@ (8001524 <STM32_PinConfigDiagnostic+0x324>)
 80013de:	f008 f985 	bl	80096ec <iprintf>
    for (int pin = 0; pin < 16; pin++) {
 80013e2:	2300      	movs	r3, #0
 80013e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80013e8:	e048      	b.n	800147c <STM32_PinConfigDiagnostic+0x27c>
        uint32_t mode = (porta->MODER >> (pin * 2)) & 0x3;
 80013ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	fa22 f303 	lsr.w	r3, r2, r3
 80013fa:	f003 0303 	and.w	r3, r3, #3
 80013fe:	60bb      	str	r3, [r7, #8]
        if (mode == 2) { // Alternate function mode
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	2b02      	cmp	r3, #2
 8001404:	d135      	bne.n	8001472 <STM32_PinConfigDiagnostic+0x272>
            uint32_t af = (pin < 8) ? 
                         ((porta->AFR[0] >> (pin * 4)) & 0xF) : 
 8001406:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800140a:	2b07      	cmp	r3, #7
 800140c:	dc0a      	bgt.n	8001424 <STM32_PinConfigDiagnostic+0x224>
 800140e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001412:	6a1a      	ldr	r2, [r3, #32]
 8001414:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	fa22 f303 	lsr.w	r3, r2, r3
 800141e:	f003 030f 	and.w	r3, r3, #15
 8001422:	e00a      	b.n	800143a <STM32_PinConfigDiagnostic+0x23a>
                         ((porta->AFR[1] >> ((pin-8) * 4)) & 0xF);
 8001424:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001428:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800142a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800142e:	3b08      	subs	r3, #8
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	fa22 f303 	lsr.w	r3, r2, r3
                         ((porta->AFR[0] >> (pin * 4)) & 0xF) : 
 8001436:	f003 030f 	and.w	r3, r3, #15
            uint32_t af = (pin < 8) ? 
 800143a:	607b      	str	r3, [r7, #4]
            if (af == 5) { // AF5 = SPI2
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b05      	cmp	r3, #5
 8001440:	d117      	bne.n	8001472 <STM32_PinConfigDiagnostic+0x272>
                GPIO_PinState state = HAL_GPIO_ReadPin(GPIOA, 1 << pin);
 8001442:	2201      	movs	r2, #1
 8001444:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	b29b      	uxth	r3, r3
 800144e:	4619      	mov	r1, r3
 8001450:	4820      	ldr	r0, [pc, #128]	@ (80014d4 <STM32_PinConfigDiagnostic+0x2d4>)
 8001452:	f003 f9f5 	bl	8004840 <HAL_GPIO_ReadPin>
 8001456:	4603      	mov	r3, r0
 8001458:	70fb      	strb	r3, [r7, #3]
                printf("      PA%d: AF5 (SPI2), STATE=%s\n\r", pin, 
 800145a:	78fb      	ldrb	r3, [r7, #3]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d101      	bne.n	8001464 <STM32_PinConfigDiagnostic+0x264>
 8001460:	4b1d      	ldr	r3, [pc, #116]	@ (80014d8 <STM32_PinConfigDiagnostic+0x2d8>)
 8001462:	e000      	b.n	8001466 <STM32_PinConfigDiagnostic+0x266>
 8001464:	4b1d      	ldr	r3, [pc, #116]	@ (80014dc <STM32_PinConfigDiagnostic+0x2dc>)
 8001466:	461a      	mov	r2, r3
 8001468:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800146c:	482e      	ldr	r0, [pc, #184]	@ (8001528 <STM32_PinConfigDiagnostic+0x328>)
 800146e:	f008 f93d 	bl	80096ec <iprintf>
    for (int pin = 0; pin < 16; pin++) {
 8001472:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001476:	3301      	adds	r3, #1
 8001478:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800147c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001480:	2b0f      	cmp	r3, #15
 8001482:	ddb2      	ble.n	80013ea <STM32_PinConfigDiagnostic+0x1ea>
            }
        }
    }
    
    // Port B scan
    printf("    Port B:\n\r");
 8001484:	4829      	ldr	r0, [pc, #164]	@ (800152c <STM32_PinConfigDiagnostic+0x32c>)
 8001486:	f008 f931 	bl	80096ec <iprintf>
    for (int pin = 0; pin < 16; pin++) {
 800148a:	2300      	movs	r3, #0
 800148c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001490:	e079      	b.n	8001586 <STM32_PinConfigDiagnostic+0x386>
        uint32_t mode = (portb->MODER >> (pin * 2)) & 0x3;
 8001492:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	fa22 f303 	lsr.w	r3, r2, r3
 80014a0:	f003 0303 	and.w	r3, r3, #3
 80014a4:	617b      	str	r3, [r7, #20]
        if (mode == 2) { // Alternate function mode
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d167      	bne.n	800157c <STM32_PinConfigDiagnostic+0x37c>
            uint32_t af = (pin < 8) ? 
                         ((portb->AFR[0] >> (pin * 4)) & 0xF) : 
 80014ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80014b0:	2b07      	cmp	r3, #7
 80014b2:	dc3d      	bgt.n	8001530 <STM32_PinConfigDiagnostic+0x330>
 80014b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80014b6:	6a1a      	ldr	r2, [r3, #32]
 80014b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	fa22 f303 	lsr.w	r3, r2, r3
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	e03d      	b.n	8001544 <STM32_PinConfigDiagnostic+0x344>
 80014c8:	0800aef8 	.word	0x0800aef8
 80014cc:	0800af28 	.word	0x0800af28
 80014d0:	0800af50 	.word	0x0800af50
 80014d4:	58020000 	.word	0x58020000
 80014d8:	0800af74 	.word	0x0800af74
 80014dc:	0800af7c 	.word	0x0800af7c
 80014e0:	0800af80 	.word	0x0800af80
 80014e4:	0800afc0 	.word	0x0800afc0
 80014e8:	58020400 	.word	0x58020400
 80014ec:	0800b000 	.word	0x0800b000
 80014f0:	0800b040 	.word	0x0800b040
 80014f4:	58021000 	.word	0x58021000
 80014f8:	0800b068 	.word	0x0800b068
 80014fc:	0800b084 	.word	0x0800b084
 8001500:	0800b0bc 	.word	0x0800b0bc
 8001504:	0800b0ec 	.word	0x0800b0ec
 8001508:	0800b128 	.word	0x0800b128
 800150c:	0800b15c 	.word	0x0800b15c
 8001510:	0800b170 	.word	0x0800b170
 8001514:	58020c00 	.word	0x58020c00
 8001518:	0800b190 	.word	0x0800b190
 800151c:	0800b1ac 	.word	0x0800b1ac
 8001520:	0800b1d4 	.word	0x0800b1d4
 8001524:	0800b210 	.word	0x0800b210
 8001528:	0800b220 	.word	0x0800b220
 800152c:	0800b244 	.word	0x0800b244
                         ((portb->AFR[1] >> ((pin-8) * 4)) & 0xF);
 8001530:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001532:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001534:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001538:	3b08      	subs	r3, #8
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	fa22 f303 	lsr.w	r3, r2, r3
                         ((portb->AFR[0] >> (pin * 4)) & 0xF) : 
 8001540:	f003 030f 	and.w	r3, r3, #15
            uint32_t af = (pin < 8) ? 
 8001544:	613b      	str	r3, [r7, #16]
            if (af == 5) { // AF5 = SPI2
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	2b05      	cmp	r3, #5
 800154a:	d117      	bne.n	800157c <STM32_PinConfigDiagnostic+0x37c>
                GPIO_PinState state = HAL_GPIO_ReadPin(GPIOB, 1 << pin);
 800154c:	2201      	movs	r2, #1
 800154e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	b29b      	uxth	r3, r3
 8001558:	4619      	mov	r1, r3
 800155a:	4890      	ldr	r0, [pc, #576]	@ (800179c <STM32_PinConfigDiagnostic+0x59c>)
 800155c:	f003 f970 	bl	8004840 <HAL_GPIO_ReadPin>
 8001560:	4603      	mov	r3, r0
 8001562:	73fb      	strb	r3, [r7, #15]
                printf("      PB%d: AF5 (SPI2), STATE=%s\n\r", pin, 
 8001564:	7bfb      	ldrb	r3, [r7, #15]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d101      	bne.n	800156e <STM32_PinConfigDiagnostic+0x36e>
 800156a:	4b8d      	ldr	r3, [pc, #564]	@ (80017a0 <STM32_PinConfigDiagnostic+0x5a0>)
 800156c:	e000      	b.n	8001570 <STM32_PinConfigDiagnostic+0x370>
 800156e:	4b8d      	ldr	r3, [pc, #564]	@ (80017a4 <STM32_PinConfigDiagnostic+0x5a4>)
 8001570:	461a      	mov	r2, r3
 8001572:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001576:	488c      	ldr	r0, [pc, #560]	@ (80017a8 <STM32_PinConfigDiagnostic+0x5a8>)
 8001578:	f008 f8b8 	bl	80096ec <iprintf>
    for (int pin = 0; pin < 16; pin++) {
 800157c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001580:	3301      	adds	r3, #1
 8001582:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001586:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800158a:	2b0f      	cmp	r3, #15
 800158c:	dd81      	ble.n	8001492 <STM32_PinConfigDiagnostic+0x292>
            }
        }
    }
    
    // Port C scan
    GPIO_TypeDef* portc = GPIOC;
 800158e:	4b87      	ldr	r3, [pc, #540]	@ (80017ac <STM32_PinConfigDiagnostic+0x5ac>)
 8001590:	637b      	str	r3, [r7, #52]	@ 0x34
    printf("    Port C:\n\r");
 8001592:	4887      	ldr	r0, [pc, #540]	@ (80017b0 <STM32_PinConfigDiagnostic+0x5b0>)
 8001594:	f008 f8aa 	bl	80096ec <iprintf>
    for (int pin = 0; pin < 16; pin++) {
 8001598:	2300      	movs	r3, #0
 800159a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800159e:	e045      	b.n	800162c <STM32_PinConfigDiagnostic+0x42c>
        uint32_t mode = (portc->MODER >> (pin * 2)) & 0x3;
 80015a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	fa22 f303 	lsr.w	r3, r2, r3
 80015ae:	f003 0303 	and.w	r3, r3, #3
 80015b2:	623b      	str	r3, [r7, #32]
        if (mode == 2) { // Alternate function mode
 80015b4:	6a3b      	ldr	r3, [r7, #32]
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d133      	bne.n	8001622 <STM32_PinConfigDiagnostic+0x422>
            uint32_t af = (pin < 8) ? 
                         ((portc->AFR[0] >> (pin * 4)) & 0xF) : 
 80015ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015be:	2b07      	cmp	r3, #7
 80015c0:	dc09      	bgt.n	80015d6 <STM32_PinConfigDiagnostic+0x3d6>
 80015c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015c4:	6a1a      	ldr	r2, [r3, #32]
 80015c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	fa22 f303 	lsr.w	r3, r2, r3
 80015d0:	f003 030f 	and.w	r3, r3, #15
 80015d4:	e009      	b.n	80015ea <STM32_PinConfigDiagnostic+0x3ea>
                         ((portc->AFR[1] >> ((pin-8) * 4)) & 0xF);
 80015d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015de:	3b08      	subs	r3, #8
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	fa22 f303 	lsr.w	r3, r2, r3
                         ((portc->AFR[0] >> (pin * 4)) & 0xF) : 
 80015e6:	f003 030f 	and.w	r3, r3, #15
            uint32_t af = (pin < 8) ? 
 80015ea:	61fb      	str	r3, [r7, #28]
            if (af == 5) { // AF5 = SPI2
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	2b05      	cmp	r3, #5
 80015f0:	d117      	bne.n	8001622 <STM32_PinConfigDiagnostic+0x422>
                GPIO_PinState state = HAL_GPIO_ReadPin(GPIOC, 1 << pin);
 80015f2:	2201      	movs	r2, #1
 80015f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	4619      	mov	r1, r3
 8001600:	486a      	ldr	r0, [pc, #424]	@ (80017ac <STM32_PinConfigDiagnostic+0x5ac>)
 8001602:	f003 f91d 	bl	8004840 <HAL_GPIO_ReadPin>
 8001606:	4603      	mov	r3, r0
 8001608:	76fb      	strb	r3, [r7, #27]
                printf("      PC%d: AF5 (SPI2), STATE=%s\n\r", pin, 
 800160a:	7efb      	ldrb	r3, [r7, #27]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d101      	bne.n	8001614 <STM32_PinConfigDiagnostic+0x414>
 8001610:	4b63      	ldr	r3, [pc, #396]	@ (80017a0 <STM32_PinConfigDiagnostic+0x5a0>)
 8001612:	e000      	b.n	8001616 <STM32_PinConfigDiagnostic+0x416>
 8001614:	4b63      	ldr	r3, [pc, #396]	@ (80017a4 <STM32_PinConfigDiagnostic+0x5a4>)
 8001616:	461a      	mov	r2, r3
 8001618:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800161c:	4865      	ldr	r0, [pc, #404]	@ (80017b4 <STM32_PinConfigDiagnostic+0x5b4>)
 800161e:	f008 f865 	bl	80096ec <iprintf>
    for (int pin = 0; pin < 16; pin++) {
 8001622:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001626:	3301      	adds	r3, #1
 8001628:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800162c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001630:	2b0f      	cmp	r3, #15
 8001632:	ddb5      	ble.n	80015a0 <STM32_PinConfigDiagnostic+0x3a0>
            }
        }
    }
    
    // 5. SPI2 Peripheral Register Analysis
    printf("\n5. SPI2 PERIPHERAL REGISTER ANALYSIS\n\r");
 8001634:	4860      	ldr	r0, [pc, #384]	@ (80017b8 <STM32_PinConfigDiagnostic+0x5b8>)
 8001636:	f008 f859 	bl	80096ec <iprintf>
    printf("    SPI2->CR1: 0x%08lX\n\r", (unsigned long)SPI2->CR1);
 800163a:	4b60      	ldr	r3, [pc, #384]	@ (80017bc <STM32_PinConfigDiagnostic+0x5bc>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4619      	mov	r1, r3
 8001640:	485f      	ldr	r0, [pc, #380]	@ (80017c0 <STM32_PinConfigDiagnostic+0x5c0>)
 8001642:	f008 f853 	bl	80096ec <iprintf>
    printf("    SPI2->CR2: 0x%08lX\n\r", (unsigned long)SPI2->CR2);
 8001646:	4b5d      	ldr	r3, [pc, #372]	@ (80017bc <STM32_PinConfigDiagnostic+0x5bc>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	4619      	mov	r1, r3
 800164c:	485d      	ldr	r0, [pc, #372]	@ (80017c4 <STM32_PinConfigDiagnostic+0x5c4>)
 800164e:	f008 f84d 	bl	80096ec <iprintf>
    printf("    SPI2->SR:  0x%08lX\n\r", (unsigned long)SPI2->SR);
 8001652:	4b5a      	ldr	r3, [pc, #360]	@ (80017bc <STM32_PinConfigDiagnostic+0x5bc>)
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	4619      	mov	r1, r3
 8001658:	485b      	ldr	r0, [pc, #364]	@ (80017c8 <STM32_PinConfigDiagnostic+0x5c8>)
 800165a:	f008 f847 	bl	80096ec <iprintf>
    printf("    SPI2->CFG1: 0x%08lX\n\r", (unsigned long)SPI2->CFG1);
 800165e:	4b57      	ldr	r3, [pc, #348]	@ (80017bc <STM32_PinConfigDiagnostic+0x5bc>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	4619      	mov	r1, r3
 8001664:	4859      	ldr	r0, [pc, #356]	@ (80017cc <STM32_PinConfigDiagnostic+0x5cc>)
 8001666:	f008 f841 	bl	80096ec <iprintf>
    printf("    SPI2->CFG2: 0x%08lX\n\r", (unsigned long)SPI2->CFG2);
 800166a:	4b54      	ldr	r3, [pc, #336]	@ (80017bc <STM32_PinConfigDiagnostic+0x5bc>)
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	4619      	mov	r1, r3
 8001670:	4857      	ldr	r0, [pc, #348]	@ (80017d0 <STM32_PinConfigDiagnostic+0x5d0>)
 8001672:	f008 f83b 	bl	80096ec <iprintf>
    
    // Decode important bits for STM32H7
    uint32_t cr1 = SPI2->CR1;
 8001676:	4b51      	ldr	r3, [pc, #324]	@ (80017bc <STM32_PinConfigDiagnostic+0x5bc>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	633b      	str	r3, [r7, #48]	@ 0x30
    uint32_t cfg2 = SPI2->CFG2;
 800167c:	4b4f      	ldr	r3, [pc, #316]	@ (80017bc <STM32_PinConfigDiagnostic+0x5bc>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	62fb      	str	r3, [r7, #44]	@ 0x2c
    printf("    SPI2 Decoded (STM32H7):\n\r");
 8001682:	4854      	ldr	r0, [pc, #336]	@ (80017d4 <STM32_PinConfigDiagnostic+0x5d4>)
 8001684:	f008 f832 	bl	80096ec <iprintf>
    printf("      SPE (Enable): %s\n\r", (cr1 & SPI_CR1_SPE) ? "ENABLED" : "DISABLED");
 8001688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <STM32_PinConfigDiagnostic+0x496>
 8001692:	4b51      	ldr	r3, [pc, #324]	@ (80017d8 <STM32_PinConfigDiagnostic+0x5d8>)
 8001694:	e000      	b.n	8001698 <STM32_PinConfigDiagnostic+0x498>
 8001696:	4b51      	ldr	r3, [pc, #324]	@ (80017dc <STM32_PinConfigDiagnostic+0x5dc>)
 8001698:	4619      	mov	r1, r3
 800169a:	4851      	ldr	r0, [pc, #324]	@ (80017e0 <STM32_PinConfigDiagnostic+0x5e0>)
 800169c:	f008 f826 	bl	80096ec <iprintf>
    printf("      MASTER (from CFG2): %s\n\r", (cfg2 & SPI_CFG2_MASTER) ? "MASTER" : "SLAVE");
 80016a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <STM32_PinConfigDiagnostic+0x4ae>
 80016aa:	4b4e      	ldr	r3, [pc, #312]	@ (80017e4 <STM32_PinConfigDiagnostic+0x5e4>)
 80016ac:	e000      	b.n	80016b0 <STM32_PinConfigDiagnostic+0x4b0>
 80016ae:	4b4e      	ldr	r3, [pc, #312]	@ (80017e8 <STM32_PinConfigDiagnostic+0x5e8>)
 80016b0:	4619      	mov	r1, r3
 80016b2:	484e      	ldr	r0, [pc, #312]	@ (80017ec <STM32_PinConfigDiagnostic+0x5ec>)
 80016b4:	f008 f81a 	bl	80096ec <iprintf>
    printf("      SSI (Internal SS): %s\n\r", (cr1 & SPI_CR1_SSI) ? "HIGH" : "LOW");
 80016b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <STM32_PinConfigDiagnostic+0x4c6>
 80016c2:	4b37      	ldr	r3, [pc, #220]	@ (80017a0 <STM32_PinConfigDiagnostic+0x5a0>)
 80016c4:	e000      	b.n	80016c8 <STM32_PinConfigDiagnostic+0x4c8>
 80016c6:	4b37      	ldr	r3, [pc, #220]	@ (80017a4 <STM32_PinConfigDiagnostic+0x5a4>)
 80016c8:	4619      	mov	r1, r3
 80016ca:	4849      	ldr	r0, [pc, #292]	@ (80017f0 <STM32_PinConfigDiagnostic+0x5f0>)
 80016cc:	f008 f80e 	bl	80096ec <iprintf>
    printf("      SSOE (SS Output Enable): %s\n\r", (cfg2 & SPI_CFG2_SSOE) ? "ENABLED" : "DISABLED");
 80016d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <STM32_PinConfigDiagnostic+0x4de>
 80016da:	4b3f      	ldr	r3, [pc, #252]	@ (80017d8 <STM32_PinConfigDiagnostic+0x5d8>)
 80016dc:	e000      	b.n	80016e0 <STM32_PinConfigDiagnostic+0x4e0>
 80016de:	4b3f      	ldr	r3, [pc, #252]	@ (80017dc <STM32_PinConfigDiagnostic+0x5dc>)
 80016e0:	4619      	mov	r1, r3
 80016e2:	4844      	ldr	r0, [pc, #272]	@ (80017f4 <STM32_PinConfigDiagnostic+0x5f4>)
 80016e4:	f008 f802 	bl	80096ec <iprintf>
    
    // 6. Clock Configuration Check
    printf("\n6. CLOCK CONFIGURATION CHECK\n\r");
 80016e8:	4843      	ldr	r0, [pc, #268]	@ (80017f8 <STM32_PinConfigDiagnostic+0x5f8>)
 80016ea:	f007 ffff 	bl	80096ec <iprintf>
    uint32_t rcc_apb1enr = RCC->APB1LENR;
 80016ee:	4b43      	ldr	r3, [pc, #268]	@ (80017fc <STM32_PinConfigDiagnostic+0x5fc>)
 80016f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    printf("    SPI2 Clock: %s\n\r", (rcc_apb1enr & RCC_APB1LENR_SPI2EN) ? "ENABLED" : "DISABLED");
 80016f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <STM32_PinConfigDiagnostic+0x504>
 8001700:	4b35      	ldr	r3, [pc, #212]	@ (80017d8 <STM32_PinConfigDiagnostic+0x5d8>)
 8001702:	e000      	b.n	8001706 <STM32_PinConfigDiagnostic+0x506>
 8001704:	4b35      	ldr	r3, [pc, #212]	@ (80017dc <STM32_PinConfigDiagnostic+0x5dc>)
 8001706:	4619      	mov	r1, r3
 8001708:	483d      	ldr	r0, [pc, #244]	@ (8001800 <STM32_PinConfigDiagnostic+0x600>)
 800170a:	f007 ffef 	bl	80096ec <iprintf>
    
    uint32_t rcc_ahb4enr = RCC->AHB4ENR;
 800170e:	4b3b      	ldr	r3, [pc, #236]	@ (80017fc <STM32_PinConfigDiagnostic+0x5fc>)
 8001710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001714:	627b      	str	r3, [r7, #36]	@ 0x24
    printf("    GPIOA Clock: %s\n\r", (rcc_ahb4enr & RCC_AHB4ENR_GPIOAEN) ? "ENABLED" : "DISABLED");
 8001716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <STM32_PinConfigDiagnostic+0x524>
 8001720:	4b2d      	ldr	r3, [pc, #180]	@ (80017d8 <STM32_PinConfigDiagnostic+0x5d8>)
 8001722:	e000      	b.n	8001726 <STM32_PinConfigDiagnostic+0x526>
 8001724:	4b2d      	ldr	r3, [pc, #180]	@ (80017dc <STM32_PinConfigDiagnostic+0x5dc>)
 8001726:	4619      	mov	r1, r3
 8001728:	4836      	ldr	r0, [pc, #216]	@ (8001804 <STM32_PinConfigDiagnostic+0x604>)
 800172a:	f007 ffdf 	bl	80096ec <iprintf>
    printf("    GPIOB Clock: %s\n\r", (rcc_ahb4enr & RCC_AHB4ENR_GPIOBEN) ? "ENABLED" : "DISABLED");
 800172e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <STM32_PinConfigDiagnostic+0x53c>
 8001738:	4b27      	ldr	r3, [pc, #156]	@ (80017d8 <STM32_PinConfigDiagnostic+0x5d8>)
 800173a:	e000      	b.n	800173e <STM32_PinConfigDiagnostic+0x53e>
 800173c:	4b27      	ldr	r3, [pc, #156]	@ (80017dc <STM32_PinConfigDiagnostic+0x5dc>)
 800173e:	4619      	mov	r1, r3
 8001740:	4831      	ldr	r0, [pc, #196]	@ (8001808 <STM32_PinConfigDiagnostic+0x608>)
 8001742:	f007 ffd3 	bl	80096ec <iprintf>
    printf("    GPIOC Clock: %s\n\r", (rcc_ahb4enr & RCC_AHB4ENR_GPIOCEN) ? "ENABLED" : "DISABLED");
 8001746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <STM32_PinConfigDiagnostic+0x554>
 8001750:	4b21      	ldr	r3, [pc, #132]	@ (80017d8 <STM32_PinConfigDiagnostic+0x5d8>)
 8001752:	e000      	b.n	8001756 <STM32_PinConfigDiagnostic+0x556>
 8001754:	4b21      	ldr	r3, [pc, #132]	@ (80017dc <STM32_PinConfigDiagnostic+0x5dc>)
 8001756:	4619      	mov	r1, r3
 8001758:	482c      	ldr	r0, [pc, #176]	@ (800180c <STM32_PinConfigDiagnostic+0x60c>)
 800175a:	f007 ffc7 	bl	80096ec <iprintf>
    printf("    GPIOD Clock: %s\n\r", (rcc_ahb4enr & RCC_AHB4ENR_GPIODEN) ? "ENABLED" : "DISABLED");
 800175e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001760:	f003 0308 	and.w	r3, r3, #8
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <STM32_PinConfigDiagnostic+0x56c>
 8001768:	4b1b      	ldr	r3, [pc, #108]	@ (80017d8 <STM32_PinConfigDiagnostic+0x5d8>)
 800176a:	e000      	b.n	800176e <STM32_PinConfigDiagnostic+0x56e>
 800176c:	4b1b      	ldr	r3, [pc, #108]	@ (80017dc <STM32_PinConfigDiagnostic+0x5dc>)
 800176e:	4619      	mov	r1, r3
 8001770:	4827      	ldr	r0, [pc, #156]	@ (8001810 <STM32_PinConfigDiagnostic+0x610>)
 8001772:	f007 ffbb 	bl	80096ec <iprintf>
    printf("    GPIOE Clock: %s\n\r", (rcc_ahb4enr & RCC_AHB4ENR_GPIOEEN) ? "ENABLED" : "DISABLED");
 8001776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001778:	f003 0310 	and.w	r3, r3, #16
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <STM32_PinConfigDiagnostic+0x584>
 8001780:	4b15      	ldr	r3, [pc, #84]	@ (80017d8 <STM32_PinConfigDiagnostic+0x5d8>)
 8001782:	e000      	b.n	8001786 <STM32_PinConfigDiagnostic+0x586>
 8001784:	4b15      	ldr	r3, [pc, #84]	@ (80017dc <STM32_PinConfigDiagnostic+0x5dc>)
 8001786:	4619      	mov	r1, r3
 8001788:	4822      	ldr	r0, [pc, #136]	@ (8001814 <STM32_PinConfigDiagnostic+0x614>)
 800178a:	f007 ffaf 	bl	80096ec <iprintf>
    
    printf("=== PIN CONFIGURATION DIAGNOSTIC COMPLETE ===\n\r");
 800178e:	4822      	ldr	r0, [pc, #136]	@ (8001818 <STM32_PinConfigDiagnostic+0x618>)
 8001790:	f007 ffac 	bl	80096ec <iprintf>
}
 8001794:	bf00      	nop
 8001796:	3798      	adds	r7, #152	@ 0x98
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	58020400 	.word	0x58020400
 80017a0:	0800af74 	.word	0x0800af74
 80017a4:	0800af7c 	.word	0x0800af7c
 80017a8:	0800b254 	.word	0x0800b254
 80017ac:	58020800 	.word	0x58020800
 80017b0:	0800b278 	.word	0x0800b278
 80017b4:	0800b288 	.word	0x0800b288
 80017b8:	0800b2ac 	.word	0x0800b2ac
 80017bc:	40003800 	.word	0x40003800
 80017c0:	0800b2d4 	.word	0x0800b2d4
 80017c4:	0800b2f0 	.word	0x0800b2f0
 80017c8:	0800b30c 	.word	0x0800b30c
 80017cc:	0800b328 	.word	0x0800b328
 80017d0:	0800b344 	.word	0x0800b344
 80017d4:	0800b360 	.word	0x0800b360
 80017d8:	0800b380 	.word	0x0800b380
 80017dc:	0800b388 	.word	0x0800b388
 80017e0:	0800b394 	.word	0x0800b394
 80017e4:	0800b3b0 	.word	0x0800b3b0
 80017e8:	0800b3b8 	.word	0x0800b3b8
 80017ec:	0800b3c0 	.word	0x0800b3c0
 80017f0:	0800b3e0 	.word	0x0800b3e0
 80017f4:	0800b400 	.word	0x0800b400
 80017f8:	0800b424 	.word	0x0800b424
 80017fc:	58024400 	.word	0x58024400
 8001800:	0800b444 	.word	0x0800b444
 8001804:	0800b45c 	.word	0x0800b45c
 8001808:	0800b474 	.word	0x0800b474
 800180c:	0800b48c 	.word	0x0800b48c
 8001810:	0800b4a4 	.word	0x0800b4a4
 8001814:	0800b4bc 	.word	0x0800b4bc
 8001818:	0800b4d4 	.word	0x0800b4d4

0800181c <print_cc1201_status>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Function to decode and print CC1201 status
void print_cc1201_status(uint8_t status_byte, const char* context) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	6039      	str	r1, [r7, #0]
 8001826:	71fb      	strb	r3, [r7, #7]
    uint8_t radio_state = (status_byte >> 4) & 0x0F;
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	091b      	lsrs	r3, r3, #4
 800182c:	73fb      	strb	r3, [r7, #15]
    uint8_t fifo_bytes = status_byte & 0x0F;
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	f003 030f 	and.w	r3, r3, #15
 8001834:	73bb      	strb	r3, [r7, #14]
    
    printf("  %s: Status=0x%02X, State=0x%X", context, status_byte, radio_state);
 8001836:	79fa      	ldrb	r2, [r7, #7]
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	6839      	ldr	r1, [r7, #0]
 800183c:	4823      	ldr	r0, [pc, #140]	@ (80018cc <print_cc1201_status+0xb0>)
 800183e:	f007 ff55 	bl	80096ec <iprintf>
    switch(radio_state) {
 8001842:	7bfb      	ldrb	r3, [r7, #15]
 8001844:	2b07      	cmp	r3, #7
 8001846:	d833      	bhi.n	80018b0 <print_cc1201_status+0x94>
 8001848:	a201      	add	r2, pc, #4	@ (adr r2, 8001850 <print_cc1201_status+0x34>)
 800184a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800184e:	bf00      	nop
 8001850:	08001871 	.word	0x08001871
 8001854:	08001879 	.word	0x08001879
 8001858:	08001881 	.word	0x08001881
 800185c:	08001889 	.word	0x08001889
 8001860:	08001891 	.word	0x08001891
 8001864:	08001899 	.word	0x08001899
 8001868:	080018a1 	.word	0x080018a1
 800186c:	080018a9 	.word	0x080018a9
        case 0x0: printf("(IDLE)"); break;
 8001870:	4817      	ldr	r0, [pc, #92]	@ (80018d0 <print_cc1201_status+0xb4>)
 8001872:	f007 ff3b 	bl	80096ec <iprintf>
 8001876:	e01f      	b.n	80018b8 <print_cc1201_status+0x9c>
        case 0x1: printf("(RX)"); break;
 8001878:	4816      	ldr	r0, [pc, #88]	@ (80018d4 <print_cc1201_status+0xb8>)
 800187a:	f007 ff37 	bl	80096ec <iprintf>
 800187e:	e01b      	b.n	80018b8 <print_cc1201_status+0x9c>
        case 0x2: printf("(TX)"); break;
 8001880:	4815      	ldr	r0, [pc, #84]	@ (80018d8 <print_cc1201_status+0xbc>)
 8001882:	f007 ff33 	bl	80096ec <iprintf>
 8001886:	e017      	b.n	80018b8 <print_cc1201_status+0x9c>
        case 0x3: printf("(FSTXON)"); break;
 8001888:	4814      	ldr	r0, [pc, #80]	@ (80018dc <print_cc1201_status+0xc0>)
 800188a:	f007 ff2f 	bl	80096ec <iprintf>
 800188e:	e013      	b.n	80018b8 <print_cc1201_status+0x9c>
        case 0x4: printf("(CALIBRATE)"); break;
 8001890:	4813      	ldr	r0, [pc, #76]	@ (80018e0 <print_cc1201_status+0xc4>)
 8001892:	f007 ff2b 	bl	80096ec <iprintf>
 8001896:	e00f      	b.n	80018b8 <print_cc1201_status+0x9c>
        case 0x5: printf("(SETTLING)"); break;
 8001898:	4812      	ldr	r0, [pc, #72]	@ (80018e4 <print_cc1201_status+0xc8>)
 800189a:	f007 ff27 	bl	80096ec <iprintf>
 800189e:	e00b      	b.n	80018b8 <print_cc1201_status+0x9c>
        case 0x6: printf("(RX_FIFO_ERR)"); break;
 80018a0:	4811      	ldr	r0, [pc, #68]	@ (80018e8 <print_cc1201_status+0xcc>)
 80018a2:	f007 ff23 	bl	80096ec <iprintf>
 80018a6:	e007      	b.n	80018b8 <print_cc1201_status+0x9c>
        case 0x7: printf("(TX_FIFO_ERR)"); break;
 80018a8:	4810      	ldr	r0, [pc, #64]	@ (80018ec <print_cc1201_status+0xd0>)
 80018aa:	f007 ff1f 	bl	80096ec <iprintf>
 80018ae:	e003      	b.n	80018b8 <print_cc1201_status+0x9c>
        default: printf("(UNKNOWN)"); break;
 80018b0:	480f      	ldr	r0, [pc, #60]	@ (80018f0 <print_cc1201_status+0xd4>)
 80018b2:	f007 ff1b 	bl	80096ec <iprintf>
 80018b6:	bf00      	nop
    }
    printf(", FIFO=%d\n\r", fifo_bytes);
 80018b8:	7bbb      	ldrb	r3, [r7, #14]
 80018ba:	4619      	mov	r1, r3
 80018bc:	480d      	ldr	r0, [pc, #52]	@ (80018f4 <print_cc1201_status+0xd8>)
 80018be:	f007 ff15 	bl	80096ec <iprintf>
}
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	0800b504 	.word	0x0800b504
 80018d0:	0800b524 	.word	0x0800b524
 80018d4:	0800b52c 	.word	0x0800b52c
 80018d8:	0800b534 	.word	0x0800b534
 80018dc:	0800b53c 	.word	0x0800b53c
 80018e0:	0800b548 	.word	0x0800b548
 80018e4:	0800b554 	.word	0x0800b554
 80018e8:	0800b560 	.word	0x0800b560
 80018ec:	0800b570 	.word	0x0800b570
 80018f0:	0800b580 	.word	0x0800b580
 80018f4:	0800b58c 	.word	0x0800b58c

080018f8 <test_fifo_operations>:
    
    printf("=== CONFIGURATION TEST COMPLETE ===\n\r");
}

// Test FIFO operations (read/write buffer tests)
void test_fifo_operations(void) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b088      	sub	sp, #32
 80018fc:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef hal_status;
    uint8_t status_byte = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	777b      	strb	r3, [r7, #29]
    
    printf("\n=== FIFO OPERATIONS TEST ===\n\r");
 8001902:	489b      	ldr	r0, [pc, #620]	@ (8001b70 <test_fifo_operations+0x278>)
 8001904:	f007 fef2 	bl	80096ec <iprintf>
    
    // First ensure we're in IDLE state
    hal_status = CC1201_EnterIdleMode(&status_byte);
 8001908:	f107 031d 	add.w	r3, r7, #29
 800190c:	4618      	mov	r0, r3
 800190e:	f7fe ff10 	bl	8000732 <CC1201_EnterIdleMode>
 8001912:	4603      	mov	r3, r0
 8001914:	77fb      	strb	r3, [r7, #31]
    if (hal_status != HAL_OK) {
 8001916:	7ffb      	ldrb	r3, [r7, #31]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <test_fifo_operations+0x2c>
        printf("  ✗ Failed to enter IDLE mode\n\r");
 800191c:	4895      	ldr	r0, [pc, #596]	@ (8001b74 <test_fifo_operations+0x27c>)
 800191e:	f007 fee5 	bl	80096ec <iprintf>
 8001922:	e121      	b.n	8001b68 <test_fifo_operations+0x270>
        return;
    }
    print_cc1201_status(status_byte, "IDLE_FOR_FIFO");
 8001924:	7f7b      	ldrb	r3, [r7, #29]
 8001926:	4994      	ldr	r1, [pc, #592]	@ (8001b78 <test_fifo_operations+0x280>)
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ff77 	bl	800181c <print_cc1201_status>
    
    // Test 1: Flush both FIFOs to start clean
    printf("1. Flushing FIFOs\n\r");
 800192e:	4893      	ldr	r0, [pc, #588]	@ (8001b7c <test_fifo_operations+0x284>)
 8001930:	f007 fedc 	bl	80096ec <iprintf>
    hal_status = CC1201_FlushTxFifo(&status_byte);
 8001934:	f107 031d 	add.w	r3, r7, #29
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe ff14 	bl	8000766 <CC1201_FlushTxFifo>
 800193e:	4603      	mov	r3, r0
 8001940:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 8001942:	7ffb      	ldrb	r3, [r7, #31]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d104      	bne.n	8001952 <test_fifo_operations+0x5a>
        print_cc1201_status(status_byte, "FLUSH_TX");
 8001948:	7f7b      	ldrb	r3, [r7, #29]
 800194a:	498d      	ldr	r1, [pc, #564]	@ (8001b80 <test_fifo_operations+0x288>)
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff65 	bl	800181c <print_cc1201_status>
    }
    
    hal_status = CC1201_FlushRxFifo(&status_byte);
 8001952:	f107 031d 	add.w	r3, r7, #29
 8001956:	4618      	mov	r0, r3
 8001958:	f7fe fef8 	bl	800074c <CC1201_FlushRxFifo>
 800195c:	4603      	mov	r3, r0
 800195e:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 8001960:	7ffb      	ldrb	r3, [r7, #31]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d104      	bne.n	8001970 <test_fifo_operations+0x78>
        print_cc1201_status(status_byte, "FLUSH_RX");
 8001966:	7f7b      	ldrb	r3, [r7, #29]
 8001968:	4986      	ldr	r1, [pc, #536]	@ (8001b84 <test_fifo_operations+0x28c>)
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff ff56 	bl	800181c <print_cc1201_status>
    }
    
    // Test 2: Check initial FIFO byte counts
    printf("2. Initial FIFO status\n\r");
 8001970:	4885      	ldr	r0, [pc, #532]	@ (8001b88 <test_fifo_operations+0x290>)
 8001972:	f007 febb 	bl	80096ec <iprintf>
    uint8_t tx_bytes = 0, rx_bytes = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	773b      	strb	r3, [r7, #28]
 800197a:	2300      	movs	r3, #0
 800197c:	76fb      	strb	r3, [r7, #27]
    
    hal_status = CC1201_GetNumTXBytes(&tx_bytes);
 800197e:	f107 031c 	add.w	r3, r7, #28
 8001982:	4618      	mov	r0, r3
 8001984:	f7fe ff82 	bl	800088c <CC1201_GetNumTXBytes>
 8001988:	4603      	mov	r3, r0
 800198a:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 800198c:	7ffb      	ldrb	r3, [r7, #31]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d104      	bne.n	800199c <test_fifo_operations+0xa4>
        printf("  TX FIFO bytes: %d\n\r", tx_bytes);
 8001992:	7f3b      	ldrb	r3, [r7, #28]
 8001994:	4619      	mov	r1, r3
 8001996:	487d      	ldr	r0, [pc, #500]	@ (8001b8c <test_fifo_operations+0x294>)
 8001998:	f007 fea8 	bl	80096ec <iprintf>
    }
    
    hal_status = CC1201_GetNumRXBytes(&rx_bytes);
 800199c:	f107 031b 	add.w	r3, r7, #27
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7fe ff65 	bl	8000870 <CC1201_GetNumRXBytes>
 80019a6:	4603      	mov	r3, r0
 80019a8:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 80019aa:	7ffb      	ldrb	r3, [r7, #31]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d104      	bne.n	80019ba <test_fifo_operations+0xc2>
        printf("  RX FIFO bytes: %d\n\r", rx_bytes);
 80019b0:	7efb      	ldrb	r3, [r7, #27]
 80019b2:	4619      	mov	r1, r3
 80019b4:	4876      	ldr	r0, [pc, #472]	@ (8001b90 <test_fifo_operations+0x298>)
 80019b6:	f007 fe99 	bl	80096ec <iprintf>
    }
    
    // Test 3: Write test data to TX FIFO
    printf("3. Writing test data to TX FIFO\n\r");
 80019ba:	4876      	ldr	r0, [pc, #472]	@ (8001b94 <test_fifo_operations+0x29c>)
 80019bc:	f007 fe96 	bl	80096ec <iprintf>
    uint8_t test_data[] = {0xAA, 0x55, 0xCC, 0x33, 0xFF, 0x00, 0x11, 0x22};
 80019c0:	4a75      	ldr	r2, [pc, #468]	@ (8001b98 <test_fifo_operations+0x2a0>)
 80019c2:	f107 0310 	add.w	r3, r7, #16
 80019c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019ca:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t test_data_length = sizeof(test_data);
 80019ce:	2308      	movs	r3, #8
 80019d0:	77bb      	strb	r3, [r7, #30]
    
    hal_status = CC1201_WriteTxFifo(test_data, test_data_length, &status_byte);
 80019d2:	f107 021d 	add.w	r2, r7, #29
 80019d6:	7fb9      	ldrb	r1, [r7, #30]
 80019d8:	f107 0310 	add.w	r3, r7, #16
 80019dc:	4618      	mov	r0, r3
 80019de:	f7fe ff63 	bl	80008a8 <CC1201_WriteTxFifo>
 80019e2:	4603      	mov	r3, r0
 80019e4:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 80019e6:	7ffb      	ldrb	r3, [r7, #31]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d126      	bne.n	8001a3a <test_fifo_operations+0x142>
        printf("  ✓ Wrote %d bytes to TX FIFO\n\r", test_data_length);
 80019ec:	7fbb      	ldrb	r3, [r7, #30]
 80019ee:	4619      	mov	r1, r3
 80019f0:	486a      	ldr	r0, [pc, #424]	@ (8001b9c <test_fifo_operations+0x2a4>)
 80019f2:	f007 fe7b 	bl	80096ec <iprintf>
        print_cc1201_status(status_byte, "TX_WRITE");
 80019f6:	7f7b      	ldrb	r3, [r7, #29]
 80019f8:	4969      	ldr	r1, [pc, #420]	@ (8001ba0 <test_fifo_operations+0x2a8>)
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff ff0e 	bl	800181c <print_cc1201_status>
        
        // Check TX FIFO count after write
        hal_status = CC1201_GetNumTXBytes(&tx_bytes);
 8001a00:	f107 031c 	add.w	r3, r7, #28
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7fe ff41 	bl	800088c <CC1201_GetNumTXBytes>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	77fb      	strb	r3, [r7, #31]
        if (hal_status == HAL_OK) {
 8001a0e:	7ffb      	ldrb	r3, [r7, #31]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d117      	bne.n	8001a44 <test_fifo_operations+0x14c>
            printf("  TX FIFO bytes after write: %d (expected: %d)\n\r", tx_bytes, test_data_length);
 8001a14:	7f3b      	ldrb	r3, [r7, #28]
 8001a16:	4619      	mov	r1, r3
 8001a18:	7fbb      	ldrb	r3, [r7, #30]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	4861      	ldr	r0, [pc, #388]	@ (8001ba4 <test_fifo_operations+0x2ac>)
 8001a1e:	f007 fe65 	bl	80096ec <iprintf>
            if (tx_bytes == test_data_length) {
 8001a22:	7f3b      	ldrb	r3, [r7, #28]
 8001a24:	7fba      	ldrb	r2, [r7, #30]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d103      	bne.n	8001a32 <test_fifo_operations+0x13a>
                printf("  ✓ TX FIFO count matches written data\n\r");
 8001a2a:	485f      	ldr	r0, [pc, #380]	@ (8001ba8 <test_fifo_operations+0x2b0>)
 8001a2c:	f007 fe5e 	bl	80096ec <iprintf>
 8001a30:	e008      	b.n	8001a44 <test_fifo_operations+0x14c>
            } else {
                printf("  ✗ TX FIFO count mismatch\n\r");
 8001a32:	485e      	ldr	r0, [pc, #376]	@ (8001bac <test_fifo_operations+0x2b4>)
 8001a34:	f007 fe5a 	bl	80096ec <iprintf>
 8001a38:	e004      	b.n	8001a44 <test_fifo_operations+0x14c>
            }
        }
    } else {
        printf("  ✗ TX FIFO write FAILED - HAL Error: %d\n\r", hal_status);
 8001a3a:	7ffb      	ldrb	r3, [r7, #31]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	485c      	ldr	r0, [pc, #368]	@ (8001bb0 <test_fifo_operations+0x2b8>)
 8001a40:	f007 fe54 	bl	80096ec <iprintf>
    }
    
    // Test 4: Write single byte to TX FIFO
    printf("4. Writing single byte to TX FIFO\n\r");
 8001a44:	485b      	ldr	r0, [pc, #364]	@ (8001bb4 <test_fifo_operations+0x2bc>)
 8001a46:	f007 fe51 	bl	80096ec <iprintf>
    hal_status = CC1201_WriteSingleTxFifo(0x42, &status_byte);
 8001a4a:	f107 031d 	add.w	r3, r7, #29
 8001a4e:	4619      	mov	r1, r3
 8001a50:	2042      	movs	r0, #66	@ 0x42
 8001a52:	f7ff f88d 	bl	8000b70 <CC1201_WriteSingleTxFifo>
 8001a56:	4603      	mov	r3, r0
 8001a58:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 8001a5a:	7ffb      	ldrb	r3, [r7, #31]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d117      	bne.n	8001a90 <test_fifo_operations+0x198>
        printf("  ✓ Wrote single byte (0x42) to TX FIFO\n\r");
 8001a60:	4855      	ldr	r0, [pc, #340]	@ (8001bb8 <test_fifo_operations+0x2c0>)
 8001a62:	f007 fe43 	bl	80096ec <iprintf>
        print_cc1201_status(status_byte, "TX_SINGLE");
 8001a66:	7f7b      	ldrb	r3, [r7, #29]
 8001a68:	4954      	ldr	r1, [pc, #336]	@ (8001bbc <test_fifo_operations+0x2c4>)
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff fed6 	bl	800181c <print_cc1201_status>
        
        // Check updated count
        hal_status = CC1201_GetNumTXBytes(&tx_bytes);
 8001a70:	f107 031c 	add.w	r3, r7, #28
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7fe ff09 	bl	800088c <CC1201_GetNumTXBytes>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	77fb      	strb	r3, [r7, #31]
        if (hal_status == HAL_OK) {
 8001a7e:	7ffb      	ldrb	r3, [r7, #31]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d10a      	bne.n	8001a9a <test_fifo_operations+0x1a2>
            printf("  TX FIFO bytes after single write: %d\n\r", tx_bytes);
 8001a84:	7f3b      	ldrb	r3, [r7, #28]
 8001a86:	4619      	mov	r1, r3
 8001a88:	484d      	ldr	r0, [pc, #308]	@ (8001bc0 <test_fifo_operations+0x2c8>)
 8001a8a:	f007 fe2f 	bl	80096ec <iprintf>
 8001a8e:	e004      	b.n	8001a9a <test_fifo_operations+0x1a2>
        }
    } else {
        printf("  ✗ Single TX write FAILED - HAL Error: %d\n\r", hal_status);
 8001a90:	7ffb      	ldrb	r3, [r7, #31]
 8001a92:	4619      	mov	r1, r3
 8001a94:	484b      	ldr	r0, [pc, #300]	@ (8001bc4 <test_fifo_operations+0x2cc>)
 8001a96:	f007 fe29 	bl	80096ec <iprintf>
    }
    
    // Test 5: Attempt to read from RX FIFO (should be empty)
    printf("5. Reading from empty RX FIFO\n\r");
 8001a9a:	484b      	ldr	r0, [pc, #300]	@ (8001bc8 <test_fifo_operations+0x2d0>)
 8001a9c:	f007 fe26 	bl	80096ec <iprintf>
    uint8_t read_buffer[10] = {0};
 8001aa0:	1d3b      	adds	r3, r7, #4
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	605a      	str	r2, [r3, #4]
 8001aa8:	811a      	strh	r2, [r3, #8]
    hal_status = CC1201_ReadRxFifo(read_buffer, 1, &status_byte);
 8001aaa:	f107 021d 	add.w	r2, r7, #29
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe ffa0 	bl	80009f8 <CC1201_ReadRxFifo>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 8001abc:	7ffb      	ldrb	r3, [r7, #31]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d119      	bne.n	8001af6 <test_fifo_operations+0x1fe>
        printf("  Read from RX FIFO: 0x%02X\n\r", read_buffer[0]);
 8001ac2:	793b      	ldrb	r3, [r7, #4]
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4841      	ldr	r0, [pc, #260]	@ (8001bcc <test_fifo_operations+0x2d4>)
 8001ac8:	f007 fe10 	bl	80096ec <iprintf>
        print_cc1201_status(status_byte, "RX_READ_EMPTY");
 8001acc:	7f7b      	ldrb	r3, [r7, #29]
 8001ace:	4940      	ldr	r1, [pc, #256]	@ (8001bd0 <test_fifo_operations+0x2d8>)
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff fea3 	bl	800181c <print_cc1201_status>
        
        hal_status = CC1201_GetNumRXBytes(&rx_bytes);
 8001ad6:	f107 031b 	add.w	r3, r7, #27
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fec8 	bl	8000870 <CC1201_GetNumRXBytes>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	77fb      	strb	r3, [r7, #31]
        if (hal_status == HAL_OK) {
 8001ae4:	7ffb      	ldrb	r3, [r7, #31]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d10a      	bne.n	8001b00 <test_fifo_operations+0x208>
            printf("  RX FIFO bytes after read: %d\n\r", rx_bytes);
 8001aea:	7efb      	ldrb	r3, [r7, #27]
 8001aec:	4619      	mov	r1, r3
 8001aee:	4839      	ldr	r0, [pc, #228]	@ (8001bd4 <test_fifo_operations+0x2dc>)
 8001af0:	f007 fdfc 	bl	80096ec <iprintf>
 8001af4:	e004      	b.n	8001b00 <test_fifo_operations+0x208>
        }
    } else {
        printf("  ✗ RX FIFO read FAILED - HAL Error: %d\n\r", hal_status);
 8001af6:	7ffb      	ldrb	r3, [r7, #31]
 8001af8:	4619      	mov	r1, r3
 8001afa:	4837      	ldr	r0, [pc, #220]	@ (8001bd8 <test_fifo_operations+0x2e0>)
 8001afc:	f007 fdf6 	bl	80096ec <iprintf>
    }
    
    // Test 6: Flush TX FIFO and verify
    printf("6. Flushing TX FIFO and verifying\n\r");
 8001b00:	4836      	ldr	r0, [pc, #216]	@ (8001bdc <test_fifo_operations+0x2e4>)
 8001b02:	f007 fdf3 	bl	80096ec <iprintf>
    hal_status = CC1201_FlushTxFifo(&status_byte);
 8001b06:	f107 031d 	add.w	r3, r7, #29
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fe2b 	bl	8000766 <CC1201_FlushTxFifo>
 8001b10:	4603      	mov	r3, r0
 8001b12:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 8001b14:	7ffb      	ldrb	r3, [r7, #31]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d11e      	bne.n	8001b58 <test_fifo_operations+0x260>
        print_cc1201_status(status_byte, "FINAL_FLUSH_TX");
 8001b1a:	7f7b      	ldrb	r3, [r7, #29]
 8001b1c:	4930      	ldr	r1, [pc, #192]	@ (8001be0 <test_fifo_operations+0x2e8>)
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff fe7c 	bl	800181c <print_cc1201_status>
        
        hal_status = CC1201_GetNumTXBytes(&tx_bytes);
 8001b24:	f107 031c 	add.w	r3, r7, #28
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe feaf 	bl	800088c <CC1201_GetNumTXBytes>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	77fb      	strb	r3, [r7, #31]
        if (hal_status == HAL_OK) {
 8001b32:	7ffb      	ldrb	r3, [r7, #31]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d114      	bne.n	8001b62 <test_fifo_operations+0x26a>
            printf("  TX FIFO bytes after flush: %d (expected: 0)\n\r", tx_bytes);
 8001b38:	7f3b      	ldrb	r3, [r7, #28]
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4829      	ldr	r0, [pc, #164]	@ (8001be4 <test_fifo_operations+0x2ec>)
 8001b3e:	f007 fdd5 	bl	80096ec <iprintf>
            if (tx_bytes == 0) {
 8001b42:	7f3b      	ldrb	r3, [r7, #28]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d103      	bne.n	8001b50 <test_fifo_operations+0x258>
                printf("  ✓ TX FIFO successfully flushed\n\r");
 8001b48:	4827      	ldr	r0, [pc, #156]	@ (8001be8 <test_fifo_operations+0x2f0>)
 8001b4a:	f007 fdcf 	bl	80096ec <iprintf>
 8001b4e:	e008      	b.n	8001b62 <test_fifo_operations+0x26a>
            } else {
                printf("  ✗ TX FIFO flush incomplete\n\r");
 8001b50:	4826      	ldr	r0, [pc, #152]	@ (8001bec <test_fifo_operations+0x2f4>)
 8001b52:	f007 fdcb 	bl	80096ec <iprintf>
 8001b56:	e004      	b.n	8001b62 <test_fifo_operations+0x26a>
            }
        }
    } else {
        printf("  ✗ TX FIFO flush FAILED - HAL Error: %d\n\r", hal_status);
 8001b58:	7ffb      	ldrb	r3, [r7, #31]
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4824      	ldr	r0, [pc, #144]	@ (8001bf0 <test_fifo_operations+0x2f8>)
 8001b5e:	f007 fdc5 	bl	80096ec <iprintf>
    }
    
    printf("=== FIFO OPERATIONS TEST COMPLETE ===\n\r");
 8001b62:	4824      	ldr	r0, [pc, #144]	@ (8001bf4 <test_fifo_operations+0x2fc>)
 8001b64:	f007 fdc2 	bl	80096ec <iprintf>
}
 8001b68:	3720      	adds	r7, #32
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	0800be30 	.word	0x0800be30
 8001b74:	0800be50 	.word	0x0800be50
 8001b78:	0800be74 	.word	0x0800be74
 8001b7c:	0800be84 	.word	0x0800be84
 8001b80:	0800b80c 	.word	0x0800b80c
 8001b84:	0800b7c8 	.word	0x0800b7c8
 8001b88:	0800be98 	.word	0x0800be98
 8001b8c:	0800beb4 	.word	0x0800beb4
 8001b90:	0800becc 	.word	0x0800becc
 8001b94:	0800bee4 	.word	0x0800bee4
 8001b98:	0800c248 	.word	0x0800c248
 8001b9c:	0800bf08 	.word	0x0800bf08
 8001ba0:	0800bf2c 	.word	0x0800bf2c
 8001ba4:	0800bf38 	.word	0x0800bf38
 8001ba8:	0800bf6c 	.word	0x0800bf6c
 8001bac:	0800bf98 	.word	0x0800bf98
 8001bb0:	0800bfb8 	.word	0x0800bfb8
 8001bb4:	0800bfe8 	.word	0x0800bfe8
 8001bb8:	0800c00c 	.word	0x0800c00c
 8001bbc:	0800c038 	.word	0x0800c038
 8001bc0:	0800c044 	.word	0x0800c044
 8001bc4:	0800c070 	.word	0x0800c070
 8001bc8:	0800c0a0 	.word	0x0800c0a0
 8001bcc:	0800c0c0 	.word	0x0800c0c0
 8001bd0:	0800c0e0 	.word	0x0800c0e0
 8001bd4:	0800c0f0 	.word	0x0800c0f0
 8001bd8:	0800c114 	.word	0x0800c114
 8001bdc:	0800c140 	.word	0x0800c140
 8001be0:	0800c164 	.word	0x0800c164
 8001be4:	0800c174 	.word	0x0800c174
 8001be8:	0800c1a4 	.word	0x0800c1a4
 8001bec:	0800c1cc 	.word	0x0800c1cc
 8001bf0:	0800c1f0 	.word	0x0800c1f0
 8001bf4:	0800c220 	.word	0x0800c220

08001bf8 <test_buffer_readwrite_verification>:

// New comprehensive buffer read/write with verification test
void test_buffer_readwrite_verification(void) {
 8001bf8:	b5b0      	push	{r4, r5, r7, lr}
 8001bfa:	b094      	sub	sp, #80	@ 0x50
 8001bfc:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef hal_status;
    uint8_t status_byte = 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
    
    printf("\n=== BUFFER READ/WRITE VERIFICATION TEST ===\n\r");
 8001c04:	48aa      	ldr	r0, [pc, #680]	@ (8001eb0 <test_buffer_readwrite_verification+0x2b8>)
 8001c06:	f007 fd71 	bl	80096ec <iprintf>
    
    // This test demonstrates comprehensive buffer operations with full transparency
    
    // 1. Enter IDLE and clear FIFOs
    printf("1. INITIALIZING TEST STATE\n\r");
 8001c0a:	48aa      	ldr	r0, [pc, #680]	@ (8001eb4 <test_buffer_readwrite_verification+0x2bc>)
 8001c0c:	f007 fd6e 	bl	80096ec <iprintf>
    hal_status = CC1201_EnterIdleMode(&status_byte);
 8001c10:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fd8c 	bl	8000732 <CC1201_EnterIdleMode>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    if (hal_status == HAL_OK) {
 8001c20:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d131      	bne.n	8001c8c <test_buffer_readwrite_verification+0x94>
        print_cc1201_status(status_byte, "ENTER_IDLE");
 8001c28:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001c2c:	49a2      	ldr	r1, [pc, #648]	@ (8001eb8 <test_buffer_readwrite_verification+0x2c0>)
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff fdf4 	bl	800181c <print_cc1201_status>
        printf("  ✗ Failed to enter IDLE - HAL: %d\n\r", hal_status);
        return;
    }
    
    // Clear FIFOs
    CC1201_FlushTxFifo(&status_byte);
 8001c34:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe fd94 	bl	8000766 <CC1201_FlushTxFifo>
    print_cc1201_status(status_byte, "FLUSH_TX");
 8001c3e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001c42:	499e      	ldr	r1, [pc, #632]	@ (8001ebc <test_buffer_readwrite_verification+0x2c4>)
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff fde9 	bl	800181c <print_cc1201_status>
    CC1201_FlushRxFifo(&status_byte);
 8001c4a:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7fe fd7c 	bl	800074c <CC1201_FlushRxFifo>
    print_cc1201_status(status_byte, "FLUSH_RX");
 8001c54:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001c58:	4999      	ldr	r1, [pc, #612]	@ (8001ec0 <test_buffer_readwrite_verification+0x2c8>)
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff fdde 	bl	800181c <print_cc1201_status>
    
    // 2. Test different data patterns
    printf("\n2. TESTING MULTIPLE DATA PATTERNS\n\r");
 8001c60:	4898      	ldr	r0, [pc, #608]	@ (8001ec4 <test_buffer_readwrite_verification+0x2cc>)
 8001c62:	f007 fd43 	bl	80096ec <iprintf>
    
    uint8_t patterns[][8] = {
 8001c66:	4b98      	ldr	r3, [pc, #608]	@ (8001ec8 <test_buffer_readwrite_verification+0x2d0>)
 8001c68:	f107 0420 	add.w	r4, r7, #32
 8001c6c:	461d      	mov	r5, r3
 8001c6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c72:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001c76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        {0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55},  // Alternating
        {0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00},  // High/Low
        {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80}   // Bit shifts
    };
    
    const char* pattern_names[] = {"SEQUENTIAL", "ALTERNATING", "HIGH_LOW", "BIT_SHIFT"};
 8001c7a:	4b94      	ldr	r3, [pc, #592]	@ (8001ecc <test_buffer_readwrite_verification+0x2d4>)
 8001c7c:	f107 0410 	add.w	r4, r7, #16
 8001c80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    for (int p = 0; p < 4; p++) {
 8001c86:	2300      	movs	r3, #0
 8001c88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c8a:	e065      	b.n	8001d58 <test_buffer_readwrite_verification+0x160>
        printf("  ✗ Failed to enter IDLE - HAL: %d\n\r", hal_status);
 8001c8c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001c90:	4619      	mov	r1, r3
 8001c92:	488f      	ldr	r0, [pc, #572]	@ (8001ed0 <test_buffer_readwrite_verification+0x2d8>)
 8001c94:	f007 fd2a 	bl	80096ec <iprintf>
 8001c98:	e106      	b.n	8001ea8 <test_buffer_readwrite_verification+0x2b0>
        printf("\n  Pattern %d: %s\n\r", p+1, pattern_names[p]);
 8001c9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c9c:	1c59      	adds	r1, r3, #1
 8001c9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	3350      	adds	r3, #80	@ 0x50
 8001ca4:	443b      	add	r3, r7
 8001ca6:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8001caa:	461a      	mov	r2, r3
 8001cac:	4889      	ldr	r0, [pc, #548]	@ (8001ed4 <test_buffer_readwrite_verification+0x2dc>)
 8001cae:	f007 fd1d 	bl	80096ec <iprintf>
        printf("  Data: ");
 8001cb2:	4889      	ldr	r0, [pc, #548]	@ (8001ed8 <test_buffer_readwrite_verification+0x2e0>)
 8001cb4:	f007 fd1a 	bl	80096ec <iprintf>
        for (int i = 0; i < 8; i++) {
 8001cb8:	2300      	movs	r3, #0
 8001cba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001cbc:	e00e      	b.n	8001cdc <test_buffer_readwrite_verification+0xe4>
            printf("0x%02X ", patterns[p][i]);
 8001cbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	3350      	adds	r3, #80	@ 0x50
 8001cc4:	19da      	adds	r2, r3, r7
 8001cc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cc8:	4413      	add	r3, r2
 8001cca:	3b30      	subs	r3, #48	@ 0x30
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4882      	ldr	r0, [pc, #520]	@ (8001edc <test_buffer_readwrite_verification+0x2e4>)
 8001cd2:	f007 fd0b 	bl	80096ec <iprintf>
        for (int i = 0; i < 8; i++) {
 8001cd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cd8:	3301      	adds	r3, #1
 8001cda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001cdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cde:	2b07      	cmp	r3, #7
 8001ce0:	dded      	ble.n	8001cbe <test_buffer_readwrite_verification+0xc6>
        }
        printf("\n\r");
 8001ce2:	487f      	ldr	r0, [pc, #508]	@ (8001ee0 <test_buffer_readwrite_verification+0x2e8>)
 8001ce4:	f007 fd02 	bl	80096ec <iprintf>
        
        // Write pattern to TX FIFO
        hal_status = CC1201_WriteTxFifo(patterns[p], 8, &status_byte);
 8001ce8:	f107 0220 	add.w	r2, r7, #32
 8001cec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8001cf6:	2108      	movs	r1, #8
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fdd5 	bl	80008a8 <CC1201_WriteTxFifo>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
        if (hal_status == HAL_OK) {
 8001d04:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d11c      	bne.n	8001d46 <test_buffer_readwrite_verification+0x14e>
            printf("  ✓ Write SUCCESS ");
 8001d0c:	4875      	ldr	r0, [pc, #468]	@ (8001ee4 <test_buffer_readwrite_verification+0x2ec>)
 8001d0e:	f007 fced 	bl	80096ec <iprintf>
            print_cc1201_status(status_byte, "PATTERN_WRITE");
 8001d12:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001d16:	4974      	ldr	r1, [pc, #464]	@ (8001ee8 <test_buffer_readwrite_verification+0x2f0>)
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff fd7f 	bl	800181c <print_cc1201_status>
            
            // Check FIFO count
            uint8_t fifo_count = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	717b      	strb	r3, [r7, #5]
            CC1201_GetNumTXBytes(&fifo_count);
 8001d22:	1d7b      	adds	r3, r7, #5
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7fe fdb1 	bl	800088c <CC1201_GetNumTXBytes>
            printf("  FIFO count: %d bytes\n\r", fifo_count);
 8001d2a:	797b      	ldrb	r3, [r7, #5]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	486f      	ldr	r0, [pc, #444]	@ (8001eec <test_buffer_readwrite_verification+0x2f4>)
 8001d30:	f007 fcdc 	bl	80096ec <iprintf>
            
            // Clear FIFO for next test
            CC1201_FlushTxFifo(&status_byte);
 8001d34:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7fe fd14 	bl	8000766 <CC1201_FlushTxFifo>
            printf("  Flushed for next test\n\r");
 8001d3e:	486c      	ldr	r0, [pc, #432]	@ (8001ef0 <test_buffer_readwrite_verification+0x2f8>)
 8001d40:	f007 fcd4 	bl	80096ec <iprintf>
 8001d44:	e005      	b.n	8001d52 <test_buffer_readwrite_verification+0x15a>
        } else {
            printf("  ✗ Write FAILED - HAL: %d\n\r", hal_status);
 8001d46:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4869      	ldr	r0, [pc, #420]	@ (8001ef4 <test_buffer_readwrite_verification+0x2fc>)
 8001d4e:	f007 fccd 	bl	80096ec <iprintf>
    for (int p = 0; p < 4; p++) {
 8001d52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d54:	3301      	adds	r3, #1
 8001d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d5a:	2b03      	cmp	r3, #3
 8001d5c:	dd9d      	ble.n	8001c9a <test_buffer_readwrite_verification+0xa2>
        }
    }
    
    // 3. Test single byte operations with verification
    printf("\n3. SINGLE BYTE OPERATIONS TEST\n\r");
 8001d5e:	4866      	ldr	r0, [pc, #408]	@ (8001ef8 <test_buffer_readwrite_verification+0x300>)
 8001d60:	f007 fcc4 	bl	80096ec <iprintf>
    uint8_t test_bytes[] = {0x42, 0x69, 0xA5, 0x3C, 0xF0};
 8001d64:	4a65      	ldr	r2, [pc, #404]	@ (8001efc <test_buffer_readwrite_verification+0x304>)
 8001d66:	f107 0308 	add.w	r3, r7, #8
 8001d6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d6e:	6018      	str	r0, [r3, #0]
 8001d70:	3304      	adds	r3, #4
 8001d72:	7019      	strb	r1, [r3, #0]
    
    for (int i = 0; i < 5; i++) {
 8001d74:	2300      	movs	r3, #0
 8001d76:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d78:	e02f      	b.n	8001dda <test_buffer_readwrite_verification+0x1e2>
        printf("  Writing byte %d: 0x%02X\n\r", i+1, test_bytes[i]);
 8001d7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d7c:	1c59      	adds	r1, r3, #1
 8001d7e:	f107 0208 	add.w	r2, r7, #8
 8001d82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d84:	4413      	add	r3, r2
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	485d      	ldr	r0, [pc, #372]	@ (8001f00 <test_buffer_readwrite_verification+0x308>)
 8001d8c:	f007 fcae 	bl	80096ec <iprintf>
        hal_status = CC1201_WriteSingleTxFifo(test_bytes[i], &status_byte);
 8001d90:	f107 0208 	add.w	r2, r7, #8
 8001d94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d96:	4413      	add	r3, r2
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8001d9e:	4611      	mov	r1, r2
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7fe fee5 	bl	8000b70 <CC1201_WriteSingleTxFifo>
 8001da6:	4603      	mov	r3, r0
 8001da8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
        if (hal_status == HAL_OK) {
 8001dac:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d109      	bne.n	8001dc8 <test_buffer_readwrite_verification+0x1d0>
            printf("    ✓ Single write SUCCESS ");
 8001db4:	4853      	ldr	r0, [pc, #332]	@ (8001f04 <test_buffer_readwrite_verification+0x30c>)
 8001db6:	f007 fc99 	bl	80096ec <iprintf>
            print_cc1201_status(status_byte, "SINGLE_BYTE");
 8001dba:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001dbe:	4952      	ldr	r1, [pc, #328]	@ (8001f08 <test_buffer_readwrite_verification+0x310>)
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff fd2b 	bl	800181c <print_cc1201_status>
 8001dc6:	e005      	b.n	8001dd4 <test_buffer_readwrite_verification+0x1dc>
        } else {
            printf("    ✗ Single write FAILED - HAL: %d\n\r", hal_status);
 8001dc8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001dcc:	4619      	mov	r1, r3
 8001dce:	484f      	ldr	r0, [pc, #316]	@ (8001f0c <test_buffer_readwrite_verification+0x314>)
 8001dd0:	f007 fc8c 	bl	80096ec <iprintf>
    for (int i = 0; i < 5; i++) {
 8001dd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8001dda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	ddcc      	ble.n	8001d7a <test_buffer_readwrite_verification+0x182>
        }
    }
    
    // Check final FIFO count
    uint8_t final_count = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	71fb      	strb	r3, [r7, #7]
    CC1201_GetNumTXBytes(&final_count);
 8001de4:	1dfb      	adds	r3, r7, #7
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7fe fd50 	bl	800088c <CC1201_GetNumTXBytes>
    printf("  Final TX FIFO: %d bytes (expected: 5)\n\r", final_count);
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	4619      	mov	r1, r3
 8001df0:	4847      	ldr	r0, [pc, #284]	@ (8001f10 <test_buffer_readwrite_verification+0x318>)
 8001df2:	f007 fc7b 	bl	80096ec <iprintf>
    
    // 4. Test state transitions with data
    printf("\n4. STATE TRANSITION WITH BUFFER DATA\n\r");
 8001df6:	4847      	ldr	r0, [pc, #284]	@ (8001f14 <test_buffer_readwrite_verification+0x31c>)
 8001df8:	f007 fc78 	bl	80096ec <iprintf>
    hal_status = CC1201_EnterTxMode(&status_byte);
 8001dfc:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7fe fc89 	bl	8000718 <CC1201_EnterTxMode>
 8001e06:	4603      	mov	r3, r0
 8001e08:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    if (hal_status == HAL_OK) {
 8001e0c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d123      	bne.n	8001e5c <test_buffer_readwrite_verification+0x264>
        printf("  ✓ Entered TX mode with %d bytes in FIFO\n\r", final_count);
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	4619      	mov	r1, r3
 8001e18:	483f      	ldr	r0, [pc, #252]	@ (8001f18 <test_buffer_readwrite_verification+0x320>)
 8001e1a:	f007 fc67 	bl	80096ec <iprintf>
        print_cc1201_status(status_byte, "TX_MODE_WITH_DATA");
 8001e1e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001e22:	493e      	ldr	r1, [pc, #248]	@ (8001f1c <test_buffer_readwrite_verification+0x324>)
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fcf9 	bl	800181c <print_cc1201_status>
        
        HAL_Delay(50); // Allow some time for potential transmission
 8001e2a:	2032      	movs	r0, #50	@ 0x32
 8001e2c:	f001 fdba 	bl	80039a4 <HAL_Delay>
        
        // Check status after time in TX mode
        CC1201_Nop(&status_byte);
 8001e30:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7fe fca3 	bl	8000780 <CC1201_Nop>
        print_cc1201_status(status_byte, "TX_AFTER_DELAY");
 8001e3a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001e3e:	4938      	ldr	r1, [pc, #224]	@ (8001f20 <test_buffer_readwrite_verification+0x328>)
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff fceb 	bl	800181c <print_cc1201_status>
        
        // Return to IDLE
        CC1201_EnterIdleMode(&status_byte);
 8001e46:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fc71 	bl	8000732 <CC1201_EnterIdleMode>
        print_cc1201_status(status_byte, "RETURN_TO_IDLE");
 8001e50:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001e54:	4933      	ldr	r1, [pc, #204]	@ (8001f24 <test_buffer_readwrite_verification+0x32c>)
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff fce0 	bl	800181c <print_cc1201_status>
    }
    
    // 5. Final cleanup
    printf("\n5. FINAL CLEANUP AND VERIFICATION\n\r");
 8001e5c:	4832      	ldr	r0, [pc, #200]	@ (8001f28 <test_buffer_readwrite_verification+0x330>)
 8001e5e:	f007 fc45 	bl	80096ec <iprintf>
    CC1201_FlushTxFifo(&status_byte);
 8001e62:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe fc7d 	bl	8000766 <CC1201_FlushTxFifo>
    print_cc1201_status(status_byte, "FINAL_CLEANUP");
 8001e6c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001e70:	492e      	ldr	r1, [pc, #184]	@ (8001f2c <test_buffer_readwrite_verification+0x334>)
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff fcd2 	bl	800181c <print_cc1201_status>
    
    uint8_t cleanup_count = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	71bb      	strb	r3, [r7, #6]
    CC1201_GetNumTXBytes(&cleanup_count);
 8001e7c:	1dbb      	adds	r3, r7, #6
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7fe fd04 	bl	800088c <CC1201_GetNumTXBytes>
    printf("  Final FIFO count: %d (should be 0)\n\r", cleanup_count);
 8001e84:	79bb      	ldrb	r3, [r7, #6]
 8001e86:	4619      	mov	r1, r3
 8001e88:	4829      	ldr	r0, [pc, #164]	@ (8001f30 <test_buffer_readwrite_verification+0x338>)
 8001e8a:	f007 fc2f 	bl	80096ec <iprintf>
    
    if (cleanup_count == 0) {
 8001e8e:	79bb      	ldrb	r3, [r7, #6]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d103      	bne.n	8001e9c <test_buffer_readwrite_verification+0x2a4>
        printf("  ✓ BUFFER TEST COMPLETED SUCCESSFULLY\n\r");
 8001e94:	4827      	ldr	r0, [pc, #156]	@ (8001f34 <test_buffer_readwrite_verification+0x33c>)
 8001e96:	f007 fc29 	bl	80096ec <iprintf>
 8001e9a:	e002      	b.n	8001ea2 <test_buffer_readwrite_verification+0x2aa>
    } else {
        printf("  ⚠ FIFO not completely empty after cleanup\n\r");
 8001e9c:	4826      	ldr	r0, [pc, #152]	@ (8001f38 <test_buffer_readwrite_verification+0x340>)
 8001e9e:	f007 fc25 	bl	80096ec <iprintf>
    }
    
    printf("=== BUFFER VERIFICATION TEST COMPLETE ===\n\r");
 8001ea2:	4826      	ldr	r0, [pc, #152]	@ (8001f3c <test_buffer_readwrite_verification+0x344>)
 8001ea4:	f007 fc22 	bl	80096ec <iprintf>
}
 8001ea8:	3750      	adds	r7, #80	@ 0x50
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bdb0      	pop	{r4, r5, r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	0800c250 	.word	0x0800c250
 8001eb4:	0800c280 	.word	0x0800c280
 8001eb8:	0800c2a0 	.word	0x0800c2a0
 8001ebc:	0800b80c 	.word	0x0800b80c
 8001ec0:	0800b7c8 	.word	0x0800b7c8
 8001ec4:	0800c2d4 	.word	0x0800c2d4
 8001ec8:	0800c5dc 	.word	0x0800c5dc
 8001ecc:	0800c62c 	.word	0x0800c62c
 8001ed0:	0800c2ac 	.word	0x0800c2ac
 8001ed4:	0800c2fc 	.word	0x0800c2fc
 8001ed8:	0800c310 	.word	0x0800c310
 8001edc:	0800c31c 	.word	0x0800c31c
 8001ee0:	0800c324 	.word	0x0800c324
 8001ee4:	0800c328 	.word	0x0800c328
 8001ee8:	0800c340 	.word	0x0800c340
 8001eec:	0800c350 	.word	0x0800c350
 8001ef0:	0800c36c 	.word	0x0800c36c
 8001ef4:	0800c388 	.word	0x0800c388
 8001ef8:	0800c3a8 	.word	0x0800c3a8
 8001efc:	0800c63c 	.word	0x0800c63c
 8001f00:	0800c3cc 	.word	0x0800c3cc
 8001f04:	0800c3e8 	.word	0x0800c3e8
 8001f08:	0800c408 	.word	0x0800c408
 8001f0c:	0800c414 	.word	0x0800c414
 8001f10:	0800c43c 	.word	0x0800c43c
 8001f14:	0800c468 	.word	0x0800c468
 8001f18:	0800c490 	.word	0x0800c490
 8001f1c:	0800c4c0 	.word	0x0800c4c0
 8001f20:	0800c4d4 	.word	0x0800c4d4
 8001f24:	0800c4e4 	.word	0x0800c4e4
 8001f28:	0800c4f4 	.word	0x0800c4f4
 8001f2c:	0800c51c 	.word	0x0800c51c
 8001f30:	0800c52c 	.word	0x0800c52c
 8001f34:	0800c554 	.word	0x0800c554
 8001f38:	0800c580 	.word	0x0800c580
 8001f3c:	0800c5b0 	.word	0x0800c5b0

08001f40 <test_cc1201_communication_verification>:

// CC1201 Communication Verification Test
void test_cc1201_communication_verification(void) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef hal_status;
    uint8_t status_byte = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	70bb      	strb	r3, [r7, #2]
    
    printf("\n=== CC1201 COMMUNICATION VERIFICATION TEST ===\n\r");
 8001f4a:	487b      	ldr	r0, [pc, #492]	@ (8002138 <test_cc1201_communication_verification+0x1f8>)
 8001f4c:	f007 fbce 	bl	80096ec <iprintf>
    
    // 1. Test basic communication with different strobe commands
    printf("1. TESTING BASIC STROBE RESPONSES\n\r");
 8001f50:	487a      	ldr	r0, [pc, #488]	@ (800213c <test_cc1201_communication_verification+0x1fc>)
 8001f52:	f007 fbcb 	bl	80096ec <iprintf>
    
    // Test NOP command multiple times to see if we get consistent responses
    for (int i = 0; i < 5; i++) {
 8001f56:	2300      	movs	r3, #0
 8001f58:	607b      	str	r3, [r7, #4]
 8001f5a:	e01b      	b.n	8001f94 <test_cc1201_communication_verification+0x54>
        hal_status = CC1201_Nop(&status_byte);
 8001f5c:	1cbb      	adds	r3, r7, #2
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe fc0e 	bl	8000780 <CC1201_Nop>
 8001f64:	4603      	mov	r3, r0
 8001f66:	70fb      	strb	r3, [r7, #3]
        printf("  NOP %d: HAL=%d, Status=0x%02X ", i+1, hal_status, status_byte);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	1c59      	adds	r1, r3, #1
 8001f6c:	78fa      	ldrb	r2, [r7, #3]
 8001f6e:	78bb      	ldrb	r3, [r7, #2]
 8001f70:	4873      	ldr	r0, [pc, #460]	@ (8002140 <test_cc1201_communication_verification+0x200>)
 8001f72:	f007 fbbb 	bl	80096ec <iprintf>
        if (hal_status == HAL_OK) {
 8001f76:	78fb      	ldrb	r3, [r7, #3]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d105      	bne.n	8001f88 <test_cc1201_communication_verification+0x48>
            print_cc1201_status(status_byte, "NOP_TEST");
 8001f7c:	78bb      	ldrb	r3, [r7, #2]
 8001f7e:	4971      	ldr	r1, [pc, #452]	@ (8002144 <test_cc1201_communication_verification+0x204>)
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff fc4b 	bl	800181c <print_cc1201_status>
 8001f86:	e002      	b.n	8001f8e <test_cc1201_communication_verification+0x4e>
        } else {
            printf(" - COMMUNICATION FAILED\n\r");
 8001f88:	486f      	ldr	r0, [pc, #444]	@ (8002148 <test_cc1201_communication_verification+0x208>)
 8001f8a:	f007 fbaf 	bl	80096ec <iprintf>
    for (int i = 0; i < 5; i++) {
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3301      	adds	r3, #1
 8001f92:	607b      	str	r3, [r7, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	dde0      	ble.n	8001f5c <test_cc1201_communication_verification+0x1c>
        }
    }
    
    // 2. Test soft reset to see if status changes
    printf("\n2. TESTING SOFT RESET RESPONSE\n\r");
 8001f9a:	486c      	ldr	r0, [pc, #432]	@ (800214c <test_cc1201_communication_verification+0x20c>)
 8001f9c:	f007 fba6 	bl	80096ec <iprintf>
    hal_status = CC1201_SoftReset(&status_byte);
 8001fa0:	1cbb      	adds	r3, r7, #2
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe fb82 	bl	80006ac <CC1201_SoftReset>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	70fb      	strb	r3, [r7, #3]
    if (hal_status == HAL_OK) {
 8001fac:	78fb      	ldrb	r3, [r7, #3]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d11c      	bne.n	8001fec <test_cc1201_communication_verification+0xac>
        printf("  Soft Reset: ");
 8001fb2:	4867      	ldr	r0, [pc, #412]	@ (8002150 <test_cc1201_communication_verification+0x210>)
 8001fb4:	f007 fb9a 	bl	80096ec <iprintf>
        print_cc1201_status(status_byte, "RESET");
 8001fb8:	78bb      	ldrb	r3, [r7, #2]
 8001fba:	4966      	ldr	r1, [pc, #408]	@ (8002154 <test_cc1201_communication_verification+0x214>)
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff fc2d 	bl	800181c <print_cc1201_status>
        
        // Wait for reset to complete and test again
        HAL_Delay(100);
 8001fc2:	2064      	movs	r0, #100	@ 0x64
 8001fc4:	f001 fcee 	bl	80039a4 <HAL_Delay>
        hal_status = CC1201_Nop(&status_byte);
 8001fc8:	1cbb      	adds	r3, r7, #2
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe fbd8 	bl	8000780 <CC1201_Nop>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	70fb      	strb	r3, [r7, #3]
        if (hal_status == HAL_OK) {
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10d      	bne.n	8001ff6 <test_cc1201_communication_verification+0xb6>
            printf("  After Reset: ");
 8001fda:	485f      	ldr	r0, [pc, #380]	@ (8002158 <test_cc1201_communication_verification+0x218>)
 8001fdc:	f007 fb86 	bl	80096ec <iprintf>
            print_cc1201_status(status_byte, "POST_RESET");
 8001fe0:	78bb      	ldrb	r3, [r7, #2]
 8001fe2:	495e      	ldr	r1, [pc, #376]	@ (800215c <test_cc1201_communication_verification+0x21c>)
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff fc19 	bl	800181c <print_cc1201_status>
 8001fea:	e004      	b.n	8001ff6 <test_cc1201_communication_verification+0xb6>
        }
    } else {
        printf("  ✗ Soft Reset FAILED - HAL: %d\n\r", hal_status);
 8001fec:	78fb      	ldrb	r3, [r7, #3]
 8001fee:	4619      	mov	r1, r3
 8001ff0:	485b      	ldr	r0, [pc, #364]	@ (8002160 <test_cc1201_communication_verification+0x220>)
 8001ff2:	f007 fb7b 	bl	80096ec <iprintf>
    }
    
    // 3. Test different states to see if we get different status responses
    printf("\n3. TESTING STATE TRANSITIONS\n\r");
 8001ff6:	485b      	ldr	r0, [pc, #364]	@ (8002164 <test_cc1201_communication_verification+0x224>)
 8001ff8:	f007 fb78 	bl	80096ec <iprintf>
    
    // Try to enter IDLE
    hal_status = CC1201_EnterIdleMode(&status_byte);
 8001ffc:	1cbb      	adds	r3, r7, #2
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe fb97 	bl	8000732 <CC1201_EnterIdleMode>
 8002004:	4603      	mov	r3, r0
 8002006:	70fb      	strb	r3, [r7, #3]
    if (hal_status == HAL_OK) {
 8002008:	78fb      	ldrb	r3, [r7, #3]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d107      	bne.n	800201e <test_cc1201_communication_verification+0xde>
        printf("  IDLE Mode: ");
 800200e:	4856      	ldr	r0, [pc, #344]	@ (8002168 <test_cc1201_communication_verification+0x228>)
 8002010:	f007 fb6c 	bl	80096ec <iprintf>
        print_cc1201_status(status_byte, "IDLE_ENTRY");
 8002014:	78bb      	ldrb	r3, [r7, #2]
 8002016:	4955      	ldr	r1, [pc, #340]	@ (800216c <test_cc1201_communication_verification+0x22c>)
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff fbff 	bl	800181c <print_cc1201_status>
    }
    
    // Try calibration
    hal_status = CC1201_CalFreqSynth(&status_byte);
 800201e:	1cbb      	adds	r3, r7, #2
 8002020:	4618      	mov	r0, r3
 8002022:	f7fe fb6c 	bl	80006fe <CC1201_CalFreqSynth>
 8002026:	4603      	mov	r3, r0
 8002028:	70fb      	strb	r3, [r7, #3]
    if (hal_status == HAL_OK) {
 800202a:	78fb      	ldrb	r3, [r7, #3]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10a      	bne.n	8002046 <test_cc1201_communication_verification+0x106>
        printf("  Calibrate: ");
 8002030:	484f      	ldr	r0, [pc, #316]	@ (8002170 <test_cc1201_communication_verification+0x230>)
 8002032:	f007 fb5b 	bl	80096ec <iprintf>
        print_cc1201_status(status_byte, "CALIBRATE");
 8002036:	78bb      	ldrb	r3, [r7, #2]
 8002038:	494e      	ldr	r1, [pc, #312]	@ (8002174 <test_cc1201_communication_verification+0x234>)
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fbee 	bl	800181c <print_cc1201_status>
        HAL_Delay(50); // Wait for calibration
 8002040:	2032      	movs	r0, #50	@ 0x32
 8002042:	f001 fcaf 	bl	80039a4 <HAL_Delay>
    }
    
    // Try fast TX on
    hal_status = CC1201_FastTxOn(&status_byte);
 8002046:	1cbb      	adds	r3, r7, #2
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe fb4b 	bl	80006e4 <CC1201_FastTxOn>
 800204e:	4603      	mov	r3, r0
 8002050:	70fb      	strb	r3, [r7, #3]
    if (hal_status == HAL_OK) {
 8002052:	78fb      	ldrb	r3, [r7, #3]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d107      	bne.n	8002068 <test_cc1201_communication_verification+0x128>
        printf("  Fast TX On: ");
 8002058:	4847      	ldr	r0, [pc, #284]	@ (8002178 <test_cc1201_communication_verification+0x238>)
 800205a:	f007 fb47 	bl	80096ec <iprintf>
        print_cc1201_status(status_byte, "FAST_TX_ON");
 800205e:	78bb      	ldrb	r3, [r7, #2]
 8002060:	4946      	ldr	r1, [pc, #280]	@ (800217c <test_cc1201_communication_verification+0x23c>)
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff fbda 	bl	800181c <print_cc1201_status>
    }
    
    // Return to IDLE
    hal_status = CC1201_EnterIdleMode(&status_byte);
 8002068:	1cbb      	adds	r3, r7, #2
 800206a:	4618      	mov	r0, r3
 800206c:	f7fe fb61 	bl	8000732 <CC1201_EnterIdleMode>
 8002070:	4603      	mov	r3, r0
 8002072:	70fb      	strb	r3, [r7, #3]
    if (hal_status == HAL_OK) {
 8002074:	78fb      	ldrb	r3, [r7, #3]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d107      	bne.n	800208a <test_cc1201_communication_verification+0x14a>
        printf("  Return IDLE: ");
 800207a:	4841      	ldr	r0, [pc, #260]	@ (8002180 <test_cc1201_communication_verification+0x240>)
 800207c:	f007 fb36 	bl	80096ec <iprintf>
        print_cc1201_status(status_byte, "RETURN_IDLE");
 8002080:	78bb      	ldrb	r3, [r7, #2]
 8002082:	4940      	ldr	r1, [pc, #256]	@ (8002184 <test_cc1201_communication_verification+0x244>)
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff fbc9 	bl	800181c <print_cc1201_status>
    }
    
    // 4. Test register read to verify communication
    printf("\n4. TESTING REGISTER READ OPERATIONS\n\r");
 800208a:	483f      	ldr	r0, [pc, #252]	@ (8002188 <test_cc1201_communication_verification+0x248>)
 800208c:	f007 fb2e 	bl	80096ec <iprintf>
    
    uint8_t chip_id = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	707b      	strb	r3, [r7, #1]
    hal_status = CC1201_ReadStatus(CC1201_MARCSTATE, &chip_id);
 8002094:	1c7b      	adds	r3, r7, #1
 8002096:	4619      	mov	r1, r3
 8002098:	f642 7073 	movw	r0, #12147	@ 0x2f73
 800209c:	f7fe fb8c 	bl	80007b8 <CC1201_ReadStatus>
 80020a0:	4603      	mov	r3, r0
 80020a2:	70fb      	strb	r3, [r7, #3]
    if (hal_status == HAL_OK) {
 80020a4:	78fb      	ldrb	r3, [r7, #3]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d105      	bne.n	80020b6 <test_cc1201_communication_verification+0x176>
        printf("  MARCSTATE: 0x%02X\n\r", chip_id);
 80020aa:	787b      	ldrb	r3, [r7, #1]
 80020ac:	4619      	mov	r1, r3
 80020ae:	4837      	ldr	r0, [pc, #220]	@ (800218c <test_cc1201_communication_verification+0x24c>)
 80020b0:	f007 fb1c 	bl	80096ec <iprintf>
 80020b4:	e004      	b.n	80020c0 <test_cc1201_communication_verification+0x180>
    } else {
        printf("  ✗ MARCSTATE read failed - HAL: %d\n\r", hal_status);
 80020b6:	78fb      	ldrb	r3, [r7, #3]
 80020b8:	4619      	mov	r1, r3
 80020ba:	4835      	ldr	r0, [pc, #212]	@ (8002190 <test_cc1201_communication_verification+0x250>)
 80020bc:	f007 fb16 	bl	80096ec <iprintf>
    }
    
    uint8_t marc_state = 0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	703b      	strb	r3, [r7, #0]
    hal_status = CC1201_ReadMARCState(&marc_state);
 80020c4:	463b      	mov	r3, r7
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe fbc4 	bl	8000854 <CC1201_ReadMARCState>
 80020cc:	4603      	mov	r3, r0
 80020ce:	70fb      	strb	r3, [r7, #3]
    if (hal_status == HAL_OK) {
 80020d0:	78fb      	ldrb	r3, [r7, #3]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d105      	bne.n	80020e2 <test_cc1201_communication_verification+0x1a2>
        printf("  MARC_STATE: 0x%02X\n\r", marc_state);
 80020d6:	783b      	ldrb	r3, [r7, #0]
 80020d8:	4619      	mov	r1, r3
 80020da:	482e      	ldr	r0, [pc, #184]	@ (8002194 <test_cc1201_communication_verification+0x254>)
 80020dc:	f007 fb06 	bl	80096ec <iprintf>
 80020e0:	e004      	b.n	80020ec <test_cc1201_communication_verification+0x1ac>
    } else {
        printf("  ✗ MARC_STATE read failed - HAL: %d\n\r", hal_status);
 80020e2:	78fb      	ldrb	r3, [r7, #3]
 80020e4:	4619      	mov	r1, r3
 80020e6:	482c      	ldr	r0, [pc, #176]	@ (8002198 <test_cc1201_communication_verification+0x258>)
 80020e8:	f007 fb00 	bl	80096ec <iprintf>
    }
    
    // 5. Analyze status byte patterns
    printf("\n5. STATUS BYTE ANALYSIS\n\r");
 80020ec:	482b      	ldr	r0, [pc, #172]	@ (800219c <test_cc1201_communication_verification+0x25c>)
 80020ee:	f007 fafd 	bl	80096ec <iprintf>
    printf("  If all status bytes are 0x00, this suggests:\n\r");
 80020f2:	482b      	ldr	r0, [pc, #172]	@ (80021a0 <test_cc1201_communication_verification+0x260>)
 80020f4:	f007 fafa 	bl	80096ec <iprintf>
    printf("  - CC1201 may not be responding (check power/connections)\n\r");
 80020f8:	482a      	ldr	r0, [pc, #168]	@ (80021a4 <test_cc1201_communication_verification+0x264>)
 80020fa:	f007 faf7 	bl	80096ec <iprintf>
    printf("  - SPI communication issue (check MISO line)\n\r");
 80020fe:	482a      	ldr	r0, [pc, #168]	@ (80021a8 <test_cc1201_communication_verification+0x268>)
 8002100:	f007 faf4 	bl	80096ec <iprintf>
    printf("  - CC1201 may be in reset or powered down\n\r");
 8002104:	4829      	ldr	r0, [pc, #164]	@ (80021ac <test_cc1201_communication_verification+0x26c>)
 8002106:	f007 faf1 	bl	80096ec <iprintf>
    printf("  \n\r");
 800210a:	4829      	ldr	r0, [pc, #164]	@ (80021b0 <test_cc1201_communication_verification+0x270>)
 800210c:	f007 faee 	bl	80096ec <iprintf>
    printf("  Normal CC1201 status should show:\n\r");
 8002110:	4828      	ldr	r0, [pc, #160]	@ (80021b4 <test_cc1201_communication_verification+0x274>)
 8002112:	f007 faeb 	bl	80096ec <iprintf>
    printf("  - Bits [7:4]: Current state (0=IDLE, 1=RX, 2=TX, etc.)\n\r");
 8002116:	4828      	ldr	r0, [pc, #160]	@ (80021b8 <test_cc1201_communication_verification+0x278>)
 8002118:	f007 fae8 	bl	80096ec <iprintf>
    printf("  - Bits [3:0]: FIFO bytes or chip status info\n\r");
 800211c:	4827      	ldr	r0, [pc, #156]	@ (80021bc <test_cc1201_communication_verification+0x27c>)
 800211e:	f007 fae5 	bl	80096ec <iprintf>
    printf("  - A functioning CC1201 should rarely return exactly 0x00\n\r");
 8002122:	4827      	ldr	r0, [pc, #156]	@ (80021c0 <test_cc1201_communication_verification+0x280>)
 8002124:	f007 fae2 	bl	80096ec <iprintf>
    
    printf("=== COMMUNICATION VERIFICATION COMPLETE ===\n\r");
 8002128:	4826      	ldr	r0, [pc, #152]	@ (80021c4 <test_cc1201_communication_verification+0x284>)
 800212a:	f007 fadf 	bl	80096ec <iprintf>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	0800c644 	.word	0x0800c644
 800213c:	0800c678 	.word	0x0800c678
 8002140:	0800c69c 	.word	0x0800c69c
 8002144:	0800c6c0 	.word	0x0800c6c0
 8002148:	0800c6cc 	.word	0x0800c6cc
 800214c:	0800c6e8 	.word	0x0800c6e8
 8002150:	0800c70c 	.word	0x0800c70c
 8002154:	0800b624 	.word	0x0800b624
 8002158:	0800c71c 	.word	0x0800c71c
 800215c:	0800c72c 	.word	0x0800c72c
 8002160:	0800c738 	.word	0x0800c738
 8002164:	0800c75c 	.word	0x0800c75c
 8002168:	0800c77c 	.word	0x0800c77c
 800216c:	0800c78c 	.word	0x0800c78c
 8002170:	0800c798 	.word	0x0800c798
 8002174:	0800b6b8 	.word	0x0800b6b8
 8002178:	0800c7a8 	.word	0x0800c7a8
 800217c:	0800b700 	.word	0x0800b700
 8002180:	0800c7b8 	.word	0x0800c7b8
 8002184:	0800c7c8 	.word	0x0800c7c8
 8002188:	0800c7d4 	.word	0x0800c7d4
 800218c:	0800c7fc 	.word	0x0800c7fc
 8002190:	0800c814 	.word	0x0800c814
 8002194:	0800c83c 	.word	0x0800c83c
 8002198:	0800c854 	.word	0x0800c854
 800219c:	0800c880 	.word	0x0800c880
 80021a0:	0800c89c 	.word	0x0800c89c
 80021a4:	0800c8d0 	.word	0x0800c8d0
 80021a8:	0800c910 	.word	0x0800c910
 80021ac:	0800c940 	.word	0x0800c940
 80021b0:	0800c970 	.word	0x0800c970
 80021b4:	0800c978 	.word	0x0800c978
 80021b8:	0800c9a0 	.word	0x0800c9a0
 80021bc:	0800c9dc 	.word	0x0800c9dc
 80021c0:	0800ca10 	.word	0x0800ca10
 80021c4:	0800ca50 	.word	0x0800ca50

080021c8 <test_GPIO_pins>:
    printf("\n🎉 COMPREHENSIVE TEST SEQUENCE COMPLETE! 🎉\n\r");
    printf("==============================================\n\r");
}

// Function to test GPIO pin states
void test_GPIO_pins(void) {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
    printf("=== GPIO Pin Test ===\n\r");
 80021ce:	485c      	ldr	r0, [pc, #368]	@ (8002340 <test_GPIO_pins+0x178>)
 80021d0:	f007 fa8c 	bl	80096ec <iprintf>
    
    // Test CS pin more thoroughly
    printf("CS Pin (PE4) Detailed Test:\n\r");
 80021d4:	485b      	ldr	r0, [pc, #364]	@ (8002344 <test_GPIO_pins+0x17c>)
 80021d6:	f007 fa89 	bl	80096ec <iprintf>
    GPIO_PinState cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 80021da:	2110      	movs	r1, #16
 80021dc:	485a      	ldr	r0, [pc, #360]	@ (8002348 <test_GPIO_pins+0x180>)
 80021de:	f002 fb2f 	bl	8004840 <HAL_GPIO_ReadPin>
 80021e2:	4603      	mov	r3, r0
 80021e4:	71fb      	strb	r3, [r7, #7]
    printf("  Initial state: %s\n\r", cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d101      	bne.n	80021f0 <test_GPIO_pins+0x28>
 80021ec:	4b57      	ldr	r3, [pc, #348]	@ (800234c <test_GPIO_pins+0x184>)
 80021ee:	e000      	b.n	80021f2 <test_GPIO_pins+0x2a>
 80021f0:	4b57      	ldr	r3, [pc, #348]	@ (8002350 <test_GPIO_pins+0x188>)
 80021f2:	4619      	mov	r1, r3
 80021f4:	4857      	ldr	r0, [pc, #348]	@ (8002354 <test_GPIO_pins+0x18c>)
 80021f6:	f007 fa79 	bl	80096ec <iprintf>
    
    // Force CS LOW and check multiple times
    printf("  Forcing CS LOW...\n\r");
 80021fa:	4857      	ldr	r0, [pc, #348]	@ (8002358 <test_GPIO_pins+0x190>)
 80021fc:	f007 fa76 	bl	80096ec <iprintf>
    for (int i = 0; i < 5; i++) {
 8002200:	2300      	movs	r3, #0
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	e01c      	b.n	8002240 <test_GPIO_pins+0x78>
        HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 8002206:	2200      	movs	r2, #0
 8002208:	2110      	movs	r1, #16
 800220a:	484f      	ldr	r0, [pc, #316]	@ (8002348 <test_GPIO_pins+0x180>)
 800220c:	f002 fb30 	bl	8004870 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8002210:	200a      	movs	r0, #10
 8002212:	f001 fbc7 	bl	80039a4 <HAL_Delay>
        cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 8002216:	2110      	movs	r1, #16
 8002218:	484b      	ldr	r0, [pc, #300]	@ (8002348 <test_GPIO_pins+0x180>)
 800221a:	f002 fb11 	bl	8004840 <HAL_GPIO_ReadPin>
 800221e:	4603      	mov	r3, r0
 8002220:	71fb      	strb	r3, [r7, #7]
        printf("    Attempt %d: %s\n\r", i+1, cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	1c59      	adds	r1, r3, #1
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d101      	bne.n	8002230 <test_GPIO_pins+0x68>
 800222c:	4b47      	ldr	r3, [pc, #284]	@ (800234c <test_GPIO_pins+0x184>)
 800222e:	e000      	b.n	8002232 <test_GPIO_pins+0x6a>
 8002230:	4b47      	ldr	r3, [pc, #284]	@ (8002350 <test_GPIO_pins+0x188>)
 8002232:	461a      	mov	r2, r3
 8002234:	4849      	ldr	r0, [pc, #292]	@ (800235c <test_GPIO_pins+0x194>)
 8002236:	f007 fa59 	bl	80096ec <iprintf>
    for (int i = 0; i < 5; i++) {
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	3301      	adds	r3, #1
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2b04      	cmp	r3, #4
 8002244:	dddf      	ble.n	8002206 <test_GPIO_pins+0x3e>
    }
    
    // Force CS HIGH and check multiple times
    printf("  Forcing CS HIGH...\n\r");
 8002246:	4846      	ldr	r0, [pc, #280]	@ (8002360 <test_GPIO_pins+0x198>)
 8002248:	f007 fa50 	bl	80096ec <iprintf>
    for (int i = 0; i < 5; i++) {
 800224c:	2300      	movs	r3, #0
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	e01c      	b.n	800228c <test_GPIO_pins+0xc4>
        HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 8002252:	2201      	movs	r2, #1
 8002254:	2110      	movs	r1, #16
 8002256:	483c      	ldr	r0, [pc, #240]	@ (8002348 <test_GPIO_pins+0x180>)
 8002258:	f002 fb0a 	bl	8004870 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 800225c:	200a      	movs	r0, #10
 800225e:	f001 fba1 	bl	80039a4 <HAL_Delay>
        cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 8002262:	2110      	movs	r1, #16
 8002264:	4838      	ldr	r0, [pc, #224]	@ (8002348 <test_GPIO_pins+0x180>)
 8002266:	f002 faeb 	bl	8004840 <HAL_GPIO_ReadPin>
 800226a:	4603      	mov	r3, r0
 800226c:	71fb      	strb	r3, [r7, #7]
        printf("    Attempt %d: %s\n\r", i+1, cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	1c59      	adds	r1, r3, #1
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d101      	bne.n	800227c <test_GPIO_pins+0xb4>
 8002278:	4b34      	ldr	r3, [pc, #208]	@ (800234c <test_GPIO_pins+0x184>)
 800227a:	e000      	b.n	800227e <test_GPIO_pins+0xb6>
 800227c:	4b34      	ldr	r3, [pc, #208]	@ (8002350 <test_GPIO_pins+0x188>)
 800227e:	461a      	mov	r2, r3
 8002280:	4836      	ldr	r0, [pc, #216]	@ (800235c <test_GPIO_pins+0x194>)
 8002282:	f007 fa33 	bl	80096ec <iprintf>
    for (int i = 0; i < 5; i++) {
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	3301      	adds	r3, #1
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	2b04      	cmp	r3, #4
 8002290:	dddf      	ble.n	8002252 <test_GPIO_pins+0x8a>
    }
    
    // Test INT pin
    printf("INT Pin (PD4): ");
 8002292:	4834      	ldr	r0, [pc, #208]	@ (8002364 <test_GPIO_pins+0x19c>)
 8002294:	f007 fa2a 	bl	80096ec <iprintf>
    GPIO_PinState int_state = HAL_GPIO_ReadPin(CC1201_INT_PORT, CC1201_INT_PIN);
 8002298:	2110      	movs	r1, #16
 800229a:	4833      	ldr	r0, [pc, #204]	@ (8002368 <test_GPIO_pins+0x1a0>)
 800229c:	f002 fad0 	bl	8004840 <HAL_GPIO_ReadPin>
 80022a0:	4603      	mov	r3, r0
 80022a2:	71bb      	strb	r3, [r7, #6]
    printf("%s\n\r", int_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 80022a4:	79bb      	ldrb	r3, [r7, #6]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d101      	bne.n	80022ae <test_GPIO_pins+0xe6>
 80022aa:	4b28      	ldr	r3, [pc, #160]	@ (800234c <test_GPIO_pins+0x184>)
 80022ac:	e000      	b.n	80022b0 <test_GPIO_pins+0xe8>
 80022ae:	4b28      	ldr	r3, [pc, #160]	@ (8002350 <test_GPIO_pins+0x188>)
 80022b0:	4619      	mov	r1, r3
 80022b2:	482e      	ldr	r0, [pc, #184]	@ (800236c <test_GPIO_pins+0x1a4>)
 80022b4:	f007 fa1a 	bl	80096ec <iprintf>
    
    // Check SPI state
    printf("SPI2 State: ");
 80022b8:	482d      	ldr	r0, [pc, #180]	@ (8002370 <test_GPIO_pins+0x1a8>)
 80022ba:	f007 fa17 	bl	80096ec <iprintf>
    if (CC1201_SPI_HANDLE.State == HAL_SPI_STATE_READY) {
 80022be:	4b2d      	ldr	r3, [pc, #180]	@ (8002374 <test_GPIO_pins+0x1ac>)
 80022c0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d103      	bne.n	80022d2 <test_GPIO_pins+0x10a>
        printf("READY\n\r");
 80022ca:	482b      	ldr	r0, [pc, #172]	@ (8002378 <test_GPIO_pins+0x1b0>)
 80022cc:	f007 fa0e 	bl	80096ec <iprintf>
 80022d0:	e02f      	b.n	8002332 <test_GPIO_pins+0x16a>
    } else if (CC1201_SPI_HANDLE.State == HAL_SPI_STATE_BUSY) {
 80022d2:	4b28      	ldr	r3, [pc, #160]	@ (8002374 <test_GPIO_pins+0x1ac>)
 80022d4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d103      	bne.n	80022e6 <test_GPIO_pins+0x11e>
        printf("BUSY\n\r");
 80022de:	4827      	ldr	r0, [pc, #156]	@ (800237c <test_GPIO_pins+0x1b4>)
 80022e0:	f007 fa04 	bl	80096ec <iprintf>
 80022e4:	e025      	b.n	8002332 <test_GPIO_pins+0x16a>
    } else if (CC1201_SPI_HANDLE.State == HAL_SPI_STATE_BUSY_TX) {
 80022e6:	4b23      	ldr	r3, [pc, #140]	@ (8002374 <test_GPIO_pins+0x1ac>)
 80022e8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	d103      	bne.n	80022fa <test_GPIO_pins+0x132>
        printf("BUSY_TX\n\r");
 80022f2:	4823      	ldr	r0, [pc, #140]	@ (8002380 <test_GPIO_pins+0x1b8>)
 80022f4:	f007 f9fa 	bl	80096ec <iprintf>
 80022f8:	e01b      	b.n	8002332 <test_GPIO_pins+0x16a>
    } else if (CC1201_SPI_HANDLE.State == HAL_SPI_STATE_BUSY_RX) {
 80022fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002374 <test_GPIO_pins+0x1ac>)
 80022fc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b04      	cmp	r3, #4
 8002304:	d103      	bne.n	800230e <test_GPIO_pins+0x146>
        printf("BUSY_RX\n\r");
 8002306:	481f      	ldr	r0, [pc, #124]	@ (8002384 <test_GPIO_pins+0x1bc>)
 8002308:	f007 f9f0 	bl	80096ec <iprintf>
 800230c:	e011      	b.n	8002332 <test_GPIO_pins+0x16a>
    } else if (CC1201_SPI_HANDLE.State == HAL_SPI_STATE_BUSY_TX_RX) {
 800230e:	4b19      	ldr	r3, [pc, #100]	@ (8002374 <test_GPIO_pins+0x1ac>)
 8002310:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b05      	cmp	r3, #5
 8002318:	d103      	bne.n	8002322 <test_GPIO_pins+0x15a>
        printf("BUSY_TX_RX\n\r");
 800231a:	481b      	ldr	r0, [pc, #108]	@ (8002388 <test_GPIO_pins+0x1c0>)
 800231c:	f007 f9e6 	bl	80096ec <iprintf>
 8002320:	e007      	b.n	8002332 <test_GPIO_pins+0x16a>
    } else {
        printf("ERROR/RESET (%d)\n\r", CC1201_SPI_HANDLE.State);
 8002322:	4b14      	ldr	r3, [pc, #80]	@ (8002374 <test_GPIO_pins+0x1ac>)
 8002324:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8002328:	b2db      	uxtb	r3, r3
 800232a:	4619      	mov	r1, r3
 800232c:	4817      	ldr	r0, [pc, #92]	@ (800238c <test_GPIO_pins+0x1c4>)
 800232e:	f007 f9dd 	bl	80096ec <iprintf>
    }
    
    printf("===================\n\r");
 8002332:	4817      	ldr	r0, [pc, #92]	@ (8002390 <test_GPIO_pins+0x1c8>)
 8002334:	f007 f9da 	bl	80096ec <iprintf>
}
 8002338:	bf00      	nop
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	0800cd1c 	.word	0x0800cd1c
 8002344:	0800cd34 	.word	0x0800cd34
 8002348:	58021000 	.word	0x58021000
 800234c:	0800cd54 	.word	0x0800cd54
 8002350:	0800cd5c 	.word	0x0800cd5c
 8002354:	0800cd60 	.word	0x0800cd60
 8002358:	0800cd78 	.word	0x0800cd78
 800235c:	0800cd90 	.word	0x0800cd90
 8002360:	0800cda8 	.word	0x0800cda8
 8002364:	0800cdc0 	.word	0x0800cdc0
 8002368:	58020c00 	.word	0x58020c00
 800236c:	0800cdd0 	.word	0x0800cdd0
 8002370:	0800cdd8 	.word	0x0800cdd8
 8002374:	240000b8 	.word	0x240000b8
 8002378:	0800cde8 	.word	0x0800cde8
 800237c:	0800cdf0 	.word	0x0800cdf0
 8002380:	0800cdf8 	.word	0x0800cdf8
 8002384:	0800ce04 	.word	0x0800ce04
 8002388:	0800ce10 	.word	0x0800ce10
 800238c:	0800ce20 	.word	0x0800ce20
 8002390:	0800ce34 	.word	0x0800ce34

08002394 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002394:	b590      	push	{r4, r7, lr}
 8002396:	b087      	sub	sp, #28
 8002398:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800239a:	f000 fbff 	bl	8002b9c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800239e:	f001 fa6f 	bl	8003880 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023a2:	f000 fa97 	bl	80028d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023a6:	f000 fb69 	bl	8002a7c <MX_GPIO_Init>
  MX_SPI2_Init();
 80023aa:	f000 fb11 	bl	80029d0 <MX_SPI2_Init>
  // CC1201 testing will be done after UART is initialized

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80023ae:	2000      	movs	r0, #0
 80023b0:	f001 f810 	bl	80033d4 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80023b4:	2001      	movs	r0, #1
 80023b6:	f001 f80d 	bl	80033d4 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80023ba:	2002      	movs	r0, #2
 80023bc:	f001 f80a 	bl	80033d4 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80023c0:	2101      	movs	r1, #1
 80023c2:	2000      	movs	r0, #0
 80023c4:	f001 f8fa 	bl	80035bc <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80023c8:	4ba5      	ldr	r3, [pc, #660]	@ (8002660 <main+0x2cc>)
 80023ca:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80023ce:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80023d0:	4ba3      	ldr	r3, [pc, #652]	@ (8002660 <main+0x2cc>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80023d6:	4ba2      	ldr	r3, [pc, #648]	@ (8002660 <main+0x2cc>)
 80023d8:	2200      	movs	r2, #0
 80023da:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80023dc:	4ba0      	ldr	r3, [pc, #640]	@ (8002660 <main+0x2cc>)
 80023de:	2200      	movs	r2, #0
 80023e0:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80023e2:	4b9f      	ldr	r3, [pc, #636]	@ (8002660 <main+0x2cc>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80023e8:	499d      	ldr	r1, [pc, #628]	@ (8002660 <main+0x2cc>)
 80023ea:	2000      	movs	r0, #0
 80023ec:	f001 f96a 	bl	80036c4 <BSP_COM_Init>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <main+0x66>
  {
    Error_Handler();
 80023f6:	f000 fc11 	bl	8002c1c <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 80023fa:	489a      	ldr	r0, [pc, #616]	@ (8002664 <main+0x2d0>)
 80023fc:	f007 f976 	bl	80096ec <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8002400:	2000      	movs	r0, #0
 8002402:	f001 f85d 	bl	80034c0 <BSP_LED_On>
  BSP_LED_On(LED_YELLOW);
 8002406:	2001      	movs	r0, #1
 8002408:	f001 f85a 	bl	80034c0 <BSP_LED_On>
  BSP_LED_On(LED_RED);
 800240c:	2002      	movs	r0, #2
 800240e:	f001 f857 	bl	80034c0 <BSP_LED_On>
  
  // Now that UART is initialized, start CC1201 testing
  printf("\n=== CC1201 COMMUNICATION SYSTEM STARTUP ===\n\r");
 8002412:	4895      	ldr	r0, [pc, #596]	@ (8002668 <main+0x2d4>)
 8002414:	f007 f96a 	bl	80096ec <iprintf>
  
  // Test GPIO pins first
  test_GPIO_pins();
 8002418:	f7ff fed6 	bl	80021c8 <test_GPIO_pins>
  
  // Simple test instead of full initialization
  printf("Starting simple CC1201 test...\n\r");
 800241c:	4893      	ldr	r0, [pc, #588]	@ (800266c <main+0x2d8>)
 800241e:	f007 f965 	bl	80096ec <iprintf>
  
  // Quick pin configuration check
  printf("QUICK PIN CHECK:\n\r");
 8002422:	4893      	ldr	r0, [pc, #588]	@ (8002670 <main+0x2dc>)
 8002424:	f007 f962 	bl	80096ec <iprintf>
  printf("  PA6 (MISO): MODE=%lu, STATE=%s\n\r", 
         (GPIOA->MODER >> 12) & 0x3,
 8002428:	4b92      	ldr	r3, [pc, #584]	@ (8002674 <main+0x2e0>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	0b1b      	lsrs	r3, r3, #12
  printf("  PA6 (MISO): MODE=%lu, STATE=%s\n\r", 
 800242e:	f003 0403 	and.w	r4, r3, #3
         HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) ? "HIGH" : "LOW");
 8002432:	2140      	movs	r1, #64	@ 0x40
 8002434:	488f      	ldr	r0, [pc, #572]	@ (8002674 <main+0x2e0>)
 8002436:	f002 fa03 	bl	8004840 <HAL_GPIO_ReadPin>
 800243a:	4603      	mov	r3, r0
  printf("  PA6 (MISO): MODE=%lu, STATE=%s\n\r", 
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <main+0xb0>
 8002440:	4b8d      	ldr	r3, [pc, #564]	@ (8002678 <main+0x2e4>)
 8002442:	e000      	b.n	8002446 <main+0xb2>
 8002444:	4b8d      	ldr	r3, [pc, #564]	@ (800267c <main+0x2e8>)
 8002446:	461a      	mov	r2, r3
 8002448:	4621      	mov	r1, r4
 800244a:	488d      	ldr	r0, [pc, #564]	@ (8002680 <main+0x2ec>)
 800244c:	f007 f94e 	bl	80096ec <iprintf>
  printf("  PA10 (MOSI): MODE=%lu, STATE=%s\n\r", 
         (GPIOA->MODER >> 20) & 0x3,
 8002450:	4b88      	ldr	r3, [pc, #544]	@ (8002674 <main+0x2e0>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	0d1b      	lsrs	r3, r3, #20
  printf("  PA10 (MOSI): MODE=%lu, STATE=%s\n\r", 
 8002456:	f003 0403 	and.w	r4, r3, #3
         HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) ? "HIGH" : "LOW");
 800245a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800245e:	4885      	ldr	r0, [pc, #532]	@ (8002674 <main+0x2e0>)
 8002460:	f002 f9ee 	bl	8004840 <HAL_GPIO_ReadPin>
 8002464:	4603      	mov	r3, r0
  printf("  PA10 (MOSI): MODE=%lu, STATE=%s\n\r", 
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <main+0xda>
 800246a:	4b83      	ldr	r3, [pc, #524]	@ (8002678 <main+0x2e4>)
 800246c:	e000      	b.n	8002470 <main+0xdc>
 800246e:	4b83      	ldr	r3, [pc, #524]	@ (800267c <main+0x2e8>)
 8002470:	461a      	mov	r2, r3
 8002472:	4621      	mov	r1, r4
 8002474:	4883      	ldr	r0, [pc, #524]	@ (8002684 <main+0x2f0>)
 8002476:	f007 f939 	bl	80096ec <iprintf>
  printf("  PB10 (SCK): MODE=%lu, STATE=%s\n\r", 
         (GPIOB->MODER >> 20) & 0x3,
 800247a:	4b83      	ldr	r3, [pc, #524]	@ (8002688 <main+0x2f4>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	0d1b      	lsrs	r3, r3, #20
  printf("  PB10 (SCK): MODE=%lu, STATE=%s\n\r", 
 8002480:	f003 0403 	and.w	r4, r3, #3
         HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) ? "HIGH" : "LOW");
 8002484:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002488:	487f      	ldr	r0, [pc, #508]	@ (8002688 <main+0x2f4>)
 800248a:	f002 f9d9 	bl	8004840 <HAL_GPIO_ReadPin>
 800248e:	4603      	mov	r3, r0
  printf("  PB10 (SCK): MODE=%lu, STATE=%s\n\r", 
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <main+0x104>
 8002494:	4b78      	ldr	r3, [pc, #480]	@ (8002678 <main+0x2e4>)
 8002496:	e000      	b.n	800249a <main+0x106>
 8002498:	4b78      	ldr	r3, [pc, #480]	@ (800267c <main+0x2e8>)
 800249a:	461a      	mov	r2, r3
 800249c:	4621      	mov	r1, r4
 800249e:	487b      	ldr	r0, [pc, #492]	@ (800268c <main+0x2f8>)
 80024a0:	f007 f924 	bl	80096ec <iprintf>
  printf("  PE4 (CS): MODE=%lu, STATE=%s\n\r", 
         (GPIOE->MODER >> 8) & 0x3,
 80024a4:	4b7a      	ldr	r3, [pc, #488]	@ (8002690 <main+0x2fc>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	0a1b      	lsrs	r3, r3, #8
  printf("  PE4 (CS): MODE=%lu, STATE=%s\n\r", 
 80024aa:	f003 0403 	and.w	r4, r3, #3
         HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4) ? "HIGH" : "LOW");
 80024ae:	2110      	movs	r1, #16
 80024b0:	4877      	ldr	r0, [pc, #476]	@ (8002690 <main+0x2fc>)
 80024b2:	f002 f9c5 	bl	8004840 <HAL_GPIO_ReadPin>
 80024b6:	4603      	mov	r3, r0
  printf("  PE4 (CS): MODE=%lu, STATE=%s\n\r", 
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <main+0x12c>
 80024bc:	4b6e      	ldr	r3, [pc, #440]	@ (8002678 <main+0x2e4>)
 80024be:	e000      	b.n	80024c2 <main+0x12e>
 80024c0:	4b6e      	ldr	r3, [pc, #440]	@ (800267c <main+0x2e8>)
 80024c2:	461a      	mov	r2, r3
 80024c4:	4621      	mov	r1, r4
 80024c6:	4873      	ldr	r0, [pc, #460]	@ (8002694 <main+0x300>)
 80024c8:	f007 f910 	bl	80096ec <iprintf>
  
  // CRITICAL FIX: The pins are in ANALOG mode (3) instead of AF mode (2)
  // This means SPI2 is NOT connected to the pins!
  if (((GPIOA->MODER >> 12) & 0x3) == 3 || ((GPIOA->MODER >> 20) & 0x3) == 3 || ((GPIOB->MODER >> 20) & 0x3) == 3) {
 80024cc:	4b69      	ldr	r3, [pc, #420]	@ (8002674 <main+0x2e0>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	0b1b      	lsrs	r3, r3, #12
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	2b03      	cmp	r3, #3
 80024d8:	d00d      	beq.n	80024f6 <main+0x162>
 80024da:	4b66      	ldr	r3, [pc, #408]	@ (8002674 <main+0x2e0>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	0d1b      	lsrs	r3, r3, #20
 80024e0:	f003 0303 	and.w	r3, r3, #3
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	d006      	beq.n	80024f6 <main+0x162>
 80024e8:	4b67      	ldr	r3, [pc, #412]	@ (8002688 <main+0x2f4>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	0d1b      	lsrs	r3, r3, #20
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	2b03      	cmp	r3, #3
 80024f4:	d105      	bne.n	8002502 <main+0x16e>
    printf("\n⚠️ CRITICAL: SPI pins in ANALOG mode - applying manual fix...\n\r");
 80024f6:	4868      	ldr	r0, [pc, #416]	@ (8002698 <main+0x304>)
 80024f8:	f007 f8f8 	bl	80096ec <iprintf>
    Manual_SPI2_Pin_Config();
 80024fc:	f000 fb94 	bl	8002c28 <Manual_SPI2_Pin_Config>
 8002500:	e002      	b.n	8002508 <main+0x174>
  } else {
    printf("\n✅ SPI pins already in correct AF mode\n\r");
 8002502:	4866      	ldr	r0, [pc, #408]	@ (800269c <main+0x308>)
 8002504:	f007 f8f2 	bl	80096ec <iprintf>
  }
  
  HAL_Delay(100);
 8002508:	2064      	movs	r0, #100	@ 0x64
 800250a:	f001 fa4b 	bl	80039a4 <HAL_Delay>
  
  // First, test SPI2 peripheral directly
  printf("Testing SPI2 peripheral directly...\n\r");
 800250e:	4864      	ldr	r0, [pc, #400]	@ (80026a0 <main+0x30c>)
 8002510:	f007 f8ec 	bl	80096ec <iprintf>
  printf("SPI2 Initial Config: State=%d, Mode=%lu, DataSize=%lu, BaudRate=%lu\n\r",
         CC1201_SPI_HANDLE.State, 
 8002514:	4b63      	ldr	r3, [pc, #396]	@ (80026a4 <main+0x310>)
 8002516:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800251a:	b2db      	uxtb	r3, r3
  printf("SPI2 Initial Config: State=%d, Mode=%lu, DataSize=%lu, BaudRate=%lu\n\r",
 800251c:	4618      	mov	r0, r3
 800251e:	4b61      	ldr	r3, [pc, #388]	@ (80026a4 <main+0x310>)
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	4b60      	ldr	r3, [pc, #384]	@ (80026a4 <main+0x310>)
 8002524:	68d9      	ldr	r1, [r3, #12]
 8002526:	4b5f      	ldr	r3, [pc, #380]	@ (80026a4 <main+0x310>)
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	460b      	mov	r3, r1
 800252e:	4601      	mov	r1, r0
 8002530:	485d      	ldr	r0, [pc, #372]	@ (80026a8 <main+0x314>)
 8002532:	f007 f8db 	bl	80096ec <iprintf>
         CC1201_SPI_HANDLE.Init.Mode,
         CC1201_SPI_HANDLE.Init.DataSize,
         CC1201_SPI_HANDLE.Init.BaudRatePrescaler);
  
  // Try to fix SPI2 configuration
  printf("Attempting to reconfigure SPI2...\n\r");
 8002536:	485d      	ldr	r0, [pc, #372]	@ (80026ac <main+0x318>)
 8002538:	f007 f8d8 	bl	80096ec <iprintf>
  
  // Deinitialize SPI2
  HAL_SPI_DeInit(&CC1201_SPI_HANDLE);
 800253c:	4859      	ldr	r0, [pc, #356]	@ (80026a4 <main+0x310>)
 800253e:	f005 f93b 	bl	80077b8 <HAL_SPI_DeInit>
  
  // Reconfigure SPI2 manually
  CC1201_SPI_HANDLE.Instance = SPI2;
 8002542:	4b58      	ldr	r3, [pc, #352]	@ (80026a4 <main+0x310>)
 8002544:	4a5a      	ldr	r2, [pc, #360]	@ (80026b0 <main+0x31c>)
 8002546:	601a      	str	r2, [r3, #0]
  CC1201_SPI_HANDLE.Init.Mode = SPI_MODE_MASTER;
 8002548:	4b56      	ldr	r3, [pc, #344]	@ (80026a4 <main+0x310>)
 800254a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800254e:	605a      	str	r2, [r3, #4]
  CC1201_SPI_HANDLE.Init.Direction = SPI_DIRECTION_2LINES;
 8002550:	4b54      	ldr	r3, [pc, #336]	@ (80026a4 <main+0x310>)
 8002552:	2200      	movs	r2, #0
 8002554:	609a      	str	r2, [r3, #8]
  CC1201_SPI_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 8002556:	4b53      	ldr	r3, [pc, #332]	@ (80026a4 <main+0x310>)
 8002558:	2207      	movs	r2, #7
 800255a:	60da      	str	r2, [r3, #12]
  CC1201_SPI_HANDLE.Init.CLKPolarity = SPI_POLARITY_LOW;    // CPOL = 0
 800255c:	4b51      	ldr	r3, [pc, #324]	@ (80026a4 <main+0x310>)
 800255e:	2200      	movs	r2, #0
 8002560:	611a      	str	r2, [r3, #16]
  CC1201_SPI_HANDLE.Init.CLKPhase = SPI_PHASE_1EDGE;       // CPHA = 0
 8002562:	4b50      	ldr	r3, [pc, #320]	@ (80026a4 <main+0x310>)
 8002564:	2200      	movs	r2, #0
 8002566:	615a      	str	r2, [r3, #20]
  CC1201_SPI_HANDLE.Init.NSS = SPI_NSS_SOFT;
 8002568:	4b4e      	ldr	r3, [pc, #312]	@ (80026a4 <main+0x310>)
 800256a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800256e:	619a      	str	r2, [r3, #24]
  CC1201_SPI_HANDLE.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32; // Slower speed
 8002570:	4b4c      	ldr	r3, [pc, #304]	@ (80026a4 <main+0x310>)
 8002572:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002576:	61da      	str	r2, [r3, #28]
  CC1201_SPI_HANDLE.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002578:	4b4a      	ldr	r3, [pc, #296]	@ (80026a4 <main+0x310>)
 800257a:	2200      	movs	r2, #0
 800257c:	621a      	str	r2, [r3, #32]
  CC1201_SPI_HANDLE.Init.TIMode = SPI_TIMODE_DISABLE;
 800257e:	4b49      	ldr	r3, [pc, #292]	@ (80026a4 <main+0x310>)
 8002580:	2200      	movs	r2, #0
 8002582:	625a      	str	r2, [r3, #36]	@ 0x24
  CC1201_SPI_HANDLE.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002584:	4b47      	ldr	r3, [pc, #284]	@ (80026a4 <main+0x310>)
 8002586:	2200      	movs	r2, #0
 8002588:	629a      	str	r2, [r3, #40]	@ 0x28
  CC1201_SPI_HANDLE.Init.CRCPolynomial = 0x0;
 800258a:	4b46      	ldr	r3, [pc, #280]	@ (80026a4 <main+0x310>)
 800258c:	2200      	movs	r2, #0
 800258e:	62da      	str	r2, [r3, #44]	@ 0x2c
  CC1201_SPI_HANDLE.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002590:	4b44      	ldr	r3, [pc, #272]	@ (80026a4 <main+0x310>)
 8002592:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002596:	635a      	str	r2, [r3, #52]	@ 0x34
  CC1201_SPI_HANDLE.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002598:	4b42      	ldr	r3, [pc, #264]	@ (80026a4 <main+0x310>)
 800259a:	2200      	movs	r2, #0
 800259c:	639a      	str	r2, [r3, #56]	@ 0x38
  CC1201_SPI_HANDLE.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800259e:	4b41      	ldr	r3, [pc, #260]	@ (80026a4 <main+0x310>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  CC1201_SPI_HANDLE.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80025a4:	4b3f      	ldr	r3, [pc, #252]	@ (80026a4 <main+0x310>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	641a      	str	r2, [r3, #64]	@ 0x40
  CC1201_SPI_HANDLE.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80025aa:	4b3e      	ldr	r3, [pc, #248]	@ (80026a4 <main+0x310>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	645a      	str	r2, [r3, #68]	@ 0x44
  CC1201_SPI_HANDLE.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80025b0:	4b3c      	ldr	r3, [pc, #240]	@ (80026a4 <main+0x310>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	649a      	str	r2, [r3, #72]	@ 0x48
  CC1201_SPI_HANDLE.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80025b6:	4b3b      	ldr	r3, [pc, #236]	@ (80026a4 <main+0x310>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	64da      	str	r2, [r3, #76]	@ 0x4c
  CC1201_SPI_HANDLE.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80025bc:	4b39      	ldr	r3, [pc, #228]	@ (80026a4 <main+0x310>)
 80025be:	2200      	movs	r2, #0
 80025c0:	651a      	str	r2, [r3, #80]	@ 0x50
  CC1201_SPI_HANDLE.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80025c2:	4b38      	ldr	r3, [pc, #224]	@ (80026a4 <main+0x310>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	655a      	str	r2, [r3, #84]	@ 0x54
  CC1201_SPI_HANDLE.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80025c8:	4b36      	ldr	r3, [pc, #216]	@ (80026a4 <main+0x310>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	659a      	str	r2, [r3, #88]	@ 0x58
  
  HAL_StatusTypeDef spi_init_result = HAL_SPI_Init(&CC1201_SPI_HANDLE);
 80025ce:	4835      	ldr	r0, [pc, #212]	@ (80026a4 <main+0x310>)
 80025d0:	f004 ffce 	bl	8007570 <HAL_SPI_Init>
 80025d4:	4603      	mov	r3, r0
 80025d6:	71fb      	strb	r3, [r7, #7]
  printf("SPI2 reinitialization result: %d\n\r", spi_init_result);
 80025d8:	79fb      	ldrb	r3, [r7, #7]
 80025da:	4619      	mov	r1, r3
 80025dc:	4835      	ldr	r0, [pc, #212]	@ (80026b4 <main+0x320>)
 80025de:	f007 f885 	bl	80096ec <iprintf>
  
  if (spi_init_result == HAL_OK) {
 80025e2:	79fb      	ldrb	r3, [r7, #7]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d111      	bne.n	800260c <main+0x278>
      printf("SPI2 Reconfigured - State=%d, Mode=%lu, DataSize=%lu, BaudRate=%lu\n\r",
             CC1201_SPI_HANDLE.State, 
 80025e8:	4b2e      	ldr	r3, [pc, #184]	@ (80026a4 <main+0x310>)
 80025ea:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80025ee:	b2db      	uxtb	r3, r3
      printf("SPI2 Reconfigured - State=%d, Mode=%lu, DataSize=%lu, BaudRate=%lu\n\r",
 80025f0:	4618      	mov	r0, r3
 80025f2:	4b2c      	ldr	r3, [pc, #176]	@ (80026a4 <main+0x310>)
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	4b2b      	ldr	r3, [pc, #172]	@ (80026a4 <main+0x310>)
 80025f8:	68d9      	ldr	r1, [r3, #12]
 80025fa:	4b2a      	ldr	r3, [pc, #168]	@ (80026a4 <main+0x310>)
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	460b      	mov	r3, r1
 8002602:	4601      	mov	r1, r0
 8002604:	482c      	ldr	r0, [pc, #176]	@ (80026b8 <main+0x324>)
 8002606:	f007 f871 	bl	80096ec <iprintf>
 800260a:	e002      	b.n	8002612 <main+0x27e>
             CC1201_SPI_HANDLE.Init.Mode,
             CC1201_SPI_HANDLE.Init.DataSize,
             CC1201_SPI_HANDLE.Init.BaudRatePrescaler);
  } else {
      printf("SPI2 reconfiguration failed!\n\r");
 800260c:	482b      	ldr	r0, [pc, #172]	@ (80026bc <main+0x328>)
 800260e:	f007 f86d 	bl	80096ec <iprintf>
  }
  
  uint8_t spi_test_tx = 0xAA;
 8002612:	23aa      	movs	r3, #170	@ 0xaa
 8002614:	70fb      	strb	r3, [r7, #3]
  uint8_t spi_test_rx = 0x00;
 8002616:	2300      	movs	r3, #0
 8002618:	70bb      	strb	r3, [r7, #2]
  
  HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // CS Low
 800261a:	2200      	movs	r2, #0
 800261c:	2110      	movs	r1, #16
 800261e:	481c      	ldr	r0, [pc, #112]	@ (8002690 <main+0x2fc>)
 8002620:	f002 f926 	bl	8004870 <HAL_GPIO_WritePin>
  HAL_StatusTypeDef spi_test_result = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, &spi_test_tx, &spi_test_rx, 1, 100);
 8002624:	1cba      	adds	r2, r7, #2
 8002626:	1cf9      	adds	r1, r7, #3
 8002628:	2364      	movs	r3, #100	@ 0x64
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	2301      	movs	r3, #1
 800262e:	481d      	ldr	r0, [pc, #116]	@ (80026a4 <main+0x310>)
 8002630:	f005 f8ec 	bl	800780c <HAL_SPI_TransmitReceive>
 8002634:	4603      	mov	r3, r0
 8002636:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // CS High
 8002638:	2201      	movs	r2, #1
 800263a:	2110      	movs	r1, #16
 800263c:	4814      	ldr	r0, [pc, #80]	@ (8002690 <main+0x2fc>)
 800263e:	f002 f917 	bl	8004870 <HAL_GPIO_WritePin>
  
  printf("Direct SPI test - HAL: %d, TX: 0x%02X, RX: 0x%02X\n\r", spi_test_result, spi_test_tx, spi_test_rx);
 8002642:	79b9      	ldrb	r1, [r7, #6]
 8002644:	78fb      	ldrb	r3, [r7, #3]
 8002646:	461a      	mov	r2, r3
 8002648:	78bb      	ldrb	r3, [r7, #2]
 800264a:	481d      	ldr	r0, [pc, #116]	@ (80026c0 <main+0x32c>)
 800264c:	f007 f84e 	bl	80096ec <iprintf>
  
  if (spi_test_result == HAL_OK) {
 8002650:	79bb      	ldrb	r3, [r7, #6]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d138      	bne.n	80026c8 <main+0x334>
      printf("SPI2 peripheral working!\n\r");
 8002656:	481b      	ldr	r0, [pc, #108]	@ (80026c4 <main+0x330>)
 8002658:	f007 f848 	bl	80096ec <iprintf>
 800265c:	e04b      	b.n	80026f6 <main+0x362>
 800265e:	bf00      	nop
 8002660:	240000a4 	.word	0x240000a4
 8002664:	0800d598 	.word	0x0800d598
 8002668:	0800d5b4 	.word	0x0800d5b4
 800266c:	0800d5e4 	.word	0x0800d5e4
 8002670:	0800d608 	.word	0x0800d608
 8002674:	58020000 	.word	0x58020000
 8002678:	0800cd54 	.word	0x0800cd54
 800267c:	0800cd5c 	.word	0x0800cd5c
 8002680:	0800d61c 	.word	0x0800d61c
 8002684:	0800d640 	.word	0x0800d640
 8002688:	58020400 	.word	0x58020400
 800268c:	0800d664 	.word	0x0800d664
 8002690:	58021000 	.word	0x58021000
 8002694:	0800d688 	.word	0x0800d688
 8002698:	0800d6ac 	.word	0x0800d6ac
 800269c:	0800d6f4 	.word	0x0800d6f4
 80026a0:	0800d720 	.word	0x0800d720
 80026a4:	240000b8 	.word	0x240000b8
 80026a8:	0800d748 	.word	0x0800d748
 80026ac:	0800d790 	.word	0x0800d790
 80026b0:	40003800 	.word	0x40003800
 80026b4:	0800d7b4 	.word	0x0800d7b4
 80026b8:	0800d7d8 	.word	0x0800d7d8
 80026bc:	0800d820 	.word	0x0800d820
 80026c0:	0800d840 	.word	0x0800d840
 80026c4:	0800d874 	.word	0x0800d874
  } else {
      printf("SPI2 peripheral failed! Error: %d\n\r", spi_test_result);
 80026c8:	79bb      	ldrb	r3, [r7, #6]
 80026ca:	4619      	mov	r1, r3
 80026cc:	486c      	ldr	r0, [pc, #432]	@ (8002880 <main+0x4ec>)
 80026ce:	f007 f80d 	bl	80096ec <iprintf>
      if (spi_test_result == HAL_TIMEOUT) printf("  -> SPI TIMEOUT\n\r");
 80026d2:	79bb      	ldrb	r3, [r7, #6]
 80026d4:	2b03      	cmp	r3, #3
 80026d6:	d102      	bne.n	80026de <main+0x34a>
 80026d8:	486a      	ldr	r0, [pc, #424]	@ (8002884 <main+0x4f0>)
 80026da:	f007 f807 	bl	80096ec <iprintf>
      if (spi_test_result == HAL_ERROR) printf("  -> SPI ERROR\n\r");
 80026de:	79bb      	ldrb	r3, [r7, #6]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d102      	bne.n	80026ea <main+0x356>
 80026e4:	4868      	ldr	r0, [pc, #416]	@ (8002888 <main+0x4f4>)
 80026e6:	f007 f801 	bl	80096ec <iprintf>
      if (spi_test_result == HAL_BUSY) printf("  -> SPI BUSY\n\r");
 80026ea:	79bb      	ldrb	r3, [r7, #6]
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d102      	bne.n	80026f6 <main+0x362>
 80026f0:	4866      	ldr	r0, [pc, #408]	@ (800288c <main+0x4f8>)
 80026f2:	f006 fffb 	bl	80096ec <iprintf>
  }
  
  printf("Test 1: Creating status byte variable...\n\r");
 80026f6:	4866      	ldr	r0, [pc, #408]	@ (8002890 <main+0x4fc>)
 80026f8:	f006 fff8 	bl	80096ec <iprintf>
  uint8_t test_status = 0;
 80026fc:	2300      	movs	r3, #0
 80026fe:	707b      	strb	r3, [r7, #1]
  
  printf("Test 2: About to call CC1201_Nop...\n\r");
 8002700:	4864      	ldr	r0, [pc, #400]	@ (8002894 <main+0x500>)
 8002702:	f006 fff3 	bl	80096ec <iprintf>
  HAL_StatusTypeDef nop_result = CC1201_Nop(&test_status);
 8002706:	1c7b      	adds	r3, r7, #1
 8002708:	4618      	mov	r0, r3
 800270a:	f7fe f839 	bl	8000780 <CC1201_Nop>
 800270e:	4603      	mov	r3, r0
 8002710:	717b      	strb	r3, [r7, #5]
  
  printf("Test 3: NOP returned - HAL: %d, Status: 0x%02X\n\r", nop_result, test_status);
 8002712:	797b      	ldrb	r3, [r7, #5]
 8002714:	787a      	ldrb	r2, [r7, #1]
 8002716:	4619      	mov	r1, r3
 8002718:	485f      	ldr	r0, [pc, #380]	@ (8002898 <main+0x504>)
 800271a:	f006 ffe7 	bl	80096ec <iprintf>
  
  if (nop_result == HAL_OK) {
 800271e:	797b      	ldrb	r3, [r7, #5]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d109      	bne.n	8002738 <main+0x3a4>
      printf("Basic CC1201 communication working!\n\r");
 8002724:	485d      	ldr	r0, [pc, #372]	@ (800289c <main+0x508>)
 8002726:	f006 ffe1 	bl	80096ec <iprintf>
      BSP_LED_Off(LED_RED);
 800272a:	2002      	movs	r0, #2
 800272c:	f000 fef2 	bl	8003514 <BSP_LED_Off>
      BSP_LED_On(LED_GREEN);
 8002730:	2000      	movs	r0, #0
 8002732:	f000 fec5 	bl	80034c0 <BSP_LED_On>
 8002736:	e008      	b.n	800274a <main+0x3b6>
  } else {
      printf("CC1201 communication failed!\n\r");
 8002738:	4859      	ldr	r0, [pc, #356]	@ (80028a0 <main+0x50c>)
 800273a:	f006 ffd7 	bl	80096ec <iprintf>
      BSP_LED_Off(LED_GREEN);
 800273e:	2000      	movs	r0, #0
 8002740:	f000 fee8 	bl	8003514 <BSP_LED_Off>
      BSP_LED_On(LED_RED);
 8002744:	2002      	movs	r0, #2
 8002746:	f000 febb 	bl	80034c0 <BSP_LED_On>

  /* USER CODE END BSP */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t last_test = 0;
 800274a:	2300      	movs	r3, #0
 800274c:	60fb      	str	r3, [r7, #12]
  uint32_t test_counter = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	60bb      	str	r3, [r7, #8]
  
  printf("\n🚀 STARTING SIMPLE CC1201 TEST MODE 🚀\n\r");
 8002752:	4854      	ldr	r0, [pc, #336]	@ (80028a4 <main+0x510>)
 8002754:	f006 ffca 	bl	80096ec <iprintf>
  
  while (1)
  {

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 8002758:	4b53      	ldr	r3, [pc, #332]	@ (80028a8 <main+0x514>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d11c      	bne.n	800279a <main+0x406>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 8002760:	4b51      	ldr	r3, [pc, #324]	@ (80028a8 <main+0x514>)
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle leds ---- */
      BSP_LED_Toggle(LED_GREEN);
 8002766:	2000      	movs	r0, #0
 8002768:	f000 fefe 	bl	8003568 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_YELLOW);
 800276c:	2001      	movs	r0, #1
 800276e:	f000 fefb 	bl	8003568 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_RED);
 8002772:	2002      	movs	r0, #2
 8002774:	f000 fef8 	bl	8003568 <BSP_LED_Toggle>

      /* ..... Perform your action ..... */
      printf("\n[BUTTON] Manual comprehensive test triggered...\n\r");
 8002778:	484c      	ldr	r0, [pc, #304]	@ (80028ac <main+0x518>)
 800277a:	f006 ffb7 	bl	80096ec <iprintf>
      Manual_SPI2_Pin_Config();  // Fix pins first
 800277e:	f000 fa53 	bl	8002c28 <Manual_SPI2_Pin_Config>
      CC1201_ChipDetectionTest();
 8002782:	f7fe fa07 	bl	8000b94 <CC1201_ChipDetectionTest>
      STM32_PinConfigDiagnostic();
 8002786:	f7fe fd3b 	bl	8001200 <STM32_PinConfigDiagnostic>
      CC1201_HardwareDiagnostic();
 800278a:	f7fe fb73 	bl	8000e74 <CC1201_HardwareDiagnostic>
      test_cc1201_communication_verification();
 800278e:	f7ff fbd7 	bl	8001f40 <test_cc1201_communication_verification>
      test_fifo_operations();
 8002792:	f7ff f8b1 	bl	80018f8 <test_fifo_operations>
      test_buffer_readwrite_verification();
 8002796:	f7ff fa2f 	bl	8001bf8 <test_buffer_readwrite_verification>
    }
    
    // Simple periodic test every 5 seconds  
    if (HAL_GetTick() - last_test > 5000) {
 800279a:	f001 f8f7 	bl	800398c <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d964      	bls.n	8002876 <main+0x4e2>
      printf("[%lu] Test %lu: ", HAL_GetTick(), ++test_counter);
 80027ac:	f001 f8ee 	bl	800398c <HAL_GetTick>
 80027b0:	4601      	mov	r1, r0
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	3301      	adds	r3, #1
 80027b6:	60bb      	str	r3, [r7, #8]
 80027b8:	68ba      	ldr	r2, [r7, #8]
 80027ba:	483d      	ldr	r0, [pc, #244]	@ (80028b0 <main+0x51c>)
 80027bc:	f006 ff96 	bl	80096ec <iprintf>
      
      uint8_t status_byte = 0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	703b      	strb	r3, [r7, #0]
      HAL_StatusTypeDef hal_status = CC1201_Nop(&status_byte);
 80027c4:	463b      	mov	r3, r7
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fd ffda 	bl	8000780 <CC1201_Nop>
 80027cc:	4603      	mov	r3, r0
 80027ce:	713b      	strb	r3, [r7, #4]
      
      if (hal_status == HAL_OK) {
 80027d0:	793b      	ldrb	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d141      	bne.n	800285a <main+0x4c6>
        printf("OK ");
 80027d6:	4837      	ldr	r0, [pc, #220]	@ (80028b4 <main+0x520>)
 80027d8:	f006 ff88 	bl	80096ec <iprintf>
        print_cc1201_status(status_byte, "NOP_STATUS");
 80027dc:	783b      	ldrb	r3, [r7, #0]
 80027de:	4936      	ldr	r1, [pc, #216]	@ (80028b8 <main+0x524>)
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff f81b 	bl	800181c <print_cc1201_status>
        BSP_LED_On(LED_GREEN);
 80027e6:	2000      	movs	r0, #0
 80027e8:	f000 fe6a 	bl	80034c0 <BSP_LED_On>
        BSP_LED_Off(LED_RED);
 80027ec:	2002      	movs	r0, #2
 80027ee:	f000 fe91 	bl	8003514 <BSP_LED_Off>
        
        // Every 10th test, run comprehensive buffer test
        if (test_counter % 10 == 0) {
 80027f2:	68b9      	ldr	r1, [r7, #8]
 80027f4:	4b31      	ldr	r3, [pc, #196]	@ (80028bc <main+0x528>)
 80027f6:	fba3 2301 	umull	r2, r3, r3, r1
 80027fa:	08da      	lsrs	r2, r3, #3
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	1aca      	subs	r2, r1, r3
 8002806:	2a00      	cmp	r2, #0
 8002808:	d104      	bne.n	8002814 <main+0x480>
          printf("\n[PERIODIC] Running comprehensive buffer test...\n\r");
 800280a:	482d      	ldr	r0, [pc, #180]	@ (80028c0 <main+0x52c>)
 800280c:	f006 ff6e 	bl	80096ec <iprintf>
          test_fifo_operations();
 8002810:	f7ff f872 	bl	80018f8 <test_fifo_operations>
        }
        
        // Every 20th test, run communication verification
        if (test_counter % 20 == 0) {
 8002814:	68b9      	ldr	r1, [r7, #8]
 8002816:	4b29      	ldr	r3, [pc, #164]	@ (80028bc <main+0x528>)
 8002818:	fba3 2301 	umull	r2, r3, r3, r1
 800281c:	091a      	lsrs	r2, r3, #4
 800281e:	4613      	mov	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	1aca      	subs	r2, r1, r3
 8002828:	2a00      	cmp	r2, #0
 800282a:	d104      	bne.n	8002836 <main+0x4a2>
          printf("\n[PERIODIC] Running communication verification...\n\r");
 800282c:	4825      	ldr	r0, [pc, #148]	@ (80028c4 <main+0x530>)
 800282e:	f006 ff5d 	bl	80096ec <iprintf>
          test_cc1201_communication_verification();
 8002832:	f7ff fb85 	bl	8001f40 <test_cc1201_communication_verification>
        }
        
        // Every 30th test, run hardware diagnostic
        if (test_counter % 30 == 0) {
 8002836:	68b9      	ldr	r1, [r7, #8]
 8002838:	4b23      	ldr	r3, [pc, #140]	@ (80028c8 <main+0x534>)
 800283a:	fba3 2301 	umull	r2, r3, r3, r1
 800283e:	091a      	lsrs	r2, r3, #4
 8002840:	4613      	mov	r3, r2
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	1a9b      	subs	r3, r3, r2
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	1aca      	subs	r2, r1, r3
 800284a:	2a00      	cmp	r2, #0
 800284c:	d110      	bne.n	8002870 <main+0x4dc>
          printf("\n[PERIODIC] Running hardware diagnostic...\n\r");
 800284e:	481f      	ldr	r0, [pc, #124]	@ (80028cc <main+0x538>)
 8002850:	f006 ff4c 	bl	80096ec <iprintf>
          CC1201_HardwareDiagnostic();
 8002854:	f7fe fb0e 	bl	8000e74 <CC1201_HardwareDiagnostic>
 8002858:	e00a      	b.n	8002870 <main+0x4dc>
        }
      } else {
        printf("FAILED - HAL: %d\n\r", hal_status);
 800285a:	793b      	ldrb	r3, [r7, #4]
 800285c:	4619      	mov	r1, r3
 800285e:	481c      	ldr	r0, [pc, #112]	@ (80028d0 <main+0x53c>)
 8002860:	f006 ff44 	bl	80096ec <iprintf>
        BSP_LED_Off(LED_GREEN);
 8002864:	2000      	movs	r0, #0
 8002866:	f000 fe55 	bl	8003514 <BSP_LED_Off>
        BSP_LED_On(LED_RED);
 800286a:	2002      	movs	r0, #2
 800286c:	f000 fe28 	bl	80034c0 <BSP_LED_On>
      }
      
      last_test = HAL_GetTick();
 8002870:	f001 f88c 	bl	800398c <HAL_GetTick>
 8002874:	60f8      	str	r0, [r7, #12]
    }
    
    HAL_Delay(100);
 8002876:	2064      	movs	r0, #100	@ 0x64
 8002878:	f001 f894 	bl	80039a4 <HAL_Delay>
    if (BspButtonState == BUTTON_PRESSED)
 800287c:	e76c      	b.n	8002758 <main+0x3c4>
 800287e:	bf00      	nop
 8002880:	0800d890 	.word	0x0800d890
 8002884:	0800d8b4 	.word	0x0800d8b4
 8002888:	0800d8c8 	.word	0x0800d8c8
 800288c:	0800d8dc 	.word	0x0800d8dc
 8002890:	0800d8ec 	.word	0x0800d8ec
 8002894:	0800d918 	.word	0x0800d918
 8002898:	0800d940 	.word	0x0800d940
 800289c:	0800d974 	.word	0x0800d974
 80028a0:	0800d99c 	.word	0x0800d99c
 80028a4:	0800d9bc 	.word	0x0800d9bc
 80028a8:	240000b4 	.word	0x240000b4
 80028ac:	0800d9ec 	.word	0x0800d9ec
 80028b0:	0800da20 	.word	0x0800da20
 80028b4:	0800da34 	.word	0x0800da34
 80028b8:	0800da38 	.word	0x0800da38
 80028bc:	cccccccd 	.word	0xcccccccd
 80028c0:	0800da44 	.word	0x0800da44
 80028c4:	0800da78 	.word	0x0800da78
 80028c8:	88888889 	.word	0x88888889
 80028cc:	0800daac 	.word	0x0800daac
 80028d0:	0800dadc 	.word	0x0800dadc

080028d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b09c      	sub	sp, #112	@ 0x70
 80028d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028de:	224c      	movs	r2, #76	@ 0x4c
 80028e0:	2100      	movs	r1, #0
 80028e2:	4618      	mov	r0, r3
 80028e4:	f006 ff57 	bl	8009796 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028e8:	1d3b      	adds	r3, r7, #4
 80028ea:	2220      	movs	r2, #32
 80028ec:	2100      	movs	r1, #0
 80028ee:	4618      	mov	r0, r3
 80028f0:	f006 ff51 	bl	8009796 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80028f4:	2002      	movs	r0, #2
 80028f6:	f001 ffef 	bl	80048d8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80028fa:	2300      	movs	r3, #0
 80028fc:	603b      	str	r3, [r7, #0]
 80028fe:	4b32      	ldr	r3, [pc, #200]	@ (80029c8 <SystemClock_Config+0xf4>)
 8002900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002902:	4a31      	ldr	r2, [pc, #196]	@ (80029c8 <SystemClock_Config+0xf4>)
 8002904:	f023 0301 	bic.w	r3, r3, #1
 8002908:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800290a:	4b2f      	ldr	r3, [pc, #188]	@ (80029c8 <SystemClock_Config+0xf4>)
 800290c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	603b      	str	r3, [r7, #0]
 8002914:	4b2d      	ldr	r3, [pc, #180]	@ (80029cc <SystemClock_Config+0xf8>)
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800291c:	4a2b      	ldr	r2, [pc, #172]	@ (80029cc <SystemClock_Config+0xf8>)
 800291e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002922:	6193      	str	r3, [r2, #24]
 8002924:	4b29      	ldr	r3, [pc, #164]	@ (80029cc <SystemClock_Config+0xf8>)
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800292c:	603b      	str	r3, [r7, #0]
 800292e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002930:	bf00      	nop
 8002932:	4b26      	ldr	r3, [pc, #152]	@ (80029cc <SystemClock_Config+0xf8>)
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800293a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800293e:	d1f8      	bne.n	8002932 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002940:	2302      	movs	r3, #2
 8002942:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002944:	2301      	movs	r3, #1
 8002946:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002948:	2340      	movs	r3, #64	@ 0x40
 800294a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800294c:	2302      	movs	r3, #2
 800294e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002950:	2300      	movs	r3, #0
 8002952:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002954:	2304      	movs	r3, #4
 8002956:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002958:	230a      	movs	r3, #10
 800295a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800295c:	2302      	movs	r3, #2
 800295e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002960:	2302      	movs	r3, #2
 8002962:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002964:	2302      	movs	r3, #2
 8002966:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002968:	230c      	movs	r3, #12
 800296a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800296c:	2302      	movs	r3, #2
 800296e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002974:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002978:	4618      	mov	r0, r3
 800297a:	f001 ffe7 	bl	800494c <HAL_RCC_OscConfig>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002984:	f000 f94a 	bl	8002c1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002988:	233f      	movs	r3, #63	@ 0x3f
 800298a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800298c:	2300      	movs	r3, #0
 800298e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002990:	2300      	movs	r3, #0
 8002992:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002994:	2300      	movs	r3, #0
 8002996:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800299c:	2300      	movs	r3, #0
 800299e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80029a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029a4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80029a6:	2300      	movs	r3, #0
 80029a8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80029aa:	1d3b      	adds	r3, r7, #4
 80029ac:	2101      	movs	r1, #1
 80029ae:	4618      	mov	r0, r3
 80029b0:	f002 fc26 	bl	8005200 <HAL_RCC_ClockConfig>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <SystemClock_Config+0xea>
  {
    Error_Handler();
 80029ba:	f000 f92f 	bl	8002c1c <Error_Handler>
  }
}
 80029be:	bf00      	nop
 80029c0:	3770      	adds	r7, #112	@ 0x70
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	58000400 	.word	0x58000400
 80029cc:	58024800 	.word	0x58024800

080029d0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80029d4:	4b27      	ldr	r3, [pc, #156]	@ (8002a74 <MX_SPI2_Init+0xa4>)
 80029d6:	4a28      	ldr	r2, [pc, #160]	@ (8002a78 <MX_SPI2_Init+0xa8>)
 80029d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80029da:	4b26      	ldr	r3, [pc, #152]	@ (8002a74 <MX_SPI2_Init+0xa4>)
 80029dc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80029e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80029e2:	4b24      	ldr	r3, [pc, #144]	@ (8002a74 <MX_SPI2_Init+0xa4>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80029e8:	4b22      	ldr	r3, [pc, #136]	@ (8002a74 <MX_SPI2_Init+0xa4>)
 80029ea:	2203      	movs	r2, #3
 80029ec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029ee:	4b21      	ldr	r3, [pc, #132]	@ (8002a74 <MX_SPI2_Init+0xa4>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002a74 <MX_SPI2_Init+0xa4>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80029fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002a74 <MX_SPI2_Init+0xa4>)
 80029fc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002a00:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a02:	4b1c      	ldr	r3, [pc, #112]	@ (8002a74 <MX_SPI2_Init+0xa4>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a08:	4b1a      	ldr	r3, [pc, #104]	@ (8002a74 <MX_SPI2_Init+0xa4>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a0e:	4b19      	ldr	r3, [pc, #100]	@ (8002a74 <MX_SPI2_Init+0xa4>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a14:	4b17      	ldr	r3, [pc, #92]	@ (8002a74 <MX_SPI2_Init+0xa4>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002a1a:	4b16      	ldr	r3, [pc, #88]	@ (8002a74 <MX_SPI2_Init+0xa4>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a20:	4b14      	ldr	r3, [pc, #80]	@ (8002a74 <MX_SPI2_Init+0xa4>)
 8002a22:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002a26:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002a28:	4b12      	ldr	r3, [pc, #72]	@ (8002a74 <MX_SPI2_Init+0xa4>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002a2e:	4b11      	ldr	r3, [pc, #68]	@ (8002a74 <MX_SPI2_Init+0xa4>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002a34:	4b0f      	ldr	r3, [pc, #60]	@ (8002a74 <MX_SPI2_Init+0xa4>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002a74 <MX_SPI2_Init+0xa4>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002a40:	4b0c      	ldr	r3, [pc, #48]	@ (8002a74 <MX_SPI2_Init+0xa4>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002a46:	4b0b      	ldr	r3, [pc, #44]	@ (8002a74 <MX_SPI2_Init+0xa4>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002a4c:	4b09      	ldr	r3, [pc, #36]	@ (8002a74 <MX_SPI2_Init+0xa4>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002a52:	4b08      	ldr	r3, [pc, #32]	@ (8002a74 <MX_SPI2_Init+0xa4>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002a58:	4b06      	ldr	r3, [pc, #24]	@ (8002a74 <MX_SPI2_Init+0xa4>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002a5e:	4805      	ldr	r0, [pc, #20]	@ (8002a74 <MX_SPI2_Init+0xa4>)
 8002a60:	f004 fd86 	bl	8007570 <HAL_SPI_Init>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8002a6a:	f000 f8d7 	bl	8002c1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002a6e:	bf00      	nop
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	240000b8 	.word	0x240000b8
 8002a78:	40003800 	.word	0x40003800

08002a7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08c      	sub	sp, #48	@ 0x30
 8002a80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a82:	f107 031c 	add.w	r3, r7, #28
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	605a      	str	r2, [r3, #4]
 8002a8c:	609a      	str	r2, [r3, #8]
 8002a8e:	60da      	str	r2, [r3, #12]
 8002a90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a92:	4b3f      	ldr	r3, [pc, #252]	@ (8002b90 <MX_GPIO_Init+0x114>)
 8002a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a98:	4a3d      	ldr	r2, [pc, #244]	@ (8002b90 <MX_GPIO_Init+0x114>)
 8002a9a:	f043 0310 	orr.w	r3, r3, #16
 8002a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002aa2:	4b3b      	ldr	r3, [pc, #236]	@ (8002b90 <MX_GPIO_Init+0x114>)
 8002aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002aa8:	f003 0310 	and.w	r3, r3, #16
 8002aac:	61bb      	str	r3, [r7, #24]
 8002aae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ab0:	4b37      	ldr	r3, [pc, #220]	@ (8002b90 <MX_GPIO_Init+0x114>)
 8002ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ab6:	4a36      	ldr	r2, [pc, #216]	@ (8002b90 <MX_GPIO_Init+0x114>)
 8002ab8:	f043 0304 	orr.w	r3, r3, #4
 8002abc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ac0:	4b33      	ldr	r3, [pc, #204]	@ (8002b90 <MX_GPIO_Init+0x114>)
 8002ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ace:	4b30      	ldr	r3, [pc, #192]	@ (8002b90 <MX_GPIO_Init+0x114>)
 8002ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ad4:	4a2e      	ldr	r2, [pc, #184]	@ (8002b90 <MX_GPIO_Init+0x114>)
 8002ad6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ada:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002ade:	4b2c      	ldr	r3, [pc, #176]	@ (8002b90 <MX_GPIO_Init+0x114>)
 8002ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ae4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aec:	4b28      	ldr	r3, [pc, #160]	@ (8002b90 <MX_GPIO_Init+0x114>)
 8002aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002af2:	4a27      	ldr	r2, [pc, #156]	@ (8002b90 <MX_GPIO_Init+0x114>)
 8002af4:	f043 0302 	orr.w	r3, r3, #2
 8002af8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002afc:	4b24      	ldr	r3, [pc, #144]	@ (8002b90 <MX_GPIO_Init+0x114>)
 8002afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b0a:	4b21      	ldr	r3, [pc, #132]	@ (8002b90 <MX_GPIO_Init+0x114>)
 8002b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b10:	4a1f      	ldr	r2, [pc, #124]	@ (8002b90 <MX_GPIO_Init+0x114>)
 8002b12:	f043 0301 	orr.w	r3, r3, #1
 8002b16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8002b90 <MX_GPIO_Init+0x114>)
 8002b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b28:	4b19      	ldr	r3, [pc, #100]	@ (8002b90 <MX_GPIO_Init+0x114>)
 8002b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b2e:	4a18      	ldr	r2, [pc, #96]	@ (8002b90 <MX_GPIO_Init+0x114>)
 8002b30:	f043 0308 	orr.w	r3, r3, #8
 8002b34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002b38:	4b15      	ldr	r3, [pc, #84]	@ (8002b90 <MX_GPIO_Init+0x114>)
 8002b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	607b      	str	r3, [r7, #4]
 8002b44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8002b46:	2200      	movs	r2, #0
 8002b48:	2110      	movs	r1, #16
 8002b4a:	4812      	ldr	r0, [pc, #72]	@ (8002b94 <MX_GPIO_Init+0x118>)
 8002b4c:	f001 fe90 	bl	8004870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b50:	2310      	movs	r3, #16
 8002b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b54:	2301      	movs	r3, #1
 8002b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b60:	f107 031c 	add.w	r3, r7, #28
 8002b64:	4619      	mov	r1, r3
 8002b66:	480b      	ldr	r0, [pc, #44]	@ (8002b94 <MX_GPIO_Init+0x118>)
 8002b68:	f001 fbb0 	bl	80042cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b6c:	2310      	movs	r3, #16
 8002b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b70:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002b74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b7a:	f107 031c 	add.w	r3, r7, #28
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4805      	ldr	r0, [pc, #20]	@ (8002b98 <MX_GPIO_Init+0x11c>)
 8002b82:	f001 fba3 	bl	80042cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b86:	bf00      	nop
 8002b88:	3730      	adds	r7, #48	@ 0x30
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	58024400 	.word	0x58024400
 8002b94:	58021000 	.word	0x58021000
 8002b98:	58020c00 	.word	0x58020c00

08002b9c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002ba2:	463b      	mov	r3, r7
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	605a      	str	r2, [r3, #4]
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002bae:	f001 f86b 	bl	8003c88 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002bbe:	231f      	movs	r3, #31
 8002bc0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8002bc2:	2387      	movs	r3, #135	@ 0x87
 8002bc4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002bde:	463b      	mov	r3, r7
 8002be0:	4618      	mov	r0, r3
 8002be2:	f001 f889 	bl	8003cf8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002be6:	2004      	movs	r0, #4
 8002be8:	f001 f866 	bl	8003cb8 <HAL_MPU_Enable>

}
 8002bec:	bf00      	nop
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d102      	bne.n	8002c0a <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8002c04:	4b04      	ldr	r3, [pc, #16]	@ (8002c18 <BSP_PB_Callback+0x24>)
 8002c06:	2201      	movs	r2, #1
 8002c08:	601a      	str	r2, [r3, #0]
  }
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	240000b4 	.word	0x240000b4

08002c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c20:	b672      	cpsid	i
}
 8002c22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c24:	bf00      	nop
 8002c26:	e7fd      	b.n	8002c24 <Error_Handler+0x8>

08002c28 <Manual_SPI2_Pin_Config>:

/**
 * @brief Manually configure SPI2 pins with correct alternate function
 * This fixes the issue where pins are in ANALOG mode instead of AF mode
 */
void Manual_SPI2_Pin_Config(void) {
 8002c28:	b590      	push	{r4, r7, lr}
 8002c2a:	b091      	sub	sp, #68	@ 0x44
 8002c2c:	af00      	add	r7, sp, #0
    printf("\n=== MANUAL SPI2 PIN CONFIGURATION ===\n\r");
 8002c2e:	488d      	ldr	r0, [pc, #564]	@ (8002e64 <Manual_SPI2_Pin_Config+0x23c>)
 8002c30:	f006 fd5c 	bl	80096ec <iprintf>
    
    // Enable GPIO clocks (should already be enabled, but make sure)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c34:	4b8c      	ldr	r3, [pc, #560]	@ (8002e68 <Manual_SPI2_Pin_Config+0x240>)
 8002c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c3a:	4a8b      	ldr	r2, [pc, #556]	@ (8002e68 <Manual_SPI2_Pin_Config+0x240>)
 8002c3c:	f043 0301 	orr.w	r3, r3, #1
 8002c40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c44:	4b88      	ldr	r3, [pc, #544]	@ (8002e68 <Manual_SPI2_Pin_Config+0x240>)
 8002c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c52:	4b85      	ldr	r3, [pc, #532]	@ (8002e68 <Manual_SPI2_Pin_Config+0x240>)
 8002c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c58:	4a83      	ldr	r2, [pc, #524]	@ (8002e68 <Manual_SPI2_Pin_Config+0x240>)
 8002c5a:	f043 0302 	orr.w	r3, r3, #2
 8002c5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c62:	4b81      	ldr	r3, [pc, #516]	@ (8002e68 <Manual_SPI2_Pin_Config+0x240>)
 8002c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	60bb      	str	r3, [r7, #8]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c70:	4b7d      	ldr	r3, [pc, #500]	@ (8002e68 <Manual_SPI2_Pin_Config+0x240>)
 8002c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c76:	4a7c      	ldr	r2, [pc, #496]	@ (8002e68 <Manual_SPI2_Pin_Config+0x240>)
 8002c78:	f043 0310 	orr.w	r3, r3, #16
 8002c7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c80:	4b79      	ldr	r3, [pc, #484]	@ (8002e68 <Manual_SPI2_Pin_Config+0x240>)
 8002c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c86:	f003 0310 	and.w	r3, r3, #16
 8002c8a:	607b      	str	r3, [r7, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]
    
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c8e:	f107 0310 	add.w	r3, r7, #16
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	605a      	str	r2, [r3, #4]
 8002c98:	609a      	str	r2, [r3, #8]
 8002c9a:	60da      	str	r2, [r3, #12]
 8002c9c:	611a      	str	r2, [r3, #16]
    
    // 1. Configure PA6 as SPI2_MISO
    printf("1. Configuring PA6 (MISO) for SPI2_AF5...\n\r");
 8002c9e:	4873      	ldr	r0, [pc, #460]	@ (8002e6c <Manual_SPI2_Pin_Config+0x244>)
 8002ca0:	f006 fd24 	bl	80096ec <iprintf>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ca4:	2340      	movs	r3, #64	@ 0x40
 8002ca6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;          // Alternate Function Push-Pull
 8002ca8:	2302      	movs	r3, #2
 8002caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;              // No pull-up/down
 8002cac:	2300      	movs	r3, #0
 8002cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;    // High speed
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;       // AF5 = SPI2
 8002cb4:	2305      	movs	r3, #5
 8002cb6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb8:	f107 0310 	add.w	r3, r7, #16
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	486c      	ldr	r0, [pc, #432]	@ (8002e70 <Manual_SPI2_Pin_Config+0x248>)
 8002cc0:	f001 fb04 	bl	80042cc <HAL_GPIO_Init>
    
    // Verify PA6 configuration
    uint32_t pa6_mode = (GPIOA->MODER >> 12) & 0x3;
 8002cc4:	4b6a      	ldr	r3, [pc, #424]	@ (8002e70 <Manual_SPI2_Pin_Config+0x248>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	0b1b      	lsrs	r3, r3, #12
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
    uint32_t pa6_af = (GPIOA->AFR[0] >> 24) & 0xF;
 8002cd0:	4b67      	ldr	r3, [pc, #412]	@ (8002e70 <Manual_SPI2_Pin_Config+0x248>)
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	0e1b      	lsrs	r3, r3, #24
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	63bb      	str	r3, [r7, #56]	@ 0x38
    printf("    PA6 after config: MODE=%lu (should be 2), AF=%lu (should be 5)\n\r", pa6_mode, pa6_af);
 8002cdc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002cde:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002ce0:	4864      	ldr	r0, [pc, #400]	@ (8002e74 <Manual_SPI2_Pin_Config+0x24c>)
 8002ce2:	f006 fd03 	bl	80096ec <iprintf>
    
    // 2. Configure PA10 as SPI2_MOSI  
    printf("2. Configuring PA10 (MOSI) for SPI2_AF5...\n\r");
 8002ce6:	4864      	ldr	r0, [pc, #400]	@ (8002e78 <Manual_SPI2_Pin_Config+0x250>)
 8002ce8:	f006 fd00 	bl	80096ec <iprintf>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002cec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002cf0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;          // Alternate Function Push-Pull
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;              // No pull-up/down
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;    // High speed
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;       // AF5 = SPI2
 8002cfe:	2305      	movs	r3, #5
 8002d00:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d02:	f107 0310 	add.w	r3, r7, #16
 8002d06:	4619      	mov	r1, r3
 8002d08:	4859      	ldr	r0, [pc, #356]	@ (8002e70 <Manual_SPI2_Pin_Config+0x248>)
 8002d0a:	f001 fadf 	bl	80042cc <HAL_GPIO_Init>
    
    // Verify PA10 configuration
    uint32_t pa10_mode = (GPIOA->MODER >> 20) & 0x3;
 8002d0e:	4b58      	ldr	r3, [pc, #352]	@ (8002e70 <Manual_SPI2_Pin_Config+0x248>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	0d1b      	lsrs	r3, r3, #20
 8002d14:	f003 0303 	and.w	r3, r3, #3
 8002d18:	637b      	str	r3, [r7, #52]	@ 0x34
    uint32_t pa10_af = (GPIOA->AFR[1] >> 8) & 0xF;
 8002d1a:	4b55      	ldr	r3, [pc, #340]	@ (8002e70 <Manual_SPI2_Pin_Config+0x248>)
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1e:	0a1b      	lsrs	r3, r3, #8
 8002d20:	f003 030f 	and.w	r3, r3, #15
 8002d24:	633b      	str	r3, [r7, #48]	@ 0x30
    printf("    PA10 after config: MODE=%lu (should be 2), AF=%lu (should be 5)\n\r", pa10_mode, pa10_af);
 8002d26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d28:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002d2a:	4854      	ldr	r0, [pc, #336]	@ (8002e7c <Manual_SPI2_Pin_Config+0x254>)
 8002d2c:	f006 fcde 	bl	80096ec <iprintf>
    
    // 3. Configure PB10 as SPI2_SCK
    printf("3. Configuring PB10 (SCK) for SPI2_AF5...\n\r");
 8002d30:	4853      	ldr	r0, [pc, #332]	@ (8002e80 <Manual_SPI2_Pin_Config+0x258>)
 8002d32:	f006 fcdb 	bl	80096ec <iprintf>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;          // Alternate Function Push-Pull
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;              // No pull-up/down
 8002d40:	2300      	movs	r3, #0
 8002d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;    // High speed
 8002d44:	2302      	movs	r3, #2
 8002d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;       // AF5 = SPI2
 8002d48:	2305      	movs	r3, #5
 8002d4a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d4c:	f107 0310 	add.w	r3, r7, #16
 8002d50:	4619      	mov	r1, r3
 8002d52:	484c      	ldr	r0, [pc, #304]	@ (8002e84 <Manual_SPI2_Pin_Config+0x25c>)
 8002d54:	f001 faba 	bl	80042cc <HAL_GPIO_Init>
    
    // Verify PB10 configuration
    uint32_t pb10_mode = (GPIOB->MODER >> 20) & 0x3;
 8002d58:	4b4a      	ldr	r3, [pc, #296]	@ (8002e84 <Manual_SPI2_Pin_Config+0x25c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	0d1b      	lsrs	r3, r3, #20
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t pb10_af = (GPIOB->AFR[1] >> 8) & 0xF;
 8002d64:	4b47      	ldr	r3, [pc, #284]	@ (8002e84 <Manual_SPI2_Pin_Config+0x25c>)
 8002d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d68:	0a1b      	lsrs	r3, r3, #8
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    printf("    PB10 after config: MODE=%lu (should be 2), AF=%lu (should be 5)\n\r", pb10_mode, pb10_af);
 8002d70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d74:	4844      	ldr	r0, [pc, #272]	@ (8002e88 <Manual_SPI2_Pin_Config+0x260>)
 8002d76:	f006 fcb9 	bl	80096ec <iprintf>
    
    // 4. Verify PE4 (CS) is still correctly configured as GPIO output
    printf("4. Verifying PE4 (CS) configuration...\n\r");
 8002d7a:	4844      	ldr	r0, [pc, #272]	@ (8002e8c <Manual_SPI2_Pin_Config+0x264>)
 8002d7c:	f006 fcb6 	bl	80096ec <iprintf>
    uint32_t pe4_mode = (GPIOE->MODER >> 8) & 0x3;
 8002d80:	4b43      	ldr	r3, [pc, #268]	@ (8002e90 <Manual_SPI2_Pin_Config+0x268>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	0a1b      	lsrs	r3, r3, #8
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	627b      	str	r3, [r7, #36]	@ 0x24
    printf("    PE4 mode: %lu (should be 1 for GPIO output)\n\r", pe4_mode);
 8002d8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d8e:	4841      	ldr	r0, [pc, #260]	@ (8002e94 <Manual_SPI2_Pin_Config+0x26c>)
 8002d90:	f006 fcac 	bl	80096ec <iprintf>
    
    // Make sure CS starts HIGH (inactive)
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8002d94:	2201      	movs	r2, #1
 8002d96:	2110      	movs	r1, #16
 8002d98:	483d      	ldr	r0, [pc, #244]	@ (8002e90 <Manual_SPI2_Pin_Config+0x268>)
 8002d9a:	f001 fd69 	bl	8004870 <HAL_GPIO_WritePin>
    printf("    PE4 set to HIGH (CS inactive)\n\r");
 8002d9e:	483e      	ldr	r0, [pc, #248]	@ (8002e98 <Manual_SPI2_Pin_Config+0x270>)
 8002da0:	f006 fca4 	bl	80096ec <iprintf>
    
    // 5. Final verification
    printf("\n5. FINAL PIN STATE VERIFICATION:\n\r");
 8002da4:	483d      	ldr	r0, [pc, #244]	@ (8002e9c <Manual_SPI2_Pin_Config+0x274>)
 8002da6:	f006 fca1 	bl	80096ec <iprintf>
    printf("    PA6 (MISO): MODE=%lu, STATE=%s\n\r", 
           (GPIOA->MODER >> 12) & 0x3,
 8002daa:	4b31      	ldr	r3, [pc, #196]	@ (8002e70 <Manual_SPI2_Pin_Config+0x248>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	0b1b      	lsrs	r3, r3, #12
    printf("    PA6 (MISO): MODE=%lu, STATE=%s\n\r", 
 8002db0:	f003 0403 	and.w	r4, r3, #3
           HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) ? "HIGH" : "LOW");
 8002db4:	2140      	movs	r1, #64	@ 0x40
 8002db6:	482e      	ldr	r0, [pc, #184]	@ (8002e70 <Manual_SPI2_Pin_Config+0x248>)
 8002db8:	f001 fd42 	bl	8004840 <HAL_GPIO_ReadPin>
 8002dbc:	4603      	mov	r3, r0
    printf("    PA6 (MISO): MODE=%lu, STATE=%s\n\r", 
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <Manual_SPI2_Pin_Config+0x19e>
 8002dc2:	4b37      	ldr	r3, [pc, #220]	@ (8002ea0 <Manual_SPI2_Pin_Config+0x278>)
 8002dc4:	e000      	b.n	8002dc8 <Manual_SPI2_Pin_Config+0x1a0>
 8002dc6:	4b37      	ldr	r3, [pc, #220]	@ (8002ea4 <Manual_SPI2_Pin_Config+0x27c>)
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4621      	mov	r1, r4
 8002dcc:	4836      	ldr	r0, [pc, #216]	@ (8002ea8 <Manual_SPI2_Pin_Config+0x280>)
 8002dce:	f006 fc8d 	bl	80096ec <iprintf>
    printf("    PA10 (MOSI): MODE=%lu, STATE=%s\n\r", 
           (GPIOA->MODER >> 20) & 0x3,
 8002dd2:	4b27      	ldr	r3, [pc, #156]	@ (8002e70 <Manual_SPI2_Pin_Config+0x248>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	0d1b      	lsrs	r3, r3, #20
    printf("    PA10 (MOSI): MODE=%lu, STATE=%s\n\r", 
 8002dd8:	f003 0403 	and.w	r4, r3, #3
           HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) ? "HIGH" : "LOW");
 8002ddc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002de0:	4823      	ldr	r0, [pc, #140]	@ (8002e70 <Manual_SPI2_Pin_Config+0x248>)
 8002de2:	f001 fd2d 	bl	8004840 <HAL_GPIO_ReadPin>
 8002de6:	4603      	mov	r3, r0
    printf("    PA10 (MOSI): MODE=%lu, STATE=%s\n\r", 
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <Manual_SPI2_Pin_Config+0x1c8>
 8002dec:	4b2c      	ldr	r3, [pc, #176]	@ (8002ea0 <Manual_SPI2_Pin_Config+0x278>)
 8002dee:	e000      	b.n	8002df2 <Manual_SPI2_Pin_Config+0x1ca>
 8002df0:	4b2c      	ldr	r3, [pc, #176]	@ (8002ea4 <Manual_SPI2_Pin_Config+0x27c>)
 8002df2:	461a      	mov	r2, r3
 8002df4:	4621      	mov	r1, r4
 8002df6:	482d      	ldr	r0, [pc, #180]	@ (8002eac <Manual_SPI2_Pin_Config+0x284>)
 8002df8:	f006 fc78 	bl	80096ec <iprintf>
    printf("    PB10 (SCK): MODE=%lu, STATE=%s\n\r", 
           (GPIOB->MODER >> 20) & 0x3,
 8002dfc:	4b21      	ldr	r3, [pc, #132]	@ (8002e84 <Manual_SPI2_Pin_Config+0x25c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	0d1b      	lsrs	r3, r3, #20
    printf("    PB10 (SCK): MODE=%lu, STATE=%s\n\r", 
 8002e02:	f003 0403 	and.w	r4, r3, #3
           HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) ? "HIGH" : "LOW");
 8002e06:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002e0a:	481e      	ldr	r0, [pc, #120]	@ (8002e84 <Manual_SPI2_Pin_Config+0x25c>)
 8002e0c:	f001 fd18 	bl	8004840 <HAL_GPIO_ReadPin>
 8002e10:	4603      	mov	r3, r0
    printf("    PB10 (SCK): MODE=%lu, STATE=%s\n\r", 
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <Manual_SPI2_Pin_Config+0x1f2>
 8002e16:	4b22      	ldr	r3, [pc, #136]	@ (8002ea0 <Manual_SPI2_Pin_Config+0x278>)
 8002e18:	e000      	b.n	8002e1c <Manual_SPI2_Pin_Config+0x1f4>
 8002e1a:	4b22      	ldr	r3, [pc, #136]	@ (8002ea4 <Manual_SPI2_Pin_Config+0x27c>)
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	4621      	mov	r1, r4
 8002e20:	4823      	ldr	r0, [pc, #140]	@ (8002eb0 <Manual_SPI2_Pin_Config+0x288>)
 8002e22:	f006 fc63 	bl	80096ec <iprintf>
    printf("    PE4 (CS): MODE=%lu, STATE=%s\n\r", 
           (GPIOE->MODER >> 8) & 0x3,
 8002e26:	4b1a      	ldr	r3, [pc, #104]	@ (8002e90 <Manual_SPI2_Pin_Config+0x268>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	0a1b      	lsrs	r3, r3, #8
    printf("    PE4 (CS): MODE=%lu, STATE=%s\n\r", 
 8002e2c:	f003 0403 	and.w	r4, r3, #3
           HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4) ? "HIGH" : "LOW");
 8002e30:	2110      	movs	r1, #16
 8002e32:	4817      	ldr	r0, [pc, #92]	@ (8002e90 <Manual_SPI2_Pin_Config+0x268>)
 8002e34:	f001 fd04 	bl	8004840 <HAL_GPIO_ReadPin>
 8002e38:	4603      	mov	r3, r0
    printf("    PE4 (CS): MODE=%lu, STATE=%s\n\r", 
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <Manual_SPI2_Pin_Config+0x21a>
 8002e3e:	4b18      	ldr	r3, [pc, #96]	@ (8002ea0 <Manual_SPI2_Pin_Config+0x278>)
 8002e40:	e000      	b.n	8002e44 <Manual_SPI2_Pin_Config+0x21c>
 8002e42:	4b18      	ldr	r3, [pc, #96]	@ (8002ea4 <Manual_SPI2_Pin_Config+0x27c>)
 8002e44:	461a      	mov	r2, r3
 8002e46:	4621      	mov	r1, r4
 8002e48:	481a      	ldr	r0, [pc, #104]	@ (8002eb4 <Manual_SPI2_Pin_Config+0x28c>)
 8002e4a:	f006 fc4f 	bl	80096ec <iprintf>
    
    printf("=== MANUAL PIN CONFIGURATION COMPLETE ===\n\r");
 8002e4e:	481a      	ldr	r0, [pc, #104]	@ (8002eb8 <Manual_SPI2_Pin_Config+0x290>)
 8002e50:	f006 fc4c 	bl	80096ec <iprintf>
    
    // Small delay to let pins settle
    HAL_Delay(10);
 8002e54:	200a      	movs	r0, #10
 8002e56:	f000 fda5 	bl	80039a4 <HAL_Delay>
}
 8002e5a:	bf00      	nop
 8002e5c:	3744      	adds	r7, #68	@ 0x44
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd90      	pop	{r4, r7, pc}
 8002e62:	bf00      	nop
 8002e64:	0800db70 	.word	0x0800db70
 8002e68:	58024400 	.word	0x58024400
 8002e6c:	0800db9c 	.word	0x0800db9c
 8002e70:	58020000 	.word	0x58020000
 8002e74:	0800dbc8 	.word	0x0800dbc8
 8002e78:	0800dc10 	.word	0x0800dc10
 8002e7c:	0800dc40 	.word	0x0800dc40
 8002e80:	0800dc88 	.word	0x0800dc88
 8002e84:	58020400 	.word	0x58020400
 8002e88:	0800dcb4 	.word	0x0800dcb4
 8002e8c:	0800dcfc 	.word	0x0800dcfc
 8002e90:	58021000 	.word	0x58021000
 8002e94:	0800dd28 	.word	0x0800dd28
 8002e98:	0800dd5c 	.word	0x0800dd5c
 8002e9c:	0800dd80 	.word	0x0800dd80
 8002ea0:	0800dda4 	.word	0x0800dda4
 8002ea4:	0800ddac 	.word	0x0800ddac
 8002ea8:	0800ddb0 	.word	0x0800ddb0
 8002eac:	0800ddd8 	.word	0x0800ddd8
 8002eb0:	0800de00 	.word	0x0800de00
 8002eb4:	0800de28 	.word	0x0800de28
 8002eb8:	0800de4c 	.word	0x0800de4c

08002ebc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8002eec <HAL_MspInit+0x30>)
 8002ec4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002ec8:	4a08      	ldr	r2, [pc, #32]	@ (8002eec <HAL_MspInit+0x30>)
 8002eca:	f043 0302 	orr.w	r3, r3, #2
 8002ece:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002ed2:	4b06      	ldr	r3, [pc, #24]	@ (8002eec <HAL_MspInit+0x30>)
 8002ed4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	607b      	str	r3, [r7, #4]
 8002ede:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	58024400 	.word	0x58024400

08002ef0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b0ba      	sub	sp, #232	@ 0xe8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	605a      	str	r2, [r3, #4]
 8002f02:	609a      	str	r2, [r3, #8]
 8002f04:	60da      	str	r2, [r3, #12]
 8002f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f08:	f107 0310 	add.w	r3, r7, #16
 8002f0c:	22c0      	movs	r2, #192	@ 0xc0
 8002f0e:	2100      	movs	r1, #0
 8002f10:	4618      	mov	r0, r3
 8002f12:	f006 fc40 	bl	8009796 <memset>
  if(hspi->Instance==SPI2)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a35      	ldr	r2, [pc, #212]	@ (8002ff0 <HAL_SPI_MspInit+0x100>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d163      	bne.n	8002fe8 <HAL_SPI_MspInit+0xf8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002f20:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002f24:	f04f 0300 	mov.w	r3, #0
 8002f28:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f30:	f107 0310 	add.w	r3, r7, #16
 8002f34:	4618      	mov	r0, r3
 8002f36:	f002 fcef 	bl	8005918 <HAL_RCCEx_PeriphCLKConfig>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002f40:	f7ff fe6c 	bl	8002c1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f44:	4b2b      	ldr	r3, [pc, #172]	@ (8002ff4 <HAL_SPI_MspInit+0x104>)
 8002f46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f4a:	4a2a      	ldr	r2, [pc, #168]	@ (8002ff4 <HAL_SPI_MspInit+0x104>)
 8002f4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f50:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002f54:	4b27      	ldr	r3, [pc, #156]	@ (8002ff4 <HAL_SPI_MspInit+0x104>)
 8002f56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002f5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f62:	4b24      	ldr	r3, [pc, #144]	@ (8002ff4 <HAL_SPI_MspInit+0x104>)
 8002f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f68:	4a22      	ldr	r2, [pc, #136]	@ (8002ff4 <HAL_SPI_MspInit+0x104>)
 8002f6a:	f043 0302 	orr.w	r3, r3, #2
 8002f6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f72:	4b20      	ldr	r3, [pc, #128]	@ (8002ff4 <HAL_SPI_MspInit+0x104>)
 8002f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002f80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f84:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f88:	2302      	movs	r3, #2
 8002f8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f94:	2300      	movs	r3, #0
 8002f96:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f9a:	2305      	movs	r3, #5
 8002f9c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fa0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4814      	ldr	r0, [pc, #80]	@ (8002ff8 <HAL_SPI_MspInit+0x108>)
 8002fa8:	f001 f990 	bl	80042cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002fac:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002fb0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002fc6:	2305      	movs	r3, #5
 8002fc8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fcc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4809      	ldr	r0, [pc, #36]	@ (8002ff8 <HAL_SPI_MspInit+0x108>)
 8002fd4:	f001 f97a 	bl	80042cc <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002fd8:	2200      	movs	r2, #0
 8002fda:	2100      	movs	r1, #0
 8002fdc:	2024      	movs	r0, #36	@ 0x24
 8002fde:	f000 fe10 	bl	8003c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002fe2:	2024      	movs	r0, #36	@ 0x24
 8002fe4:	f000 fe27 	bl	8003c36 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002fe8:	bf00      	nop
 8002fea:	37e8      	adds	r7, #232	@ 0xe8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40003800 	.word	0x40003800
 8002ff4:	58024400 	.word	0x58024400
 8002ff8:	58020400 	.word	0x58020400

08002ffc <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI2)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a0b      	ldr	r2, [pc, #44]	@ (8003038 <HAL_SPI_MspDeInit+0x3c>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d10f      	bne.n	800302e <HAL_SPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 800300e:	4b0b      	ldr	r3, [pc, #44]	@ (800303c <HAL_SPI_MspDeInit+0x40>)
 8003010:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003014:	4a09      	ldr	r2, [pc, #36]	@ (800303c <HAL_SPI_MspDeInit+0x40>)
 8003016:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800301a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 800301e:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8003022:	4807      	ldr	r0, [pc, #28]	@ (8003040 <HAL_SPI_MspDeInit+0x44>)
 8003024:	f001 fb02 	bl	800462c <HAL_GPIO_DeInit>

    /* SPI2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 8003028:	2024      	movs	r0, #36	@ 0x24
 800302a:	f000 fe12 	bl	8003c52 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 800302e:	bf00      	nop
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40003800 	.word	0x40003800
 800303c:	58024400 	.word	0x58024400
 8003040:	58020400 	.word	0x58020400

08003044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003048:	bf00      	nop
 800304a:	e7fd      	b.n	8003048 <NMI_Handler+0x4>

0800304c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003050:	bf00      	nop
 8003052:	e7fd      	b.n	8003050 <HardFault_Handler+0x4>

08003054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003058:	bf00      	nop
 800305a:	e7fd      	b.n	8003058 <MemManage_Handler+0x4>

0800305c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003060:	bf00      	nop
 8003062:	e7fd      	b.n	8003060 <BusFault_Handler+0x4>

08003064 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003068:	bf00      	nop
 800306a:	e7fd      	b.n	8003068 <UsageFault_Handler+0x4>

0800306c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003070:	bf00      	nop
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800307a:	b480      	push	{r7}
 800307c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800307e:	bf00      	nop
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800308c:	bf00      	nop
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800309a:	f000 fc63 	bl	8003964 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800309e:	bf00      	nop
 80030a0:	bd80      	pop	{r7, pc}
	...

080030a4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80030a8:	4802      	ldr	r0, [pc, #8]	@ (80030b4 <SPI2_IRQHandler+0x10>)
 80030aa:	f004 fee9 	bl	8007e80 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80030ae:	bf00      	nop
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	240000b8 	.word	0x240000b8

080030b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80030bc:	2000      	movs	r0, #0
 80030be:	f000 faef 	bl	80036a0 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80030c2:	bf00      	nop
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b086      	sub	sp, #24
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	60f8      	str	r0, [r7, #12]
 80030ce:	60b9      	str	r1, [r7, #8]
 80030d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030d2:	2300      	movs	r3, #0
 80030d4:	617b      	str	r3, [r7, #20]
 80030d6:	e00a      	b.n	80030ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80030d8:	f3af 8000 	nop.w
 80030dc:	4601      	mov	r1, r0
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	60ba      	str	r2, [r7, #8]
 80030e4:	b2ca      	uxtb	r2, r1
 80030e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	3301      	adds	r3, #1
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	dbf0      	blt.n	80030d8 <_read+0x12>
  }

  return len;
 80030f6:	687b      	ldr	r3, [r7, #4]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3718      	adds	r7, #24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	e009      	b.n	8003126 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	1c5a      	adds	r2, r3, #1
 8003116:	60ba      	str	r2, [r7, #8]
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f000 fb34 	bl	8003788 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	3301      	adds	r3, #1
 8003124:	617b      	str	r3, [r7, #20]
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	429a      	cmp	r2, r3
 800312c:	dbf1      	blt.n	8003112 <_write+0x12>
  }
  return len;
 800312e:	687b      	ldr	r3, [r7, #4]
}
 8003130:	4618      	mov	r0, r3
 8003132:	3718      	adds	r7, #24
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <_close>:

int _close(int file)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003140:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003144:	4618      	mov	r0, r3
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003160:	605a      	str	r2, [r3, #4]
  return 0;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <_isatty>:

int _isatty(int file)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003178:	2301      	movs	r3, #1
}
 800317a:	4618      	mov	r0, r3
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003186:	b480      	push	{r7}
 8003188:	b085      	sub	sp, #20
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3714      	adds	r7, #20
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031a8:	4a14      	ldr	r2, [pc, #80]	@ (80031fc <_sbrk+0x5c>)
 80031aa:	4b15      	ldr	r3, [pc, #84]	@ (8003200 <_sbrk+0x60>)
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031b4:	4b13      	ldr	r3, [pc, #76]	@ (8003204 <_sbrk+0x64>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d102      	bne.n	80031c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031bc:	4b11      	ldr	r3, [pc, #68]	@ (8003204 <_sbrk+0x64>)
 80031be:	4a12      	ldr	r2, [pc, #72]	@ (8003208 <_sbrk+0x68>)
 80031c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031c2:	4b10      	ldr	r3, [pc, #64]	@ (8003204 <_sbrk+0x64>)
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4413      	add	r3, r2
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d207      	bcs.n	80031e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031d0:	f006 fb30 	bl	8009834 <__errno>
 80031d4:	4603      	mov	r3, r0
 80031d6:	220c      	movs	r2, #12
 80031d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031da:	f04f 33ff 	mov.w	r3, #4294967295
 80031de:	e009      	b.n	80031f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031e0:	4b08      	ldr	r3, [pc, #32]	@ (8003204 <_sbrk+0x64>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031e6:	4b07      	ldr	r3, [pc, #28]	@ (8003204 <_sbrk+0x64>)
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4413      	add	r3, r2
 80031ee:	4a05      	ldr	r2, [pc, #20]	@ (8003204 <_sbrk+0x64>)
 80031f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031f2:	68fb      	ldr	r3, [r7, #12]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3718      	adds	r7, #24
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	24080000 	.word	0x24080000
 8003200:	00000400 	.word	0x00000400
 8003204:	24000140 	.word	0x24000140
 8003208:	24000338 	.word	0x24000338

0800320c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003210:	4b43      	ldr	r3, [pc, #268]	@ (8003320 <SystemInit+0x114>)
 8003212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003216:	4a42      	ldr	r2, [pc, #264]	@ (8003320 <SystemInit+0x114>)
 8003218:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800321c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003220:	4b40      	ldr	r3, [pc, #256]	@ (8003324 <SystemInit+0x118>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 030f 	and.w	r3, r3, #15
 8003228:	2b06      	cmp	r3, #6
 800322a:	d807      	bhi.n	800323c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800322c:	4b3d      	ldr	r3, [pc, #244]	@ (8003324 <SystemInit+0x118>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f023 030f 	bic.w	r3, r3, #15
 8003234:	4a3b      	ldr	r2, [pc, #236]	@ (8003324 <SystemInit+0x118>)
 8003236:	f043 0307 	orr.w	r3, r3, #7
 800323a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800323c:	4b3a      	ldr	r3, [pc, #232]	@ (8003328 <SystemInit+0x11c>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a39      	ldr	r2, [pc, #228]	@ (8003328 <SystemInit+0x11c>)
 8003242:	f043 0301 	orr.w	r3, r3, #1
 8003246:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003248:	4b37      	ldr	r3, [pc, #220]	@ (8003328 <SystemInit+0x11c>)
 800324a:	2200      	movs	r2, #0
 800324c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800324e:	4b36      	ldr	r3, [pc, #216]	@ (8003328 <SystemInit+0x11c>)
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	4935      	ldr	r1, [pc, #212]	@ (8003328 <SystemInit+0x11c>)
 8003254:	4b35      	ldr	r3, [pc, #212]	@ (800332c <SystemInit+0x120>)
 8003256:	4013      	ands	r3, r2
 8003258:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800325a:	4b32      	ldr	r3, [pc, #200]	@ (8003324 <SystemInit+0x118>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b00      	cmp	r3, #0
 8003264:	d007      	beq.n	8003276 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003266:	4b2f      	ldr	r3, [pc, #188]	@ (8003324 <SystemInit+0x118>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f023 030f 	bic.w	r3, r3, #15
 800326e:	4a2d      	ldr	r2, [pc, #180]	@ (8003324 <SystemInit+0x118>)
 8003270:	f043 0307 	orr.w	r3, r3, #7
 8003274:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003276:	4b2c      	ldr	r3, [pc, #176]	@ (8003328 <SystemInit+0x11c>)
 8003278:	2200      	movs	r2, #0
 800327a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800327c:	4b2a      	ldr	r3, [pc, #168]	@ (8003328 <SystemInit+0x11c>)
 800327e:	2200      	movs	r2, #0
 8003280:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003282:	4b29      	ldr	r3, [pc, #164]	@ (8003328 <SystemInit+0x11c>)
 8003284:	2200      	movs	r2, #0
 8003286:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003288:	4b27      	ldr	r3, [pc, #156]	@ (8003328 <SystemInit+0x11c>)
 800328a:	4a29      	ldr	r2, [pc, #164]	@ (8003330 <SystemInit+0x124>)
 800328c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800328e:	4b26      	ldr	r3, [pc, #152]	@ (8003328 <SystemInit+0x11c>)
 8003290:	4a28      	ldr	r2, [pc, #160]	@ (8003334 <SystemInit+0x128>)
 8003292:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003294:	4b24      	ldr	r3, [pc, #144]	@ (8003328 <SystemInit+0x11c>)
 8003296:	4a28      	ldr	r2, [pc, #160]	@ (8003338 <SystemInit+0x12c>)
 8003298:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800329a:	4b23      	ldr	r3, [pc, #140]	@ (8003328 <SystemInit+0x11c>)
 800329c:	2200      	movs	r2, #0
 800329e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80032a0:	4b21      	ldr	r3, [pc, #132]	@ (8003328 <SystemInit+0x11c>)
 80032a2:	4a25      	ldr	r2, [pc, #148]	@ (8003338 <SystemInit+0x12c>)
 80032a4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80032a6:	4b20      	ldr	r3, [pc, #128]	@ (8003328 <SystemInit+0x11c>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80032ac:	4b1e      	ldr	r3, [pc, #120]	@ (8003328 <SystemInit+0x11c>)
 80032ae:	4a22      	ldr	r2, [pc, #136]	@ (8003338 <SystemInit+0x12c>)
 80032b0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80032b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003328 <SystemInit+0x11c>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80032b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003328 <SystemInit+0x11c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a1a      	ldr	r2, [pc, #104]	@ (8003328 <SystemInit+0x11c>)
 80032be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80032c4:	4b18      	ldr	r3, [pc, #96]	@ (8003328 <SystemInit+0x11c>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80032ca:	4b1c      	ldr	r3, [pc, #112]	@ (800333c <SystemInit+0x130>)
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003340 <SystemInit+0x134>)
 80032d0:	4013      	ands	r3, r2
 80032d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032d6:	d202      	bcs.n	80032de <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80032d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003344 <SystemInit+0x138>)
 80032da:	2201      	movs	r2, #1
 80032dc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80032de:	4b12      	ldr	r3, [pc, #72]	@ (8003328 <SystemInit+0x11c>)
 80032e0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80032e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d113      	bne.n	8003314 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80032ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003328 <SystemInit+0x11c>)
 80032ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80032f2:	4a0d      	ldr	r2, [pc, #52]	@ (8003328 <SystemInit+0x11c>)
 80032f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80032f8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80032fc:	4b12      	ldr	r3, [pc, #72]	@ (8003348 <SystemInit+0x13c>)
 80032fe:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003302:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8003304:	4b08      	ldr	r3, [pc, #32]	@ (8003328 <SystemInit+0x11c>)
 8003306:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800330a:	4a07      	ldr	r2, [pc, #28]	@ (8003328 <SystemInit+0x11c>)
 800330c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003310:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003314:	bf00      	nop
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	e000ed00 	.word	0xe000ed00
 8003324:	52002000 	.word	0x52002000
 8003328:	58024400 	.word	0x58024400
 800332c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003330:	02020200 	.word	0x02020200
 8003334:	01ff0000 	.word	0x01ff0000
 8003338:	01010280 	.word	0x01010280
 800333c:	5c001000 	.word	0x5c001000
 8003340:	ffff0000 	.word	0xffff0000
 8003344:	51008108 	.word	0x51008108
 8003348:	52004000 	.word	0x52004000

0800334c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8003350:	4b09      	ldr	r3, [pc, #36]	@ (8003378 <ExitRun0Mode+0x2c>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	4a08      	ldr	r2, [pc, #32]	@ (8003378 <ExitRun0Mode+0x2c>)
 8003356:	f043 0302 	orr.w	r3, r3, #2
 800335a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800335c:	bf00      	nop
 800335e:	4b06      	ldr	r3, [pc, #24]	@ (8003378 <ExitRun0Mode+0x2c>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0f9      	beq.n	800335e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800336a:	bf00      	nop
 800336c:	bf00      	nop
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	58024800 	.word	0x58024800

0800337c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800337c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80033b8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8003380:	f7ff ffe4 	bl	800334c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003384:	f7ff ff42 	bl	800320c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003388:	480c      	ldr	r0, [pc, #48]	@ (80033bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800338a:	490d      	ldr	r1, [pc, #52]	@ (80033c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800338c:	4a0d      	ldr	r2, [pc, #52]	@ (80033c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800338e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003390:	e002      	b.n	8003398 <LoopCopyDataInit>

08003392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003396:	3304      	adds	r3, #4

08003398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800339a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800339c:	d3f9      	bcc.n	8003392 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800339e:	4a0a      	ldr	r2, [pc, #40]	@ (80033c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80033a0:	4c0a      	ldr	r4, [pc, #40]	@ (80033cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80033a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033a4:	e001      	b.n	80033aa <LoopFillZerobss>

080033a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033a8:	3204      	adds	r2, #4

080033aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033ac:	d3fb      	bcc.n	80033a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80033ae:	f006 fa47 	bl	8009840 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033b2:	f7fe ffef 	bl	8002394 <main>
  bx  lr
 80033b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80033b8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80033bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80033c0:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 80033c4:	0800def0 	.word	0x0800def0
  ldr r2, =_sbss
 80033c8:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 80033cc:	24000334 	.word	0x24000334

080033d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033d0:	e7fe      	b.n	80033d0 <ADC3_IRQHandler>
	...

080033d4 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08c      	sub	sp, #48	@ 0x30
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80033de:	2300      	movs	r3, #0
 80033e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80033e2:	79fb      	ldrb	r3, [r7, #7]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d009      	beq.n	80033fc <BSP_LED_Init+0x28>
 80033e8:	79fb      	ldrb	r3, [r7, #7]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d006      	beq.n	80033fc <BSP_LED_Init+0x28>
 80033ee:	79fb      	ldrb	r3, [r7, #7]
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d003      	beq.n	80033fc <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80033f4:	f06f 0301 	mvn.w	r3, #1
 80033f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033fa:	e055      	b.n	80034a8 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10f      	bne.n	8003422 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8003402:	4b2c      	ldr	r3, [pc, #176]	@ (80034b4 <BSP_LED_Init+0xe0>)
 8003404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003408:	4a2a      	ldr	r2, [pc, #168]	@ (80034b4 <BSP_LED_Init+0xe0>)
 800340a:	f043 0302 	orr.w	r3, r3, #2
 800340e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003412:	4b28      	ldr	r3, [pc, #160]	@ (80034b4 <BSP_LED_Init+0xe0>)
 8003414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	617b      	str	r3, [r7, #20]
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	e021      	b.n	8003466 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8003422:	79fb      	ldrb	r3, [r7, #7]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d10f      	bne.n	8003448 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8003428:	4b22      	ldr	r3, [pc, #136]	@ (80034b4 <BSP_LED_Init+0xe0>)
 800342a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800342e:	4a21      	ldr	r2, [pc, #132]	@ (80034b4 <BSP_LED_Init+0xe0>)
 8003430:	f043 0310 	orr.w	r3, r3, #16
 8003434:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003438:	4b1e      	ldr	r3, [pc, #120]	@ (80034b4 <BSP_LED_Init+0xe0>)
 800343a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800343e:	f003 0310 	and.w	r3, r3, #16
 8003442:	613b      	str	r3, [r7, #16]
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	e00e      	b.n	8003466 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8003448:	4b1a      	ldr	r3, [pc, #104]	@ (80034b4 <BSP_LED_Init+0xe0>)
 800344a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800344e:	4a19      	ldr	r2, [pc, #100]	@ (80034b4 <BSP_LED_Init+0xe0>)
 8003450:	f043 0302 	orr.w	r3, r3, #2
 8003454:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003458:	4b16      	ldr	r3, [pc, #88]	@ (80034b4 <BSP_LED_Init+0xe0>)
 800345a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8003466:	79fb      	ldrb	r3, [r7, #7]
 8003468:	4a13      	ldr	r2, [pc, #76]	@ (80034b8 <BSP_LED_Init+0xe4>)
 800346a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800346e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003470:	2301      	movs	r3, #1
 8003472:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8003474:	2300      	movs	r3, #0
 8003476:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003478:	2303      	movs	r3, #3
 800347a:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800347c:	79fb      	ldrb	r3, [r7, #7]
 800347e:	4a0f      	ldr	r2, [pc, #60]	@ (80034bc <BSP_LED_Init+0xe8>)
 8003480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003484:	f107 0218 	add.w	r2, r7, #24
 8003488:	4611      	mov	r1, r2
 800348a:	4618      	mov	r0, r3
 800348c:	f000 ff1e 	bl	80042cc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	4a0a      	ldr	r2, [pc, #40]	@ (80034bc <BSP_LED_Init+0xe8>)
 8003494:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003498:	79fb      	ldrb	r3, [r7, #7]
 800349a:	4a07      	ldr	r2, [pc, #28]	@ (80034b8 <BSP_LED_Init+0xe4>)
 800349c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034a0:	2200      	movs	r2, #0
 80034a2:	4619      	mov	r1, r3
 80034a4:	f001 f9e4 	bl	8004870 <HAL_GPIO_WritePin>
  }

  return ret;
 80034a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3730      	adds	r7, #48	@ 0x30
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	58024400 	.word	0x58024400
 80034b8:	0800de88 	.word	0x0800de88
 80034bc:	2400000c 	.word	0x2400000c

080034c0 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	4603      	mov	r3, r0
 80034c8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80034ca:	2300      	movs	r3, #0
 80034cc:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80034ce:	79fb      	ldrb	r3, [r7, #7]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d009      	beq.n	80034e8 <BSP_LED_On+0x28>
 80034d4:	79fb      	ldrb	r3, [r7, #7]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d006      	beq.n	80034e8 <BSP_LED_On+0x28>
 80034da:	79fb      	ldrb	r3, [r7, #7]
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d003      	beq.n	80034e8 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80034e0:	f06f 0301 	mvn.w	r3, #1
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	e00b      	b.n	8003500 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80034e8:	79fb      	ldrb	r3, [r7, #7]
 80034ea:	4a08      	ldr	r2, [pc, #32]	@ (800350c <BSP_LED_On+0x4c>)
 80034ec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80034f0:	79fb      	ldrb	r3, [r7, #7]
 80034f2:	4a07      	ldr	r2, [pc, #28]	@ (8003510 <BSP_LED_On+0x50>)
 80034f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034f8:	2201      	movs	r2, #1
 80034fa:	4619      	mov	r1, r3
 80034fc:	f001 f9b8 	bl	8004870 <HAL_GPIO_WritePin>
  }

  return ret;
 8003500:	68fb      	ldr	r3, [r7, #12]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	2400000c 	.word	0x2400000c
 8003510:	0800de88 	.word	0x0800de88

08003514 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	4603      	mov	r3, r0
 800351c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800351e:	2300      	movs	r3, #0
 8003520:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8003522:	79fb      	ldrb	r3, [r7, #7]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d009      	beq.n	800353c <BSP_LED_Off+0x28>
 8003528:	79fb      	ldrb	r3, [r7, #7]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d006      	beq.n	800353c <BSP_LED_Off+0x28>
 800352e:	79fb      	ldrb	r3, [r7, #7]
 8003530:	2b02      	cmp	r3, #2
 8003532:	d003      	beq.n	800353c <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003534:	f06f 0301 	mvn.w	r3, #1
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	e00b      	b.n	8003554 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800353c:	79fb      	ldrb	r3, [r7, #7]
 800353e:	4a08      	ldr	r2, [pc, #32]	@ (8003560 <BSP_LED_Off+0x4c>)
 8003540:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003544:	79fb      	ldrb	r3, [r7, #7]
 8003546:	4a07      	ldr	r2, [pc, #28]	@ (8003564 <BSP_LED_Off+0x50>)
 8003548:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800354c:	2200      	movs	r2, #0
 800354e:	4619      	mov	r1, r3
 8003550:	f001 f98e 	bl	8004870 <HAL_GPIO_WritePin>
  }

  return ret;
 8003554:	68fb      	ldr	r3, [r7, #12]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	2400000c 	.word	0x2400000c
 8003564:	0800de88 	.word	0x0800de88

08003568 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	4603      	mov	r3, r0
 8003570:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8003572:	2300      	movs	r3, #0
 8003574:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8003576:	79fb      	ldrb	r3, [r7, #7]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d009      	beq.n	8003590 <BSP_LED_Toggle+0x28>
 800357c:	79fb      	ldrb	r3, [r7, #7]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d006      	beq.n	8003590 <BSP_LED_Toggle+0x28>
 8003582:	79fb      	ldrb	r3, [r7, #7]
 8003584:	2b02      	cmp	r3, #2
 8003586:	d003      	beq.n	8003590 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003588:	f06f 0301 	mvn.w	r3, #1
 800358c:	60fb      	str	r3, [r7, #12]
 800358e:	e00b      	b.n	80035a8 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8003590:	79fb      	ldrb	r3, [r7, #7]
 8003592:	4a08      	ldr	r2, [pc, #32]	@ (80035b4 <BSP_LED_Toggle+0x4c>)
 8003594:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003598:	79fb      	ldrb	r3, [r7, #7]
 800359a:	4907      	ldr	r1, [pc, #28]	@ (80035b8 <BSP_LED_Toggle+0x50>)
 800359c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80035a0:	4619      	mov	r1, r3
 80035a2:	4610      	mov	r0, r2
 80035a4:	f001 f97d 	bl	80048a2 <HAL_GPIO_TogglePin>
  }

  return ret;
 80035a8:	68fb      	ldr	r3, [r7, #12]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	2400000c 	.word	0x2400000c
 80035b8:	0800de88 	.word	0x0800de88

080035bc <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b088      	sub	sp, #32
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	4603      	mov	r3, r0
 80035c4:	460a      	mov	r2, r1
 80035c6:	71fb      	strb	r3, [r7, #7]
 80035c8:	4613      	mov	r3, r2
 80035ca:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80035cc:	4b2e      	ldr	r3, [pc, #184]	@ (8003688 <BSP_PB_Init+0xcc>)
 80035ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035d2:	4a2d      	ldr	r2, [pc, #180]	@ (8003688 <BSP_PB_Init+0xcc>)
 80035d4:	f043 0304 	orr.w	r3, r3, #4
 80035d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80035dc:	4b2a      	ldr	r3, [pc, #168]	@ (8003688 <BSP_PB_Init+0xcc>)
 80035de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035e2:	f003 0304 	and.w	r3, r3, #4
 80035e6:	60bb      	str	r3, [r7, #8]
 80035e8:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80035ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80035ee:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80035f0:	2302      	movs	r3, #2
 80035f2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80035f4:	2302      	movs	r3, #2
 80035f6:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80035f8:	79bb      	ldrb	r3, [r7, #6]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10c      	bne.n	8003618 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80035fe:	2300      	movs	r3, #0
 8003600:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8003602:	79fb      	ldrb	r3, [r7, #7]
 8003604:	4a21      	ldr	r2, [pc, #132]	@ (800368c <BSP_PB_Init+0xd0>)
 8003606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800360a:	f107 020c 	add.w	r2, r7, #12
 800360e:	4611      	mov	r1, r2
 8003610:	4618      	mov	r0, r3
 8003612:	f000 fe5b 	bl	80042cc <HAL_GPIO_Init>
 8003616:	e031      	b.n	800367c <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8003618:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800361c:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800361e:	79fb      	ldrb	r3, [r7, #7]
 8003620:	4a1a      	ldr	r2, [pc, #104]	@ (800368c <BSP_PB_Init+0xd0>)
 8003622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003626:	f107 020c 	add.w	r2, r7, #12
 800362a:	4611      	mov	r1, r2
 800362c:	4618      	mov	r0, r3
 800362e:	f000 fe4d 	bl	80042cc <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8003632:	79fb      	ldrb	r3, [r7, #7]
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	4a16      	ldr	r2, [pc, #88]	@ (8003690 <BSP_PB_Init+0xd4>)
 8003638:	441a      	add	r2, r3
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	4915      	ldr	r1, [pc, #84]	@ (8003694 <BSP_PB_Init+0xd8>)
 800363e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003642:	4619      	mov	r1, r3
 8003644:	4610      	mov	r0, r2
 8003646:	f000 fdfc 	bl	8004242 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800364a:	79fb      	ldrb	r3, [r7, #7]
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	4a10      	ldr	r2, [pc, #64]	@ (8003690 <BSP_PB_Init+0xd4>)
 8003650:	1898      	adds	r0, r3, r2
 8003652:	79fb      	ldrb	r3, [r7, #7]
 8003654:	4a10      	ldr	r2, [pc, #64]	@ (8003698 <BSP_PB_Init+0xdc>)
 8003656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800365a:	461a      	mov	r2, r3
 800365c:	2100      	movs	r1, #0
 800365e:	f000 fdd1 	bl	8004204 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8003662:	2028      	movs	r0, #40	@ 0x28
 8003664:	79fb      	ldrb	r3, [r7, #7]
 8003666:	4a0d      	ldr	r2, [pc, #52]	@ (800369c <BSP_PB_Init+0xe0>)
 8003668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800366c:	2200      	movs	r2, #0
 800366e:	4619      	mov	r1, r3
 8003670:	f000 fac7 	bl	8003c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8003674:	2328      	movs	r3, #40	@ 0x28
 8003676:	4618      	mov	r0, r3
 8003678:	f000 fadd 	bl	8003c36 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3720      	adds	r7, #32
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	58024400 	.word	0x58024400
 800368c:	24000018 	.word	0x24000018
 8003690:	24000144 	.word	0x24000144
 8003694:	0800de90 	.word	0x0800de90
 8003698:	2400001c 	.word	0x2400001c
 800369c:	24000020 	.word	0x24000020

080036a0 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	4603      	mov	r3, r0
 80036a8:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80036aa:	79fb      	ldrb	r3, [r7, #7]
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	4a04      	ldr	r2, [pc, #16]	@ (80036c0 <BSP_PB_IRQHandler+0x20>)
 80036b0:	4413      	add	r3, r2
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 fdda 	bl	800426c <HAL_EXTI_IRQHandler>
}
 80036b8:	bf00      	nop
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	24000144 	.word	0x24000144

080036c4 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	4603      	mov	r3, r0
 80036cc:	6039      	str	r1, [r7, #0]
 80036ce:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80036d0:	2300      	movs	r3, #0
 80036d2:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 80036d4:	79fb      	ldrb	r3, [r7, #7]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80036da:	f06f 0301 	mvn.w	r3, #1
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	e018      	b.n	8003714 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80036e2:	79fb      	ldrb	r3, [r7, #7]
 80036e4:	2294      	movs	r2, #148	@ 0x94
 80036e6:	fb02 f303 	mul.w	r3, r2, r3
 80036ea:	4a0d      	ldr	r2, [pc, #52]	@ (8003720 <BSP_COM_Init+0x5c>)
 80036ec:	4413      	add	r3, r2
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 f86e 	bl	80037d0 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80036f4:	79fb      	ldrb	r3, [r7, #7]
 80036f6:	2294      	movs	r2, #148	@ 0x94
 80036f8:	fb02 f303 	mul.w	r3, r2, r3
 80036fc:	4a08      	ldr	r2, [pc, #32]	@ (8003720 <BSP_COM_Init+0x5c>)
 80036fe:	4413      	add	r3, r2
 8003700:	6839      	ldr	r1, [r7, #0]
 8003702:	4618      	mov	r0, r3
 8003704:	f000 f80e 	bl	8003724 <MX_USART3_Init>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d002      	beq.n	8003714 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800370e:	f06f 0303 	mvn.w	r3, #3
 8003712:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003714:	68fb      	ldr	r3, [r7, #12]
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	2400014c 	.word	0x2400014c

08003724 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800372e:	4b15      	ldr	r3, [pc, #84]	@ (8003784 <MX_USART3_Init+0x60>)
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	220c      	movs	r2, #12
 8003742:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	895b      	ldrh	r3, [r3, #10]
 8003748:	461a      	mov	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	891b      	ldrh	r3, [r3, #8]
 800375a:	461a      	mov	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	899b      	ldrh	r3, [r3, #12]
 8003764:	461a      	mov	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003770:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f004 fe87 	bl	8008486 <HAL_UART_Init>
 8003778:	4603      	mov	r3, r0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	24000008 	.word	0x24000008

08003788 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8003790:	4b09      	ldr	r3, [pc, #36]	@ (80037b8 <__io_putchar+0x30>)
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	461a      	mov	r2, r3
 8003796:	2394      	movs	r3, #148	@ 0x94
 8003798:	fb02 f303 	mul.w	r3, r2, r3
 800379c:	4a07      	ldr	r2, [pc, #28]	@ (80037bc <__io_putchar+0x34>)
 800379e:	1898      	adds	r0, r3, r2
 80037a0:	1d39      	adds	r1, r7, #4
 80037a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037a6:	2201      	movs	r2, #1
 80037a8:	f004 fec7 	bl	800853a <HAL_UART_Transmit>
  return ch;
 80037ac:	687b      	ldr	r3, [r7, #4]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	240001e0 	.word	0x240001e0
 80037bc:	2400014c 	.word	0x2400014c

080037c0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80037c4:	2000      	movs	r0, #0
 80037c6:	f7ff fa15 	bl	8002bf4 <BSP_PB_Callback>
}
 80037ca:	bf00      	nop
 80037cc:	bd80      	pop	{r7, pc}
	...

080037d0 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b08a      	sub	sp, #40	@ 0x28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80037d8:	4b27      	ldr	r3, [pc, #156]	@ (8003878 <COM1_MspInit+0xa8>)
 80037da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037de:	4a26      	ldr	r2, [pc, #152]	@ (8003878 <COM1_MspInit+0xa8>)
 80037e0:	f043 0308 	orr.w	r3, r3, #8
 80037e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80037e8:	4b23      	ldr	r3, [pc, #140]	@ (8003878 <COM1_MspInit+0xa8>)
 80037ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	613b      	str	r3, [r7, #16]
 80037f4:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80037f6:	4b20      	ldr	r3, [pc, #128]	@ (8003878 <COM1_MspInit+0xa8>)
 80037f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037fc:	4a1e      	ldr	r2, [pc, #120]	@ (8003878 <COM1_MspInit+0xa8>)
 80037fe:	f043 0308 	orr.w	r3, r3, #8
 8003802:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003806:	4b1c      	ldr	r3, [pc, #112]	@ (8003878 <COM1_MspInit+0xa8>)
 8003808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800380c:	f003 0308 	and.w	r3, r3, #8
 8003810:	60fb      	str	r3, [r7, #12]
 8003812:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8003814:	4b18      	ldr	r3, [pc, #96]	@ (8003878 <COM1_MspInit+0xa8>)
 8003816:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800381a:	4a17      	ldr	r2, [pc, #92]	@ (8003878 <COM1_MspInit+0xa8>)
 800381c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003820:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003824:	4b14      	ldr	r3, [pc, #80]	@ (8003878 <COM1_MspInit+0xa8>)
 8003826:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800382a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800382e:	60bb      	str	r3, [r7, #8]
 8003830:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8003832:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003836:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003838:	2302      	movs	r3, #2
 800383a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800383c:	2302      	movs	r3, #2
 800383e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8003840:	2301      	movs	r3, #1
 8003842:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8003844:	2307      	movs	r3, #7
 8003846:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8003848:	f107 0314 	add.w	r3, r7, #20
 800384c:	4619      	mov	r1, r3
 800384e:	480b      	ldr	r0, [pc, #44]	@ (800387c <COM1_MspInit+0xac>)
 8003850:	f000 fd3c 	bl	80042cc <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8003854:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003858:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800385a:	2302      	movs	r3, #2
 800385c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800385e:	2307      	movs	r3, #7
 8003860:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8003862:	f107 0314 	add.w	r3, r7, #20
 8003866:	4619      	mov	r1, r3
 8003868:	4804      	ldr	r0, [pc, #16]	@ (800387c <COM1_MspInit+0xac>)
 800386a:	f000 fd2f 	bl	80042cc <HAL_GPIO_Init>
}
 800386e:	bf00      	nop
 8003870:	3728      	adds	r7, #40	@ 0x28
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	58024400 	.word	0x58024400
 800387c:	58020c00 	.word	0x58020c00

08003880 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003886:	2003      	movs	r0, #3
 8003888:	f000 f9b0 	bl	8003bec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800388c:	f001 fe6e 	bl	800556c <HAL_RCC_GetSysClockFreq>
 8003890:	4602      	mov	r2, r0
 8003892:	4b15      	ldr	r3, [pc, #84]	@ (80038e8 <HAL_Init+0x68>)
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	0a1b      	lsrs	r3, r3, #8
 8003898:	f003 030f 	and.w	r3, r3, #15
 800389c:	4913      	ldr	r1, [pc, #76]	@ (80038ec <HAL_Init+0x6c>)
 800389e:	5ccb      	ldrb	r3, [r1, r3]
 80038a0:	f003 031f 	and.w	r3, r3, #31
 80038a4:	fa22 f303 	lsr.w	r3, r2, r3
 80038a8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038aa:	4b0f      	ldr	r3, [pc, #60]	@ (80038e8 <HAL_Init+0x68>)
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	4a0e      	ldr	r2, [pc, #56]	@ (80038ec <HAL_Init+0x6c>)
 80038b4:	5cd3      	ldrb	r3, [r2, r3]
 80038b6:	f003 031f 	and.w	r3, r3, #31
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	fa22 f303 	lsr.w	r3, r2, r3
 80038c0:	4a0b      	ldr	r2, [pc, #44]	@ (80038f0 <HAL_Init+0x70>)
 80038c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80038c4:	4a0b      	ldr	r2, [pc, #44]	@ (80038f4 <HAL_Init+0x74>)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038ca:	2000      	movs	r0, #0
 80038cc:	f000 f814 	bl	80038f8 <HAL_InitTick>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e002      	b.n	80038e0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80038da:	f7ff faef 	bl	8002ebc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3708      	adds	r7, #8
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	58024400 	.word	0x58024400
 80038ec:	0800de78 	.word	0x0800de78
 80038f0:	24000004 	.word	0x24000004
 80038f4:	24000000 	.word	0x24000000

080038f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003900:	4b15      	ldr	r3, [pc, #84]	@ (8003958 <HAL_InitTick+0x60>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e021      	b.n	8003950 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800390c:	4b13      	ldr	r3, [pc, #76]	@ (800395c <HAL_InitTick+0x64>)
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	4b11      	ldr	r3, [pc, #68]	@ (8003958 <HAL_InitTick+0x60>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	4619      	mov	r1, r3
 8003916:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800391a:	fbb3 f3f1 	udiv	r3, r3, r1
 800391e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003922:	4618      	mov	r0, r3
 8003924:	f000 f9a3 	bl	8003c6e <HAL_SYSTICK_Config>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e00e      	b.n	8003950 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b0f      	cmp	r3, #15
 8003936:	d80a      	bhi.n	800394e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003938:	2200      	movs	r2, #0
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	f04f 30ff 	mov.w	r0, #4294967295
 8003940:	f000 f95f 	bl	8003c02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003944:	4a06      	ldr	r2, [pc, #24]	@ (8003960 <HAL_InitTick+0x68>)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800394a:	2300      	movs	r3, #0
 800394c:	e000      	b.n	8003950 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
}
 8003950:	4618      	mov	r0, r3
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	24000028 	.word	0x24000028
 800395c:	24000000 	.word	0x24000000
 8003960:	24000024 	.word	0x24000024

08003964 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003968:	4b06      	ldr	r3, [pc, #24]	@ (8003984 <HAL_IncTick+0x20>)
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	461a      	mov	r2, r3
 800396e:	4b06      	ldr	r3, [pc, #24]	@ (8003988 <HAL_IncTick+0x24>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4413      	add	r3, r2
 8003974:	4a04      	ldr	r2, [pc, #16]	@ (8003988 <HAL_IncTick+0x24>)
 8003976:	6013      	str	r3, [r2, #0]
}
 8003978:	bf00      	nop
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	24000028 	.word	0x24000028
 8003988:	240001e4 	.word	0x240001e4

0800398c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  return uwTick;
 8003990:	4b03      	ldr	r3, [pc, #12]	@ (80039a0 <HAL_GetTick+0x14>)
 8003992:	681b      	ldr	r3, [r3, #0]
}
 8003994:	4618      	mov	r0, r3
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	240001e4 	.word	0x240001e4

080039a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039ac:	f7ff ffee 	bl	800398c <HAL_GetTick>
 80039b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039bc:	d005      	beq.n	80039ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039be:	4b0a      	ldr	r3, [pc, #40]	@ (80039e8 <HAL_Delay+0x44>)
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	461a      	mov	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4413      	add	r3, r2
 80039c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039ca:	bf00      	nop
 80039cc:	f7ff ffde 	bl	800398c <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d8f7      	bhi.n	80039cc <HAL_Delay+0x28>
  {
  }
}
 80039dc:	bf00      	nop
 80039de:	bf00      	nop
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	24000028 	.word	0x24000028

080039ec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80039f0:	4b03      	ldr	r3, [pc, #12]	@ (8003a00 <HAL_GetREVID+0x14>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	0c1b      	lsrs	r3, r3, #16
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	5c001000 	.word	0x5c001000

08003a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a14:	4b0b      	ldr	r3, [pc, #44]	@ (8003a44 <__NVIC_SetPriorityGrouping+0x40>)
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a20:	4013      	ands	r3, r2
 8003a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003a2c:	4b06      	ldr	r3, [pc, #24]	@ (8003a48 <__NVIC_SetPriorityGrouping+0x44>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a32:	4a04      	ldr	r2, [pc, #16]	@ (8003a44 <__NVIC_SetPriorityGrouping+0x40>)
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	60d3      	str	r3, [r2, #12]
}
 8003a38:	bf00      	nop
 8003a3a:	3714      	adds	r7, #20
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	e000ed00 	.word	0xe000ed00
 8003a48:	05fa0000 	.word	0x05fa0000

08003a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a50:	4b04      	ldr	r3, [pc, #16]	@ (8003a64 <__NVIC_GetPriorityGrouping+0x18>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	0a1b      	lsrs	r3, r3, #8
 8003a56:	f003 0307 	and.w	r3, r3, #7
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	e000ed00 	.word	0xe000ed00

08003a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	4603      	mov	r3, r0
 8003a70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003a72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	db0b      	blt.n	8003a92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a7a:	88fb      	ldrh	r3, [r7, #6]
 8003a7c:	f003 021f 	and.w	r2, r3, #31
 8003a80:	4907      	ldr	r1, [pc, #28]	@ (8003aa0 <__NVIC_EnableIRQ+0x38>)
 8003a82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a86:	095b      	lsrs	r3, r3, #5
 8003a88:	2001      	movs	r0, #1
 8003a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a92:	bf00      	nop
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	e000e100 	.word	0xe000e100

08003aa4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	4603      	mov	r3, r0
 8003aac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003aae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	db12      	blt.n	8003adc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ab6:	88fb      	ldrh	r3, [r7, #6]
 8003ab8:	f003 021f 	and.w	r2, r3, #31
 8003abc:	490a      	ldr	r1, [pc, #40]	@ (8003ae8 <__NVIC_DisableIRQ+0x44>)
 8003abe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ac2:	095b      	lsrs	r3, r3, #5
 8003ac4:	2001      	movs	r0, #1
 8003ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8003aca:	3320      	adds	r3, #32
 8003acc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003ad0:	f3bf 8f4f 	dsb	sy
}
 8003ad4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003ad6:	f3bf 8f6f 	isb	sy
}
 8003ada:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	e000e100 	.word	0xe000e100

08003aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	4603      	mov	r3, r0
 8003af4:	6039      	str	r1, [r7, #0]
 8003af6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003af8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	db0a      	blt.n	8003b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	b2da      	uxtb	r2, r3
 8003b04:	490c      	ldr	r1, [pc, #48]	@ (8003b38 <__NVIC_SetPriority+0x4c>)
 8003b06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b0a:	0112      	lsls	r2, r2, #4
 8003b0c:	b2d2      	uxtb	r2, r2
 8003b0e:	440b      	add	r3, r1
 8003b10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b14:	e00a      	b.n	8003b2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	4908      	ldr	r1, [pc, #32]	@ (8003b3c <__NVIC_SetPriority+0x50>)
 8003b1c:	88fb      	ldrh	r3, [r7, #6]
 8003b1e:	f003 030f 	and.w	r3, r3, #15
 8003b22:	3b04      	subs	r3, #4
 8003b24:	0112      	lsls	r2, r2, #4
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	440b      	add	r3, r1
 8003b2a:	761a      	strb	r2, [r3, #24]
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	e000e100 	.word	0xe000e100
 8003b3c:	e000ed00 	.word	0xe000ed00

08003b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b089      	sub	sp, #36	@ 0x24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f003 0307 	and.w	r3, r3, #7
 8003b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f1c3 0307 	rsb	r3, r3, #7
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	bf28      	it	cs
 8003b5e:	2304      	movcs	r3, #4
 8003b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	3304      	adds	r3, #4
 8003b66:	2b06      	cmp	r3, #6
 8003b68:	d902      	bls.n	8003b70 <NVIC_EncodePriority+0x30>
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	3b03      	subs	r3, #3
 8003b6e:	e000      	b.n	8003b72 <NVIC_EncodePriority+0x32>
 8003b70:	2300      	movs	r3, #0
 8003b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b74:	f04f 32ff 	mov.w	r2, #4294967295
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7e:	43da      	mvns	r2, r3
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	401a      	ands	r2, r3
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b88:	f04f 31ff 	mov.w	r1, #4294967295
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b92:	43d9      	mvns	r1, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b98:	4313      	orrs	r3, r2
         );
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3724      	adds	r7, #36	@ 0x24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
	...

08003ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bb8:	d301      	bcc.n	8003bbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e00f      	b.n	8003bde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8003be8 <SysTick_Config+0x40>)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bc6:	210f      	movs	r1, #15
 8003bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bcc:	f7ff ff8e 	bl	8003aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bd0:	4b05      	ldr	r3, [pc, #20]	@ (8003be8 <SysTick_Config+0x40>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bd6:	4b04      	ldr	r3, [pc, #16]	@ (8003be8 <SysTick_Config+0x40>)
 8003bd8:	2207      	movs	r2, #7
 8003bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	e000e010 	.word	0xe000e010

08003bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f7ff ff05 	bl	8003a04 <__NVIC_SetPriorityGrouping>
}
 8003bfa:	bf00      	nop
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b086      	sub	sp, #24
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	4603      	mov	r3, r0
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	607a      	str	r2, [r7, #4]
 8003c0e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c10:	f7ff ff1c 	bl	8003a4c <__NVIC_GetPriorityGrouping>
 8003c14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	68b9      	ldr	r1, [r7, #8]
 8003c1a:	6978      	ldr	r0, [r7, #20]
 8003c1c:	f7ff ff90 	bl	8003b40 <NVIC_EncodePriority>
 8003c20:	4602      	mov	r2, r0
 8003c22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c26:	4611      	mov	r1, r2
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff ff5f 	bl	8003aec <__NVIC_SetPriority>
}
 8003c2e:	bf00      	nop
 8003c30:	3718      	adds	r7, #24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b082      	sub	sp, #8
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff ff0f 	bl	8003a68 <__NVIC_EnableIRQ>
}
 8003c4a:	bf00      	nop
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b082      	sub	sp, #8
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	4603      	mov	r3, r0
 8003c5a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003c5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff ff1f 	bl	8003aa4 <__NVIC_DisableIRQ>
}
 8003c66:	bf00      	nop
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b082      	sub	sp, #8
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7ff ff96 	bl	8003ba8 <SysTick_Config>
 8003c7c:	4603      	mov	r3, r0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003c8c:	f3bf 8f5f 	dmb	sy
}
 8003c90:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003c92:	4b07      	ldr	r3, [pc, #28]	@ (8003cb0 <HAL_MPU_Disable+0x28>)
 8003c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c96:	4a06      	ldr	r2, [pc, #24]	@ (8003cb0 <HAL_MPU_Disable+0x28>)
 8003c98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c9c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003c9e:	4b05      	ldr	r3, [pc, #20]	@ (8003cb4 <HAL_MPU_Disable+0x2c>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	605a      	str	r2, [r3, #4]
}
 8003ca4:	bf00      	nop
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	e000ed00 	.word	0xe000ed00
 8003cb4:	e000ed90 	.word	0xe000ed90

08003cb8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003cc0:	4a0b      	ldr	r2, [pc, #44]	@ (8003cf0 <HAL_MPU_Enable+0x38>)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f043 0301 	orr.w	r3, r3, #1
 8003cc8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003cca:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf4 <HAL_MPU_Enable+0x3c>)
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cce:	4a09      	ldr	r2, [pc, #36]	@ (8003cf4 <HAL_MPU_Enable+0x3c>)
 8003cd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cd4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003cd6:	f3bf 8f4f 	dsb	sy
}
 8003cda:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003cdc:	f3bf 8f6f 	isb	sy
}
 8003ce0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	e000ed90 	.word	0xe000ed90
 8003cf4:	e000ed00 	.word	0xe000ed00

08003cf8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	785a      	ldrb	r2, [r3, #1]
 8003d04:	4b1b      	ldr	r3, [pc, #108]	@ (8003d74 <HAL_MPU_ConfigRegion+0x7c>)
 8003d06:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003d08:	4b1a      	ldr	r3, [pc, #104]	@ (8003d74 <HAL_MPU_ConfigRegion+0x7c>)
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	4a19      	ldr	r2, [pc, #100]	@ (8003d74 <HAL_MPU_ConfigRegion+0x7c>)
 8003d0e:	f023 0301 	bic.w	r3, r3, #1
 8003d12:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003d14:	4a17      	ldr	r2, [pc, #92]	@ (8003d74 <HAL_MPU_ConfigRegion+0x7c>)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	7b1b      	ldrb	r3, [r3, #12]
 8003d20:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	7adb      	ldrb	r3, [r3, #11]
 8003d26:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003d28:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	7a9b      	ldrb	r3, [r3, #10]
 8003d2e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003d30:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	7b5b      	ldrb	r3, [r3, #13]
 8003d36:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003d38:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	7b9b      	ldrb	r3, [r3, #14]
 8003d3e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003d40:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	7bdb      	ldrb	r3, [r3, #15]
 8003d46:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003d48:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	7a5b      	ldrb	r3, [r3, #9]
 8003d4e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003d50:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	7a1b      	ldrb	r3, [r3, #8]
 8003d56:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003d58:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	7812      	ldrb	r2, [r2, #0]
 8003d5e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003d60:	4a04      	ldr	r2, [pc, #16]	@ (8003d74 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003d62:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003d64:	6113      	str	r3, [r2, #16]
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	e000ed90 	.word	0xe000ed90

08003d78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e237      	b.n	80041fa <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d004      	beq.n	8003da0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2280      	movs	r2, #128	@ 0x80
 8003d9a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e22c      	b.n	80041fa <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a5c      	ldr	r2, [pc, #368]	@ (8003f18 <HAL_DMA_Abort_IT+0x1a0>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d04a      	beq.n	8003e40 <HAL_DMA_Abort_IT+0xc8>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a5b      	ldr	r2, [pc, #364]	@ (8003f1c <HAL_DMA_Abort_IT+0x1a4>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d045      	beq.n	8003e40 <HAL_DMA_Abort_IT+0xc8>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a59      	ldr	r2, [pc, #356]	@ (8003f20 <HAL_DMA_Abort_IT+0x1a8>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d040      	beq.n	8003e40 <HAL_DMA_Abort_IT+0xc8>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a58      	ldr	r2, [pc, #352]	@ (8003f24 <HAL_DMA_Abort_IT+0x1ac>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d03b      	beq.n	8003e40 <HAL_DMA_Abort_IT+0xc8>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a56      	ldr	r2, [pc, #344]	@ (8003f28 <HAL_DMA_Abort_IT+0x1b0>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d036      	beq.n	8003e40 <HAL_DMA_Abort_IT+0xc8>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a55      	ldr	r2, [pc, #340]	@ (8003f2c <HAL_DMA_Abort_IT+0x1b4>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d031      	beq.n	8003e40 <HAL_DMA_Abort_IT+0xc8>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a53      	ldr	r2, [pc, #332]	@ (8003f30 <HAL_DMA_Abort_IT+0x1b8>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d02c      	beq.n	8003e40 <HAL_DMA_Abort_IT+0xc8>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a52      	ldr	r2, [pc, #328]	@ (8003f34 <HAL_DMA_Abort_IT+0x1bc>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d027      	beq.n	8003e40 <HAL_DMA_Abort_IT+0xc8>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a50      	ldr	r2, [pc, #320]	@ (8003f38 <HAL_DMA_Abort_IT+0x1c0>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d022      	beq.n	8003e40 <HAL_DMA_Abort_IT+0xc8>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a4f      	ldr	r2, [pc, #316]	@ (8003f3c <HAL_DMA_Abort_IT+0x1c4>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d01d      	beq.n	8003e40 <HAL_DMA_Abort_IT+0xc8>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a4d      	ldr	r2, [pc, #308]	@ (8003f40 <HAL_DMA_Abort_IT+0x1c8>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d018      	beq.n	8003e40 <HAL_DMA_Abort_IT+0xc8>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a4c      	ldr	r2, [pc, #304]	@ (8003f44 <HAL_DMA_Abort_IT+0x1cc>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d013      	beq.n	8003e40 <HAL_DMA_Abort_IT+0xc8>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a4a      	ldr	r2, [pc, #296]	@ (8003f48 <HAL_DMA_Abort_IT+0x1d0>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d00e      	beq.n	8003e40 <HAL_DMA_Abort_IT+0xc8>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a49      	ldr	r2, [pc, #292]	@ (8003f4c <HAL_DMA_Abort_IT+0x1d4>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d009      	beq.n	8003e40 <HAL_DMA_Abort_IT+0xc8>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a47      	ldr	r2, [pc, #284]	@ (8003f50 <HAL_DMA_Abort_IT+0x1d8>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d004      	beq.n	8003e40 <HAL_DMA_Abort_IT+0xc8>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a46      	ldr	r2, [pc, #280]	@ (8003f54 <HAL_DMA_Abort_IT+0x1dc>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d101      	bne.n	8003e44 <HAL_DMA_Abort_IT+0xcc>
 8003e40:	2301      	movs	r3, #1
 8003e42:	e000      	b.n	8003e46 <HAL_DMA_Abort_IT+0xce>
 8003e44:	2300      	movs	r3, #0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 8086 	beq.w	8003f58 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2204      	movs	r2, #4
 8003e50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a2f      	ldr	r2, [pc, #188]	@ (8003f18 <HAL_DMA_Abort_IT+0x1a0>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d04a      	beq.n	8003ef4 <HAL_DMA_Abort_IT+0x17c>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a2e      	ldr	r2, [pc, #184]	@ (8003f1c <HAL_DMA_Abort_IT+0x1a4>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d045      	beq.n	8003ef4 <HAL_DMA_Abort_IT+0x17c>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a2c      	ldr	r2, [pc, #176]	@ (8003f20 <HAL_DMA_Abort_IT+0x1a8>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d040      	beq.n	8003ef4 <HAL_DMA_Abort_IT+0x17c>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a2b      	ldr	r2, [pc, #172]	@ (8003f24 <HAL_DMA_Abort_IT+0x1ac>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d03b      	beq.n	8003ef4 <HAL_DMA_Abort_IT+0x17c>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a29      	ldr	r2, [pc, #164]	@ (8003f28 <HAL_DMA_Abort_IT+0x1b0>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d036      	beq.n	8003ef4 <HAL_DMA_Abort_IT+0x17c>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a28      	ldr	r2, [pc, #160]	@ (8003f2c <HAL_DMA_Abort_IT+0x1b4>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d031      	beq.n	8003ef4 <HAL_DMA_Abort_IT+0x17c>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a26      	ldr	r2, [pc, #152]	@ (8003f30 <HAL_DMA_Abort_IT+0x1b8>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d02c      	beq.n	8003ef4 <HAL_DMA_Abort_IT+0x17c>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a25      	ldr	r2, [pc, #148]	@ (8003f34 <HAL_DMA_Abort_IT+0x1bc>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d027      	beq.n	8003ef4 <HAL_DMA_Abort_IT+0x17c>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a23      	ldr	r2, [pc, #140]	@ (8003f38 <HAL_DMA_Abort_IT+0x1c0>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d022      	beq.n	8003ef4 <HAL_DMA_Abort_IT+0x17c>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a22      	ldr	r2, [pc, #136]	@ (8003f3c <HAL_DMA_Abort_IT+0x1c4>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d01d      	beq.n	8003ef4 <HAL_DMA_Abort_IT+0x17c>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a20      	ldr	r2, [pc, #128]	@ (8003f40 <HAL_DMA_Abort_IT+0x1c8>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d018      	beq.n	8003ef4 <HAL_DMA_Abort_IT+0x17c>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a1f      	ldr	r2, [pc, #124]	@ (8003f44 <HAL_DMA_Abort_IT+0x1cc>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d013      	beq.n	8003ef4 <HAL_DMA_Abort_IT+0x17c>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a1d      	ldr	r2, [pc, #116]	@ (8003f48 <HAL_DMA_Abort_IT+0x1d0>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d00e      	beq.n	8003ef4 <HAL_DMA_Abort_IT+0x17c>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a1c      	ldr	r2, [pc, #112]	@ (8003f4c <HAL_DMA_Abort_IT+0x1d4>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d009      	beq.n	8003ef4 <HAL_DMA_Abort_IT+0x17c>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a1a      	ldr	r2, [pc, #104]	@ (8003f50 <HAL_DMA_Abort_IT+0x1d8>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d004      	beq.n	8003ef4 <HAL_DMA_Abort_IT+0x17c>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a19      	ldr	r2, [pc, #100]	@ (8003f54 <HAL_DMA_Abort_IT+0x1dc>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d108      	bne.n	8003f06 <HAL_DMA_Abort_IT+0x18e>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 0201 	bic.w	r2, r2, #1
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	e178      	b.n	80041f8 <HAL_DMA_Abort_IT+0x480>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0201 	bic.w	r2, r2, #1
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	e16f      	b.n	80041f8 <HAL_DMA_Abort_IT+0x480>
 8003f18:	40020010 	.word	0x40020010
 8003f1c:	40020028 	.word	0x40020028
 8003f20:	40020040 	.word	0x40020040
 8003f24:	40020058 	.word	0x40020058
 8003f28:	40020070 	.word	0x40020070
 8003f2c:	40020088 	.word	0x40020088
 8003f30:	400200a0 	.word	0x400200a0
 8003f34:	400200b8 	.word	0x400200b8
 8003f38:	40020410 	.word	0x40020410
 8003f3c:	40020428 	.word	0x40020428
 8003f40:	40020440 	.word	0x40020440
 8003f44:	40020458 	.word	0x40020458
 8003f48:	40020470 	.word	0x40020470
 8003f4c:	40020488 	.word	0x40020488
 8003f50:	400204a0 	.word	0x400204a0
 8003f54:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 020e 	bic.w	r2, r2, #14
 8003f66:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a6c      	ldr	r2, [pc, #432]	@ (8004120 <HAL_DMA_Abort_IT+0x3a8>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d04a      	beq.n	8004008 <HAL_DMA_Abort_IT+0x290>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a6b      	ldr	r2, [pc, #428]	@ (8004124 <HAL_DMA_Abort_IT+0x3ac>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d045      	beq.n	8004008 <HAL_DMA_Abort_IT+0x290>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a69      	ldr	r2, [pc, #420]	@ (8004128 <HAL_DMA_Abort_IT+0x3b0>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d040      	beq.n	8004008 <HAL_DMA_Abort_IT+0x290>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a68      	ldr	r2, [pc, #416]	@ (800412c <HAL_DMA_Abort_IT+0x3b4>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d03b      	beq.n	8004008 <HAL_DMA_Abort_IT+0x290>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a66      	ldr	r2, [pc, #408]	@ (8004130 <HAL_DMA_Abort_IT+0x3b8>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d036      	beq.n	8004008 <HAL_DMA_Abort_IT+0x290>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a65      	ldr	r2, [pc, #404]	@ (8004134 <HAL_DMA_Abort_IT+0x3bc>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d031      	beq.n	8004008 <HAL_DMA_Abort_IT+0x290>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a63      	ldr	r2, [pc, #396]	@ (8004138 <HAL_DMA_Abort_IT+0x3c0>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d02c      	beq.n	8004008 <HAL_DMA_Abort_IT+0x290>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a62      	ldr	r2, [pc, #392]	@ (800413c <HAL_DMA_Abort_IT+0x3c4>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d027      	beq.n	8004008 <HAL_DMA_Abort_IT+0x290>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a60      	ldr	r2, [pc, #384]	@ (8004140 <HAL_DMA_Abort_IT+0x3c8>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d022      	beq.n	8004008 <HAL_DMA_Abort_IT+0x290>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a5f      	ldr	r2, [pc, #380]	@ (8004144 <HAL_DMA_Abort_IT+0x3cc>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d01d      	beq.n	8004008 <HAL_DMA_Abort_IT+0x290>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a5d      	ldr	r2, [pc, #372]	@ (8004148 <HAL_DMA_Abort_IT+0x3d0>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d018      	beq.n	8004008 <HAL_DMA_Abort_IT+0x290>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a5c      	ldr	r2, [pc, #368]	@ (800414c <HAL_DMA_Abort_IT+0x3d4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d013      	beq.n	8004008 <HAL_DMA_Abort_IT+0x290>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a5a      	ldr	r2, [pc, #360]	@ (8004150 <HAL_DMA_Abort_IT+0x3d8>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d00e      	beq.n	8004008 <HAL_DMA_Abort_IT+0x290>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a59      	ldr	r2, [pc, #356]	@ (8004154 <HAL_DMA_Abort_IT+0x3dc>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d009      	beq.n	8004008 <HAL_DMA_Abort_IT+0x290>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a57      	ldr	r2, [pc, #348]	@ (8004158 <HAL_DMA_Abort_IT+0x3e0>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d004      	beq.n	8004008 <HAL_DMA_Abort_IT+0x290>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a56      	ldr	r2, [pc, #344]	@ (800415c <HAL_DMA_Abort_IT+0x3e4>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d108      	bne.n	800401a <HAL_DMA_Abort_IT+0x2a2>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0201 	bic.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	e007      	b.n	800402a <HAL_DMA_Abort_IT+0x2b2>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 0201 	bic.w	r2, r2, #1
 8004028:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a3c      	ldr	r2, [pc, #240]	@ (8004120 <HAL_DMA_Abort_IT+0x3a8>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d072      	beq.n	800411a <HAL_DMA_Abort_IT+0x3a2>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a3a      	ldr	r2, [pc, #232]	@ (8004124 <HAL_DMA_Abort_IT+0x3ac>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d06d      	beq.n	800411a <HAL_DMA_Abort_IT+0x3a2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a39      	ldr	r2, [pc, #228]	@ (8004128 <HAL_DMA_Abort_IT+0x3b0>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d068      	beq.n	800411a <HAL_DMA_Abort_IT+0x3a2>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a37      	ldr	r2, [pc, #220]	@ (800412c <HAL_DMA_Abort_IT+0x3b4>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d063      	beq.n	800411a <HAL_DMA_Abort_IT+0x3a2>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a36      	ldr	r2, [pc, #216]	@ (8004130 <HAL_DMA_Abort_IT+0x3b8>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d05e      	beq.n	800411a <HAL_DMA_Abort_IT+0x3a2>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a34      	ldr	r2, [pc, #208]	@ (8004134 <HAL_DMA_Abort_IT+0x3bc>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d059      	beq.n	800411a <HAL_DMA_Abort_IT+0x3a2>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a33      	ldr	r2, [pc, #204]	@ (8004138 <HAL_DMA_Abort_IT+0x3c0>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d054      	beq.n	800411a <HAL_DMA_Abort_IT+0x3a2>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a31      	ldr	r2, [pc, #196]	@ (800413c <HAL_DMA_Abort_IT+0x3c4>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d04f      	beq.n	800411a <HAL_DMA_Abort_IT+0x3a2>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a30      	ldr	r2, [pc, #192]	@ (8004140 <HAL_DMA_Abort_IT+0x3c8>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d04a      	beq.n	800411a <HAL_DMA_Abort_IT+0x3a2>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a2e      	ldr	r2, [pc, #184]	@ (8004144 <HAL_DMA_Abort_IT+0x3cc>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d045      	beq.n	800411a <HAL_DMA_Abort_IT+0x3a2>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a2d      	ldr	r2, [pc, #180]	@ (8004148 <HAL_DMA_Abort_IT+0x3d0>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d040      	beq.n	800411a <HAL_DMA_Abort_IT+0x3a2>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a2b      	ldr	r2, [pc, #172]	@ (800414c <HAL_DMA_Abort_IT+0x3d4>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d03b      	beq.n	800411a <HAL_DMA_Abort_IT+0x3a2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a2a      	ldr	r2, [pc, #168]	@ (8004150 <HAL_DMA_Abort_IT+0x3d8>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d036      	beq.n	800411a <HAL_DMA_Abort_IT+0x3a2>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a28      	ldr	r2, [pc, #160]	@ (8004154 <HAL_DMA_Abort_IT+0x3dc>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d031      	beq.n	800411a <HAL_DMA_Abort_IT+0x3a2>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a27      	ldr	r2, [pc, #156]	@ (8004158 <HAL_DMA_Abort_IT+0x3e0>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d02c      	beq.n	800411a <HAL_DMA_Abort_IT+0x3a2>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a25      	ldr	r2, [pc, #148]	@ (800415c <HAL_DMA_Abort_IT+0x3e4>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d027      	beq.n	800411a <HAL_DMA_Abort_IT+0x3a2>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a24      	ldr	r2, [pc, #144]	@ (8004160 <HAL_DMA_Abort_IT+0x3e8>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d022      	beq.n	800411a <HAL_DMA_Abort_IT+0x3a2>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a22      	ldr	r2, [pc, #136]	@ (8004164 <HAL_DMA_Abort_IT+0x3ec>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d01d      	beq.n	800411a <HAL_DMA_Abort_IT+0x3a2>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a21      	ldr	r2, [pc, #132]	@ (8004168 <HAL_DMA_Abort_IT+0x3f0>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d018      	beq.n	800411a <HAL_DMA_Abort_IT+0x3a2>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a1f      	ldr	r2, [pc, #124]	@ (800416c <HAL_DMA_Abort_IT+0x3f4>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d013      	beq.n	800411a <HAL_DMA_Abort_IT+0x3a2>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a1e      	ldr	r2, [pc, #120]	@ (8004170 <HAL_DMA_Abort_IT+0x3f8>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d00e      	beq.n	800411a <HAL_DMA_Abort_IT+0x3a2>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a1c      	ldr	r2, [pc, #112]	@ (8004174 <HAL_DMA_Abort_IT+0x3fc>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d009      	beq.n	800411a <HAL_DMA_Abort_IT+0x3a2>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a1b      	ldr	r2, [pc, #108]	@ (8004178 <HAL_DMA_Abort_IT+0x400>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d004      	beq.n	800411a <HAL_DMA_Abort_IT+0x3a2>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a19      	ldr	r2, [pc, #100]	@ (800417c <HAL_DMA_Abort_IT+0x404>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d132      	bne.n	8004180 <HAL_DMA_Abort_IT+0x408>
 800411a:	2301      	movs	r3, #1
 800411c:	e031      	b.n	8004182 <HAL_DMA_Abort_IT+0x40a>
 800411e:	bf00      	nop
 8004120:	40020010 	.word	0x40020010
 8004124:	40020028 	.word	0x40020028
 8004128:	40020040 	.word	0x40020040
 800412c:	40020058 	.word	0x40020058
 8004130:	40020070 	.word	0x40020070
 8004134:	40020088 	.word	0x40020088
 8004138:	400200a0 	.word	0x400200a0
 800413c:	400200b8 	.word	0x400200b8
 8004140:	40020410 	.word	0x40020410
 8004144:	40020428 	.word	0x40020428
 8004148:	40020440 	.word	0x40020440
 800414c:	40020458 	.word	0x40020458
 8004150:	40020470 	.word	0x40020470
 8004154:	40020488 	.word	0x40020488
 8004158:	400204a0 	.word	0x400204a0
 800415c:	400204b8 	.word	0x400204b8
 8004160:	58025408 	.word	0x58025408
 8004164:	5802541c 	.word	0x5802541c
 8004168:	58025430 	.word	0x58025430
 800416c:	58025444 	.word	0x58025444
 8004170:	58025458 	.word	0x58025458
 8004174:	5802546c 	.word	0x5802546c
 8004178:	58025480 	.word	0x58025480
 800417c:	58025494 	.word	0x58025494
 8004180:	2300      	movs	r3, #0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d028      	beq.n	80041d8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004190:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004194:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800419a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041a0:	f003 031f 	and.w	r3, r3, #31
 80041a4:	2201      	movs	r2, #1
 80041a6:	409a      	lsls	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80041b4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00c      	beq.n	80041d8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80041cc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80041d6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop

08004204 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004204:	b480      	push	{r7}
 8004206:	b087      	sub	sp, #28
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	460b      	mov	r3, r1
 800420e:	607a      	str	r2, [r7, #4]
 8004210:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004212:	2300      	movs	r3, #0
 8004214:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e00a      	b.n	8004236 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8004220:	7afb      	ldrb	r3, [r7, #11]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d103      	bne.n	800422e <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	605a      	str	r2, [r3, #4]
      break;
 800422c:	e002      	b.n	8004234 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	75fb      	strb	r3, [r7, #23]
      break;
 8004232:	bf00      	nop
  }

  return status;
 8004234:	7dfb      	ldrb	r3, [r7, #23]
}
 8004236:	4618      	mov	r0, r3
 8004238:	371c      	adds	r7, #28
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004242:	b480      	push	{r7}
 8004244:	b083      	sub	sp, #12
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
 800424a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e003      	b.n	800425e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800425c:	2300      	movs	r3, #0
  }
}
 800425e:	4618      	mov	r0, r3
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
	...

0800426c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	0c1b      	lsrs	r3, r3, #16
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 031f 	and.w	r3, r3, #31
 8004288:	2201      	movs	r2, #1
 800428a:	fa02 f303 	lsl.w	r3, r2, r3
 800428e:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	011a      	lsls	r2, r3, #4
 8004294:	4b0c      	ldr	r3, [pc, #48]	@ (80042c8 <HAL_EXTI_IRQHandler+0x5c>)
 8004296:	4413      	add	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	4013      	ands	r3, r2
 80042a2:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d009      	beq.n	80042be <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d002      	beq.n	80042be <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	4798      	blx	r3
    }
  }
}
 80042be:	bf00      	nop
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	58000088 	.word	0x58000088

080042cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b089      	sub	sp, #36	@ 0x24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80042d6:	2300      	movs	r3, #0
 80042d8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80042da:	4b89      	ldr	r3, [pc, #548]	@ (8004500 <HAL_GPIO_Init+0x234>)
 80042dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80042de:	e194      	b.n	800460a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	2101      	movs	r1, #1
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	fa01 f303 	lsl.w	r3, r1, r3
 80042ec:	4013      	ands	r3, r2
 80042ee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f000 8186 	beq.w	8004604 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f003 0303 	and.w	r3, r3, #3
 8004300:	2b01      	cmp	r3, #1
 8004302:	d005      	beq.n	8004310 <HAL_GPIO_Init+0x44>
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f003 0303 	and.w	r3, r3, #3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d130      	bne.n	8004372 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	2203      	movs	r2, #3
 800431c:	fa02 f303 	lsl.w	r3, r2, r3
 8004320:	43db      	mvns	r3, r3
 8004322:	69ba      	ldr	r2, [r7, #24]
 8004324:	4013      	ands	r3, r2
 8004326:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	68da      	ldr	r2, [r3, #12]
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	fa02 f303 	lsl.w	r3, r2, r3
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	4313      	orrs	r3, r2
 8004338:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004346:	2201      	movs	r2, #1
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	fa02 f303 	lsl.w	r3, r2, r3
 800434e:	43db      	mvns	r3, r3
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	4013      	ands	r3, r2
 8004354:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	091b      	lsrs	r3, r3, #4
 800435c:	f003 0201 	and.w	r2, r3, #1
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	4313      	orrs	r3, r2
 800436a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f003 0303 	and.w	r3, r3, #3
 800437a:	2b03      	cmp	r3, #3
 800437c:	d017      	beq.n	80043ae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	2203      	movs	r2, #3
 800438a:	fa02 f303 	lsl.w	r3, r2, r3
 800438e:	43db      	mvns	r3, r3
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	4013      	ands	r3, r2
 8004394:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	689a      	ldr	r2, [r3, #8]
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	005b      	lsls	r3, r3, #1
 800439e:	fa02 f303 	lsl.w	r3, r2, r3
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f003 0303 	and.w	r3, r3, #3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d123      	bne.n	8004402 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	08da      	lsrs	r2, r3, #3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	3208      	adds	r2, #8
 80043c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	f003 0307 	and.w	r3, r3, #7
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	220f      	movs	r2, #15
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	43db      	mvns	r3, r3
 80043d8:	69ba      	ldr	r2, [r7, #24]
 80043da:	4013      	ands	r3, r2
 80043dc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	691a      	ldr	r2, [r3, #16]
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	fa02 f303 	lsl.w	r3, r2, r3
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	08da      	lsrs	r2, r3, #3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3208      	adds	r2, #8
 80043fc:	69b9      	ldr	r1, [r7, #24]
 80043fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	2203      	movs	r2, #3
 800440e:	fa02 f303 	lsl.w	r3, r2, r3
 8004412:	43db      	mvns	r3, r3
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	4013      	ands	r3, r2
 8004418:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f003 0203 	and.w	r2, r3, #3
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	005b      	lsls	r3, r3, #1
 8004426:	fa02 f303 	lsl.w	r3, r2, r3
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	4313      	orrs	r3, r2
 800442e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 80e0 	beq.w	8004604 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004444:	4b2f      	ldr	r3, [pc, #188]	@ (8004504 <HAL_GPIO_Init+0x238>)
 8004446:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800444a:	4a2e      	ldr	r2, [pc, #184]	@ (8004504 <HAL_GPIO_Init+0x238>)
 800444c:	f043 0302 	orr.w	r3, r3, #2
 8004450:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004454:	4b2b      	ldr	r3, [pc, #172]	@ (8004504 <HAL_GPIO_Init+0x238>)
 8004456:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	60fb      	str	r3, [r7, #12]
 8004460:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004462:	4a29      	ldr	r2, [pc, #164]	@ (8004508 <HAL_GPIO_Init+0x23c>)
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	089b      	lsrs	r3, r3, #2
 8004468:	3302      	adds	r3, #2
 800446a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800446e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	f003 0303 	and.w	r3, r3, #3
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	220f      	movs	r2, #15
 800447a:	fa02 f303 	lsl.w	r3, r2, r3
 800447e:	43db      	mvns	r3, r3
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	4013      	ands	r3, r2
 8004484:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a20      	ldr	r2, [pc, #128]	@ (800450c <HAL_GPIO_Init+0x240>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d052      	beq.n	8004534 <HAL_GPIO_Init+0x268>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a1f      	ldr	r2, [pc, #124]	@ (8004510 <HAL_GPIO_Init+0x244>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d031      	beq.n	80044fa <HAL_GPIO_Init+0x22e>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a1e      	ldr	r2, [pc, #120]	@ (8004514 <HAL_GPIO_Init+0x248>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d02b      	beq.n	80044f6 <HAL_GPIO_Init+0x22a>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a1d      	ldr	r2, [pc, #116]	@ (8004518 <HAL_GPIO_Init+0x24c>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d025      	beq.n	80044f2 <HAL_GPIO_Init+0x226>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a1c      	ldr	r2, [pc, #112]	@ (800451c <HAL_GPIO_Init+0x250>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d01f      	beq.n	80044ee <HAL_GPIO_Init+0x222>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a1b      	ldr	r2, [pc, #108]	@ (8004520 <HAL_GPIO_Init+0x254>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d019      	beq.n	80044ea <HAL_GPIO_Init+0x21e>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a1a      	ldr	r2, [pc, #104]	@ (8004524 <HAL_GPIO_Init+0x258>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d013      	beq.n	80044e6 <HAL_GPIO_Init+0x21a>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a19      	ldr	r2, [pc, #100]	@ (8004528 <HAL_GPIO_Init+0x25c>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d00d      	beq.n	80044e2 <HAL_GPIO_Init+0x216>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a18      	ldr	r2, [pc, #96]	@ (800452c <HAL_GPIO_Init+0x260>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d007      	beq.n	80044de <HAL_GPIO_Init+0x212>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a17      	ldr	r2, [pc, #92]	@ (8004530 <HAL_GPIO_Init+0x264>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d101      	bne.n	80044da <HAL_GPIO_Init+0x20e>
 80044d6:	2309      	movs	r3, #9
 80044d8:	e02d      	b.n	8004536 <HAL_GPIO_Init+0x26a>
 80044da:	230a      	movs	r3, #10
 80044dc:	e02b      	b.n	8004536 <HAL_GPIO_Init+0x26a>
 80044de:	2308      	movs	r3, #8
 80044e0:	e029      	b.n	8004536 <HAL_GPIO_Init+0x26a>
 80044e2:	2307      	movs	r3, #7
 80044e4:	e027      	b.n	8004536 <HAL_GPIO_Init+0x26a>
 80044e6:	2306      	movs	r3, #6
 80044e8:	e025      	b.n	8004536 <HAL_GPIO_Init+0x26a>
 80044ea:	2305      	movs	r3, #5
 80044ec:	e023      	b.n	8004536 <HAL_GPIO_Init+0x26a>
 80044ee:	2304      	movs	r3, #4
 80044f0:	e021      	b.n	8004536 <HAL_GPIO_Init+0x26a>
 80044f2:	2303      	movs	r3, #3
 80044f4:	e01f      	b.n	8004536 <HAL_GPIO_Init+0x26a>
 80044f6:	2302      	movs	r3, #2
 80044f8:	e01d      	b.n	8004536 <HAL_GPIO_Init+0x26a>
 80044fa:	2301      	movs	r3, #1
 80044fc:	e01b      	b.n	8004536 <HAL_GPIO_Init+0x26a>
 80044fe:	bf00      	nop
 8004500:	58000080 	.word	0x58000080
 8004504:	58024400 	.word	0x58024400
 8004508:	58000400 	.word	0x58000400
 800450c:	58020000 	.word	0x58020000
 8004510:	58020400 	.word	0x58020400
 8004514:	58020800 	.word	0x58020800
 8004518:	58020c00 	.word	0x58020c00
 800451c:	58021000 	.word	0x58021000
 8004520:	58021400 	.word	0x58021400
 8004524:	58021800 	.word	0x58021800
 8004528:	58021c00 	.word	0x58021c00
 800452c:	58022000 	.word	0x58022000
 8004530:	58022400 	.word	0x58022400
 8004534:	2300      	movs	r3, #0
 8004536:	69fa      	ldr	r2, [r7, #28]
 8004538:	f002 0203 	and.w	r2, r2, #3
 800453c:	0092      	lsls	r2, r2, #2
 800453e:	4093      	lsls	r3, r2
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	4313      	orrs	r3, r2
 8004544:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004546:	4938      	ldr	r1, [pc, #224]	@ (8004628 <HAL_GPIO_Init+0x35c>)
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	089b      	lsrs	r3, r3, #2
 800454c:	3302      	adds	r3, #2
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004554:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	43db      	mvns	r3, r3
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	4013      	ands	r3, r2
 8004564:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d003      	beq.n	800457a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004572:	69ba      	ldr	r2, [r7, #24]
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	4313      	orrs	r3, r2
 8004578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800457a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004582:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	43db      	mvns	r3, r3
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	4013      	ands	r3, r2
 8004592:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d003      	beq.n	80045a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80045a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	43db      	mvns	r3, r3
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	4013      	ands	r3, r2
 80045be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	43db      	mvns	r3, r3
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	4013      	ands	r3, r2
 80045e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	3301      	adds	r3, #1
 8004608:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	fa22 f303 	lsr.w	r3, r2, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	f47f ae63 	bne.w	80042e0 <HAL_GPIO_Init+0x14>
  }
}
 800461a:	bf00      	nop
 800461c:	bf00      	nop
 800461e:	3724      	adds	r7, #36	@ 0x24
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr
 8004628:	58000400 	.word	0x58000400

0800462c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800462c:	b480      	push	{r7}
 800462e:	b087      	sub	sp, #28
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004636:	2300      	movs	r3, #0
 8004638:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800463a:	4b75      	ldr	r3, [pc, #468]	@ (8004810 <HAL_GPIO_DeInit+0x1e4>)
 800463c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800463e:	e0d9      	b.n	80047f4 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8004640:	2201      	movs	r2, #1
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	fa02 f303 	lsl.w	r3, r2, r3
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	4013      	ands	r3, r2
 800464c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 80cc 	beq.w	80047ee <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004656:	4a6f      	ldr	r2, [pc, #444]	@ (8004814 <HAL_GPIO_DeInit+0x1e8>)
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	089b      	lsrs	r3, r3, #2
 800465c:	3302      	adds	r3, #2
 800465e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004662:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f003 0303 	and.w	r3, r3, #3
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	220f      	movs	r2, #15
 800466e:	fa02 f303 	lsl.w	r3, r2, r3
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	4013      	ands	r3, r2
 8004676:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a67      	ldr	r2, [pc, #412]	@ (8004818 <HAL_GPIO_DeInit+0x1ec>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d037      	beq.n	80046f0 <HAL_GPIO_DeInit+0xc4>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a66      	ldr	r2, [pc, #408]	@ (800481c <HAL_GPIO_DeInit+0x1f0>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d031      	beq.n	80046ec <HAL_GPIO_DeInit+0xc0>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a65      	ldr	r2, [pc, #404]	@ (8004820 <HAL_GPIO_DeInit+0x1f4>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d02b      	beq.n	80046e8 <HAL_GPIO_DeInit+0xbc>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a64      	ldr	r2, [pc, #400]	@ (8004824 <HAL_GPIO_DeInit+0x1f8>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d025      	beq.n	80046e4 <HAL_GPIO_DeInit+0xb8>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a63      	ldr	r2, [pc, #396]	@ (8004828 <HAL_GPIO_DeInit+0x1fc>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d01f      	beq.n	80046e0 <HAL_GPIO_DeInit+0xb4>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a62      	ldr	r2, [pc, #392]	@ (800482c <HAL_GPIO_DeInit+0x200>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d019      	beq.n	80046dc <HAL_GPIO_DeInit+0xb0>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a61      	ldr	r2, [pc, #388]	@ (8004830 <HAL_GPIO_DeInit+0x204>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d013      	beq.n	80046d8 <HAL_GPIO_DeInit+0xac>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a60      	ldr	r2, [pc, #384]	@ (8004834 <HAL_GPIO_DeInit+0x208>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d00d      	beq.n	80046d4 <HAL_GPIO_DeInit+0xa8>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a5f      	ldr	r2, [pc, #380]	@ (8004838 <HAL_GPIO_DeInit+0x20c>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d007      	beq.n	80046d0 <HAL_GPIO_DeInit+0xa4>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a5e      	ldr	r2, [pc, #376]	@ (800483c <HAL_GPIO_DeInit+0x210>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d101      	bne.n	80046cc <HAL_GPIO_DeInit+0xa0>
 80046c8:	2309      	movs	r3, #9
 80046ca:	e012      	b.n	80046f2 <HAL_GPIO_DeInit+0xc6>
 80046cc:	230a      	movs	r3, #10
 80046ce:	e010      	b.n	80046f2 <HAL_GPIO_DeInit+0xc6>
 80046d0:	2308      	movs	r3, #8
 80046d2:	e00e      	b.n	80046f2 <HAL_GPIO_DeInit+0xc6>
 80046d4:	2307      	movs	r3, #7
 80046d6:	e00c      	b.n	80046f2 <HAL_GPIO_DeInit+0xc6>
 80046d8:	2306      	movs	r3, #6
 80046da:	e00a      	b.n	80046f2 <HAL_GPIO_DeInit+0xc6>
 80046dc:	2305      	movs	r3, #5
 80046de:	e008      	b.n	80046f2 <HAL_GPIO_DeInit+0xc6>
 80046e0:	2304      	movs	r3, #4
 80046e2:	e006      	b.n	80046f2 <HAL_GPIO_DeInit+0xc6>
 80046e4:	2303      	movs	r3, #3
 80046e6:	e004      	b.n	80046f2 <HAL_GPIO_DeInit+0xc6>
 80046e8:	2302      	movs	r3, #2
 80046ea:	e002      	b.n	80046f2 <HAL_GPIO_DeInit+0xc6>
 80046ec:	2301      	movs	r3, #1
 80046ee:	e000      	b.n	80046f2 <HAL_GPIO_DeInit+0xc6>
 80046f0:	2300      	movs	r3, #0
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	f002 0203 	and.w	r2, r2, #3
 80046f8:	0092      	lsls	r2, r2, #2
 80046fa:	4093      	lsls	r3, r2
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d136      	bne.n	8004770 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	43db      	mvns	r3, r3
 800470a:	401a      	ands	r2, r3
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	43db      	mvns	r3, r3
 8004718:	401a      	ands	r2, r3
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800471e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	43db      	mvns	r3, r3
 8004728:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800472c:	4013      	ands	r3, r2
 800472e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8004730:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	43db      	mvns	r3, r3
 800473a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800473e:	4013      	ands	r3, r2
 8004740:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f003 0303 	and.w	r3, r3, #3
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	220f      	movs	r2, #15
 800474c:	fa02 f303 	lsl.w	r3, r2, r3
 8004750:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004752:	4a30      	ldr	r2, [pc, #192]	@ (8004814 <HAL_GPIO_DeInit+0x1e8>)
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	089b      	lsrs	r3, r3, #2
 8004758:	3302      	adds	r3, #2
 800475a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	43da      	mvns	r2, r3
 8004762:	482c      	ldr	r0, [pc, #176]	@ (8004814 <HAL_GPIO_DeInit+0x1e8>)
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	089b      	lsrs	r3, r3, #2
 8004768:	400a      	ands	r2, r1
 800476a:	3302      	adds	r3, #2
 800476c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	2103      	movs	r1, #3
 800477a:	fa01 f303 	lsl.w	r3, r1, r3
 800477e:	431a      	orrs	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	08da      	lsrs	r2, r3, #3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	3208      	adds	r2, #8
 800478c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	f003 0307 	and.w	r3, r3, #7
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	220f      	movs	r2, #15
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	43db      	mvns	r3, r3
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	08d2      	lsrs	r2, r2, #3
 80047a4:	4019      	ands	r1, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	3208      	adds	r2, #8
 80047aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68da      	ldr	r2, [r3, #12]
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	2103      	movs	r1, #3
 80047b8:	fa01 f303 	lsl.w	r3, r1, r3
 80047bc:	43db      	mvns	r3, r3
 80047be:	401a      	ands	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	2101      	movs	r1, #1
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	fa01 f303 	lsl.w	r3, r1, r3
 80047d0:	43db      	mvns	r3, r3
 80047d2:	401a      	ands	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	2103      	movs	r1, #3
 80047e2:	fa01 f303 	lsl.w	r3, r1, r3
 80047e6:	43db      	mvns	r3, r3
 80047e8:	401a      	ands	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	609a      	str	r2, [r3, #8]
    }

    position++;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	3301      	adds	r3, #1
 80047f2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	fa22 f303 	lsr.w	r3, r2, r3
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f47f af1f 	bne.w	8004640 <HAL_GPIO_DeInit+0x14>
  }
}
 8004802:	bf00      	nop
 8004804:	bf00      	nop
 8004806:	371c      	adds	r7, #28
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	58000080 	.word	0x58000080
 8004814:	58000400 	.word	0x58000400
 8004818:	58020000 	.word	0x58020000
 800481c:	58020400 	.word	0x58020400
 8004820:	58020800 	.word	0x58020800
 8004824:	58020c00 	.word	0x58020c00
 8004828:	58021000 	.word	0x58021000
 800482c:	58021400 	.word	0x58021400
 8004830:	58021800 	.word	0x58021800
 8004834:	58021c00 	.word	0x58021c00
 8004838:	58022000 	.word	0x58022000
 800483c:	58022400 	.word	0x58022400

08004840 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	460b      	mov	r3, r1
 800484a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	691a      	ldr	r2, [r3, #16]
 8004850:	887b      	ldrh	r3, [r7, #2]
 8004852:	4013      	ands	r3, r2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d002      	beq.n	800485e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004858:	2301      	movs	r3, #1
 800485a:	73fb      	strb	r3, [r7, #15]
 800485c:	e001      	b.n	8004862 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800485e:	2300      	movs	r3, #0
 8004860:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004862:	7bfb      	ldrb	r3, [r7, #15]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3714      	adds	r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	460b      	mov	r3, r1
 800487a:	807b      	strh	r3, [r7, #2]
 800487c:	4613      	mov	r3, r2
 800487e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004880:	787b      	ldrb	r3, [r7, #1]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004886:	887a      	ldrh	r2, [r7, #2]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800488c:	e003      	b.n	8004896 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800488e:	887b      	ldrh	r3, [r7, #2]
 8004890:	041a      	lsls	r2, r3, #16
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	619a      	str	r2, [r3, #24]
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b085      	sub	sp, #20
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
 80048aa:	460b      	mov	r3, r1
 80048ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80048b4:	887a      	ldrh	r2, [r7, #2]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	4013      	ands	r3, r2
 80048ba:	041a      	lsls	r2, r3, #16
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	43d9      	mvns	r1, r3
 80048c0:	887b      	ldrh	r3, [r7, #2]
 80048c2:	400b      	ands	r3, r1
 80048c4:	431a      	orrs	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	619a      	str	r2, [r3, #24]
}
 80048ca:	bf00      	nop
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
	...

080048d8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80048e0:	4b19      	ldr	r3, [pc, #100]	@ (8004948 <HAL_PWREx_ConfigSupply+0x70>)
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b04      	cmp	r3, #4
 80048ea:	d00a      	beq.n	8004902 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80048ec:	4b16      	ldr	r3, [pc, #88]	@ (8004948 <HAL_PWREx_ConfigSupply+0x70>)
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f003 0307 	and.w	r3, r3, #7
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d001      	beq.n	80048fe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e01f      	b.n	800493e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80048fe:	2300      	movs	r3, #0
 8004900:	e01d      	b.n	800493e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004902:	4b11      	ldr	r3, [pc, #68]	@ (8004948 <HAL_PWREx_ConfigSupply+0x70>)
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	f023 0207 	bic.w	r2, r3, #7
 800490a:	490f      	ldr	r1, [pc, #60]	@ (8004948 <HAL_PWREx_ConfigSupply+0x70>)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4313      	orrs	r3, r2
 8004910:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004912:	f7ff f83b 	bl	800398c <HAL_GetTick>
 8004916:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004918:	e009      	b.n	800492e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800491a:	f7ff f837 	bl	800398c <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004928:	d901      	bls.n	800492e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e007      	b.n	800493e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800492e:	4b06      	ldr	r3, [pc, #24]	@ (8004948 <HAL_PWREx_ConfigSupply+0x70>)
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004936:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800493a:	d1ee      	bne.n	800491a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	58024800 	.word	0x58024800

0800494c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b08c      	sub	sp, #48	@ 0x30
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d102      	bne.n	8004960 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	f000 bc48 	b.w	80051f0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 8088 	beq.w	8004a7e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800496e:	4b99      	ldr	r3, [pc, #612]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004976:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004978:	4b96      	ldr	r3, [pc, #600]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 800497a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800497c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800497e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004980:	2b10      	cmp	r3, #16
 8004982:	d007      	beq.n	8004994 <HAL_RCC_OscConfig+0x48>
 8004984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004986:	2b18      	cmp	r3, #24
 8004988:	d111      	bne.n	80049ae <HAL_RCC_OscConfig+0x62>
 800498a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800498c:	f003 0303 	and.w	r3, r3, #3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d10c      	bne.n	80049ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004994:	4b8f      	ldr	r3, [pc, #572]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d06d      	beq.n	8004a7c <HAL_RCC_OscConfig+0x130>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d169      	bne.n	8004a7c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	f000 bc21 	b.w	80051f0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049b6:	d106      	bne.n	80049c6 <HAL_RCC_OscConfig+0x7a>
 80049b8:	4b86      	ldr	r3, [pc, #536]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a85      	ldr	r2, [pc, #532]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 80049be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049c2:	6013      	str	r3, [r2, #0]
 80049c4:	e02e      	b.n	8004a24 <HAL_RCC_OscConfig+0xd8>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10c      	bne.n	80049e8 <HAL_RCC_OscConfig+0x9c>
 80049ce:	4b81      	ldr	r3, [pc, #516]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a80      	ldr	r2, [pc, #512]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 80049d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049d8:	6013      	str	r3, [r2, #0]
 80049da:	4b7e      	ldr	r3, [pc, #504]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a7d      	ldr	r2, [pc, #500]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 80049e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049e4:	6013      	str	r3, [r2, #0]
 80049e6:	e01d      	b.n	8004a24 <HAL_RCC_OscConfig+0xd8>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049f0:	d10c      	bne.n	8004a0c <HAL_RCC_OscConfig+0xc0>
 80049f2:	4b78      	ldr	r3, [pc, #480]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a77      	ldr	r2, [pc, #476]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 80049f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049fc:	6013      	str	r3, [r2, #0]
 80049fe:	4b75      	ldr	r3, [pc, #468]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a74      	ldr	r2, [pc, #464]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004a04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a08:	6013      	str	r3, [r2, #0]
 8004a0a:	e00b      	b.n	8004a24 <HAL_RCC_OscConfig+0xd8>
 8004a0c:	4b71      	ldr	r3, [pc, #452]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a70      	ldr	r2, [pc, #448]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004a12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a16:	6013      	str	r3, [r2, #0]
 8004a18:	4b6e      	ldr	r3, [pc, #440]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a6d      	ldr	r2, [pc, #436]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004a1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d013      	beq.n	8004a54 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a2c:	f7fe ffae 	bl	800398c <HAL_GetTick>
 8004a30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a32:	e008      	b.n	8004a46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a34:	f7fe ffaa 	bl	800398c <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b64      	cmp	r3, #100	@ 0x64
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e3d4      	b.n	80051f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a46:	4b63      	ldr	r3, [pc, #396]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d0f0      	beq.n	8004a34 <HAL_RCC_OscConfig+0xe8>
 8004a52:	e014      	b.n	8004a7e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a54:	f7fe ff9a 	bl	800398c <HAL_GetTick>
 8004a58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a5c:	f7fe ff96 	bl	800398c <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b64      	cmp	r3, #100	@ 0x64
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e3c0      	b.n	80051f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a6e:	4b59      	ldr	r3, [pc, #356]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1f0      	bne.n	8004a5c <HAL_RCC_OscConfig+0x110>
 8004a7a:	e000      	b.n	8004a7e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 80ca 	beq.w	8004c20 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a8c:	4b51      	ldr	r3, [pc, #324]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a94:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a96:	4b4f      	ldr	r3, [pc, #316]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a9a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004a9c:	6a3b      	ldr	r3, [r7, #32]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d007      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x166>
 8004aa2:	6a3b      	ldr	r3, [r7, #32]
 8004aa4:	2b18      	cmp	r3, #24
 8004aa6:	d156      	bne.n	8004b56 <HAL_RCC_OscConfig+0x20a>
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	f003 0303 	and.w	r3, r3, #3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d151      	bne.n	8004b56 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ab2:	4b48      	ldr	r3, [pc, #288]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0304 	and.w	r3, r3, #4
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d005      	beq.n	8004aca <HAL_RCC_OscConfig+0x17e>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e392      	b.n	80051f0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004aca:	4b42      	ldr	r3, [pc, #264]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f023 0219 	bic.w	r2, r3, #25
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	493f      	ldr	r1, [pc, #252]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004adc:	f7fe ff56 	bl	800398c <HAL_GetTick>
 8004ae0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ae4:	f7fe ff52 	bl	800398c <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e37c      	b.n	80051f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004af6:	4b37      	ldr	r3, [pc, #220]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0304 	and.w	r3, r3, #4
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d0f0      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b02:	f7fe ff73 	bl	80039ec <HAL_GetREVID>
 8004b06:	4603      	mov	r3, r0
 8004b08:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d817      	bhi.n	8004b40 <HAL_RCC_OscConfig+0x1f4>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	2b40      	cmp	r3, #64	@ 0x40
 8004b16:	d108      	bne.n	8004b2a <HAL_RCC_OscConfig+0x1de>
 8004b18:	4b2e      	ldr	r3, [pc, #184]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004b20:	4a2c      	ldr	r2, [pc, #176]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004b22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b26:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b28:	e07a      	b.n	8004c20 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b2a:	4b2a      	ldr	r3, [pc, #168]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	031b      	lsls	r3, r3, #12
 8004b38:	4926      	ldr	r1, [pc, #152]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b3e:	e06f      	b.n	8004c20 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b40:	4b24      	ldr	r3, [pc, #144]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	061b      	lsls	r3, r3, #24
 8004b4e:	4921      	ldr	r1, [pc, #132]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b54:	e064      	b.n	8004c20 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d047      	beq.n	8004bee <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f023 0219 	bic.w	r2, r3, #25
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	491a      	ldr	r1, [pc, #104]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b70:	f7fe ff0c 	bl	800398c <HAL_GetTick>
 8004b74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b76:	e008      	b.n	8004b8a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b78:	f7fe ff08 	bl	800398c <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e332      	b.n	80051f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b8a:	4b12      	ldr	r3, [pc, #72]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0304 	and.w	r3, r3, #4
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d0f0      	beq.n	8004b78 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b96:	f7fe ff29 	bl	80039ec <HAL_GetREVID>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d819      	bhi.n	8004bd8 <HAL_RCC_OscConfig+0x28c>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	2b40      	cmp	r3, #64	@ 0x40
 8004baa:	d108      	bne.n	8004bbe <HAL_RCC_OscConfig+0x272>
 8004bac:	4b09      	ldr	r3, [pc, #36]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004bb4:	4a07      	ldr	r2, [pc, #28]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004bb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bba:	6053      	str	r3, [r2, #4]
 8004bbc:	e030      	b.n	8004c20 <HAL_RCC_OscConfig+0x2d4>
 8004bbe:	4b05      	ldr	r3, [pc, #20]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	031b      	lsls	r3, r3, #12
 8004bcc:	4901      	ldr	r1, [pc, #4]	@ (8004bd4 <HAL_RCC_OscConfig+0x288>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	604b      	str	r3, [r1, #4]
 8004bd2:	e025      	b.n	8004c20 <HAL_RCC_OscConfig+0x2d4>
 8004bd4:	58024400 	.word	0x58024400
 8004bd8:	4b9a      	ldr	r3, [pc, #616]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	061b      	lsls	r3, r3, #24
 8004be6:	4997      	ldr	r1, [pc, #604]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	604b      	str	r3, [r1, #4]
 8004bec:	e018      	b.n	8004c20 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bee:	4b95      	ldr	r3, [pc, #596]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a94      	ldr	r2, [pc, #592]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004bf4:	f023 0301 	bic.w	r3, r3, #1
 8004bf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bfa:	f7fe fec7 	bl	800398c <HAL_GetTick>
 8004bfe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c00:	e008      	b.n	8004c14 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c02:	f7fe fec3 	bl	800398c <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e2ed      	b.n	80051f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c14:	4b8b      	ldr	r3, [pc, #556]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0304 	and.w	r3, r3, #4
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1f0      	bne.n	8004c02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0310 	and.w	r3, r3, #16
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 80a9 	beq.w	8004d80 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c2e:	4b85      	ldr	r3, [pc, #532]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c36:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c38:	4b82      	ldr	r3, [pc, #520]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c3c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	2b08      	cmp	r3, #8
 8004c42:	d007      	beq.n	8004c54 <HAL_RCC_OscConfig+0x308>
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	2b18      	cmp	r3, #24
 8004c48:	d13a      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x374>
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f003 0303 	and.w	r3, r3, #3
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d135      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c54:	4b7b      	ldr	r3, [pc, #492]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d005      	beq.n	8004c6c <HAL_RCC_OscConfig+0x320>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	69db      	ldr	r3, [r3, #28]
 8004c64:	2b80      	cmp	r3, #128	@ 0x80
 8004c66:	d001      	beq.n	8004c6c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e2c1      	b.n	80051f0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c6c:	f7fe febe 	bl	80039ec <HAL_GetREVID>
 8004c70:	4603      	mov	r3, r0
 8004c72:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d817      	bhi.n	8004caa <HAL_RCC_OscConfig+0x35e>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	2b20      	cmp	r3, #32
 8004c80:	d108      	bne.n	8004c94 <HAL_RCC_OscConfig+0x348>
 8004c82:	4b70      	ldr	r3, [pc, #448]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004c8a:	4a6e      	ldr	r2, [pc, #440]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004c8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c90:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c92:	e075      	b.n	8004d80 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c94:	4b6b      	ldr	r3, [pc, #428]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a1b      	ldr	r3, [r3, #32]
 8004ca0:	069b      	lsls	r3, r3, #26
 8004ca2:	4968      	ldr	r1, [pc, #416]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ca8:	e06a      	b.n	8004d80 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004caa:	4b66      	ldr	r3, [pc, #408]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	061b      	lsls	r3, r3, #24
 8004cb8:	4962      	ldr	r1, [pc, #392]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004cbe:	e05f      	b.n	8004d80 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	69db      	ldr	r3, [r3, #28]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d042      	beq.n	8004d4e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004cc8:	4b5e      	ldr	r3, [pc, #376]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a5d      	ldr	r2, [pc, #372]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004cce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd4:	f7fe fe5a 	bl	800398c <HAL_GetTick>
 8004cd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004cdc:	f7fe fe56 	bl	800398c <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e280      	b.n	80051f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004cee:	4b55      	ldr	r3, [pc, #340]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d0f0      	beq.n	8004cdc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cfa:	f7fe fe77 	bl	80039ec <HAL_GetREVID>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d817      	bhi.n	8004d38 <HAL_RCC_OscConfig+0x3ec>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	2b20      	cmp	r3, #32
 8004d0e:	d108      	bne.n	8004d22 <HAL_RCC_OscConfig+0x3d6>
 8004d10:	4b4c      	ldr	r3, [pc, #304]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004d18:	4a4a      	ldr	r2, [pc, #296]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004d1a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d1e:	6053      	str	r3, [r2, #4]
 8004d20:	e02e      	b.n	8004d80 <HAL_RCC_OscConfig+0x434>
 8004d22:	4b48      	ldr	r3, [pc, #288]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	069b      	lsls	r3, r3, #26
 8004d30:	4944      	ldr	r1, [pc, #272]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	604b      	str	r3, [r1, #4]
 8004d36:	e023      	b.n	8004d80 <HAL_RCC_OscConfig+0x434>
 8004d38:	4b42      	ldr	r3, [pc, #264]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	061b      	lsls	r3, r3, #24
 8004d46:	493f      	ldr	r1, [pc, #252]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	60cb      	str	r3, [r1, #12]
 8004d4c:	e018      	b.n	8004d80 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004d4e:	4b3d      	ldr	r3, [pc, #244]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a3c      	ldr	r2, [pc, #240]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004d54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d5a:	f7fe fe17 	bl	800398c <HAL_GetTick>
 8004d5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d60:	e008      	b.n	8004d74 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004d62:	f7fe fe13 	bl	800398c <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e23d      	b.n	80051f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d74:	4b33      	ldr	r3, [pc, #204]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1f0      	bne.n	8004d62 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0308 	and.w	r3, r3, #8
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d036      	beq.n	8004dfa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d019      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d94:	4b2b      	ldr	r3, [pc, #172]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004d96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d98:	4a2a      	ldr	r2, [pc, #168]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004d9a:	f043 0301 	orr.w	r3, r3, #1
 8004d9e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da0:	f7fe fdf4 	bl	800398c <HAL_GetTick>
 8004da4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004da6:	e008      	b.n	8004dba <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004da8:	f7fe fdf0 	bl	800398c <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e21a      	b.n	80051f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004dba:	4b22      	ldr	r3, [pc, #136]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004dbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d0f0      	beq.n	8004da8 <HAL_RCC_OscConfig+0x45c>
 8004dc6:	e018      	b.n	8004dfa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004dca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dcc:	4a1d      	ldr	r2, [pc, #116]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004dce:	f023 0301 	bic.w	r3, r3, #1
 8004dd2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dd4:	f7fe fdda 	bl	800398c <HAL_GetTick>
 8004dd8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004dda:	e008      	b.n	8004dee <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ddc:	f7fe fdd6 	bl	800398c <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e200      	b.n	80051f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004dee:	4b15      	ldr	r3, [pc, #84]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004df0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1f0      	bne.n	8004ddc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0320 	and.w	r3, r3, #32
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d039      	beq.n	8004e7a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d01c      	beq.n	8004e48 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a0c      	ldr	r2, [pc, #48]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004e14:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004e18:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e1a:	f7fe fdb7 	bl	800398c <HAL_GetTick>
 8004e1e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e20:	e008      	b.n	8004e34 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e22:	f7fe fdb3 	bl	800398c <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e1dd      	b.n	80051f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004e34:	4b03      	ldr	r3, [pc, #12]	@ (8004e44 <HAL_RCC_OscConfig+0x4f8>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d0f0      	beq.n	8004e22 <HAL_RCC_OscConfig+0x4d6>
 8004e40:	e01b      	b.n	8004e7a <HAL_RCC_OscConfig+0x52e>
 8004e42:	bf00      	nop
 8004e44:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e48:	4b9b      	ldr	r3, [pc, #620]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a9a      	ldr	r2, [pc, #616]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004e4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e52:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e54:	f7fe fd9a 	bl	800398c <HAL_GetTick>
 8004e58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e5c:	f7fe fd96 	bl	800398c <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e1c0      	b.n	80051f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e6e:	4b92      	ldr	r3, [pc, #584]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1f0      	bne.n	8004e5c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0304 	and.w	r3, r3, #4
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f000 8081 	beq.w	8004f8a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e88:	4b8c      	ldr	r3, [pc, #560]	@ (80050bc <HAL_RCC_OscConfig+0x770>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a8b      	ldr	r2, [pc, #556]	@ (80050bc <HAL_RCC_OscConfig+0x770>)
 8004e8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e94:	f7fe fd7a 	bl	800398c <HAL_GetTick>
 8004e98:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e9c:	f7fe fd76 	bl	800398c <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b64      	cmp	r3, #100	@ 0x64
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e1a0      	b.n	80051f0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004eae:	4b83      	ldr	r3, [pc, #524]	@ (80050bc <HAL_RCC_OscConfig+0x770>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d0f0      	beq.n	8004e9c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d106      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x584>
 8004ec2:	4b7d      	ldr	r3, [pc, #500]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ec6:	4a7c      	ldr	r2, [pc, #496]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004ec8:	f043 0301 	orr.w	r3, r3, #1
 8004ecc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ece:	e02d      	b.n	8004f2c <HAL_RCC_OscConfig+0x5e0>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10c      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x5a6>
 8004ed8:	4b77      	ldr	r3, [pc, #476]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004eda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004edc:	4a76      	ldr	r2, [pc, #472]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004ede:	f023 0301 	bic.w	r3, r3, #1
 8004ee2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ee4:	4b74      	ldr	r3, [pc, #464]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004ee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee8:	4a73      	ldr	r2, [pc, #460]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004eea:	f023 0304 	bic.w	r3, r3, #4
 8004eee:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ef0:	e01c      	b.n	8004f2c <HAL_RCC_OscConfig+0x5e0>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	2b05      	cmp	r3, #5
 8004ef8:	d10c      	bne.n	8004f14 <HAL_RCC_OscConfig+0x5c8>
 8004efa:	4b6f      	ldr	r3, [pc, #444]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004efe:	4a6e      	ldr	r2, [pc, #440]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004f00:	f043 0304 	orr.w	r3, r3, #4
 8004f04:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f06:	4b6c      	ldr	r3, [pc, #432]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004f08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f0a:	4a6b      	ldr	r2, [pc, #428]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004f0c:	f043 0301 	orr.w	r3, r3, #1
 8004f10:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f12:	e00b      	b.n	8004f2c <HAL_RCC_OscConfig+0x5e0>
 8004f14:	4b68      	ldr	r3, [pc, #416]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f18:	4a67      	ldr	r2, [pc, #412]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004f1a:	f023 0301 	bic.w	r3, r3, #1
 8004f1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f20:	4b65      	ldr	r3, [pc, #404]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004f22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f24:	4a64      	ldr	r2, [pc, #400]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004f26:	f023 0304 	bic.w	r3, r3, #4
 8004f2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d015      	beq.n	8004f60 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f34:	f7fe fd2a 	bl	800398c <HAL_GetTick>
 8004f38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f3a:	e00a      	b.n	8004f52 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f3c:	f7fe fd26 	bl	800398c <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e14e      	b.n	80051f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f52:	4b59      	ldr	r3, [pc, #356]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d0ee      	beq.n	8004f3c <HAL_RCC_OscConfig+0x5f0>
 8004f5e:	e014      	b.n	8004f8a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f60:	f7fe fd14 	bl	800398c <HAL_GetTick>
 8004f64:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f66:	e00a      	b.n	8004f7e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f68:	f7fe fd10 	bl	800398c <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e138      	b.n	80051f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f7e:	4b4e      	ldr	r3, [pc, #312]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1ee      	bne.n	8004f68 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f000 812d 	beq.w	80051ee <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004f94:	4b48      	ldr	r3, [pc, #288]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f9c:	2b18      	cmp	r3, #24
 8004f9e:	f000 80bd 	beq.w	800511c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	f040 809e 	bne.w	80050e8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fac:	4b42      	ldr	r3, [pc, #264]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a41      	ldr	r2, [pc, #260]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004fb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb8:	f7fe fce8 	bl	800398c <HAL_GetTick>
 8004fbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004fbe:	e008      	b.n	8004fd2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fc0:	f7fe fce4 	bl	800398c <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e10e      	b.n	80051f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004fd2:	4b39      	ldr	r3, [pc, #228]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1f0      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fde:	4b36      	ldr	r3, [pc, #216]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004fe0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004fe2:	4b37      	ldr	r3, [pc, #220]	@ (80050c0 <HAL_RCC_OscConfig+0x774>)
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004fee:	0112      	lsls	r2, r2, #4
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	4931      	ldr	r1, [pc, #196]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	628b      	str	r3, [r1, #40]	@ 0x28
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005006:	3b01      	subs	r3, #1
 8005008:	025b      	lsls	r3, r3, #9
 800500a:	b29b      	uxth	r3, r3
 800500c:	431a      	orrs	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005012:	3b01      	subs	r3, #1
 8005014:	041b      	lsls	r3, r3, #16
 8005016:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800501a:	431a      	orrs	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005020:	3b01      	subs	r3, #1
 8005022:	061b      	lsls	r3, r3, #24
 8005024:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005028:	4923      	ldr	r1, [pc, #140]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 800502a:	4313      	orrs	r3, r2
 800502c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800502e:	4b22      	ldr	r3, [pc, #136]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8005030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005032:	4a21      	ldr	r2, [pc, #132]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8005034:	f023 0301 	bic.w	r3, r3, #1
 8005038:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800503a:	4b1f      	ldr	r3, [pc, #124]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 800503c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800503e:	4b21      	ldr	r3, [pc, #132]	@ (80050c4 <HAL_RCC_OscConfig+0x778>)
 8005040:	4013      	ands	r3, r2
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005046:	00d2      	lsls	r2, r2, #3
 8005048:	491b      	ldr	r1, [pc, #108]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 800504a:	4313      	orrs	r3, r2
 800504c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800504e:	4b1a      	ldr	r3, [pc, #104]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8005050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005052:	f023 020c 	bic.w	r2, r3, #12
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505a:	4917      	ldr	r1, [pc, #92]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 800505c:	4313      	orrs	r3, r2
 800505e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005060:	4b15      	ldr	r3, [pc, #84]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8005062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005064:	f023 0202 	bic.w	r2, r3, #2
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800506c:	4912      	ldr	r1, [pc, #72]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 800506e:	4313      	orrs	r3, r2
 8005070:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005072:	4b11      	ldr	r3, [pc, #68]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8005074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005076:	4a10      	ldr	r2, [pc, #64]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8005078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800507c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800507e:	4b0e      	ldr	r3, [pc, #56]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8005080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005082:	4a0d      	ldr	r2, [pc, #52]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8005084:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005088:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800508a:	4b0b      	ldr	r3, [pc, #44]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 800508c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508e:	4a0a      	ldr	r2, [pc, #40]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8005090:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005094:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005096:	4b08      	ldr	r3, [pc, #32]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 8005098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509a:	4a07      	ldr	r2, [pc, #28]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 800509c:	f043 0301 	orr.w	r3, r3, #1
 80050a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050a2:	4b05      	ldr	r3, [pc, #20]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a04      	ldr	r2, [pc, #16]	@ (80050b8 <HAL_RCC_OscConfig+0x76c>)
 80050a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ae:	f7fe fc6d 	bl	800398c <HAL_GetTick>
 80050b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050b4:	e011      	b.n	80050da <HAL_RCC_OscConfig+0x78e>
 80050b6:	bf00      	nop
 80050b8:	58024400 	.word	0x58024400
 80050bc:	58024800 	.word	0x58024800
 80050c0:	fffffc0c 	.word	0xfffffc0c
 80050c4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050c8:	f7fe fc60 	bl	800398c <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e08a      	b.n	80051f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050da:	4b47      	ldr	r3, [pc, #284]	@ (80051f8 <HAL_RCC_OscConfig+0x8ac>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d0f0      	beq.n	80050c8 <HAL_RCC_OscConfig+0x77c>
 80050e6:	e082      	b.n	80051ee <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050e8:	4b43      	ldr	r3, [pc, #268]	@ (80051f8 <HAL_RCC_OscConfig+0x8ac>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a42      	ldr	r2, [pc, #264]	@ (80051f8 <HAL_RCC_OscConfig+0x8ac>)
 80050ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f4:	f7fe fc4a 	bl	800398c <HAL_GetTick>
 80050f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050fa:	e008      	b.n	800510e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050fc:	f7fe fc46 	bl	800398c <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b02      	cmp	r3, #2
 8005108:	d901      	bls.n	800510e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e070      	b.n	80051f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800510e:	4b3a      	ldr	r3, [pc, #232]	@ (80051f8 <HAL_RCC_OscConfig+0x8ac>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1f0      	bne.n	80050fc <HAL_RCC_OscConfig+0x7b0>
 800511a:	e068      	b.n	80051ee <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800511c:	4b36      	ldr	r3, [pc, #216]	@ (80051f8 <HAL_RCC_OscConfig+0x8ac>)
 800511e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005120:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005122:	4b35      	ldr	r3, [pc, #212]	@ (80051f8 <HAL_RCC_OscConfig+0x8ac>)
 8005124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005126:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512c:	2b01      	cmp	r3, #1
 800512e:	d031      	beq.n	8005194 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	f003 0203 	and.w	r2, r3, #3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800513a:	429a      	cmp	r2, r3
 800513c:	d12a      	bne.n	8005194 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	091b      	lsrs	r3, r3, #4
 8005142:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800514a:	429a      	cmp	r2, r3
 800514c:	d122      	bne.n	8005194 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005158:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800515a:	429a      	cmp	r2, r3
 800515c:	d11a      	bne.n	8005194 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	0a5b      	lsrs	r3, r3, #9
 8005162:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800516a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800516c:	429a      	cmp	r2, r3
 800516e:	d111      	bne.n	8005194 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	0c1b      	lsrs	r3, r3, #16
 8005174:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800517c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800517e:	429a      	cmp	r2, r3
 8005180:	d108      	bne.n	8005194 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	0e1b      	lsrs	r3, r3, #24
 8005186:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800518e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005190:	429a      	cmp	r2, r3
 8005192:	d001      	beq.n	8005198 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e02b      	b.n	80051f0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005198:	4b17      	ldr	r3, [pc, #92]	@ (80051f8 <HAL_RCC_OscConfig+0x8ac>)
 800519a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800519c:	08db      	lsrs	r3, r3, #3
 800519e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051a2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d01f      	beq.n	80051ee <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80051ae:	4b12      	ldr	r3, [pc, #72]	@ (80051f8 <HAL_RCC_OscConfig+0x8ac>)
 80051b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b2:	4a11      	ldr	r2, [pc, #68]	@ (80051f8 <HAL_RCC_OscConfig+0x8ac>)
 80051b4:	f023 0301 	bic.w	r3, r3, #1
 80051b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051ba:	f7fe fbe7 	bl	800398c <HAL_GetTick>
 80051be:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80051c0:	bf00      	nop
 80051c2:	f7fe fbe3 	bl	800398c <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d0f9      	beq.n	80051c2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80051ce:	4b0a      	ldr	r3, [pc, #40]	@ (80051f8 <HAL_RCC_OscConfig+0x8ac>)
 80051d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051d2:	4b0a      	ldr	r3, [pc, #40]	@ (80051fc <HAL_RCC_OscConfig+0x8b0>)
 80051d4:	4013      	ands	r3, r2
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80051da:	00d2      	lsls	r2, r2, #3
 80051dc:	4906      	ldr	r1, [pc, #24]	@ (80051f8 <HAL_RCC_OscConfig+0x8ac>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80051e2:	4b05      	ldr	r3, [pc, #20]	@ (80051f8 <HAL_RCC_OscConfig+0x8ac>)
 80051e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e6:	4a04      	ldr	r2, [pc, #16]	@ (80051f8 <HAL_RCC_OscConfig+0x8ac>)
 80051e8:	f043 0301 	orr.w	r3, r3, #1
 80051ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3730      	adds	r7, #48	@ 0x30
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	58024400 	.word	0x58024400
 80051fc:	ffff0007 	.word	0xffff0007

08005200 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d101      	bne.n	8005214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e19c      	b.n	800554e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005214:	4b8a      	ldr	r3, [pc, #552]	@ (8005440 <HAL_RCC_ClockConfig+0x240>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 030f 	and.w	r3, r3, #15
 800521c:	683a      	ldr	r2, [r7, #0]
 800521e:	429a      	cmp	r2, r3
 8005220:	d910      	bls.n	8005244 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005222:	4b87      	ldr	r3, [pc, #540]	@ (8005440 <HAL_RCC_ClockConfig+0x240>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f023 020f 	bic.w	r2, r3, #15
 800522a:	4985      	ldr	r1, [pc, #532]	@ (8005440 <HAL_RCC_ClockConfig+0x240>)
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	4313      	orrs	r3, r2
 8005230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005232:	4b83      	ldr	r3, [pc, #524]	@ (8005440 <HAL_RCC_ClockConfig+0x240>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 030f 	and.w	r3, r3, #15
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	429a      	cmp	r2, r3
 800523e:	d001      	beq.n	8005244 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e184      	b.n	800554e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b00      	cmp	r3, #0
 800524e:	d010      	beq.n	8005272 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	691a      	ldr	r2, [r3, #16]
 8005254:	4b7b      	ldr	r3, [pc, #492]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800525c:	429a      	cmp	r2, r3
 800525e:	d908      	bls.n	8005272 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005260:	4b78      	ldr	r3, [pc, #480]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	4975      	ldr	r1, [pc, #468]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 800526e:	4313      	orrs	r3, r2
 8005270:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0308 	and.w	r3, r3, #8
 800527a:	2b00      	cmp	r3, #0
 800527c:	d010      	beq.n	80052a0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	695a      	ldr	r2, [r3, #20]
 8005282:	4b70      	ldr	r3, [pc, #448]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800528a:	429a      	cmp	r2, r3
 800528c:	d908      	bls.n	80052a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800528e:	4b6d      	ldr	r3, [pc, #436]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	496a      	ldr	r1, [pc, #424]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 800529c:	4313      	orrs	r3, r2
 800529e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0310 	and.w	r3, r3, #16
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d010      	beq.n	80052ce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	699a      	ldr	r2, [r3, #24]
 80052b0:	4b64      	ldr	r3, [pc, #400]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 80052b2:	69db      	ldr	r3, [r3, #28]
 80052b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d908      	bls.n	80052ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80052bc:	4b61      	ldr	r3, [pc, #388]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 80052be:	69db      	ldr	r3, [r3, #28]
 80052c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	495e      	ldr	r1, [pc, #376]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0320 	and.w	r3, r3, #32
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d010      	beq.n	80052fc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	69da      	ldr	r2, [r3, #28]
 80052de:	4b59      	ldr	r3, [pc, #356]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d908      	bls.n	80052fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80052ea:	4b56      	ldr	r3, [pc, #344]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	4953      	ldr	r1, [pc, #332]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d010      	beq.n	800532a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68da      	ldr	r2, [r3, #12]
 800530c:	4b4d      	ldr	r3, [pc, #308]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	f003 030f 	and.w	r3, r3, #15
 8005314:	429a      	cmp	r2, r3
 8005316:	d908      	bls.n	800532a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005318:	4b4a      	ldr	r3, [pc, #296]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	f023 020f 	bic.w	r2, r3, #15
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	4947      	ldr	r1, [pc, #284]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 8005326:	4313      	orrs	r3, r2
 8005328:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b00      	cmp	r3, #0
 8005334:	d055      	beq.n	80053e2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005336:	4b43      	ldr	r3, [pc, #268]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	4940      	ldr	r1, [pc, #256]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 8005344:	4313      	orrs	r3, r2
 8005346:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	2b02      	cmp	r3, #2
 800534e:	d107      	bne.n	8005360 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005350:	4b3c      	ldr	r3, [pc, #240]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d121      	bne.n	80053a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e0f6      	b.n	800554e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	2b03      	cmp	r3, #3
 8005366:	d107      	bne.n	8005378 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005368:	4b36      	ldr	r3, [pc, #216]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d115      	bne.n	80053a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e0ea      	b.n	800554e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d107      	bne.n	8005390 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005380:	4b30      	ldr	r3, [pc, #192]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005388:	2b00      	cmp	r3, #0
 800538a:	d109      	bne.n	80053a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e0de      	b.n	800554e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005390:	4b2c      	ldr	r3, [pc, #176]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0304 	and.w	r3, r3, #4
 8005398:	2b00      	cmp	r3, #0
 800539a:	d101      	bne.n	80053a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e0d6      	b.n	800554e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053a0:	4b28      	ldr	r3, [pc, #160]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	f023 0207 	bic.w	r2, r3, #7
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	4925      	ldr	r1, [pc, #148]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053b2:	f7fe faeb 	bl	800398c <HAL_GetTick>
 80053b6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053b8:	e00a      	b.n	80053d0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053ba:	f7fe fae7 	bl	800398c <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d901      	bls.n	80053d0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e0be      	b.n	800554e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053d0:	4b1c      	ldr	r3, [pc, #112]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	00db      	lsls	r3, r3, #3
 80053de:	429a      	cmp	r2, r3
 80053e0:	d1eb      	bne.n	80053ba <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d010      	beq.n	8005410 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68da      	ldr	r2, [r3, #12]
 80053f2:	4b14      	ldr	r3, [pc, #80]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	f003 030f 	and.w	r3, r3, #15
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d208      	bcs.n	8005410 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053fe:	4b11      	ldr	r3, [pc, #68]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	f023 020f 	bic.w	r2, r3, #15
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	490e      	ldr	r1, [pc, #56]	@ (8005444 <HAL_RCC_ClockConfig+0x244>)
 800540c:	4313      	orrs	r3, r2
 800540e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005410:	4b0b      	ldr	r3, [pc, #44]	@ (8005440 <HAL_RCC_ClockConfig+0x240>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 030f 	and.w	r3, r3, #15
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	429a      	cmp	r2, r3
 800541c:	d214      	bcs.n	8005448 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800541e:	4b08      	ldr	r3, [pc, #32]	@ (8005440 <HAL_RCC_ClockConfig+0x240>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f023 020f 	bic.w	r2, r3, #15
 8005426:	4906      	ldr	r1, [pc, #24]	@ (8005440 <HAL_RCC_ClockConfig+0x240>)
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	4313      	orrs	r3, r2
 800542c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800542e:	4b04      	ldr	r3, [pc, #16]	@ (8005440 <HAL_RCC_ClockConfig+0x240>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 030f 	and.w	r3, r3, #15
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	429a      	cmp	r2, r3
 800543a:	d005      	beq.n	8005448 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e086      	b.n	800554e <HAL_RCC_ClockConfig+0x34e>
 8005440:	52002000 	.word	0x52002000
 8005444:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0304 	and.w	r3, r3, #4
 8005450:	2b00      	cmp	r3, #0
 8005452:	d010      	beq.n	8005476 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	691a      	ldr	r2, [r3, #16]
 8005458:	4b3f      	ldr	r3, [pc, #252]	@ (8005558 <HAL_RCC_ClockConfig+0x358>)
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005460:	429a      	cmp	r2, r3
 8005462:	d208      	bcs.n	8005476 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005464:	4b3c      	ldr	r3, [pc, #240]	@ (8005558 <HAL_RCC_ClockConfig+0x358>)
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	4939      	ldr	r1, [pc, #228]	@ (8005558 <HAL_RCC_ClockConfig+0x358>)
 8005472:	4313      	orrs	r3, r2
 8005474:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0308 	and.w	r3, r3, #8
 800547e:	2b00      	cmp	r3, #0
 8005480:	d010      	beq.n	80054a4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	695a      	ldr	r2, [r3, #20]
 8005486:	4b34      	ldr	r3, [pc, #208]	@ (8005558 <HAL_RCC_ClockConfig+0x358>)
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800548e:	429a      	cmp	r2, r3
 8005490:	d208      	bcs.n	80054a4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005492:	4b31      	ldr	r3, [pc, #196]	@ (8005558 <HAL_RCC_ClockConfig+0x358>)
 8005494:	69db      	ldr	r3, [r3, #28]
 8005496:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	492e      	ldr	r1, [pc, #184]	@ (8005558 <HAL_RCC_ClockConfig+0x358>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0310 	and.w	r3, r3, #16
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d010      	beq.n	80054d2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	699a      	ldr	r2, [r3, #24]
 80054b4:	4b28      	ldr	r3, [pc, #160]	@ (8005558 <HAL_RCC_ClockConfig+0x358>)
 80054b6:	69db      	ldr	r3, [r3, #28]
 80054b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80054bc:	429a      	cmp	r2, r3
 80054be:	d208      	bcs.n	80054d2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80054c0:	4b25      	ldr	r3, [pc, #148]	@ (8005558 <HAL_RCC_ClockConfig+0x358>)
 80054c2:	69db      	ldr	r3, [r3, #28]
 80054c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	4922      	ldr	r1, [pc, #136]	@ (8005558 <HAL_RCC_ClockConfig+0x358>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0320 	and.w	r3, r3, #32
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d010      	beq.n	8005500 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	69da      	ldr	r2, [r3, #28]
 80054e2:	4b1d      	ldr	r3, [pc, #116]	@ (8005558 <HAL_RCC_ClockConfig+0x358>)
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d208      	bcs.n	8005500 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80054ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005558 <HAL_RCC_ClockConfig+0x358>)
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	4917      	ldr	r1, [pc, #92]	@ (8005558 <HAL_RCC_ClockConfig+0x358>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005500:	f000 f834 	bl	800556c <HAL_RCC_GetSysClockFreq>
 8005504:	4602      	mov	r2, r0
 8005506:	4b14      	ldr	r3, [pc, #80]	@ (8005558 <HAL_RCC_ClockConfig+0x358>)
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	0a1b      	lsrs	r3, r3, #8
 800550c:	f003 030f 	and.w	r3, r3, #15
 8005510:	4912      	ldr	r1, [pc, #72]	@ (800555c <HAL_RCC_ClockConfig+0x35c>)
 8005512:	5ccb      	ldrb	r3, [r1, r3]
 8005514:	f003 031f 	and.w	r3, r3, #31
 8005518:	fa22 f303 	lsr.w	r3, r2, r3
 800551c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800551e:	4b0e      	ldr	r3, [pc, #56]	@ (8005558 <HAL_RCC_ClockConfig+0x358>)
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	f003 030f 	and.w	r3, r3, #15
 8005526:	4a0d      	ldr	r2, [pc, #52]	@ (800555c <HAL_RCC_ClockConfig+0x35c>)
 8005528:	5cd3      	ldrb	r3, [r2, r3]
 800552a:	f003 031f 	and.w	r3, r3, #31
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	fa22 f303 	lsr.w	r3, r2, r3
 8005534:	4a0a      	ldr	r2, [pc, #40]	@ (8005560 <HAL_RCC_ClockConfig+0x360>)
 8005536:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005538:	4a0a      	ldr	r2, [pc, #40]	@ (8005564 <HAL_RCC_ClockConfig+0x364>)
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800553e:	4b0a      	ldr	r3, [pc, #40]	@ (8005568 <HAL_RCC_ClockConfig+0x368>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4618      	mov	r0, r3
 8005544:	f7fe f9d8 	bl	80038f8 <HAL_InitTick>
 8005548:	4603      	mov	r3, r0
 800554a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800554c:	7bfb      	ldrb	r3, [r7, #15]
}
 800554e:	4618      	mov	r0, r3
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	58024400 	.word	0x58024400
 800555c:	0800de78 	.word	0x0800de78
 8005560:	24000004 	.word	0x24000004
 8005564:	24000000 	.word	0x24000000
 8005568:	24000024 	.word	0x24000024

0800556c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800556c:	b480      	push	{r7}
 800556e:	b089      	sub	sp, #36	@ 0x24
 8005570:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005572:	4bb3      	ldr	r3, [pc, #716]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800557a:	2b18      	cmp	r3, #24
 800557c:	f200 8155 	bhi.w	800582a <HAL_RCC_GetSysClockFreq+0x2be>
 8005580:	a201      	add	r2, pc, #4	@ (adr r2, 8005588 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005586:	bf00      	nop
 8005588:	080055ed 	.word	0x080055ed
 800558c:	0800582b 	.word	0x0800582b
 8005590:	0800582b 	.word	0x0800582b
 8005594:	0800582b 	.word	0x0800582b
 8005598:	0800582b 	.word	0x0800582b
 800559c:	0800582b 	.word	0x0800582b
 80055a0:	0800582b 	.word	0x0800582b
 80055a4:	0800582b 	.word	0x0800582b
 80055a8:	08005613 	.word	0x08005613
 80055ac:	0800582b 	.word	0x0800582b
 80055b0:	0800582b 	.word	0x0800582b
 80055b4:	0800582b 	.word	0x0800582b
 80055b8:	0800582b 	.word	0x0800582b
 80055bc:	0800582b 	.word	0x0800582b
 80055c0:	0800582b 	.word	0x0800582b
 80055c4:	0800582b 	.word	0x0800582b
 80055c8:	08005619 	.word	0x08005619
 80055cc:	0800582b 	.word	0x0800582b
 80055d0:	0800582b 	.word	0x0800582b
 80055d4:	0800582b 	.word	0x0800582b
 80055d8:	0800582b 	.word	0x0800582b
 80055dc:	0800582b 	.word	0x0800582b
 80055e0:	0800582b 	.word	0x0800582b
 80055e4:	0800582b 	.word	0x0800582b
 80055e8:	0800561f 	.word	0x0800561f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055ec:	4b94      	ldr	r3, [pc, #592]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0320 	and.w	r3, r3, #32
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d009      	beq.n	800560c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055f8:	4b91      	ldr	r3, [pc, #580]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	08db      	lsrs	r3, r3, #3
 80055fe:	f003 0303 	and.w	r3, r3, #3
 8005602:	4a90      	ldr	r2, [pc, #576]	@ (8005844 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005604:	fa22 f303 	lsr.w	r3, r2, r3
 8005608:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800560a:	e111      	b.n	8005830 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800560c:	4b8d      	ldr	r3, [pc, #564]	@ (8005844 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800560e:	61bb      	str	r3, [r7, #24]
      break;
 8005610:	e10e      	b.n	8005830 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005612:	4b8d      	ldr	r3, [pc, #564]	@ (8005848 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005614:	61bb      	str	r3, [r7, #24]
      break;
 8005616:	e10b      	b.n	8005830 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005618:	4b8c      	ldr	r3, [pc, #560]	@ (800584c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800561a:	61bb      	str	r3, [r7, #24]
      break;
 800561c:	e108      	b.n	8005830 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800561e:	4b88      	ldr	r3, [pc, #544]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005622:	f003 0303 	and.w	r3, r3, #3
 8005626:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005628:	4b85      	ldr	r3, [pc, #532]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800562a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800562c:	091b      	lsrs	r3, r3, #4
 800562e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005632:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005634:	4b82      	ldr	r3, [pc, #520]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005638:	f003 0301 	and.w	r3, r3, #1
 800563c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800563e:	4b80      	ldr	r3, [pc, #512]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005642:	08db      	lsrs	r3, r3, #3
 8005644:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	fb02 f303 	mul.w	r3, r2, r3
 800564e:	ee07 3a90 	vmov	s15, r3
 8005652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005656:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	2b00      	cmp	r3, #0
 800565e:	f000 80e1 	beq.w	8005824 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	2b02      	cmp	r3, #2
 8005666:	f000 8083 	beq.w	8005770 <HAL_RCC_GetSysClockFreq+0x204>
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	2b02      	cmp	r3, #2
 800566e:	f200 80a1 	bhi.w	80057b4 <HAL_RCC_GetSysClockFreq+0x248>
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d003      	beq.n	8005680 <HAL_RCC_GetSysClockFreq+0x114>
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d056      	beq.n	800572c <HAL_RCC_GetSysClockFreq+0x1c0>
 800567e:	e099      	b.n	80057b4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005680:	4b6f      	ldr	r3, [pc, #444]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0320 	and.w	r3, r3, #32
 8005688:	2b00      	cmp	r3, #0
 800568a:	d02d      	beq.n	80056e8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800568c:	4b6c      	ldr	r3, [pc, #432]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	08db      	lsrs	r3, r3, #3
 8005692:	f003 0303 	and.w	r3, r3, #3
 8005696:	4a6b      	ldr	r2, [pc, #428]	@ (8005844 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005698:	fa22 f303 	lsr.w	r3, r2, r3
 800569c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	ee07 3a90 	vmov	s15, r3
 80056a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	ee07 3a90 	vmov	s15, r3
 80056ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056b6:	4b62      	ldr	r3, [pc, #392]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056be:	ee07 3a90 	vmov	s15, r3
 80056c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80056ca:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005850 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056e2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80056e6:	e087      	b.n	80057f8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	ee07 3a90 	vmov	s15, r3
 80056ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005854 <HAL_RCC_GetSysClockFreq+0x2e8>
 80056f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056fa:	4b51      	ldr	r3, [pc, #324]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005702:	ee07 3a90 	vmov	s15, r3
 8005706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800570a:	ed97 6a02 	vldr	s12, [r7, #8]
 800570e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005850 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800571a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800571e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005726:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800572a:	e065      	b.n	80057f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	ee07 3a90 	vmov	s15, r3
 8005732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005736:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005858 <HAL_RCC_GetSysClockFreq+0x2ec>
 800573a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800573e:	4b40      	ldr	r3, [pc, #256]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005746:	ee07 3a90 	vmov	s15, r3
 800574a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800574e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005752:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005850 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800575a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800575e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800576a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800576e:	e043      	b.n	80057f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	ee07 3a90 	vmov	s15, r3
 8005776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800577a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800585c <HAL_RCC_GetSysClockFreq+0x2f0>
 800577e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005782:	4b2f      	ldr	r3, [pc, #188]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800578a:	ee07 3a90 	vmov	s15, r3
 800578e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005792:	ed97 6a02 	vldr	s12, [r7, #8]
 8005796:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005850 <HAL_RCC_GetSysClockFreq+0x2e4>
 800579a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800579e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80057b2:	e021      	b.n	80057f8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	ee07 3a90 	vmov	s15, r3
 80057ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057be:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005858 <HAL_RCC_GetSysClockFreq+0x2ec>
 80057c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057c6:	4b1e      	ldr	r3, [pc, #120]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ce:	ee07 3a90 	vmov	s15, r3
 80057d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80057da:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005850 <HAL_RCC_GetSysClockFreq+0x2e4>
 80057de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80057f6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80057f8:	4b11      	ldr	r3, [pc, #68]	@ (8005840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057fc:	0a5b      	lsrs	r3, r3, #9
 80057fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005802:	3301      	adds	r3, #1
 8005804:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	ee07 3a90 	vmov	s15, r3
 800580c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005810:	edd7 6a07 	vldr	s13, [r7, #28]
 8005814:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800581c:	ee17 3a90 	vmov	r3, s15
 8005820:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005822:	e005      	b.n	8005830 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005824:	2300      	movs	r3, #0
 8005826:	61bb      	str	r3, [r7, #24]
      break;
 8005828:	e002      	b.n	8005830 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800582a:	4b07      	ldr	r3, [pc, #28]	@ (8005848 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800582c:	61bb      	str	r3, [r7, #24]
      break;
 800582e:	bf00      	nop
  }

  return sysclockfreq;
 8005830:	69bb      	ldr	r3, [r7, #24]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3724      	adds	r7, #36	@ 0x24
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	58024400 	.word	0x58024400
 8005844:	03d09000 	.word	0x03d09000
 8005848:	003d0900 	.word	0x003d0900
 800584c:	017d7840 	.word	0x017d7840
 8005850:	46000000 	.word	0x46000000
 8005854:	4c742400 	.word	0x4c742400
 8005858:	4a742400 	.word	0x4a742400
 800585c:	4bbebc20 	.word	0x4bbebc20

08005860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005866:	f7ff fe81 	bl	800556c <HAL_RCC_GetSysClockFreq>
 800586a:	4602      	mov	r2, r0
 800586c:	4b10      	ldr	r3, [pc, #64]	@ (80058b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	0a1b      	lsrs	r3, r3, #8
 8005872:	f003 030f 	and.w	r3, r3, #15
 8005876:	490f      	ldr	r1, [pc, #60]	@ (80058b4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005878:	5ccb      	ldrb	r3, [r1, r3]
 800587a:	f003 031f 	and.w	r3, r3, #31
 800587e:	fa22 f303 	lsr.w	r3, r2, r3
 8005882:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005884:	4b0a      	ldr	r3, [pc, #40]	@ (80058b0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	f003 030f 	and.w	r3, r3, #15
 800588c:	4a09      	ldr	r2, [pc, #36]	@ (80058b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800588e:	5cd3      	ldrb	r3, [r2, r3]
 8005890:	f003 031f 	and.w	r3, r3, #31
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	fa22 f303 	lsr.w	r3, r2, r3
 800589a:	4a07      	ldr	r2, [pc, #28]	@ (80058b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800589c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800589e:	4a07      	ldr	r2, [pc, #28]	@ (80058bc <HAL_RCC_GetHCLKFreq+0x5c>)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80058a4:	4b04      	ldr	r3, [pc, #16]	@ (80058b8 <HAL_RCC_GetHCLKFreq+0x58>)
 80058a6:	681b      	ldr	r3, [r3, #0]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3708      	adds	r7, #8
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	58024400 	.word	0x58024400
 80058b4:	0800de78 	.word	0x0800de78
 80058b8:	24000004 	.word	0x24000004
 80058bc:	24000000 	.word	0x24000000

080058c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80058c4:	f7ff ffcc 	bl	8005860 <HAL_RCC_GetHCLKFreq>
 80058c8:	4602      	mov	r2, r0
 80058ca:	4b06      	ldr	r3, [pc, #24]	@ (80058e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	091b      	lsrs	r3, r3, #4
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	4904      	ldr	r1, [pc, #16]	@ (80058e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80058d6:	5ccb      	ldrb	r3, [r1, r3]
 80058d8:	f003 031f 	and.w	r3, r3, #31
 80058dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	58024400 	.word	0x58024400
 80058e8:	0800de78 	.word	0x0800de78

080058ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80058f0:	f7ff ffb6 	bl	8005860 <HAL_RCC_GetHCLKFreq>
 80058f4:	4602      	mov	r2, r0
 80058f6:	4b06      	ldr	r3, [pc, #24]	@ (8005910 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	0a1b      	lsrs	r3, r3, #8
 80058fc:	f003 0307 	and.w	r3, r3, #7
 8005900:	4904      	ldr	r1, [pc, #16]	@ (8005914 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005902:	5ccb      	ldrb	r3, [r1, r3]
 8005904:	f003 031f 	and.w	r3, r3, #31
 8005908:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800590c:	4618      	mov	r0, r3
 800590e:	bd80      	pop	{r7, pc}
 8005910:	58024400 	.word	0x58024400
 8005914:	0800de78 	.word	0x0800de78

08005918 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800591c:	b0ca      	sub	sp, #296	@ 0x128
 800591e:	af00      	add	r7, sp, #0
 8005920:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005924:	2300      	movs	r3, #0
 8005926:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800592a:	2300      	movs	r3, #0
 800592c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005938:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800593c:	2500      	movs	r5, #0
 800593e:	ea54 0305 	orrs.w	r3, r4, r5
 8005942:	d049      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005948:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800594a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800594e:	d02f      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005950:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005954:	d828      	bhi.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005956:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800595a:	d01a      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800595c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005960:	d822      	bhi.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005966:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800596a:	d007      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800596c:	e01c      	b.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800596e:	4bb8      	ldr	r3, [pc, #736]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005972:	4ab7      	ldr	r2, [pc, #732]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005974:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005978:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800597a:	e01a      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800597c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005980:	3308      	adds	r3, #8
 8005982:	2102      	movs	r1, #2
 8005984:	4618      	mov	r0, r3
 8005986:	f001 fc8f 	bl	80072a8 <RCCEx_PLL2_Config>
 800598a:	4603      	mov	r3, r0
 800598c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005990:	e00f      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005996:	3328      	adds	r3, #40	@ 0x28
 8005998:	2102      	movs	r1, #2
 800599a:	4618      	mov	r0, r3
 800599c:	f001 fd36 	bl	800740c <RCCEx_PLL3_Config>
 80059a0:	4603      	mov	r3, r0
 80059a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80059a6:	e004      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059ae:	e000      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80059b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10a      	bne.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80059ba:	4ba5      	ldr	r3, [pc, #660]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80059c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059c8:	4aa1      	ldr	r2, [pc, #644]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059ca:	430b      	orrs	r3, r1
 80059cc:	6513      	str	r3, [r2, #80]	@ 0x50
 80059ce:	e003      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80059d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80059e4:	f04f 0900 	mov.w	r9, #0
 80059e8:	ea58 0309 	orrs.w	r3, r8, r9
 80059ec:	d047      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80059ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059f4:	2b04      	cmp	r3, #4
 80059f6:	d82a      	bhi.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80059f8:	a201      	add	r2, pc, #4	@ (adr r2, 8005a00 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80059fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059fe:	bf00      	nop
 8005a00:	08005a15 	.word	0x08005a15
 8005a04:	08005a23 	.word	0x08005a23
 8005a08:	08005a39 	.word	0x08005a39
 8005a0c:	08005a57 	.word	0x08005a57
 8005a10:	08005a57 	.word	0x08005a57
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a14:	4b8e      	ldr	r3, [pc, #568]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a18:	4a8d      	ldr	r2, [pc, #564]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a20:	e01a      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a26:	3308      	adds	r3, #8
 8005a28:	2100      	movs	r1, #0
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f001 fc3c 	bl	80072a8 <RCCEx_PLL2_Config>
 8005a30:	4603      	mov	r3, r0
 8005a32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a36:	e00f      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a3c:	3328      	adds	r3, #40	@ 0x28
 8005a3e:	2100      	movs	r1, #0
 8005a40:	4618      	mov	r0, r3
 8005a42:	f001 fce3 	bl	800740c <RCCEx_PLL3_Config>
 8005a46:	4603      	mov	r3, r0
 8005a48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a4c:	e004      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a54:	e000      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005a56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10a      	bne.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a60:	4b7b      	ldr	r3, [pc, #492]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a64:	f023 0107 	bic.w	r1, r3, #7
 8005a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a6e:	4a78      	ldr	r2, [pc, #480]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a70:	430b      	orrs	r3, r1
 8005a72:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a74:	e003      	b.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a86:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005a8a:	f04f 0b00 	mov.w	fp, #0
 8005a8e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005a92:	d04c      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a9e:	d030      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005aa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005aa4:	d829      	bhi.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005aa6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005aa8:	d02d      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005aaa:	2bc0      	cmp	r3, #192	@ 0xc0
 8005aac:	d825      	bhi.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005aae:	2b80      	cmp	r3, #128	@ 0x80
 8005ab0:	d018      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005ab2:	2b80      	cmp	r3, #128	@ 0x80
 8005ab4:	d821      	bhi.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d002      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005aba:	2b40      	cmp	r3, #64	@ 0x40
 8005abc:	d007      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005abe:	e01c      	b.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ac0:	4b63      	ldr	r3, [pc, #396]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac4:	4a62      	ldr	r2, [pc, #392]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ac6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005aca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005acc:	e01c      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad2:	3308      	adds	r3, #8
 8005ad4:	2100      	movs	r1, #0
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f001 fbe6 	bl	80072a8 <RCCEx_PLL2_Config>
 8005adc:	4603      	mov	r3, r0
 8005ade:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005ae2:	e011      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ae8:	3328      	adds	r3, #40	@ 0x28
 8005aea:	2100      	movs	r1, #0
 8005aec:	4618      	mov	r0, r3
 8005aee:	f001 fc8d 	bl	800740c <RCCEx_PLL3_Config>
 8005af2:	4603      	mov	r3, r0
 8005af4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005af8:	e006      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b00:	e002      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005b02:	bf00      	nop
 8005b04:	e000      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005b06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10a      	bne.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005b10:	4b4f      	ldr	r3, [pc, #316]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b14:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b1e:	4a4c      	ldr	r2, [pc, #304]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b20:	430b      	orrs	r3, r1
 8005b22:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b24:	e003      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b36:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005b3a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005b3e:	2300      	movs	r3, #0
 8005b40:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005b44:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005b48:	460b      	mov	r3, r1
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	d053      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005b56:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b5a:	d035      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005b5c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b60:	d82e      	bhi.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005b62:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005b66:	d031      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005b68:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005b6c:	d828      	bhi.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005b6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b72:	d01a      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005b74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b78:	d822      	bhi.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d003      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005b7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b82:	d007      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005b84:	e01c      	b.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b86:	4b32      	ldr	r3, [pc, #200]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b8a:	4a31      	ldr	r2, [pc, #196]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b92:	e01c      	b.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b98:	3308      	adds	r3, #8
 8005b9a:	2100      	movs	r1, #0
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f001 fb83 	bl	80072a8 <RCCEx_PLL2_Config>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005ba8:	e011      	b.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bae:	3328      	adds	r3, #40	@ 0x28
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f001 fc2a 	bl	800740c <RCCEx_PLL3_Config>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005bbe:	e006      	b.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bc6:	e002      	b.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005bc8:	bf00      	nop
 8005bca:	e000      	b.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005bcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d10b      	bne.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bda:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005be2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005be6:	4a1a      	ldr	r2, [pc, #104]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005be8:	430b      	orrs	r3, r1
 8005bea:	6593      	str	r3, [r2, #88]	@ 0x58
 8005bec:	e003      	b.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bf2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfe:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005c02:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005c06:	2300      	movs	r3, #0
 8005c08:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005c0c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005c10:	460b      	mov	r3, r1
 8005c12:	4313      	orrs	r3, r2
 8005c14:	d056      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005c1e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c22:	d038      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005c24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c28:	d831      	bhi.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005c2a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005c2e:	d034      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005c30:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005c34:	d82b      	bhi.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005c36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c3a:	d01d      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005c3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c40:	d825      	bhi.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d006      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005c46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c4a:	d00a      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005c4c:	e01f      	b.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005c4e:	bf00      	nop
 8005c50:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c54:	4ba2      	ldr	r3, [pc, #648]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c58:	4aa1      	ldr	r2, [pc, #644]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c60:	e01c      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c66:	3308      	adds	r3, #8
 8005c68:	2100      	movs	r1, #0
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f001 fb1c 	bl	80072a8 <RCCEx_PLL2_Config>
 8005c70:	4603      	mov	r3, r0
 8005c72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005c76:	e011      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c7c:	3328      	adds	r3, #40	@ 0x28
 8005c7e:	2100      	movs	r1, #0
 8005c80:	4618      	mov	r0, r3
 8005c82:	f001 fbc3 	bl	800740c <RCCEx_PLL3_Config>
 8005c86:	4603      	mov	r3, r0
 8005c88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c8c:	e006      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c94:	e002      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005c96:	bf00      	nop
 8005c98:	e000      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005c9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10b      	bne.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005ca4:	4b8e      	ldr	r3, [pc, #568]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ca8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cb0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005cb4:	4a8a      	ldr	r2, [pc, #552]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cb6:	430b      	orrs	r3, r1
 8005cb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cba:	e003      	b.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ccc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005cd0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005cda:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005cde:	460b      	mov	r3, r1
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	d03a      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cea:	2b30      	cmp	r3, #48	@ 0x30
 8005cec:	d01f      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005cee:	2b30      	cmp	r3, #48	@ 0x30
 8005cf0:	d819      	bhi.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005cf2:	2b20      	cmp	r3, #32
 8005cf4:	d00c      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005cf6:	2b20      	cmp	r3, #32
 8005cf8:	d815      	bhi.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d019      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005cfe:	2b10      	cmp	r3, #16
 8005d00:	d111      	bne.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d02:	4b77      	ldr	r3, [pc, #476]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d06:	4a76      	ldr	r2, [pc, #472]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005d0e:	e011      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d14:	3308      	adds	r3, #8
 8005d16:	2102      	movs	r1, #2
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f001 fac5 	bl	80072a8 <RCCEx_PLL2_Config>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005d24:	e006      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d2c:	e002      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005d2e:	bf00      	nop
 8005d30:	e000      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005d32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d10a      	bne.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005d3c:	4b68      	ldr	r3, [pc, #416]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d40:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d4a:	4a65      	ldr	r2, [pc, #404]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d4c:	430b      	orrs	r3, r1
 8005d4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005d50:	e003      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d62:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005d66:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005d70:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005d74:	460b      	mov	r3, r1
 8005d76:	4313      	orrs	r3, r2
 8005d78:	d051      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d84:	d035      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005d86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d8a:	d82e      	bhi.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005d8c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005d90:	d031      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005d92:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005d96:	d828      	bhi.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005d98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d9c:	d01a      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005d9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005da2:	d822      	bhi.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d003      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005da8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dac:	d007      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005dae:	e01c      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005db0:	4b4b      	ldr	r3, [pc, #300]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db4:	4a4a      	ldr	r2, [pc, #296]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005db6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005dbc:	e01c      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dc2:	3308      	adds	r3, #8
 8005dc4:	2100      	movs	r1, #0
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f001 fa6e 	bl	80072a8 <RCCEx_PLL2_Config>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005dd2:	e011      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dd8:	3328      	adds	r3, #40	@ 0x28
 8005dda:	2100      	movs	r1, #0
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f001 fb15 	bl	800740c <RCCEx_PLL3_Config>
 8005de2:	4603      	mov	r3, r0
 8005de4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005de8:	e006      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005df0:	e002      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005df2:	bf00      	nop
 8005df4:	e000      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005df6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005df8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10a      	bne.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005e00:	4b37      	ldr	r3, [pc, #220]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e04:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e0e:	4a34      	ldr	r2, [pc, #208]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e10:	430b      	orrs	r3, r1
 8005e12:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e14:	e003      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e26:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005e2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e2e:	2300      	movs	r3, #0
 8005e30:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e34:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005e38:	460b      	mov	r3, r1
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	d056      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e48:	d033      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005e4a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e4e:	d82c      	bhi.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005e50:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e54:	d02f      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005e56:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e5a:	d826      	bhi.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005e5c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e60:	d02b      	beq.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005e62:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e66:	d820      	bhi.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005e68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e6c:	d012      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005e6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e72:	d81a      	bhi.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d022      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005e78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e7c:	d115      	bne.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e82:	3308      	adds	r3, #8
 8005e84:	2101      	movs	r1, #1
 8005e86:	4618      	mov	r0, r3
 8005e88:	f001 fa0e 	bl	80072a8 <RCCEx_PLL2_Config>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005e92:	e015      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e98:	3328      	adds	r3, #40	@ 0x28
 8005e9a:	2101      	movs	r1, #1
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f001 fab5 	bl	800740c <RCCEx_PLL3_Config>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005ea8:	e00a      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005eb0:	e006      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005eb2:	bf00      	nop
 8005eb4:	e004      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005eb6:	bf00      	nop
 8005eb8:	e002      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005eba:	bf00      	nop
 8005ebc:	e000      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005ebe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ec0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10d      	bne.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005ec8:	4b05      	ldr	r3, [pc, #20]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005eca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ecc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ed4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ed6:	4a02      	ldr	r2, [pc, #8]	@ (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ed8:	430b      	orrs	r3, r1
 8005eda:	6513      	str	r3, [r2, #80]	@ 0x50
 8005edc:	e006      	b.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005ede:	bf00      	nop
 8005ee0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ee8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005ef8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005efc:	2300      	movs	r3, #0
 8005efe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f02:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005f06:	460b      	mov	r3, r1
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	d055      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005f14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f18:	d033      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005f1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f1e:	d82c      	bhi.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005f20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f24:	d02f      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005f26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f2a:	d826      	bhi.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005f2c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005f30:	d02b      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005f32:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005f36:	d820      	bhi.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005f38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f3c:	d012      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005f3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f42:	d81a      	bhi.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d022      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005f48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f4c:	d115      	bne.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f52:	3308      	adds	r3, #8
 8005f54:	2101      	movs	r1, #1
 8005f56:	4618      	mov	r0, r3
 8005f58:	f001 f9a6 	bl	80072a8 <RCCEx_PLL2_Config>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005f62:	e015      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f68:	3328      	adds	r3, #40	@ 0x28
 8005f6a:	2101      	movs	r1, #1
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f001 fa4d 	bl	800740c <RCCEx_PLL3_Config>
 8005f72:	4603      	mov	r3, r0
 8005f74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005f78:	e00a      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f80:	e006      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005f82:	bf00      	nop
 8005f84:	e004      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005f86:	bf00      	nop
 8005f88:	e002      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005f8a:	bf00      	nop
 8005f8c:	e000      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005f8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d10b      	bne.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005f98:	4ba3      	ldr	r3, [pc, #652]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f9c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fa4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005fa8:	4a9f      	ldr	r2, [pc, #636]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005faa:	430b      	orrs	r3, r1
 8005fac:	6593      	str	r3, [r2, #88]	@ 0x58
 8005fae:	e003      	b.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005fc4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005fc8:	2300      	movs	r3, #0
 8005fca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005fce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	d037      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fe2:	d00e      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005fe4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fe8:	d816      	bhi.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d018      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005fee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ff2:	d111      	bne.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ff4:	4b8c      	ldr	r3, [pc, #560]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ff8:	4a8b      	ldr	r2, [pc, #556]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ffa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ffe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006000:	e00f      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006006:	3308      	adds	r3, #8
 8006008:	2101      	movs	r1, #1
 800600a:	4618      	mov	r0, r3
 800600c:	f001 f94c 	bl	80072a8 <RCCEx_PLL2_Config>
 8006010:	4603      	mov	r3, r0
 8006012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006016:	e004      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800601e:	e000      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006020:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006022:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10a      	bne.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800602a:	4b7f      	ldr	r3, [pc, #508]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800602c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800602e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006038:	4a7b      	ldr	r2, [pc, #492]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800603a:	430b      	orrs	r3, r1
 800603c:	6513      	str	r3, [r2, #80]	@ 0x50
 800603e:	e003      	b.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006040:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006044:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800604c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006050:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006054:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006058:	2300      	movs	r3, #0
 800605a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800605e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006062:	460b      	mov	r3, r1
 8006064:	4313      	orrs	r3, r2
 8006066:	d039      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800606c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800606e:	2b03      	cmp	r3, #3
 8006070:	d81c      	bhi.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006072:	a201      	add	r2, pc, #4	@ (adr r2, 8006078 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006078:	080060b5 	.word	0x080060b5
 800607c:	08006089 	.word	0x08006089
 8006080:	08006097 	.word	0x08006097
 8006084:	080060b5 	.word	0x080060b5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006088:	4b67      	ldr	r3, [pc, #412]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800608a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800608c:	4a66      	ldr	r2, [pc, #408]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800608e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006092:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006094:	e00f      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800609a:	3308      	adds	r3, #8
 800609c:	2102      	movs	r1, #2
 800609e:	4618      	mov	r0, r3
 80060a0:	f001 f902 	bl	80072a8 <RCCEx_PLL2_Config>
 80060a4:	4603      	mov	r3, r0
 80060a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80060aa:	e004      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060b2:	e000      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80060b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10a      	bne.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80060be:	4b5a      	ldr	r3, [pc, #360]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060c2:	f023 0103 	bic.w	r1, r3, #3
 80060c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060cc:	4a56      	ldr	r2, [pc, #344]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80060ce:	430b      	orrs	r3, r1
 80060d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80060d2:	e003      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80060dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80060e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80060ec:	2300      	movs	r3, #0
 80060ee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80060f2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80060f6:	460b      	mov	r3, r1
 80060f8:	4313      	orrs	r3, r2
 80060fa:	f000 809f 	beq.w	800623c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060fe:	4b4b      	ldr	r3, [pc, #300]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a4a      	ldr	r2, [pc, #296]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006104:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006108:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800610a:	f7fd fc3f 	bl	800398c <HAL_GetTick>
 800610e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006112:	e00b      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006114:	f7fd fc3a 	bl	800398c <HAL_GetTick>
 8006118:	4602      	mov	r2, r0
 800611a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	2b64      	cmp	r3, #100	@ 0x64
 8006122:	d903      	bls.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800612a:	e005      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800612c:	4b3f      	ldr	r3, [pc, #252]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006134:	2b00      	cmp	r3, #0
 8006136:	d0ed      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006138:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800613c:	2b00      	cmp	r3, #0
 800613e:	d179      	bne.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006140:	4b39      	ldr	r3, [pc, #228]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006142:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006148:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800614c:	4053      	eors	r3, r2
 800614e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006152:	2b00      	cmp	r3, #0
 8006154:	d015      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006156:	4b34      	ldr	r3, [pc, #208]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800615a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800615e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006162:	4b31      	ldr	r3, [pc, #196]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006166:	4a30      	ldr	r2, [pc, #192]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006168:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800616c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800616e:	4b2e      	ldr	r3, [pc, #184]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006172:	4a2d      	ldr	r2, [pc, #180]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006174:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006178:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800617a:	4a2b      	ldr	r2, [pc, #172]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800617c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006180:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006186:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800618a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800618e:	d118      	bne.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006190:	f7fd fbfc 	bl	800398c <HAL_GetTick>
 8006194:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006198:	e00d      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800619a:	f7fd fbf7 	bl	800398c <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80061a4:	1ad2      	subs	r2, r2, r3
 80061a6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d903      	bls.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80061b4:	e005      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061b6:	4b1c      	ldr	r3, [pc, #112]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061ba:	f003 0302 	and.w	r3, r3, #2
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d0eb      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80061c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d129      	bne.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80061d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061da:	d10e      	bne.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80061dc:	4b12      	ldr	r3, [pc, #72]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80061e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80061ec:	091a      	lsrs	r2, r3, #4
 80061ee:	4b10      	ldr	r3, [pc, #64]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80061f0:	4013      	ands	r3, r2
 80061f2:	4a0d      	ldr	r2, [pc, #52]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061f4:	430b      	orrs	r3, r1
 80061f6:	6113      	str	r3, [r2, #16]
 80061f8:	e005      	b.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80061fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	4a0a      	ldr	r2, [pc, #40]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006200:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006204:	6113      	str	r3, [r2, #16]
 8006206:	4b08      	ldr	r3, [pc, #32]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006208:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800620a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800620e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006212:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006216:	4a04      	ldr	r2, [pc, #16]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006218:	430b      	orrs	r3, r1
 800621a:	6713      	str	r3, [r2, #112]	@ 0x70
 800621c:	e00e      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800621e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006222:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006226:	e009      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006228:	58024400 	.word	0x58024400
 800622c:	58024800 	.word	0x58024800
 8006230:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006234:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006238:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800623c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006244:	f002 0301 	and.w	r3, r2, #1
 8006248:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800624c:	2300      	movs	r3, #0
 800624e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006252:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006256:	460b      	mov	r3, r1
 8006258:	4313      	orrs	r3, r2
 800625a:	f000 8089 	beq.w	8006370 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800625e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006262:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006264:	2b28      	cmp	r3, #40	@ 0x28
 8006266:	d86b      	bhi.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006268:	a201      	add	r2, pc, #4	@ (adr r2, 8006270 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800626a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626e:	bf00      	nop
 8006270:	08006349 	.word	0x08006349
 8006274:	08006341 	.word	0x08006341
 8006278:	08006341 	.word	0x08006341
 800627c:	08006341 	.word	0x08006341
 8006280:	08006341 	.word	0x08006341
 8006284:	08006341 	.word	0x08006341
 8006288:	08006341 	.word	0x08006341
 800628c:	08006341 	.word	0x08006341
 8006290:	08006315 	.word	0x08006315
 8006294:	08006341 	.word	0x08006341
 8006298:	08006341 	.word	0x08006341
 800629c:	08006341 	.word	0x08006341
 80062a0:	08006341 	.word	0x08006341
 80062a4:	08006341 	.word	0x08006341
 80062a8:	08006341 	.word	0x08006341
 80062ac:	08006341 	.word	0x08006341
 80062b0:	0800632b 	.word	0x0800632b
 80062b4:	08006341 	.word	0x08006341
 80062b8:	08006341 	.word	0x08006341
 80062bc:	08006341 	.word	0x08006341
 80062c0:	08006341 	.word	0x08006341
 80062c4:	08006341 	.word	0x08006341
 80062c8:	08006341 	.word	0x08006341
 80062cc:	08006341 	.word	0x08006341
 80062d0:	08006349 	.word	0x08006349
 80062d4:	08006341 	.word	0x08006341
 80062d8:	08006341 	.word	0x08006341
 80062dc:	08006341 	.word	0x08006341
 80062e0:	08006341 	.word	0x08006341
 80062e4:	08006341 	.word	0x08006341
 80062e8:	08006341 	.word	0x08006341
 80062ec:	08006341 	.word	0x08006341
 80062f0:	08006349 	.word	0x08006349
 80062f4:	08006341 	.word	0x08006341
 80062f8:	08006341 	.word	0x08006341
 80062fc:	08006341 	.word	0x08006341
 8006300:	08006341 	.word	0x08006341
 8006304:	08006341 	.word	0x08006341
 8006308:	08006341 	.word	0x08006341
 800630c:	08006341 	.word	0x08006341
 8006310:	08006349 	.word	0x08006349
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006318:	3308      	adds	r3, #8
 800631a:	2101      	movs	r1, #1
 800631c:	4618      	mov	r0, r3
 800631e:	f000 ffc3 	bl	80072a8 <RCCEx_PLL2_Config>
 8006322:	4603      	mov	r3, r0
 8006324:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006328:	e00f      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800632a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800632e:	3328      	adds	r3, #40	@ 0x28
 8006330:	2101      	movs	r1, #1
 8006332:	4618      	mov	r0, r3
 8006334:	f001 f86a 	bl	800740c <RCCEx_PLL3_Config>
 8006338:	4603      	mov	r3, r0
 800633a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800633e:	e004      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006346:	e000      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006348:	bf00      	nop
    }

    if (ret == HAL_OK)
 800634a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10a      	bne.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006352:	4bbf      	ldr	r3, [pc, #764]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006356:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800635a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800635e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006360:	4abb      	ldr	r2, [pc, #748]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006362:	430b      	orrs	r3, r1
 8006364:	6553      	str	r3, [r2, #84]	@ 0x54
 8006366:	e003      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006368:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800636c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006378:	f002 0302 	and.w	r3, r2, #2
 800637c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006380:	2300      	movs	r3, #0
 8006382:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006386:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800638a:	460b      	mov	r3, r1
 800638c:	4313      	orrs	r3, r2
 800638e:	d041      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006394:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006396:	2b05      	cmp	r3, #5
 8006398:	d824      	bhi.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800639a:	a201      	add	r2, pc, #4	@ (adr r2, 80063a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800639c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a0:	080063ed 	.word	0x080063ed
 80063a4:	080063b9 	.word	0x080063b9
 80063a8:	080063cf 	.word	0x080063cf
 80063ac:	080063ed 	.word	0x080063ed
 80063b0:	080063ed 	.word	0x080063ed
 80063b4:	080063ed 	.word	0x080063ed
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063bc:	3308      	adds	r3, #8
 80063be:	2101      	movs	r1, #1
 80063c0:	4618      	mov	r0, r3
 80063c2:	f000 ff71 	bl	80072a8 <RCCEx_PLL2_Config>
 80063c6:	4603      	mov	r3, r0
 80063c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80063cc:	e00f      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063d2:	3328      	adds	r3, #40	@ 0x28
 80063d4:	2101      	movs	r1, #1
 80063d6:	4618      	mov	r0, r3
 80063d8:	f001 f818 	bl	800740c <RCCEx_PLL3_Config>
 80063dc:	4603      	mov	r3, r0
 80063de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80063e2:	e004      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063ea:	e000      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80063ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10a      	bne.n	800640c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80063f6:	4b96      	ldr	r3, [pc, #600]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80063f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063fa:	f023 0107 	bic.w	r1, r3, #7
 80063fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006402:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006404:	4a92      	ldr	r2, [pc, #584]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006406:	430b      	orrs	r3, r1
 8006408:	6553      	str	r3, [r2, #84]	@ 0x54
 800640a:	e003      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800640c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006410:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641c:	f002 0304 	and.w	r3, r2, #4
 8006420:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006424:	2300      	movs	r3, #0
 8006426:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800642a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800642e:	460b      	mov	r3, r1
 8006430:	4313      	orrs	r3, r2
 8006432:	d044      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006438:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800643c:	2b05      	cmp	r3, #5
 800643e:	d825      	bhi.n	800648c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006440:	a201      	add	r2, pc, #4	@ (adr r2, 8006448 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006446:	bf00      	nop
 8006448:	08006495 	.word	0x08006495
 800644c:	08006461 	.word	0x08006461
 8006450:	08006477 	.word	0x08006477
 8006454:	08006495 	.word	0x08006495
 8006458:	08006495 	.word	0x08006495
 800645c:	08006495 	.word	0x08006495
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006464:	3308      	adds	r3, #8
 8006466:	2101      	movs	r1, #1
 8006468:	4618      	mov	r0, r3
 800646a:	f000 ff1d 	bl	80072a8 <RCCEx_PLL2_Config>
 800646e:	4603      	mov	r3, r0
 8006470:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006474:	e00f      	b.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800647a:	3328      	adds	r3, #40	@ 0x28
 800647c:	2101      	movs	r1, #1
 800647e:	4618      	mov	r0, r3
 8006480:	f000 ffc4 	bl	800740c <RCCEx_PLL3_Config>
 8006484:	4603      	mov	r3, r0
 8006486:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800648a:	e004      	b.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006492:	e000      	b.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006494:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006496:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10b      	bne.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800649e:	4b6c      	ldr	r3, [pc, #432]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064a2:	f023 0107 	bic.w	r1, r3, #7
 80064a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064ae:	4a68      	ldr	r2, [pc, #416]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80064b0:	430b      	orrs	r3, r1
 80064b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80064b4:	e003      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80064be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c6:	f002 0320 	and.w	r3, r2, #32
 80064ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80064ce:	2300      	movs	r3, #0
 80064d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80064d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80064d8:	460b      	mov	r3, r1
 80064da:	4313      	orrs	r3, r2
 80064dc:	d055      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80064de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80064ea:	d033      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80064ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80064f0:	d82c      	bhi.n	800654c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80064f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064f6:	d02f      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80064f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064fc:	d826      	bhi.n	800654c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80064fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006502:	d02b      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006504:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006508:	d820      	bhi.n	800654c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800650a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800650e:	d012      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006510:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006514:	d81a      	bhi.n	800654c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006516:	2b00      	cmp	r3, #0
 8006518:	d022      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800651a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800651e:	d115      	bne.n	800654c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006524:	3308      	adds	r3, #8
 8006526:	2100      	movs	r1, #0
 8006528:	4618      	mov	r0, r3
 800652a:	f000 febd 	bl	80072a8 <RCCEx_PLL2_Config>
 800652e:	4603      	mov	r3, r0
 8006530:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006534:	e015      	b.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800653a:	3328      	adds	r3, #40	@ 0x28
 800653c:	2102      	movs	r1, #2
 800653e:	4618      	mov	r0, r3
 8006540:	f000 ff64 	bl	800740c <RCCEx_PLL3_Config>
 8006544:	4603      	mov	r3, r0
 8006546:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800654a:	e00a      	b.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006552:	e006      	b.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006554:	bf00      	nop
 8006556:	e004      	b.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006558:	bf00      	nop
 800655a:	e002      	b.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800655c:	bf00      	nop
 800655e:	e000      	b.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006560:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006562:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10b      	bne.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800656a:	4b39      	ldr	r3, [pc, #228]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800656c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800656e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800657a:	4a35      	ldr	r2, [pc, #212]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800657c:	430b      	orrs	r3, r1
 800657e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006580:	e003      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006582:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006586:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800658a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800658e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006592:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006596:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800659a:	2300      	movs	r3, #0
 800659c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80065a0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80065a4:	460b      	mov	r3, r1
 80065a6:	4313      	orrs	r3, r2
 80065a8:	d058      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80065aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065b2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80065b6:	d033      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80065b8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80065bc:	d82c      	bhi.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80065be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065c2:	d02f      	beq.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80065c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065c8:	d826      	bhi.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80065ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80065ce:	d02b      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80065d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80065d4:	d820      	bhi.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80065d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065da:	d012      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80065dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065e0:	d81a      	bhi.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d022      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80065e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065ea:	d115      	bne.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065f0:	3308      	adds	r3, #8
 80065f2:	2100      	movs	r1, #0
 80065f4:	4618      	mov	r0, r3
 80065f6:	f000 fe57 	bl	80072a8 <RCCEx_PLL2_Config>
 80065fa:	4603      	mov	r3, r0
 80065fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006600:	e015      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006606:	3328      	adds	r3, #40	@ 0x28
 8006608:	2102      	movs	r1, #2
 800660a:	4618      	mov	r0, r3
 800660c:	f000 fefe 	bl	800740c <RCCEx_PLL3_Config>
 8006610:	4603      	mov	r3, r0
 8006612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006616:	e00a      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800661e:	e006      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006620:	bf00      	nop
 8006622:	e004      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006624:	bf00      	nop
 8006626:	e002      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006628:	bf00      	nop
 800662a:	e000      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800662c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800662e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10e      	bne.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006636:	4b06      	ldr	r3, [pc, #24]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800663a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800663e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006642:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006646:	4a02      	ldr	r2, [pc, #8]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006648:	430b      	orrs	r3, r1
 800664a:	6593      	str	r3, [r2, #88]	@ 0x58
 800664c:	e006      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800664e:	bf00      	nop
 8006650:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006654:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006658:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800665c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006664:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006668:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800666c:	2300      	movs	r3, #0
 800666e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006672:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006676:	460b      	mov	r3, r1
 8006678:	4313      	orrs	r3, r2
 800667a:	d055      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800667c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006680:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006684:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006688:	d033      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800668a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800668e:	d82c      	bhi.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006690:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006694:	d02f      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006696:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800669a:	d826      	bhi.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800669c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80066a0:	d02b      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80066a2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80066a6:	d820      	bhi.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80066a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066ac:	d012      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80066ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066b2:	d81a      	bhi.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d022      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80066b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066bc:	d115      	bne.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066c2:	3308      	adds	r3, #8
 80066c4:	2100      	movs	r1, #0
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 fdee 	bl	80072a8 <RCCEx_PLL2_Config>
 80066cc:	4603      	mov	r3, r0
 80066ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80066d2:	e015      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066d8:	3328      	adds	r3, #40	@ 0x28
 80066da:	2102      	movs	r1, #2
 80066dc:	4618      	mov	r0, r3
 80066de:	f000 fe95 	bl	800740c <RCCEx_PLL3_Config>
 80066e2:	4603      	mov	r3, r0
 80066e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80066e8:	e00a      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066f0:	e006      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80066f2:	bf00      	nop
 80066f4:	e004      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80066f6:	bf00      	nop
 80066f8:	e002      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80066fa:	bf00      	nop
 80066fc:	e000      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80066fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006700:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006704:	2b00      	cmp	r3, #0
 8006706:	d10b      	bne.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006708:	4ba1      	ldr	r3, [pc, #644]	@ (8006990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800670a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800670c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006714:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006718:	4a9d      	ldr	r2, [pc, #628]	@ (8006990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800671a:	430b      	orrs	r3, r1
 800671c:	6593      	str	r3, [r2, #88]	@ 0x58
 800671e:	e003      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006720:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006724:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800672c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006730:	f002 0308 	and.w	r3, r2, #8
 8006734:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006738:	2300      	movs	r3, #0
 800673a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800673e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006742:	460b      	mov	r3, r1
 8006744:	4313      	orrs	r3, r2
 8006746:	d01e      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800674c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006750:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006754:	d10c      	bne.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800675a:	3328      	adds	r3, #40	@ 0x28
 800675c:	2102      	movs	r1, #2
 800675e:	4618      	mov	r0, r3
 8006760:	f000 fe54 	bl	800740c <RCCEx_PLL3_Config>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d002      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006770:	4b87      	ldr	r3, [pc, #540]	@ (8006990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006772:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006774:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800677c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006780:	4a83      	ldr	r2, [pc, #524]	@ (8006990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006782:	430b      	orrs	r3, r1
 8006784:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800678a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678e:	f002 0310 	and.w	r3, r2, #16
 8006792:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006796:	2300      	movs	r3, #0
 8006798:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800679c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80067a0:	460b      	mov	r3, r1
 80067a2:	4313      	orrs	r3, r2
 80067a4:	d01e      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80067a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80067ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067b2:	d10c      	bne.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80067b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067b8:	3328      	adds	r3, #40	@ 0x28
 80067ba:	2102      	movs	r1, #2
 80067bc:	4618      	mov	r0, r3
 80067be:	f000 fe25 	bl	800740c <RCCEx_PLL3_Config>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d002      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80067ce:	4b70      	ldr	r3, [pc, #448]	@ (8006990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067d2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80067d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80067de:	4a6c      	ldr	r2, [pc, #432]	@ (8006990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067e0:	430b      	orrs	r3, r1
 80067e2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80067e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ec:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80067f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80067f4:	2300      	movs	r3, #0
 80067f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80067fa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80067fe:	460b      	mov	r3, r1
 8006800:	4313      	orrs	r3, r2
 8006802:	d03e      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006808:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800680c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006810:	d022      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006812:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006816:	d81b      	bhi.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006818:	2b00      	cmp	r3, #0
 800681a:	d003      	beq.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800681c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006820:	d00b      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006822:	e015      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006828:	3308      	adds	r3, #8
 800682a:	2100      	movs	r1, #0
 800682c:	4618      	mov	r0, r3
 800682e:	f000 fd3b 	bl	80072a8 <RCCEx_PLL2_Config>
 8006832:	4603      	mov	r3, r0
 8006834:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006838:	e00f      	b.n	800685a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800683a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800683e:	3328      	adds	r3, #40	@ 0x28
 8006840:	2102      	movs	r1, #2
 8006842:	4618      	mov	r0, r3
 8006844:	f000 fde2 	bl	800740c <RCCEx_PLL3_Config>
 8006848:	4603      	mov	r3, r0
 800684a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800684e:	e004      	b.n	800685a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006856:	e000      	b.n	800685a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006858:	bf00      	nop
    }

    if (ret == HAL_OK)
 800685a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800685e:	2b00      	cmp	r3, #0
 8006860:	d10b      	bne.n	800687a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006862:	4b4b      	ldr	r3, [pc, #300]	@ (8006990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006866:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800686a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800686e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006872:	4a47      	ldr	r2, [pc, #284]	@ (8006990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006874:	430b      	orrs	r3, r1
 8006876:	6593      	str	r3, [r2, #88]	@ 0x58
 8006878:	e003      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800687a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800687e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800688e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006890:	2300      	movs	r3, #0
 8006892:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006894:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006898:	460b      	mov	r3, r1
 800689a:	4313      	orrs	r3, r2
 800689c:	d03b      	beq.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800689e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80068aa:	d01f      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80068ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80068b0:	d818      	bhi.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80068b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068b6:	d003      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80068b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80068bc:	d007      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80068be:	e011      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068c0:	4b33      	ldr	r3, [pc, #204]	@ (8006990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c4:	4a32      	ldr	r2, [pc, #200]	@ (8006990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80068cc:	e00f      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80068ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068d2:	3328      	adds	r3, #40	@ 0x28
 80068d4:	2101      	movs	r1, #1
 80068d6:	4618      	mov	r0, r3
 80068d8:	f000 fd98 	bl	800740c <RCCEx_PLL3_Config>
 80068dc:	4603      	mov	r3, r0
 80068de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80068e2:	e004      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068ea:	e000      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80068ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10b      	bne.n	800690e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80068f6:	4b26      	ldr	r3, [pc, #152]	@ (8006990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80068f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068fa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80068fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006906:	4a22      	ldr	r2, [pc, #136]	@ (8006990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006908:	430b      	orrs	r3, r1
 800690a:	6553      	str	r3, [r2, #84]	@ 0x54
 800690c:	e003      	b.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800690e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006912:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800691a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006922:	673b      	str	r3, [r7, #112]	@ 0x70
 8006924:	2300      	movs	r3, #0
 8006926:	677b      	str	r3, [r7, #116]	@ 0x74
 8006928:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800692c:	460b      	mov	r3, r1
 800692e:	4313      	orrs	r3, r2
 8006930:	d034      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006936:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006938:	2b00      	cmp	r3, #0
 800693a:	d003      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800693c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006940:	d007      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006942:	e011      	b.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006944:	4b12      	ldr	r3, [pc, #72]	@ (8006990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006948:	4a11      	ldr	r2, [pc, #68]	@ (8006990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800694a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800694e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006950:	e00e      	b.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006956:	3308      	adds	r3, #8
 8006958:	2102      	movs	r1, #2
 800695a:	4618      	mov	r0, r3
 800695c:	f000 fca4 	bl	80072a8 <RCCEx_PLL2_Config>
 8006960:	4603      	mov	r3, r0
 8006962:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006966:	e003      	b.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800696e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006970:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10d      	bne.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006978:	4b05      	ldr	r3, [pc, #20]	@ (8006990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800697a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800697c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006984:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006986:	4a02      	ldr	r2, [pc, #8]	@ (8006990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006988:	430b      	orrs	r3, r1
 800698a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800698c:	e006      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800698e:	bf00      	nop
 8006990:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006994:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006998:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800699c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80069a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069aa:	2300      	movs	r3, #0
 80069ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80069ae:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80069b2:	460b      	mov	r3, r1
 80069b4:	4313      	orrs	r3, r2
 80069b6:	d00c      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80069b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069bc:	3328      	adds	r3, #40	@ 0x28
 80069be:	2102      	movs	r1, #2
 80069c0:	4618      	mov	r0, r3
 80069c2:	f000 fd23 	bl	800740c <RCCEx_PLL3_Config>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d002      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80069d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069da:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80069de:	663b      	str	r3, [r7, #96]	@ 0x60
 80069e0:	2300      	movs	r3, #0
 80069e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80069e4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80069e8:	460b      	mov	r3, r1
 80069ea:	4313      	orrs	r3, r2
 80069ec:	d038      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80069ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069fa:	d018      	beq.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80069fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a00:	d811      	bhi.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006a02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a06:	d014      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006a08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a0c:	d80b      	bhi.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d011      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006a12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a16:	d106      	bne.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a18:	4bc3      	ldr	r3, [pc, #780]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a1c:	4ac2      	ldr	r2, [pc, #776]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006a24:	e008      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a2c:	e004      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006a2e:	bf00      	nop
 8006a30:	e002      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006a32:	bf00      	nop
 8006a34:	e000      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006a36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10b      	bne.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a40:	4bb9      	ldr	r3, [pc, #740]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a44:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a50:	4ab5      	ldr	r2, [pc, #724]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a52:	430b      	orrs	r3, r1
 8006a54:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a56:	e003      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a68:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006a6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a6e:	2300      	movs	r3, #0
 8006a70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a72:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006a76:	460b      	mov	r3, r1
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	d009      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006a7c:	4baa      	ldr	r3, [pc, #680]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a80:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a8a:	4aa7      	ldr	r2, [pc, #668]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006a8c:	430b      	orrs	r3, r1
 8006a8e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a98:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006a9c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	657b      	str	r3, [r7, #84]	@ 0x54
 8006aa2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	d00a      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006aac:	4b9e      	ldr	r3, [pc, #632]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ab8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006abc:	4a9a      	ldr	r2, [pc, #616]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006abe:	430b      	orrs	r3, r1
 8006ac0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aca:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006ace:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ad4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006ad8:	460b      	mov	r3, r1
 8006ada:	4313      	orrs	r3, r2
 8006adc:	d009      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006ade:	4b92      	ldr	r3, [pc, #584]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ae0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ae2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006aec:	4a8e      	ldr	r2, [pc, #568]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006aee:	430b      	orrs	r3, r1
 8006af0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afa:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006afe:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b00:	2300      	movs	r3, #0
 8006b02:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b04:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006b08:	460b      	mov	r3, r1
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	d00e      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006b0e:	4b86      	ldr	r3, [pc, #536]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	4a85      	ldr	r2, [pc, #532]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b14:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b18:	6113      	str	r3, [r2, #16]
 8006b1a:	4b83      	ldr	r3, [pc, #524]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b1c:	6919      	ldr	r1, [r3, #16]
 8006b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b22:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006b26:	4a80      	ldr	r2, [pc, #512]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b28:	430b      	orrs	r3, r1
 8006b2a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b34:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006b38:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b3e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006b42:	460b      	mov	r3, r1
 8006b44:	4313      	orrs	r3, r2
 8006b46:	d009      	beq.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006b48:	4b77      	ldr	r3, [pc, #476]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b4c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b56:	4a74      	ldr	r2, [pc, #464]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b58:	430b      	orrs	r3, r1
 8006b5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b64:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006b68:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b6e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006b72:	460b      	mov	r3, r1
 8006b74:	4313      	orrs	r3, r2
 8006b76:	d00a      	beq.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006b78:	4b6b      	ldr	r3, [pc, #428]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b7c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b88:	4a67      	ldr	r2, [pc, #412]	@ (8006d28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006b8a:	430b      	orrs	r3, r1
 8006b8c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b96:	2100      	movs	r1, #0
 8006b98:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006b9a:	f003 0301 	and.w	r3, r3, #1
 8006b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ba0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	d011      	beq.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bae:	3308      	adds	r3, #8
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f000 fb78 	bl	80072a8 <RCCEx_PLL2_Config>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006bbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d003      	beq.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	6239      	str	r1, [r7, #32]
 8006bda:	f003 0302 	and.w	r3, r3, #2
 8006bde:	627b      	str	r3, [r7, #36]	@ 0x24
 8006be0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006be4:	460b      	mov	r3, r1
 8006be6:	4313      	orrs	r3, r2
 8006be8:	d011      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bee:	3308      	adds	r3, #8
 8006bf0:	2101      	movs	r1, #1
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f000 fb58 	bl	80072a8 <RCCEx_PLL2_Config>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d003      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c16:	2100      	movs	r1, #0
 8006c18:	61b9      	str	r1, [r7, #24]
 8006c1a:	f003 0304 	and.w	r3, r3, #4
 8006c1e:	61fb      	str	r3, [r7, #28]
 8006c20:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006c24:	460b      	mov	r3, r1
 8006c26:	4313      	orrs	r3, r2
 8006c28:	d011      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c2e:	3308      	adds	r3, #8
 8006c30:	2102      	movs	r1, #2
 8006c32:	4618      	mov	r0, r3
 8006c34:	f000 fb38 	bl	80072a8 <RCCEx_PLL2_Config>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d003      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c56:	2100      	movs	r1, #0
 8006c58:	6139      	str	r1, [r7, #16]
 8006c5a:	f003 0308 	and.w	r3, r3, #8
 8006c5e:	617b      	str	r3, [r7, #20]
 8006c60:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006c64:	460b      	mov	r3, r1
 8006c66:	4313      	orrs	r3, r2
 8006c68:	d011      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c6e:	3328      	adds	r3, #40	@ 0x28
 8006c70:	2100      	movs	r1, #0
 8006c72:	4618      	mov	r0, r3
 8006c74:	f000 fbca 	bl	800740c <RCCEx_PLL3_Config>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d003      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c96:	2100      	movs	r1, #0
 8006c98:	60b9      	str	r1, [r7, #8]
 8006c9a:	f003 0310 	and.w	r3, r3, #16
 8006c9e:	60fb      	str	r3, [r7, #12]
 8006ca0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	d011      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cae:	3328      	adds	r3, #40	@ 0x28
 8006cb0:	2101      	movs	r1, #1
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 fbaa 	bl	800740c <RCCEx_PLL3_Config>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d003      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd6:	2100      	movs	r1, #0
 8006cd8:	6039      	str	r1, [r7, #0]
 8006cda:	f003 0320 	and.w	r3, r3, #32
 8006cde:	607b      	str	r3, [r7, #4]
 8006ce0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	d011      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cee:	3328      	adds	r3, #40	@ 0x28
 8006cf0:	2102      	movs	r1, #2
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f000 fb8a 	bl	800740c <RCCEx_PLL3_Config>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d003      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006d0e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d101      	bne.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006d16:	2300      	movs	r3, #0
 8006d18:	e000      	b.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006d22:	46bd      	mov	sp, r7
 8006d24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d28:	58024400 	.word	0x58024400

08006d2c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006d30:	f7fe fd96 	bl	8005860 <HAL_RCC_GetHCLKFreq>
 8006d34:	4602      	mov	r2, r0
 8006d36:	4b06      	ldr	r3, [pc, #24]	@ (8006d50 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	091b      	lsrs	r3, r3, #4
 8006d3c:	f003 0307 	and.w	r3, r3, #7
 8006d40:	4904      	ldr	r1, [pc, #16]	@ (8006d54 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006d42:	5ccb      	ldrb	r3, [r1, r3]
 8006d44:	f003 031f 	and.w	r3, r3, #31
 8006d48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	58024400 	.word	0x58024400
 8006d54:	0800de78 	.word	0x0800de78

08006d58 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b089      	sub	sp, #36	@ 0x24
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d60:	4ba1      	ldr	r3, [pc, #644]	@ (8006fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d64:	f003 0303 	and.w	r3, r3, #3
 8006d68:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006d6a:	4b9f      	ldr	r3, [pc, #636]	@ (8006fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d6e:	0b1b      	lsrs	r3, r3, #12
 8006d70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d74:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006d76:	4b9c      	ldr	r3, [pc, #624]	@ (8006fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d7a:	091b      	lsrs	r3, r3, #4
 8006d7c:	f003 0301 	and.w	r3, r3, #1
 8006d80:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006d82:	4b99      	ldr	r3, [pc, #612]	@ (8006fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d86:	08db      	lsrs	r3, r3, #3
 8006d88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	fb02 f303 	mul.w	r3, r2, r3
 8006d92:	ee07 3a90 	vmov	s15, r3
 8006d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f000 8111 	beq.w	8006fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	f000 8083 	beq.w	8006eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	f200 80a1 	bhi.w	8006ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d003      	beq.n	8006dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d056      	beq.n	8006e70 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006dc2:	e099      	b.n	8006ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dc4:	4b88      	ldr	r3, [pc, #544]	@ (8006fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0320 	and.w	r3, r3, #32
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d02d      	beq.n	8006e2c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006dd0:	4b85      	ldr	r3, [pc, #532]	@ (8006fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	08db      	lsrs	r3, r3, #3
 8006dd6:	f003 0303 	and.w	r3, r3, #3
 8006dda:	4a84      	ldr	r2, [pc, #528]	@ (8006fec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8006de0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	ee07 3a90 	vmov	s15, r3
 8006de8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	ee07 3a90 	vmov	s15, r3
 8006df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dfa:	4b7b      	ldr	r3, [pc, #492]	@ (8006fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e02:	ee07 3a90 	vmov	s15, r3
 8006e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e0e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e26:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006e2a:	e087      	b.n	8006f3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	ee07 3a90 	vmov	s15, r3
 8006e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e36:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e3e:	4b6a      	ldr	r3, [pc, #424]	@ (8006fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e46:	ee07 3a90 	vmov	s15, r3
 8006e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e52:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e6e:	e065      	b.n	8006f3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	ee07 3a90 	vmov	s15, r3
 8006e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e7a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e82:	4b59      	ldr	r3, [pc, #356]	@ (8006fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e8a:	ee07 3a90 	vmov	s15, r3
 8006e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e92:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e96:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ea2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006eb2:	e043      	b.n	8006f3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	ee07 3a90 	vmov	s15, r3
 8006eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ebe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006ffc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ec6:	4b48      	ldr	r3, [pc, #288]	@ (8006fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ece:	ee07 3a90 	vmov	s15, r3
 8006ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ed6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006eda:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ee6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ef2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ef6:	e021      	b.n	8006f3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	ee07 3a90 	vmov	s15, r3
 8006efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f02:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f0a:	4b37      	ldr	r3, [pc, #220]	@ (8006fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f12:	ee07 3a90 	vmov	s15, r3
 8006f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f1e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f3a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006f3c:	4b2a      	ldr	r3, [pc, #168]	@ (8006fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f40:	0a5b      	lsrs	r3, r3, #9
 8006f42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f46:	ee07 3a90 	vmov	s15, r3
 8006f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f56:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f62:	ee17 2a90 	vmov	r2, s15
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006f6a:	4b1f      	ldr	r3, [pc, #124]	@ (8006fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f6e:	0c1b      	lsrs	r3, r3, #16
 8006f70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f74:	ee07 3a90 	vmov	s15, r3
 8006f78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f7c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f84:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f90:	ee17 2a90 	vmov	r2, s15
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006f98:	4b13      	ldr	r3, [pc, #76]	@ (8006fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f9c:	0e1b      	lsrs	r3, r3, #24
 8006f9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fa2:	ee07 3a90 	vmov	s15, r3
 8006fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006faa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fbe:	ee17 2a90 	vmov	r2, s15
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006fc6:	e008      	b.n	8006fda <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	609a      	str	r2, [r3, #8]
}
 8006fda:	bf00      	nop
 8006fdc:	3724      	adds	r7, #36	@ 0x24
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	58024400 	.word	0x58024400
 8006fec:	03d09000 	.word	0x03d09000
 8006ff0:	46000000 	.word	0x46000000
 8006ff4:	4c742400 	.word	0x4c742400
 8006ff8:	4a742400 	.word	0x4a742400
 8006ffc:	4bbebc20 	.word	0x4bbebc20

08007000 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007000:	b480      	push	{r7}
 8007002:	b089      	sub	sp, #36	@ 0x24
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007008:	4ba1      	ldr	r3, [pc, #644]	@ (8007290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800700a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800700c:	f003 0303 	and.w	r3, r3, #3
 8007010:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007012:	4b9f      	ldr	r3, [pc, #636]	@ (8007290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007016:	0d1b      	lsrs	r3, r3, #20
 8007018:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800701c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800701e:	4b9c      	ldr	r3, [pc, #624]	@ (8007290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007022:	0a1b      	lsrs	r3, r3, #8
 8007024:	f003 0301 	and.w	r3, r3, #1
 8007028:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800702a:	4b99      	ldr	r3, [pc, #612]	@ (8007290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800702c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800702e:	08db      	lsrs	r3, r3, #3
 8007030:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007034:	693a      	ldr	r2, [r7, #16]
 8007036:	fb02 f303 	mul.w	r3, r2, r3
 800703a:	ee07 3a90 	vmov	s15, r3
 800703e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007042:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	2b00      	cmp	r3, #0
 800704a:	f000 8111 	beq.w	8007270 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	2b02      	cmp	r3, #2
 8007052:	f000 8083 	beq.w	800715c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	2b02      	cmp	r3, #2
 800705a:	f200 80a1 	bhi.w	80071a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d003      	beq.n	800706c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007064:	69bb      	ldr	r3, [r7, #24]
 8007066:	2b01      	cmp	r3, #1
 8007068:	d056      	beq.n	8007118 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800706a:	e099      	b.n	80071a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800706c:	4b88      	ldr	r3, [pc, #544]	@ (8007290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0320 	and.w	r3, r3, #32
 8007074:	2b00      	cmp	r3, #0
 8007076:	d02d      	beq.n	80070d4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007078:	4b85      	ldr	r3, [pc, #532]	@ (8007290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	08db      	lsrs	r3, r3, #3
 800707e:	f003 0303 	and.w	r3, r3, #3
 8007082:	4a84      	ldr	r2, [pc, #528]	@ (8007294 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007084:	fa22 f303 	lsr.w	r3, r2, r3
 8007088:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	ee07 3a90 	vmov	s15, r3
 8007090:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	ee07 3a90 	vmov	s15, r3
 800709a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800709e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070a2:	4b7b      	ldr	r3, [pc, #492]	@ (8007290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070aa:	ee07 3a90 	vmov	s15, r3
 80070ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80070b6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007298 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80070ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80070d2:	e087      	b.n	80071e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	ee07 3a90 	vmov	s15, r3
 80070da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070de:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800729c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80070e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070e6:	4b6a      	ldr	r3, [pc, #424]	@ (8007290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ee:	ee07 3a90 	vmov	s15, r3
 80070f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80070fa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007298 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80070fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007106:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800710a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800710e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007112:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007116:	e065      	b.n	80071e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	ee07 3a90 	vmov	s15, r3
 800711e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007122:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80072a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800712a:	4b59      	ldr	r3, [pc, #356]	@ (8007290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800712c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800712e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007132:	ee07 3a90 	vmov	s15, r3
 8007136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800713a:	ed97 6a03 	vldr	s12, [r7, #12]
 800713e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007298 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800714a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800714e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007156:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800715a:	e043      	b.n	80071e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	ee07 3a90 	vmov	s15, r3
 8007162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007166:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80072a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800716a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800716e:	4b48      	ldr	r3, [pc, #288]	@ (8007290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007176:	ee07 3a90 	vmov	s15, r3
 800717a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800717e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007182:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007298 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800718a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800718e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800719a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800719e:	e021      	b.n	80071e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	ee07 3a90 	vmov	s15, r3
 80071a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071aa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80072a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80071ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071b2:	4b37      	ldr	r3, [pc, #220]	@ (8007290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ba:	ee07 3a90 	vmov	s15, r3
 80071be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80071c6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007298 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80071ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071e2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80071e4:	4b2a      	ldr	r3, [pc, #168]	@ (8007290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e8:	0a5b      	lsrs	r3, r3, #9
 80071ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071ee:	ee07 3a90 	vmov	s15, r3
 80071f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8007202:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007206:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800720a:	ee17 2a90 	vmov	r2, s15
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007212:	4b1f      	ldr	r3, [pc, #124]	@ (8007290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007216:	0c1b      	lsrs	r3, r3, #16
 8007218:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800721c:	ee07 3a90 	vmov	s15, r3
 8007220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007224:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007228:	ee37 7a87 	vadd.f32	s14, s15, s14
 800722c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007230:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007234:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007238:	ee17 2a90 	vmov	r2, s15
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007240:	4b13      	ldr	r3, [pc, #76]	@ (8007290 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007244:	0e1b      	lsrs	r3, r3, #24
 8007246:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800724a:	ee07 3a90 	vmov	s15, r3
 800724e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007252:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007256:	ee37 7a87 	vadd.f32	s14, s15, s14
 800725a:	edd7 6a07 	vldr	s13, [r7, #28]
 800725e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007262:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007266:	ee17 2a90 	vmov	r2, s15
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800726e:	e008      	b.n	8007282 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	609a      	str	r2, [r3, #8]
}
 8007282:	bf00      	nop
 8007284:	3724      	adds	r7, #36	@ 0x24
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	58024400 	.word	0x58024400
 8007294:	03d09000 	.word	0x03d09000
 8007298:	46000000 	.word	0x46000000
 800729c:	4c742400 	.word	0x4c742400
 80072a0:	4a742400 	.word	0x4a742400
 80072a4:	4bbebc20 	.word	0x4bbebc20

080072a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80072b2:	2300      	movs	r3, #0
 80072b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80072b6:	4b53      	ldr	r3, [pc, #332]	@ (8007404 <RCCEx_PLL2_Config+0x15c>)
 80072b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ba:	f003 0303 	and.w	r3, r3, #3
 80072be:	2b03      	cmp	r3, #3
 80072c0:	d101      	bne.n	80072c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e099      	b.n	80073fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80072c6:	4b4f      	ldr	r3, [pc, #316]	@ (8007404 <RCCEx_PLL2_Config+0x15c>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a4e      	ldr	r2, [pc, #312]	@ (8007404 <RCCEx_PLL2_Config+0x15c>)
 80072cc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80072d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072d2:	f7fc fb5b 	bl	800398c <HAL_GetTick>
 80072d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80072d8:	e008      	b.n	80072ec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80072da:	f7fc fb57 	bl	800398c <HAL_GetTick>
 80072de:	4602      	mov	r2, r0
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	1ad3      	subs	r3, r2, r3
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d901      	bls.n	80072ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80072e8:	2303      	movs	r3, #3
 80072ea:	e086      	b.n	80073fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80072ec:	4b45      	ldr	r3, [pc, #276]	@ (8007404 <RCCEx_PLL2_Config+0x15c>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d1f0      	bne.n	80072da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80072f8:	4b42      	ldr	r3, [pc, #264]	@ (8007404 <RCCEx_PLL2_Config+0x15c>)
 80072fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072fc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	031b      	lsls	r3, r3, #12
 8007306:	493f      	ldr	r1, [pc, #252]	@ (8007404 <RCCEx_PLL2_Config+0x15c>)
 8007308:	4313      	orrs	r3, r2
 800730a:	628b      	str	r3, [r1, #40]	@ 0x28
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	3b01      	subs	r3, #1
 8007312:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	3b01      	subs	r3, #1
 800731c:	025b      	lsls	r3, r3, #9
 800731e:	b29b      	uxth	r3, r3
 8007320:	431a      	orrs	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	3b01      	subs	r3, #1
 8007328:	041b      	lsls	r3, r3, #16
 800732a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800732e:	431a      	orrs	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	691b      	ldr	r3, [r3, #16]
 8007334:	3b01      	subs	r3, #1
 8007336:	061b      	lsls	r3, r3, #24
 8007338:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800733c:	4931      	ldr	r1, [pc, #196]	@ (8007404 <RCCEx_PLL2_Config+0x15c>)
 800733e:	4313      	orrs	r3, r2
 8007340:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007342:	4b30      	ldr	r3, [pc, #192]	@ (8007404 <RCCEx_PLL2_Config+0x15c>)
 8007344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007346:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	695b      	ldr	r3, [r3, #20]
 800734e:	492d      	ldr	r1, [pc, #180]	@ (8007404 <RCCEx_PLL2_Config+0x15c>)
 8007350:	4313      	orrs	r3, r2
 8007352:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007354:	4b2b      	ldr	r3, [pc, #172]	@ (8007404 <RCCEx_PLL2_Config+0x15c>)
 8007356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007358:	f023 0220 	bic.w	r2, r3, #32
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	699b      	ldr	r3, [r3, #24]
 8007360:	4928      	ldr	r1, [pc, #160]	@ (8007404 <RCCEx_PLL2_Config+0x15c>)
 8007362:	4313      	orrs	r3, r2
 8007364:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007366:	4b27      	ldr	r3, [pc, #156]	@ (8007404 <RCCEx_PLL2_Config+0x15c>)
 8007368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800736a:	4a26      	ldr	r2, [pc, #152]	@ (8007404 <RCCEx_PLL2_Config+0x15c>)
 800736c:	f023 0310 	bic.w	r3, r3, #16
 8007370:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007372:	4b24      	ldr	r3, [pc, #144]	@ (8007404 <RCCEx_PLL2_Config+0x15c>)
 8007374:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007376:	4b24      	ldr	r3, [pc, #144]	@ (8007408 <RCCEx_PLL2_Config+0x160>)
 8007378:	4013      	ands	r3, r2
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	69d2      	ldr	r2, [r2, #28]
 800737e:	00d2      	lsls	r2, r2, #3
 8007380:	4920      	ldr	r1, [pc, #128]	@ (8007404 <RCCEx_PLL2_Config+0x15c>)
 8007382:	4313      	orrs	r3, r2
 8007384:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007386:	4b1f      	ldr	r3, [pc, #124]	@ (8007404 <RCCEx_PLL2_Config+0x15c>)
 8007388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800738a:	4a1e      	ldr	r2, [pc, #120]	@ (8007404 <RCCEx_PLL2_Config+0x15c>)
 800738c:	f043 0310 	orr.w	r3, r3, #16
 8007390:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d106      	bne.n	80073a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007398:	4b1a      	ldr	r3, [pc, #104]	@ (8007404 <RCCEx_PLL2_Config+0x15c>)
 800739a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800739c:	4a19      	ldr	r2, [pc, #100]	@ (8007404 <RCCEx_PLL2_Config+0x15c>)
 800739e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80073a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80073a4:	e00f      	b.n	80073c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d106      	bne.n	80073ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80073ac:	4b15      	ldr	r3, [pc, #84]	@ (8007404 <RCCEx_PLL2_Config+0x15c>)
 80073ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073b0:	4a14      	ldr	r2, [pc, #80]	@ (8007404 <RCCEx_PLL2_Config+0x15c>)
 80073b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80073b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80073b8:	e005      	b.n	80073c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80073ba:	4b12      	ldr	r3, [pc, #72]	@ (8007404 <RCCEx_PLL2_Config+0x15c>)
 80073bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073be:	4a11      	ldr	r2, [pc, #68]	@ (8007404 <RCCEx_PLL2_Config+0x15c>)
 80073c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80073c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80073c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007404 <RCCEx_PLL2_Config+0x15c>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a0e      	ldr	r2, [pc, #56]	@ (8007404 <RCCEx_PLL2_Config+0x15c>)
 80073cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80073d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073d2:	f7fc fadb 	bl	800398c <HAL_GetTick>
 80073d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80073d8:	e008      	b.n	80073ec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80073da:	f7fc fad7 	bl	800398c <HAL_GetTick>
 80073de:	4602      	mov	r2, r0
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d901      	bls.n	80073ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e006      	b.n	80073fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80073ec:	4b05      	ldr	r3, [pc, #20]	@ (8007404 <RCCEx_PLL2_Config+0x15c>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d0f0      	beq.n	80073da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80073f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	58024400 	.word	0x58024400
 8007408:	ffff0007 	.word	0xffff0007

0800740c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007416:	2300      	movs	r3, #0
 8007418:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800741a:	4b53      	ldr	r3, [pc, #332]	@ (8007568 <RCCEx_PLL3_Config+0x15c>)
 800741c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800741e:	f003 0303 	and.w	r3, r3, #3
 8007422:	2b03      	cmp	r3, #3
 8007424:	d101      	bne.n	800742a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e099      	b.n	800755e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800742a:	4b4f      	ldr	r3, [pc, #316]	@ (8007568 <RCCEx_PLL3_Config+0x15c>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a4e      	ldr	r2, [pc, #312]	@ (8007568 <RCCEx_PLL3_Config+0x15c>)
 8007430:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007434:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007436:	f7fc faa9 	bl	800398c <HAL_GetTick>
 800743a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800743c:	e008      	b.n	8007450 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800743e:	f7fc faa5 	bl	800398c <HAL_GetTick>
 8007442:	4602      	mov	r2, r0
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	2b02      	cmp	r3, #2
 800744a:	d901      	bls.n	8007450 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800744c:	2303      	movs	r3, #3
 800744e:	e086      	b.n	800755e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007450:	4b45      	ldr	r3, [pc, #276]	@ (8007568 <RCCEx_PLL3_Config+0x15c>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1f0      	bne.n	800743e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800745c:	4b42      	ldr	r3, [pc, #264]	@ (8007568 <RCCEx_PLL3_Config+0x15c>)
 800745e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007460:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	051b      	lsls	r3, r3, #20
 800746a:	493f      	ldr	r1, [pc, #252]	@ (8007568 <RCCEx_PLL3_Config+0x15c>)
 800746c:	4313      	orrs	r3, r2
 800746e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	3b01      	subs	r3, #1
 8007476:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	3b01      	subs	r3, #1
 8007480:	025b      	lsls	r3, r3, #9
 8007482:	b29b      	uxth	r3, r3
 8007484:	431a      	orrs	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	3b01      	subs	r3, #1
 800748c:	041b      	lsls	r3, r3, #16
 800748e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007492:	431a      	orrs	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	3b01      	subs	r3, #1
 800749a:	061b      	lsls	r3, r3, #24
 800749c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80074a0:	4931      	ldr	r1, [pc, #196]	@ (8007568 <RCCEx_PLL3_Config+0x15c>)
 80074a2:	4313      	orrs	r3, r2
 80074a4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80074a6:	4b30      	ldr	r3, [pc, #192]	@ (8007568 <RCCEx_PLL3_Config+0x15c>)
 80074a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	695b      	ldr	r3, [r3, #20]
 80074b2:	492d      	ldr	r1, [pc, #180]	@ (8007568 <RCCEx_PLL3_Config+0x15c>)
 80074b4:	4313      	orrs	r3, r2
 80074b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80074b8:	4b2b      	ldr	r3, [pc, #172]	@ (8007568 <RCCEx_PLL3_Config+0x15c>)
 80074ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074bc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	699b      	ldr	r3, [r3, #24]
 80074c4:	4928      	ldr	r1, [pc, #160]	@ (8007568 <RCCEx_PLL3_Config+0x15c>)
 80074c6:	4313      	orrs	r3, r2
 80074c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80074ca:	4b27      	ldr	r3, [pc, #156]	@ (8007568 <RCCEx_PLL3_Config+0x15c>)
 80074cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ce:	4a26      	ldr	r2, [pc, #152]	@ (8007568 <RCCEx_PLL3_Config+0x15c>)
 80074d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80074d6:	4b24      	ldr	r3, [pc, #144]	@ (8007568 <RCCEx_PLL3_Config+0x15c>)
 80074d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80074da:	4b24      	ldr	r3, [pc, #144]	@ (800756c <RCCEx_PLL3_Config+0x160>)
 80074dc:	4013      	ands	r3, r2
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	69d2      	ldr	r2, [r2, #28]
 80074e2:	00d2      	lsls	r2, r2, #3
 80074e4:	4920      	ldr	r1, [pc, #128]	@ (8007568 <RCCEx_PLL3_Config+0x15c>)
 80074e6:	4313      	orrs	r3, r2
 80074e8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80074ea:	4b1f      	ldr	r3, [pc, #124]	@ (8007568 <RCCEx_PLL3_Config+0x15c>)
 80074ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ee:	4a1e      	ldr	r2, [pc, #120]	@ (8007568 <RCCEx_PLL3_Config+0x15c>)
 80074f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d106      	bne.n	800750a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80074fc:	4b1a      	ldr	r3, [pc, #104]	@ (8007568 <RCCEx_PLL3_Config+0x15c>)
 80074fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007500:	4a19      	ldr	r2, [pc, #100]	@ (8007568 <RCCEx_PLL3_Config+0x15c>)
 8007502:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007506:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007508:	e00f      	b.n	800752a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d106      	bne.n	800751e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007510:	4b15      	ldr	r3, [pc, #84]	@ (8007568 <RCCEx_PLL3_Config+0x15c>)
 8007512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007514:	4a14      	ldr	r2, [pc, #80]	@ (8007568 <RCCEx_PLL3_Config+0x15c>)
 8007516:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800751a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800751c:	e005      	b.n	800752a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800751e:	4b12      	ldr	r3, [pc, #72]	@ (8007568 <RCCEx_PLL3_Config+0x15c>)
 8007520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007522:	4a11      	ldr	r2, [pc, #68]	@ (8007568 <RCCEx_PLL3_Config+0x15c>)
 8007524:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007528:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800752a:	4b0f      	ldr	r3, [pc, #60]	@ (8007568 <RCCEx_PLL3_Config+0x15c>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a0e      	ldr	r2, [pc, #56]	@ (8007568 <RCCEx_PLL3_Config+0x15c>)
 8007530:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007534:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007536:	f7fc fa29 	bl	800398c <HAL_GetTick>
 800753a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800753c:	e008      	b.n	8007550 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800753e:	f7fc fa25 	bl	800398c <HAL_GetTick>
 8007542:	4602      	mov	r2, r0
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	2b02      	cmp	r3, #2
 800754a:	d901      	bls.n	8007550 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	e006      	b.n	800755e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007550:	4b05      	ldr	r3, [pc, #20]	@ (8007568 <RCCEx_PLL3_Config+0x15c>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d0f0      	beq.n	800753e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800755c:	7bfb      	ldrb	r3, [r7, #15]
}
 800755e:	4618      	mov	r0, r3
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	58024400 	.word	0x58024400
 800756c:	ffff0007 	.word	0xffff0007

08007570 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d101      	bne.n	8007582 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e10f      	b.n	80077a2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a87      	ldr	r2, [pc, #540]	@ (80077ac <HAL_SPI_Init+0x23c>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d00f      	beq.n	80075b2 <HAL_SPI_Init+0x42>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a86      	ldr	r2, [pc, #536]	@ (80077b0 <HAL_SPI_Init+0x240>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d00a      	beq.n	80075b2 <HAL_SPI_Init+0x42>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a84      	ldr	r2, [pc, #528]	@ (80077b4 <HAL_SPI_Init+0x244>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d005      	beq.n	80075b2 <HAL_SPI_Init+0x42>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	2b0f      	cmp	r3, #15
 80075ac:	d901      	bls.n	80075b2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e0f7      	b.n	80077a2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 ff4c 	bl	8008450 <SPI_GetPacketSize>
 80075b8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a7b      	ldr	r2, [pc, #492]	@ (80077ac <HAL_SPI_Init+0x23c>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d00c      	beq.n	80075de <HAL_SPI_Init+0x6e>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a79      	ldr	r2, [pc, #484]	@ (80077b0 <HAL_SPI_Init+0x240>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d007      	beq.n	80075de <HAL_SPI_Init+0x6e>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a78      	ldr	r2, [pc, #480]	@ (80077b4 <HAL_SPI_Init+0x244>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d002      	beq.n	80075de <HAL_SPI_Init+0x6e>
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2b08      	cmp	r3, #8
 80075dc:	d811      	bhi.n	8007602 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80075e2:	4a72      	ldr	r2, [pc, #456]	@ (80077ac <HAL_SPI_Init+0x23c>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d009      	beq.n	80075fc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a70      	ldr	r2, [pc, #448]	@ (80077b0 <HAL_SPI_Init+0x240>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d004      	beq.n	80075fc <HAL_SPI_Init+0x8c>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a6f      	ldr	r2, [pc, #444]	@ (80077b4 <HAL_SPI_Init+0x244>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d104      	bne.n	8007606 <HAL_SPI_Init+0x96>
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2b10      	cmp	r3, #16
 8007600:	d901      	bls.n	8007606 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e0cd      	b.n	80077a2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b00      	cmp	r3, #0
 8007610:	d106      	bne.n	8007620 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f7fb fc68 	bl	8002ef0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2202      	movs	r2, #2
 8007624:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f022 0201 	bic.w	r2, r2, #1
 8007636:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007642:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	699b      	ldr	r3, [r3, #24]
 8007648:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800764c:	d119      	bne.n	8007682 <HAL_SPI_Init+0x112>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007656:	d103      	bne.n	8007660 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800765c:	2b00      	cmp	r3, #0
 800765e:	d008      	beq.n	8007672 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007664:	2b00      	cmp	r3, #0
 8007666:	d10c      	bne.n	8007682 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800766c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007670:	d107      	bne.n	8007682 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007680:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00f      	beq.n	80076ae <HAL_SPI_Init+0x13e>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	2b06      	cmp	r3, #6
 8007694:	d90b      	bls.n	80076ae <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	430a      	orrs	r2, r1
 80076aa:	601a      	str	r2, [r3, #0]
 80076ac:	e007      	b.n	80076be <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80076bc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	69da      	ldr	r2, [r3, #28]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076c6:	431a      	orrs	r2, r3
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	431a      	orrs	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076d0:	ea42 0103 	orr.w	r1, r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	68da      	ldr	r2, [r3, #12]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	430a      	orrs	r2, r1
 80076de:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076e8:	431a      	orrs	r2, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ee:	431a      	orrs	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	699b      	ldr	r3, [r3, #24]
 80076f4:	431a      	orrs	r2, r3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	431a      	orrs	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	695b      	ldr	r3, [r3, #20]
 8007700:	431a      	orrs	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a1b      	ldr	r3, [r3, #32]
 8007706:	431a      	orrs	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	431a      	orrs	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007712:	431a      	orrs	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	431a      	orrs	r2, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800771e:	ea42 0103 	orr.w	r1, r2, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	430a      	orrs	r2, r1
 800772c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d113      	bne.n	800775e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007748:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800775c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f022 0201 	bic.w	r2, r2, #1
 800776c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00a      	beq.n	8007790 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	430a      	orrs	r2, r1
 800778e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	40013000 	.word	0x40013000
 80077b0:	40003800 	.word	0x40003800
 80077b4:	40003c00 	.word	0x40003c00

080077b8 <HAL_SPI_DeInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d101      	bne.n	80077ca <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e01b      	b.n	8007802 <HAL_SPI_DeInit+0x4a>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2202      	movs	r2, #2
 80077ce:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f022 0201 	bic.w	r2, r2, #1
 80077e0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f7fb fc0a 	bl	8002ffc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State = HAL_SPI_STATE_RESET;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3708      	adds	r7, #8
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
	...

0800780c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b08e      	sub	sp, #56	@ 0x38
 8007810:	af02      	add	r7, sp, #8
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	607a      	str	r2, [r7, #4]
 8007818:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	3320      	adds	r3, #32
 8007820:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	3330      	adds	r3, #48	@ 0x30
 8007828:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800782e:	095b      	lsrs	r3, r3, #5
 8007830:	b29b      	uxth	r3, r3
 8007832:	3301      	adds	r3, #1
 8007834:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007836:	f7fc f8a9 	bl	800398c <HAL_GetTick>
 800783a:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800783c:	887b      	ldrh	r3, [r7, #2]
 800783e:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8007840:	887b      	ldrh	r3, [r7, #2]
 8007842:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800784a:	b2db      	uxtb	r3, r3
 800784c:	2b01      	cmp	r3, #1
 800784e:	d001      	beq.n	8007854 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8007850:	2302      	movs	r3, #2
 8007852:	e310      	b.n	8007e76 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d005      	beq.n	8007866 <HAL_SPI_TransmitReceive+0x5a>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d002      	beq.n	8007866 <HAL_SPI_TransmitReceive+0x5a>
 8007860:	887b      	ldrh	r3, [r7, #2]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d101      	bne.n	800786a <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e305      	b.n	8007e76 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007870:	2b01      	cmp	r3, #1
 8007872:	d101      	bne.n	8007878 <HAL_SPI_TransmitReceive+0x6c>
 8007874:	2302      	movs	r3, #2
 8007876:	e2fe      	b.n	8007e76 <HAL_SPI_TransmitReceive+0x66a>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2205      	movs	r2, #5
 8007884:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	887a      	ldrh	r2, [r7, #2]
 800789a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	887a      	ldrh	r2, [r7, #2]
 80078a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	68ba      	ldr	r2, [r7, #8]
 80078aa:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	887a      	ldrh	r2, [r7, #2]
 80078b0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	887a      	ldrh	r2, [r7, #2]
 80078b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68da      	ldr	r2, [r3, #12]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 80078d6:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a70      	ldr	r2, [pc, #448]	@ (8007aa0 <HAL_SPI_TransmitReceive+0x294>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d009      	beq.n	80078f6 <HAL_SPI_TransmitReceive+0xea>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a6f      	ldr	r2, [pc, #444]	@ (8007aa4 <HAL_SPI_TransmitReceive+0x298>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d004      	beq.n	80078f6 <HAL_SPI_TransmitReceive+0xea>
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a6d      	ldr	r2, [pc, #436]	@ (8007aa8 <HAL_SPI_TransmitReceive+0x29c>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d102      	bne.n	80078fc <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 80078f6:	2310      	movs	r3, #16
 80078f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078fa:	e001      	b.n	8007900 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 80078fc:	2308      	movs	r3, #8
 80078fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	685a      	ldr	r2, [r3, #4]
 8007906:	4b69      	ldr	r3, [pc, #420]	@ (8007aac <HAL_SPI_TransmitReceive+0x2a0>)
 8007908:	4013      	ands	r3, r2
 800790a:	8879      	ldrh	r1, [r7, #2]
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	6812      	ldr	r2, [r2, #0]
 8007910:	430b      	orrs	r3, r1
 8007912:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f042 0201 	orr.w	r2, r2, #1
 8007922:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800792c:	d107      	bne.n	800793e <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800793c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	2b0f      	cmp	r3, #15
 8007944:	f240 80a2 	bls.w	8007a8c <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8007948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800794a:	089b      	lsrs	r3, r3, #2
 800794c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800794e:	e094      	b.n	8007a7a <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	695b      	ldr	r3, [r3, #20]
 8007956:	f003 0302 	and.w	r3, r3, #2
 800795a:	2b02      	cmp	r3, #2
 800795c:	d120      	bne.n	80079a0 <HAL_SPI_TransmitReceive+0x194>
 800795e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007960:	2b00      	cmp	r3, #0
 8007962:	d01d      	beq.n	80079a0 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8007964:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007966:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8007968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800796a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800796c:	429a      	cmp	r2, r3
 800796e:	d217      	bcs.n	80079a0 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	6812      	ldr	r2, [r2, #0]
 800797a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007980:	1d1a      	adds	r2, r3, #4
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800798c:	b29b      	uxth	r3, r3
 800798e:	3b01      	subs	r3, #1
 8007990:	b29a      	uxth	r2, r3
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800799e:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	695b      	ldr	r3, [r3, #20]
 80079a6:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80079a8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d065      	beq.n	8007a7a <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	695b      	ldr	r3, [r3, #20]
 80079b4:	f003 0301 	and.w	r3, r3, #1
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d118      	bne.n	80079ee <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079c4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80079c6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079cc:	1d1a      	adds	r2, r3, #4
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80079d8:	b29b      	uxth	r3, r3
 80079da:	3b01      	subs	r3, #1
 80079dc:	b29a      	uxth	r2, r3
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80079ea:	853b      	strh	r3, [r7, #40]	@ 0x28
 80079ec:	e045      	b.n	8007a7a <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80079ee:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80079f0:	8bfb      	ldrh	r3, [r7, #30]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d21d      	bcs.n	8007a32 <HAL_SPI_TransmitReceive+0x226>
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d018      	beq.n	8007a32 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a08:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007a0a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a10:	1d1a      	adds	r2, r3, #4
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a2e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007a30:	e023      	b.n	8007a7a <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a32:	f7fb ffab 	bl	800398c <HAL_GetTick>
 8007a36:	4602      	mov	r2, r0
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	1ad3      	subs	r3, r2, r3
 8007a3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d803      	bhi.n	8007a4a <HAL_SPI_TransmitReceive+0x23e>
 8007a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a48:	d102      	bne.n	8007a50 <HAL_SPI_TransmitReceive+0x244>
 8007a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d114      	bne.n	8007a7a <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f000 fc2f 	bl	80082b4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a5c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8007a76:	2303      	movs	r3, #3
 8007a78:	e1fd      	b.n	8007e76 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007a7a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f47f af67 	bne.w	8007950 <HAL_SPI_TransmitReceive+0x144>
 8007a82:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f47f af63 	bne.w	8007950 <HAL_SPI_TransmitReceive+0x144>
 8007a8a:	e1ce      	b.n	8007e2a <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	2b07      	cmp	r3, #7
 8007a92:	f240 81c2 	bls.w	8007e1a <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8007a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a98:	085b      	lsrs	r3, r3, #1
 8007a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007a9c:	e0c9      	b.n	8007c32 <HAL_SPI_TransmitReceive+0x426>
 8007a9e:	bf00      	nop
 8007aa0:	40013000 	.word	0x40013000
 8007aa4:	40003800 	.word	0x40003800
 8007aa8:	40003c00 	.word	0x40003c00
 8007aac:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	695b      	ldr	r3, [r3, #20]
 8007ab6:	f003 0302 	and.w	r3, r3, #2
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d11f      	bne.n	8007afe <HAL_SPI_TransmitReceive+0x2f2>
 8007abe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d01c      	beq.n	8007afe <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8007ac4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007ac6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8007ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aca:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d216      	bcs.n	8007afe <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ad4:	881a      	ldrh	r2, [r3, #0]
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad8:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ade:	1c9a      	adds	r2, r3, #2
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	3b01      	subs	r3, #1
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007afc:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	695b      	ldr	r3, [r3, #20]
 8007b04:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8007b06:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	f000 8092 	beq.w	8007c32 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	695b      	ldr	r3, [r3, #20]
 8007b14:	f003 0301 	and.w	r3, r3, #1
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d118      	bne.n	8007b4e <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b20:	6a3a      	ldr	r2, [r7, #32]
 8007b22:	8812      	ldrh	r2, [r2, #0]
 8007b24:	b292      	uxth	r2, r2
 8007b26:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b2c:	1c9a      	adds	r2, r3, #2
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	b29a      	uxth	r2, r3
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b4a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007b4c:	e071      	b.n	8007c32 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007b4e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007b50:	8bfb      	ldrh	r3, [r7, #30]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d228      	bcs.n	8007ba8 <HAL_SPI_TransmitReceive+0x39c>
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d023      	beq.n	8007ba8 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b64:	6a3a      	ldr	r2, [r7, #32]
 8007b66:	8812      	ldrh	r2, [r2, #0]
 8007b68:	b292      	uxth	r2, r2
 8007b6a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b70:	1c9a      	adds	r2, r3, #2
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b7a:	6a3a      	ldr	r2, [r7, #32]
 8007b7c:	8812      	ldrh	r2, [r2, #0]
 8007b7e:	b292      	uxth	r2, r2
 8007b80:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b86:	1c9a      	adds	r2, r3, #2
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	3b02      	subs	r3, #2
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007ba4:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007ba6:	e044      	b.n	8007c32 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8007ba8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d11d      	bne.n	8007bea <HAL_SPI_TransmitReceive+0x3de>
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d018      	beq.n	8007bea <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bbc:	6a3a      	ldr	r2, [r7, #32]
 8007bbe:	8812      	ldrh	r2, [r2, #0]
 8007bc0:	b292      	uxth	r2, r2
 8007bc2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bc8:	1c9a      	adds	r2, r3, #2
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007be6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007be8:	e023      	b.n	8007c32 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bea:	f7fb fecf 	bl	800398c <HAL_GetTick>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	1ad3      	subs	r3, r2, r3
 8007bf4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d803      	bhi.n	8007c02 <HAL_SPI_TransmitReceive+0x3f6>
 8007bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c00:	d102      	bne.n	8007c08 <HAL_SPI_TransmitReceive+0x3fc>
 8007c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d114      	bne.n	8007c32 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	f000 fb53 	bl	80082b4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c14:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2201      	movs	r2, #1
 8007c22:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	e121      	b.n	8007e76 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007c32:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f47f af3b 	bne.w	8007ab0 <HAL_SPI_TransmitReceive+0x2a4>
 8007c3a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f47f af37 	bne.w	8007ab0 <HAL_SPI_TransmitReceive+0x2a4>
 8007c42:	e0f2      	b.n	8007e2a <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	695b      	ldr	r3, [r3, #20]
 8007c4a:	f003 0302 	and.w	r3, r3, #2
 8007c4e:	2b02      	cmp	r3, #2
 8007c50:	d121      	bne.n	8007c96 <HAL_SPI_TransmitReceive+0x48a>
 8007c52:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d01e      	beq.n	8007c96 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8007c58:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007c5a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8007c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c5e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d218      	bcs.n	8007c96 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	3320      	adds	r3, #32
 8007c6e:	7812      	ldrb	r2, [r2, #0]
 8007c70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c76:	1c5a      	adds	r2, r3, #1
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	3b01      	subs	r3, #1
 8007c86:	b29a      	uxth	r2, r3
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007c94:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	695b      	ldr	r3, [r3, #20]
 8007c9c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8007c9e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	f000 80ba 	beq.w	8007e1a <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	695b      	ldr	r3, [r3, #20]
 8007cac:	f003 0301 	and.w	r3, r3, #1
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d11b      	bne.n	8007cec <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cc0:	7812      	ldrb	r2, [r2, #0]
 8007cc2:	b2d2      	uxtb	r2, r2
 8007cc4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cca:	1c5a      	adds	r2, r3, #1
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007ce8:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007cea:	e096      	b.n	8007e1a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007cec:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007cee:	8bfb      	ldrh	r3, [r7, #30]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d24a      	bcs.n	8007d8a <HAL_SPI_TransmitReceive+0x57e>
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d045      	beq.n	8007d8a <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d0a:	7812      	ldrb	r2, [r2, #0]
 8007d0c:	b2d2      	uxtb	r2, r2
 8007d0e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d14:	1c5a      	adds	r2, r3, #1
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d26:	7812      	ldrb	r2, [r2, #0]
 8007d28:	b2d2      	uxtb	r2, r2
 8007d2a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d30:	1c5a      	adds	r2, r3, #1
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d42:	7812      	ldrb	r2, [r2, #0]
 8007d44:	b2d2      	uxtb	r2, r2
 8007d46:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d4c:	1c5a      	adds	r2, r3, #1
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d5e:	7812      	ldrb	r2, [r2, #0]
 8007d60:	b2d2      	uxtb	r2, r2
 8007d62:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d68:	1c5a      	adds	r2, r3, #1
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	3b04      	subs	r3, #4
 8007d78:	b29a      	uxth	r2, r3
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007d86:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007d88:	e047      	b.n	8007e1a <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8007d8a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007d8c:	2b03      	cmp	r3, #3
 8007d8e:	d820      	bhi.n	8007dd2 <HAL_SPI_TransmitReceive+0x5c6>
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d01b      	beq.n	8007dd2 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007da6:	7812      	ldrb	r2, [r2, #0]
 8007da8:	b2d2      	uxtb	r2, r2
 8007daa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007db0:	1c5a      	adds	r2, r3, #1
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	b29a      	uxth	r2, r3
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007dce:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007dd0:	e023      	b.n	8007e1a <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007dd2:	f7fb fddb 	bl	800398c <HAL_GetTick>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	1ad3      	subs	r3, r2, r3
 8007ddc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d803      	bhi.n	8007dea <HAL_SPI_TransmitReceive+0x5de>
 8007de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de8:	d102      	bne.n	8007df0 <HAL_SPI_TransmitReceive+0x5e4>
 8007dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d114      	bne.n	8007e1a <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f000 fa5f 	bl	80082b4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007dfc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8007e16:	2303      	movs	r3, #3
 8007e18:	e02d      	b.n	8007e76 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007e1a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f47f af11 	bne.w	8007c44 <HAL_SPI_TransmitReceive+0x438>
 8007e22:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	f47f af0d 	bne.w	8007c44 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	9300      	str	r3, [sp, #0]
 8007e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e30:	2200      	movs	r2, #0
 8007e32:	2108      	movs	r1, #8
 8007e34:	68f8      	ldr	r0, [r7, #12]
 8007e36:	f000 fadd 	bl	80083f4 <SPI_WaitOnFlagUntilTimeout>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d007      	beq.n	8007e50 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e46:	f043 0220 	orr.w	r2, r3, #32
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f000 fa2f 	bl	80082b4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d001      	beq.n	8007e74 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	e000      	b.n	8007e76 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8007e74:	2300      	movs	r3, #0
  }
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3730      	adds	r7, #48	@ 0x30
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop

08007e80 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b08a      	sub	sp, #40	@ 0x28
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	691b      	ldr	r3, [r3, #16]
 8007e8e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	695b      	ldr	r3, [r3, #20]
 8007e96:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007e98:	6a3a      	ldr	r2, [r7, #32]
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007eb2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	3330      	adds	r3, #48	@ 0x30
 8007eba:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d010      	beq.n	8007ee8 <HAL_SPI_IRQHandler+0x68>
 8007ec6:	6a3b      	ldr	r3, [r7, #32]
 8007ec8:	f003 0308 	and.w	r3, r3, #8
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d00b      	beq.n	8007ee8 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	699a      	ldr	r2, [r3, #24]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ede:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 f9c3 	bl	800826c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8007ee6:	e192      	b.n	800820e <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d113      	bne.n	8007f1a <HAL_SPI_IRQHandler+0x9a>
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	f003 0320 	and.w	r3, r3, #32
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d10e      	bne.n	8007f1a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d009      	beq.n	8007f1a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	4798      	blx	r3
    handled = 1UL;
 8007f16:	2301      	movs	r3, #1
 8007f18:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007f1a:	69bb      	ldr	r3, [r7, #24]
 8007f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10f      	bne.n	8007f44 <HAL_SPI_IRQHandler+0xc4>
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	f003 0301 	and.w	r3, r3, #1
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00a      	beq.n	8007f44 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d105      	bne.n	8007f44 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	4798      	blx	r3
    handled = 1UL;
 8007f40:	2301      	movs	r3, #1
 8007f42:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	f003 0320 	and.w	r3, r3, #32
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d10f      	bne.n	8007f6e <HAL_SPI_IRQHandler+0xee>
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	f003 0302 	and.w	r3, r3, #2
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d00a      	beq.n	8007f6e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d105      	bne.n	8007f6e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	4798      	blx	r3
    handled = 1UL;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8007f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f040 8147 	bne.w	8008204 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	f003 0308 	and.w	r3, r3, #8
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f000 808b 	beq.w	8008098 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	699a      	ldr	r2, [r3, #24]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f042 0208 	orr.w	r2, r2, #8
 8007f90:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	699a      	ldr	r2, [r3, #24]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f042 0210 	orr.w	r2, r2, #16
 8007fa0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	699a      	ldr	r2, [r3, #24]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007fb0:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	691a      	ldr	r2, [r3, #16]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f022 0208 	bic.w	r2, r2, #8
 8007fc0:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d13d      	bne.n	800804c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8007fd0:	e036      	b.n	8008040 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	2b0f      	cmp	r3, #15
 8007fd8:	d90b      	bls.n	8007ff2 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fe2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007fe4:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fea:	1d1a      	adds	r2, r3, #4
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	665a      	str	r2, [r3, #100]	@ 0x64
 8007ff0:	e01d      	b.n	800802e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	2b07      	cmp	r3, #7
 8007ff8:	d90b      	bls.n	8008012 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ffe:	68fa      	ldr	r2, [r7, #12]
 8008000:	8812      	ldrh	r2, [r2, #0]
 8008002:	b292      	uxth	r2, r2
 8008004:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800800a:	1c9a      	adds	r2, r3, #2
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	665a      	str	r2, [r3, #100]	@ 0x64
 8008010:	e00d      	b.n	800802e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800801e:	7812      	ldrb	r2, [r2, #0]
 8008020:	b2d2      	uxtb	r2, r2
 8008022:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008028:	1c5a      	adds	r2, r3, #1
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008034:	b29b      	uxth	r3, r3
 8008036:	3b01      	subs	r3, #1
 8008038:	b29a      	uxth	r2, r3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008046:	b29b      	uxth	r3, r3
 8008048:	2b00      	cmp	r3, #0
 800804a:	d1c2      	bne.n	8007fd2 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 f931 	bl	80082b4 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2201      	movs	r2, #1
 8008056:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008060:	2b00      	cmp	r3, #0
 8008062:	d003      	beq.n	800806c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 f8f7 	bl	8008258 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800806a:	e0d0      	b.n	800820e <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800806c:	7cfb      	ldrb	r3, [r7, #19]
 800806e:	2b05      	cmp	r3, #5
 8008070:	d103      	bne.n	800807a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 f8e6 	bl	8008244 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8008078:	e0c6      	b.n	8008208 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800807a:	7cfb      	ldrb	r3, [r7, #19]
 800807c:	2b04      	cmp	r3, #4
 800807e:	d103      	bne.n	8008088 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 f8d5 	bl	8008230 <HAL_SPI_RxCpltCallback>
    return;
 8008086:	e0bf      	b.n	8008208 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8008088:	7cfb      	ldrb	r3, [r7, #19]
 800808a:	2b03      	cmp	r3, #3
 800808c:	f040 80bc 	bne.w	8008208 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 f8c3 	bl	800821c <HAL_SPI_TxCpltCallback>
    return;
 8008096:	e0b7      	b.n	8008208 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800809e:	2b00      	cmp	r3, #0
 80080a0:	f000 80b5 	beq.w	800820e <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00f      	beq.n	80080ce <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080b4:	f043 0204 	orr.w	r2, r3, #4
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	699a      	ldr	r2, [r3, #24]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80080cc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00f      	beq.n	80080f8 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080de:	f043 0201 	orr.w	r2, r3, #1
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	699a      	ldr	r2, [r3, #24]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80080f6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00f      	beq.n	8008122 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008108:	f043 0208 	orr.w	r2, r3, #8
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	699a      	ldr	r2, [r3, #24]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008120:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	f003 0320 	and.w	r3, r3, #32
 8008128:	2b00      	cmp	r3, #0
 800812a:	d00f      	beq.n	800814c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008132:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	699a      	ldr	r2, [r3, #24]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f042 0220 	orr.w	r2, r2, #32
 800814a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008152:	2b00      	cmp	r3, #0
 8008154:	d05a      	beq.n	800820c <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f022 0201 	bic.w	r2, r2, #1
 8008164:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	6919      	ldr	r1, [r3, #16]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	4b28      	ldr	r3, [pc, #160]	@ (8008214 <HAL_SPI_IRQHandler+0x394>)
 8008172:	400b      	ands	r3, r1
 8008174:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800817c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008180:	d138      	bne.n	80081f4 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	689a      	ldr	r2, [r3, #8]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008190:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008196:	2b00      	cmp	r3, #0
 8008198:	d013      	beq.n	80081c2 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800819e:	4a1e      	ldr	r2, [pc, #120]	@ (8008218 <HAL_SPI_IRQHandler+0x398>)
 80081a0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7fb fde6 	bl	8003d78 <HAL_DMA_Abort_IT>
 80081ac:	4603      	mov	r3, r0
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d007      	beq.n	80081c2 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081b8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d020      	beq.n	800820c <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80081ce:	4a12      	ldr	r2, [pc, #72]	@ (8008218 <HAL_SPI_IRQHandler+0x398>)
 80081d0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7fb fdce 	bl	8003d78 <HAL_DMA_Abort_IT>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d014      	beq.n	800820c <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081e8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80081f2:	e00b      	b.n	800820c <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 f82b 	bl	8008258 <HAL_SPI_ErrorCallback>
    return;
 8008202:	e003      	b.n	800820c <HAL_SPI_IRQHandler+0x38c>
    return;
 8008204:	bf00      	nop
 8008206:	e002      	b.n	800820e <HAL_SPI_IRQHandler+0x38e>
    return;
 8008208:	bf00      	nop
 800820a:	e000      	b.n	800820e <HAL_SPI_IRQHandler+0x38e>
    return;
 800820c:	bf00      	nop
  }
}
 800820e:	3728      	adds	r7, #40	@ 0x28
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	fffffc94 	.word	0xfffffc94
 8008218:	08008281 	.word	0x08008281

0800821c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8008224:	bf00      	nop
 8008226:	370c      	adds	r7, #12
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008238:	bf00      	nop
 800823a:	370c      	adds	r7, #12
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800824c:	bf00      	nop
 800824e:	370c      	adds	r7, #12
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr

08008258 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008260:	bf00      	nop
 8008262:	370c      	adds	r7, #12
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8008274:	bf00      	nop
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800828c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2201      	movs	r2, #1
 80082a2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f7ff ffd6 	bl	8008258 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80082ac:	bf00      	nop
 80082ae:	3710      	adds	r7, #16
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b085      	sub	sp, #20
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	695b      	ldr	r3, [r3, #20]
 80082c2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	699a      	ldr	r2, [r3, #24]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f042 0208 	orr.w	r2, r2, #8
 80082d2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	699a      	ldr	r2, [r3, #24]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f042 0210 	orr.w	r2, r2, #16
 80082e2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f022 0201 	bic.w	r2, r2, #1
 80082f2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	6919      	ldr	r1, [r3, #16]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	4b3c      	ldr	r3, [pc, #240]	@ (80083f0 <SPI_CloseTransfer+0x13c>)
 8008300:	400b      	ands	r3, r1
 8008302:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	689a      	ldr	r2, [r3, #8]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008312:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800831a:	b2db      	uxtb	r3, r3
 800831c:	2b04      	cmp	r3, #4
 800831e:	d014      	beq.n	800834a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f003 0320 	and.w	r3, r3, #32
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00f      	beq.n	800834a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008330:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	699a      	ldr	r2, [r3, #24]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f042 0220 	orr.w	r2, r2, #32
 8008348:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008350:	b2db      	uxtb	r3, r3
 8008352:	2b03      	cmp	r3, #3
 8008354:	d014      	beq.n	8008380 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00f      	beq.n	8008380 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008366:	f043 0204 	orr.w	r2, r3, #4
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	699a      	ldr	r2, [r3, #24]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800837e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00f      	beq.n	80083aa <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008390:	f043 0201 	orr.w	r2, r3, #1
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	699a      	ldr	r2, [r3, #24]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80083a8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d00f      	beq.n	80083d4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083ba:	f043 0208 	orr.w	r2, r3, #8
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	699a      	ldr	r2, [r3, #24]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80083d2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80083e4:	bf00      	nop
 80083e6:	3714      	adds	r7, #20
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr
 80083f0:	fffffc90 	.word	0xfffffc90

080083f4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	603b      	str	r3, [r7, #0]
 8008400:	4613      	mov	r3, r2
 8008402:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008404:	e010      	b.n	8008428 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008406:	f7fb fac1 	bl	800398c <HAL_GetTick>
 800840a:	4602      	mov	r2, r0
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	1ad3      	subs	r3, r2, r3
 8008410:	683a      	ldr	r2, [r7, #0]
 8008412:	429a      	cmp	r2, r3
 8008414:	d803      	bhi.n	800841e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800841c:	d102      	bne.n	8008424 <SPI_WaitOnFlagUntilTimeout+0x30>
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d101      	bne.n	8008428 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008424:	2303      	movs	r3, #3
 8008426:	e00f      	b.n	8008448 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	695a      	ldr	r2, [r3, #20]
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	4013      	ands	r3, r2
 8008432:	68ba      	ldr	r2, [r7, #8]
 8008434:	429a      	cmp	r2, r3
 8008436:	bf0c      	ite	eq
 8008438:	2301      	moveq	r3, #1
 800843a:	2300      	movne	r3, #0
 800843c:	b2db      	uxtb	r3, r3
 800843e:	461a      	mov	r2, r3
 8008440:	79fb      	ldrb	r3, [r7, #7]
 8008442:	429a      	cmp	r2, r3
 8008444:	d0df      	beq.n	8008406 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3710      	adds	r7, #16
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008450:	b480      	push	{r7}
 8008452:	b085      	sub	sp, #20
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800845c:	095b      	lsrs	r3, r3, #5
 800845e:	3301      	adds	r3, #1
 8008460:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	3301      	adds	r3, #1
 8008468:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	3307      	adds	r3, #7
 800846e:	08db      	lsrs	r3, r3, #3
 8008470:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	68fa      	ldr	r2, [r7, #12]
 8008476:	fb02 f303 	mul.w	r3, r2, r3
}
 800847a:	4618      	mov	r0, r3
 800847c:	3714      	adds	r7, #20
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr

08008486 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008486:	b580      	push	{r7, lr}
 8008488:	b082      	sub	sp, #8
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d101      	bne.n	8008498 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	e042      	b.n	800851e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d106      	bne.n	80084b0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f83b 	bl	8008526 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2224      	movs	r2, #36	@ 0x24
 80084b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f022 0201 	bic.w	r2, r2, #1
 80084c6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d002      	beq.n	80084d6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 fe29 	bl	8009128 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 f8be 	bl	8008658 <UART_SetConfig>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d101      	bne.n	80084e6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	e01b      	b.n	800851e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	685a      	ldr	r2, [r3, #4]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80084f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	689a      	ldr	r2, [r3, #8]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008504:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f042 0201 	orr.w	r2, r2, #1
 8008514:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 fea8 	bl	800926c <UART_CheckIdleState>
 800851c:	4603      	mov	r3, r0
}
 800851e:	4618      	mov	r0, r3
 8008520:	3708      	adds	r7, #8
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}

08008526 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8008526:	b480      	push	{r7}
 8008528:	b083      	sub	sp, #12
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800852e:	bf00      	nop
 8008530:	370c      	adds	r7, #12
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr

0800853a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b08a      	sub	sp, #40	@ 0x28
 800853e:	af02      	add	r7, sp, #8
 8008540:	60f8      	str	r0, [r7, #12]
 8008542:	60b9      	str	r1, [r7, #8]
 8008544:	603b      	str	r3, [r7, #0]
 8008546:	4613      	mov	r3, r2
 8008548:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008550:	2b20      	cmp	r3, #32
 8008552:	d17b      	bne.n	800864c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d002      	beq.n	8008560 <HAL_UART_Transmit+0x26>
 800855a:	88fb      	ldrh	r3, [r7, #6]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d101      	bne.n	8008564 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	e074      	b.n	800864e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2200      	movs	r2, #0
 8008568:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2221      	movs	r2, #33	@ 0x21
 8008570:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008574:	f7fb fa0a 	bl	800398c <HAL_GetTick>
 8008578:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	88fa      	ldrh	r2, [r7, #6]
 800857e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	88fa      	ldrh	r2, [r7, #6]
 8008586:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008592:	d108      	bne.n	80085a6 <HAL_UART_Transmit+0x6c>
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	691b      	ldr	r3, [r3, #16]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d104      	bne.n	80085a6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800859c:	2300      	movs	r3, #0
 800859e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	61bb      	str	r3, [r7, #24]
 80085a4:	e003      	b.n	80085ae <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80085aa:	2300      	movs	r3, #0
 80085ac:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80085ae:	e030      	b.n	8008612 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	9300      	str	r3, [sp, #0]
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	2200      	movs	r2, #0
 80085b8:	2180      	movs	r1, #128	@ 0x80
 80085ba:	68f8      	ldr	r0, [r7, #12]
 80085bc:	f000 ff00 	bl	80093c0 <UART_WaitOnFlagUntilTimeout>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d005      	beq.n	80085d2 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2220      	movs	r2, #32
 80085ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80085ce:	2303      	movs	r3, #3
 80085d0:	e03d      	b.n	800864e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d10b      	bne.n	80085f0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	881b      	ldrh	r3, [r3, #0]
 80085dc:	461a      	mov	r2, r3
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085e6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80085e8:	69bb      	ldr	r3, [r7, #24]
 80085ea:	3302      	adds	r3, #2
 80085ec:	61bb      	str	r3, [r7, #24]
 80085ee:	e007      	b.n	8008600 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	781a      	ldrb	r2, [r3, #0]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	3301      	adds	r3, #1
 80085fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008606:	b29b      	uxth	r3, r3
 8008608:	3b01      	subs	r3, #1
 800860a:	b29a      	uxth	r2, r3
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008618:	b29b      	uxth	r3, r3
 800861a:	2b00      	cmp	r3, #0
 800861c:	d1c8      	bne.n	80085b0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	9300      	str	r3, [sp, #0]
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	2200      	movs	r2, #0
 8008626:	2140      	movs	r1, #64	@ 0x40
 8008628:	68f8      	ldr	r0, [r7, #12]
 800862a:	f000 fec9 	bl	80093c0 <UART_WaitOnFlagUntilTimeout>
 800862e:	4603      	mov	r3, r0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d005      	beq.n	8008640 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2220      	movs	r2, #32
 8008638:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800863c:	2303      	movs	r3, #3
 800863e:	e006      	b.n	800864e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2220      	movs	r2, #32
 8008644:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008648:	2300      	movs	r3, #0
 800864a:	e000      	b.n	800864e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800864c:	2302      	movs	r3, #2
  }
}
 800864e:	4618      	mov	r0, r3
 8008650:	3720      	adds	r7, #32
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
	...

08008658 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800865c:	b092      	sub	sp, #72	@ 0x48
 800865e:	af00      	add	r7, sp, #0
 8008660:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008662:	2300      	movs	r3, #0
 8008664:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	689a      	ldr	r2, [r3, #8]
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	691b      	ldr	r3, [r3, #16]
 8008670:	431a      	orrs	r2, r3
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	695b      	ldr	r3, [r3, #20]
 8008676:	431a      	orrs	r2, r3
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	69db      	ldr	r3, [r3, #28]
 800867c:	4313      	orrs	r3, r2
 800867e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	4bbe      	ldr	r3, [pc, #760]	@ (8008980 <UART_SetConfig+0x328>)
 8008688:	4013      	ands	r3, r2
 800868a:	697a      	ldr	r2, [r7, #20]
 800868c:	6812      	ldr	r2, [r2, #0]
 800868e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008690:	430b      	orrs	r3, r1
 8008692:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	68da      	ldr	r2, [r3, #12]
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	430a      	orrs	r2, r1
 80086a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	699b      	ldr	r3, [r3, #24]
 80086ae:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4ab3      	ldr	r2, [pc, #716]	@ (8008984 <UART_SetConfig+0x32c>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d004      	beq.n	80086c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	6a1b      	ldr	r3, [r3, #32]
 80086be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086c0:	4313      	orrs	r3, r2
 80086c2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	689a      	ldr	r2, [r3, #8]
 80086ca:	4baf      	ldr	r3, [pc, #700]	@ (8008988 <UART_SetConfig+0x330>)
 80086cc:	4013      	ands	r3, r2
 80086ce:	697a      	ldr	r2, [r7, #20]
 80086d0:	6812      	ldr	r2, [r2, #0]
 80086d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80086d4:	430b      	orrs	r3, r1
 80086d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086de:	f023 010f 	bic.w	r1, r3, #15
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	430a      	orrs	r2, r1
 80086ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4aa6      	ldr	r2, [pc, #664]	@ (800898c <UART_SetConfig+0x334>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d177      	bne.n	80087e8 <UART_SetConfig+0x190>
 80086f8:	4ba5      	ldr	r3, [pc, #660]	@ (8008990 <UART_SetConfig+0x338>)
 80086fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008700:	2b28      	cmp	r3, #40	@ 0x28
 8008702:	d86d      	bhi.n	80087e0 <UART_SetConfig+0x188>
 8008704:	a201      	add	r2, pc, #4	@ (adr r2, 800870c <UART_SetConfig+0xb4>)
 8008706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800870a:	bf00      	nop
 800870c:	080087b1 	.word	0x080087b1
 8008710:	080087e1 	.word	0x080087e1
 8008714:	080087e1 	.word	0x080087e1
 8008718:	080087e1 	.word	0x080087e1
 800871c:	080087e1 	.word	0x080087e1
 8008720:	080087e1 	.word	0x080087e1
 8008724:	080087e1 	.word	0x080087e1
 8008728:	080087e1 	.word	0x080087e1
 800872c:	080087b9 	.word	0x080087b9
 8008730:	080087e1 	.word	0x080087e1
 8008734:	080087e1 	.word	0x080087e1
 8008738:	080087e1 	.word	0x080087e1
 800873c:	080087e1 	.word	0x080087e1
 8008740:	080087e1 	.word	0x080087e1
 8008744:	080087e1 	.word	0x080087e1
 8008748:	080087e1 	.word	0x080087e1
 800874c:	080087c1 	.word	0x080087c1
 8008750:	080087e1 	.word	0x080087e1
 8008754:	080087e1 	.word	0x080087e1
 8008758:	080087e1 	.word	0x080087e1
 800875c:	080087e1 	.word	0x080087e1
 8008760:	080087e1 	.word	0x080087e1
 8008764:	080087e1 	.word	0x080087e1
 8008768:	080087e1 	.word	0x080087e1
 800876c:	080087c9 	.word	0x080087c9
 8008770:	080087e1 	.word	0x080087e1
 8008774:	080087e1 	.word	0x080087e1
 8008778:	080087e1 	.word	0x080087e1
 800877c:	080087e1 	.word	0x080087e1
 8008780:	080087e1 	.word	0x080087e1
 8008784:	080087e1 	.word	0x080087e1
 8008788:	080087e1 	.word	0x080087e1
 800878c:	080087d1 	.word	0x080087d1
 8008790:	080087e1 	.word	0x080087e1
 8008794:	080087e1 	.word	0x080087e1
 8008798:	080087e1 	.word	0x080087e1
 800879c:	080087e1 	.word	0x080087e1
 80087a0:	080087e1 	.word	0x080087e1
 80087a4:	080087e1 	.word	0x080087e1
 80087a8:	080087e1 	.word	0x080087e1
 80087ac:	080087d9 	.word	0x080087d9
 80087b0:	2301      	movs	r3, #1
 80087b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087b6:	e222      	b.n	8008bfe <UART_SetConfig+0x5a6>
 80087b8:	2304      	movs	r3, #4
 80087ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087be:	e21e      	b.n	8008bfe <UART_SetConfig+0x5a6>
 80087c0:	2308      	movs	r3, #8
 80087c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087c6:	e21a      	b.n	8008bfe <UART_SetConfig+0x5a6>
 80087c8:	2310      	movs	r3, #16
 80087ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087ce:	e216      	b.n	8008bfe <UART_SetConfig+0x5a6>
 80087d0:	2320      	movs	r3, #32
 80087d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087d6:	e212      	b.n	8008bfe <UART_SetConfig+0x5a6>
 80087d8:	2340      	movs	r3, #64	@ 0x40
 80087da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087de:	e20e      	b.n	8008bfe <UART_SetConfig+0x5a6>
 80087e0:	2380      	movs	r3, #128	@ 0x80
 80087e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80087e6:	e20a      	b.n	8008bfe <UART_SetConfig+0x5a6>
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a69      	ldr	r2, [pc, #420]	@ (8008994 <UART_SetConfig+0x33c>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d130      	bne.n	8008854 <UART_SetConfig+0x1fc>
 80087f2:	4b67      	ldr	r3, [pc, #412]	@ (8008990 <UART_SetConfig+0x338>)
 80087f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087f6:	f003 0307 	and.w	r3, r3, #7
 80087fa:	2b05      	cmp	r3, #5
 80087fc:	d826      	bhi.n	800884c <UART_SetConfig+0x1f4>
 80087fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008804 <UART_SetConfig+0x1ac>)
 8008800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008804:	0800881d 	.word	0x0800881d
 8008808:	08008825 	.word	0x08008825
 800880c:	0800882d 	.word	0x0800882d
 8008810:	08008835 	.word	0x08008835
 8008814:	0800883d 	.word	0x0800883d
 8008818:	08008845 	.word	0x08008845
 800881c:	2300      	movs	r3, #0
 800881e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008822:	e1ec      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008824:	2304      	movs	r3, #4
 8008826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800882a:	e1e8      	b.n	8008bfe <UART_SetConfig+0x5a6>
 800882c:	2308      	movs	r3, #8
 800882e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008832:	e1e4      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008834:	2310      	movs	r3, #16
 8008836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800883a:	e1e0      	b.n	8008bfe <UART_SetConfig+0x5a6>
 800883c:	2320      	movs	r3, #32
 800883e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008842:	e1dc      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008844:	2340      	movs	r3, #64	@ 0x40
 8008846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800884a:	e1d8      	b.n	8008bfe <UART_SetConfig+0x5a6>
 800884c:	2380      	movs	r3, #128	@ 0x80
 800884e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008852:	e1d4      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a4f      	ldr	r2, [pc, #316]	@ (8008998 <UART_SetConfig+0x340>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d130      	bne.n	80088c0 <UART_SetConfig+0x268>
 800885e:	4b4c      	ldr	r3, [pc, #304]	@ (8008990 <UART_SetConfig+0x338>)
 8008860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008862:	f003 0307 	and.w	r3, r3, #7
 8008866:	2b05      	cmp	r3, #5
 8008868:	d826      	bhi.n	80088b8 <UART_SetConfig+0x260>
 800886a:	a201      	add	r2, pc, #4	@ (adr r2, 8008870 <UART_SetConfig+0x218>)
 800886c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008870:	08008889 	.word	0x08008889
 8008874:	08008891 	.word	0x08008891
 8008878:	08008899 	.word	0x08008899
 800887c:	080088a1 	.word	0x080088a1
 8008880:	080088a9 	.word	0x080088a9
 8008884:	080088b1 	.word	0x080088b1
 8008888:	2300      	movs	r3, #0
 800888a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800888e:	e1b6      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008890:	2304      	movs	r3, #4
 8008892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008896:	e1b2      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008898:	2308      	movs	r3, #8
 800889a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800889e:	e1ae      	b.n	8008bfe <UART_SetConfig+0x5a6>
 80088a0:	2310      	movs	r3, #16
 80088a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088a6:	e1aa      	b.n	8008bfe <UART_SetConfig+0x5a6>
 80088a8:	2320      	movs	r3, #32
 80088aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088ae:	e1a6      	b.n	8008bfe <UART_SetConfig+0x5a6>
 80088b0:	2340      	movs	r3, #64	@ 0x40
 80088b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088b6:	e1a2      	b.n	8008bfe <UART_SetConfig+0x5a6>
 80088b8:	2380      	movs	r3, #128	@ 0x80
 80088ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088be:	e19e      	b.n	8008bfe <UART_SetConfig+0x5a6>
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a35      	ldr	r2, [pc, #212]	@ (800899c <UART_SetConfig+0x344>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d130      	bne.n	800892c <UART_SetConfig+0x2d4>
 80088ca:	4b31      	ldr	r3, [pc, #196]	@ (8008990 <UART_SetConfig+0x338>)
 80088cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088ce:	f003 0307 	and.w	r3, r3, #7
 80088d2:	2b05      	cmp	r3, #5
 80088d4:	d826      	bhi.n	8008924 <UART_SetConfig+0x2cc>
 80088d6:	a201      	add	r2, pc, #4	@ (adr r2, 80088dc <UART_SetConfig+0x284>)
 80088d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088dc:	080088f5 	.word	0x080088f5
 80088e0:	080088fd 	.word	0x080088fd
 80088e4:	08008905 	.word	0x08008905
 80088e8:	0800890d 	.word	0x0800890d
 80088ec:	08008915 	.word	0x08008915
 80088f0:	0800891d 	.word	0x0800891d
 80088f4:	2300      	movs	r3, #0
 80088f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80088fa:	e180      	b.n	8008bfe <UART_SetConfig+0x5a6>
 80088fc:	2304      	movs	r3, #4
 80088fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008902:	e17c      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008904:	2308      	movs	r3, #8
 8008906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800890a:	e178      	b.n	8008bfe <UART_SetConfig+0x5a6>
 800890c:	2310      	movs	r3, #16
 800890e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008912:	e174      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008914:	2320      	movs	r3, #32
 8008916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800891a:	e170      	b.n	8008bfe <UART_SetConfig+0x5a6>
 800891c:	2340      	movs	r3, #64	@ 0x40
 800891e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008922:	e16c      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008924:	2380      	movs	r3, #128	@ 0x80
 8008926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800892a:	e168      	b.n	8008bfe <UART_SetConfig+0x5a6>
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a1b      	ldr	r2, [pc, #108]	@ (80089a0 <UART_SetConfig+0x348>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d142      	bne.n	80089bc <UART_SetConfig+0x364>
 8008936:	4b16      	ldr	r3, [pc, #88]	@ (8008990 <UART_SetConfig+0x338>)
 8008938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800893a:	f003 0307 	and.w	r3, r3, #7
 800893e:	2b05      	cmp	r3, #5
 8008940:	d838      	bhi.n	80089b4 <UART_SetConfig+0x35c>
 8008942:	a201      	add	r2, pc, #4	@ (adr r2, 8008948 <UART_SetConfig+0x2f0>)
 8008944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008948:	08008961 	.word	0x08008961
 800894c:	08008969 	.word	0x08008969
 8008950:	08008971 	.word	0x08008971
 8008954:	08008979 	.word	0x08008979
 8008958:	080089a5 	.word	0x080089a5
 800895c:	080089ad 	.word	0x080089ad
 8008960:	2300      	movs	r3, #0
 8008962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008966:	e14a      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008968:	2304      	movs	r3, #4
 800896a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800896e:	e146      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008970:	2308      	movs	r3, #8
 8008972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008976:	e142      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008978:	2310      	movs	r3, #16
 800897a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800897e:	e13e      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008980:	cfff69f3 	.word	0xcfff69f3
 8008984:	58000c00 	.word	0x58000c00
 8008988:	11fff4ff 	.word	0x11fff4ff
 800898c:	40011000 	.word	0x40011000
 8008990:	58024400 	.word	0x58024400
 8008994:	40004400 	.word	0x40004400
 8008998:	40004800 	.word	0x40004800
 800899c:	40004c00 	.word	0x40004c00
 80089a0:	40005000 	.word	0x40005000
 80089a4:	2320      	movs	r3, #32
 80089a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089aa:	e128      	b.n	8008bfe <UART_SetConfig+0x5a6>
 80089ac:	2340      	movs	r3, #64	@ 0x40
 80089ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089b2:	e124      	b.n	8008bfe <UART_SetConfig+0x5a6>
 80089b4:	2380      	movs	r3, #128	@ 0x80
 80089b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ba:	e120      	b.n	8008bfe <UART_SetConfig+0x5a6>
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4acb      	ldr	r2, [pc, #812]	@ (8008cf0 <UART_SetConfig+0x698>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d176      	bne.n	8008ab4 <UART_SetConfig+0x45c>
 80089c6:	4bcb      	ldr	r3, [pc, #812]	@ (8008cf4 <UART_SetConfig+0x69c>)
 80089c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80089ce:	2b28      	cmp	r3, #40	@ 0x28
 80089d0:	d86c      	bhi.n	8008aac <UART_SetConfig+0x454>
 80089d2:	a201      	add	r2, pc, #4	@ (adr r2, 80089d8 <UART_SetConfig+0x380>)
 80089d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089d8:	08008a7d 	.word	0x08008a7d
 80089dc:	08008aad 	.word	0x08008aad
 80089e0:	08008aad 	.word	0x08008aad
 80089e4:	08008aad 	.word	0x08008aad
 80089e8:	08008aad 	.word	0x08008aad
 80089ec:	08008aad 	.word	0x08008aad
 80089f0:	08008aad 	.word	0x08008aad
 80089f4:	08008aad 	.word	0x08008aad
 80089f8:	08008a85 	.word	0x08008a85
 80089fc:	08008aad 	.word	0x08008aad
 8008a00:	08008aad 	.word	0x08008aad
 8008a04:	08008aad 	.word	0x08008aad
 8008a08:	08008aad 	.word	0x08008aad
 8008a0c:	08008aad 	.word	0x08008aad
 8008a10:	08008aad 	.word	0x08008aad
 8008a14:	08008aad 	.word	0x08008aad
 8008a18:	08008a8d 	.word	0x08008a8d
 8008a1c:	08008aad 	.word	0x08008aad
 8008a20:	08008aad 	.word	0x08008aad
 8008a24:	08008aad 	.word	0x08008aad
 8008a28:	08008aad 	.word	0x08008aad
 8008a2c:	08008aad 	.word	0x08008aad
 8008a30:	08008aad 	.word	0x08008aad
 8008a34:	08008aad 	.word	0x08008aad
 8008a38:	08008a95 	.word	0x08008a95
 8008a3c:	08008aad 	.word	0x08008aad
 8008a40:	08008aad 	.word	0x08008aad
 8008a44:	08008aad 	.word	0x08008aad
 8008a48:	08008aad 	.word	0x08008aad
 8008a4c:	08008aad 	.word	0x08008aad
 8008a50:	08008aad 	.word	0x08008aad
 8008a54:	08008aad 	.word	0x08008aad
 8008a58:	08008a9d 	.word	0x08008a9d
 8008a5c:	08008aad 	.word	0x08008aad
 8008a60:	08008aad 	.word	0x08008aad
 8008a64:	08008aad 	.word	0x08008aad
 8008a68:	08008aad 	.word	0x08008aad
 8008a6c:	08008aad 	.word	0x08008aad
 8008a70:	08008aad 	.word	0x08008aad
 8008a74:	08008aad 	.word	0x08008aad
 8008a78:	08008aa5 	.word	0x08008aa5
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a82:	e0bc      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008a84:	2304      	movs	r3, #4
 8008a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a8a:	e0b8      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008a8c:	2308      	movs	r3, #8
 8008a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a92:	e0b4      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008a94:	2310      	movs	r3, #16
 8008a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a9a:	e0b0      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008a9c:	2320      	movs	r3, #32
 8008a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aa2:	e0ac      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008aa4:	2340      	movs	r3, #64	@ 0x40
 8008aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aaa:	e0a8      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008aac:	2380      	movs	r3, #128	@ 0x80
 8008aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ab2:	e0a4      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a8f      	ldr	r2, [pc, #572]	@ (8008cf8 <UART_SetConfig+0x6a0>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d130      	bne.n	8008b20 <UART_SetConfig+0x4c8>
 8008abe:	4b8d      	ldr	r3, [pc, #564]	@ (8008cf4 <UART_SetConfig+0x69c>)
 8008ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ac2:	f003 0307 	and.w	r3, r3, #7
 8008ac6:	2b05      	cmp	r3, #5
 8008ac8:	d826      	bhi.n	8008b18 <UART_SetConfig+0x4c0>
 8008aca:	a201      	add	r2, pc, #4	@ (adr r2, 8008ad0 <UART_SetConfig+0x478>)
 8008acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad0:	08008ae9 	.word	0x08008ae9
 8008ad4:	08008af1 	.word	0x08008af1
 8008ad8:	08008af9 	.word	0x08008af9
 8008adc:	08008b01 	.word	0x08008b01
 8008ae0:	08008b09 	.word	0x08008b09
 8008ae4:	08008b11 	.word	0x08008b11
 8008ae8:	2300      	movs	r3, #0
 8008aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aee:	e086      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008af0:	2304      	movs	r3, #4
 8008af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008af6:	e082      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008af8:	2308      	movs	r3, #8
 8008afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008afe:	e07e      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008b00:	2310      	movs	r3, #16
 8008b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b06:	e07a      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008b08:	2320      	movs	r3, #32
 8008b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b0e:	e076      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008b10:	2340      	movs	r3, #64	@ 0x40
 8008b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b16:	e072      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008b18:	2380      	movs	r3, #128	@ 0x80
 8008b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b1e:	e06e      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a75      	ldr	r2, [pc, #468]	@ (8008cfc <UART_SetConfig+0x6a4>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d130      	bne.n	8008b8c <UART_SetConfig+0x534>
 8008b2a:	4b72      	ldr	r3, [pc, #456]	@ (8008cf4 <UART_SetConfig+0x69c>)
 8008b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b2e:	f003 0307 	and.w	r3, r3, #7
 8008b32:	2b05      	cmp	r3, #5
 8008b34:	d826      	bhi.n	8008b84 <UART_SetConfig+0x52c>
 8008b36:	a201      	add	r2, pc, #4	@ (adr r2, 8008b3c <UART_SetConfig+0x4e4>)
 8008b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b3c:	08008b55 	.word	0x08008b55
 8008b40:	08008b5d 	.word	0x08008b5d
 8008b44:	08008b65 	.word	0x08008b65
 8008b48:	08008b6d 	.word	0x08008b6d
 8008b4c:	08008b75 	.word	0x08008b75
 8008b50:	08008b7d 	.word	0x08008b7d
 8008b54:	2300      	movs	r3, #0
 8008b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b5a:	e050      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008b5c:	2304      	movs	r3, #4
 8008b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b62:	e04c      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008b64:	2308      	movs	r3, #8
 8008b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b6a:	e048      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008b6c:	2310      	movs	r3, #16
 8008b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b72:	e044      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008b74:	2320      	movs	r3, #32
 8008b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b7a:	e040      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008b7c:	2340      	movs	r3, #64	@ 0x40
 8008b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b82:	e03c      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008b84:	2380      	movs	r3, #128	@ 0x80
 8008b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b8a:	e038      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a5b      	ldr	r2, [pc, #364]	@ (8008d00 <UART_SetConfig+0x6a8>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d130      	bne.n	8008bf8 <UART_SetConfig+0x5a0>
 8008b96:	4b57      	ldr	r3, [pc, #348]	@ (8008cf4 <UART_SetConfig+0x69c>)
 8008b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b9a:	f003 0307 	and.w	r3, r3, #7
 8008b9e:	2b05      	cmp	r3, #5
 8008ba0:	d826      	bhi.n	8008bf0 <UART_SetConfig+0x598>
 8008ba2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ba8 <UART_SetConfig+0x550>)
 8008ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba8:	08008bc1 	.word	0x08008bc1
 8008bac:	08008bc9 	.word	0x08008bc9
 8008bb0:	08008bd1 	.word	0x08008bd1
 8008bb4:	08008bd9 	.word	0x08008bd9
 8008bb8:	08008be1 	.word	0x08008be1
 8008bbc:	08008be9 	.word	0x08008be9
 8008bc0:	2302      	movs	r3, #2
 8008bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bc6:	e01a      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008bc8:	2304      	movs	r3, #4
 8008bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bce:	e016      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008bd0:	2308      	movs	r3, #8
 8008bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bd6:	e012      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008bd8:	2310      	movs	r3, #16
 8008bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bde:	e00e      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008be0:	2320      	movs	r3, #32
 8008be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008be6:	e00a      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008be8:	2340      	movs	r3, #64	@ 0x40
 8008bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bee:	e006      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008bf0:	2380      	movs	r3, #128	@ 0x80
 8008bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bf6:	e002      	b.n	8008bfe <UART_SetConfig+0x5a6>
 8008bf8:	2380      	movs	r3, #128	@ 0x80
 8008bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a3f      	ldr	r2, [pc, #252]	@ (8008d00 <UART_SetConfig+0x6a8>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	f040 80f8 	bne.w	8008dfa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008c0a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008c0e:	2b20      	cmp	r3, #32
 8008c10:	dc46      	bgt.n	8008ca0 <UART_SetConfig+0x648>
 8008c12:	2b02      	cmp	r3, #2
 8008c14:	f2c0 8082 	blt.w	8008d1c <UART_SetConfig+0x6c4>
 8008c18:	3b02      	subs	r3, #2
 8008c1a:	2b1e      	cmp	r3, #30
 8008c1c:	d87e      	bhi.n	8008d1c <UART_SetConfig+0x6c4>
 8008c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8008c24 <UART_SetConfig+0x5cc>)
 8008c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c24:	08008ca7 	.word	0x08008ca7
 8008c28:	08008d1d 	.word	0x08008d1d
 8008c2c:	08008caf 	.word	0x08008caf
 8008c30:	08008d1d 	.word	0x08008d1d
 8008c34:	08008d1d 	.word	0x08008d1d
 8008c38:	08008d1d 	.word	0x08008d1d
 8008c3c:	08008cbf 	.word	0x08008cbf
 8008c40:	08008d1d 	.word	0x08008d1d
 8008c44:	08008d1d 	.word	0x08008d1d
 8008c48:	08008d1d 	.word	0x08008d1d
 8008c4c:	08008d1d 	.word	0x08008d1d
 8008c50:	08008d1d 	.word	0x08008d1d
 8008c54:	08008d1d 	.word	0x08008d1d
 8008c58:	08008d1d 	.word	0x08008d1d
 8008c5c:	08008ccf 	.word	0x08008ccf
 8008c60:	08008d1d 	.word	0x08008d1d
 8008c64:	08008d1d 	.word	0x08008d1d
 8008c68:	08008d1d 	.word	0x08008d1d
 8008c6c:	08008d1d 	.word	0x08008d1d
 8008c70:	08008d1d 	.word	0x08008d1d
 8008c74:	08008d1d 	.word	0x08008d1d
 8008c78:	08008d1d 	.word	0x08008d1d
 8008c7c:	08008d1d 	.word	0x08008d1d
 8008c80:	08008d1d 	.word	0x08008d1d
 8008c84:	08008d1d 	.word	0x08008d1d
 8008c88:	08008d1d 	.word	0x08008d1d
 8008c8c:	08008d1d 	.word	0x08008d1d
 8008c90:	08008d1d 	.word	0x08008d1d
 8008c94:	08008d1d 	.word	0x08008d1d
 8008c98:	08008d1d 	.word	0x08008d1d
 8008c9c:	08008d0f 	.word	0x08008d0f
 8008ca0:	2b40      	cmp	r3, #64	@ 0x40
 8008ca2:	d037      	beq.n	8008d14 <UART_SetConfig+0x6bc>
 8008ca4:	e03a      	b.n	8008d1c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008ca6:	f7fe f841 	bl	8006d2c <HAL_RCCEx_GetD3PCLK1Freq>
 8008caa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008cac:	e03c      	b.n	8008d28 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7fe f850 	bl	8006d58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cbc:	e034      	b.n	8008d28 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cbe:	f107 0318 	add.w	r3, r7, #24
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7fe f99c 	bl	8007000 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ccc:	e02c      	b.n	8008d28 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008cce:	4b09      	ldr	r3, [pc, #36]	@ (8008cf4 <UART_SetConfig+0x69c>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f003 0320 	and.w	r3, r3, #32
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d016      	beq.n	8008d08 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008cda:	4b06      	ldr	r3, [pc, #24]	@ (8008cf4 <UART_SetConfig+0x69c>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	08db      	lsrs	r3, r3, #3
 8008ce0:	f003 0303 	and.w	r3, r3, #3
 8008ce4:	4a07      	ldr	r2, [pc, #28]	@ (8008d04 <UART_SetConfig+0x6ac>)
 8008ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8008cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008cec:	e01c      	b.n	8008d28 <UART_SetConfig+0x6d0>
 8008cee:	bf00      	nop
 8008cf0:	40011400 	.word	0x40011400
 8008cf4:	58024400 	.word	0x58024400
 8008cf8:	40007800 	.word	0x40007800
 8008cfc:	40007c00 	.word	0x40007c00
 8008d00:	58000c00 	.word	0x58000c00
 8008d04:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008d08:	4b9d      	ldr	r3, [pc, #628]	@ (8008f80 <UART_SetConfig+0x928>)
 8008d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d0c:	e00c      	b.n	8008d28 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008d0e:	4b9d      	ldr	r3, [pc, #628]	@ (8008f84 <UART_SetConfig+0x92c>)
 8008d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d12:	e009      	b.n	8008d28 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d1a:	e005      	b.n	8008d28 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008d20:	2301      	movs	r3, #1
 8008d22:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008d26:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008d28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	f000 81de 	beq.w	80090ec <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d34:	4a94      	ldr	r2, [pc, #592]	@ (8008f88 <UART_SetConfig+0x930>)
 8008d36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d42:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	685a      	ldr	r2, [r3, #4]
 8008d48:	4613      	mov	r3, r2
 8008d4a:	005b      	lsls	r3, r3, #1
 8008d4c:	4413      	add	r3, r2
 8008d4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d305      	bcc.n	8008d60 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d903      	bls.n	8008d68 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008d60:	2301      	movs	r3, #1
 8008d62:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008d66:	e1c1      	b.n	80090ec <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	60bb      	str	r3, [r7, #8]
 8008d6e:	60fa      	str	r2, [r7, #12]
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d74:	4a84      	ldr	r2, [pc, #528]	@ (8008f88 <UART_SetConfig+0x930>)
 8008d76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	603b      	str	r3, [r7, #0]
 8008d80:	607a      	str	r2, [r7, #4]
 8008d82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008d8a:	f7f7 faf9 	bl	8000380 <__aeabi_uldivmod>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	460b      	mov	r3, r1
 8008d92:	4610      	mov	r0, r2
 8008d94:	4619      	mov	r1, r3
 8008d96:	f04f 0200 	mov.w	r2, #0
 8008d9a:	f04f 0300 	mov.w	r3, #0
 8008d9e:	020b      	lsls	r3, r1, #8
 8008da0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008da4:	0202      	lsls	r2, r0, #8
 8008da6:	6979      	ldr	r1, [r7, #20]
 8008da8:	6849      	ldr	r1, [r1, #4]
 8008daa:	0849      	lsrs	r1, r1, #1
 8008dac:	2000      	movs	r0, #0
 8008dae:	460c      	mov	r4, r1
 8008db0:	4605      	mov	r5, r0
 8008db2:	eb12 0804 	adds.w	r8, r2, r4
 8008db6:	eb43 0905 	adc.w	r9, r3, r5
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	469a      	mov	sl, r3
 8008dc2:	4693      	mov	fp, r2
 8008dc4:	4652      	mov	r2, sl
 8008dc6:	465b      	mov	r3, fp
 8008dc8:	4640      	mov	r0, r8
 8008dca:	4649      	mov	r1, r9
 8008dcc:	f7f7 fad8 	bl	8000380 <__aeabi_uldivmod>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	4613      	mov	r3, r2
 8008dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008dde:	d308      	bcc.n	8008df2 <UART_SetConfig+0x79a>
 8008de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008de2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008de6:	d204      	bcs.n	8008df2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008dee:	60da      	str	r2, [r3, #12]
 8008df0:	e17c      	b.n	80090ec <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008df2:	2301      	movs	r3, #1
 8008df4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008df8:	e178      	b.n	80090ec <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	69db      	ldr	r3, [r3, #28]
 8008dfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e02:	f040 80c5 	bne.w	8008f90 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008e06:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008e0a:	2b20      	cmp	r3, #32
 8008e0c:	dc48      	bgt.n	8008ea0 <UART_SetConfig+0x848>
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	db7b      	blt.n	8008f0a <UART_SetConfig+0x8b2>
 8008e12:	2b20      	cmp	r3, #32
 8008e14:	d879      	bhi.n	8008f0a <UART_SetConfig+0x8b2>
 8008e16:	a201      	add	r2, pc, #4	@ (adr r2, 8008e1c <UART_SetConfig+0x7c4>)
 8008e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e1c:	08008ea7 	.word	0x08008ea7
 8008e20:	08008eaf 	.word	0x08008eaf
 8008e24:	08008f0b 	.word	0x08008f0b
 8008e28:	08008f0b 	.word	0x08008f0b
 8008e2c:	08008eb7 	.word	0x08008eb7
 8008e30:	08008f0b 	.word	0x08008f0b
 8008e34:	08008f0b 	.word	0x08008f0b
 8008e38:	08008f0b 	.word	0x08008f0b
 8008e3c:	08008ec7 	.word	0x08008ec7
 8008e40:	08008f0b 	.word	0x08008f0b
 8008e44:	08008f0b 	.word	0x08008f0b
 8008e48:	08008f0b 	.word	0x08008f0b
 8008e4c:	08008f0b 	.word	0x08008f0b
 8008e50:	08008f0b 	.word	0x08008f0b
 8008e54:	08008f0b 	.word	0x08008f0b
 8008e58:	08008f0b 	.word	0x08008f0b
 8008e5c:	08008ed7 	.word	0x08008ed7
 8008e60:	08008f0b 	.word	0x08008f0b
 8008e64:	08008f0b 	.word	0x08008f0b
 8008e68:	08008f0b 	.word	0x08008f0b
 8008e6c:	08008f0b 	.word	0x08008f0b
 8008e70:	08008f0b 	.word	0x08008f0b
 8008e74:	08008f0b 	.word	0x08008f0b
 8008e78:	08008f0b 	.word	0x08008f0b
 8008e7c:	08008f0b 	.word	0x08008f0b
 8008e80:	08008f0b 	.word	0x08008f0b
 8008e84:	08008f0b 	.word	0x08008f0b
 8008e88:	08008f0b 	.word	0x08008f0b
 8008e8c:	08008f0b 	.word	0x08008f0b
 8008e90:	08008f0b 	.word	0x08008f0b
 8008e94:	08008f0b 	.word	0x08008f0b
 8008e98:	08008f0b 	.word	0x08008f0b
 8008e9c:	08008efd 	.word	0x08008efd
 8008ea0:	2b40      	cmp	r3, #64	@ 0x40
 8008ea2:	d02e      	beq.n	8008f02 <UART_SetConfig+0x8aa>
 8008ea4:	e031      	b.n	8008f0a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ea6:	f7fc fd0b 	bl	80058c0 <HAL_RCC_GetPCLK1Freq>
 8008eaa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008eac:	e033      	b.n	8008f16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008eae:	f7fc fd1d 	bl	80058ec <HAL_RCC_GetPCLK2Freq>
 8008eb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008eb4:	e02f      	b.n	8008f16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008eb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7fd ff4c 	bl	8006d58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ec4:	e027      	b.n	8008f16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ec6:	f107 0318 	add.w	r3, r7, #24
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7fe f898 	bl	8007000 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ed4:	e01f      	b.n	8008f16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8008f8c <UART_SetConfig+0x934>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f003 0320 	and.w	r3, r3, #32
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d009      	beq.n	8008ef6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008ee2:	4b2a      	ldr	r3, [pc, #168]	@ (8008f8c <UART_SetConfig+0x934>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	08db      	lsrs	r3, r3, #3
 8008ee8:	f003 0303 	and.w	r3, r3, #3
 8008eec:	4a24      	ldr	r2, [pc, #144]	@ (8008f80 <UART_SetConfig+0x928>)
 8008eee:	fa22 f303 	lsr.w	r3, r2, r3
 8008ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ef4:	e00f      	b.n	8008f16 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008ef6:	4b22      	ldr	r3, [pc, #136]	@ (8008f80 <UART_SetConfig+0x928>)
 8008ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008efa:	e00c      	b.n	8008f16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008efc:	4b21      	ldr	r3, [pc, #132]	@ (8008f84 <UART_SetConfig+0x92c>)
 8008efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f00:	e009      	b.n	8008f16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f08:	e005      	b.n	8008f16 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008f14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008f16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f000 80e7 	beq.w	80090ec <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f22:	4a19      	ldr	r2, [pc, #100]	@ (8008f88 <UART_SetConfig+0x930>)
 8008f24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f28:	461a      	mov	r2, r3
 8008f2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f30:	005a      	lsls	r2, r3, #1
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	085b      	lsrs	r3, r3, #1
 8008f38:	441a      	add	r2, r3
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f42:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f46:	2b0f      	cmp	r3, #15
 8008f48:	d916      	bls.n	8008f78 <UART_SetConfig+0x920>
 8008f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f50:	d212      	bcs.n	8008f78 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	f023 030f 	bic.w	r3, r3, #15
 8008f5a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f5e:	085b      	lsrs	r3, r3, #1
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	f003 0307 	and.w	r3, r3, #7
 8008f66:	b29a      	uxth	r2, r3
 8008f68:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008f74:	60da      	str	r2, [r3, #12]
 8008f76:	e0b9      	b.n	80090ec <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008f7e:	e0b5      	b.n	80090ec <UART_SetConfig+0xa94>
 8008f80:	03d09000 	.word	0x03d09000
 8008f84:	003d0900 	.word	0x003d0900
 8008f88:	0800de94 	.word	0x0800de94
 8008f8c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008f90:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008f94:	2b20      	cmp	r3, #32
 8008f96:	dc49      	bgt.n	800902c <UART_SetConfig+0x9d4>
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	db7c      	blt.n	8009096 <UART_SetConfig+0xa3e>
 8008f9c:	2b20      	cmp	r3, #32
 8008f9e:	d87a      	bhi.n	8009096 <UART_SetConfig+0xa3e>
 8008fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8008fa8 <UART_SetConfig+0x950>)
 8008fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa6:	bf00      	nop
 8008fa8:	08009033 	.word	0x08009033
 8008fac:	0800903b 	.word	0x0800903b
 8008fb0:	08009097 	.word	0x08009097
 8008fb4:	08009097 	.word	0x08009097
 8008fb8:	08009043 	.word	0x08009043
 8008fbc:	08009097 	.word	0x08009097
 8008fc0:	08009097 	.word	0x08009097
 8008fc4:	08009097 	.word	0x08009097
 8008fc8:	08009053 	.word	0x08009053
 8008fcc:	08009097 	.word	0x08009097
 8008fd0:	08009097 	.word	0x08009097
 8008fd4:	08009097 	.word	0x08009097
 8008fd8:	08009097 	.word	0x08009097
 8008fdc:	08009097 	.word	0x08009097
 8008fe0:	08009097 	.word	0x08009097
 8008fe4:	08009097 	.word	0x08009097
 8008fe8:	08009063 	.word	0x08009063
 8008fec:	08009097 	.word	0x08009097
 8008ff0:	08009097 	.word	0x08009097
 8008ff4:	08009097 	.word	0x08009097
 8008ff8:	08009097 	.word	0x08009097
 8008ffc:	08009097 	.word	0x08009097
 8009000:	08009097 	.word	0x08009097
 8009004:	08009097 	.word	0x08009097
 8009008:	08009097 	.word	0x08009097
 800900c:	08009097 	.word	0x08009097
 8009010:	08009097 	.word	0x08009097
 8009014:	08009097 	.word	0x08009097
 8009018:	08009097 	.word	0x08009097
 800901c:	08009097 	.word	0x08009097
 8009020:	08009097 	.word	0x08009097
 8009024:	08009097 	.word	0x08009097
 8009028:	08009089 	.word	0x08009089
 800902c:	2b40      	cmp	r3, #64	@ 0x40
 800902e:	d02e      	beq.n	800908e <UART_SetConfig+0xa36>
 8009030:	e031      	b.n	8009096 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009032:	f7fc fc45 	bl	80058c0 <HAL_RCC_GetPCLK1Freq>
 8009036:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009038:	e033      	b.n	80090a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800903a:	f7fc fc57 	bl	80058ec <HAL_RCC_GetPCLK2Freq>
 800903e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009040:	e02f      	b.n	80090a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009042:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009046:	4618      	mov	r0, r3
 8009048:	f7fd fe86 	bl	8006d58 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800904c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800904e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009050:	e027      	b.n	80090a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009052:	f107 0318 	add.w	r3, r7, #24
 8009056:	4618      	mov	r0, r3
 8009058:	f7fd ffd2 	bl	8007000 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800905c:	69fb      	ldr	r3, [r7, #28]
 800905e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009060:	e01f      	b.n	80090a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009062:	4b2d      	ldr	r3, [pc, #180]	@ (8009118 <UART_SetConfig+0xac0>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f003 0320 	and.w	r3, r3, #32
 800906a:	2b00      	cmp	r3, #0
 800906c:	d009      	beq.n	8009082 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800906e:	4b2a      	ldr	r3, [pc, #168]	@ (8009118 <UART_SetConfig+0xac0>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	08db      	lsrs	r3, r3, #3
 8009074:	f003 0303 	and.w	r3, r3, #3
 8009078:	4a28      	ldr	r2, [pc, #160]	@ (800911c <UART_SetConfig+0xac4>)
 800907a:	fa22 f303 	lsr.w	r3, r2, r3
 800907e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009080:	e00f      	b.n	80090a2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009082:	4b26      	ldr	r3, [pc, #152]	@ (800911c <UART_SetConfig+0xac4>)
 8009084:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009086:	e00c      	b.n	80090a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009088:	4b25      	ldr	r3, [pc, #148]	@ (8009120 <UART_SetConfig+0xac8>)
 800908a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800908c:	e009      	b.n	80090a2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800908e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009094:	e005      	b.n	80090a2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009096:	2300      	movs	r3, #0
 8009098:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80090a0:	bf00      	nop
    }

    if (pclk != 0U)
 80090a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d021      	beq.n	80090ec <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090ac:	4a1d      	ldr	r2, [pc, #116]	@ (8009124 <UART_SetConfig+0xacc>)
 80090ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090b2:	461a      	mov	r2, r3
 80090b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	085b      	lsrs	r3, r3, #1
 80090c0:	441a      	add	r2, r3
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80090ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ce:	2b0f      	cmp	r3, #15
 80090d0:	d909      	bls.n	80090e6 <UART_SetConfig+0xa8e>
 80090d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090d8:	d205      	bcs.n	80090e6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80090da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090dc:	b29a      	uxth	r2, r3
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	60da      	str	r2, [r3, #12]
 80090e4:	e002      	b.n	80090ec <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	2201      	movs	r2, #1
 80090f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	2200      	movs	r2, #0
 8009100:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	2200      	movs	r2, #0
 8009106:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009108:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800910c:	4618      	mov	r0, r3
 800910e:	3748      	adds	r7, #72	@ 0x48
 8009110:	46bd      	mov	sp, r7
 8009112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009116:	bf00      	nop
 8009118:	58024400 	.word	0x58024400
 800911c:	03d09000 	.word	0x03d09000
 8009120:	003d0900 	.word	0x003d0900
 8009124:	0800de94 	.word	0x0800de94

08009128 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009134:	f003 0308 	and.w	r3, r3, #8
 8009138:	2b00      	cmp	r3, #0
 800913a:	d00a      	beq.n	8009152 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	430a      	orrs	r2, r1
 8009150:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009156:	f003 0301 	and.w	r3, r3, #1
 800915a:	2b00      	cmp	r3, #0
 800915c:	d00a      	beq.n	8009174 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	430a      	orrs	r2, r1
 8009172:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009178:	f003 0302 	and.w	r3, r3, #2
 800917c:	2b00      	cmp	r3, #0
 800917e:	d00a      	beq.n	8009196 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	430a      	orrs	r2, r1
 8009194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800919a:	f003 0304 	and.w	r3, r3, #4
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d00a      	beq.n	80091b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	430a      	orrs	r2, r1
 80091b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091bc:	f003 0310 	and.w	r3, r3, #16
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d00a      	beq.n	80091da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	430a      	orrs	r2, r1
 80091d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091de:	f003 0320 	and.w	r3, r3, #32
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d00a      	beq.n	80091fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	689b      	ldr	r3, [r3, #8]
 80091ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	430a      	orrs	r2, r1
 80091fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009204:	2b00      	cmp	r3, #0
 8009206:	d01a      	beq.n	800923e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	430a      	orrs	r2, r1
 800921c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009222:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009226:	d10a      	bne.n	800923e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	430a      	orrs	r2, r1
 800923c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009246:	2b00      	cmp	r3, #0
 8009248:	d00a      	beq.n	8009260 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	430a      	orrs	r2, r1
 800925e:	605a      	str	r2, [r3, #4]
  }
}
 8009260:	bf00      	nop
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b098      	sub	sp, #96	@ 0x60
 8009270:	af02      	add	r7, sp, #8
 8009272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800927c:	f7fa fb86 	bl	800398c <HAL_GetTick>
 8009280:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f003 0308 	and.w	r3, r3, #8
 800928c:	2b08      	cmp	r3, #8
 800928e:	d12f      	bne.n	80092f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009290:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009294:	9300      	str	r3, [sp, #0]
 8009296:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009298:	2200      	movs	r2, #0
 800929a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 f88e 	bl	80093c0 <UART_WaitOnFlagUntilTimeout>
 80092a4:	4603      	mov	r3, r0
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d022      	beq.n	80092f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092b2:	e853 3f00 	ldrex	r3, [r3]
 80092b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80092b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80092be:	653b      	str	r3, [r7, #80]	@ 0x50
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	461a      	mov	r2, r3
 80092c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80092ca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80092ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80092d0:	e841 2300 	strex	r3, r2, [r1]
 80092d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80092d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d1e6      	bne.n	80092aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2220      	movs	r2, #32
 80092e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80092ec:	2303      	movs	r3, #3
 80092ee:	e063      	b.n	80093b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f003 0304 	and.w	r3, r3, #4
 80092fa:	2b04      	cmp	r3, #4
 80092fc:	d149      	bne.n	8009392 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80092fe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009302:	9300      	str	r3, [sp, #0]
 8009304:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009306:	2200      	movs	r2, #0
 8009308:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 f857 	bl	80093c0 <UART_WaitOnFlagUntilTimeout>
 8009312:	4603      	mov	r3, r0
 8009314:	2b00      	cmp	r3, #0
 8009316:	d03c      	beq.n	8009392 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800931e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009320:	e853 3f00 	ldrex	r3, [r3]
 8009324:	623b      	str	r3, [r7, #32]
   return(result);
 8009326:	6a3b      	ldr	r3, [r7, #32]
 8009328:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800932c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	461a      	mov	r2, r3
 8009334:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009336:	633b      	str	r3, [r7, #48]	@ 0x30
 8009338:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800933a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800933c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800933e:	e841 2300 	strex	r3, r2, [r1]
 8009342:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009346:	2b00      	cmp	r3, #0
 8009348:	d1e6      	bne.n	8009318 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	3308      	adds	r3, #8
 8009350:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	e853 3f00 	ldrex	r3, [r3]
 8009358:	60fb      	str	r3, [r7, #12]
   return(result);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	f023 0301 	bic.w	r3, r3, #1
 8009360:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	3308      	adds	r3, #8
 8009368:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800936a:	61fa      	str	r2, [r7, #28]
 800936c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800936e:	69b9      	ldr	r1, [r7, #24]
 8009370:	69fa      	ldr	r2, [r7, #28]
 8009372:	e841 2300 	strex	r3, r2, [r1]
 8009376:	617b      	str	r3, [r7, #20]
   return(result);
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d1e5      	bne.n	800934a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2220      	movs	r2, #32
 8009382:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800938e:	2303      	movs	r3, #3
 8009390:	e012      	b.n	80093b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2220      	movs	r2, #32
 8009396:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2220      	movs	r2, #32
 800939e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80093b6:	2300      	movs	r3, #0
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3758      	adds	r7, #88	@ 0x58
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b084      	sub	sp, #16
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	60b9      	str	r1, [r7, #8]
 80093ca:	603b      	str	r3, [r7, #0]
 80093cc:	4613      	mov	r3, r2
 80093ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093d0:	e04f      	b.n	8009472 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093d8:	d04b      	beq.n	8009472 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093da:	f7fa fad7 	bl	800398c <HAL_GetTick>
 80093de:	4602      	mov	r2, r0
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	1ad3      	subs	r3, r2, r3
 80093e4:	69ba      	ldr	r2, [r7, #24]
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d302      	bcc.n	80093f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d101      	bne.n	80093f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80093f0:	2303      	movs	r3, #3
 80093f2:	e04e      	b.n	8009492 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f003 0304 	and.w	r3, r3, #4
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d037      	beq.n	8009472 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	2b80      	cmp	r3, #128	@ 0x80
 8009406:	d034      	beq.n	8009472 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	2b40      	cmp	r3, #64	@ 0x40
 800940c:	d031      	beq.n	8009472 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	69db      	ldr	r3, [r3, #28]
 8009414:	f003 0308 	and.w	r3, r3, #8
 8009418:	2b08      	cmp	r3, #8
 800941a:	d110      	bne.n	800943e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	2208      	movs	r2, #8
 8009422:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009424:	68f8      	ldr	r0, [r7, #12]
 8009426:	f000 f839 	bl	800949c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2208      	movs	r2, #8
 800942e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2200      	movs	r2, #0
 8009436:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800943a:	2301      	movs	r3, #1
 800943c:	e029      	b.n	8009492 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	69db      	ldr	r3, [r3, #28]
 8009444:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009448:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800944c:	d111      	bne.n	8009472 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009456:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009458:	68f8      	ldr	r0, [r7, #12]
 800945a:	f000 f81f 	bl	800949c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2220      	movs	r2, #32
 8009462:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2200      	movs	r2, #0
 800946a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800946e:	2303      	movs	r3, #3
 8009470:	e00f      	b.n	8009492 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	69da      	ldr	r2, [r3, #28]
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	4013      	ands	r3, r2
 800947c:	68ba      	ldr	r2, [r7, #8]
 800947e:	429a      	cmp	r2, r3
 8009480:	bf0c      	ite	eq
 8009482:	2301      	moveq	r3, #1
 8009484:	2300      	movne	r3, #0
 8009486:	b2db      	uxtb	r3, r3
 8009488:	461a      	mov	r2, r3
 800948a:	79fb      	ldrb	r3, [r7, #7]
 800948c:	429a      	cmp	r2, r3
 800948e:	d0a0      	beq.n	80093d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009490:	2300      	movs	r3, #0
}
 8009492:	4618      	mov	r0, r3
 8009494:	3710      	adds	r7, #16
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
	...

0800949c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800949c:	b480      	push	{r7}
 800949e:	b095      	sub	sp, #84	@ 0x54
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094ac:	e853 3f00 	ldrex	r3, [r3]
 80094b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80094b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80094b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	461a      	mov	r2, r3
 80094c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80094c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80094c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80094ca:	e841 2300 	strex	r3, r2, [r1]
 80094ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80094d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d1e6      	bne.n	80094a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	3308      	adds	r3, #8
 80094dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094de:	6a3b      	ldr	r3, [r7, #32]
 80094e0:	e853 3f00 	ldrex	r3, [r3]
 80094e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80094e6:	69fa      	ldr	r2, [r7, #28]
 80094e8:	4b1e      	ldr	r3, [pc, #120]	@ (8009564 <UART_EndRxTransfer+0xc8>)
 80094ea:	4013      	ands	r3, r2
 80094ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	3308      	adds	r3, #8
 80094f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80094f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80094f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80094fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094fe:	e841 2300 	strex	r3, r2, [r1]
 8009502:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009506:	2b00      	cmp	r3, #0
 8009508:	d1e5      	bne.n	80094d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800950e:	2b01      	cmp	r3, #1
 8009510:	d118      	bne.n	8009544 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	e853 3f00 	ldrex	r3, [r3]
 800951e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	f023 0310 	bic.w	r3, r3, #16
 8009526:	647b      	str	r3, [r7, #68]	@ 0x44
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	461a      	mov	r2, r3
 800952e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009530:	61bb      	str	r3, [r7, #24]
 8009532:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009534:	6979      	ldr	r1, [r7, #20]
 8009536:	69ba      	ldr	r2, [r7, #24]
 8009538:	e841 2300 	strex	r3, r2, [r1]
 800953c:	613b      	str	r3, [r7, #16]
   return(result);
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d1e6      	bne.n	8009512 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2220      	movs	r2, #32
 8009548:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2200      	movs	r2, #0
 8009556:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009558:	bf00      	nop
 800955a:	3754      	adds	r7, #84	@ 0x54
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr
 8009564:	effffffe 	.word	0xeffffffe

08009568 <std>:
 8009568:	2300      	movs	r3, #0
 800956a:	b510      	push	{r4, lr}
 800956c:	4604      	mov	r4, r0
 800956e:	e9c0 3300 	strd	r3, r3, [r0]
 8009572:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009576:	6083      	str	r3, [r0, #8]
 8009578:	8181      	strh	r1, [r0, #12]
 800957a:	6643      	str	r3, [r0, #100]	@ 0x64
 800957c:	81c2      	strh	r2, [r0, #14]
 800957e:	6183      	str	r3, [r0, #24]
 8009580:	4619      	mov	r1, r3
 8009582:	2208      	movs	r2, #8
 8009584:	305c      	adds	r0, #92	@ 0x5c
 8009586:	f000 f906 	bl	8009796 <memset>
 800958a:	4b0d      	ldr	r3, [pc, #52]	@ (80095c0 <std+0x58>)
 800958c:	6263      	str	r3, [r4, #36]	@ 0x24
 800958e:	4b0d      	ldr	r3, [pc, #52]	@ (80095c4 <std+0x5c>)
 8009590:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009592:	4b0d      	ldr	r3, [pc, #52]	@ (80095c8 <std+0x60>)
 8009594:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009596:	4b0d      	ldr	r3, [pc, #52]	@ (80095cc <std+0x64>)
 8009598:	6323      	str	r3, [r4, #48]	@ 0x30
 800959a:	4b0d      	ldr	r3, [pc, #52]	@ (80095d0 <std+0x68>)
 800959c:	6224      	str	r4, [r4, #32]
 800959e:	429c      	cmp	r4, r3
 80095a0:	d006      	beq.n	80095b0 <std+0x48>
 80095a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80095a6:	4294      	cmp	r4, r2
 80095a8:	d002      	beq.n	80095b0 <std+0x48>
 80095aa:	33d0      	adds	r3, #208	@ 0xd0
 80095ac:	429c      	cmp	r4, r3
 80095ae:	d105      	bne.n	80095bc <std+0x54>
 80095b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80095b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095b8:	f000 b966 	b.w	8009888 <__retarget_lock_init_recursive>
 80095bc:	bd10      	pop	{r4, pc}
 80095be:	bf00      	nop
 80095c0:	08009711 	.word	0x08009711
 80095c4:	08009733 	.word	0x08009733
 80095c8:	0800976b 	.word	0x0800976b
 80095cc:	0800978f 	.word	0x0800978f
 80095d0:	240001e8 	.word	0x240001e8

080095d4 <stdio_exit_handler>:
 80095d4:	4a02      	ldr	r2, [pc, #8]	@ (80095e0 <stdio_exit_handler+0xc>)
 80095d6:	4903      	ldr	r1, [pc, #12]	@ (80095e4 <stdio_exit_handler+0x10>)
 80095d8:	4803      	ldr	r0, [pc, #12]	@ (80095e8 <stdio_exit_handler+0x14>)
 80095da:	f000 b869 	b.w	80096b0 <_fwalk_sglue>
 80095de:	bf00      	nop
 80095e0:	2400002c 	.word	0x2400002c
 80095e4:	0800a125 	.word	0x0800a125
 80095e8:	2400003c 	.word	0x2400003c

080095ec <cleanup_stdio>:
 80095ec:	6841      	ldr	r1, [r0, #4]
 80095ee:	4b0c      	ldr	r3, [pc, #48]	@ (8009620 <cleanup_stdio+0x34>)
 80095f0:	4299      	cmp	r1, r3
 80095f2:	b510      	push	{r4, lr}
 80095f4:	4604      	mov	r4, r0
 80095f6:	d001      	beq.n	80095fc <cleanup_stdio+0x10>
 80095f8:	f000 fd94 	bl	800a124 <_fflush_r>
 80095fc:	68a1      	ldr	r1, [r4, #8]
 80095fe:	4b09      	ldr	r3, [pc, #36]	@ (8009624 <cleanup_stdio+0x38>)
 8009600:	4299      	cmp	r1, r3
 8009602:	d002      	beq.n	800960a <cleanup_stdio+0x1e>
 8009604:	4620      	mov	r0, r4
 8009606:	f000 fd8d 	bl	800a124 <_fflush_r>
 800960a:	68e1      	ldr	r1, [r4, #12]
 800960c:	4b06      	ldr	r3, [pc, #24]	@ (8009628 <cleanup_stdio+0x3c>)
 800960e:	4299      	cmp	r1, r3
 8009610:	d004      	beq.n	800961c <cleanup_stdio+0x30>
 8009612:	4620      	mov	r0, r4
 8009614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009618:	f000 bd84 	b.w	800a124 <_fflush_r>
 800961c:	bd10      	pop	{r4, pc}
 800961e:	bf00      	nop
 8009620:	240001e8 	.word	0x240001e8
 8009624:	24000250 	.word	0x24000250
 8009628:	240002b8 	.word	0x240002b8

0800962c <global_stdio_init.part.0>:
 800962c:	b510      	push	{r4, lr}
 800962e:	4b0b      	ldr	r3, [pc, #44]	@ (800965c <global_stdio_init.part.0+0x30>)
 8009630:	4c0b      	ldr	r4, [pc, #44]	@ (8009660 <global_stdio_init.part.0+0x34>)
 8009632:	4a0c      	ldr	r2, [pc, #48]	@ (8009664 <global_stdio_init.part.0+0x38>)
 8009634:	601a      	str	r2, [r3, #0]
 8009636:	4620      	mov	r0, r4
 8009638:	2200      	movs	r2, #0
 800963a:	2104      	movs	r1, #4
 800963c:	f7ff ff94 	bl	8009568 <std>
 8009640:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009644:	2201      	movs	r2, #1
 8009646:	2109      	movs	r1, #9
 8009648:	f7ff ff8e 	bl	8009568 <std>
 800964c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009650:	2202      	movs	r2, #2
 8009652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009656:	2112      	movs	r1, #18
 8009658:	f7ff bf86 	b.w	8009568 <std>
 800965c:	24000320 	.word	0x24000320
 8009660:	240001e8 	.word	0x240001e8
 8009664:	080095d5 	.word	0x080095d5

08009668 <__sfp_lock_acquire>:
 8009668:	4801      	ldr	r0, [pc, #4]	@ (8009670 <__sfp_lock_acquire+0x8>)
 800966a:	f000 b90e 	b.w	800988a <__retarget_lock_acquire_recursive>
 800966e:	bf00      	nop
 8009670:	24000329 	.word	0x24000329

08009674 <__sfp_lock_release>:
 8009674:	4801      	ldr	r0, [pc, #4]	@ (800967c <__sfp_lock_release+0x8>)
 8009676:	f000 b909 	b.w	800988c <__retarget_lock_release_recursive>
 800967a:	bf00      	nop
 800967c:	24000329 	.word	0x24000329

08009680 <__sinit>:
 8009680:	b510      	push	{r4, lr}
 8009682:	4604      	mov	r4, r0
 8009684:	f7ff fff0 	bl	8009668 <__sfp_lock_acquire>
 8009688:	6a23      	ldr	r3, [r4, #32]
 800968a:	b11b      	cbz	r3, 8009694 <__sinit+0x14>
 800968c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009690:	f7ff bff0 	b.w	8009674 <__sfp_lock_release>
 8009694:	4b04      	ldr	r3, [pc, #16]	@ (80096a8 <__sinit+0x28>)
 8009696:	6223      	str	r3, [r4, #32]
 8009698:	4b04      	ldr	r3, [pc, #16]	@ (80096ac <__sinit+0x2c>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d1f5      	bne.n	800968c <__sinit+0xc>
 80096a0:	f7ff ffc4 	bl	800962c <global_stdio_init.part.0>
 80096a4:	e7f2      	b.n	800968c <__sinit+0xc>
 80096a6:	bf00      	nop
 80096a8:	080095ed 	.word	0x080095ed
 80096ac:	24000320 	.word	0x24000320

080096b0 <_fwalk_sglue>:
 80096b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096b4:	4607      	mov	r7, r0
 80096b6:	4688      	mov	r8, r1
 80096b8:	4614      	mov	r4, r2
 80096ba:	2600      	movs	r6, #0
 80096bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80096c0:	f1b9 0901 	subs.w	r9, r9, #1
 80096c4:	d505      	bpl.n	80096d2 <_fwalk_sglue+0x22>
 80096c6:	6824      	ldr	r4, [r4, #0]
 80096c8:	2c00      	cmp	r4, #0
 80096ca:	d1f7      	bne.n	80096bc <_fwalk_sglue+0xc>
 80096cc:	4630      	mov	r0, r6
 80096ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096d2:	89ab      	ldrh	r3, [r5, #12]
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d907      	bls.n	80096e8 <_fwalk_sglue+0x38>
 80096d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80096dc:	3301      	adds	r3, #1
 80096de:	d003      	beq.n	80096e8 <_fwalk_sglue+0x38>
 80096e0:	4629      	mov	r1, r5
 80096e2:	4638      	mov	r0, r7
 80096e4:	47c0      	blx	r8
 80096e6:	4306      	orrs	r6, r0
 80096e8:	3568      	adds	r5, #104	@ 0x68
 80096ea:	e7e9      	b.n	80096c0 <_fwalk_sglue+0x10>

080096ec <iprintf>:
 80096ec:	b40f      	push	{r0, r1, r2, r3}
 80096ee:	b507      	push	{r0, r1, r2, lr}
 80096f0:	4906      	ldr	r1, [pc, #24]	@ (800970c <iprintf+0x20>)
 80096f2:	ab04      	add	r3, sp, #16
 80096f4:	6808      	ldr	r0, [r1, #0]
 80096f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80096fa:	6881      	ldr	r1, [r0, #8]
 80096fc:	9301      	str	r3, [sp, #4]
 80096fe:	f000 f9e9 	bl	8009ad4 <_vfiprintf_r>
 8009702:	b003      	add	sp, #12
 8009704:	f85d eb04 	ldr.w	lr, [sp], #4
 8009708:	b004      	add	sp, #16
 800970a:	4770      	bx	lr
 800970c:	24000038 	.word	0x24000038

08009710 <__sread>:
 8009710:	b510      	push	{r4, lr}
 8009712:	460c      	mov	r4, r1
 8009714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009718:	f000 f868 	bl	80097ec <_read_r>
 800971c:	2800      	cmp	r0, #0
 800971e:	bfab      	itete	ge
 8009720:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009722:	89a3      	ldrhlt	r3, [r4, #12]
 8009724:	181b      	addge	r3, r3, r0
 8009726:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800972a:	bfac      	ite	ge
 800972c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800972e:	81a3      	strhlt	r3, [r4, #12]
 8009730:	bd10      	pop	{r4, pc}

08009732 <__swrite>:
 8009732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009736:	461f      	mov	r7, r3
 8009738:	898b      	ldrh	r3, [r1, #12]
 800973a:	05db      	lsls	r3, r3, #23
 800973c:	4605      	mov	r5, r0
 800973e:	460c      	mov	r4, r1
 8009740:	4616      	mov	r6, r2
 8009742:	d505      	bpl.n	8009750 <__swrite+0x1e>
 8009744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009748:	2302      	movs	r3, #2
 800974a:	2200      	movs	r2, #0
 800974c:	f000 f83c 	bl	80097c8 <_lseek_r>
 8009750:	89a3      	ldrh	r3, [r4, #12]
 8009752:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009756:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800975a:	81a3      	strh	r3, [r4, #12]
 800975c:	4632      	mov	r2, r6
 800975e:	463b      	mov	r3, r7
 8009760:	4628      	mov	r0, r5
 8009762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009766:	f000 b853 	b.w	8009810 <_write_r>

0800976a <__sseek>:
 800976a:	b510      	push	{r4, lr}
 800976c:	460c      	mov	r4, r1
 800976e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009772:	f000 f829 	bl	80097c8 <_lseek_r>
 8009776:	1c43      	adds	r3, r0, #1
 8009778:	89a3      	ldrh	r3, [r4, #12]
 800977a:	bf15      	itete	ne
 800977c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800977e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009782:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009786:	81a3      	strheq	r3, [r4, #12]
 8009788:	bf18      	it	ne
 800978a:	81a3      	strhne	r3, [r4, #12]
 800978c:	bd10      	pop	{r4, pc}

0800978e <__sclose>:
 800978e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009792:	f000 b809 	b.w	80097a8 <_close_r>

08009796 <memset>:
 8009796:	4402      	add	r2, r0
 8009798:	4603      	mov	r3, r0
 800979a:	4293      	cmp	r3, r2
 800979c:	d100      	bne.n	80097a0 <memset+0xa>
 800979e:	4770      	bx	lr
 80097a0:	f803 1b01 	strb.w	r1, [r3], #1
 80097a4:	e7f9      	b.n	800979a <memset+0x4>
	...

080097a8 <_close_r>:
 80097a8:	b538      	push	{r3, r4, r5, lr}
 80097aa:	4d06      	ldr	r5, [pc, #24]	@ (80097c4 <_close_r+0x1c>)
 80097ac:	2300      	movs	r3, #0
 80097ae:	4604      	mov	r4, r0
 80097b0:	4608      	mov	r0, r1
 80097b2:	602b      	str	r3, [r5, #0]
 80097b4:	f7f9 fcc0 	bl	8003138 <_close>
 80097b8:	1c43      	adds	r3, r0, #1
 80097ba:	d102      	bne.n	80097c2 <_close_r+0x1a>
 80097bc:	682b      	ldr	r3, [r5, #0]
 80097be:	b103      	cbz	r3, 80097c2 <_close_r+0x1a>
 80097c0:	6023      	str	r3, [r4, #0]
 80097c2:	bd38      	pop	{r3, r4, r5, pc}
 80097c4:	24000324 	.word	0x24000324

080097c8 <_lseek_r>:
 80097c8:	b538      	push	{r3, r4, r5, lr}
 80097ca:	4d07      	ldr	r5, [pc, #28]	@ (80097e8 <_lseek_r+0x20>)
 80097cc:	4604      	mov	r4, r0
 80097ce:	4608      	mov	r0, r1
 80097d0:	4611      	mov	r1, r2
 80097d2:	2200      	movs	r2, #0
 80097d4:	602a      	str	r2, [r5, #0]
 80097d6:	461a      	mov	r2, r3
 80097d8:	f7f9 fcd5 	bl	8003186 <_lseek>
 80097dc:	1c43      	adds	r3, r0, #1
 80097de:	d102      	bne.n	80097e6 <_lseek_r+0x1e>
 80097e0:	682b      	ldr	r3, [r5, #0]
 80097e2:	b103      	cbz	r3, 80097e6 <_lseek_r+0x1e>
 80097e4:	6023      	str	r3, [r4, #0]
 80097e6:	bd38      	pop	{r3, r4, r5, pc}
 80097e8:	24000324 	.word	0x24000324

080097ec <_read_r>:
 80097ec:	b538      	push	{r3, r4, r5, lr}
 80097ee:	4d07      	ldr	r5, [pc, #28]	@ (800980c <_read_r+0x20>)
 80097f0:	4604      	mov	r4, r0
 80097f2:	4608      	mov	r0, r1
 80097f4:	4611      	mov	r1, r2
 80097f6:	2200      	movs	r2, #0
 80097f8:	602a      	str	r2, [r5, #0]
 80097fa:	461a      	mov	r2, r3
 80097fc:	f7f9 fc63 	bl	80030c6 <_read>
 8009800:	1c43      	adds	r3, r0, #1
 8009802:	d102      	bne.n	800980a <_read_r+0x1e>
 8009804:	682b      	ldr	r3, [r5, #0]
 8009806:	b103      	cbz	r3, 800980a <_read_r+0x1e>
 8009808:	6023      	str	r3, [r4, #0]
 800980a:	bd38      	pop	{r3, r4, r5, pc}
 800980c:	24000324 	.word	0x24000324

08009810 <_write_r>:
 8009810:	b538      	push	{r3, r4, r5, lr}
 8009812:	4d07      	ldr	r5, [pc, #28]	@ (8009830 <_write_r+0x20>)
 8009814:	4604      	mov	r4, r0
 8009816:	4608      	mov	r0, r1
 8009818:	4611      	mov	r1, r2
 800981a:	2200      	movs	r2, #0
 800981c:	602a      	str	r2, [r5, #0]
 800981e:	461a      	mov	r2, r3
 8009820:	f7f9 fc6e 	bl	8003100 <_write>
 8009824:	1c43      	adds	r3, r0, #1
 8009826:	d102      	bne.n	800982e <_write_r+0x1e>
 8009828:	682b      	ldr	r3, [r5, #0]
 800982a:	b103      	cbz	r3, 800982e <_write_r+0x1e>
 800982c:	6023      	str	r3, [r4, #0]
 800982e:	bd38      	pop	{r3, r4, r5, pc}
 8009830:	24000324 	.word	0x24000324

08009834 <__errno>:
 8009834:	4b01      	ldr	r3, [pc, #4]	@ (800983c <__errno+0x8>)
 8009836:	6818      	ldr	r0, [r3, #0]
 8009838:	4770      	bx	lr
 800983a:	bf00      	nop
 800983c:	24000038 	.word	0x24000038

08009840 <__libc_init_array>:
 8009840:	b570      	push	{r4, r5, r6, lr}
 8009842:	4d0d      	ldr	r5, [pc, #52]	@ (8009878 <__libc_init_array+0x38>)
 8009844:	4c0d      	ldr	r4, [pc, #52]	@ (800987c <__libc_init_array+0x3c>)
 8009846:	1b64      	subs	r4, r4, r5
 8009848:	10a4      	asrs	r4, r4, #2
 800984a:	2600      	movs	r6, #0
 800984c:	42a6      	cmp	r6, r4
 800984e:	d109      	bne.n	8009864 <__libc_init_array+0x24>
 8009850:	4d0b      	ldr	r5, [pc, #44]	@ (8009880 <__libc_init_array+0x40>)
 8009852:	4c0c      	ldr	r4, [pc, #48]	@ (8009884 <__libc_init_array+0x44>)
 8009854:	f000 fdb6 	bl	800a3c4 <_init>
 8009858:	1b64      	subs	r4, r4, r5
 800985a:	10a4      	asrs	r4, r4, #2
 800985c:	2600      	movs	r6, #0
 800985e:	42a6      	cmp	r6, r4
 8009860:	d105      	bne.n	800986e <__libc_init_array+0x2e>
 8009862:	bd70      	pop	{r4, r5, r6, pc}
 8009864:	f855 3b04 	ldr.w	r3, [r5], #4
 8009868:	4798      	blx	r3
 800986a:	3601      	adds	r6, #1
 800986c:	e7ee      	b.n	800984c <__libc_init_array+0xc>
 800986e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009872:	4798      	blx	r3
 8009874:	3601      	adds	r6, #1
 8009876:	e7f2      	b.n	800985e <__libc_init_array+0x1e>
 8009878:	0800dee8 	.word	0x0800dee8
 800987c:	0800dee8 	.word	0x0800dee8
 8009880:	0800dee8 	.word	0x0800dee8
 8009884:	0800deec 	.word	0x0800deec

08009888 <__retarget_lock_init_recursive>:
 8009888:	4770      	bx	lr

0800988a <__retarget_lock_acquire_recursive>:
 800988a:	4770      	bx	lr

0800988c <__retarget_lock_release_recursive>:
 800988c:	4770      	bx	lr
	...

08009890 <_free_r>:
 8009890:	b538      	push	{r3, r4, r5, lr}
 8009892:	4605      	mov	r5, r0
 8009894:	2900      	cmp	r1, #0
 8009896:	d041      	beq.n	800991c <_free_r+0x8c>
 8009898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800989c:	1f0c      	subs	r4, r1, #4
 800989e:	2b00      	cmp	r3, #0
 80098a0:	bfb8      	it	lt
 80098a2:	18e4      	addlt	r4, r4, r3
 80098a4:	f000 f8e0 	bl	8009a68 <__malloc_lock>
 80098a8:	4a1d      	ldr	r2, [pc, #116]	@ (8009920 <_free_r+0x90>)
 80098aa:	6813      	ldr	r3, [r2, #0]
 80098ac:	b933      	cbnz	r3, 80098bc <_free_r+0x2c>
 80098ae:	6063      	str	r3, [r4, #4]
 80098b0:	6014      	str	r4, [r2, #0]
 80098b2:	4628      	mov	r0, r5
 80098b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098b8:	f000 b8dc 	b.w	8009a74 <__malloc_unlock>
 80098bc:	42a3      	cmp	r3, r4
 80098be:	d908      	bls.n	80098d2 <_free_r+0x42>
 80098c0:	6820      	ldr	r0, [r4, #0]
 80098c2:	1821      	adds	r1, r4, r0
 80098c4:	428b      	cmp	r3, r1
 80098c6:	bf01      	itttt	eq
 80098c8:	6819      	ldreq	r1, [r3, #0]
 80098ca:	685b      	ldreq	r3, [r3, #4]
 80098cc:	1809      	addeq	r1, r1, r0
 80098ce:	6021      	streq	r1, [r4, #0]
 80098d0:	e7ed      	b.n	80098ae <_free_r+0x1e>
 80098d2:	461a      	mov	r2, r3
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	b10b      	cbz	r3, 80098dc <_free_r+0x4c>
 80098d8:	42a3      	cmp	r3, r4
 80098da:	d9fa      	bls.n	80098d2 <_free_r+0x42>
 80098dc:	6811      	ldr	r1, [r2, #0]
 80098de:	1850      	adds	r0, r2, r1
 80098e0:	42a0      	cmp	r0, r4
 80098e2:	d10b      	bne.n	80098fc <_free_r+0x6c>
 80098e4:	6820      	ldr	r0, [r4, #0]
 80098e6:	4401      	add	r1, r0
 80098e8:	1850      	adds	r0, r2, r1
 80098ea:	4283      	cmp	r3, r0
 80098ec:	6011      	str	r1, [r2, #0]
 80098ee:	d1e0      	bne.n	80098b2 <_free_r+0x22>
 80098f0:	6818      	ldr	r0, [r3, #0]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	6053      	str	r3, [r2, #4]
 80098f6:	4408      	add	r0, r1
 80098f8:	6010      	str	r0, [r2, #0]
 80098fa:	e7da      	b.n	80098b2 <_free_r+0x22>
 80098fc:	d902      	bls.n	8009904 <_free_r+0x74>
 80098fe:	230c      	movs	r3, #12
 8009900:	602b      	str	r3, [r5, #0]
 8009902:	e7d6      	b.n	80098b2 <_free_r+0x22>
 8009904:	6820      	ldr	r0, [r4, #0]
 8009906:	1821      	adds	r1, r4, r0
 8009908:	428b      	cmp	r3, r1
 800990a:	bf04      	itt	eq
 800990c:	6819      	ldreq	r1, [r3, #0]
 800990e:	685b      	ldreq	r3, [r3, #4]
 8009910:	6063      	str	r3, [r4, #4]
 8009912:	bf04      	itt	eq
 8009914:	1809      	addeq	r1, r1, r0
 8009916:	6021      	streq	r1, [r4, #0]
 8009918:	6054      	str	r4, [r2, #4]
 800991a:	e7ca      	b.n	80098b2 <_free_r+0x22>
 800991c:	bd38      	pop	{r3, r4, r5, pc}
 800991e:	bf00      	nop
 8009920:	24000330 	.word	0x24000330

08009924 <sbrk_aligned>:
 8009924:	b570      	push	{r4, r5, r6, lr}
 8009926:	4e0f      	ldr	r6, [pc, #60]	@ (8009964 <sbrk_aligned+0x40>)
 8009928:	460c      	mov	r4, r1
 800992a:	6831      	ldr	r1, [r6, #0]
 800992c:	4605      	mov	r5, r0
 800992e:	b911      	cbnz	r1, 8009936 <sbrk_aligned+0x12>
 8009930:	f000 fcb4 	bl	800a29c <_sbrk_r>
 8009934:	6030      	str	r0, [r6, #0]
 8009936:	4621      	mov	r1, r4
 8009938:	4628      	mov	r0, r5
 800993a:	f000 fcaf 	bl	800a29c <_sbrk_r>
 800993e:	1c43      	adds	r3, r0, #1
 8009940:	d103      	bne.n	800994a <sbrk_aligned+0x26>
 8009942:	f04f 34ff 	mov.w	r4, #4294967295
 8009946:	4620      	mov	r0, r4
 8009948:	bd70      	pop	{r4, r5, r6, pc}
 800994a:	1cc4      	adds	r4, r0, #3
 800994c:	f024 0403 	bic.w	r4, r4, #3
 8009950:	42a0      	cmp	r0, r4
 8009952:	d0f8      	beq.n	8009946 <sbrk_aligned+0x22>
 8009954:	1a21      	subs	r1, r4, r0
 8009956:	4628      	mov	r0, r5
 8009958:	f000 fca0 	bl	800a29c <_sbrk_r>
 800995c:	3001      	adds	r0, #1
 800995e:	d1f2      	bne.n	8009946 <sbrk_aligned+0x22>
 8009960:	e7ef      	b.n	8009942 <sbrk_aligned+0x1e>
 8009962:	bf00      	nop
 8009964:	2400032c 	.word	0x2400032c

08009968 <_malloc_r>:
 8009968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800996c:	1ccd      	adds	r5, r1, #3
 800996e:	f025 0503 	bic.w	r5, r5, #3
 8009972:	3508      	adds	r5, #8
 8009974:	2d0c      	cmp	r5, #12
 8009976:	bf38      	it	cc
 8009978:	250c      	movcc	r5, #12
 800997a:	2d00      	cmp	r5, #0
 800997c:	4606      	mov	r6, r0
 800997e:	db01      	blt.n	8009984 <_malloc_r+0x1c>
 8009980:	42a9      	cmp	r1, r5
 8009982:	d904      	bls.n	800998e <_malloc_r+0x26>
 8009984:	230c      	movs	r3, #12
 8009986:	6033      	str	r3, [r6, #0]
 8009988:	2000      	movs	r0, #0
 800998a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800998e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009a64 <_malloc_r+0xfc>
 8009992:	f000 f869 	bl	8009a68 <__malloc_lock>
 8009996:	f8d8 3000 	ldr.w	r3, [r8]
 800999a:	461c      	mov	r4, r3
 800999c:	bb44      	cbnz	r4, 80099f0 <_malloc_r+0x88>
 800999e:	4629      	mov	r1, r5
 80099a0:	4630      	mov	r0, r6
 80099a2:	f7ff ffbf 	bl	8009924 <sbrk_aligned>
 80099a6:	1c43      	adds	r3, r0, #1
 80099a8:	4604      	mov	r4, r0
 80099aa:	d158      	bne.n	8009a5e <_malloc_r+0xf6>
 80099ac:	f8d8 4000 	ldr.w	r4, [r8]
 80099b0:	4627      	mov	r7, r4
 80099b2:	2f00      	cmp	r7, #0
 80099b4:	d143      	bne.n	8009a3e <_malloc_r+0xd6>
 80099b6:	2c00      	cmp	r4, #0
 80099b8:	d04b      	beq.n	8009a52 <_malloc_r+0xea>
 80099ba:	6823      	ldr	r3, [r4, #0]
 80099bc:	4639      	mov	r1, r7
 80099be:	4630      	mov	r0, r6
 80099c0:	eb04 0903 	add.w	r9, r4, r3
 80099c4:	f000 fc6a 	bl	800a29c <_sbrk_r>
 80099c8:	4581      	cmp	r9, r0
 80099ca:	d142      	bne.n	8009a52 <_malloc_r+0xea>
 80099cc:	6821      	ldr	r1, [r4, #0]
 80099ce:	1a6d      	subs	r5, r5, r1
 80099d0:	4629      	mov	r1, r5
 80099d2:	4630      	mov	r0, r6
 80099d4:	f7ff ffa6 	bl	8009924 <sbrk_aligned>
 80099d8:	3001      	adds	r0, #1
 80099da:	d03a      	beq.n	8009a52 <_malloc_r+0xea>
 80099dc:	6823      	ldr	r3, [r4, #0]
 80099de:	442b      	add	r3, r5
 80099e0:	6023      	str	r3, [r4, #0]
 80099e2:	f8d8 3000 	ldr.w	r3, [r8]
 80099e6:	685a      	ldr	r2, [r3, #4]
 80099e8:	bb62      	cbnz	r2, 8009a44 <_malloc_r+0xdc>
 80099ea:	f8c8 7000 	str.w	r7, [r8]
 80099ee:	e00f      	b.n	8009a10 <_malloc_r+0xa8>
 80099f0:	6822      	ldr	r2, [r4, #0]
 80099f2:	1b52      	subs	r2, r2, r5
 80099f4:	d420      	bmi.n	8009a38 <_malloc_r+0xd0>
 80099f6:	2a0b      	cmp	r2, #11
 80099f8:	d917      	bls.n	8009a2a <_malloc_r+0xc2>
 80099fa:	1961      	adds	r1, r4, r5
 80099fc:	42a3      	cmp	r3, r4
 80099fe:	6025      	str	r5, [r4, #0]
 8009a00:	bf18      	it	ne
 8009a02:	6059      	strne	r1, [r3, #4]
 8009a04:	6863      	ldr	r3, [r4, #4]
 8009a06:	bf08      	it	eq
 8009a08:	f8c8 1000 	streq.w	r1, [r8]
 8009a0c:	5162      	str	r2, [r4, r5]
 8009a0e:	604b      	str	r3, [r1, #4]
 8009a10:	4630      	mov	r0, r6
 8009a12:	f000 f82f 	bl	8009a74 <__malloc_unlock>
 8009a16:	f104 000b 	add.w	r0, r4, #11
 8009a1a:	1d23      	adds	r3, r4, #4
 8009a1c:	f020 0007 	bic.w	r0, r0, #7
 8009a20:	1ac2      	subs	r2, r0, r3
 8009a22:	bf1c      	itt	ne
 8009a24:	1a1b      	subne	r3, r3, r0
 8009a26:	50a3      	strne	r3, [r4, r2]
 8009a28:	e7af      	b.n	800998a <_malloc_r+0x22>
 8009a2a:	6862      	ldr	r2, [r4, #4]
 8009a2c:	42a3      	cmp	r3, r4
 8009a2e:	bf0c      	ite	eq
 8009a30:	f8c8 2000 	streq.w	r2, [r8]
 8009a34:	605a      	strne	r2, [r3, #4]
 8009a36:	e7eb      	b.n	8009a10 <_malloc_r+0xa8>
 8009a38:	4623      	mov	r3, r4
 8009a3a:	6864      	ldr	r4, [r4, #4]
 8009a3c:	e7ae      	b.n	800999c <_malloc_r+0x34>
 8009a3e:	463c      	mov	r4, r7
 8009a40:	687f      	ldr	r7, [r7, #4]
 8009a42:	e7b6      	b.n	80099b2 <_malloc_r+0x4a>
 8009a44:	461a      	mov	r2, r3
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	42a3      	cmp	r3, r4
 8009a4a:	d1fb      	bne.n	8009a44 <_malloc_r+0xdc>
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	6053      	str	r3, [r2, #4]
 8009a50:	e7de      	b.n	8009a10 <_malloc_r+0xa8>
 8009a52:	230c      	movs	r3, #12
 8009a54:	6033      	str	r3, [r6, #0]
 8009a56:	4630      	mov	r0, r6
 8009a58:	f000 f80c 	bl	8009a74 <__malloc_unlock>
 8009a5c:	e794      	b.n	8009988 <_malloc_r+0x20>
 8009a5e:	6005      	str	r5, [r0, #0]
 8009a60:	e7d6      	b.n	8009a10 <_malloc_r+0xa8>
 8009a62:	bf00      	nop
 8009a64:	24000330 	.word	0x24000330

08009a68 <__malloc_lock>:
 8009a68:	4801      	ldr	r0, [pc, #4]	@ (8009a70 <__malloc_lock+0x8>)
 8009a6a:	f7ff bf0e 	b.w	800988a <__retarget_lock_acquire_recursive>
 8009a6e:	bf00      	nop
 8009a70:	24000328 	.word	0x24000328

08009a74 <__malloc_unlock>:
 8009a74:	4801      	ldr	r0, [pc, #4]	@ (8009a7c <__malloc_unlock+0x8>)
 8009a76:	f7ff bf09 	b.w	800988c <__retarget_lock_release_recursive>
 8009a7a:	bf00      	nop
 8009a7c:	24000328 	.word	0x24000328

08009a80 <__sfputc_r>:
 8009a80:	6893      	ldr	r3, [r2, #8]
 8009a82:	3b01      	subs	r3, #1
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	b410      	push	{r4}
 8009a88:	6093      	str	r3, [r2, #8]
 8009a8a:	da08      	bge.n	8009a9e <__sfputc_r+0x1e>
 8009a8c:	6994      	ldr	r4, [r2, #24]
 8009a8e:	42a3      	cmp	r3, r4
 8009a90:	db01      	blt.n	8009a96 <__sfputc_r+0x16>
 8009a92:	290a      	cmp	r1, #10
 8009a94:	d103      	bne.n	8009a9e <__sfputc_r+0x1e>
 8009a96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a9a:	f000 bb6b 	b.w	800a174 <__swbuf_r>
 8009a9e:	6813      	ldr	r3, [r2, #0]
 8009aa0:	1c58      	adds	r0, r3, #1
 8009aa2:	6010      	str	r0, [r2, #0]
 8009aa4:	7019      	strb	r1, [r3, #0]
 8009aa6:	4608      	mov	r0, r1
 8009aa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009aac:	4770      	bx	lr

08009aae <__sfputs_r>:
 8009aae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ab0:	4606      	mov	r6, r0
 8009ab2:	460f      	mov	r7, r1
 8009ab4:	4614      	mov	r4, r2
 8009ab6:	18d5      	adds	r5, r2, r3
 8009ab8:	42ac      	cmp	r4, r5
 8009aba:	d101      	bne.n	8009ac0 <__sfputs_r+0x12>
 8009abc:	2000      	movs	r0, #0
 8009abe:	e007      	b.n	8009ad0 <__sfputs_r+0x22>
 8009ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ac4:	463a      	mov	r2, r7
 8009ac6:	4630      	mov	r0, r6
 8009ac8:	f7ff ffda 	bl	8009a80 <__sfputc_r>
 8009acc:	1c43      	adds	r3, r0, #1
 8009ace:	d1f3      	bne.n	8009ab8 <__sfputs_r+0xa>
 8009ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ad4 <_vfiprintf_r>:
 8009ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad8:	460d      	mov	r5, r1
 8009ada:	b09d      	sub	sp, #116	@ 0x74
 8009adc:	4614      	mov	r4, r2
 8009ade:	4698      	mov	r8, r3
 8009ae0:	4606      	mov	r6, r0
 8009ae2:	b118      	cbz	r0, 8009aec <_vfiprintf_r+0x18>
 8009ae4:	6a03      	ldr	r3, [r0, #32]
 8009ae6:	b90b      	cbnz	r3, 8009aec <_vfiprintf_r+0x18>
 8009ae8:	f7ff fdca 	bl	8009680 <__sinit>
 8009aec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009aee:	07d9      	lsls	r1, r3, #31
 8009af0:	d405      	bmi.n	8009afe <_vfiprintf_r+0x2a>
 8009af2:	89ab      	ldrh	r3, [r5, #12]
 8009af4:	059a      	lsls	r2, r3, #22
 8009af6:	d402      	bmi.n	8009afe <_vfiprintf_r+0x2a>
 8009af8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009afa:	f7ff fec6 	bl	800988a <__retarget_lock_acquire_recursive>
 8009afe:	89ab      	ldrh	r3, [r5, #12]
 8009b00:	071b      	lsls	r3, r3, #28
 8009b02:	d501      	bpl.n	8009b08 <_vfiprintf_r+0x34>
 8009b04:	692b      	ldr	r3, [r5, #16]
 8009b06:	b99b      	cbnz	r3, 8009b30 <_vfiprintf_r+0x5c>
 8009b08:	4629      	mov	r1, r5
 8009b0a:	4630      	mov	r0, r6
 8009b0c:	f000 fb70 	bl	800a1f0 <__swsetup_r>
 8009b10:	b170      	cbz	r0, 8009b30 <_vfiprintf_r+0x5c>
 8009b12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b14:	07dc      	lsls	r4, r3, #31
 8009b16:	d504      	bpl.n	8009b22 <_vfiprintf_r+0x4e>
 8009b18:	f04f 30ff 	mov.w	r0, #4294967295
 8009b1c:	b01d      	add	sp, #116	@ 0x74
 8009b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b22:	89ab      	ldrh	r3, [r5, #12]
 8009b24:	0598      	lsls	r0, r3, #22
 8009b26:	d4f7      	bmi.n	8009b18 <_vfiprintf_r+0x44>
 8009b28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b2a:	f7ff feaf 	bl	800988c <__retarget_lock_release_recursive>
 8009b2e:	e7f3      	b.n	8009b18 <_vfiprintf_r+0x44>
 8009b30:	2300      	movs	r3, #0
 8009b32:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b34:	2320      	movs	r3, #32
 8009b36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009b3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b3e:	2330      	movs	r3, #48	@ 0x30
 8009b40:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009cf0 <_vfiprintf_r+0x21c>
 8009b44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009b48:	f04f 0901 	mov.w	r9, #1
 8009b4c:	4623      	mov	r3, r4
 8009b4e:	469a      	mov	sl, r3
 8009b50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b54:	b10a      	cbz	r2, 8009b5a <_vfiprintf_r+0x86>
 8009b56:	2a25      	cmp	r2, #37	@ 0x25
 8009b58:	d1f9      	bne.n	8009b4e <_vfiprintf_r+0x7a>
 8009b5a:	ebba 0b04 	subs.w	fp, sl, r4
 8009b5e:	d00b      	beq.n	8009b78 <_vfiprintf_r+0xa4>
 8009b60:	465b      	mov	r3, fp
 8009b62:	4622      	mov	r2, r4
 8009b64:	4629      	mov	r1, r5
 8009b66:	4630      	mov	r0, r6
 8009b68:	f7ff ffa1 	bl	8009aae <__sfputs_r>
 8009b6c:	3001      	adds	r0, #1
 8009b6e:	f000 80a7 	beq.w	8009cc0 <_vfiprintf_r+0x1ec>
 8009b72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b74:	445a      	add	r2, fp
 8009b76:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b78:	f89a 3000 	ldrb.w	r3, [sl]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	f000 809f 	beq.w	8009cc0 <_vfiprintf_r+0x1ec>
 8009b82:	2300      	movs	r3, #0
 8009b84:	f04f 32ff 	mov.w	r2, #4294967295
 8009b88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b8c:	f10a 0a01 	add.w	sl, sl, #1
 8009b90:	9304      	str	r3, [sp, #16]
 8009b92:	9307      	str	r3, [sp, #28]
 8009b94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b98:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b9a:	4654      	mov	r4, sl
 8009b9c:	2205      	movs	r2, #5
 8009b9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ba2:	4853      	ldr	r0, [pc, #332]	@ (8009cf0 <_vfiprintf_r+0x21c>)
 8009ba4:	f7f6 fb9c 	bl	80002e0 <memchr>
 8009ba8:	9a04      	ldr	r2, [sp, #16]
 8009baa:	b9d8      	cbnz	r0, 8009be4 <_vfiprintf_r+0x110>
 8009bac:	06d1      	lsls	r1, r2, #27
 8009bae:	bf44      	itt	mi
 8009bb0:	2320      	movmi	r3, #32
 8009bb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bb6:	0713      	lsls	r3, r2, #28
 8009bb8:	bf44      	itt	mi
 8009bba:	232b      	movmi	r3, #43	@ 0x2b
 8009bbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bc0:	f89a 3000 	ldrb.w	r3, [sl]
 8009bc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8009bc6:	d015      	beq.n	8009bf4 <_vfiprintf_r+0x120>
 8009bc8:	9a07      	ldr	r2, [sp, #28]
 8009bca:	4654      	mov	r4, sl
 8009bcc:	2000      	movs	r0, #0
 8009bce:	f04f 0c0a 	mov.w	ip, #10
 8009bd2:	4621      	mov	r1, r4
 8009bd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bd8:	3b30      	subs	r3, #48	@ 0x30
 8009bda:	2b09      	cmp	r3, #9
 8009bdc:	d94b      	bls.n	8009c76 <_vfiprintf_r+0x1a2>
 8009bde:	b1b0      	cbz	r0, 8009c0e <_vfiprintf_r+0x13a>
 8009be0:	9207      	str	r2, [sp, #28]
 8009be2:	e014      	b.n	8009c0e <_vfiprintf_r+0x13a>
 8009be4:	eba0 0308 	sub.w	r3, r0, r8
 8009be8:	fa09 f303 	lsl.w	r3, r9, r3
 8009bec:	4313      	orrs	r3, r2
 8009bee:	9304      	str	r3, [sp, #16]
 8009bf0:	46a2      	mov	sl, r4
 8009bf2:	e7d2      	b.n	8009b9a <_vfiprintf_r+0xc6>
 8009bf4:	9b03      	ldr	r3, [sp, #12]
 8009bf6:	1d19      	adds	r1, r3, #4
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	9103      	str	r1, [sp, #12]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	bfbb      	ittet	lt
 8009c00:	425b      	neglt	r3, r3
 8009c02:	f042 0202 	orrlt.w	r2, r2, #2
 8009c06:	9307      	strge	r3, [sp, #28]
 8009c08:	9307      	strlt	r3, [sp, #28]
 8009c0a:	bfb8      	it	lt
 8009c0c:	9204      	strlt	r2, [sp, #16]
 8009c0e:	7823      	ldrb	r3, [r4, #0]
 8009c10:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c12:	d10a      	bne.n	8009c2a <_vfiprintf_r+0x156>
 8009c14:	7863      	ldrb	r3, [r4, #1]
 8009c16:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c18:	d132      	bne.n	8009c80 <_vfiprintf_r+0x1ac>
 8009c1a:	9b03      	ldr	r3, [sp, #12]
 8009c1c:	1d1a      	adds	r2, r3, #4
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	9203      	str	r2, [sp, #12]
 8009c22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009c26:	3402      	adds	r4, #2
 8009c28:	9305      	str	r3, [sp, #20]
 8009c2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009d00 <_vfiprintf_r+0x22c>
 8009c2e:	7821      	ldrb	r1, [r4, #0]
 8009c30:	2203      	movs	r2, #3
 8009c32:	4650      	mov	r0, sl
 8009c34:	f7f6 fb54 	bl	80002e0 <memchr>
 8009c38:	b138      	cbz	r0, 8009c4a <_vfiprintf_r+0x176>
 8009c3a:	9b04      	ldr	r3, [sp, #16]
 8009c3c:	eba0 000a 	sub.w	r0, r0, sl
 8009c40:	2240      	movs	r2, #64	@ 0x40
 8009c42:	4082      	lsls	r2, r0
 8009c44:	4313      	orrs	r3, r2
 8009c46:	3401      	adds	r4, #1
 8009c48:	9304      	str	r3, [sp, #16]
 8009c4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c4e:	4829      	ldr	r0, [pc, #164]	@ (8009cf4 <_vfiprintf_r+0x220>)
 8009c50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009c54:	2206      	movs	r2, #6
 8009c56:	f7f6 fb43 	bl	80002e0 <memchr>
 8009c5a:	2800      	cmp	r0, #0
 8009c5c:	d03f      	beq.n	8009cde <_vfiprintf_r+0x20a>
 8009c5e:	4b26      	ldr	r3, [pc, #152]	@ (8009cf8 <_vfiprintf_r+0x224>)
 8009c60:	bb1b      	cbnz	r3, 8009caa <_vfiprintf_r+0x1d6>
 8009c62:	9b03      	ldr	r3, [sp, #12]
 8009c64:	3307      	adds	r3, #7
 8009c66:	f023 0307 	bic.w	r3, r3, #7
 8009c6a:	3308      	adds	r3, #8
 8009c6c:	9303      	str	r3, [sp, #12]
 8009c6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c70:	443b      	add	r3, r7
 8009c72:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c74:	e76a      	b.n	8009b4c <_vfiprintf_r+0x78>
 8009c76:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c7a:	460c      	mov	r4, r1
 8009c7c:	2001      	movs	r0, #1
 8009c7e:	e7a8      	b.n	8009bd2 <_vfiprintf_r+0xfe>
 8009c80:	2300      	movs	r3, #0
 8009c82:	3401      	adds	r4, #1
 8009c84:	9305      	str	r3, [sp, #20]
 8009c86:	4619      	mov	r1, r3
 8009c88:	f04f 0c0a 	mov.w	ip, #10
 8009c8c:	4620      	mov	r0, r4
 8009c8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c92:	3a30      	subs	r2, #48	@ 0x30
 8009c94:	2a09      	cmp	r2, #9
 8009c96:	d903      	bls.n	8009ca0 <_vfiprintf_r+0x1cc>
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d0c6      	beq.n	8009c2a <_vfiprintf_r+0x156>
 8009c9c:	9105      	str	r1, [sp, #20]
 8009c9e:	e7c4      	b.n	8009c2a <_vfiprintf_r+0x156>
 8009ca0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ca4:	4604      	mov	r4, r0
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	e7f0      	b.n	8009c8c <_vfiprintf_r+0x1b8>
 8009caa:	ab03      	add	r3, sp, #12
 8009cac:	9300      	str	r3, [sp, #0]
 8009cae:	462a      	mov	r2, r5
 8009cb0:	4b12      	ldr	r3, [pc, #72]	@ (8009cfc <_vfiprintf_r+0x228>)
 8009cb2:	a904      	add	r1, sp, #16
 8009cb4:	4630      	mov	r0, r6
 8009cb6:	f3af 8000 	nop.w
 8009cba:	4607      	mov	r7, r0
 8009cbc:	1c78      	adds	r0, r7, #1
 8009cbe:	d1d6      	bne.n	8009c6e <_vfiprintf_r+0x19a>
 8009cc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009cc2:	07d9      	lsls	r1, r3, #31
 8009cc4:	d405      	bmi.n	8009cd2 <_vfiprintf_r+0x1fe>
 8009cc6:	89ab      	ldrh	r3, [r5, #12]
 8009cc8:	059a      	lsls	r2, r3, #22
 8009cca:	d402      	bmi.n	8009cd2 <_vfiprintf_r+0x1fe>
 8009ccc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009cce:	f7ff fddd 	bl	800988c <__retarget_lock_release_recursive>
 8009cd2:	89ab      	ldrh	r3, [r5, #12]
 8009cd4:	065b      	lsls	r3, r3, #25
 8009cd6:	f53f af1f 	bmi.w	8009b18 <_vfiprintf_r+0x44>
 8009cda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009cdc:	e71e      	b.n	8009b1c <_vfiprintf_r+0x48>
 8009cde:	ab03      	add	r3, sp, #12
 8009ce0:	9300      	str	r3, [sp, #0]
 8009ce2:	462a      	mov	r2, r5
 8009ce4:	4b05      	ldr	r3, [pc, #20]	@ (8009cfc <_vfiprintf_r+0x228>)
 8009ce6:	a904      	add	r1, sp, #16
 8009ce8:	4630      	mov	r0, r6
 8009cea:	f000 f879 	bl	8009de0 <_printf_i>
 8009cee:	e7e4      	b.n	8009cba <_vfiprintf_r+0x1e6>
 8009cf0:	0800deac 	.word	0x0800deac
 8009cf4:	0800deb6 	.word	0x0800deb6
 8009cf8:	00000000 	.word	0x00000000
 8009cfc:	08009aaf 	.word	0x08009aaf
 8009d00:	0800deb2 	.word	0x0800deb2

08009d04 <_printf_common>:
 8009d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d08:	4616      	mov	r6, r2
 8009d0a:	4698      	mov	r8, r3
 8009d0c:	688a      	ldr	r2, [r1, #8]
 8009d0e:	690b      	ldr	r3, [r1, #16]
 8009d10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009d14:	4293      	cmp	r3, r2
 8009d16:	bfb8      	it	lt
 8009d18:	4613      	movlt	r3, r2
 8009d1a:	6033      	str	r3, [r6, #0]
 8009d1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009d20:	4607      	mov	r7, r0
 8009d22:	460c      	mov	r4, r1
 8009d24:	b10a      	cbz	r2, 8009d2a <_printf_common+0x26>
 8009d26:	3301      	adds	r3, #1
 8009d28:	6033      	str	r3, [r6, #0]
 8009d2a:	6823      	ldr	r3, [r4, #0]
 8009d2c:	0699      	lsls	r1, r3, #26
 8009d2e:	bf42      	ittt	mi
 8009d30:	6833      	ldrmi	r3, [r6, #0]
 8009d32:	3302      	addmi	r3, #2
 8009d34:	6033      	strmi	r3, [r6, #0]
 8009d36:	6825      	ldr	r5, [r4, #0]
 8009d38:	f015 0506 	ands.w	r5, r5, #6
 8009d3c:	d106      	bne.n	8009d4c <_printf_common+0x48>
 8009d3e:	f104 0a19 	add.w	sl, r4, #25
 8009d42:	68e3      	ldr	r3, [r4, #12]
 8009d44:	6832      	ldr	r2, [r6, #0]
 8009d46:	1a9b      	subs	r3, r3, r2
 8009d48:	42ab      	cmp	r3, r5
 8009d4a:	dc26      	bgt.n	8009d9a <_printf_common+0x96>
 8009d4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009d50:	6822      	ldr	r2, [r4, #0]
 8009d52:	3b00      	subs	r3, #0
 8009d54:	bf18      	it	ne
 8009d56:	2301      	movne	r3, #1
 8009d58:	0692      	lsls	r2, r2, #26
 8009d5a:	d42b      	bmi.n	8009db4 <_printf_common+0xb0>
 8009d5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009d60:	4641      	mov	r1, r8
 8009d62:	4638      	mov	r0, r7
 8009d64:	47c8      	blx	r9
 8009d66:	3001      	adds	r0, #1
 8009d68:	d01e      	beq.n	8009da8 <_printf_common+0xa4>
 8009d6a:	6823      	ldr	r3, [r4, #0]
 8009d6c:	6922      	ldr	r2, [r4, #16]
 8009d6e:	f003 0306 	and.w	r3, r3, #6
 8009d72:	2b04      	cmp	r3, #4
 8009d74:	bf02      	ittt	eq
 8009d76:	68e5      	ldreq	r5, [r4, #12]
 8009d78:	6833      	ldreq	r3, [r6, #0]
 8009d7a:	1aed      	subeq	r5, r5, r3
 8009d7c:	68a3      	ldr	r3, [r4, #8]
 8009d7e:	bf0c      	ite	eq
 8009d80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d84:	2500      	movne	r5, #0
 8009d86:	4293      	cmp	r3, r2
 8009d88:	bfc4      	itt	gt
 8009d8a:	1a9b      	subgt	r3, r3, r2
 8009d8c:	18ed      	addgt	r5, r5, r3
 8009d8e:	2600      	movs	r6, #0
 8009d90:	341a      	adds	r4, #26
 8009d92:	42b5      	cmp	r5, r6
 8009d94:	d11a      	bne.n	8009dcc <_printf_common+0xc8>
 8009d96:	2000      	movs	r0, #0
 8009d98:	e008      	b.n	8009dac <_printf_common+0xa8>
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	4652      	mov	r2, sl
 8009d9e:	4641      	mov	r1, r8
 8009da0:	4638      	mov	r0, r7
 8009da2:	47c8      	blx	r9
 8009da4:	3001      	adds	r0, #1
 8009da6:	d103      	bne.n	8009db0 <_printf_common+0xac>
 8009da8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009db0:	3501      	adds	r5, #1
 8009db2:	e7c6      	b.n	8009d42 <_printf_common+0x3e>
 8009db4:	18e1      	adds	r1, r4, r3
 8009db6:	1c5a      	adds	r2, r3, #1
 8009db8:	2030      	movs	r0, #48	@ 0x30
 8009dba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009dbe:	4422      	add	r2, r4
 8009dc0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009dc4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009dc8:	3302      	adds	r3, #2
 8009dca:	e7c7      	b.n	8009d5c <_printf_common+0x58>
 8009dcc:	2301      	movs	r3, #1
 8009dce:	4622      	mov	r2, r4
 8009dd0:	4641      	mov	r1, r8
 8009dd2:	4638      	mov	r0, r7
 8009dd4:	47c8      	blx	r9
 8009dd6:	3001      	adds	r0, #1
 8009dd8:	d0e6      	beq.n	8009da8 <_printf_common+0xa4>
 8009dda:	3601      	adds	r6, #1
 8009ddc:	e7d9      	b.n	8009d92 <_printf_common+0x8e>
	...

08009de0 <_printf_i>:
 8009de0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009de4:	7e0f      	ldrb	r7, [r1, #24]
 8009de6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009de8:	2f78      	cmp	r7, #120	@ 0x78
 8009dea:	4691      	mov	r9, r2
 8009dec:	4680      	mov	r8, r0
 8009dee:	460c      	mov	r4, r1
 8009df0:	469a      	mov	sl, r3
 8009df2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009df6:	d807      	bhi.n	8009e08 <_printf_i+0x28>
 8009df8:	2f62      	cmp	r7, #98	@ 0x62
 8009dfa:	d80a      	bhi.n	8009e12 <_printf_i+0x32>
 8009dfc:	2f00      	cmp	r7, #0
 8009dfe:	f000 80d1 	beq.w	8009fa4 <_printf_i+0x1c4>
 8009e02:	2f58      	cmp	r7, #88	@ 0x58
 8009e04:	f000 80b8 	beq.w	8009f78 <_printf_i+0x198>
 8009e08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009e10:	e03a      	b.n	8009e88 <_printf_i+0xa8>
 8009e12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009e16:	2b15      	cmp	r3, #21
 8009e18:	d8f6      	bhi.n	8009e08 <_printf_i+0x28>
 8009e1a:	a101      	add	r1, pc, #4	@ (adr r1, 8009e20 <_printf_i+0x40>)
 8009e1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e20:	08009e79 	.word	0x08009e79
 8009e24:	08009e8d 	.word	0x08009e8d
 8009e28:	08009e09 	.word	0x08009e09
 8009e2c:	08009e09 	.word	0x08009e09
 8009e30:	08009e09 	.word	0x08009e09
 8009e34:	08009e09 	.word	0x08009e09
 8009e38:	08009e8d 	.word	0x08009e8d
 8009e3c:	08009e09 	.word	0x08009e09
 8009e40:	08009e09 	.word	0x08009e09
 8009e44:	08009e09 	.word	0x08009e09
 8009e48:	08009e09 	.word	0x08009e09
 8009e4c:	08009f8b 	.word	0x08009f8b
 8009e50:	08009eb7 	.word	0x08009eb7
 8009e54:	08009f45 	.word	0x08009f45
 8009e58:	08009e09 	.word	0x08009e09
 8009e5c:	08009e09 	.word	0x08009e09
 8009e60:	08009fad 	.word	0x08009fad
 8009e64:	08009e09 	.word	0x08009e09
 8009e68:	08009eb7 	.word	0x08009eb7
 8009e6c:	08009e09 	.word	0x08009e09
 8009e70:	08009e09 	.word	0x08009e09
 8009e74:	08009f4d 	.word	0x08009f4d
 8009e78:	6833      	ldr	r3, [r6, #0]
 8009e7a:	1d1a      	adds	r2, r3, #4
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	6032      	str	r2, [r6, #0]
 8009e80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009e88:	2301      	movs	r3, #1
 8009e8a:	e09c      	b.n	8009fc6 <_printf_i+0x1e6>
 8009e8c:	6833      	ldr	r3, [r6, #0]
 8009e8e:	6820      	ldr	r0, [r4, #0]
 8009e90:	1d19      	adds	r1, r3, #4
 8009e92:	6031      	str	r1, [r6, #0]
 8009e94:	0606      	lsls	r6, r0, #24
 8009e96:	d501      	bpl.n	8009e9c <_printf_i+0xbc>
 8009e98:	681d      	ldr	r5, [r3, #0]
 8009e9a:	e003      	b.n	8009ea4 <_printf_i+0xc4>
 8009e9c:	0645      	lsls	r5, r0, #25
 8009e9e:	d5fb      	bpl.n	8009e98 <_printf_i+0xb8>
 8009ea0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009ea4:	2d00      	cmp	r5, #0
 8009ea6:	da03      	bge.n	8009eb0 <_printf_i+0xd0>
 8009ea8:	232d      	movs	r3, #45	@ 0x2d
 8009eaa:	426d      	negs	r5, r5
 8009eac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009eb0:	4858      	ldr	r0, [pc, #352]	@ (800a014 <_printf_i+0x234>)
 8009eb2:	230a      	movs	r3, #10
 8009eb4:	e011      	b.n	8009eda <_printf_i+0xfa>
 8009eb6:	6821      	ldr	r1, [r4, #0]
 8009eb8:	6833      	ldr	r3, [r6, #0]
 8009eba:	0608      	lsls	r0, r1, #24
 8009ebc:	f853 5b04 	ldr.w	r5, [r3], #4
 8009ec0:	d402      	bmi.n	8009ec8 <_printf_i+0xe8>
 8009ec2:	0649      	lsls	r1, r1, #25
 8009ec4:	bf48      	it	mi
 8009ec6:	b2ad      	uxthmi	r5, r5
 8009ec8:	2f6f      	cmp	r7, #111	@ 0x6f
 8009eca:	4852      	ldr	r0, [pc, #328]	@ (800a014 <_printf_i+0x234>)
 8009ecc:	6033      	str	r3, [r6, #0]
 8009ece:	bf14      	ite	ne
 8009ed0:	230a      	movne	r3, #10
 8009ed2:	2308      	moveq	r3, #8
 8009ed4:	2100      	movs	r1, #0
 8009ed6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009eda:	6866      	ldr	r6, [r4, #4]
 8009edc:	60a6      	str	r6, [r4, #8]
 8009ede:	2e00      	cmp	r6, #0
 8009ee0:	db05      	blt.n	8009eee <_printf_i+0x10e>
 8009ee2:	6821      	ldr	r1, [r4, #0]
 8009ee4:	432e      	orrs	r6, r5
 8009ee6:	f021 0104 	bic.w	r1, r1, #4
 8009eea:	6021      	str	r1, [r4, #0]
 8009eec:	d04b      	beq.n	8009f86 <_printf_i+0x1a6>
 8009eee:	4616      	mov	r6, r2
 8009ef0:	fbb5 f1f3 	udiv	r1, r5, r3
 8009ef4:	fb03 5711 	mls	r7, r3, r1, r5
 8009ef8:	5dc7      	ldrb	r7, [r0, r7]
 8009efa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009efe:	462f      	mov	r7, r5
 8009f00:	42bb      	cmp	r3, r7
 8009f02:	460d      	mov	r5, r1
 8009f04:	d9f4      	bls.n	8009ef0 <_printf_i+0x110>
 8009f06:	2b08      	cmp	r3, #8
 8009f08:	d10b      	bne.n	8009f22 <_printf_i+0x142>
 8009f0a:	6823      	ldr	r3, [r4, #0]
 8009f0c:	07df      	lsls	r7, r3, #31
 8009f0e:	d508      	bpl.n	8009f22 <_printf_i+0x142>
 8009f10:	6923      	ldr	r3, [r4, #16]
 8009f12:	6861      	ldr	r1, [r4, #4]
 8009f14:	4299      	cmp	r1, r3
 8009f16:	bfde      	ittt	le
 8009f18:	2330      	movle	r3, #48	@ 0x30
 8009f1a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009f1e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009f22:	1b92      	subs	r2, r2, r6
 8009f24:	6122      	str	r2, [r4, #16]
 8009f26:	f8cd a000 	str.w	sl, [sp]
 8009f2a:	464b      	mov	r3, r9
 8009f2c:	aa03      	add	r2, sp, #12
 8009f2e:	4621      	mov	r1, r4
 8009f30:	4640      	mov	r0, r8
 8009f32:	f7ff fee7 	bl	8009d04 <_printf_common>
 8009f36:	3001      	adds	r0, #1
 8009f38:	d14a      	bne.n	8009fd0 <_printf_i+0x1f0>
 8009f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f3e:	b004      	add	sp, #16
 8009f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f44:	6823      	ldr	r3, [r4, #0]
 8009f46:	f043 0320 	orr.w	r3, r3, #32
 8009f4a:	6023      	str	r3, [r4, #0]
 8009f4c:	4832      	ldr	r0, [pc, #200]	@ (800a018 <_printf_i+0x238>)
 8009f4e:	2778      	movs	r7, #120	@ 0x78
 8009f50:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009f54:	6823      	ldr	r3, [r4, #0]
 8009f56:	6831      	ldr	r1, [r6, #0]
 8009f58:	061f      	lsls	r7, r3, #24
 8009f5a:	f851 5b04 	ldr.w	r5, [r1], #4
 8009f5e:	d402      	bmi.n	8009f66 <_printf_i+0x186>
 8009f60:	065f      	lsls	r7, r3, #25
 8009f62:	bf48      	it	mi
 8009f64:	b2ad      	uxthmi	r5, r5
 8009f66:	6031      	str	r1, [r6, #0]
 8009f68:	07d9      	lsls	r1, r3, #31
 8009f6a:	bf44      	itt	mi
 8009f6c:	f043 0320 	orrmi.w	r3, r3, #32
 8009f70:	6023      	strmi	r3, [r4, #0]
 8009f72:	b11d      	cbz	r5, 8009f7c <_printf_i+0x19c>
 8009f74:	2310      	movs	r3, #16
 8009f76:	e7ad      	b.n	8009ed4 <_printf_i+0xf4>
 8009f78:	4826      	ldr	r0, [pc, #152]	@ (800a014 <_printf_i+0x234>)
 8009f7a:	e7e9      	b.n	8009f50 <_printf_i+0x170>
 8009f7c:	6823      	ldr	r3, [r4, #0]
 8009f7e:	f023 0320 	bic.w	r3, r3, #32
 8009f82:	6023      	str	r3, [r4, #0]
 8009f84:	e7f6      	b.n	8009f74 <_printf_i+0x194>
 8009f86:	4616      	mov	r6, r2
 8009f88:	e7bd      	b.n	8009f06 <_printf_i+0x126>
 8009f8a:	6833      	ldr	r3, [r6, #0]
 8009f8c:	6825      	ldr	r5, [r4, #0]
 8009f8e:	6961      	ldr	r1, [r4, #20]
 8009f90:	1d18      	adds	r0, r3, #4
 8009f92:	6030      	str	r0, [r6, #0]
 8009f94:	062e      	lsls	r6, r5, #24
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	d501      	bpl.n	8009f9e <_printf_i+0x1be>
 8009f9a:	6019      	str	r1, [r3, #0]
 8009f9c:	e002      	b.n	8009fa4 <_printf_i+0x1c4>
 8009f9e:	0668      	lsls	r0, r5, #25
 8009fa0:	d5fb      	bpl.n	8009f9a <_printf_i+0x1ba>
 8009fa2:	8019      	strh	r1, [r3, #0]
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	6123      	str	r3, [r4, #16]
 8009fa8:	4616      	mov	r6, r2
 8009faa:	e7bc      	b.n	8009f26 <_printf_i+0x146>
 8009fac:	6833      	ldr	r3, [r6, #0]
 8009fae:	1d1a      	adds	r2, r3, #4
 8009fb0:	6032      	str	r2, [r6, #0]
 8009fb2:	681e      	ldr	r6, [r3, #0]
 8009fb4:	6862      	ldr	r2, [r4, #4]
 8009fb6:	2100      	movs	r1, #0
 8009fb8:	4630      	mov	r0, r6
 8009fba:	f7f6 f991 	bl	80002e0 <memchr>
 8009fbe:	b108      	cbz	r0, 8009fc4 <_printf_i+0x1e4>
 8009fc0:	1b80      	subs	r0, r0, r6
 8009fc2:	6060      	str	r0, [r4, #4]
 8009fc4:	6863      	ldr	r3, [r4, #4]
 8009fc6:	6123      	str	r3, [r4, #16]
 8009fc8:	2300      	movs	r3, #0
 8009fca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009fce:	e7aa      	b.n	8009f26 <_printf_i+0x146>
 8009fd0:	6923      	ldr	r3, [r4, #16]
 8009fd2:	4632      	mov	r2, r6
 8009fd4:	4649      	mov	r1, r9
 8009fd6:	4640      	mov	r0, r8
 8009fd8:	47d0      	blx	sl
 8009fda:	3001      	adds	r0, #1
 8009fdc:	d0ad      	beq.n	8009f3a <_printf_i+0x15a>
 8009fde:	6823      	ldr	r3, [r4, #0]
 8009fe0:	079b      	lsls	r3, r3, #30
 8009fe2:	d413      	bmi.n	800a00c <_printf_i+0x22c>
 8009fe4:	68e0      	ldr	r0, [r4, #12]
 8009fe6:	9b03      	ldr	r3, [sp, #12]
 8009fe8:	4298      	cmp	r0, r3
 8009fea:	bfb8      	it	lt
 8009fec:	4618      	movlt	r0, r3
 8009fee:	e7a6      	b.n	8009f3e <_printf_i+0x15e>
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	4632      	mov	r2, r6
 8009ff4:	4649      	mov	r1, r9
 8009ff6:	4640      	mov	r0, r8
 8009ff8:	47d0      	blx	sl
 8009ffa:	3001      	adds	r0, #1
 8009ffc:	d09d      	beq.n	8009f3a <_printf_i+0x15a>
 8009ffe:	3501      	adds	r5, #1
 800a000:	68e3      	ldr	r3, [r4, #12]
 800a002:	9903      	ldr	r1, [sp, #12]
 800a004:	1a5b      	subs	r3, r3, r1
 800a006:	42ab      	cmp	r3, r5
 800a008:	dcf2      	bgt.n	8009ff0 <_printf_i+0x210>
 800a00a:	e7eb      	b.n	8009fe4 <_printf_i+0x204>
 800a00c:	2500      	movs	r5, #0
 800a00e:	f104 0619 	add.w	r6, r4, #25
 800a012:	e7f5      	b.n	800a000 <_printf_i+0x220>
 800a014:	0800debd 	.word	0x0800debd
 800a018:	0800dece 	.word	0x0800dece

0800a01c <__sflush_r>:
 800a01c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a024:	0716      	lsls	r6, r2, #28
 800a026:	4605      	mov	r5, r0
 800a028:	460c      	mov	r4, r1
 800a02a:	d454      	bmi.n	800a0d6 <__sflush_r+0xba>
 800a02c:	684b      	ldr	r3, [r1, #4]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	dc02      	bgt.n	800a038 <__sflush_r+0x1c>
 800a032:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a034:	2b00      	cmp	r3, #0
 800a036:	dd48      	ble.n	800a0ca <__sflush_r+0xae>
 800a038:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a03a:	2e00      	cmp	r6, #0
 800a03c:	d045      	beq.n	800a0ca <__sflush_r+0xae>
 800a03e:	2300      	movs	r3, #0
 800a040:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a044:	682f      	ldr	r7, [r5, #0]
 800a046:	6a21      	ldr	r1, [r4, #32]
 800a048:	602b      	str	r3, [r5, #0]
 800a04a:	d030      	beq.n	800a0ae <__sflush_r+0x92>
 800a04c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a04e:	89a3      	ldrh	r3, [r4, #12]
 800a050:	0759      	lsls	r1, r3, #29
 800a052:	d505      	bpl.n	800a060 <__sflush_r+0x44>
 800a054:	6863      	ldr	r3, [r4, #4]
 800a056:	1ad2      	subs	r2, r2, r3
 800a058:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a05a:	b10b      	cbz	r3, 800a060 <__sflush_r+0x44>
 800a05c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a05e:	1ad2      	subs	r2, r2, r3
 800a060:	2300      	movs	r3, #0
 800a062:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a064:	6a21      	ldr	r1, [r4, #32]
 800a066:	4628      	mov	r0, r5
 800a068:	47b0      	blx	r6
 800a06a:	1c43      	adds	r3, r0, #1
 800a06c:	89a3      	ldrh	r3, [r4, #12]
 800a06e:	d106      	bne.n	800a07e <__sflush_r+0x62>
 800a070:	6829      	ldr	r1, [r5, #0]
 800a072:	291d      	cmp	r1, #29
 800a074:	d82b      	bhi.n	800a0ce <__sflush_r+0xb2>
 800a076:	4a2a      	ldr	r2, [pc, #168]	@ (800a120 <__sflush_r+0x104>)
 800a078:	40ca      	lsrs	r2, r1
 800a07a:	07d6      	lsls	r6, r2, #31
 800a07c:	d527      	bpl.n	800a0ce <__sflush_r+0xb2>
 800a07e:	2200      	movs	r2, #0
 800a080:	6062      	str	r2, [r4, #4]
 800a082:	04d9      	lsls	r1, r3, #19
 800a084:	6922      	ldr	r2, [r4, #16]
 800a086:	6022      	str	r2, [r4, #0]
 800a088:	d504      	bpl.n	800a094 <__sflush_r+0x78>
 800a08a:	1c42      	adds	r2, r0, #1
 800a08c:	d101      	bne.n	800a092 <__sflush_r+0x76>
 800a08e:	682b      	ldr	r3, [r5, #0]
 800a090:	b903      	cbnz	r3, 800a094 <__sflush_r+0x78>
 800a092:	6560      	str	r0, [r4, #84]	@ 0x54
 800a094:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a096:	602f      	str	r7, [r5, #0]
 800a098:	b1b9      	cbz	r1, 800a0ca <__sflush_r+0xae>
 800a09a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a09e:	4299      	cmp	r1, r3
 800a0a0:	d002      	beq.n	800a0a8 <__sflush_r+0x8c>
 800a0a2:	4628      	mov	r0, r5
 800a0a4:	f7ff fbf4 	bl	8009890 <_free_r>
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	6363      	str	r3, [r4, #52]	@ 0x34
 800a0ac:	e00d      	b.n	800a0ca <__sflush_r+0xae>
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	4628      	mov	r0, r5
 800a0b2:	47b0      	blx	r6
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	1c50      	adds	r0, r2, #1
 800a0b8:	d1c9      	bne.n	800a04e <__sflush_r+0x32>
 800a0ba:	682b      	ldr	r3, [r5, #0]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d0c6      	beq.n	800a04e <__sflush_r+0x32>
 800a0c0:	2b1d      	cmp	r3, #29
 800a0c2:	d001      	beq.n	800a0c8 <__sflush_r+0xac>
 800a0c4:	2b16      	cmp	r3, #22
 800a0c6:	d11e      	bne.n	800a106 <__sflush_r+0xea>
 800a0c8:	602f      	str	r7, [r5, #0]
 800a0ca:	2000      	movs	r0, #0
 800a0cc:	e022      	b.n	800a114 <__sflush_r+0xf8>
 800a0ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0d2:	b21b      	sxth	r3, r3
 800a0d4:	e01b      	b.n	800a10e <__sflush_r+0xf2>
 800a0d6:	690f      	ldr	r7, [r1, #16]
 800a0d8:	2f00      	cmp	r7, #0
 800a0da:	d0f6      	beq.n	800a0ca <__sflush_r+0xae>
 800a0dc:	0793      	lsls	r3, r2, #30
 800a0de:	680e      	ldr	r6, [r1, #0]
 800a0e0:	bf08      	it	eq
 800a0e2:	694b      	ldreq	r3, [r1, #20]
 800a0e4:	600f      	str	r7, [r1, #0]
 800a0e6:	bf18      	it	ne
 800a0e8:	2300      	movne	r3, #0
 800a0ea:	eba6 0807 	sub.w	r8, r6, r7
 800a0ee:	608b      	str	r3, [r1, #8]
 800a0f0:	f1b8 0f00 	cmp.w	r8, #0
 800a0f4:	dde9      	ble.n	800a0ca <__sflush_r+0xae>
 800a0f6:	6a21      	ldr	r1, [r4, #32]
 800a0f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a0fa:	4643      	mov	r3, r8
 800a0fc:	463a      	mov	r2, r7
 800a0fe:	4628      	mov	r0, r5
 800a100:	47b0      	blx	r6
 800a102:	2800      	cmp	r0, #0
 800a104:	dc08      	bgt.n	800a118 <__sflush_r+0xfc>
 800a106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a10a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a10e:	81a3      	strh	r3, [r4, #12]
 800a110:	f04f 30ff 	mov.w	r0, #4294967295
 800a114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a118:	4407      	add	r7, r0
 800a11a:	eba8 0800 	sub.w	r8, r8, r0
 800a11e:	e7e7      	b.n	800a0f0 <__sflush_r+0xd4>
 800a120:	20400001 	.word	0x20400001

0800a124 <_fflush_r>:
 800a124:	b538      	push	{r3, r4, r5, lr}
 800a126:	690b      	ldr	r3, [r1, #16]
 800a128:	4605      	mov	r5, r0
 800a12a:	460c      	mov	r4, r1
 800a12c:	b913      	cbnz	r3, 800a134 <_fflush_r+0x10>
 800a12e:	2500      	movs	r5, #0
 800a130:	4628      	mov	r0, r5
 800a132:	bd38      	pop	{r3, r4, r5, pc}
 800a134:	b118      	cbz	r0, 800a13e <_fflush_r+0x1a>
 800a136:	6a03      	ldr	r3, [r0, #32]
 800a138:	b90b      	cbnz	r3, 800a13e <_fflush_r+0x1a>
 800a13a:	f7ff faa1 	bl	8009680 <__sinit>
 800a13e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d0f3      	beq.n	800a12e <_fflush_r+0xa>
 800a146:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a148:	07d0      	lsls	r0, r2, #31
 800a14a:	d404      	bmi.n	800a156 <_fflush_r+0x32>
 800a14c:	0599      	lsls	r1, r3, #22
 800a14e:	d402      	bmi.n	800a156 <_fflush_r+0x32>
 800a150:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a152:	f7ff fb9a 	bl	800988a <__retarget_lock_acquire_recursive>
 800a156:	4628      	mov	r0, r5
 800a158:	4621      	mov	r1, r4
 800a15a:	f7ff ff5f 	bl	800a01c <__sflush_r>
 800a15e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a160:	07da      	lsls	r2, r3, #31
 800a162:	4605      	mov	r5, r0
 800a164:	d4e4      	bmi.n	800a130 <_fflush_r+0xc>
 800a166:	89a3      	ldrh	r3, [r4, #12]
 800a168:	059b      	lsls	r3, r3, #22
 800a16a:	d4e1      	bmi.n	800a130 <_fflush_r+0xc>
 800a16c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a16e:	f7ff fb8d 	bl	800988c <__retarget_lock_release_recursive>
 800a172:	e7dd      	b.n	800a130 <_fflush_r+0xc>

0800a174 <__swbuf_r>:
 800a174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a176:	460e      	mov	r6, r1
 800a178:	4614      	mov	r4, r2
 800a17a:	4605      	mov	r5, r0
 800a17c:	b118      	cbz	r0, 800a186 <__swbuf_r+0x12>
 800a17e:	6a03      	ldr	r3, [r0, #32]
 800a180:	b90b      	cbnz	r3, 800a186 <__swbuf_r+0x12>
 800a182:	f7ff fa7d 	bl	8009680 <__sinit>
 800a186:	69a3      	ldr	r3, [r4, #24]
 800a188:	60a3      	str	r3, [r4, #8]
 800a18a:	89a3      	ldrh	r3, [r4, #12]
 800a18c:	071a      	lsls	r2, r3, #28
 800a18e:	d501      	bpl.n	800a194 <__swbuf_r+0x20>
 800a190:	6923      	ldr	r3, [r4, #16]
 800a192:	b943      	cbnz	r3, 800a1a6 <__swbuf_r+0x32>
 800a194:	4621      	mov	r1, r4
 800a196:	4628      	mov	r0, r5
 800a198:	f000 f82a 	bl	800a1f0 <__swsetup_r>
 800a19c:	b118      	cbz	r0, 800a1a6 <__swbuf_r+0x32>
 800a19e:	f04f 37ff 	mov.w	r7, #4294967295
 800a1a2:	4638      	mov	r0, r7
 800a1a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1a6:	6823      	ldr	r3, [r4, #0]
 800a1a8:	6922      	ldr	r2, [r4, #16]
 800a1aa:	1a98      	subs	r0, r3, r2
 800a1ac:	6963      	ldr	r3, [r4, #20]
 800a1ae:	b2f6      	uxtb	r6, r6
 800a1b0:	4283      	cmp	r3, r0
 800a1b2:	4637      	mov	r7, r6
 800a1b4:	dc05      	bgt.n	800a1c2 <__swbuf_r+0x4e>
 800a1b6:	4621      	mov	r1, r4
 800a1b8:	4628      	mov	r0, r5
 800a1ba:	f7ff ffb3 	bl	800a124 <_fflush_r>
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	d1ed      	bne.n	800a19e <__swbuf_r+0x2a>
 800a1c2:	68a3      	ldr	r3, [r4, #8]
 800a1c4:	3b01      	subs	r3, #1
 800a1c6:	60a3      	str	r3, [r4, #8]
 800a1c8:	6823      	ldr	r3, [r4, #0]
 800a1ca:	1c5a      	adds	r2, r3, #1
 800a1cc:	6022      	str	r2, [r4, #0]
 800a1ce:	701e      	strb	r6, [r3, #0]
 800a1d0:	6962      	ldr	r2, [r4, #20]
 800a1d2:	1c43      	adds	r3, r0, #1
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d004      	beq.n	800a1e2 <__swbuf_r+0x6e>
 800a1d8:	89a3      	ldrh	r3, [r4, #12]
 800a1da:	07db      	lsls	r3, r3, #31
 800a1dc:	d5e1      	bpl.n	800a1a2 <__swbuf_r+0x2e>
 800a1de:	2e0a      	cmp	r6, #10
 800a1e0:	d1df      	bne.n	800a1a2 <__swbuf_r+0x2e>
 800a1e2:	4621      	mov	r1, r4
 800a1e4:	4628      	mov	r0, r5
 800a1e6:	f7ff ff9d 	bl	800a124 <_fflush_r>
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	d0d9      	beq.n	800a1a2 <__swbuf_r+0x2e>
 800a1ee:	e7d6      	b.n	800a19e <__swbuf_r+0x2a>

0800a1f0 <__swsetup_r>:
 800a1f0:	b538      	push	{r3, r4, r5, lr}
 800a1f2:	4b29      	ldr	r3, [pc, #164]	@ (800a298 <__swsetup_r+0xa8>)
 800a1f4:	4605      	mov	r5, r0
 800a1f6:	6818      	ldr	r0, [r3, #0]
 800a1f8:	460c      	mov	r4, r1
 800a1fa:	b118      	cbz	r0, 800a204 <__swsetup_r+0x14>
 800a1fc:	6a03      	ldr	r3, [r0, #32]
 800a1fe:	b90b      	cbnz	r3, 800a204 <__swsetup_r+0x14>
 800a200:	f7ff fa3e 	bl	8009680 <__sinit>
 800a204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a208:	0719      	lsls	r1, r3, #28
 800a20a:	d422      	bmi.n	800a252 <__swsetup_r+0x62>
 800a20c:	06da      	lsls	r2, r3, #27
 800a20e:	d407      	bmi.n	800a220 <__swsetup_r+0x30>
 800a210:	2209      	movs	r2, #9
 800a212:	602a      	str	r2, [r5, #0]
 800a214:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a218:	81a3      	strh	r3, [r4, #12]
 800a21a:	f04f 30ff 	mov.w	r0, #4294967295
 800a21e:	e033      	b.n	800a288 <__swsetup_r+0x98>
 800a220:	0758      	lsls	r0, r3, #29
 800a222:	d512      	bpl.n	800a24a <__swsetup_r+0x5a>
 800a224:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a226:	b141      	cbz	r1, 800a23a <__swsetup_r+0x4a>
 800a228:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a22c:	4299      	cmp	r1, r3
 800a22e:	d002      	beq.n	800a236 <__swsetup_r+0x46>
 800a230:	4628      	mov	r0, r5
 800a232:	f7ff fb2d 	bl	8009890 <_free_r>
 800a236:	2300      	movs	r3, #0
 800a238:	6363      	str	r3, [r4, #52]	@ 0x34
 800a23a:	89a3      	ldrh	r3, [r4, #12]
 800a23c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a240:	81a3      	strh	r3, [r4, #12]
 800a242:	2300      	movs	r3, #0
 800a244:	6063      	str	r3, [r4, #4]
 800a246:	6923      	ldr	r3, [r4, #16]
 800a248:	6023      	str	r3, [r4, #0]
 800a24a:	89a3      	ldrh	r3, [r4, #12]
 800a24c:	f043 0308 	orr.w	r3, r3, #8
 800a250:	81a3      	strh	r3, [r4, #12]
 800a252:	6923      	ldr	r3, [r4, #16]
 800a254:	b94b      	cbnz	r3, 800a26a <__swsetup_r+0x7a>
 800a256:	89a3      	ldrh	r3, [r4, #12]
 800a258:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a25c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a260:	d003      	beq.n	800a26a <__swsetup_r+0x7a>
 800a262:	4621      	mov	r1, r4
 800a264:	4628      	mov	r0, r5
 800a266:	f000 f84f 	bl	800a308 <__smakebuf_r>
 800a26a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a26e:	f013 0201 	ands.w	r2, r3, #1
 800a272:	d00a      	beq.n	800a28a <__swsetup_r+0x9a>
 800a274:	2200      	movs	r2, #0
 800a276:	60a2      	str	r2, [r4, #8]
 800a278:	6962      	ldr	r2, [r4, #20]
 800a27a:	4252      	negs	r2, r2
 800a27c:	61a2      	str	r2, [r4, #24]
 800a27e:	6922      	ldr	r2, [r4, #16]
 800a280:	b942      	cbnz	r2, 800a294 <__swsetup_r+0xa4>
 800a282:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a286:	d1c5      	bne.n	800a214 <__swsetup_r+0x24>
 800a288:	bd38      	pop	{r3, r4, r5, pc}
 800a28a:	0799      	lsls	r1, r3, #30
 800a28c:	bf58      	it	pl
 800a28e:	6962      	ldrpl	r2, [r4, #20]
 800a290:	60a2      	str	r2, [r4, #8]
 800a292:	e7f4      	b.n	800a27e <__swsetup_r+0x8e>
 800a294:	2000      	movs	r0, #0
 800a296:	e7f7      	b.n	800a288 <__swsetup_r+0x98>
 800a298:	24000038 	.word	0x24000038

0800a29c <_sbrk_r>:
 800a29c:	b538      	push	{r3, r4, r5, lr}
 800a29e:	4d06      	ldr	r5, [pc, #24]	@ (800a2b8 <_sbrk_r+0x1c>)
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	4604      	mov	r4, r0
 800a2a4:	4608      	mov	r0, r1
 800a2a6:	602b      	str	r3, [r5, #0]
 800a2a8:	f7f8 ff7a 	bl	80031a0 <_sbrk>
 800a2ac:	1c43      	adds	r3, r0, #1
 800a2ae:	d102      	bne.n	800a2b6 <_sbrk_r+0x1a>
 800a2b0:	682b      	ldr	r3, [r5, #0]
 800a2b2:	b103      	cbz	r3, 800a2b6 <_sbrk_r+0x1a>
 800a2b4:	6023      	str	r3, [r4, #0]
 800a2b6:	bd38      	pop	{r3, r4, r5, pc}
 800a2b8:	24000324 	.word	0x24000324

0800a2bc <__swhatbuf_r>:
 800a2bc:	b570      	push	{r4, r5, r6, lr}
 800a2be:	460c      	mov	r4, r1
 800a2c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2c4:	2900      	cmp	r1, #0
 800a2c6:	b096      	sub	sp, #88	@ 0x58
 800a2c8:	4615      	mov	r5, r2
 800a2ca:	461e      	mov	r6, r3
 800a2cc:	da0d      	bge.n	800a2ea <__swhatbuf_r+0x2e>
 800a2ce:	89a3      	ldrh	r3, [r4, #12]
 800a2d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a2d4:	f04f 0100 	mov.w	r1, #0
 800a2d8:	bf14      	ite	ne
 800a2da:	2340      	movne	r3, #64	@ 0x40
 800a2dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a2e0:	2000      	movs	r0, #0
 800a2e2:	6031      	str	r1, [r6, #0]
 800a2e4:	602b      	str	r3, [r5, #0]
 800a2e6:	b016      	add	sp, #88	@ 0x58
 800a2e8:	bd70      	pop	{r4, r5, r6, pc}
 800a2ea:	466a      	mov	r2, sp
 800a2ec:	f000 f848 	bl	800a380 <_fstat_r>
 800a2f0:	2800      	cmp	r0, #0
 800a2f2:	dbec      	blt.n	800a2ce <__swhatbuf_r+0x12>
 800a2f4:	9901      	ldr	r1, [sp, #4]
 800a2f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a2fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a2fe:	4259      	negs	r1, r3
 800a300:	4159      	adcs	r1, r3
 800a302:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a306:	e7eb      	b.n	800a2e0 <__swhatbuf_r+0x24>

0800a308 <__smakebuf_r>:
 800a308:	898b      	ldrh	r3, [r1, #12]
 800a30a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a30c:	079d      	lsls	r5, r3, #30
 800a30e:	4606      	mov	r6, r0
 800a310:	460c      	mov	r4, r1
 800a312:	d507      	bpl.n	800a324 <__smakebuf_r+0x1c>
 800a314:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a318:	6023      	str	r3, [r4, #0]
 800a31a:	6123      	str	r3, [r4, #16]
 800a31c:	2301      	movs	r3, #1
 800a31e:	6163      	str	r3, [r4, #20]
 800a320:	b003      	add	sp, #12
 800a322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a324:	ab01      	add	r3, sp, #4
 800a326:	466a      	mov	r2, sp
 800a328:	f7ff ffc8 	bl	800a2bc <__swhatbuf_r>
 800a32c:	9f00      	ldr	r7, [sp, #0]
 800a32e:	4605      	mov	r5, r0
 800a330:	4639      	mov	r1, r7
 800a332:	4630      	mov	r0, r6
 800a334:	f7ff fb18 	bl	8009968 <_malloc_r>
 800a338:	b948      	cbnz	r0, 800a34e <__smakebuf_r+0x46>
 800a33a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a33e:	059a      	lsls	r2, r3, #22
 800a340:	d4ee      	bmi.n	800a320 <__smakebuf_r+0x18>
 800a342:	f023 0303 	bic.w	r3, r3, #3
 800a346:	f043 0302 	orr.w	r3, r3, #2
 800a34a:	81a3      	strh	r3, [r4, #12]
 800a34c:	e7e2      	b.n	800a314 <__smakebuf_r+0xc>
 800a34e:	89a3      	ldrh	r3, [r4, #12]
 800a350:	6020      	str	r0, [r4, #0]
 800a352:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a356:	81a3      	strh	r3, [r4, #12]
 800a358:	9b01      	ldr	r3, [sp, #4]
 800a35a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a35e:	b15b      	cbz	r3, 800a378 <__smakebuf_r+0x70>
 800a360:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a364:	4630      	mov	r0, r6
 800a366:	f000 f81d 	bl	800a3a4 <_isatty_r>
 800a36a:	b128      	cbz	r0, 800a378 <__smakebuf_r+0x70>
 800a36c:	89a3      	ldrh	r3, [r4, #12]
 800a36e:	f023 0303 	bic.w	r3, r3, #3
 800a372:	f043 0301 	orr.w	r3, r3, #1
 800a376:	81a3      	strh	r3, [r4, #12]
 800a378:	89a3      	ldrh	r3, [r4, #12]
 800a37a:	431d      	orrs	r5, r3
 800a37c:	81a5      	strh	r5, [r4, #12]
 800a37e:	e7cf      	b.n	800a320 <__smakebuf_r+0x18>

0800a380 <_fstat_r>:
 800a380:	b538      	push	{r3, r4, r5, lr}
 800a382:	4d07      	ldr	r5, [pc, #28]	@ (800a3a0 <_fstat_r+0x20>)
 800a384:	2300      	movs	r3, #0
 800a386:	4604      	mov	r4, r0
 800a388:	4608      	mov	r0, r1
 800a38a:	4611      	mov	r1, r2
 800a38c:	602b      	str	r3, [r5, #0]
 800a38e:	f7f8 fedf 	bl	8003150 <_fstat>
 800a392:	1c43      	adds	r3, r0, #1
 800a394:	d102      	bne.n	800a39c <_fstat_r+0x1c>
 800a396:	682b      	ldr	r3, [r5, #0]
 800a398:	b103      	cbz	r3, 800a39c <_fstat_r+0x1c>
 800a39a:	6023      	str	r3, [r4, #0]
 800a39c:	bd38      	pop	{r3, r4, r5, pc}
 800a39e:	bf00      	nop
 800a3a0:	24000324 	.word	0x24000324

0800a3a4 <_isatty_r>:
 800a3a4:	b538      	push	{r3, r4, r5, lr}
 800a3a6:	4d06      	ldr	r5, [pc, #24]	@ (800a3c0 <_isatty_r+0x1c>)
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	4604      	mov	r4, r0
 800a3ac:	4608      	mov	r0, r1
 800a3ae:	602b      	str	r3, [r5, #0]
 800a3b0:	f7f8 fede 	bl	8003170 <_isatty>
 800a3b4:	1c43      	adds	r3, r0, #1
 800a3b6:	d102      	bne.n	800a3be <_isatty_r+0x1a>
 800a3b8:	682b      	ldr	r3, [r5, #0]
 800a3ba:	b103      	cbz	r3, 800a3be <_isatty_r+0x1a>
 800a3bc:	6023      	str	r3, [r4, #0]
 800a3be:	bd38      	pop	{r3, r4, r5, pc}
 800a3c0:	24000324 	.word	0x24000324

0800a3c4 <_init>:
 800a3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3c6:	bf00      	nop
 800a3c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3ca:	bc08      	pop	{r3}
 800a3cc:	469e      	mov	lr, r3
 800a3ce:	4770      	bx	lr

0800a3d0 <_fini>:
 800a3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3d2:	bf00      	nop
 800a3d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3d6:	bc08      	pop	{r3}
 800a3d8:	469e      	mov	lr, r3
 800a3da:	4770      	bx	lr
