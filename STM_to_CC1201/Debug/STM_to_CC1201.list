
STM_to_CC1201.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cdc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020e8  08008f7c  08008f7c  00009f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b064  0800b064  0000c064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b06c  0800b06c  0000c06c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b070  0800b070  0000c070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  24000000  0800b074  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002ac  24000088  0800b0fc  0000d088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000334  0800b0fc  0000d334  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d088  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015c25  00000000  00000000  0000d0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002ca0  00000000  00000000  00022cdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f18  00000000  00000000  00025980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b8f  00000000  00000000  00026898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000384e5  00000000  00000000  00027427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016480  00000000  00000000  0005f90c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015eee1  00000000  00000000  00075d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d4c6d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000045b0  00000000  00000000  001d4cb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000051  00000000  00000000  001d9260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008f64 	.word	0x08008f64

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	08008f64 	.word	0x08008f64

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <CC1201_Nop>:
{
    return CC1201_SendStrobe(CC1201_STROBE_WOR_RESET, status_byte);
}

HAL_StatusTypeDef CC1201_Nop(uint8_t *status_byte)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    printf("[DEBUG] Entered CC1201_Nop function\n\r");
 80006b4:	4809      	ldr	r0, [pc, #36]	@ (80006dc <CC1201_Nop+0x30>)
 80006b6:	f007 fde9 	bl	800828c <iprintf>
    HAL_StatusTypeDef result = CC1201_SendStrobe(CC1201_STROBE_NOP, status_byte);
 80006ba:	6879      	ldr	r1, [r7, #4]
 80006bc:	203d      	movs	r0, #61	@ 0x3d
 80006be:	f000 f811 	bl	80006e4 <CC1201_SendStrobe>
 80006c2:	4603      	mov	r3, r0
 80006c4:	73fb      	strb	r3, [r7, #15]
    printf("[DEBUG] CC1201_Nop about to return: %d\n\r", result);
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	4619      	mov	r1, r3
 80006ca:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <CC1201_Nop+0x34>)
 80006cc:	f007 fdde 	bl	800828c <iprintf>
    return result;
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	08008fd8 	.word	0x08008fd8
 80006e0:	08009000 	.word	0x08009000

080006e4 <CC1201_SendStrobe>:
 * @param status_byte Pointer to a uint8_t where the status byte received from the CC1201 will be stored.
 *                    Can be NULL if the status byte is not needed.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_SendStrobe(uint8_t strobe_command, uint8_t *status_byte)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af02      	add	r7, sp, #8
 80006ea:	4603      	mov	r3, r0
 80006ec:	6039      	str	r1, [r7, #0]
 80006ee:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;
    uint8_t rx_data;

    printf("    [DEBUG] SendStrobe called with command 0x%02X\n\r", strobe_command);
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	4619      	mov	r1, r3
 80006f4:	485d      	ldr	r0, [pc, #372]	@ (800086c <CC1201_SendStrobe+0x188>)
 80006f6:	f007 fdc9 	bl	800828c <iprintf>

    // Debug: Check CS pin before transaction
    printf("  Strobe 0x%02X: CS before=", strobe_command);
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	4619      	mov	r1, r3
 80006fe:	485c      	ldr	r0, [pc, #368]	@ (8000870 <CC1201_SendStrobe+0x18c>)
 8000700:	f007 fdc4 	bl	800828c <iprintf>
    printf("%s", HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN) == GPIO_PIN_SET ? "HIGH" : "LOW");
 8000704:	2110      	movs	r1, #16
 8000706:	485b      	ldr	r0, [pc, #364]	@ (8000874 <CC1201_SendStrobe+0x190>)
 8000708:	f002 fa0a 	bl	8002b20 <HAL_GPIO_ReadPin>
 800070c:	4603      	mov	r3, r0
 800070e:	2b01      	cmp	r3, #1
 8000710:	d101      	bne.n	8000716 <CC1201_SendStrobe+0x32>
 8000712:	4b59      	ldr	r3, [pc, #356]	@ (8000878 <CC1201_SendStrobe+0x194>)
 8000714:	e000      	b.n	8000718 <CC1201_SendStrobe+0x34>
 8000716:	4b59      	ldr	r3, [pc, #356]	@ (800087c <CC1201_SendStrobe+0x198>)
 8000718:	4619      	mov	r1, r3
 800071a:	4859      	ldr	r0, [pc, #356]	@ (8000880 <CC1201_SendStrobe+0x19c>)
 800071c:	f007 fdb6 	bl	800828c <iprintf>

    printf("    [DEBUG] About to pull CS low...\n\r");
 8000720:	4858      	ldr	r0, [pc, #352]	@ (8000884 <CC1201_SendStrobe+0x1a0>)
 8000722:	f007 fdb3 	bl	800828c <iprintf>
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 8000726:	2200      	movs	r2, #0
 8000728:	2110      	movs	r1, #16
 800072a:	4852      	ldr	r0, [pc, #328]	@ (8000874 <CC1201_SendStrobe+0x190>)
 800072c:	f002 fa10 	bl	8002b50 <HAL_GPIO_WritePin>
    
    // Debug: Check CS pin during transaction
    printf(", CS during=");
 8000730:	4855      	ldr	r0, [pc, #340]	@ (8000888 <CC1201_SendStrobe+0x1a4>)
 8000732:	f007 fdab 	bl	800828c <iprintf>
    printf("%s", HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN) == GPIO_PIN_SET ? "HIGH" : "LOW");
 8000736:	2110      	movs	r1, #16
 8000738:	484e      	ldr	r0, [pc, #312]	@ (8000874 <CC1201_SendStrobe+0x190>)
 800073a:	f002 f9f1 	bl	8002b20 <HAL_GPIO_ReadPin>
 800073e:	4603      	mov	r3, r0
 8000740:	2b01      	cmp	r3, #1
 8000742:	d101      	bne.n	8000748 <CC1201_SendStrobe+0x64>
 8000744:	4b4c      	ldr	r3, [pc, #304]	@ (8000878 <CC1201_SendStrobe+0x194>)
 8000746:	e000      	b.n	800074a <CC1201_SendStrobe+0x66>
 8000748:	4b4c      	ldr	r3, [pc, #304]	@ (800087c <CC1201_SendStrobe+0x198>)
 800074a:	4619      	mov	r1, r3
 800074c:	484c      	ldr	r0, [pc, #304]	@ (8000880 <CC1201_SendStrobe+0x19c>)
 800074e:	f007 fd9d 	bl	800828c <iprintf>
    
    printf("    [DEBUG] About to start SPI transaction...\n\r");
 8000752:	484e      	ldr	r0, [pc, #312]	@ (800088c <CC1201_SendStrobe+0x1a8>)
 8000754:	f007 fd9a 	bl	800828c <iprintf>
    
    // Check SPI configuration before transaction
    printf("    [SPI DEBUG] SPI2 Config: State=%d, Mode=%lu, DataSize=%lu\n\r", 
           CC1201_SPI_HANDLE.State, 
 8000758:	4b4d      	ldr	r3, [pc, #308]	@ (8000890 <CC1201_SendStrobe+0x1ac>)
 800075a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800075e:	b2db      	uxtb	r3, r3
    printf("    [SPI DEBUG] SPI2 Config: State=%d, Mode=%lu, DataSize=%lu\n\r", 
 8000760:	4619      	mov	r1, r3
 8000762:	4b4b      	ldr	r3, [pc, #300]	@ (8000890 <CC1201_SendStrobe+0x1ac>)
 8000764:	685a      	ldr	r2, [r3, #4]
 8000766:	4b4a      	ldr	r3, [pc, #296]	@ (8000890 <CC1201_SendStrobe+0x1ac>)
 8000768:	68db      	ldr	r3, [r3, #12]
 800076a:	484a      	ldr	r0, [pc, #296]	@ (8000894 <CC1201_SendStrobe+0x1b0>)
 800076c:	f007 fd8e 	bl	800828c <iprintf>
           CC1201_SPI_HANDLE.Init.Mode,
           CC1201_SPI_HANDLE.Init.DataSize);
    printf("    [SPI DEBUG] BaudRate=%lu, CPOL=%lu, CPHA=%lu\n\r",
 8000770:	4b47      	ldr	r3, [pc, #284]	@ (8000890 <CC1201_SendStrobe+0x1ac>)
 8000772:	69d9      	ldr	r1, [r3, #28]
 8000774:	4b46      	ldr	r3, [pc, #280]	@ (8000890 <CC1201_SendStrobe+0x1ac>)
 8000776:	691a      	ldr	r2, [r3, #16]
 8000778:	4b45      	ldr	r3, [pc, #276]	@ (8000890 <CC1201_SendStrobe+0x1ac>)
 800077a:	695b      	ldr	r3, [r3, #20]
 800077c:	4846      	ldr	r0, [pc, #280]	@ (8000898 <CC1201_SendStrobe+0x1b4>)
 800077e:	f007 fd85 	bl	800828c <iprintf>
           CC1201_SPI_HANDLE.Init.BaudRatePrescaler,
           CC1201_SPI_HANDLE.Init.CLKPolarity,
           CC1201_SPI_HANDLE.Init.CLKPhase);
    
    // Small delay to ensure CS is stable
    HAL_Delay(1);
 8000782:	2001      	movs	r0, #1
 8000784:	f001 fa7e 	bl	8001c84 <HAL_Delay>

    // Use even shorter timeout to avoid long waits
    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, &strobe_command, &rx_data, 1, 100); // 100ms timeout
 8000788:	f107 020e 	add.w	r2, r7, #14
 800078c:	1df9      	adds	r1, r7, #7
 800078e:	2364      	movs	r3, #100	@ 0x64
 8000790:	9300      	str	r3, [sp, #0]
 8000792:	2301      	movs	r3, #1
 8000794:	483e      	ldr	r0, [pc, #248]	@ (8000890 <CC1201_SendStrobe+0x1ac>)
 8000796:	f005 fe09 	bl	80063ac <HAL_SPI_TransmitReceive>
 800079a:	4603      	mov	r3, r0
 800079c:	73fb      	strb	r3, [r7, #15]
    
    printf("    [DEBUG] SPI transaction returned with status: %d\n\r", status);
 800079e:	7bfb      	ldrb	r3, [r7, #15]
 80007a0:	4619      	mov	r1, r3
 80007a2:	483e      	ldr	r0, [pc, #248]	@ (800089c <CC1201_SendStrobe+0x1b8>)
 80007a4:	f007 fd72 	bl	800828c <iprintf>
    
    // If TransmitReceive failed, try separate transmit and receive
    if (status != HAL_OK) {
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d023      	beq.n	80007f6 <CC1201_SendStrobe+0x112>
        printf("    [DEBUG] Trying separate TX/RX...\n\r");
 80007ae:	483c      	ldr	r0, [pc, #240]	@ (80008a0 <CC1201_SendStrobe+0x1bc>)
 80007b0:	f007 fd6c 	bl	800828c <iprintf>
        rx_data = 0x00; // Reset rx_data
 80007b4:	2300      	movs	r3, #0
 80007b6:	73bb      	strb	r3, [r7, #14]
        
        status = HAL_SPI_Transmit(&CC1201_SPI_HANDLE, &strobe_command, 1, 100);
 80007b8:	1df9      	adds	r1, r7, #7
 80007ba:	2364      	movs	r3, #100	@ 0x64
 80007bc:	2201      	movs	r2, #1
 80007be:	4834      	ldr	r0, [pc, #208]	@ (8000890 <CC1201_SendStrobe+0x1ac>)
 80007c0:	f005 f994 	bl	8005aec <HAL_SPI_Transmit>
 80007c4:	4603      	mov	r3, r0
 80007c6:	73fb      	strb	r3, [r7, #15]
        printf("    [DEBUG] SPI Transmit status: %d\n\r", status);
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	4619      	mov	r1, r3
 80007cc:	4835      	ldr	r0, [pc, #212]	@ (80008a4 <CC1201_SendStrobe+0x1c0>)
 80007ce:	f007 fd5d 	bl	800828c <iprintf>
        
        if (status == HAL_OK) {
 80007d2:	7bfb      	ldrb	r3, [r7, #15]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d10e      	bne.n	80007f6 <CC1201_SendStrobe+0x112>
            status = HAL_SPI_Receive(&CC1201_SPI_HANDLE, &rx_data, 1, 100);
 80007d8:	f107 010e 	add.w	r1, r7, #14
 80007dc:	2364      	movs	r3, #100	@ 0x64
 80007de:	2201      	movs	r2, #1
 80007e0:	482b      	ldr	r0, [pc, #172]	@ (8000890 <CC1201_SendStrobe+0x1ac>)
 80007e2:	f005 fb71 	bl	8005ec8 <HAL_SPI_Receive>
 80007e6:	4603      	mov	r3, r0
 80007e8:	73fb      	strb	r3, [r7, #15]
            printf("    [DEBUG] SPI Receive status: %d, RX: 0x%02X\n\r", status, rx_data);
 80007ea:	7bfb      	ldrb	r3, [r7, #15]
 80007ec:	7bba      	ldrb	r2, [r7, #14]
 80007ee:	4619      	mov	r1, r3
 80007f0:	482d      	ldr	r0, [pc, #180]	@ (80008a8 <CC1201_SendStrobe+0x1c4>)
 80007f2:	f007 fd4b 	bl	800828c <iprintf>
        }
    }
    
    if (status != HAL_OK) {
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d016      	beq.n	800082a <CC1201_SendStrobe+0x146>
        printf("    [ERROR] SPI transaction failed! Status: %d\n\r", status);
 80007fc:	7bfb      	ldrb	r3, [r7, #15]
 80007fe:	4619      	mov	r1, r3
 8000800:	482a      	ldr	r0, [pc, #168]	@ (80008ac <CC1201_SendStrobe+0x1c8>)
 8000802:	f007 fd43 	bl	800828c <iprintf>
        if (status == HAL_TIMEOUT) {
 8000806:	7bfb      	ldrb	r3, [r7, #15]
 8000808:	2b03      	cmp	r3, #3
 800080a:	d102      	bne.n	8000812 <CC1201_SendStrobe+0x12e>
            printf("    [ERROR] SPI TIMEOUT occurred!\n\r");
 800080c:	4828      	ldr	r0, [pc, #160]	@ (80008b0 <CC1201_SendStrobe+0x1cc>)
 800080e:	f007 fd3d 	bl	800828c <iprintf>
        }
        if (status == HAL_ERROR) {
 8000812:	7bfb      	ldrb	r3, [r7, #15]
 8000814:	2b01      	cmp	r3, #1
 8000816:	d102      	bne.n	800081e <CC1201_SendStrobe+0x13a>
            printf("    [ERROR] SPI ERROR occurred!\n\r");
 8000818:	4826      	ldr	r0, [pc, #152]	@ (80008b4 <CC1201_SendStrobe+0x1d0>)
 800081a:	f007 fd37 	bl	800828c <iprintf>
        }
        if (status == HAL_BUSY) {
 800081e:	7bfb      	ldrb	r3, [r7, #15]
 8000820:	2b02      	cmp	r3, #2
 8000822:	d102      	bne.n	800082a <CC1201_SendStrobe+0x146>
            printf("    [ERROR] SPI BUSY occurred!\n\r");
 8000824:	4824      	ldr	r0, [pc, #144]	@ (80008b8 <CC1201_SendStrobe+0x1d4>)
 8000826:	f007 fd31 	bl	800828c <iprintf>
        }
    }

    printf("    [DEBUG] SPI transaction complete, pulling CS high...\n\r");
 800082a:	4824      	ldr	r0, [pc, #144]	@ (80008bc <CC1201_SendStrobe+0x1d8>)
 800082c:	f007 fd2e 	bl	800828c <iprintf>
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 8000830:	2201      	movs	r2, #1
 8000832:	2110      	movs	r1, #16
 8000834:	480f      	ldr	r0, [pc, #60]	@ (8000874 <CC1201_SendStrobe+0x190>)
 8000836:	f002 f98b 	bl	8002b50 <HAL_GPIO_WritePin>

    // Debug output
    printf(", CS after=HIGH, RX=0x%02X, HAL=%d\n\r", rx_data, status);
 800083a:	7bbb      	ldrb	r3, [r7, #14]
 800083c:	4619      	mov	r1, r3
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	461a      	mov	r2, r3
 8000842:	481f      	ldr	r0, [pc, #124]	@ (80008c0 <CC1201_SendStrobe+0x1dc>)
 8000844:	f007 fd22 	bl	800828c <iprintf>
    printf("    [DEBUG] SendStrobe complete\n\r");
 8000848:	481e      	ldr	r0, [pc, #120]	@ (80008c4 <CC1201_SendStrobe+0x1e0>)
 800084a:	f007 fd1f 	bl	800828c <iprintf>

    if (status == HAL_OK) {
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d105      	bne.n	8000860 <CC1201_SendStrobe+0x17c>
        if (status_byte != NULL) {
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d002      	beq.n	8000860 <CC1201_SendStrobe+0x17c>
            *status_byte = rx_data;
 800085a:	7bba      	ldrb	r2, [r7, #14]
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	701a      	strb	r2, [r3, #0]
        }
    }
    return status;
 8000860:	7bfb      	ldrb	r3, [r7, #15]
}
 8000862:	4618      	mov	r0, r3
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	0800902c 	.word	0x0800902c
 8000870:	08009060 	.word	0x08009060
 8000874:	58021000 	.word	0x58021000
 8000878:	0800907c 	.word	0x0800907c
 800087c:	08009084 	.word	0x08009084
 8000880:	08009088 	.word	0x08009088
 8000884:	0800908c 	.word	0x0800908c
 8000888:	080090b4 	.word	0x080090b4
 800088c:	080090c4 	.word	0x080090c4
 8000890:	240000b8 	.word	0x240000b8
 8000894:	080090f4 	.word	0x080090f4
 8000898:	08009134 	.word	0x08009134
 800089c:	08009168 	.word	0x08009168
 80008a0:	080091a0 	.word	0x080091a0
 80008a4:	080091c8 	.word	0x080091c8
 80008a8:	080091f0 	.word	0x080091f0
 80008ac:	08009224 	.word	0x08009224
 80008b0:	08009258 	.word	0x08009258
 80008b4:	0800927c 	.word	0x0800927c
 80008b8:	080092a0 	.word	0x080092a0
 80008bc:	080092c4 	.word	0x080092c4
 80008c0:	08009300 	.word	0x08009300
 80008c4:	08009328 	.word	0x08009328

080008c8 <test_GPIO_pins>:
    printf("\n🎉 COMPREHENSIVE TEST SEQUENCE COMPLETE! 🎉\n\r");
    printf("==============================================\n\r");
}

// Function to test GPIO pin states
void test_GPIO_pins(void) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
    printf("=== GPIO Pin Test ===\n\r");
 80008ce:	485c      	ldr	r0, [pc, #368]	@ (8000a40 <test_GPIO_pins+0x178>)
 80008d0:	f007 fcdc 	bl	800828c <iprintf>
    
    // Test CS pin more thoroughly
    printf("CS Pin (PE4) Detailed Test:\n\r");
 80008d4:	485b      	ldr	r0, [pc, #364]	@ (8000a44 <test_GPIO_pins+0x17c>)
 80008d6:	f007 fcd9 	bl	800828c <iprintf>
    GPIO_PinState cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 80008da:	2110      	movs	r1, #16
 80008dc:	485a      	ldr	r0, [pc, #360]	@ (8000a48 <test_GPIO_pins+0x180>)
 80008de:	f002 f91f 	bl	8002b20 <HAL_GPIO_ReadPin>
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
    printf("  Initial state: %s\n\r", cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d101      	bne.n	80008f0 <test_GPIO_pins+0x28>
 80008ec:	4b57      	ldr	r3, [pc, #348]	@ (8000a4c <test_GPIO_pins+0x184>)
 80008ee:	e000      	b.n	80008f2 <test_GPIO_pins+0x2a>
 80008f0:	4b57      	ldr	r3, [pc, #348]	@ (8000a50 <test_GPIO_pins+0x188>)
 80008f2:	4619      	mov	r1, r3
 80008f4:	4857      	ldr	r0, [pc, #348]	@ (8000a54 <test_GPIO_pins+0x18c>)
 80008f6:	f007 fcc9 	bl	800828c <iprintf>
    
    // Force CS LOW and check multiple times
    printf("  Forcing CS LOW...\n\r");
 80008fa:	4857      	ldr	r0, [pc, #348]	@ (8000a58 <test_GPIO_pins+0x190>)
 80008fc:	f007 fcc6 	bl	800828c <iprintf>
    for (int i = 0; i < 5; i++) {
 8000900:	2300      	movs	r3, #0
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	e01c      	b.n	8000940 <test_GPIO_pins+0x78>
        HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	2110      	movs	r1, #16
 800090a:	484f      	ldr	r0, [pc, #316]	@ (8000a48 <test_GPIO_pins+0x180>)
 800090c:	f002 f920 	bl	8002b50 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8000910:	200a      	movs	r0, #10
 8000912:	f001 f9b7 	bl	8001c84 <HAL_Delay>
        cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 8000916:	2110      	movs	r1, #16
 8000918:	484b      	ldr	r0, [pc, #300]	@ (8000a48 <test_GPIO_pins+0x180>)
 800091a:	f002 f901 	bl	8002b20 <HAL_GPIO_ReadPin>
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
        printf("    Attempt %d: %s\n\r", i+1, cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	1c59      	adds	r1, r3, #1
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d101      	bne.n	8000930 <test_GPIO_pins+0x68>
 800092c:	4b47      	ldr	r3, [pc, #284]	@ (8000a4c <test_GPIO_pins+0x184>)
 800092e:	e000      	b.n	8000932 <test_GPIO_pins+0x6a>
 8000930:	4b47      	ldr	r3, [pc, #284]	@ (8000a50 <test_GPIO_pins+0x188>)
 8000932:	461a      	mov	r2, r3
 8000934:	4849      	ldr	r0, [pc, #292]	@ (8000a5c <test_GPIO_pins+0x194>)
 8000936:	f007 fca9 	bl	800828c <iprintf>
    for (int i = 0; i < 5; i++) {
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	3301      	adds	r3, #1
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	2b04      	cmp	r3, #4
 8000944:	dddf      	ble.n	8000906 <test_GPIO_pins+0x3e>
    }
    
    // Force CS HIGH and check multiple times
    printf("  Forcing CS HIGH...\n\r");
 8000946:	4846      	ldr	r0, [pc, #280]	@ (8000a60 <test_GPIO_pins+0x198>)
 8000948:	f007 fca0 	bl	800828c <iprintf>
    for (int i = 0; i < 5; i++) {
 800094c:	2300      	movs	r3, #0
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	e01c      	b.n	800098c <test_GPIO_pins+0xc4>
        HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 8000952:	2201      	movs	r2, #1
 8000954:	2110      	movs	r1, #16
 8000956:	483c      	ldr	r0, [pc, #240]	@ (8000a48 <test_GPIO_pins+0x180>)
 8000958:	f002 f8fa 	bl	8002b50 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 800095c:	200a      	movs	r0, #10
 800095e:	f001 f991 	bl	8001c84 <HAL_Delay>
        cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 8000962:	2110      	movs	r1, #16
 8000964:	4838      	ldr	r0, [pc, #224]	@ (8000a48 <test_GPIO_pins+0x180>)
 8000966:	f002 f8db 	bl	8002b20 <HAL_GPIO_ReadPin>
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
        printf("    Attempt %d: %s\n\r", i+1, cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	1c59      	adds	r1, r3, #1
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d101      	bne.n	800097c <test_GPIO_pins+0xb4>
 8000978:	4b34      	ldr	r3, [pc, #208]	@ (8000a4c <test_GPIO_pins+0x184>)
 800097a:	e000      	b.n	800097e <test_GPIO_pins+0xb6>
 800097c:	4b34      	ldr	r3, [pc, #208]	@ (8000a50 <test_GPIO_pins+0x188>)
 800097e:	461a      	mov	r2, r3
 8000980:	4836      	ldr	r0, [pc, #216]	@ (8000a5c <test_GPIO_pins+0x194>)
 8000982:	f007 fc83 	bl	800828c <iprintf>
    for (int i = 0; i < 5; i++) {
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	3301      	adds	r3, #1
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	2b04      	cmp	r3, #4
 8000990:	dddf      	ble.n	8000952 <test_GPIO_pins+0x8a>
    }
    
    // Test INT pin
    printf("INT Pin (PD4): ");
 8000992:	4834      	ldr	r0, [pc, #208]	@ (8000a64 <test_GPIO_pins+0x19c>)
 8000994:	f007 fc7a 	bl	800828c <iprintf>
    GPIO_PinState int_state = HAL_GPIO_ReadPin(CC1201_INT_PORT, CC1201_INT_PIN);
 8000998:	2110      	movs	r1, #16
 800099a:	4833      	ldr	r0, [pc, #204]	@ (8000a68 <test_GPIO_pins+0x1a0>)
 800099c:	f002 f8c0 	bl	8002b20 <HAL_GPIO_ReadPin>
 80009a0:	4603      	mov	r3, r0
 80009a2:	71bb      	strb	r3, [r7, #6]
    printf("%s\n\r", int_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 80009a4:	79bb      	ldrb	r3, [r7, #6]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d101      	bne.n	80009ae <test_GPIO_pins+0xe6>
 80009aa:	4b28      	ldr	r3, [pc, #160]	@ (8000a4c <test_GPIO_pins+0x184>)
 80009ac:	e000      	b.n	80009b0 <test_GPIO_pins+0xe8>
 80009ae:	4b28      	ldr	r3, [pc, #160]	@ (8000a50 <test_GPIO_pins+0x188>)
 80009b0:	4619      	mov	r1, r3
 80009b2:	482e      	ldr	r0, [pc, #184]	@ (8000a6c <test_GPIO_pins+0x1a4>)
 80009b4:	f007 fc6a 	bl	800828c <iprintf>
    
    // Check SPI state
    printf("SPI2 State: ");
 80009b8:	482d      	ldr	r0, [pc, #180]	@ (8000a70 <test_GPIO_pins+0x1a8>)
 80009ba:	f007 fc67 	bl	800828c <iprintf>
    if (CC1201_SPI_HANDLE.State == HAL_SPI_STATE_READY) {
 80009be:	4b2d      	ldr	r3, [pc, #180]	@ (8000a74 <test_GPIO_pins+0x1ac>)
 80009c0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d103      	bne.n	80009d2 <test_GPIO_pins+0x10a>
        printf("READY\n\r");
 80009ca:	482b      	ldr	r0, [pc, #172]	@ (8000a78 <test_GPIO_pins+0x1b0>)
 80009cc:	f007 fc5e 	bl	800828c <iprintf>
 80009d0:	e02f      	b.n	8000a32 <test_GPIO_pins+0x16a>
    } else if (CC1201_SPI_HANDLE.State == HAL_SPI_STATE_BUSY) {
 80009d2:	4b28      	ldr	r3, [pc, #160]	@ (8000a74 <test_GPIO_pins+0x1ac>)
 80009d4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	2b02      	cmp	r3, #2
 80009dc:	d103      	bne.n	80009e6 <test_GPIO_pins+0x11e>
        printf("BUSY\n\r");
 80009de:	4827      	ldr	r0, [pc, #156]	@ (8000a7c <test_GPIO_pins+0x1b4>)
 80009e0:	f007 fc54 	bl	800828c <iprintf>
 80009e4:	e025      	b.n	8000a32 <test_GPIO_pins+0x16a>
    } else if (CC1201_SPI_HANDLE.State == HAL_SPI_STATE_BUSY_TX) {
 80009e6:	4b23      	ldr	r3, [pc, #140]	@ (8000a74 <test_GPIO_pins+0x1ac>)
 80009e8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	2b03      	cmp	r3, #3
 80009f0:	d103      	bne.n	80009fa <test_GPIO_pins+0x132>
        printf("BUSY_TX\n\r");
 80009f2:	4823      	ldr	r0, [pc, #140]	@ (8000a80 <test_GPIO_pins+0x1b8>)
 80009f4:	f007 fc4a 	bl	800828c <iprintf>
 80009f8:	e01b      	b.n	8000a32 <test_GPIO_pins+0x16a>
    } else if (CC1201_SPI_HANDLE.State == HAL_SPI_STATE_BUSY_RX) {
 80009fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000a74 <test_GPIO_pins+0x1ac>)
 80009fc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	2b04      	cmp	r3, #4
 8000a04:	d103      	bne.n	8000a0e <test_GPIO_pins+0x146>
        printf("BUSY_RX\n\r");
 8000a06:	481f      	ldr	r0, [pc, #124]	@ (8000a84 <test_GPIO_pins+0x1bc>)
 8000a08:	f007 fc40 	bl	800828c <iprintf>
 8000a0c:	e011      	b.n	8000a32 <test_GPIO_pins+0x16a>
    } else if (CC1201_SPI_HANDLE.State == HAL_SPI_STATE_BUSY_TX_RX) {
 8000a0e:	4b19      	ldr	r3, [pc, #100]	@ (8000a74 <test_GPIO_pins+0x1ac>)
 8000a10:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	2b05      	cmp	r3, #5
 8000a18:	d103      	bne.n	8000a22 <test_GPIO_pins+0x15a>
        printf("BUSY_TX_RX\n\r");
 8000a1a:	481b      	ldr	r0, [pc, #108]	@ (8000a88 <test_GPIO_pins+0x1c0>)
 8000a1c:	f007 fc36 	bl	800828c <iprintf>
 8000a20:	e007      	b.n	8000a32 <test_GPIO_pins+0x16a>
    } else {
        printf("ERROR/RESET (%d)\n\r", CC1201_SPI_HANDLE.State);
 8000a22:	4b14      	ldr	r3, [pc, #80]	@ (8000a74 <test_GPIO_pins+0x1ac>)
 8000a24:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4817      	ldr	r0, [pc, #92]	@ (8000a8c <test_GPIO_pins+0x1c4>)
 8000a2e:	f007 fc2d 	bl	800828c <iprintf>
    }
    
    printf("===================\n\r");
 8000a32:	4817      	ldr	r0, [pc, #92]	@ (8000a90 <test_GPIO_pins+0x1c8>)
 8000a34:	f007 fc2a 	bl	800828c <iprintf>
}
 8000a38:	bf00      	nop
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	0800a334 	.word	0x0800a334
 8000a44:	0800a34c 	.word	0x0800a34c
 8000a48:	58021000 	.word	0x58021000
 8000a4c:	0800a36c 	.word	0x0800a36c
 8000a50:	0800a374 	.word	0x0800a374
 8000a54:	0800a378 	.word	0x0800a378
 8000a58:	0800a390 	.word	0x0800a390
 8000a5c:	0800a3a8 	.word	0x0800a3a8
 8000a60:	0800a3c0 	.word	0x0800a3c0
 8000a64:	0800a3d8 	.word	0x0800a3d8
 8000a68:	58020c00 	.word	0x58020c00
 8000a6c:	0800a3e8 	.word	0x0800a3e8
 8000a70:	0800a3f0 	.word	0x0800a3f0
 8000a74:	240000b8 	.word	0x240000b8
 8000a78:	0800a400 	.word	0x0800a400
 8000a7c:	0800a408 	.word	0x0800a408
 8000a80:	0800a410 	.word	0x0800a410
 8000a84:	0800a41c 	.word	0x0800a41c
 8000a88:	0800a428 	.word	0x0800a428
 8000a8c:	0800a438 	.word	0x0800a438
 8000a90:	0800a44c 	.word	0x0800a44c

08000a94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b088      	sub	sp, #32
 8000a98:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a9a:	f000 fb39 	bl	8001110 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a9e:	f001 f85f 	bl	8001b60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa2:	f000 f9d1 	bl	8000e48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa6:	f000 faa3 	bl	8000ff0 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000aaa:	f000 fa4b 	bl	8000f44 <MX_SPI2_Init>
  // CC1201 testing will be done after UART is initialized

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f000 fe00 	bl	80016b4 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f000 fdfd 	bl	80016b4 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000aba:	2002      	movs	r0, #2
 8000abc:	f000 fdfa 	bl	80016b4 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f000 feea 	bl	800189c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000ac8:	4b89      	ldr	r3, [pc, #548]	@ (8000cf0 <main+0x25c>)
 8000aca:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ace:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000ad0:	4b87      	ldr	r3, [pc, #540]	@ (8000cf0 <main+0x25c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000ad6:	4b86      	ldr	r3, [pc, #536]	@ (8000cf0 <main+0x25c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000adc:	4b84      	ldr	r3, [pc, #528]	@ (8000cf0 <main+0x25c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000ae2:	4b83      	ldr	r3, [pc, #524]	@ (8000cf0 <main+0x25c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000ae8:	4981      	ldr	r1, [pc, #516]	@ (8000cf0 <main+0x25c>)
 8000aea:	2000      	movs	r0, #0
 8000aec:	f000 ff5a 	bl	80019a4 <BSP_COM_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <main+0x66>
  {
    Error_Handler();
 8000af6:	f000 fb4b 	bl	8001190 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8000afa:	487e      	ldr	r0, [pc, #504]	@ (8000cf4 <main+0x260>)
 8000afc:	f007 fbc6 	bl	800828c <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8000b00:	2000      	movs	r0, #0
 8000b02:	f000 fe4d 	bl	80017a0 <BSP_LED_On>
  BSP_LED_On(LED_YELLOW);
 8000b06:	2001      	movs	r0, #1
 8000b08:	f000 fe4a 	bl	80017a0 <BSP_LED_On>
  BSP_LED_On(LED_RED);
 8000b0c:	2002      	movs	r0, #2
 8000b0e:	f000 fe47 	bl	80017a0 <BSP_LED_On>
  
  // Now that UART is initialized, start CC1201 testing
  printf("\n=== CC1201 COMMUNICATION SYSTEM STARTUP ===\n\r");
 8000b12:	4879      	ldr	r0, [pc, #484]	@ (8000cf8 <main+0x264>)
 8000b14:	f007 fbba 	bl	800828c <iprintf>
  
  // Test GPIO pins first
  test_GPIO_pins();
 8000b18:	f7ff fed6 	bl	80008c8 <test_GPIO_pins>
  
  // Simple test instead of full initialization
  printf("Starting simple CC1201 test...\n\r");
 8000b1c:	4877      	ldr	r0, [pc, #476]	@ (8000cfc <main+0x268>)
 8000b1e:	f007 fbb5 	bl	800828c <iprintf>
  HAL_Delay(100);
 8000b22:	2064      	movs	r0, #100	@ 0x64
 8000b24:	f001 f8ae 	bl	8001c84 <HAL_Delay>
  
  // First, test SPI2 peripheral directly
  printf("Testing SPI2 peripheral directly...\n\r");
 8000b28:	4875      	ldr	r0, [pc, #468]	@ (8000d00 <main+0x26c>)
 8000b2a:	f007 fbaf 	bl	800828c <iprintf>
  printf("SPI2 Initial Config: State=%d, Mode=%lu, DataSize=%lu, BaudRate=%lu\n\r",
         CC1201_SPI_HANDLE.State, 
 8000b2e:	4b75      	ldr	r3, [pc, #468]	@ (8000d04 <main+0x270>)
 8000b30:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000b34:	b2db      	uxtb	r3, r3
  printf("SPI2 Initial Config: State=%d, Mode=%lu, DataSize=%lu, BaudRate=%lu\n\r",
 8000b36:	4618      	mov	r0, r3
 8000b38:	4b72      	ldr	r3, [pc, #456]	@ (8000d04 <main+0x270>)
 8000b3a:	685a      	ldr	r2, [r3, #4]
 8000b3c:	4b71      	ldr	r3, [pc, #452]	@ (8000d04 <main+0x270>)
 8000b3e:	68d9      	ldr	r1, [r3, #12]
 8000b40:	4b70      	ldr	r3, [pc, #448]	@ (8000d04 <main+0x270>)
 8000b42:	69db      	ldr	r3, [r3, #28]
 8000b44:	9300      	str	r3, [sp, #0]
 8000b46:	460b      	mov	r3, r1
 8000b48:	4601      	mov	r1, r0
 8000b4a:	486f      	ldr	r0, [pc, #444]	@ (8000d08 <main+0x274>)
 8000b4c:	f007 fb9e 	bl	800828c <iprintf>
         CC1201_SPI_HANDLE.Init.Mode,
         CC1201_SPI_HANDLE.Init.DataSize,
         CC1201_SPI_HANDLE.Init.BaudRatePrescaler);
  
  // Try to fix SPI2 configuration
  printf("Attempting to reconfigure SPI2...\n\r");
 8000b50:	486e      	ldr	r0, [pc, #440]	@ (8000d0c <main+0x278>)
 8000b52:	f007 fb9b 	bl	800828c <iprintf>
  
  // Deinitialize SPI2
  HAL_SPI_DeInit(&CC1201_SPI_HANDLE);
 8000b56:	486b      	ldr	r0, [pc, #428]	@ (8000d04 <main+0x270>)
 8000b58:	f004 ff9e 	bl	8005a98 <HAL_SPI_DeInit>
  
  // Reconfigure SPI2 manually
  CC1201_SPI_HANDLE.Instance = SPI2;
 8000b5c:	4b69      	ldr	r3, [pc, #420]	@ (8000d04 <main+0x270>)
 8000b5e:	4a6c      	ldr	r2, [pc, #432]	@ (8000d10 <main+0x27c>)
 8000b60:	601a      	str	r2, [r3, #0]
  CC1201_SPI_HANDLE.Init.Mode = SPI_MODE_MASTER;
 8000b62:	4b68      	ldr	r3, [pc, #416]	@ (8000d04 <main+0x270>)
 8000b64:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000b68:	605a      	str	r2, [r3, #4]
  CC1201_SPI_HANDLE.Init.Direction = SPI_DIRECTION_2LINES;
 8000b6a:	4b66      	ldr	r3, [pc, #408]	@ (8000d04 <main+0x270>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  CC1201_SPI_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b70:	4b64      	ldr	r3, [pc, #400]	@ (8000d04 <main+0x270>)
 8000b72:	2207      	movs	r2, #7
 8000b74:	60da      	str	r2, [r3, #12]
  CC1201_SPI_HANDLE.Init.CLKPolarity = SPI_POLARITY_LOW;    // CPOL = 0
 8000b76:	4b63      	ldr	r3, [pc, #396]	@ (8000d04 <main+0x270>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  CC1201_SPI_HANDLE.Init.CLKPhase = SPI_PHASE_1EDGE;       // CPHA = 0
 8000b7c:	4b61      	ldr	r3, [pc, #388]	@ (8000d04 <main+0x270>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	615a      	str	r2, [r3, #20]
  CC1201_SPI_HANDLE.Init.NSS = SPI_NSS_SOFT;
 8000b82:	4b60      	ldr	r3, [pc, #384]	@ (8000d04 <main+0x270>)
 8000b84:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000b88:	619a      	str	r2, [r3, #24]
  CC1201_SPI_HANDLE.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32; // Slower speed
 8000b8a:	4b5e      	ldr	r3, [pc, #376]	@ (8000d04 <main+0x270>)
 8000b8c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b90:	61da      	str	r2, [r3, #28]
  CC1201_SPI_HANDLE.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b92:	4b5c      	ldr	r3, [pc, #368]	@ (8000d04 <main+0x270>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	621a      	str	r2, [r3, #32]
  CC1201_SPI_HANDLE.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b98:	4b5a      	ldr	r3, [pc, #360]	@ (8000d04 <main+0x270>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	625a      	str	r2, [r3, #36]	@ 0x24
  CC1201_SPI_HANDLE.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b9e:	4b59      	ldr	r3, [pc, #356]	@ (8000d04 <main+0x270>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	629a      	str	r2, [r3, #40]	@ 0x28
  CC1201_SPI_HANDLE.Init.CRCPolynomial = 0x0;
 8000ba4:	4b57      	ldr	r3, [pc, #348]	@ (8000d04 <main+0x270>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	62da      	str	r2, [r3, #44]	@ 0x2c
  CC1201_SPI_HANDLE.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000baa:	4b56      	ldr	r3, [pc, #344]	@ (8000d04 <main+0x270>)
 8000bac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bb0:	635a      	str	r2, [r3, #52]	@ 0x34
  CC1201_SPI_HANDLE.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000bb2:	4b54      	ldr	r3, [pc, #336]	@ (8000d04 <main+0x270>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	639a      	str	r2, [r3, #56]	@ 0x38
  CC1201_SPI_HANDLE.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000bb8:	4b52      	ldr	r3, [pc, #328]	@ (8000d04 <main+0x270>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	63da      	str	r2, [r3, #60]	@ 0x3c
  CC1201_SPI_HANDLE.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000bbe:	4b51      	ldr	r3, [pc, #324]	@ (8000d04 <main+0x270>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	641a      	str	r2, [r3, #64]	@ 0x40
  CC1201_SPI_HANDLE.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000bc4:	4b4f      	ldr	r3, [pc, #316]	@ (8000d04 <main+0x270>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	645a      	str	r2, [r3, #68]	@ 0x44
  CC1201_SPI_HANDLE.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000bca:	4b4e      	ldr	r3, [pc, #312]	@ (8000d04 <main+0x270>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	649a      	str	r2, [r3, #72]	@ 0x48
  CC1201_SPI_HANDLE.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000bd0:	4b4c      	ldr	r3, [pc, #304]	@ (8000d04 <main+0x270>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	64da      	str	r2, [r3, #76]	@ 0x4c
  CC1201_SPI_HANDLE.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000bd6:	4b4b      	ldr	r3, [pc, #300]	@ (8000d04 <main+0x270>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	651a      	str	r2, [r3, #80]	@ 0x50
  CC1201_SPI_HANDLE.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000bdc:	4b49      	ldr	r3, [pc, #292]	@ (8000d04 <main+0x270>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	655a      	str	r2, [r3, #84]	@ 0x54
  CC1201_SPI_HANDLE.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000be2:	4b48      	ldr	r3, [pc, #288]	@ (8000d04 <main+0x270>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	659a      	str	r2, [r3, #88]	@ 0x58
  
  HAL_StatusTypeDef spi_init_result = HAL_SPI_Init(&CC1201_SPI_HANDLE);
 8000be8:	4846      	ldr	r0, [pc, #280]	@ (8000d04 <main+0x270>)
 8000bea:	f004 fe31 	bl	8005850 <HAL_SPI_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	73fb      	strb	r3, [r7, #15]
  printf("SPI2 reinitialization result: %d\n\r", spi_init_result);
 8000bf2:	7bfb      	ldrb	r3, [r7, #15]
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4847      	ldr	r0, [pc, #284]	@ (8000d14 <main+0x280>)
 8000bf8:	f007 fb48 	bl	800828c <iprintf>
  
  if (spi_init_result == HAL_OK) {
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d111      	bne.n	8000c26 <main+0x192>
      printf("SPI2 Reconfigured - State=%d, Mode=%lu, DataSize=%lu, BaudRate=%lu\n\r",
             CC1201_SPI_HANDLE.State, 
 8000c02:	4b40      	ldr	r3, [pc, #256]	@ (8000d04 <main+0x270>)
 8000c04:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000c08:	b2db      	uxtb	r3, r3
      printf("SPI2 Reconfigured - State=%d, Mode=%lu, DataSize=%lu, BaudRate=%lu\n\r",
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	4b3d      	ldr	r3, [pc, #244]	@ (8000d04 <main+0x270>)
 8000c0e:	685a      	ldr	r2, [r3, #4]
 8000c10:	4b3c      	ldr	r3, [pc, #240]	@ (8000d04 <main+0x270>)
 8000c12:	68d9      	ldr	r1, [r3, #12]
 8000c14:	4b3b      	ldr	r3, [pc, #236]	@ (8000d04 <main+0x270>)
 8000c16:	69db      	ldr	r3, [r3, #28]
 8000c18:	9300      	str	r3, [sp, #0]
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	4601      	mov	r1, r0
 8000c1e:	483e      	ldr	r0, [pc, #248]	@ (8000d18 <main+0x284>)
 8000c20:	f007 fb34 	bl	800828c <iprintf>
 8000c24:	e002      	b.n	8000c2c <main+0x198>
             CC1201_SPI_HANDLE.Init.Mode,
             CC1201_SPI_HANDLE.Init.DataSize,
             CC1201_SPI_HANDLE.Init.BaudRatePrescaler);
  } else {
      printf("SPI2 reconfiguration failed!\n\r");
 8000c26:	483d      	ldr	r0, [pc, #244]	@ (8000d1c <main+0x288>)
 8000c28:	f007 fb30 	bl	800828c <iprintf>
  }
  
  uint8_t spi_test_tx = 0xAA;
 8000c2c:	23aa      	movs	r3, #170	@ 0xaa
 8000c2e:	72bb      	strb	r3, [r7, #10]
  uint8_t spi_test_rx = 0x00;
 8000c30:	2300      	movs	r3, #0
 8000c32:	727b      	strb	r3, [r7, #9]
  
  HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // CS Low
 8000c34:	2200      	movs	r2, #0
 8000c36:	2110      	movs	r1, #16
 8000c38:	4839      	ldr	r0, [pc, #228]	@ (8000d20 <main+0x28c>)
 8000c3a:	f001 ff89 	bl	8002b50 <HAL_GPIO_WritePin>
  HAL_StatusTypeDef spi_test_result = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, &spi_test_tx, &spi_test_rx, 1, 100);
 8000c3e:	f107 0209 	add.w	r2, r7, #9
 8000c42:	f107 010a 	add.w	r1, r7, #10
 8000c46:	2364      	movs	r3, #100	@ 0x64
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	482d      	ldr	r0, [pc, #180]	@ (8000d04 <main+0x270>)
 8000c4e:	f005 fbad 	bl	80063ac <HAL_SPI_TransmitReceive>
 8000c52:	4603      	mov	r3, r0
 8000c54:	73bb      	strb	r3, [r7, #14]
  HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // CS High
 8000c56:	2201      	movs	r2, #1
 8000c58:	2110      	movs	r1, #16
 8000c5a:	4831      	ldr	r0, [pc, #196]	@ (8000d20 <main+0x28c>)
 8000c5c:	f001 ff78 	bl	8002b50 <HAL_GPIO_WritePin>
  
  printf("Direct SPI test - HAL: %d, TX: 0x%02X, RX: 0x%02X\n\r", spi_test_result, spi_test_tx, spi_test_rx);
 8000c60:	7bb9      	ldrb	r1, [r7, #14]
 8000c62:	7abb      	ldrb	r3, [r7, #10]
 8000c64:	461a      	mov	r2, r3
 8000c66:	7a7b      	ldrb	r3, [r7, #9]
 8000c68:	482e      	ldr	r0, [pc, #184]	@ (8000d24 <main+0x290>)
 8000c6a:	f007 fb0f 	bl	800828c <iprintf>
  
  if (spi_test_result == HAL_OK) {
 8000c6e:	7bbb      	ldrb	r3, [r7, #14]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d103      	bne.n	8000c7c <main+0x1e8>
      printf("SPI2 peripheral working!\n\r");
 8000c74:	482c      	ldr	r0, [pc, #176]	@ (8000d28 <main+0x294>)
 8000c76:	f007 fb09 	bl	800828c <iprintf>
 8000c7a:	e016      	b.n	8000caa <main+0x216>
  } else {
      printf("SPI2 peripheral failed! Error: %d\n\r", spi_test_result);
 8000c7c:	7bbb      	ldrb	r3, [r7, #14]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	482a      	ldr	r0, [pc, #168]	@ (8000d2c <main+0x298>)
 8000c82:	f007 fb03 	bl	800828c <iprintf>
      if (spi_test_result == HAL_TIMEOUT) printf("  -> SPI TIMEOUT\n\r");
 8000c86:	7bbb      	ldrb	r3, [r7, #14]
 8000c88:	2b03      	cmp	r3, #3
 8000c8a:	d102      	bne.n	8000c92 <main+0x1fe>
 8000c8c:	4828      	ldr	r0, [pc, #160]	@ (8000d30 <main+0x29c>)
 8000c8e:	f007 fafd 	bl	800828c <iprintf>
      if (spi_test_result == HAL_ERROR) printf("  -> SPI ERROR\n\r");
 8000c92:	7bbb      	ldrb	r3, [r7, #14]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d102      	bne.n	8000c9e <main+0x20a>
 8000c98:	4826      	ldr	r0, [pc, #152]	@ (8000d34 <main+0x2a0>)
 8000c9a:	f007 faf7 	bl	800828c <iprintf>
      if (spi_test_result == HAL_BUSY) printf("  -> SPI BUSY\n\r");
 8000c9e:	7bbb      	ldrb	r3, [r7, #14]
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d102      	bne.n	8000caa <main+0x216>
 8000ca4:	4824      	ldr	r0, [pc, #144]	@ (8000d38 <main+0x2a4>)
 8000ca6:	f007 faf1 	bl	800828c <iprintf>
  }
  
  printf("Test 1: Creating status byte variable...\n\r");
 8000caa:	4824      	ldr	r0, [pc, #144]	@ (8000d3c <main+0x2a8>)
 8000cac:	f007 faee 	bl	800828c <iprintf>
  uint8_t test_status = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	723b      	strb	r3, [r7, #8]
  
  printf("Test 2: About to call CC1201_Nop...\n\r");
 8000cb4:	4822      	ldr	r0, [pc, #136]	@ (8000d40 <main+0x2ac>)
 8000cb6:	f007 fae9 	bl	800828c <iprintf>
  HAL_StatusTypeDef nop_result = CC1201_Nop(&test_status);
 8000cba:	f107 0308 	add.w	r3, r7, #8
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fcf4 	bl	80006ac <CC1201_Nop>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	737b      	strb	r3, [r7, #13]
  
  printf("Test 3: NOP returned - HAL: %d, Status: 0x%02X\n\r", nop_result, test_status);
 8000cc8:	7b7b      	ldrb	r3, [r7, #13]
 8000cca:	7a3a      	ldrb	r2, [r7, #8]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	481d      	ldr	r0, [pc, #116]	@ (8000d44 <main+0x2b0>)
 8000cd0:	f007 fadc 	bl	800828c <iprintf>
  
  if (nop_result == HAL_OK) {
 8000cd4:	7b7b      	ldrb	r3, [r7, #13]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d138      	bne.n	8000d4c <main+0x2b8>
      printf("Basic CC1201 communication working!\n\r");
 8000cda:	481b      	ldr	r0, [pc, #108]	@ (8000d48 <main+0x2b4>)
 8000cdc:	f007 fad6 	bl	800828c <iprintf>
      BSP_LED_Off(LED_RED);
 8000ce0:	2002      	movs	r0, #2
 8000ce2:	f000 fd87 	bl	80017f4 <BSP_LED_Off>
      BSP_LED_On(LED_GREEN);
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f000 fd5a 	bl	80017a0 <BSP_LED_On>
 8000cec:	e037      	b.n	8000d5e <main+0x2ca>
 8000cee:	bf00      	nop
 8000cf0:	240000a4 	.word	0x240000a4
 8000cf4:	0800abb0 	.word	0x0800abb0
 8000cf8:	0800abcc 	.word	0x0800abcc
 8000cfc:	0800abfc 	.word	0x0800abfc
 8000d00:	0800ac20 	.word	0x0800ac20
 8000d04:	240000b8 	.word	0x240000b8
 8000d08:	0800ac48 	.word	0x0800ac48
 8000d0c:	0800ac90 	.word	0x0800ac90
 8000d10:	40003800 	.word	0x40003800
 8000d14:	0800acb4 	.word	0x0800acb4
 8000d18:	0800acd8 	.word	0x0800acd8
 8000d1c:	0800ad20 	.word	0x0800ad20
 8000d20:	58021000 	.word	0x58021000
 8000d24:	0800ad40 	.word	0x0800ad40
 8000d28:	0800ad74 	.word	0x0800ad74
 8000d2c:	0800ad90 	.word	0x0800ad90
 8000d30:	0800adb4 	.word	0x0800adb4
 8000d34:	0800adc8 	.word	0x0800adc8
 8000d38:	0800addc 	.word	0x0800addc
 8000d3c:	0800adec 	.word	0x0800adec
 8000d40:	0800ae18 	.word	0x0800ae18
 8000d44:	0800ae40 	.word	0x0800ae40
 8000d48:	0800ae74 	.word	0x0800ae74
  } else {
      printf("CC1201 communication failed!\n\r");
 8000d4c:	4836      	ldr	r0, [pc, #216]	@ (8000e28 <main+0x394>)
 8000d4e:	f007 fa9d 	bl	800828c <iprintf>
      BSP_LED_Off(LED_GREEN);
 8000d52:	2000      	movs	r0, #0
 8000d54:	f000 fd4e 	bl	80017f4 <BSP_LED_Off>
      BSP_LED_On(LED_RED);
 8000d58:	2002      	movs	r0, #2
 8000d5a:	f000 fd21 	bl	80017a0 <BSP_LED_On>

  /* USER CODE END BSP */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t last_test = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
  uint32_t test_counter = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
  
  printf("\n🚀 STARTING SIMPLE CC1201 TEST MODE 🚀\n\r");
 8000d66:	4831      	ldr	r0, [pc, #196]	@ (8000e2c <main+0x398>)
 8000d68:	f007 fa90 	bl	800828c <iprintf>
  
  while (1)
  {

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 8000d6c:	4b30      	ldr	r3, [pc, #192]	@ (8000e30 <main+0x39c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d11c      	bne.n	8000dae <main+0x31a>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 8000d74:	4b2e      	ldr	r3, [pc, #184]	@ (8000e30 <main+0x39c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle leds ---- */
      BSP_LED_Toggle(LED_GREEN);
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	f000 fd64 	bl	8001848 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_YELLOW);
 8000d80:	2001      	movs	r0, #1
 8000d82:	f000 fd61 	bl	8001848 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_RED);
 8000d86:	2002      	movs	r0, #2
 8000d88:	f000 fd5e 	bl	8001848 <BSP_LED_Toggle>

      /* ..... Perform your action ..... */
      printf("\n[BUTTON] Manual test triggered...\n\r");
 8000d8c:	4829      	ldr	r0, [pc, #164]	@ (8000e34 <main+0x3a0>)
 8000d8e:	f007 fa7d 	bl	800828c <iprintf>
      uint8_t button_status = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	71fb      	strb	r3, [r7, #7]
      HAL_StatusTypeDef button_result = CC1201_Nop(&button_status);
 8000d96:	1dfb      	adds	r3, r7, #7
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fc87 	bl	80006ac <CC1201_Nop>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	733b      	strb	r3, [r7, #12]
      printf("Button test - HAL: %d, Status: 0x%02X\n\r", button_result, button_status);
 8000da2:	7b3b      	ldrb	r3, [r7, #12]
 8000da4:	79fa      	ldrb	r2, [r7, #7]
 8000da6:	4619      	mov	r1, r3
 8000da8:	4823      	ldr	r0, [pc, #140]	@ (8000e38 <main+0x3a4>)
 8000daa:	f007 fa6f 	bl	800828c <iprintf>
    }
    
    // Simple periodic test every 5 seconds
    if (HAL_GetTick() - last_test > 5000) {
 8000dae:	f000 ff5d 	bl	8001c6c <HAL_GetTick>
 8000db2:	4602      	mov	r2, r0
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d92e      	bls.n	8000e1e <main+0x38a>
      printf("[%lu] Test %lu: ", HAL_GetTick(), ++test_counter);
 8000dc0:	f000 ff54 	bl	8001c6c <HAL_GetTick>
 8000dc4:	4601      	mov	r1, r0
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	481b      	ldr	r0, [pc, #108]	@ (8000e3c <main+0x3a8>)
 8000dd0:	f007 fa5c 	bl	800828c <iprintf>
      
      uint8_t status_byte = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	71bb      	strb	r3, [r7, #6]
      HAL_StatusTypeDef hal_status = CC1201_Nop(&status_byte);
 8000dd8:	1dbb      	adds	r3, r7, #6
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fc66 	bl	80006ac <CC1201_Nop>
 8000de0:	4603      	mov	r3, r0
 8000de2:	72fb      	strb	r3, [r7, #11]
      
      if (hal_status == HAL_OK) {
 8000de4:	7afb      	ldrb	r3, [r7, #11]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d10b      	bne.n	8000e02 <main+0x36e>
        printf("OK - Status: 0x%02X\n\r", status_byte);
 8000dea:	79bb      	ldrb	r3, [r7, #6]
 8000dec:	4619      	mov	r1, r3
 8000dee:	4814      	ldr	r0, [pc, #80]	@ (8000e40 <main+0x3ac>)
 8000df0:	f007 fa4c 	bl	800828c <iprintf>
        BSP_LED_On(LED_GREEN);
 8000df4:	2000      	movs	r0, #0
 8000df6:	f000 fcd3 	bl	80017a0 <BSP_LED_On>
        BSP_LED_Off(LED_RED);
 8000dfa:	2002      	movs	r0, #2
 8000dfc:	f000 fcfa 	bl	80017f4 <BSP_LED_Off>
 8000e00:	e00a      	b.n	8000e18 <main+0x384>
      } else {
        printf("FAILED - HAL: %d\n\r", hal_status);
 8000e02:	7afb      	ldrb	r3, [r7, #11]
 8000e04:	4619      	mov	r1, r3
 8000e06:	480f      	ldr	r0, [pc, #60]	@ (8000e44 <main+0x3b0>)
 8000e08:	f007 fa40 	bl	800828c <iprintf>
        BSP_LED_Off(LED_GREEN);
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f000 fcf1 	bl	80017f4 <BSP_LED_Off>
        BSP_LED_On(LED_RED);
 8000e12:	2002      	movs	r0, #2
 8000e14:	f000 fcc4 	bl	80017a0 <BSP_LED_On>
      }
      
      last_test = HAL_GetTick();
 8000e18:	f000 ff28 	bl	8001c6c <HAL_GetTick>
 8000e1c:	6178      	str	r0, [r7, #20]
    }
    
    HAL_Delay(100);
 8000e1e:	2064      	movs	r0, #100	@ 0x64
 8000e20:	f000 ff30 	bl	8001c84 <HAL_Delay>
    if (BspButtonState == BUTTON_PRESSED)
 8000e24:	e7a2      	b.n	8000d6c <main+0x2d8>
 8000e26:	bf00      	nop
 8000e28:	0800ae9c 	.word	0x0800ae9c
 8000e2c:	0800aebc 	.word	0x0800aebc
 8000e30:	240000b4 	.word	0x240000b4
 8000e34:	0800aeec 	.word	0x0800aeec
 8000e38:	0800af14 	.word	0x0800af14
 8000e3c:	0800af3c 	.word	0x0800af3c
 8000e40:	0800af50 	.word	0x0800af50
 8000e44:	0800af68 	.word	0x0800af68

08000e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b09c      	sub	sp, #112	@ 0x70
 8000e4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e52:	224c      	movs	r2, #76	@ 0x4c
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f007 fa6d 	bl	8008336 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	2220      	movs	r2, #32
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f007 fa67 	bl	8008336 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e68:	2002      	movs	r0, #2
 8000e6a:	f001 fea5 	bl	8002bb8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e6e:	2300      	movs	r3, #0
 8000e70:	603b      	str	r3, [r7, #0]
 8000e72:	4b32      	ldr	r3, [pc, #200]	@ (8000f3c <SystemClock_Config+0xf4>)
 8000e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e76:	4a31      	ldr	r2, [pc, #196]	@ (8000f3c <SystemClock_Config+0xf4>)
 8000e78:	f023 0301 	bic.w	r3, r3, #1
 8000e7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000e7e:	4b2f      	ldr	r3, [pc, #188]	@ (8000f3c <SystemClock_Config+0xf4>)
 8000e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	603b      	str	r3, [r7, #0]
 8000e88:	4b2d      	ldr	r3, [pc, #180]	@ (8000f40 <SystemClock_Config+0xf8>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e90:	4a2b      	ldr	r2, [pc, #172]	@ (8000f40 <SystemClock_Config+0xf8>)
 8000e92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e96:	6193      	str	r3, [r2, #24]
 8000e98:	4b29      	ldr	r3, [pc, #164]	@ (8000f40 <SystemClock_Config+0xf8>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ea0:	603b      	str	r3, [r7, #0]
 8000ea2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ea4:	bf00      	nop
 8000ea6:	4b26      	ldr	r3, [pc, #152]	@ (8000f40 <SystemClock_Config+0xf8>)
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000eae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000eb2:	d1f8      	bne.n	8000ea6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ebc:	2340      	movs	r3, #64	@ 0x40
 8000ebe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ec8:	2304      	movs	r3, #4
 8000eca:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ecc:	230a      	movs	r3, #10
 8000ece:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000edc:	230c      	movs	r3, #12
 8000ede:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eec:	4618      	mov	r0, r3
 8000eee:	f001 fe9d 	bl	8002c2c <HAL_RCC_OscConfig>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000ef8:	f000 f94a 	bl	8001190 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000efc:	233f      	movs	r3, #63	@ 0x3f
 8000efe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f04:	2300      	movs	r3, #0
 8000f06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f18:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2101      	movs	r1, #1
 8000f22:	4618      	mov	r0, r3
 8000f24:	f002 fadc 	bl	80034e0 <HAL_RCC_ClockConfig>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000f2e:	f000 f92f 	bl	8001190 <Error_Handler>
  }
}
 8000f32:	bf00      	nop
 8000f34:	3770      	adds	r7, #112	@ 0x70
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	58000400 	.word	0x58000400
 8000f40:	58024800 	.word	0x58024800

08000f44 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f48:	4b27      	ldr	r3, [pc, #156]	@ (8000fe8 <MX_SPI2_Init+0xa4>)
 8000f4a:	4a28      	ldr	r2, [pc, #160]	@ (8000fec <MX_SPI2_Init+0xa8>)
 8000f4c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f4e:	4b26      	ldr	r3, [pc, #152]	@ (8000fe8 <MX_SPI2_Init+0xa4>)
 8000f50:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f54:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f56:	4b24      	ldr	r3, [pc, #144]	@ (8000fe8 <MX_SPI2_Init+0xa4>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f5c:	4b22      	ldr	r3, [pc, #136]	@ (8000fe8 <MX_SPI2_Init+0xa4>)
 8000f5e:	2203      	movs	r2, #3
 8000f60:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f62:	4b21      	ldr	r3, [pc, #132]	@ (8000fe8 <MX_SPI2_Init+0xa4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f68:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe8 <MX_SPI2_Init+0xa4>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe8 <MX_SPI2_Init+0xa4>)
 8000f70:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000f74:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f76:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe8 <MX_SPI2_Init+0xa4>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe8 <MX_SPI2_Init+0xa4>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f82:	4b19      	ldr	r3, [pc, #100]	@ (8000fe8 <MX_SPI2_Init+0xa4>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f88:	4b17      	ldr	r3, [pc, #92]	@ (8000fe8 <MX_SPI2_Init+0xa4>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000f8e:	4b16      	ldr	r3, [pc, #88]	@ (8000fe8 <MX_SPI2_Init+0xa4>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f94:	4b14      	ldr	r3, [pc, #80]	@ (8000fe8 <MX_SPI2_Init+0xa4>)
 8000f96:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f9a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f9c:	4b12      	ldr	r3, [pc, #72]	@ (8000fe8 <MX_SPI2_Init+0xa4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000fa2:	4b11      	ldr	r3, [pc, #68]	@ (8000fe8 <MX_SPI2_Init+0xa4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <MX_SPI2_Init+0xa4>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fae:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe8 <MX_SPI2_Init+0xa4>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe8 <MX_SPI2_Init+0xa4>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000fba:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe8 <MX_SPI2_Init+0xa4>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000fc0:	4b09      	ldr	r3, [pc, #36]	@ (8000fe8 <MX_SPI2_Init+0xa4>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000fc6:	4b08      	ldr	r3, [pc, #32]	@ (8000fe8 <MX_SPI2_Init+0xa4>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000fcc:	4b06      	ldr	r3, [pc, #24]	@ (8000fe8 <MX_SPI2_Init+0xa4>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fd2:	4805      	ldr	r0, [pc, #20]	@ (8000fe8 <MX_SPI2_Init+0xa4>)
 8000fd4:	f004 fc3c 	bl	8005850 <HAL_SPI_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000fde:	f000 f8d7 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	240000b8 	.word	0x240000b8
 8000fec:	40003800 	.word	0x40003800

08000ff0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08c      	sub	sp, #48	@ 0x30
 8000ff4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff6:	f107 031c 	add.w	r3, r7, #28
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
 8001004:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001006:	4b3f      	ldr	r3, [pc, #252]	@ (8001104 <MX_GPIO_Init+0x114>)
 8001008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800100c:	4a3d      	ldr	r2, [pc, #244]	@ (8001104 <MX_GPIO_Init+0x114>)
 800100e:	f043 0310 	orr.w	r3, r3, #16
 8001012:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001016:	4b3b      	ldr	r3, [pc, #236]	@ (8001104 <MX_GPIO_Init+0x114>)
 8001018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800101c:	f003 0310 	and.w	r3, r3, #16
 8001020:	61bb      	str	r3, [r7, #24]
 8001022:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001024:	4b37      	ldr	r3, [pc, #220]	@ (8001104 <MX_GPIO_Init+0x114>)
 8001026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800102a:	4a36      	ldr	r2, [pc, #216]	@ (8001104 <MX_GPIO_Init+0x114>)
 800102c:	f043 0304 	orr.w	r3, r3, #4
 8001030:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001034:	4b33      	ldr	r3, [pc, #204]	@ (8001104 <MX_GPIO_Init+0x114>)
 8001036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800103a:	f003 0304 	and.w	r3, r3, #4
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001042:	4b30      	ldr	r3, [pc, #192]	@ (8001104 <MX_GPIO_Init+0x114>)
 8001044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001048:	4a2e      	ldr	r2, [pc, #184]	@ (8001104 <MX_GPIO_Init+0x114>)
 800104a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800104e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001052:	4b2c      	ldr	r3, [pc, #176]	@ (8001104 <MX_GPIO_Init+0x114>)
 8001054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001058:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001060:	4b28      	ldr	r3, [pc, #160]	@ (8001104 <MX_GPIO_Init+0x114>)
 8001062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001066:	4a27      	ldr	r2, [pc, #156]	@ (8001104 <MX_GPIO_Init+0x114>)
 8001068:	f043 0302 	orr.w	r3, r3, #2
 800106c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001070:	4b24      	ldr	r3, [pc, #144]	@ (8001104 <MX_GPIO_Init+0x114>)
 8001072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	4b21      	ldr	r3, [pc, #132]	@ (8001104 <MX_GPIO_Init+0x114>)
 8001080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001084:	4a1f      	ldr	r2, [pc, #124]	@ (8001104 <MX_GPIO_Init+0x114>)
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800108e:	4b1d      	ldr	r3, [pc, #116]	@ (8001104 <MX_GPIO_Init+0x114>)
 8001090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800109c:	4b19      	ldr	r3, [pc, #100]	@ (8001104 <MX_GPIO_Init+0x114>)
 800109e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a2:	4a18      	ldr	r2, [pc, #96]	@ (8001104 <MX_GPIO_Init+0x114>)
 80010a4:	f043 0308 	orr.w	r3, r3, #8
 80010a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010ac:	4b15      	ldr	r3, [pc, #84]	@ (8001104 <MX_GPIO_Init+0x114>)
 80010ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b2:	f003 0308 	and.w	r3, r3, #8
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2110      	movs	r1, #16
 80010be:	4812      	ldr	r0, [pc, #72]	@ (8001108 <MX_GPIO_Init+0x118>)
 80010c0:	f001 fd46 	bl	8002b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010c4:	2310      	movs	r3, #16
 80010c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c8:	2301      	movs	r3, #1
 80010ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d0:	2300      	movs	r3, #0
 80010d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010d4:	f107 031c 	add.w	r3, r7, #28
 80010d8:	4619      	mov	r1, r3
 80010da:	480b      	ldr	r0, [pc, #44]	@ (8001108 <MX_GPIO_Init+0x118>)
 80010dc:	f001 fa66 	bl	80025ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010e0:	2310      	movs	r3, #16
 80010e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010e4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ee:	f107 031c 	add.w	r3, r7, #28
 80010f2:	4619      	mov	r1, r3
 80010f4:	4805      	ldr	r0, [pc, #20]	@ (800110c <MX_GPIO_Init+0x11c>)
 80010f6:	f001 fa59 	bl	80025ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010fa:	bf00      	nop
 80010fc:	3730      	adds	r7, #48	@ 0x30
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	58024400 	.word	0x58024400
 8001108:	58021000 	.word	0x58021000
 800110c:	58020c00 	.word	0x58020c00

08001110 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001116:	463b      	mov	r3, r7
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001122:	f000 ff21 	bl	8001f68 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001126:	2301      	movs	r3, #1
 8001128:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800112a:	2300      	movs	r3, #0
 800112c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800112e:	2300      	movs	r3, #0
 8001130:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001132:	231f      	movs	r3, #31
 8001134:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001136:	2387      	movs	r3, #135	@ 0x87
 8001138:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800113a:	2300      	movs	r3, #0
 800113c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800113e:	2300      	movs	r3, #0
 8001140:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001142:	2301      	movs	r3, #1
 8001144:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001146:	2301      	movs	r3, #1
 8001148:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800114e:	2300      	movs	r3, #0
 8001150:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001152:	463b      	mov	r3, r7
 8001154:	4618      	mov	r0, r3
 8001156:	f000 ff3f 	bl	8001fd8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800115a:	2004      	movs	r0, #4
 800115c:	f000 ff1c 	bl	8001f98 <HAL_MPU_Enable>

}
 8001160:	bf00      	nop
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d102      	bne.n	800117e <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8001178:	4b04      	ldr	r3, [pc, #16]	@ (800118c <BSP_PB_Callback+0x24>)
 800117a:	2201      	movs	r2, #1
 800117c:	601a      	str	r2, [r3, #0]
  }
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	240000b4 	.word	0x240000b4

08001190 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001194:	b672      	cpsid	i
}
 8001196:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001198:	bf00      	nop
 800119a:	e7fd      	b.n	8001198 <Error_Handler+0x8>

0800119c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a2:	4b0a      	ldr	r3, [pc, #40]	@ (80011cc <HAL_MspInit+0x30>)
 80011a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011a8:	4a08      	ldr	r2, [pc, #32]	@ (80011cc <HAL_MspInit+0x30>)
 80011aa:	f043 0302 	orr.w	r3, r3, #2
 80011ae:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80011b2:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <HAL_MspInit+0x30>)
 80011b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011b8:	f003 0302 	and.w	r3, r3, #2
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	58024400 	.word	0x58024400

080011d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b0ba      	sub	sp, #232	@ 0xe8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	22c0      	movs	r2, #192	@ 0xc0
 80011ee:	2100      	movs	r1, #0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f007 f8a0 	bl	8008336 <memset>
  if(hspi->Instance==SPI2)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a35      	ldr	r2, [pc, #212]	@ (80012d0 <HAL_SPI_MspInit+0x100>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d163      	bne.n	80012c8 <HAL_SPI_MspInit+0xf8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001200:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001204:	f04f 0300 	mov.w	r3, #0
 8001208:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800120c:	2300      	movs	r3, #0
 800120e:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001210:	f107 0310 	add.w	r3, r7, #16
 8001214:	4618      	mov	r0, r3
 8001216:	f002 fcef 	bl	8003bf8 <HAL_RCCEx_PeriphCLKConfig>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001220:	f7ff ffb6 	bl	8001190 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001224:	4b2b      	ldr	r3, [pc, #172]	@ (80012d4 <HAL_SPI_MspInit+0x104>)
 8001226:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800122a:	4a2a      	ldr	r2, [pc, #168]	@ (80012d4 <HAL_SPI_MspInit+0x104>)
 800122c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001230:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001234:	4b27      	ldr	r3, [pc, #156]	@ (80012d4 <HAL_SPI_MspInit+0x104>)
 8001236:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800123a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001242:	4b24      	ldr	r3, [pc, #144]	@ (80012d4 <HAL_SPI_MspInit+0x104>)
 8001244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001248:	4a22      	ldr	r2, [pc, #136]	@ (80012d4 <HAL_SPI_MspInit+0x104>)
 800124a:	f043 0302 	orr.w	r3, r3, #2
 800124e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001252:	4b20      	ldr	r3, [pc, #128]	@ (80012d4 <HAL_SPI_MspInit+0x104>)
 8001254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001260:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001264:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2302      	movs	r3, #2
 800126a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800126e:	2301      	movs	r3, #1
 8001270:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	2300      	movs	r3, #0
 8001276:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800127a:	2305      	movs	r3, #5
 800127c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001280:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001284:	4619      	mov	r1, r3
 8001286:	4814      	ldr	r0, [pc, #80]	@ (80012d8 <HAL_SPI_MspInit+0x108>)
 8001288:	f001 f990 	bl	80025ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800128c:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001290:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a0:	2300      	movs	r3, #0
 80012a2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012a6:	2305      	movs	r3, #5
 80012a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012b0:	4619      	mov	r1, r3
 80012b2:	4809      	ldr	r0, [pc, #36]	@ (80012d8 <HAL_SPI_MspInit+0x108>)
 80012b4:	f001 f97a 	bl	80025ac <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80012b8:	2200      	movs	r2, #0
 80012ba:	2100      	movs	r1, #0
 80012bc:	2024      	movs	r0, #36	@ 0x24
 80012be:	f000 fe10 	bl	8001ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80012c2:	2024      	movs	r0, #36	@ 0x24
 80012c4:	f000 fe27 	bl	8001f16 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80012c8:	bf00      	nop
 80012ca:	37e8      	adds	r7, #232	@ 0xe8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40003800 	.word	0x40003800
 80012d4:	58024400 	.word	0x58024400
 80012d8:	58020400 	.word	0x58020400

080012dc <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI2)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001318 <HAL_SPI_MspDeInit+0x3c>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d10f      	bne.n	800130e <HAL_SPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 80012ee:	4b0b      	ldr	r3, [pc, #44]	@ (800131c <HAL_SPI_MspDeInit+0x40>)
 80012f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012f4:	4a09      	ldr	r2, [pc, #36]	@ (800131c <HAL_SPI_MspDeInit+0x40>)
 80012f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80012fa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 80012fe:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001302:	4807      	ldr	r0, [pc, #28]	@ (8001320 <HAL_SPI_MspDeInit+0x44>)
 8001304:	f001 fb02 	bl	800290c <HAL_GPIO_DeInit>

    /* SPI2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 8001308:	2024      	movs	r0, #36	@ 0x24
 800130a:	f000 fe12 	bl	8001f32 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40003800 	.word	0x40003800
 800131c:	58024400 	.word	0x58024400
 8001320:	58020400 	.word	0x58020400

08001324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <NMI_Handler+0x4>

0800132c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001330:	bf00      	nop
 8001332:	e7fd      	b.n	8001330 <HardFault_Handler+0x4>

08001334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <MemManage_Handler+0x4>

0800133c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <BusFault_Handler+0x4>

08001344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <UsageFault_Handler+0x4>

0800134c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800137a:	f000 fc63 	bl	8001c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001388:	4802      	ldr	r0, [pc, #8]	@ (8001394 <SPI2_IRQHandler+0x10>)
 800138a:	f005 fb49 	bl	8006a20 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	240000b8 	.word	0x240000b8

08001398 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800139c:	2000      	movs	r0, #0
 800139e:	f000 faef 	bl	8001980 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b086      	sub	sp, #24
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	60f8      	str	r0, [r7, #12]
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	e00a      	b.n	80013ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013b8:	f3af 8000 	nop.w
 80013bc:	4601      	mov	r1, r0
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	1c5a      	adds	r2, r3, #1
 80013c2:	60ba      	str	r2, [r7, #8]
 80013c4:	b2ca      	uxtb	r2, r1
 80013c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	3301      	adds	r3, #1
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	dbf0      	blt.n	80013b8 <_read+0x12>
  }

  return len;
 80013d6:	687b      	ldr	r3, [r7, #4]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	e009      	b.n	8001406 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	1c5a      	adds	r2, r3, #1
 80013f6:	60ba      	str	r2, [r7, #8]
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 fb34 	bl	8001a68 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	3301      	adds	r3, #1
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	429a      	cmp	r2, r3
 800140c:	dbf1      	blt.n	80013f2 <_write+0x12>
  }
  return len;
 800140e:	687b      	ldr	r3, [r7, #4]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <_close>:

int _close(int file)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001420:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001424:	4618      	mov	r0, r3
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001440:	605a      	str	r2, [r3, #4]
  return 0;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <_isatty>:

int _isatty(int file)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001458:	2301      	movs	r3, #1
}
 800145a:	4618      	mov	r0, r3
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001466:	b480      	push	{r7}
 8001468:	b085      	sub	sp, #20
 800146a:	af00      	add	r7, sp, #0
 800146c:	60f8      	str	r0, [r7, #12]
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001488:	4a14      	ldr	r2, [pc, #80]	@ (80014dc <_sbrk+0x5c>)
 800148a:	4b15      	ldr	r3, [pc, #84]	@ (80014e0 <_sbrk+0x60>)
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001494:	4b13      	ldr	r3, [pc, #76]	@ (80014e4 <_sbrk+0x64>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d102      	bne.n	80014a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800149c:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <_sbrk+0x64>)
 800149e:	4a12      	ldr	r2, [pc, #72]	@ (80014e8 <_sbrk+0x68>)
 80014a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014a2:	4b10      	ldr	r3, [pc, #64]	@ (80014e4 <_sbrk+0x64>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d207      	bcs.n	80014c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b0:	f006 ff90 	bl	80083d4 <__errno>
 80014b4:	4603      	mov	r3, r0
 80014b6:	220c      	movs	r2, #12
 80014b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ba:	f04f 33ff 	mov.w	r3, #4294967295
 80014be:	e009      	b.n	80014d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c0:	4b08      	ldr	r3, [pc, #32]	@ (80014e4 <_sbrk+0x64>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014c6:	4b07      	ldr	r3, [pc, #28]	@ (80014e4 <_sbrk+0x64>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4413      	add	r3, r2
 80014ce:	4a05      	ldr	r2, [pc, #20]	@ (80014e4 <_sbrk+0x64>)
 80014d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014d2:	68fb      	ldr	r3, [r7, #12]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	24080000 	.word	0x24080000
 80014e0:	00000400 	.word	0x00000400
 80014e4:	24000140 	.word	0x24000140
 80014e8:	24000338 	.word	0x24000338

080014ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014f0:	4b43      	ldr	r3, [pc, #268]	@ (8001600 <SystemInit+0x114>)
 80014f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014f6:	4a42      	ldr	r2, [pc, #264]	@ (8001600 <SystemInit+0x114>)
 80014f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001500:	4b40      	ldr	r3, [pc, #256]	@ (8001604 <SystemInit+0x118>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 030f 	and.w	r3, r3, #15
 8001508:	2b06      	cmp	r3, #6
 800150a:	d807      	bhi.n	800151c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800150c:	4b3d      	ldr	r3, [pc, #244]	@ (8001604 <SystemInit+0x118>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f023 030f 	bic.w	r3, r3, #15
 8001514:	4a3b      	ldr	r2, [pc, #236]	@ (8001604 <SystemInit+0x118>)
 8001516:	f043 0307 	orr.w	r3, r3, #7
 800151a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800151c:	4b3a      	ldr	r3, [pc, #232]	@ (8001608 <SystemInit+0x11c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a39      	ldr	r2, [pc, #228]	@ (8001608 <SystemInit+0x11c>)
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001528:	4b37      	ldr	r3, [pc, #220]	@ (8001608 <SystemInit+0x11c>)
 800152a:	2200      	movs	r2, #0
 800152c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800152e:	4b36      	ldr	r3, [pc, #216]	@ (8001608 <SystemInit+0x11c>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	4935      	ldr	r1, [pc, #212]	@ (8001608 <SystemInit+0x11c>)
 8001534:	4b35      	ldr	r3, [pc, #212]	@ (800160c <SystemInit+0x120>)
 8001536:	4013      	ands	r3, r2
 8001538:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800153a:	4b32      	ldr	r3, [pc, #200]	@ (8001604 <SystemInit+0x118>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0308 	and.w	r3, r3, #8
 8001542:	2b00      	cmp	r3, #0
 8001544:	d007      	beq.n	8001556 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001546:	4b2f      	ldr	r3, [pc, #188]	@ (8001604 <SystemInit+0x118>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f023 030f 	bic.w	r3, r3, #15
 800154e:	4a2d      	ldr	r2, [pc, #180]	@ (8001604 <SystemInit+0x118>)
 8001550:	f043 0307 	orr.w	r3, r3, #7
 8001554:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001556:	4b2c      	ldr	r3, [pc, #176]	@ (8001608 <SystemInit+0x11c>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800155c:	4b2a      	ldr	r3, [pc, #168]	@ (8001608 <SystemInit+0x11c>)
 800155e:	2200      	movs	r2, #0
 8001560:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001562:	4b29      	ldr	r3, [pc, #164]	@ (8001608 <SystemInit+0x11c>)
 8001564:	2200      	movs	r2, #0
 8001566:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001568:	4b27      	ldr	r3, [pc, #156]	@ (8001608 <SystemInit+0x11c>)
 800156a:	4a29      	ldr	r2, [pc, #164]	@ (8001610 <SystemInit+0x124>)
 800156c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800156e:	4b26      	ldr	r3, [pc, #152]	@ (8001608 <SystemInit+0x11c>)
 8001570:	4a28      	ldr	r2, [pc, #160]	@ (8001614 <SystemInit+0x128>)
 8001572:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001574:	4b24      	ldr	r3, [pc, #144]	@ (8001608 <SystemInit+0x11c>)
 8001576:	4a28      	ldr	r2, [pc, #160]	@ (8001618 <SystemInit+0x12c>)
 8001578:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800157a:	4b23      	ldr	r3, [pc, #140]	@ (8001608 <SystemInit+0x11c>)
 800157c:	2200      	movs	r2, #0
 800157e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001580:	4b21      	ldr	r3, [pc, #132]	@ (8001608 <SystemInit+0x11c>)
 8001582:	4a25      	ldr	r2, [pc, #148]	@ (8001618 <SystemInit+0x12c>)
 8001584:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001586:	4b20      	ldr	r3, [pc, #128]	@ (8001608 <SystemInit+0x11c>)
 8001588:	2200      	movs	r2, #0
 800158a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800158c:	4b1e      	ldr	r3, [pc, #120]	@ (8001608 <SystemInit+0x11c>)
 800158e:	4a22      	ldr	r2, [pc, #136]	@ (8001618 <SystemInit+0x12c>)
 8001590:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001592:	4b1d      	ldr	r3, [pc, #116]	@ (8001608 <SystemInit+0x11c>)
 8001594:	2200      	movs	r2, #0
 8001596:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001598:	4b1b      	ldr	r3, [pc, #108]	@ (8001608 <SystemInit+0x11c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a1a      	ldr	r2, [pc, #104]	@ (8001608 <SystemInit+0x11c>)
 800159e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015a4:	4b18      	ldr	r3, [pc, #96]	@ (8001608 <SystemInit+0x11c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80015aa:	4b1c      	ldr	r3, [pc, #112]	@ (800161c <SystemInit+0x130>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001620 <SystemInit+0x134>)
 80015b0:	4013      	ands	r3, r2
 80015b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80015b6:	d202      	bcs.n	80015be <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80015b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001624 <SystemInit+0x138>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80015be:	4b12      	ldr	r3, [pc, #72]	@ (8001608 <SystemInit+0x11c>)
 80015c0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80015c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d113      	bne.n	80015f4 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80015cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001608 <SystemInit+0x11c>)
 80015ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80015d2:	4a0d      	ldr	r2, [pc, #52]	@ (8001608 <SystemInit+0x11c>)
 80015d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015d8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80015dc:	4b12      	ldr	r3, [pc, #72]	@ (8001628 <SystemInit+0x13c>)
 80015de:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80015e2:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80015e4:	4b08      	ldr	r3, [pc, #32]	@ (8001608 <SystemInit+0x11c>)
 80015e6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80015ea:	4a07      	ldr	r2, [pc, #28]	@ (8001608 <SystemInit+0x11c>)
 80015ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80015f0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000ed00 	.word	0xe000ed00
 8001604:	52002000 	.word	0x52002000
 8001608:	58024400 	.word	0x58024400
 800160c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001610:	02020200 	.word	0x02020200
 8001614:	01ff0000 	.word	0x01ff0000
 8001618:	01010280 	.word	0x01010280
 800161c:	5c001000 	.word	0x5c001000
 8001620:	ffff0000 	.word	0xffff0000
 8001624:	51008108 	.word	0x51008108
 8001628:	52004000 	.word	0x52004000

0800162c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001630:	4b09      	ldr	r3, [pc, #36]	@ (8001658 <ExitRun0Mode+0x2c>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	4a08      	ldr	r2, [pc, #32]	@ (8001658 <ExitRun0Mode+0x2c>)
 8001636:	f043 0302 	orr.w	r3, r3, #2
 800163a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800163c:	bf00      	nop
 800163e:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <ExitRun0Mode+0x2c>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f9      	beq.n	800163e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800164a:	bf00      	nop
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	58024800 	.word	0x58024800

0800165c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800165c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001698 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001660:	f7ff ffe4 	bl	800162c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001664:	f7ff ff42 	bl	80014ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001668:	480c      	ldr	r0, [pc, #48]	@ (800169c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800166a:	490d      	ldr	r1, [pc, #52]	@ (80016a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800166c:	4a0d      	ldr	r2, [pc, #52]	@ (80016a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001670:	e002      	b.n	8001678 <LoopCopyDataInit>

08001672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001676:	3304      	adds	r3, #4

08001678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800167c:	d3f9      	bcc.n	8001672 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800167e:	4a0a      	ldr	r2, [pc, #40]	@ (80016a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001680:	4c0a      	ldr	r4, [pc, #40]	@ (80016ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001684:	e001      	b.n	800168a <LoopFillZerobss>

08001686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001688:	3204      	adds	r2, #4

0800168a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800168c:	d3fb      	bcc.n	8001686 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800168e:	f006 fea7 	bl	80083e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001692:	f7ff f9ff 	bl	8000a94 <main>
  bx  lr
 8001696:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001698:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800169c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016a0:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 80016a4:	0800b074 	.word	0x0800b074
  ldr r2, =_sbss
 80016a8:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 80016ac:	24000334 	.word	0x24000334

080016b0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016b0:	e7fe      	b.n	80016b0 <ADC3_IRQHandler>
	...

080016b4 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08c      	sub	sp, #48	@ 0x30
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80016be:	2300      	movs	r3, #0
 80016c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d009      	beq.n	80016dc <BSP_LED_Init+0x28>
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d006      	beq.n	80016dc <BSP_LED_Init+0x28>
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d003      	beq.n	80016dc <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80016d4:	f06f 0301 	mvn.w	r3, #1
 80016d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016da:	e055      	b.n	8001788 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10f      	bne.n	8001702 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80016e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001794 <BSP_LED_Init+0xe0>)
 80016e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016e8:	4a2a      	ldr	r2, [pc, #168]	@ (8001794 <BSP_LED_Init+0xe0>)
 80016ea:	f043 0302 	orr.w	r3, r3, #2
 80016ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016f2:	4b28      	ldr	r3, [pc, #160]	@ (8001794 <BSP_LED_Init+0xe0>)
 80016f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	e021      	b.n	8001746 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d10f      	bne.n	8001728 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001708:	4b22      	ldr	r3, [pc, #136]	@ (8001794 <BSP_LED_Init+0xe0>)
 800170a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800170e:	4a21      	ldr	r2, [pc, #132]	@ (8001794 <BSP_LED_Init+0xe0>)
 8001710:	f043 0310 	orr.w	r3, r3, #16
 8001714:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001718:	4b1e      	ldr	r3, [pc, #120]	@ (8001794 <BSP_LED_Init+0xe0>)
 800171a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800171e:	f003 0310 	and.w	r3, r3, #16
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	e00e      	b.n	8001746 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001728:	4b1a      	ldr	r3, [pc, #104]	@ (8001794 <BSP_LED_Init+0xe0>)
 800172a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800172e:	4a19      	ldr	r2, [pc, #100]	@ (8001794 <BSP_LED_Init+0xe0>)
 8001730:	f043 0302 	orr.w	r3, r3, #2
 8001734:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001738:	4b16      	ldr	r3, [pc, #88]	@ (8001794 <BSP_LED_Init+0xe0>)
 800173a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	4a13      	ldr	r2, [pc, #76]	@ (8001798 <BSP_LED_Init+0xe4>)
 800174a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800174e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001750:	2301      	movs	r3, #1
 8001752:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001758:	2303      	movs	r3, #3
 800175a:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	4a0f      	ldr	r2, [pc, #60]	@ (800179c <BSP_LED_Init+0xe8>)
 8001760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001764:	f107 0218 	add.w	r2, r7, #24
 8001768:	4611      	mov	r1, r2
 800176a:	4618      	mov	r0, r3
 800176c:	f000 ff1e 	bl	80025ac <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	4a0a      	ldr	r2, [pc, #40]	@ (800179c <BSP_LED_Init+0xe8>)
 8001774:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	4a07      	ldr	r2, [pc, #28]	@ (8001798 <BSP_LED_Init+0xe4>)
 800177c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001780:	2200      	movs	r2, #0
 8001782:	4619      	mov	r1, r3
 8001784:	f001 f9e4 	bl	8002b50 <HAL_GPIO_WritePin>
  }

  return ret;
 8001788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800178a:	4618      	mov	r0, r3
 800178c:	3730      	adds	r7, #48	@ 0x30
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	58024400 	.word	0x58024400
 8001798:	0800b00c 	.word	0x0800b00c
 800179c:	2400000c 	.word	0x2400000c

080017a0 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d009      	beq.n	80017c8 <BSP_LED_On+0x28>
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d006      	beq.n	80017c8 <BSP_LED_On+0x28>
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d003      	beq.n	80017c8 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80017c0:	f06f 0301 	mvn.w	r3, #1
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	e00b      	b.n	80017e0 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	4a08      	ldr	r2, [pc, #32]	@ (80017ec <BSP_LED_On+0x4c>)
 80017cc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	4a07      	ldr	r2, [pc, #28]	@ (80017f0 <BSP_LED_On+0x50>)
 80017d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017d8:	2201      	movs	r2, #1
 80017da:	4619      	mov	r1, r3
 80017dc:	f001 f9b8 	bl	8002b50 <HAL_GPIO_WritePin>
  }

  return ret;
 80017e0:	68fb      	ldr	r3, [r7, #12]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	2400000c 	.word	0x2400000c
 80017f0:	0800b00c 	.word	0x0800b00c

080017f4 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d009      	beq.n	800181c <BSP_LED_Off+0x28>
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d006      	beq.n	800181c <BSP_LED_Off+0x28>
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	2b02      	cmp	r3, #2
 8001812:	d003      	beq.n	800181c <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001814:	f06f 0301 	mvn.w	r3, #1
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	e00b      	b.n	8001834 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	4a08      	ldr	r2, [pc, #32]	@ (8001840 <BSP_LED_Off+0x4c>)
 8001820:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	4a07      	ldr	r2, [pc, #28]	@ (8001844 <BSP_LED_Off+0x50>)
 8001828:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800182c:	2200      	movs	r2, #0
 800182e:	4619      	mov	r1, r3
 8001830:	f001 f98e 	bl	8002b50 <HAL_GPIO_WritePin>
  }

  return ret;
 8001834:	68fb      	ldr	r3, [r7, #12]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	2400000c 	.word	0x2400000c
 8001844:	0800b00c 	.word	0x0800b00c

08001848 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d009      	beq.n	8001870 <BSP_LED_Toggle+0x28>
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d006      	beq.n	8001870 <BSP_LED_Toggle+0x28>
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	2b02      	cmp	r3, #2
 8001866:	d003      	beq.n	8001870 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001868:	f06f 0301 	mvn.w	r3, #1
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	e00b      	b.n	8001888 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	4a08      	ldr	r2, [pc, #32]	@ (8001894 <BSP_LED_Toggle+0x4c>)
 8001874:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	4907      	ldr	r1, [pc, #28]	@ (8001898 <BSP_LED_Toggle+0x50>)
 800187c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001880:	4619      	mov	r1, r3
 8001882:	4610      	mov	r0, r2
 8001884:	f001 f97d 	bl	8002b82 <HAL_GPIO_TogglePin>
  }

  return ret;
 8001888:	68fb      	ldr	r3, [r7, #12]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	2400000c 	.word	0x2400000c
 8001898:	0800b00c 	.word	0x0800b00c

0800189c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b088      	sub	sp, #32
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	460a      	mov	r2, r1
 80018a6:	71fb      	strb	r3, [r7, #7]
 80018a8:	4613      	mov	r3, r2
 80018aa:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80018ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001968 <BSP_PB_Init+0xcc>)
 80018ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018b2:	4a2d      	ldr	r2, [pc, #180]	@ (8001968 <BSP_PB_Init+0xcc>)
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001968 <BSP_PB_Init+0xcc>)
 80018be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018c2:	f003 0304 	and.w	r3, r3, #4
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80018ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018ce:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80018d0:	2302      	movs	r3, #2
 80018d2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80018d4:	2302      	movs	r3, #2
 80018d6:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80018d8:	79bb      	ldrb	r3, [r7, #6]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10c      	bne.n	80018f8 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	4a21      	ldr	r2, [pc, #132]	@ (800196c <BSP_PB_Init+0xd0>)
 80018e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ea:	f107 020c 	add.w	r2, r7, #12
 80018ee:	4611      	mov	r1, r2
 80018f0:	4618      	mov	r0, r3
 80018f2:	f000 fe5b 	bl	80025ac <HAL_GPIO_Init>
 80018f6:	e031      	b.n	800195c <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80018f8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018fc:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	4a1a      	ldr	r2, [pc, #104]	@ (800196c <BSP_PB_Init+0xd0>)
 8001902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001906:	f107 020c 	add.w	r2, r7, #12
 800190a:	4611      	mov	r1, r2
 800190c:	4618      	mov	r0, r3
 800190e:	f000 fe4d 	bl	80025ac <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	4a16      	ldr	r2, [pc, #88]	@ (8001970 <BSP_PB_Init+0xd4>)
 8001918:	441a      	add	r2, r3
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	4915      	ldr	r1, [pc, #84]	@ (8001974 <BSP_PB_Init+0xd8>)
 800191e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001922:	4619      	mov	r1, r3
 8001924:	4610      	mov	r0, r2
 8001926:	f000 fdfc 	bl	8002522 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	4a10      	ldr	r2, [pc, #64]	@ (8001970 <BSP_PB_Init+0xd4>)
 8001930:	1898      	adds	r0, r3, r2
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	4a10      	ldr	r2, [pc, #64]	@ (8001978 <BSP_PB_Init+0xdc>)
 8001936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193a:	461a      	mov	r2, r3
 800193c:	2100      	movs	r1, #0
 800193e:	f000 fdd1 	bl	80024e4 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001942:	2028      	movs	r0, #40	@ 0x28
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	4a0d      	ldr	r2, [pc, #52]	@ (800197c <BSP_PB_Init+0xe0>)
 8001948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194c:	2200      	movs	r2, #0
 800194e:	4619      	mov	r1, r3
 8001950:	f000 fac7 	bl	8001ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001954:	2328      	movs	r3, #40	@ 0x28
 8001956:	4618      	mov	r0, r3
 8001958:	f000 fadd 	bl	8001f16 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3720      	adds	r7, #32
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	58024400 	.word	0x58024400
 800196c:	24000018 	.word	0x24000018
 8001970:	24000144 	.word	0x24000144
 8001974:	0800b014 	.word	0x0800b014
 8001978:	2400001c 	.word	0x2400001c
 800197c:	24000020 	.word	0x24000020

08001980 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	4a04      	ldr	r2, [pc, #16]	@ (80019a0 <BSP_PB_IRQHandler+0x20>)
 8001990:	4413      	add	r3, r2
 8001992:	4618      	mov	r0, r3
 8001994:	f000 fdda 	bl	800254c <HAL_EXTI_IRQHandler>
}
 8001998:	bf00      	nop
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	24000144 	.word	0x24000144

080019a4 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	6039      	str	r1, [r7, #0]
 80019ae:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80019ba:	f06f 0301 	mvn.w	r3, #1
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	e018      	b.n	80019f4 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	2294      	movs	r2, #148	@ 0x94
 80019c6:	fb02 f303 	mul.w	r3, r2, r3
 80019ca:	4a0d      	ldr	r2, [pc, #52]	@ (8001a00 <BSP_COM_Init+0x5c>)
 80019cc:	4413      	add	r3, r2
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 f86e 	bl	8001ab0 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	2294      	movs	r2, #148	@ 0x94
 80019d8:	fb02 f303 	mul.w	r3, r2, r3
 80019dc:	4a08      	ldr	r2, [pc, #32]	@ (8001a00 <BSP_COM_Init+0x5c>)
 80019de:	4413      	add	r3, r2
 80019e0:	6839      	ldr	r1, [r7, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 f80e 	bl	8001a04 <MX_USART3_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d002      	beq.n	80019f4 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80019ee:	f06f 0303 	mvn.w	r3, #3
 80019f2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80019f4:	68fb      	ldr	r3, [r7, #12]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	2400014c 	.word	0x2400014c

08001a04 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001a0e:	4b15      	ldr	r3, [pc, #84]	@ (8001a64 <MX_USART3_Init+0x60>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	220c      	movs	r2, #12
 8001a22:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	895b      	ldrh	r3, [r3, #10]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	891b      	ldrh	r3, [r3, #8]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	899b      	ldrh	r3, [r3, #12]
 8001a44:	461a      	mov	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a50:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f005 fae7 	bl	8007026 <HAL_UART_Init>
 8001a58:	4603      	mov	r3, r0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	24000008 	.word	0x24000008

08001a68 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001a70:	4b09      	ldr	r3, [pc, #36]	@ (8001a98 <__io_putchar+0x30>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	461a      	mov	r2, r3
 8001a76:	2394      	movs	r3, #148	@ 0x94
 8001a78:	fb02 f303 	mul.w	r3, r2, r3
 8001a7c:	4a07      	ldr	r2, [pc, #28]	@ (8001a9c <__io_putchar+0x34>)
 8001a7e:	1898      	adds	r0, r3, r2
 8001a80:	1d39      	adds	r1, r7, #4
 8001a82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a86:	2201      	movs	r2, #1
 8001a88:	f005 fb27 	bl	80070da <HAL_UART_Transmit>
  return ch;
 8001a8c:	687b      	ldr	r3, [r7, #4]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	240001e0 	.word	0x240001e0
 8001a9c:	2400014c 	.word	0x2400014c

08001aa0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	f7ff fb5f 	bl	8001168 <BSP_PB_Callback>
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08a      	sub	sp, #40	@ 0x28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001ab8:	4b27      	ldr	r3, [pc, #156]	@ (8001b58 <COM1_MspInit+0xa8>)
 8001aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001abe:	4a26      	ldr	r2, [pc, #152]	@ (8001b58 <COM1_MspInit+0xa8>)
 8001ac0:	f043 0308 	orr.w	r3, r3, #8
 8001ac4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ac8:	4b23      	ldr	r3, [pc, #140]	@ (8001b58 <COM1_MspInit+0xa8>)
 8001aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ace:	f003 0308 	and.w	r3, r3, #8
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001ad6:	4b20      	ldr	r3, [pc, #128]	@ (8001b58 <COM1_MspInit+0xa8>)
 8001ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001adc:	4a1e      	ldr	r2, [pc, #120]	@ (8001b58 <COM1_MspInit+0xa8>)
 8001ade:	f043 0308 	orr.w	r3, r3, #8
 8001ae2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ae6:	4b1c      	ldr	r3, [pc, #112]	@ (8001b58 <COM1_MspInit+0xa8>)
 8001ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aec:	f003 0308 	and.w	r3, r3, #8
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001af4:	4b18      	ldr	r3, [pc, #96]	@ (8001b58 <COM1_MspInit+0xa8>)
 8001af6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001afa:	4a17      	ldr	r2, [pc, #92]	@ (8001b58 <COM1_MspInit+0xa8>)
 8001afc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b00:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b04:	4b14      	ldr	r3, [pc, #80]	@ (8001b58 <COM1_MspInit+0xa8>)
 8001b06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8001b12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b16:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001b20:	2301      	movs	r3, #1
 8001b22:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001b24:	2307      	movs	r3, #7
 8001b26:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	480b      	ldr	r0, [pc, #44]	@ (8001b5c <COM1_MspInit+0xac>)
 8001b30:	f000 fd3c 	bl	80025ac <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001b34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b38:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001b3e:	2307      	movs	r3, #7
 8001b40:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001b42:	f107 0314 	add.w	r3, r7, #20
 8001b46:	4619      	mov	r1, r3
 8001b48:	4804      	ldr	r0, [pc, #16]	@ (8001b5c <COM1_MspInit+0xac>)
 8001b4a:	f000 fd2f 	bl	80025ac <HAL_GPIO_Init>
}
 8001b4e:	bf00      	nop
 8001b50:	3728      	adds	r7, #40	@ 0x28
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	58024400 	.word	0x58024400
 8001b5c:	58020c00 	.word	0x58020c00

08001b60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b66:	2003      	movs	r0, #3
 8001b68:	f000 f9b0 	bl	8001ecc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b6c:	f001 fe6e 	bl	800384c <HAL_RCC_GetSysClockFreq>
 8001b70:	4602      	mov	r2, r0
 8001b72:	4b15      	ldr	r3, [pc, #84]	@ (8001bc8 <HAL_Init+0x68>)
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	0a1b      	lsrs	r3, r3, #8
 8001b78:	f003 030f 	and.w	r3, r3, #15
 8001b7c:	4913      	ldr	r1, [pc, #76]	@ (8001bcc <HAL_Init+0x6c>)
 8001b7e:	5ccb      	ldrb	r3, [r1, r3]
 8001b80:	f003 031f 	and.w	r3, r3, #31
 8001b84:	fa22 f303 	lsr.w	r3, r2, r3
 8001b88:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc8 <HAL_Init+0x68>)
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	4a0e      	ldr	r2, [pc, #56]	@ (8001bcc <HAL_Init+0x6c>)
 8001b94:	5cd3      	ldrb	r3, [r2, r3]
 8001b96:	f003 031f 	and.w	r3, r3, #31
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba0:	4a0b      	ldr	r2, [pc, #44]	@ (8001bd0 <HAL_Init+0x70>)
 8001ba2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ba4:	4a0b      	ldr	r2, [pc, #44]	@ (8001bd4 <HAL_Init+0x74>)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001baa:	2000      	movs	r0, #0
 8001bac:	f000 f814 	bl	8001bd8 <HAL_InitTick>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e002      	b.n	8001bc0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001bba:	f7ff faef 	bl	800119c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	58024400 	.word	0x58024400
 8001bcc:	0800affc 	.word	0x0800affc
 8001bd0:	24000004 	.word	0x24000004
 8001bd4:	24000000 	.word	0x24000000

08001bd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001be0:	4b15      	ldr	r3, [pc, #84]	@ (8001c38 <HAL_InitTick+0x60>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e021      	b.n	8001c30 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001bec:	4b13      	ldr	r3, [pc, #76]	@ (8001c3c <HAL_InitTick+0x64>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4b11      	ldr	r3, [pc, #68]	@ (8001c38 <HAL_InitTick+0x60>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 f9a3 	bl	8001f4e <HAL_SYSTICK_Config>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e00e      	b.n	8001c30 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b0f      	cmp	r3, #15
 8001c16:	d80a      	bhi.n	8001c2e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c20:	f000 f95f 	bl	8001ee2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c24:	4a06      	ldr	r2, [pc, #24]	@ (8001c40 <HAL_InitTick+0x68>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e000      	b.n	8001c30 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	24000028 	.word	0x24000028
 8001c3c:	24000000 	.word	0x24000000
 8001c40:	24000024 	.word	0x24000024

08001c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c48:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <HAL_IncTick+0x20>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <HAL_IncTick+0x24>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4413      	add	r3, r2
 8001c54:	4a04      	ldr	r2, [pc, #16]	@ (8001c68 <HAL_IncTick+0x24>)
 8001c56:	6013      	str	r3, [r2, #0]
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	24000028 	.word	0x24000028
 8001c68:	240001e4 	.word	0x240001e4

08001c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c70:	4b03      	ldr	r3, [pc, #12]	@ (8001c80 <HAL_GetTick+0x14>)
 8001c72:	681b      	ldr	r3, [r3, #0]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	240001e4 	.word	0x240001e4

08001c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c8c:	f7ff ffee 	bl	8001c6c <HAL_GetTick>
 8001c90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c9c:	d005      	beq.n	8001caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc8 <HAL_Delay+0x44>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001caa:	bf00      	nop
 8001cac:	f7ff ffde 	bl	8001c6c <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d8f7      	bhi.n	8001cac <HAL_Delay+0x28>
  {
  }
}
 8001cbc:	bf00      	nop
 8001cbe:	bf00      	nop
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	24000028 	.word	0x24000028

08001ccc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001cd0:	4b03      	ldr	r3, [pc, #12]	@ (8001ce0 <HAL_GetREVID+0x14>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	0c1b      	lsrs	r3, r3, #16
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	5c001000 	.word	0x5c001000

08001ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d24 <__NVIC_SetPriorityGrouping+0x40>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d00:	4013      	ands	r3, r2
 8001d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d0c:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <__NVIC_SetPriorityGrouping+0x44>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d12:	4a04      	ldr	r2, [pc, #16]	@ (8001d24 <__NVIC_SetPriorityGrouping+0x40>)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	60d3      	str	r3, [r2, #12]
}
 8001d18:	bf00      	nop
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000ed00 	.word	0xe000ed00
 8001d28:	05fa0000 	.word	0x05fa0000

08001d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d30:	4b04      	ldr	r3, [pc, #16]	@ (8001d44 <__NVIC_GetPriorityGrouping+0x18>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	0a1b      	lsrs	r3, r3, #8
 8001d36:	f003 0307 	and.w	r3, r3, #7
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	db0b      	blt.n	8001d72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d5a:	88fb      	ldrh	r3, [r7, #6]
 8001d5c:	f003 021f 	and.w	r2, r3, #31
 8001d60:	4907      	ldr	r1, [pc, #28]	@ (8001d80 <__NVIC_EnableIRQ+0x38>)
 8001d62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d66:	095b      	lsrs	r3, r3, #5
 8001d68:	2001      	movs	r0, #1
 8001d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	e000e100 	.word	0xe000e100

08001d84 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	db12      	blt.n	8001dbc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d96:	88fb      	ldrh	r3, [r7, #6]
 8001d98:	f003 021f 	and.w	r2, r3, #31
 8001d9c:	490a      	ldr	r1, [pc, #40]	@ (8001dc8 <__NVIC_DisableIRQ+0x44>)
 8001d9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001da2:	095b      	lsrs	r3, r3, #5
 8001da4:	2001      	movs	r0, #1
 8001da6:	fa00 f202 	lsl.w	r2, r0, r2
 8001daa:	3320      	adds	r3, #32
 8001dac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001db0:	f3bf 8f4f 	dsb	sy
}
 8001db4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001db6:	f3bf 8f6f 	isb	sy
}
 8001dba:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	e000e100 	.word	0xe000e100

08001dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	6039      	str	r1, [r7, #0]
 8001dd6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	db0a      	blt.n	8001df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	490c      	ldr	r1, [pc, #48]	@ (8001e18 <__NVIC_SetPriority+0x4c>)
 8001de6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dea:	0112      	lsls	r2, r2, #4
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	440b      	add	r3, r1
 8001df0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df4:	e00a      	b.n	8001e0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	4908      	ldr	r1, [pc, #32]	@ (8001e1c <__NVIC_SetPriority+0x50>)
 8001dfc:	88fb      	ldrh	r3, [r7, #6]
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	3b04      	subs	r3, #4
 8001e04:	0112      	lsls	r2, r2, #4
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	440b      	add	r3, r1
 8001e0a:	761a      	strb	r2, [r3, #24]
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000e100 	.word	0xe000e100
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b089      	sub	sp, #36	@ 0x24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f1c3 0307 	rsb	r3, r3, #7
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	bf28      	it	cs
 8001e3e:	2304      	movcs	r3, #4
 8001e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3304      	adds	r3, #4
 8001e46:	2b06      	cmp	r3, #6
 8001e48:	d902      	bls.n	8001e50 <NVIC_EncodePriority+0x30>
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	3b03      	subs	r3, #3
 8001e4e:	e000      	b.n	8001e52 <NVIC_EncodePriority+0x32>
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e54:	f04f 32ff 	mov.w	r2, #4294967295
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43da      	mvns	r2, r3
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	401a      	ands	r2, r3
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e68:	f04f 31ff 	mov.w	r1, #4294967295
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e72:	43d9      	mvns	r1, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e78:	4313      	orrs	r3, r2
         );
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3724      	adds	r7, #36	@ 0x24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
	...

08001e88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3b01      	subs	r3, #1
 8001e94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e98:	d301      	bcc.n	8001e9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e00f      	b.n	8001ebe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec8 <SysTick_Config+0x40>)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ea6:	210f      	movs	r1, #15
 8001ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eac:	f7ff ff8e 	bl	8001dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb0:	4b05      	ldr	r3, [pc, #20]	@ (8001ec8 <SysTick_Config+0x40>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eb6:	4b04      	ldr	r3, [pc, #16]	@ (8001ec8 <SysTick_Config+0x40>)
 8001eb8:	2207      	movs	r2, #7
 8001eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	e000e010 	.word	0xe000e010

08001ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff ff05 	bl	8001ce4 <__NVIC_SetPriorityGrouping>
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b086      	sub	sp, #24
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	4603      	mov	r3, r0
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
 8001eee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ef0:	f7ff ff1c 	bl	8001d2c <__NVIC_GetPriorityGrouping>
 8001ef4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	68b9      	ldr	r1, [r7, #8]
 8001efa:	6978      	ldr	r0, [r7, #20]
 8001efc:	f7ff ff90 	bl	8001e20 <NVIC_EncodePriority>
 8001f00:	4602      	mov	r2, r0
 8001f02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f06:	4611      	mov	r1, r2
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff ff5f 	bl	8001dcc <__NVIC_SetPriority>
}
 8001f0e:	bf00      	nop
 8001f10:	3718      	adds	r7, #24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff ff0f 	bl	8001d48 <__NVIC_EnableIRQ>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b082      	sub	sp, #8
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	4603      	mov	r3, r0
 8001f3a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001f3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff ff1f 	bl	8001d84 <__NVIC_DisableIRQ>
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff ff96 	bl	8001e88 <SysTick_Config>
 8001f5c:	4603      	mov	r3, r0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001f6c:	f3bf 8f5f 	dmb	sy
}
 8001f70:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001f72:	4b07      	ldr	r3, [pc, #28]	@ (8001f90 <HAL_MPU_Disable+0x28>)
 8001f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f76:	4a06      	ldr	r2, [pc, #24]	@ (8001f90 <HAL_MPU_Disable+0x28>)
 8001f78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f7c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001f7e:	4b05      	ldr	r3, [pc, #20]	@ (8001f94 <HAL_MPU_Disable+0x2c>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	605a      	str	r2, [r3, #4]
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	e000ed00 	.word	0xe000ed00
 8001f94:	e000ed90 	.word	0xe000ed90

08001f98 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001fa0:	4a0b      	ldr	r2, [pc, #44]	@ (8001fd0 <HAL_MPU_Enable+0x38>)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001faa:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd4 <HAL_MPU_Enable+0x3c>)
 8001fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fae:	4a09      	ldr	r2, [pc, #36]	@ (8001fd4 <HAL_MPU_Enable+0x3c>)
 8001fb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fb4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001fb6:	f3bf 8f4f 	dsb	sy
}
 8001fba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001fbc:	f3bf 8f6f 	isb	sy
}
 8001fc0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	e000ed90 	.word	0xe000ed90
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	785a      	ldrb	r2, [r3, #1]
 8001fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8002054 <HAL_MPU_ConfigRegion+0x7c>)
 8001fe6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8002054 <HAL_MPU_ConfigRegion+0x7c>)
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	4a19      	ldr	r2, [pc, #100]	@ (8002054 <HAL_MPU_ConfigRegion+0x7c>)
 8001fee:	f023 0301 	bic.w	r3, r3, #1
 8001ff2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001ff4:	4a17      	ldr	r2, [pc, #92]	@ (8002054 <HAL_MPU_ConfigRegion+0x7c>)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	7b1b      	ldrb	r3, [r3, #12]
 8002000:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	7adb      	ldrb	r3, [r3, #11]
 8002006:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002008:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	7a9b      	ldrb	r3, [r3, #10]
 800200e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002010:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	7b5b      	ldrb	r3, [r3, #13]
 8002016:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002018:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	7b9b      	ldrb	r3, [r3, #14]
 800201e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002020:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	7bdb      	ldrb	r3, [r3, #15]
 8002026:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002028:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	7a5b      	ldrb	r3, [r3, #9]
 800202e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002030:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	7a1b      	ldrb	r3, [r3, #8]
 8002036:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002038:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	7812      	ldrb	r2, [r2, #0]
 800203e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002040:	4a04      	ldr	r2, [pc, #16]	@ (8002054 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002042:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002044:	6113      	str	r3, [r2, #16]
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	e000ed90 	.word	0xe000ed90

08002058 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e237      	b.n	80024da <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d004      	beq.n	8002080 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2280      	movs	r2, #128	@ 0x80
 800207a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e22c      	b.n	80024da <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a5c      	ldr	r2, [pc, #368]	@ (80021f8 <HAL_DMA_Abort_IT+0x1a0>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d04a      	beq.n	8002120 <HAL_DMA_Abort_IT+0xc8>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a5b      	ldr	r2, [pc, #364]	@ (80021fc <HAL_DMA_Abort_IT+0x1a4>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d045      	beq.n	8002120 <HAL_DMA_Abort_IT+0xc8>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a59      	ldr	r2, [pc, #356]	@ (8002200 <HAL_DMA_Abort_IT+0x1a8>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d040      	beq.n	8002120 <HAL_DMA_Abort_IT+0xc8>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a58      	ldr	r2, [pc, #352]	@ (8002204 <HAL_DMA_Abort_IT+0x1ac>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d03b      	beq.n	8002120 <HAL_DMA_Abort_IT+0xc8>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a56      	ldr	r2, [pc, #344]	@ (8002208 <HAL_DMA_Abort_IT+0x1b0>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d036      	beq.n	8002120 <HAL_DMA_Abort_IT+0xc8>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a55      	ldr	r2, [pc, #340]	@ (800220c <HAL_DMA_Abort_IT+0x1b4>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d031      	beq.n	8002120 <HAL_DMA_Abort_IT+0xc8>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a53      	ldr	r2, [pc, #332]	@ (8002210 <HAL_DMA_Abort_IT+0x1b8>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d02c      	beq.n	8002120 <HAL_DMA_Abort_IT+0xc8>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a52      	ldr	r2, [pc, #328]	@ (8002214 <HAL_DMA_Abort_IT+0x1bc>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d027      	beq.n	8002120 <HAL_DMA_Abort_IT+0xc8>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a50      	ldr	r2, [pc, #320]	@ (8002218 <HAL_DMA_Abort_IT+0x1c0>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d022      	beq.n	8002120 <HAL_DMA_Abort_IT+0xc8>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a4f      	ldr	r2, [pc, #316]	@ (800221c <HAL_DMA_Abort_IT+0x1c4>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d01d      	beq.n	8002120 <HAL_DMA_Abort_IT+0xc8>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a4d      	ldr	r2, [pc, #308]	@ (8002220 <HAL_DMA_Abort_IT+0x1c8>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d018      	beq.n	8002120 <HAL_DMA_Abort_IT+0xc8>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a4c      	ldr	r2, [pc, #304]	@ (8002224 <HAL_DMA_Abort_IT+0x1cc>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d013      	beq.n	8002120 <HAL_DMA_Abort_IT+0xc8>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a4a      	ldr	r2, [pc, #296]	@ (8002228 <HAL_DMA_Abort_IT+0x1d0>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d00e      	beq.n	8002120 <HAL_DMA_Abort_IT+0xc8>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a49      	ldr	r2, [pc, #292]	@ (800222c <HAL_DMA_Abort_IT+0x1d4>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d009      	beq.n	8002120 <HAL_DMA_Abort_IT+0xc8>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a47      	ldr	r2, [pc, #284]	@ (8002230 <HAL_DMA_Abort_IT+0x1d8>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d004      	beq.n	8002120 <HAL_DMA_Abort_IT+0xc8>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a46      	ldr	r2, [pc, #280]	@ (8002234 <HAL_DMA_Abort_IT+0x1dc>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d101      	bne.n	8002124 <HAL_DMA_Abort_IT+0xcc>
 8002120:	2301      	movs	r3, #1
 8002122:	e000      	b.n	8002126 <HAL_DMA_Abort_IT+0xce>
 8002124:	2300      	movs	r3, #0
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 8086 	beq.w	8002238 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2204      	movs	r2, #4
 8002130:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a2f      	ldr	r2, [pc, #188]	@ (80021f8 <HAL_DMA_Abort_IT+0x1a0>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d04a      	beq.n	80021d4 <HAL_DMA_Abort_IT+0x17c>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a2e      	ldr	r2, [pc, #184]	@ (80021fc <HAL_DMA_Abort_IT+0x1a4>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d045      	beq.n	80021d4 <HAL_DMA_Abort_IT+0x17c>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a2c      	ldr	r2, [pc, #176]	@ (8002200 <HAL_DMA_Abort_IT+0x1a8>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d040      	beq.n	80021d4 <HAL_DMA_Abort_IT+0x17c>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a2b      	ldr	r2, [pc, #172]	@ (8002204 <HAL_DMA_Abort_IT+0x1ac>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d03b      	beq.n	80021d4 <HAL_DMA_Abort_IT+0x17c>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a29      	ldr	r2, [pc, #164]	@ (8002208 <HAL_DMA_Abort_IT+0x1b0>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d036      	beq.n	80021d4 <HAL_DMA_Abort_IT+0x17c>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a28      	ldr	r2, [pc, #160]	@ (800220c <HAL_DMA_Abort_IT+0x1b4>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d031      	beq.n	80021d4 <HAL_DMA_Abort_IT+0x17c>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a26      	ldr	r2, [pc, #152]	@ (8002210 <HAL_DMA_Abort_IT+0x1b8>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d02c      	beq.n	80021d4 <HAL_DMA_Abort_IT+0x17c>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a25      	ldr	r2, [pc, #148]	@ (8002214 <HAL_DMA_Abort_IT+0x1bc>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d027      	beq.n	80021d4 <HAL_DMA_Abort_IT+0x17c>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a23      	ldr	r2, [pc, #140]	@ (8002218 <HAL_DMA_Abort_IT+0x1c0>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d022      	beq.n	80021d4 <HAL_DMA_Abort_IT+0x17c>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a22      	ldr	r2, [pc, #136]	@ (800221c <HAL_DMA_Abort_IT+0x1c4>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d01d      	beq.n	80021d4 <HAL_DMA_Abort_IT+0x17c>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a20      	ldr	r2, [pc, #128]	@ (8002220 <HAL_DMA_Abort_IT+0x1c8>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d018      	beq.n	80021d4 <HAL_DMA_Abort_IT+0x17c>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a1f      	ldr	r2, [pc, #124]	@ (8002224 <HAL_DMA_Abort_IT+0x1cc>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d013      	beq.n	80021d4 <HAL_DMA_Abort_IT+0x17c>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002228 <HAL_DMA_Abort_IT+0x1d0>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d00e      	beq.n	80021d4 <HAL_DMA_Abort_IT+0x17c>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a1c      	ldr	r2, [pc, #112]	@ (800222c <HAL_DMA_Abort_IT+0x1d4>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d009      	beq.n	80021d4 <HAL_DMA_Abort_IT+0x17c>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a1a      	ldr	r2, [pc, #104]	@ (8002230 <HAL_DMA_Abort_IT+0x1d8>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d004      	beq.n	80021d4 <HAL_DMA_Abort_IT+0x17c>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a19      	ldr	r2, [pc, #100]	@ (8002234 <HAL_DMA_Abort_IT+0x1dc>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d108      	bne.n	80021e6 <HAL_DMA_Abort_IT+0x18e>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0201 	bic.w	r2, r2, #1
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	e178      	b.n	80024d8 <HAL_DMA_Abort_IT+0x480>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0201 	bic.w	r2, r2, #1
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	e16f      	b.n	80024d8 <HAL_DMA_Abort_IT+0x480>
 80021f8:	40020010 	.word	0x40020010
 80021fc:	40020028 	.word	0x40020028
 8002200:	40020040 	.word	0x40020040
 8002204:	40020058 	.word	0x40020058
 8002208:	40020070 	.word	0x40020070
 800220c:	40020088 	.word	0x40020088
 8002210:	400200a0 	.word	0x400200a0
 8002214:	400200b8 	.word	0x400200b8
 8002218:	40020410 	.word	0x40020410
 800221c:	40020428 	.word	0x40020428
 8002220:	40020440 	.word	0x40020440
 8002224:	40020458 	.word	0x40020458
 8002228:	40020470 	.word	0x40020470
 800222c:	40020488 	.word	0x40020488
 8002230:	400204a0 	.word	0x400204a0
 8002234:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 020e 	bic.w	r2, r2, #14
 8002246:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a6c      	ldr	r2, [pc, #432]	@ (8002400 <HAL_DMA_Abort_IT+0x3a8>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d04a      	beq.n	80022e8 <HAL_DMA_Abort_IT+0x290>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a6b      	ldr	r2, [pc, #428]	@ (8002404 <HAL_DMA_Abort_IT+0x3ac>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d045      	beq.n	80022e8 <HAL_DMA_Abort_IT+0x290>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a69      	ldr	r2, [pc, #420]	@ (8002408 <HAL_DMA_Abort_IT+0x3b0>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d040      	beq.n	80022e8 <HAL_DMA_Abort_IT+0x290>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a68      	ldr	r2, [pc, #416]	@ (800240c <HAL_DMA_Abort_IT+0x3b4>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d03b      	beq.n	80022e8 <HAL_DMA_Abort_IT+0x290>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a66      	ldr	r2, [pc, #408]	@ (8002410 <HAL_DMA_Abort_IT+0x3b8>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d036      	beq.n	80022e8 <HAL_DMA_Abort_IT+0x290>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a65      	ldr	r2, [pc, #404]	@ (8002414 <HAL_DMA_Abort_IT+0x3bc>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d031      	beq.n	80022e8 <HAL_DMA_Abort_IT+0x290>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a63      	ldr	r2, [pc, #396]	@ (8002418 <HAL_DMA_Abort_IT+0x3c0>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d02c      	beq.n	80022e8 <HAL_DMA_Abort_IT+0x290>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a62      	ldr	r2, [pc, #392]	@ (800241c <HAL_DMA_Abort_IT+0x3c4>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d027      	beq.n	80022e8 <HAL_DMA_Abort_IT+0x290>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a60      	ldr	r2, [pc, #384]	@ (8002420 <HAL_DMA_Abort_IT+0x3c8>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d022      	beq.n	80022e8 <HAL_DMA_Abort_IT+0x290>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a5f      	ldr	r2, [pc, #380]	@ (8002424 <HAL_DMA_Abort_IT+0x3cc>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d01d      	beq.n	80022e8 <HAL_DMA_Abort_IT+0x290>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a5d      	ldr	r2, [pc, #372]	@ (8002428 <HAL_DMA_Abort_IT+0x3d0>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d018      	beq.n	80022e8 <HAL_DMA_Abort_IT+0x290>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a5c      	ldr	r2, [pc, #368]	@ (800242c <HAL_DMA_Abort_IT+0x3d4>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d013      	beq.n	80022e8 <HAL_DMA_Abort_IT+0x290>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a5a      	ldr	r2, [pc, #360]	@ (8002430 <HAL_DMA_Abort_IT+0x3d8>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d00e      	beq.n	80022e8 <HAL_DMA_Abort_IT+0x290>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a59      	ldr	r2, [pc, #356]	@ (8002434 <HAL_DMA_Abort_IT+0x3dc>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d009      	beq.n	80022e8 <HAL_DMA_Abort_IT+0x290>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a57      	ldr	r2, [pc, #348]	@ (8002438 <HAL_DMA_Abort_IT+0x3e0>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d004      	beq.n	80022e8 <HAL_DMA_Abort_IT+0x290>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a56      	ldr	r2, [pc, #344]	@ (800243c <HAL_DMA_Abort_IT+0x3e4>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d108      	bne.n	80022fa <HAL_DMA_Abort_IT+0x2a2>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0201 	bic.w	r2, r2, #1
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	e007      	b.n	800230a <HAL_DMA_Abort_IT+0x2b2>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f022 0201 	bic.w	r2, r2, #1
 8002308:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a3c      	ldr	r2, [pc, #240]	@ (8002400 <HAL_DMA_Abort_IT+0x3a8>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d072      	beq.n	80023fa <HAL_DMA_Abort_IT+0x3a2>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a3a      	ldr	r2, [pc, #232]	@ (8002404 <HAL_DMA_Abort_IT+0x3ac>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d06d      	beq.n	80023fa <HAL_DMA_Abort_IT+0x3a2>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a39      	ldr	r2, [pc, #228]	@ (8002408 <HAL_DMA_Abort_IT+0x3b0>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d068      	beq.n	80023fa <HAL_DMA_Abort_IT+0x3a2>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a37      	ldr	r2, [pc, #220]	@ (800240c <HAL_DMA_Abort_IT+0x3b4>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d063      	beq.n	80023fa <HAL_DMA_Abort_IT+0x3a2>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a36      	ldr	r2, [pc, #216]	@ (8002410 <HAL_DMA_Abort_IT+0x3b8>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d05e      	beq.n	80023fa <HAL_DMA_Abort_IT+0x3a2>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a34      	ldr	r2, [pc, #208]	@ (8002414 <HAL_DMA_Abort_IT+0x3bc>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d059      	beq.n	80023fa <HAL_DMA_Abort_IT+0x3a2>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a33      	ldr	r2, [pc, #204]	@ (8002418 <HAL_DMA_Abort_IT+0x3c0>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d054      	beq.n	80023fa <HAL_DMA_Abort_IT+0x3a2>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a31      	ldr	r2, [pc, #196]	@ (800241c <HAL_DMA_Abort_IT+0x3c4>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d04f      	beq.n	80023fa <HAL_DMA_Abort_IT+0x3a2>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a30      	ldr	r2, [pc, #192]	@ (8002420 <HAL_DMA_Abort_IT+0x3c8>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d04a      	beq.n	80023fa <HAL_DMA_Abort_IT+0x3a2>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a2e      	ldr	r2, [pc, #184]	@ (8002424 <HAL_DMA_Abort_IT+0x3cc>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d045      	beq.n	80023fa <HAL_DMA_Abort_IT+0x3a2>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a2d      	ldr	r2, [pc, #180]	@ (8002428 <HAL_DMA_Abort_IT+0x3d0>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d040      	beq.n	80023fa <HAL_DMA_Abort_IT+0x3a2>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a2b      	ldr	r2, [pc, #172]	@ (800242c <HAL_DMA_Abort_IT+0x3d4>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d03b      	beq.n	80023fa <HAL_DMA_Abort_IT+0x3a2>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a2a      	ldr	r2, [pc, #168]	@ (8002430 <HAL_DMA_Abort_IT+0x3d8>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d036      	beq.n	80023fa <HAL_DMA_Abort_IT+0x3a2>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a28      	ldr	r2, [pc, #160]	@ (8002434 <HAL_DMA_Abort_IT+0x3dc>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d031      	beq.n	80023fa <HAL_DMA_Abort_IT+0x3a2>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a27      	ldr	r2, [pc, #156]	@ (8002438 <HAL_DMA_Abort_IT+0x3e0>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d02c      	beq.n	80023fa <HAL_DMA_Abort_IT+0x3a2>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a25      	ldr	r2, [pc, #148]	@ (800243c <HAL_DMA_Abort_IT+0x3e4>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d027      	beq.n	80023fa <HAL_DMA_Abort_IT+0x3a2>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a24      	ldr	r2, [pc, #144]	@ (8002440 <HAL_DMA_Abort_IT+0x3e8>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d022      	beq.n	80023fa <HAL_DMA_Abort_IT+0x3a2>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a22      	ldr	r2, [pc, #136]	@ (8002444 <HAL_DMA_Abort_IT+0x3ec>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d01d      	beq.n	80023fa <HAL_DMA_Abort_IT+0x3a2>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a21      	ldr	r2, [pc, #132]	@ (8002448 <HAL_DMA_Abort_IT+0x3f0>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d018      	beq.n	80023fa <HAL_DMA_Abort_IT+0x3a2>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a1f      	ldr	r2, [pc, #124]	@ (800244c <HAL_DMA_Abort_IT+0x3f4>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d013      	beq.n	80023fa <HAL_DMA_Abort_IT+0x3a2>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a1e      	ldr	r2, [pc, #120]	@ (8002450 <HAL_DMA_Abort_IT+0x3f8>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d00e      	beq.n	80023fa <HAL_DMA_Abort_IT+0x3a2>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a1c      	ldr	r2, [pc, #112]	@ (8002454 <HAL_DMA_Abort_IT+0x3fc>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d009      	beq.n	80023fa <HAL_DMA_Abort_IT+0x3a2>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a1b      	ldr	r2, [pc, #108]	@ (8002458 <HAL_DMA_Abort_IT+0x400>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d004      	beq.n	80023fa <HAL_DMA_Abort_IT+0x3a2>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a19      	ldr	r2, [pc, #100]	@ (800245c <HAL_DMA_Abort_IT+0x404>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d132      	bne.n	8002460 <HAL_DMA_Abort_IT+0x408>
 80023fa:	2301      	movs	r3, #1
 80023fc:	e031      	b.n	8002462 <HAL_DMA_Abort_IT+0x40a>
 80023fe:	bf00      	nop
 8002400:	40020010 	.word	0x40020010
 8002404:	40020028 	.word	0x40020028
 8002408:	40020040 	.word	0x40020040
 800240c:	40020058 	.word	0x40020058
 8002410:	40020070 	.word	0x40020070
 8002414:	40020088 	.word	0x40020088
 8002418:	400200a0 	.word	0x400200a0
 800241c:	400200b8 	.word	0x400200b8
 8002420:	40020410 	.word	0x40020410
 8002424:	40020428 	.word	0x40020428
 8002428:	40020440 	.word	0x40020440
 800242c:	40020458 	.word	0x40020458
 8002430:	40020470 	.word	0x40020470
 8002434:	40020488 	.word	0x40020488
 8002438:	400204a0 	.word	0x400204a0
 800243c:	400204b8 	.word	0x400204b8
 8002440:	58025408 	.word	0x58025408
 8002444:	5802541c 	.word	0x5802541c
 8002448:	58025430 	.word	0x58025430
 800244c:	58025444 	.word	0x58025444
 8002450:	58025458 	.word	0x58025458
 8002454:	5802546c 	.word	0x5802546c
 8002458:	58025480 	.word	0x58025480
 800245c:	58025494 	.word	0x58025494
 8002460:	2300      	movs	r3, #0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d028      	beq.n	80024b8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002470:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002474:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800247a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002480:	f003 031f 	and.w	r3, r3, #31
 8002484:	2201      	movs	r2, #1
 8002486:	409a      	lsls	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002494:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00c      	beq.n	80024b8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024ac:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80024b6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop

080024e4 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80024e4:	b480      	push	{r7}
 80024e6:	b087      	sub	sp, #28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	460b      	mov	r3, r1
 80024ee:	607a      	str	r2, [r7, #4]
 80024f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80024f2:	2300      	movs	r3, #0
 80024f4:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e00a      	b.n	8002516 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8002500:	7afb      	ldrb	r3, [r7, #11]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d103      	bne.n	800250e <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	605a      	str	r2, [r3, #4]
      break;
 800250c:	e002      	b.n	8002514 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	75fb      	strb	r3, [r7, #23]
      break;
 8002512:	bf00      	nop
  }

  return status;
 8002514:	7dfb      	ldrb	r3, [r7, #23]
}
 8002516:	4618      	mov	r0, r3
 8002518:	371c      	adds	r7, #28
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
 800252a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e003      	b.n	800253e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800253c:	2300      	movs	r3, #0
  }
}
 800253e:	4618      	mov	r0, r3
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
	...

0800254c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	0c1b      	lsrs	r3, r3, #16
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 031f 	and.w	r3, r3, #31
 8002568:	2201      	movs	r2, #1
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	011a      	lsls	r2, r3, #4
 8002574:	4b0c      	ldr	r3, [pc, #48]	@ (80025a8 <HAL_EXTI_IRQHandler+0x5c>)
 8002576:	4413      	add	r3, r2
 8002578:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	4013      	ands	r3, r2
 8002582:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d009      	beq.n	800259e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d002      	beq.n	800259e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	4798      	blx	r3
    }
  }
}
 800259e:	bf00      	nop
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	58000088 	.word	0x58000088

080025ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b089      	sub	sp, #36	@ 0x24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80025b6:	2300      	movs	r3, #0
 80025b8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80025ba:	4b89      	ldr	r3, [pc, #548]	@ (80027e0 <HAL_GPIO_Init+0x234>)
 80025bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80025be:	e194      	b.n	80028ea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	2101      	movs	r1, #1
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	fa01 f303 	lsl.w	r3, r1, r3
 80025cc:	4013      	ands	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 8186 	beq.w	80028e4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 0303 	and.w	r3, r3, #3
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d005      	beq.n	80025f0 <HAL_GPIO_Init+0x44>
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f003 0303 	and.w	r3, r3, #3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d130      	bne.n	8002652 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	2203      	movs	r2, #3
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4013      	ands	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	68da      	ldr	r2, [r3, #12]
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4313      	orrs	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002626:	2201      	movs	r2, #1
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43db      	mvns	r3, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4013      	ands	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	091b      	lsrs	r3, r3, #4
 800263c:	f003 0201 	and.w	r2, r3, #1
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4313      	orrs	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	2b03      	cmp	r3, #3
 800265c:	d017      	beq.n	800268e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	2203      	movs	r2, #3
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4013      	ands	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	689a      	ldr	r2, [r3, #8]
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4313      	orrs	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d123      	bne.n	80026e2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	08da      	lsrs	r2, r3, #3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3208      	adds	r2, #8
 80026a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	220f      	movs	r2, #15
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43db      	mvns	r3, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4013      	ands	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	691a      	ldr	r2, [r3, #16]
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	08da      	lsrs	r2, r3, #3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3208      	adds	r2, #8
 80026dc:	69b9      	ldr	r1, [r7, #24]
 80026de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	2203      	movs	r2, #3
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4013      	ands	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f003 0203 	and.w	r2, r3, #3
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4313      	orrs	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 80e0 	beq.w	80028e4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002724:	4b2f      	ldr	r3, [pc, #188]	@ (80027e4 <HAL_GPIO_Init+0x238>)
 8002726:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800272a:	4a2e      	ldr	r2, [pc, #184]	@ (80027e4 <HAL_GPIO_Init+0x238>)
 800272c:	f043 0302 	orr.w	r3, r3, #2
 8002730:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002734:	4b2b      	ldr	r3, [pc, #172]	@ (80027e4 <HAL_GPIO_Init+0x238>)
 8002736:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002742:	4a29      	ldr	r2, [pc, #164]	@ (80027e8 <HAL_GPIO_Init+0x23c>)
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	089b      	lsrs	r3, r3, #2
 8002748:	3302      	adds	r3, #2
 800274a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800274e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	220f      	movs	r2, #15
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	43db      	mvns	r3, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4013      	ands	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a20      	ldr	r2, [pc, #128]	@ (80027ec <HAL_GPIO_Init+0x240>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d052      	beq.n	8002814 <HAL_GPIO_Init+0x268>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a1f      	ldr	r2, [pc, #124]	@ (80027f0 <HAL_GPIO_Init+0x244>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d031      	beq.n	80027da <HAL_GPIO_Init+0x22e>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a1e      	ldr	r2, [pc, #120]	@ (80027f4 <HAL_GPIO_Init+0x248>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d02b      	beq.n	80027d6 <HAL_GPIO_Init+0x22a>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a1d      	ldr	r2, [pc, #116]	@ (80027f8 <HAL_GPIO_Init+0x24c>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d025      	beq.n	80027d2 <HAL_GPIO_Init+0x226>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a1c      	ldr	r2, [pc, #112]	@ (80027fc <HAL_GPIO_Init+0x250>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d01f      	beq.n	80027ce <HAL_GPIO_Init+0x222>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a1b      	ldr	r2, [pc, #108]	@ (8002800 <HAL_GPIO_Init+0x254>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d019      	beq.n	80027ca <HAL_GPIO_Init+0x21e>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a1a      	ldr	r2, [pc, #104]	@ (8002804 <HAL_GPIO_Init+0x258>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d013      	beq.n	80027c6 <HAL_GPIO_Init+0x21a>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a19      	ldr	r2, [pc, #100]	@ (8002808 <HAL_GPIO_Init+0x25c>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d00d      	beq.n	80027c2 <HAL_GPIO_Init+0x216>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a18      	ldr	r2, [pc, #96]	@ (800280c <HAL_GPIO_Init+0x260>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d007      	beq.n	80027be <HAL_GPIO_Init+0x212>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a17      	ldr	r2, [pc, #92]	@ (8002810 <HAL_GPIO_Init+0x264>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d101      	bne.n	80027ba <HAL_GPIO_Init+0x20e>
 80027b6:	2309      	movs	r3, #9
 80027b8:	e02d      	b.n	8002816 <HAL_GPIO_Init+0x26a>
 80027ba:	230a      	movs	r3, #10
 80027bc:	e02b      	b.n	8002816 <HAL_GPIO_Init+0x26a>
 80027be:	2308      	movs	r3, #8
 80027c0:	e029      	b.n	8002816 <HAL_GPIO_Init+0x26a>
 80027c2:	2307      	movs	r3, #7
 80027c4:	e027      	b.n	8002816 <HAL_GPIO_Init+0x26a>
 80027c6:	2306      	movs	r3, #6
 80027c8:	e025      	b.n	8002816 <HAL_GPIO_Init+0x26a>
 80027ca:	2305      	movs	r3, #5
 80027cc:	e023      	b.n	8002816 <HAL_GPIO_Init+0x26a>
 80027ce:	2304      	movs	r3, #4
 80027d0:	e021      	b.n	8002816 <HAL_GPIO_Init+0x26a>
 80027d2:	2303      	movs	r3, #3
 80027d4:	e01f      	b.n	8002816 <HAL_GPIO_Init+0x26a>
 80027d6:	2302      	movs	r3, #2
 80027d8:	e01d      	b.n	8002816 <HAL_GPIO_Init+0x26a>
 80027da:	2301      	movs	r3, #1
 80027dc:	e01b      	b.n	8002816 <HAL_GPIO_Init+0x26a>
 80027de:	bf00      	nop
 80027e0:	58000080 	.word	0x58000080
 80027e4:	58024400 	.word	0x58024400
 80027e8:	58000400 	.word	0x58000400
 80027ec:	58020000 	.word	0x58020000
 80027f0:	58020400 	.word	0x58020400
 80027f4:	58020800 	.word	0x58020800
 80027f8:	58020c00 	.word	0x58020c00
 80027fc:	58021000 	.word	0x58021000
 8002800:	58021400 	.word	0x58021400
 8002804:	58021800 	.word	0x58021800
 8002808:	58021c00 	.word	0x58021c00
 800280c:	58022000 	.word	0x58022000
 8002810:	58022400 	.word	0x58022400
 8002814:	2300      	movs	r3, #0
 8002816:	69fa      	ldr	r2, [r7, #28]
 8002818:	f002 0203 	and.w	r2, r2, #3
 800281c:	0092      	lsls	r2, r2, #2
 800281e:	4093      	lsls	r3, r2
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4313      	orrs	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002826:	4938      	ldr	r1, [pc, #224]	@ (8002908 <HAL_GPIO_Init+0x35c>)
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	089b      	lsrs	r3, r3, #2
 800282c:	3302      	adds	r3, #2
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002834:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	43db      	mvns	r3, r3
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4013      	ands	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	4313      	orrs	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800285a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002862:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	43db      	mvns	r3, r3
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	4013      	ands	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d003      	beq.n	8002888 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002888:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	43db      	mvns	r3, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4013      	ands	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	3301      	adds	r3, #1
 80028e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	fa22 f303 	lsr.w	r3, r2, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f47f ae63 	bne.w	80025c0 <HAL_GPIO_Init+0x14>
  }
}
 80028fa:	bf00      	nop
 80028fc:	bf00      	nop
 80028fe:	3724      	adds	r7, #36	@ 0x24
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	58000400 	.word	0x58000400

0800290c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800290c:	b480      	push	{r7}
 800290e:	b087      	sub	sp, #28
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800291a:	4b75      	ldr	r3, [pc, #468]	@ (8002af0 <HAL_GPIO_DeInit+0x1e4>)
 800291c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800291e:	e0d9      	b.n	8002ad4 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8002920:	2201      	movs	r2, #1
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	4013      	ands	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 80cc 	beq.w	8002ace <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002936:	4a6f      	ldr	r2, [pc, #444]	@ (8002af4 <HAL_GPIO_DeInit+0x1e8>)
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	089b      	lsrs	r3, r3, #2
 800293c:	3302      	adds	r3, #2
 800293e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002942:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	220f      	movs	r2, #15
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	4013      	ands	r3, r2
 8002956:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a67      	ldr	r2, [pc, #412]	@ (8002af8 <HAL_GPIO_DeInit+0x1ec>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d037      	beq.n	80029d0 <HAL_GPIO_DeInit+0xc4>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a66      	ldr	r2, [pc, #408]	@ (8002afc <HAL_GPIO_DeInit+0x1f0>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d031      	beq.n	80029cc <HAL_GPIO_DeInit+0xc0>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a65      	ldr	r2, [pc, #404]	@ (8002b00 <HAL_GPIO_DeInit+0x1f4>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d02b      	beq.n	80029c8 <HAL_GPIO_DeInit+0xbc>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a64      	ldr	r2, [pc, #400]	@ (8002b04 <HAL_GPIO_DeInit+0x1f8>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d025      	beq.n	80029c4 <HAL_GPIO_DeInit+0xb8>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a63      	ldr	r2, [pc, #396]	@ (8002b08 <HAL_GPIO_DeInit+0x1fc>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d01f      	beq.n	80029c0 <HAL_GPIO_DeInit+0xb4>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a62      	ldr	r2, [pc, #392]	@ (8002b0c <HAL_GPIO_DeInit+0x200>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d019      	beq.n	80029bc <HAL_GPIO_DeInit+0xb0>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a61      	ldr	r2, [pc, #388]	@ (8002b10 <HAL_GPIO_DeInit+0x204>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d013      	beq.n	80029b8 <HAL_GPIO_DeInit+0xac>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a60      	ldr	r2, [pc, #384]	@ (8002b14 <HAL_GPIO_DeInit+0x208>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d00d      	beq.n	80029b4 <HAL_GPIO_DeInit+0xa8>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a5f      	ldr	r2, [pc, #380]	@ (8002b18 <HAL_GPIO_DeInit+0x20c>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d007      	beq.n	80029b0 <HAL_GPIO_DeInit+0xa4>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a5e      	ldr	r2, [pc, #376]	@ (8002b1c <HAL_GPIO_DeInit+0x210>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d101      	bne.n	80029ac <HAL_GPIO_DeInit+0xa0>
 80029a8:	2309      	movs	r3, #9
 80029aa:	e012      	b.n	80029d2 <HAL_GPIO_DeInit+0xc6>
 80029ac:	230a      	movs	r3, #10
 80029ae:	e010      	b.n	80029d2 <HAL_GPIO_DeInit+0xc6>
 80029b0:	2308      	movs	r3, #8
 80029b2:	e00e      	b.n	80029d2 <HAL_GPIO_DeInit+0xc6>
 80029b4:	2307      	movs	r3, #7
 80029b6:	e00c      	b.n	80029d2 <HAL_GPIO_DeInit+0xc6>
 80029b8:	2306      	movs	r3, #6
 80029ba:	e00a      	b.n	80029d2 <HAL_GPIO_DeInit+0xc6>
 80029bc:	2305      	movs	r3, #5
 80029be:	e008      	b.n	80029d2 <HAL_GPIO_DeInit+0xc6>
 80029c0:	2304      	movs	r3, #4
 80029c2:	e006      	b.n	80029d2 <HAL_GPIO_DeInit+0xc6>
 80029c4:	2303      	movs	r3, #3
 80029c6:	e004      	b.n	80029d2 <HAL_GPIO_DeInit+0xc6>
 80029c8:	2302      	movs	r3, #2
 80029ca:	e002      	b.n	80029d2 <HAL_GPIO_DeInit+0xc6>
 80029cc:	2301      	movs	r3, #1
 80029ce:	e000      	b.n	80029d2 <HAL_GPIO_DeInit+0xc6>
 80029d0:	2300      	movs	r3, #0
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	f002 0203 	and.w	r2, r2, #3
 80029d8:	0092      	lsls	r2, r2, #2
 80029da:	4093      	lsls	r3, r2
 80029dc:	68ba      	ldr	r2, [r7, #8]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d136      	bne.n	8002a50 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	43db      	mvns	r3, r3
 80029ea:	401a      	ands	r2, r3
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	43db      	mvns	r3, r3
 80029f8:	401a      	ands	r2, r3
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80029fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	43db      	mvns	r3, r3
 8002a08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8002a10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a1e:	4013      	ands	r3, r2
 8002a20:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	f003 0303 	and.w	r3, r3, #3
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	220f      	movs	r2, #15
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002a32:	4a30      	ldr	r2, [pc, #192]	@ (8002af4 <HAL_GPIO_DeInit+0x1e8>)
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	089b      	lsrs	r3, r3, #2
 8002a38:	3302      	adds	r3, #2
 8002a3a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	43da      	mvns	r2, r3
 8002a42:	482c      	ldr	r0, [pc, #176]	@ (8002af4 <HAL_GPIO_DeInit+0x1e8>)
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	089b      	lsrs	r3, r3, #2
 8002a48:	400a      	ands	r2, r1
 8002a4a:	3302      	adds	r3, #2
 8002a4c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	2103      	movs	r1, #3
 8002a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	08da      	lsrs	r2, r3, #3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3208      	adds	r2, #8
 8002a6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	220f      	movs	r2, #15
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	08d2      	lsrs	r2, r2, #3
 8002a84:	4019      	ands	r1, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3208      	adds	r2, #8
 8002a8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	2103      	movs	r1, #3
 8002a98:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	401a      	ands	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	401a      	ands	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	2103      	movs	r1, #3
 8002ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	401a      	ands	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f47f af1f 	bne.w	8002920 <HAL_GPIO_DeInit+0x14>
  }
}
 8002ae2:	bf00      	nop
 8002ae4:	bf00      	nop
 8002ae6:	371c      	adds	r7, #28
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	58000080 	.word	0x58000080
 8002af4:	58000400 	.word	0x58000400
 8002af8:	58020000 	.word	0x58020000
 8002afc:	58020400 	.word	0x58020400
 8002b00:	58020800 	.word	0x58020800
 8002b04:	58020c00 	.word	0x58020c00
 8002b08:	58021000 	.word	0x58021000
 8002b0c:	58021400 	.word	0x58021400
 8002b10:	58021800 	.word	0x58021800
 8002b14:	58021c00 	.word	0x58021c00
 8002b18:	58022000 	.word	0x58022000
 8002b1c:	58022400 	.word	0x58022400

08002b20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	691a      	ldr	r2, [r3, #16]
 8002b30:	887b      	ldrh	r3, [r7, #2]
 8002b32:	4013      	ands	r3, r2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d002      	beq.n	8002b3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	73fb      	strb	r3, [r7, #15]
 8002b3c:	e001      	b.n	8002b42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	807b      	strh	r3, [r7, #2]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b60:	787b      	ldrb	r3, [r7, #1]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b66:	887a      	ldrh	r2, [r7, #2]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002b6c:	e003      	b.n	8002b76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002b6e:	887b      	ldrh	r3, [r7, #2]
 8002b70:	041a      	lsls	r2, r3, #16
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	619a      	str	r2, [r3, #24]
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b085      	sub	sp, #20
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b94:	887a      	ldrh	r2, [r7, #2]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	041a      	lsls	r2, r3, #16
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	43d9      	mvns	r1, r3
 8002ba0:	887b      	ldrh	r3, [r7, #2]
 8002ba2:	400b      	ands	r3, r1
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	619a      	str	r2, [r3, #24]
}
 8002baa:	bf00      	nop
 8002bac:	3714      	adds	r7, #20
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
	...

08002bb8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002bc0:	4b19      	ldr	r3, [pc, #100]	@ (8002c28 <HAL_PWREx_ConfigSupply+0x70>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b04      	cmp	r3, #4
 8002bca:	d00a      	beq.n	8002be2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002bcc:	4b16      	ldr	r3, [pc, #88]	@ (8002c28 <HAL_PWREx_ConfigSupply+0x70>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d001      	beq.n	8002bde <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e01f      	b.n	8002c1e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002bde:	2300      	movs	r3, #0
 8002be0:	e01d      	b.n	8002c1e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002be2:	4b11      	ldr	r3, [pc, #68]	@ (8002c28 <HAL_PWREx_ConfigSupply+0x70>)
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	f023 0207 	bic.w	r2, r3, #7
 8002bea:	490f      	ldr	r1, [pc, #60]	@ (8002c28 <HAL_PWREx_ConfigSupply+0x70>)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002bf2:	f7ff f83b 	bl	8001c6c <HAL_GetTick>
 8002bf6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002bf8:	e009      	b.n	8002c0e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002bfa:	f7ff f837 	bl	8001c6c <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c08:	d901      	bls.n	8002c0e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e007      	b.n	8002c1e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002c0e:	4b06      	ldr	r3, [pc, #24]	@ (8002c28 <HAL_PWREx_ConfigSupply+0x70>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c1a:	d1ee      	bne.n	8002bfa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	58024800 	.word	0x58024800

08002c2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b08c      	sub	sp, #48	@ 0x30
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d102      	bne.n	8002c40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	f000 bc48 	b.w	80034d0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 8088 	beq.w	8002d5e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c4e:	4b99      	ldr	r3, [pc, #612]	@ (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c58:	4b96      	ldr	r3, [pc, #600]	@ (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c60:	2b10      	cmp	r3, #16
 8002c62:	d007      	beq.n	8002c74 <HAL_RCC_OscConfig+0x48>
 8002c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c66:	2b18      	cmp	r3, #24
 8002c68:	d111      	bne.n	8002c8e <HAL_RCC_OscConfig+0x62>
 8002c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c6c:	f003 0303 	and.w	r3, r3, #3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d10c      	bne.n	8002c8e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c74:	4b8f      	ldr	r3, [pc, #572]	@ (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d06d      	beq.n	8002d5c <HAL_RCC_OscConfig+0x130>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d169      	bne.n	8002d5c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	f000 bc21 	b.w	80034d0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c96:	d106      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x7a>
 8002c98:	4b86      	ldr	r3, [pc, #536]	@ (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a85      	ldr	r2, [pc, #532]	@ (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002c9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ca2:	6013      	str	r3, [r2, #0]
 8002ca4:	e02e      	b.n	8002d04 <HAL_RCC_OscConfig+0xd8>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10c      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x9c>
 8002cae:	4b81      	ldr	r3, [pc, #516]	@ (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a80      	ldr	r2, [pc, #512]	@ (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002cb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	4b7e      	ldr	r3, [pc, #504]	@ (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a7d      	ldr	r2, [pc, #500]	@ (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002cc0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cc4:	6013      	str	r3, [r2, #0]
 8002cc6:	e01d      	b.n	8002d04 <HAL_RCC_OscConfig+0xd8>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cd0:	d10c      	bne.n	8002cec <HAL_RCC_OscConfig+0xc0>
 8002cd2:	4b78      	ldr	r3, [pc, #480]	@ (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a77      	ldr	r2, [pc, #476]	@ (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002cd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	4b75      	ldr	r3, [pc, #468]	@ (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a74      	ldr	r2, [pc, #464]	@ (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002ce4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ce8:	6013      	str	r3, [r2, #0]
 8002cea:	e00b      	b.n	8002d04 <HAL_RCC_OscConfig+0xd8>
 8002cec:	4b71      	ldr	r3, [pc, #452]	@ (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a70      	ldr	r2, [pc, #448]	@ (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002cf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cf6:	6013      	str	r3, [r2, #0]
 8002cf8:	4b6e      	ldr	r3, [pc, #440]	@ (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a6d      	ldr	r2, [pc, #436]	@ (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002cfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d013      	beq.n	8002d34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0c:	f7fe ffae 	bl	8001c6c <HAL_GetTick>
 8002d10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d14:	f7fe ffaa 	bl	8001c6c <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b64      	cmp	r3, #100	@ 0x64
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e3d4      	b.n	80034d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d26:	4b63      	ldr	r3, [pc, #396]	@ (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d0f0      	beq.n	8002d14 <HAL_RCC_OscConfig+0xe8>
 8002d32:	e014      	b.n	8002d5e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d34:	f7fe ff9a 	bl	8001c6c <HAL_GetTick>
 8002d38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d3c:	f7fe ff96 	bl	8001c6c <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b64      	cmp	r3, #100	@ 0x64
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e3c0      	b.n	80034d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d4e:	4b59      	ldr	r3, [pc, #356]	@ (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f0      	bne.n	8002d3c <HAL_RCC_OscConfig+0x110>
 8002d5a:	e000      	b.n	8002d5e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 80ca 	beq.w	8002f00 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d6c:	4b51      	ldr	r3, [pc, #324]	@ (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d74:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d76:	4b4f      	ldr	r3, [pc, #316]	@ (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d7a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d007      	beq.n	8002d92 <HAL_RCC_OscConfig+0x166>
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	2b18      	cmp	r3, #24
 8002d86:	d156      	bne.n	8002e36 <HAL_RCC_OscConfig+0x20a>
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d151      	bne.n	8002e36 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d92:	4b48      	ldr	r3, [pc, #288]	@ (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0304 	and.w	r3, r3, #4
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d005      	beq.n	8002daa <HAL_RCC_OscConfig+0x17e>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e392      	b.n	80034d0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002daa:	4b42      	ldr	r3, [pc, #264]	@ (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f023 0219 	bic.w	r2, r3, #25
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	493f      	ldr	r1, [pc, #252]	@ (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dbc:	f7fe ff56 	bl	8001c6c <HAL_GetTick>
 8002dc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dc4:	f7fe ff52 	bl	8001c6c <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e37c      	b.n	80034d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dd6:	4b37      	ldr	r3, [pc, #220]	@ (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0304 	and.w	r3, r3, #4
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0f0      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de2:	f7fe ff73 	bl	8001ccc <HAL_GetREVID>
 8002de6:	4603      	mov	r3, r0
 8002de8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d817      	bhi.n	8002e20 <HAL_RCC_OscConfig+0x1f4>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	2b40      	cmp	r3, #64	@ 0x40
 8002df6:	d108      	bne.n	8002e0a <HAL_RCC_OscConfig+0x1de>
 8002df8:	4b2e      	ldr	r3, [pc, #184]	@ (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002e00:	4a2c      	ldr	r2, [pc, #176]	@ (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002e02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e06:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e08:	e07a      	b.n	8002f00 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e0a:	4b2a      	ldr	r3, [pc, #168]	@ (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	031b      	lsls	r3, r3, #12
 8002e18:	4926      	ldr	r1, [pc, #152]	@ (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e1e:	e06f      	b.n	8002f00 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e20:	4b24      	ldr	r3, [pc, #144]	@ (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	061b      	lsls	r3, r3, #24
 8002e2e:	4921      	ldr	r1, [pc, #132]	@ (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e34:	e064      	b.n	8002f00 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d047      	beq.n	8002ece <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e3e:	4b1d      	ldr	r3, [pc, #116]	@ (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f023 0219 	bic.w	r2, r3, #25
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	491a      	ldr	r1, [pc, #104]	@ (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e50:	f7fe ff0c 	bl	8001c6c <HAL_GetTick>
 8002e54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e58:	f7fe ff08 	bl	8001c6c <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e332      	b.n	80034d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e6a:	4b12      	ldr	r3, [pc, #72]	@ (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0304 	and.w	r3, r3, #4
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0f0      	beq.n	8002e58 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e76:	f7fe ff29 	bl	8001ccc <HAL_GetREVID>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d819      	bhi.n	8002eb8 <HAL_RCC_OscConfig+0x28c>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	2b40      	cmp	r3, #64	@ 0x40
 8002e8a:	d108      	bne.n	8002e9e <HAL_RCC_OscConfig+0x272>
 8002e8c:	4b09      	ldr	r3, [pc, #36]	@ (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002e94:	4a07      	ldr	r2, [pc, #28]	@ (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002e96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e9a:	6053      	str	r3, [r2, #4]
 8002e9c:	e030      	b.n	8002f00 <HAL_RCC_OscConfig+0x2d4>
 8002e9e:	4b05      	ldr	r3, [pc, #20]	@ (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	031b      	lsls	r3, r3, #12
 8002eac:	4901      	ldr	r1, [pc, #4]	@ (8002eb4 <HAL_RCC_OscConfig+0x288>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	604b      	str	r3, [r1, #4]
 8002eb2:	e025      	b.n	8002f00 <HAL_RCC_OscConfig+0x2d4>
 8002eb4:	58024400 	.word	0x58024400
 8002eb8:	4b9a      	ldr	r3, [pc, #616]	@ (8003124 <HAL_RCC_OscConfig+0x4f8>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	061b      	lsls	r3, r3, #24
 8002ec6:	4997      	ldr	r1, [pc, #604]	@ (8003124 <HAL_RCC_OscConfig+0x4f8>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	604b      	str	r3, [r1, #4]
 8002ecc:	e018      	b.n	8002f00 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ece:	4b95      	ldr	r3, [pc, #596]	@ (8003124 <HAL_RCC_OscConfig+0x4f8>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a94      	ldr	r2, [pc, #592]	@ (8003124 <HAL_RCC_OscConfig+0x4f8>)
 8002ed4:	f023 0301 	bic.w	r3, r3, #1
 8002ed8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eda:	f7fe fec7 	bl	8001c6c <HAL_GetTick>
 8002ede:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ee0:	e008      	b.n	8002ef4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ee2:	f7fe fec3 	bl	8001c6c <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e2ed      	b.n	80034d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ef4:	4b8b      	ldr	r3, [pc, #556]	@ (8003124 <HAL_RCC_OscConfig+0x4f8>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1f0      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0310 	and.w	r3, r3, #16
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 80a9 	beq.w	8003060 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f0e:	4b85      	ldr	r3, [pc, #532]	@ (8003124 <HAL_RCC_OscConfig+0x4f8>)
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f16:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f18:	4b82      	ldr	r3, [pc, #520]	@ (8003124 <HAL_RCC_OscConfig+0x4f8>)
 8002f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f1c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d007      	beq.n	8002f34 <HAL_RCC_OscConfig+0x308>
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	2b18      	cmp	r3, #24
 8002f28:	d13a      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x374>
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f003 0303 	and.w	r3, r3, #3
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d135      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f34:	4b7b      	ldr	r3, [pc, #492]	@ (8003124 <HAL_RCC_OscConfig+0x4f8>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d005      	beq.n	8002f4c <HAL_RCC_OscConfig+0x320>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	2b80      	cmp	r3, #128	@ 0x80
 8002f46:	d001      	beq.n	8002f4c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e2c1      	b.n	80034d0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f4c:	f7fe febe 	bl	8001ccc <HAL_GetREVID>
 8002f50:	4603      	mov	r3, r0
 8002f52:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d817      	bhi.n	8002f8a <HAL_RCC_OscConfig+0x35e>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	2b20      	cmp	r3, #32
 8002f60:	d108      	bne.n	8002f74 <HAL_RCC_OscConfig+0x348>
 8002f62:	4b70      	ldr	r3, [pc, #448]	@ (8003124 <HAL_RCC_OscConfig+0x4f8>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002f6a:	4a6e      	ldr	r2, [pc, #440]	@ (8003124 <HAL_RCC_OscConfig+0x4f8>)
 8002f6c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002f70:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f72:	e075      	b.n	8003060 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f74:	4b6b      	ldr	r3, [pc, #428]	@ (8003124 <HAL_RCC_OscConfig+0x4f8>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	069b      	lsls	r3, r3, #26
 8002f82:	4968      	ldr	r1, [pc, #416]	@ (8003124 <HAL_RCC_OscConfig+0x4f8>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f88:	e06a      	b.n	8003060 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f8a:	4b66      	ldr	r3, [pc, #408]	@ (8003124 <HAL_RCC_OscConfig+0x4f8>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	061b      	lsls	r3, r3, #24
 8002f98:	4962      	ldr	r1, [pc, #392]	@ (8003124 <HAL_RCC_OscConfig+0x4f8>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f9e:	e05f      	b.n	8003060 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d042      	beq.n	800302e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002fa8:	4b5e      	ldr	r3, [pc, #376]	@ (8003124 <HAL_RCC_OscConfig+0x4f8>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a5d      	ldr	r2, [pc, #372]	@ (8003124 <HAL_RCC_OscConfig+0x4f8>)
 8002fae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb4:	f7fe fe5a 	bl	8001c6c <HAL_GetTick>
 8002fb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002fbc:	f7fe fe56 	bl	8001c6c <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e280      	b.n	80034d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fce:	4b55      	ldr	r3, [pc, #340]	@ (8003124 <HAL_RCC_OscConfig+0x4f8>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0f0      	beq.n	8002fbc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002fda:	f7fe fe77 	bl	8001ccc <HAL_GetREVID>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d817      	bhi.n	8003018 <HAL_RCC_OscConfig+0x3ec>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	2b20      	cmp	r3, #32
 8002fee:	d108      	bne.n	8003002 <HAL_RCC_OscConfig+0x3d6>
 8002ff0:	4b4c      	ldr	r3, [pc, #304]	@ (8003124 <HAL_RCC_OscConfig+0x4f8>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002ff8:	4a4a      	ldr	r2, [pc, #296]	@ (8003124 <HAL_RCC_OscConfig+0x4f8>)
 8002ffa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002ffe:	6053      	str	r3, [r2, #4]
 8003000:	e02e      	b.n	8003060 <HAL_RCC_OscConfig+0x434>
 8003002:	4b48      	ldr	r3, [pc, #288]	@ (8003124 <HAL_RCC_OscConfig+0x4f8>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	069b      	lsls	r3, r3, #26
 8003010:	4944      	ldr	r1, [pc, #272]	@ (8003124 <HAL_RCC_OscConfig+0x4f8>)
 8003012:	4313      	orrs	r3, r2
 8003014:	604b      	str	r3, [r1, #4]
 8003016:	e023      	b.n	8003060 <HAL_RCC_OscConfig+0x434>
 8003018:	4b42      	ldr	r3, [pc, #264]	@ (8003124 <HAL_RCC_OscConfig+0x4f8>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	061b      	lsls	r3, r3, #24
 8003026:	493f      	ldr	r1, [pc, #252]	@ (8003124 <HAL_RCC_OscConfig+0x4f8>)
 8003028:	4313      	orrs	r3, r2
 800302a:	60cb      	str	r3, [r1, #12]
 800302c:	e018      	b.n	8003060 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800302e:	4b3d      	ldr	r3, [pc, #244]	@ (8003124 <HAL_RCC_OscConfig+0x4f8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a3c      	ldr	r2, [pc, #240]	@ (8003124 <HAL_RCC_OscConfig+0x4f8>)
 8003034:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003038:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303a:	f7fe fe17 	bl	8001c6c <HAL_GetTick>
 800303e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003042:	f7fe fe13 	bl	8001c6c <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e23d      	b.n	80034d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003054:	4b33      	ldr	r3, [pc, #204]	@ (8003124 <HAL_RCC_OscConfig+0x4f8>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1f0      	bne.n	8003042 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0308 	and.w	r3, r3, #8
 8003068:	2b00      	cmp	r3, #0
 800306a:	d036      	beq.n	80030da <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d019      	beq.n	80030a8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003074:	4b2b      	ldr	r3, [pc, #172]	@ (8003124 <HAL_RCC_OscConfig+0x4f8>)
 8003076:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003078:	4a2a      	ldr	r2, [pc, #168]	@ (8003124 <HAL_RCC_OscConfig+0x4f8>)
 800307a:	f043 0301 	orr.w	r3, r3, #1
 800307e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003080:	f7fe fdf4 	bl	8001c6c <HAL_GetTick>
 8003084:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003088:	f7fe fdf0 	bl	8001c6c <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e21a      	b.n	80034d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800309a:	4b22      	ldr	r3, [pc, #136]	@ (8003124 <HAL_RCC_OscConfig+0x4f8>)
 800309c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCC_OscConfig+0x45c>
 80030a6:	e018      	b.n	80030da <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030a8:	4b1e      	ldr	r3, [pc, #120]	@ (8003124 <HAL_RCC_OscConfig+0x4f8>)
 80030aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030ac:	4a1d      	ldr	r2, [pc, #116]	@ (8003124 <HAL_RCC_OscConfig+0x4f8>)
 80030ae:	f023 0301 	bic.w	r3, r3, #1
 80030b2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b4:	f7fe fdda 	bl	8001c6c <HAL_GetTick>
 80030b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030bc:	f7fe fdd6 	bl	8001c6c <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e200      	b.n	80034d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030ce:	4b15      	ldr	r3, [pc, #84]	@ (8003124 <HAL_RCC_OscConfig+0x4f8>)
 80030d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f0      	bne.n	80030bc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0320 	and.w	r3, r3, #32
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d039      	beq.n	800315a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d01c      	beq.n	8003128 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003124 <HAL_RCC_OscConfig+0x4f8>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a0c      	ldr	r2, [pc, #48]	@ (8003124 <HAL_RCC_OscConfig+0x4f8>)
 80030f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80030f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80030fa:	f7fe fdb7 	bl	8001c6c <HAL_GetTick>
 80030fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003100:	e008      	b.n	8003114 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003102:	f7fe fdb3 	bl	8001c6c <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e1dd      	b.n	80034d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003114:	4b03      	ldr	r3, [pc, #12]	@ (8003124 <HAL_RCC_OscConfig+0x4f8>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0f0      	beq.n	8003102 <HAL_RCC_OscConfig+0x4d6>
 8003120:	e01b      	b.n	800315a <HAL_RCC_OscConfig+0x52e>
 8003122:	bf00      	nop
 8003124:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003128:	4b9b      	ldr	r3, [pc, #620]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a9a      	ldr	r2, [pc, #616]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 800312e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003132:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003134:	f7fe fd9a 	bl	8001c6c <HAL_GetTick>
 8003138:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800313c:	f7fe fd96 	bl	8001c6c <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e1c0      	b.n	80034d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800314e:	4b92      	ldr	r3, [pc, #584]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1f0      	bne.n	800313c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0304 	and.w	r3, r3, #4
 8003162:	2b00      	cmp	r3, #0
 8003164:	f000 8081 	beq.w	800326a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003168:	4b8c      	ldr	r3, [pc, #560]	@ (800339c <HAL_RCC_OscConfig+0x770>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a8b      	ldr	r2, [pc, #556]	@ (800339c <HAL_RCC_OscConfig+0x770>)
 800316e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003172:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003174:	f7fe fd7a 	bl	8001c6c <HAL_GetTick>
 8003178:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800317c:	f7fe fd76 	bl	8001c6c <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b64      	cmp	r3, #100	@ 0x64
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e1a0      	b.n	80034d0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800318e:	4b83      	ldr	r3, [pc, #524]	@ (800339c <HAL_RCC_OscConfig+0x770>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0f0      	beq.n	800317c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d106      	bne.n	80031b0 <HAL_RCC_OscConfig+0x584>
 80031a2:	4b7d      	ldr	r3, [pc, #500]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 80031a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a6:	4a7c      	ldr	r2, [pc, #496]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 80031a8:	f043 0301 	orr.w	r3, r3, #1
 80031ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80031ae:	e02d      	b.n	800320c <HAL_RCC_OscConfig+0x5e0>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10c      	bne.n	80031d2 <HAL_RCC_OscConfig+0x5a6>
 80031b8:	4b77      	ldr	r3, [pc, #476]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 80031ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031bc:	4a76      	ldr	r2, [pc, #472]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 80031be:	f023 0301 	bic.w	r3, r3, #1
 80031c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80031c4:	4b74      	ldr	r3, [pc, #464]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 80031c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c8:	4a73      	ldr	r2, [pc, #460]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 80031ca:	f023 0304 	bic.w	r3, r3, #4
 80031ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80031d0:	e01c      	b.n	800320c <HAL_RCC_OscConfig+0x5e0>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	2b05      	cmp	r3, #5
 80031d8:	d10c      	bne.n	80031f4 <HAL_RCC_OscConfig+0x5c8>
 80031da:	4b6f      	ldr	r3, [pc, #444]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 80031dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031de:	4a6e      	ldr	r2, [pc, #440]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 80031e0:	f043 0304 	orr.w	r3, r3, #4
 80031e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80031e6:	4b6c      	ldr	r3, [pc, #432]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 80031e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ea:	4a6b      	ldr	r2, [pc, #428]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 80031ec:	f043 0301 	orr.w	r3, r3, #1
 80031f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80031f2:	e00b      	b.n	800320c <HAL_RCC_OscConfig+0x5e0>
 80031f4:	4b68      	ldr	r3, [pc, #416]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 80031f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f8:	4a67      	ldr	r2, [pc, #412]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 80031fa:	f023 0301 	bic.w	r3, r3, #1
 80031fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003200:	4b65      	ldr	r3, [pc, #404]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 8003202:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003204:	4a64      	ldr	r2, [pc, #400]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 8003206:	f023 0304 	bic.w	r3, r3, #4
 800320a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d015      	beq.n	8003240 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003214:	f7fe fd2a 	bl	8001c6c <HAL_GetTick>
 8003218:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800321a:	e00a      	b.n	8003232 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800321c:	f7fe fd26 	bl	8001c6c <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	f241 3288 	movw	r2, #5000	@ 0x1388
 800322a:	4293      	cmp	r3, r2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e14e      	b.n	80034d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003232:	4b59      	ldr	r3, [pc, #356]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 8003234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0ee      	beq.n	800321c <HAL_RCC_OscConfig+0x5f0>
 800323e:	e014      	b.n	800326a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003240:	f7fe fd14 	bl	8001c6c <HAL_GetTick>
 8003244:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003246:	e00a      	b.n	800325e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003248:	f7fe fd10 	bl	8001c6c <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003256:	4293      	cmp	r3, r2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e138      	b.n	80034d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800325e:	4b4e      	ldr	r3, [pc, #312]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 8003260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1ee      	bne.n	8003248 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 812d 	beq.w	80034ce <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003274:	4b48      	ldr	r3, [pc, #288]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800327c:	2b18      	cmp	r3, #24
 800327e:	f000 80bd 	beq.w	80033fc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003286:	2b02      	cmp	r3, #2
 8003288:	f040 809e 	bne.w	80033c8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800328c:	4b42      	ldr	r3, [pc, #264]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a41      	ldr	r2, [pc, #260]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 8003292:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003296:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003298:	f7fe fce8 	bl	8001c6c <HAL_GetTick>
 800329c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a0:	f7fe fce4 	bl	8001c6c <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e10e      	b.n	80034d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032b2:	4b39      	ldr	r3, [pc, #228]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1f0      	bne.n	80032a0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032be:	4b36      	ldr	r3, [pc, #216]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 80032c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032c2:	4b37      	ldr	r3, [pc, #220]	@ (80033a0 <HAL_RCC_OscConfig+0x774>)
 80032c4:	4013      	ands	r3, r2
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80032ce:	0112      	lsls	r2, r2, #4
 80032d0:	430a      	orrs	r2, r1
 80032d2:	4931      	ldr	r1, [pc, #196]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	628b      	str	r3, [r1, #40]	@ 0x28
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032dc:	3b01      	subs	r3, #1
 80032de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032e6:	3b01      	subs	r3, #1
 80032e8:	025b      	lsls	r3, r3, #9
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	431a      	orrs	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f2:	3b01      	subs	r3, #1
 80032f4:	041b      	lsls	r3, r3, #16
 80032f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003300:	3b01      	subs	r3, #1
 8003302:	061b      	lsls	r3, r3, #24
 8003304:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003308:	4923      	ldr	r1, [pc, #140]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 800330a:	4313      	orrs	r3, r2
 800330c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800330e:	4b22      	ldr	r3, [pc, #136]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 8003310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003312:	4a21      	ldr	r2, [pc, #132]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 8003314:	f023 0301 	bic.w	r3, r3, #1
 8003318:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800331a:	4b1f      	ldr	r3, [pc, #124]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 800331c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800331e:	4b21      	ldr	r3, [pc, #132]	@ (80033a4 <HAL_RCC_OscConfig+0x778>)
 8003320:	4013      	ands	r3, r2
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003326:	00d2      	lsls	r2, r2, #3
 8003328:	491b      	ldr	r1, [pc, #108]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 800332a:	4313      	orrs	r3, r2
 800332c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800332e:	4b1a      	ldr	r3, [pc, #104]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 8003330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003332:	f023 020c 	bic.w	r2, r3, #12
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333a:	4917      	ldr	r1, [pc, #92]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 800333c:	4313      	orrs	r3, r2
 800333e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003340:	4b15      	ldr	r3, [pc, #84]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 8003342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003344:	f023 0202 	bic.w	r2, r3, #2
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800334c:	4912      	ldr	r1, [pc, #72]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 800334e:	4313      	orrs	r3, r2
 8003350:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003352:	4b11      	ldr	r3, [pc, #68]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 8003354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003356:	4a10      	ldr	r2, [pc, #64]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 8003358:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800335c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800335e:	4b0e      	ldr	r3, [pc, #56]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 8003360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003362:	4a0d      	ldr	r2, [pc, #52]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 8003364:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003368:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800336a:	4b0b      	ldr	r3, [pc, #44]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 800336c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800336e:	4a0a      	ldr	r2, [pc, #40]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 8003370:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003374:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003376:	4b08      	ldr	r3, [pc, #32]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 8003378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800337a:	4a07      	ldr	r2, [pc, #28]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 800337c:	f043 0301 	orr.w	r3, r3, #1
 8003380:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003382:	4b05      	ldr	r3, [pc, #20]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a04      	ldr	r2, [pc, #16]	@ (8003398 <HAL_RCC_OscConfig+0x76c>)
 8003388:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800338c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338e:	f7fe fc6d 	bl	8001c6c <HAL_GetTick>
 8003392:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003394:	e011      	b.n	80033ba <HAL_RCC_OscConfig+0x78e>
 8003396:	bf00      	nop
 8003398:	58024400 	.word	0x58024400
 800339c:	58024800 	.word	0x58024800
 80033a0:	fffffc0c 	.word	0xfffffc0c
 80033a4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a8:	f7fe fc60 	bl	8001c6c <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e08a      	b.n	80034d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033ba:	4b47      	ldr	r3, [pc, #284]	@ (80034d8 <HAL_RCC_OscConfig+0x8ac>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0f0      	beq.n	80033a8 <HAL_RCC_OscConfig+0x77c>
 80033c6:	e082      	b.n	80034ce <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c8:	4b43      	ldr	r3, [pc, #268]	@ (80034d8 <HAL_RCC_OscConfig+0x8ac>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a42      	ldr	r2, [pc, #264]	@ (80034d8 <HAL_RCC_OscConfig+0x8ac>)
 80033ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d4:	f7fe fc4a 	bl	8001c6c <HAL_GetTick>
 80033d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033dc:	f7fe fc46 	bl	8001c6c <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e070      	b.n	80034d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033ee:	4b3a      	ldr	r3, [pc, #232]	@ (80034d8 <HAL_RCC_OscConfig+0x8ac>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1f0      	bne.n	80033dc <HAL_RCC_OscConfig+0x7b0>
 80033fa:	e068      	b.n	80034ce <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80033fc:	4b36      	ldr	r3, [pc, #216]	@ (80034d8 <HAL_RCC_OscConfig+0x8ac>)
 80033fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003400:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003402:	4b35      	ldr	r3, [pc, #212]	@ (80034d8 <HAL_RCC_OscConfig+0x8ac>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003406:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340c:	2b01      	cmp	r3, #1
 800340e:	d031      	beq.n	8003474 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	f003 0203 	and.w	r2, r3, #3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800341a:	429a      	cmp	r2, r3
 800341c:	d12a      	bne.n	8003474 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	091b      	lsrs	r3, r3, #4
 8003422:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800342a:	429a      	cmp	r2, r3
 800342c:	d122      	bne.n	8003474 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003438:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800343a:	429a      	cmp	r2, r3
 800343c:	d11a      	bne.n	8003474 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	0a5b      	lsrs	r3, r3, #9
 8003442:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800344a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800344c:	429a      	cmp	r2, r3
 800344e:	d111      	bne.n	8003474 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	0c1b      	lsrs	r3, r3, #16
 8003454:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800345c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800345e:	429a      	cmp	r2, r3
 8003460:	d108      	bne.n	8003474 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	0e1b      	lsrs	r3, r3, #24
 8003466:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800346e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003470:	429a      	cmp	r2, r3
 8003472:	d001      	beq.n	8003478 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e02b      	b.n	80034d0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003478:	4b17      	ldr	r3, [pc, #92]	@ (80034d8 <HAL_RCC_OscConfig+0x8ac>)
 800347a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800347c:	08db      	lsrs	r3, r3, #3
 800347e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003482:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	429a      	cmp	r2, r3
 800348c:	d01f      	beq.n	80034ce <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800348e:	4b12      	ldr	r3, [pc, #72]	@ (80034d8 <HAL_RCC_OscConfig+0x8ac>)
 8003490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003492:	4a11      	ldr	r2, [pc, #68]	@ (80034d8 <HAL_RCC_OscConfig+0x8ac>)
 8003494:	f023 0301 	bic.w	r3, r3, #1
 8003498:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800349a:	f7fe fbe7 	bl	8001c6c <HAL_GetTick>
 800349e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80034a0:	bf00      	nop
 80034a2:	f7fe fbe3 	bl	8001c6c <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d0f9      	beq.n	80034a2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80034ae:	4b0a      	ldr	r3, [pc, #40]	@ (80034d8 <HAL_RCC_OscConfig+0x8ac>)
 80034b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034b2:	4b0a      	ldr	r3, [pc, #40]	@ (80034dc <HAL_RCC_OscConfig+0x8b0>)
 80034b4:	4013      	ands	r3, r2
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80034ba:	00d2      	lsls	r2, r2, #3
 80034bc:	4906      	ldr	r1, [pc, #24]	@ (80034d8 <HAL_RCC_OscConfig+0x8ac>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80034c2:	4b05      	ldr	r3, [pc, #20]	@ (80034d8 <HAL_RCC_OscConfig+0x8ac>)
 80034c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c6:	4a04      	ldr	r2, [pc, #16]	@ (80034d8 <HAL_RCC_OscConfig+0x8ac>)
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3730      	adds	r7, #48	@ 0x30
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	58024400 	.word	0x58024400
 80034dc:	ffff0007 	.word	0xffff0007

080034e0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e19c      	b.n	800382e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034f4:	4b8a      	ldr	r3, [pc, #552]	@ (8003720 <HAL_RCC_ClockConfig+0x240>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 030f 	and.w	r3, r3, #15
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d910      	bls.n	8003524 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003502:	4b87      	ldr	r3, [pc, #540]	@ (8003720 <HAL_RCC_ClockConfig+0x240>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f023 020f 	bic.w	r2, r3, #15
 800350a:	4985      	ldr	r1, [pc, #532]	@ (8003720 <HAL_RCC_ClockConfig+0x240>)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	4313      	orrs	r3, r2
 8003510:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003512:	4b83      	ldr	r3, [pc, #524]	@ (8003720 <HAL_RCC_ClockConfig+0x240>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	429a      	cmp	r2, r3
 800351e:	d001      	beq.n	8003524 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e184      	b.n	800382e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	2b00      	cmp	r3, #0
 800352e:	d010      	beq.n	8003552 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691a      	ldr	r2, [r3, #16]
 8003534:	4b7b      	ldr	r3, [pc, #492]	@ (8003724 <HAL_RCC_ClockConfig+0x244>)
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800353c:	429a      	cmp	r2, r3
 800353e:	d908      	bls.n	8003552 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003540:	4b78      	ldr	r3, [pc, #480]	@ (8003724 <HAL_RCC_ClockConfig+0x244>)
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	4975      	ldr	r1, [pc, #468]	@ (8003724 <HAL_RCC_ClockConfig+0x244>)
 800354e:	4313      	orrs	r3, r2
 8003550:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d010      	beq.n	8003580 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	695a      	ldr	r2, [r3, #20]
 8003562:	4b70      	ldr	r3, [pc, #448]	@ (8003724 <HAL_RCC_ClockConfig+0x244>)
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800356a:	429a      	cmp	r2, r3
 800356c:	d908      	bls.n	8003580 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800356e:	4b6d      	ldr	r3, [pc, #436]	@ (8003724 <HAL_RCC_ClockConfig+0x244>)
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	496a      	ldr	r1, [pc, #424]	@ (8003724 <HAL_RCC_ClockConfig+0x244>)
 800357c:	4313      	orrs	r3, r2
 800357e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	2b00      	cmp	r3, #0
 800358a:	d010      	beq.n	80035ae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	699a      	ldr	r2, [r3, #24]
 8003590:	4b64      	ldr	r3, [pc, #400]	@ (8003724 <HAL_RCC_ClockConfig+0x244>)
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003598:	429a      	cmp	r2, r3
 800359a:	d908      	bls.n	80035ae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800359c:	4b61      	ldr	r3, [pc, #388]	@ (8003724 <HAL_RCC_ClockConfig+0x244>)
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	495e      	ldr	r1, [pc, #376]	@ (8003724 <HAL_RCC_ClockConfig+0x244>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0320 	and.w	r3, r3, #32
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d010      	beq.n	80035dc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69da      	ldr	r2, [r3, #28]
 80035be:	4b59      	ldr	r3, [pc, #356]	@ (8003724 <HAL_RCC_ClockConfig+0x244>)
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d908      	bls.n	80035dc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80035ca:	4b56      	ldr	r3, [pc, #344]	@ (8003724 <HAL_RCC_ClockConfig+0x244>)
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	4953      	ldr	r1, [pc, #332]	@ (8003724 <HAL_RCC_ClockConfig+0x244>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d010      	beq.n	800360a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	4b4d      	ldr	r3, [pc, #308]	@ (8003724 <HAL_RCC_ClockConfig+0x244>)
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	f003 030f 	and.w	r3, r3, #15
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d908      	bls.n	800360a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f8:	4b4a      	ldr	r3, [pc, #296]	@ (8003724 <HAL_RCC_ClockConfig+0x244>)
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	f023 020f 	bic.w	r2, r3, #15
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	4947      	ldr	r1, [pc, #284]	@ (8003724 <HAL_RCC_ClockConfig+0x244>)
 8003606:	4313      	orrs	r3, r2
 8003608:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d055      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003616:	4b43      	ldr	r3, [pc, #268]	@ (8003724 <HAL_RCC_ClockConfig+0x244>)
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	4940      	ldr	r1, [pc, #256]	@ (8003724 <HAL_RCC_ClockConfig+0x244>)
 8003624:	4313      	orrs	r3, r2
 8003626:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	2b02      	cmp	r3, #2
 800362e:	d107      	bne.n	8003640 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003630:	4b3c      	ldr	r3, [pc, #240]	@ (8003724 <HAL_RCC_ClockConfig+0x244>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d121      	bne.n	8003680 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e0f6      	b.n	800382e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	2b03      	cmp	r3, #3
 8003646:	d107      	bne.n	8003658 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003648:	4b36      	ldr	r3, [pc, #216]	@ (8003724 <HAL_RCC_ClockConfig+0x244>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d115      	bne.n	8003680 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e0ea      	b.n	800382e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d107      	bne.n	8003670 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003660:	4b30      	ldr	r3, [pc, #192]	@ (8003724 <HAL_RCC_ClockConfig+0x244>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003668:	2b00      	cmp	r3, #0
 800366a:	d109      	bne.n	8003680 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e0de      	b.n	800382e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003670:	4b2c      	ldr	r3, [pc, #176]	@ (8003724 <HAL_RCC_ClockConfig+0x244>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e0d6      	b.n	800382e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003680:	4b28      	ldr	r3, [pc, #160]	@ (8003724 <HAL_RCC_ClockConfig+0x244>)
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	f023 0207 	bic.w	r2, r3, #7
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	4925      	ldr	r1, [pc, #148]	@ (8003724 <HAL_RCC_ClockConfig+0x244>)
 800368e:	4313      	orrs	r3, r2
 8003690:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003692:	f7fe faeb 	bl	8001c6c <HAL_GetTick>
 8003696:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003698:	e00a      	b.n	80036b0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800369a:	f7fe fae7 	bl	8001c6c <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e0be      	b.n	800382e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b0:	4b1c      	ldr	r3, [pc, #112]	@ (8003724 <HAL_RCC_ClockConfig+0x244>)
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	429a      	cmp	r2, r3
 80036c0:	d1eb      	bne.n	800369a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d010      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	4b14      	ldr	r3, [pc, #80]	@ (8003724 <HAL_RCC_ClockConfig+0x244>)
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	f003 030f 	and.w	r3, r3, #15
 80036da:	429a      	cmp	r2, r3
 80036dc:	d208      	bcs.n	80036f0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036de:	4b11      	ldr	r3, [pc, #68]	@ (8003724 <HAL_RCC_ClockConfig+0x244>)
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	f023 020f 	bic.w	r2, r3, #15
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	490e      	ldr	r1, [pc, #56]	@ (8003724 <HAL_RCC_ClockConfig+0x244>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003720 <HAL_RCC_ClockConfig+0x240>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 030f 	and.w	r3, r3, #15
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d214      	bcs.n	8003728 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036fe:	4b08      	ldr	r3, [pc, #32]	@ (8003720 <HAL_RCC_ClockConfig+0x240>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f023 020f 	bic.w	r2, r3, #15
 8003706:	4906      	ldr	r1, [pc, #24]	@ (8003720 <HAL_RCC_ClockConfig+0x240>)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	4313      	orrs	r3, r2
 800370c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800370e:	4b04      	ldr	r3, [pc, #16]	@ (8003720 <HAL_RCC_ClockConfig+0x240>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	429a      	cmp	r2, r3
 800371a:	d005      	beq.n	8003728 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e086      	b.n	800382e <HAL_RCC_ClockConfig+0x34e>
 8003720:	52002000 	.word	0x52002000
 8003724:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b00      	cmp	r3, #0
 8003732:	d010      	beq.n	8003756 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691a      	ldr	r2, [r3, #16]
 8003738:	4b3f      	ldr	r3, [pc, #252]	@ (8003838 <HAL_RCC_ClockConfig+0x358>)
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003740:	429a      	cmp	r2, r3
 8003742:	d208      	bcs.n	8003756 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003744:	4b3c      	ldr	r3, [pc, #240]	@ (8003838 <HAL_RCC_ClockConfig+0x358>)
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	4939      	ldr	r1, [pc, #228]	@ (8003838 <HAL_RCC_ClockConfig+0x358>)
 8003752:	4313      	orrs	r3, r2
 8003754:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0308 	and.w	r3, r3, #8
 800375e:	2b00      	cmp	r3, #0
 8003760:	d010      	beq.n	8003784 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	695a      	ldr	r2, [r3, #20]
 8003766:	4b34      	ldr	r3, [pc, #208]	@ (8003838 <HAL_RCC_ClockConfig+0x358>)
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800376e:	429a      	cmp	r2, r3
 8003770:	d208      	bcs.n	8003784 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003772:	4b31      	ldr	r3, [pc, #196]	@ (8003838 <HAL_RCC_ClockConfig+0x358>)
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	492e      	ldr	r1, [pc, #184]	@ (8003838 <HAL_RCC_ClockConfig+0x358>)
 8003780:	4313      	orrs	r3, r2
 8003782:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0310 	and.w	r3, r3, #16
 800378c:	2b00      	cmp	r3, #0
 800378e:	d010      	beq.n	80037b2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	699a      	ldr	r2, [r3, #24]
 8003794:	4b28      	ldr	r3, [pc, #160]	@ (8003838 <HAL_RCC_ClockConfig+0x358>)
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800379c:	429a      	cmp	r2, r3
 800379e:	d208      	bcs.n	80037b2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80037a0:	4b25      	ldr	r3, [pc, #148]	@ (8003838 <HAL_RCC_ClockConfig+0x358>)
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	4922      	ldr	r1, [pc, #136]	@ (8003838 <HAL_RCC_ClockConfig+0x358>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0320 	and.w	r3, r3, #32
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d010      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69da      	ldr	r2, [r3, #28]
 80037c2:	4b1d      	ldr	r3, [pc, #116]	@ (8003838 <HAL_RCC_ClockConfig+0x358>)
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d208      	bcs.n	80037e0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80037ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003838 <HAL_RCC_ClockConfig+0x358>)
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	4917      	ldr	r1, [pc, #92]	@ (8003838 <HAL_RCC_ClockConfig+0x358>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80037e0:	f000 f834 	bl	800384c <HAL_RCC_GetSysClockFreq>
 80037e4:	4602      	mov	r2, r0
 80037e6:	4b14      	ldr	r3, [pc, #80]	@ (8003838 <HAL_RCC_ClockConfig+0x358>)
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	0a1b      	lsrs	r3, r3, #8
 80037ec:	f003 030f 	and.w	r3, r3, #15
 80037f0:	4912      	ldr	r1, [pc, #72]	@ (800383c <HAL_RCC_ClockConfig+0x35c>)
 80037f2:	5ccb      	ldrb	r3, [r1, r3]
 80037f4:	f003 031f 	and.w	r3, r3, #31
 80037f8:	fa22 f303 	lsr.w	r3, r2, r3
 80037fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003838 <HAL_RCC_ClockConfig+0x358>)
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	4a0d      	ldr	r2, [pc, #52]	@ (800383c <HAL_RCC_ClockConfig+0x35c>)
 8003808:	5cd3      	ldrb	r3, [r2, r3]
 800380a:	f003 031f 	and.w	r3, r3, #31
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	fa22 f303 	lsr.w	r3, r2, r3
 8003814:	4a0a      	ldr	r2, [pc, #40]	@ (8003840 <HAL_RCC_ClockConfig+0x360>)
 8003816:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003818:	4a0a      	ldr	r2, [pc, #40]	@ (8003844 <HAL_RCC_ClockConfig+0x364>)
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800381e:	4b0a      	ldr	r3, [pc, #40]	@ (8003848 <HAL_RCC_ClockConfig+0x368>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f7fe f9d8 	bl	8001bd8 <HAL_InitTick>
 8003828:	4603      	mov	r3, r0
 800382a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800382c:	7bfb      	ldrb	r3, [r7, #15]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3718      	adds	r7, #24
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	58024400 	.word	0x58024400
 800383c:	0800affc 	.word	0x0800affc
 8003840:	24000004 	.word	0x24000004
 8003844:	24000000 	.word	0x24000000
 8003848:	24000024 	.word	0x24000024

0800384c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800384c:	b480      	push	{r7}
 800384e:	b089      	sub	sp, #36	@ 0x24
 8003850:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003852:	4bb3      	ldr	r3, [pc, #716]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800385a:	2b18      	cmp	r3, #24
 800385c:	f200 8155 	bhi.w	8003b0a <HAL_RCC_GetSysClockFreq+0x2be>
 8003860:	a201      	add	r2, pc, #4	@ (adr r2, 8003868 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003866:	bf00      	nop
 8003868:	080038cd 	.word	0x080038cd
 800386c:	08003b0b 	.word	0x08003b0b
 8003870:	08003b0b 	.word	0x08003b0b
 8003874:	08003b0b 	.word	0x08003b0b
 8003878:	08003b0b 	.word	0x08003b0b
 800387c:	08003b0b 	.word	0x08003b0b
 8003880:	08003b0b 	.word	0x08003b0b
 8003884:	08003b0b 	.word	0x08003b0b
 8003888:	080038f3 	.word	0x080038f3
 800388c:	08003b0b 	.word	0x08003b0b
 8003890:	08003b0b 	.word	0x08003b0b
 8003894:	08003b0b 	.word	0x08003b0b
 8003898:	08003b0b 	.word	0x08003b0b
 800389c:	08003b0b 	.word	0x08003b0b
 80038a0:	08003b0b 	.word	0x08003b0b
 80038a4:	08003b0b 	.word	0x08003b0b
 80038a8:	080038f9 	.word	0x080038f9
 80038ac:	08003b0b 	.word	0x08003b0b
 80038b0:	08003b0b 	.word	0x08003b0b
 80038b4:	08003b0b 	.word	0x08003b0b
 80038b8:	08003b0b 	.word	0x08003b0b
 80038bc:	08003b0b 	.word	0x08003b0b
 80038c0:	08003b0b 	.word	0x08003b0b
 80038c4:	08003b0b 	.word	0x08003b0b
 80038c8:	080038ff 	.word	0x080038ff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038cc:	4b94      	ldr	r3, [pc, #592]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0320 	and.w	r3, r3, #32
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d009      	beq.n	80038ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80038d8:	4b91      	ldr	r3, [pc, #580]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	08db      	lsrs	r3, r3, #3
 80038de:	f003 0303 	and.w	r3, r3, #3
 80038e2:	4a90      	ldr	r2, [pc, #576]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80038e4:	fa22 f303 	lsr.w	r3, r2, r3
 80038e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80038ea:	e111      	b.n	8003b10 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80038ec:	4b8d      	ldr	r3, [pc, #564]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80038ee:	61bb      	str	r3, [r7, #24]
      break;
 80038f0:	e10e      	b.n	8003b10 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80038f2:	4b8d      	ldr	r3, [pc, #564]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80038f4:	61bb      	str	r3, [r7, #24]
      break;
 80038f6:	e10b      	b.n	8003b10 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80038f8:	4b8c      	ldr	r3, [pc, #560]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80038fa:	61bb      	str	r3, [r7, #24]
      break;
 80038fc:	e108      	b.n	8003b10 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80038fe:	4b88      	ldr	r3, [pc, #544]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003908:	4b85      	ldr	r3, [pc, #532]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800390a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800390c:	091b      	lsrs	r3, r3, #4
 800390e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003912:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003914:	4b82      	ldr	r3, [pc, #520]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800391e:	4b80      	ldr	r3, [pc, #512]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003922:	08db      	lsrs	r3, r3, #3
 8003924:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	fb02 f303 	mul.w	r3, r2, r3
 800392e:	ee07 3a90 	vmov	s15, r3
 8003932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003936:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 80e1 	beq.w	8003b04 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2b02      	cmp	r3, #2
 8003946:	f000 8083 	beq.w	8003a50 <HAL_RCC_GetSysClockFreq+0x204>
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	2b02      	cmp	r3, #2
 800394e:	f200 80a1 	bhi.w	8003a94 <HAL_RCC_GetSysClockFreq+0x248>
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <HAL_RCC_GetSysClockFreq+0x114>
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d056      	beq.n	8003a0c <HAL_RCC_GetSysClockFreq+0x1c0>
 800395e:	e099      	b.n	8003a94 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003960:	4b6f      	ldr	r3, [pc, #444]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0320 	and.w	r3, r3, #32
 8003968:	2b00      	cmp	r3, #0
 800396a:	d02d      	beq.n	80039c8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800396c:	4b6c      	ldr	r3, [pc, #432]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	08db      	lsrs	r3, r3, #3
 8003972:	f003 0303 	and.w	r3, r3, #3
 8003976:	4a6b      	ldr	r2, [pc, #428]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003978:	fa22 f303 	lsr.w	r3, r2, r3
 800397c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	ee07 3a90 	vmov	s15, r3
 8003984:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	ee07 3a90 	vmov	s15, r3
 800398e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003996:	4b62      	ldr	r3, [pc, #392]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800399e:	ee07 3a90 	vmov	s15, r3
 80039a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80039aa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003b30 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039c2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80039c6:	e087      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	ee07 3a90 	vmov	s15, r3
 80039ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039d2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003b34 <HAL_RCC_GetSysClockFreq+0x2e8>
 80039d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039da:	4b51      	ldr	r3, [pc, #324]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039e2:	ee07 3a90 	vmov	s15, r3
 80039e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80039ee:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003b30 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a06:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a0a:	e065      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	ee07 3a90 	vmov	s15, r3
 8003a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a16:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003b38 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a1e:	4b40      	ldr	r3, [pc, #256]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a26:	ee07 3a90 	vmov	s15, r3
 8003a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a32:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003b30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a4a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a4e:	e043      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	ee07 3a90 	vmov	s15, r3
 8003a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a5a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003b3c <HAL_RCC_GetSysClockFreq+0x2f0>
 8003a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a62:	4b2f      	ldr	r3, [pc, #188]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a6a:	ee07 3a90 	vmov	s15, r3
 8003a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a72:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a76:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003b30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a92:	e021      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	ee07 3a90 	vmov	s15, r3
 8003a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a9e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003b38 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aae:	ee07 3a90 	vmov	s15, r3
 8003ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ab6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003aba:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003b30 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ac6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ad2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003ad6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003ad8:	4b11      	ldr	r3, [pc, #68]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003adc:	0a5b      	lsrs	r3, r3, #9
 8003ade:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	ee07 3a90 	vmov	s15, r3
 8003aec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003af0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003af4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003af8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003afc:	ee17 3a90 	vmov	r3, s15
 8003b00:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003b02:	e005      	b.n	8003b10 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	61bb      	str	r3, [r7, #24]
      break;
 8003b08:	e002      	b.n	8003b10 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003b0a:	4b07      	ldr	r3, [pc, #28]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003b0c:	61bb      	str	r3, [r7, #24]
      break;
 8003b0e:	bf00      	nop
  }

  return sysclockfreq;
 8003b10:	69bb      	ldr	r3, [r7, #24]
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3724      	adds	r7, #36	@ 0x24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	58024400 	.word	0x58024400
 8003b24:	03d09000 	.word	0x03d09000
 8003b28:	003d0900 	.word	0x003d0900
 8003b2c:	017d7840 	.word	0x017d7840
 8003b30:	46000000 	.word	0x46000000
 8003b34:	4c742400 	.word	0x4c742400
 8003b38:	4a742400 	.word	0x4a742400
 8003b3c:	4bbebc20 	.word	0x4bbebc20

08003b40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003b46:	f7ff fe81 	bl	800384c <HAL_RCC_GetSysClockFreq>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	4b10      	ldr	r3, [pc, #64]	@ (8003b90 <HAL_RCC_GetHCLKFreq+0x50>)
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	0a1b      	lsrs	r3, r3, #8
 8003b52:	f003 030f 	and.w	r3, r3, #15
 8003b56:	490f      	ldr	r1, [pc, #60]	@ (8003b94 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b58:	5ccb      	ldrb	r3, [r1, r3]
 8003b5a:	f003 031f 	and.w	r3, r3, #31
 8003b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b62:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b64:	4b0a      	ldr	r3, [pc, #40]	@ (8003b90 <HAL_RCC_GetHCLKFreq+0x50>)
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	f003 030f 	and.w	r3, r3, #15
 8003b6c:	4a09      	ldr	r2, [pc, #36]	@ (8003b94 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b6e:	5cd3      	ldrb	r3, [r2, r3]
 8003b70:	f003 031f 	and.w	r3, r3, #31
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	fa22 f303 	lsr.w	r3, r2, r3
 8003b7a:	4a07      	ldr	r2, [pc, #28]	@ (8003b98 <HAL_RCC_GetHCLKFreq+0x58>)
 8003b7c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b7e:	4a07      	ldr	r2, [pc, #28]	@ (8003b9c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003b84:	4b04      	ldr	r3, [pc, #16]	@ (8003b98 <HAL_RCC_GetHCLKFreq+0x58>)
 8003b86:	681b      	ldr	r3, [r3, #0]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	58024400 	.word	0x58024400
 8003b94:	0800affc 	.word	0x0800affc
 8003b98:	24000004 	.word	0x24000004
 8003b9c:	24000000 	.word	0x24000000

08003ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003ba4:	f7ff ffcc 	bl	8003b40 <HAL_RCC_GetHCLKFreq>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	4b06      	ldr	r3, [pc, #24]	@ (8003bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bac:	69db      	ldr	r3, [r3, #28]
 8003bae:	091b      	lsrs	r3, r3, #4
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	4904      	ldr	r1, [pc, #16]	@ (8003bc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003bb6:	5ccb      	ldrb	r3, [r1, r3]
 8003bb8:	f003 031f 	and.w	r3, r3, #31
 8003bbc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	58024400 	.word	0x58024400
 8003bc8:	0800affc 	.word	0x0800affc

08003bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003bd0:	f7ff ffb6 	bl	8003b40 <HAL_RCC_GetHCLKFreq>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	4b06      	ldr	r3, [pc, #24]	@ (8003bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	0a1b      	lsrs	r3, r3, #8
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	4904      	ldr	r1, [pc, #16]	@ (8003bf4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003be2:	5ccb      	ldrb	r3, [r1, r3]
 8003be4:	f003 031f 	and.w	r3, r3, #31
 8003be8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	58024400 	.word	0x58024400
 8003bf4:	0800affc 	.word	0x0800affc

08003bf8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bfc:	b0ca      	sub	sp, #296	@ 0x128
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c04:	2300      	movs	r3, #0
 8003c06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c18:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003c1c:	2500      	movs	r5, #0
 8003c1e:	ea54 0305 	orrs.w	r3, r4, r5
 8003c22:	d049      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c2a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c2e:	d02f      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003c30:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c34:	d828      	bhi.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003c36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c3a:	d01a      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003c3c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c40:	d822      	bhi.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003c46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c4a:	d007      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c4c:	e01c      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c4e:	4bb8      	ldr	r3, [pc, #736]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c52:	4ab7      	ldr	r2, [pc, #732]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c5a:	e01a      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c60:	3308      	adds	r3, #8
 8003c62:	2102      	movs	r1, #2
 8003c64:	4618      	mov	r0, r3
 8003c66:	f001 fc8f 	bl	8005588 <RCCEx_PLL2_Config>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c70:	e00f      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c76:	3328      	adds	r3, #40	@ 0x28
 8003c78:	2102      	movs	r1, #2
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f001 fd36 	bl	80056ec <RCCEx_PLL3_Config>
 8003c80:	4603      	mov	r3, r0
 8003c82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c86:	e004      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c8e:	e000      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003c90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10a      	bne.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003c9a:	4ba5      	ldr	r3, [pc, #660]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c9e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ca8:	4aa1      	ldr	r2, [pc, #644]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003caa:	430b      	orrs	r3, r1
 8003cac:	6513      	str	r3, [r2, #80]	@ 0x50
 8003cae:	e003      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003cc4:	f04f 0900 	mov.w	r9, #0
 8003cc8:	ea58 0309 	orrs.w	r3, r8, r9
 8003ccc:	d047      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cd4:	2b04      	cmp	r3, #4
 8003cd6:	d82a      	bhi.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003cd8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cde:	bf00      	nop
 8003ce0:	08003cf5 	.word	0x08003cf5
 8003ce4:	08003d03 	.word	0x08003d03
 8003ce8:	08003d19 	.word	0x08003d19
 8003cec:	08003d37 	.word	0x08003d37
 8003cf0:	08003d37 	.word	0x08003d37
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cf4:	4b8e      	ldr	r3, [pc, #568]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf8:	4a8d      	ldr	r2, [pc, #564]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d00:	e01a      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d06:	3308      	adds	r3, #8
 8003d08:	2100      	movs	r1, #0
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f001 fc3c 	bl	8005588 <RCCEx_PLL2_Config>
 8003d10:	4603      	mov	r3, r0
 8003d12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d16:	e00f      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d1c:	3328      	adds	r3, #40	@ 0x28
 8003d1e:	2100      	movs	r1, #0
 8003d20:	4618      	mov	r0, r3
 8003d22:	f001 fce3 	bl	80056ec <RCCEx_PLL3_Config>
 8003d26:	4603      	mov	r3, r0
 8003d28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d2c:	e004      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d34:	e000      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003d36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10a      	bne.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d40:	4b7b      	ldr	r3, [pc, #492]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d44:	f023 0107 	bic.w	r1, r3, #7
 8003d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d4e:	4a78      	ldr	r2, [pc, #480]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d50:	430b      	orrs	r3, r1
 8003d52:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d54:	e003      	b.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d66:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003d6a:	f04f 0b00 	mov.w	fp, #0
 8003d6e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003d72:	d04c      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d7e:	d030      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003d80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d84:	d829      	bhi.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003d86:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d88:	d02d      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003d8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d8c:	d825      	bhi.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003d8e:	2b80      	cmp	r3, #128	@ 0x80
 8003d90:	d018      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003d92:	2b80      	cmp	r3, #128	@ 0x80
 8003d94:	d821      	bhi.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d002      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003d9a:	2b40      	cmp	r3, #64	@ 0x40
 8003d9c:	d007      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003d9e:	e01c      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003da0:	4b63      	ldr	r3, [pc, #396]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da4:	4a62      	ldr	r2, [pc, #392]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003da6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003daa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003dac:	e01c      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db2:	3308      	adds	r3, #8
 8003db4:	2100      	movs	r1, #0
 8003db6:	4618      	mov	r0, r3
 8003db8:	f001 fbe6 	bl	8005588 <RCCEx_PLL2_Config>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003dc2:	e011      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc8:	3328      	adds	r3, #40	@ 0x28
 8003dca:	2100      	movs	r1, #0
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f001 fc8d 	bl	80056ec <RCCEx_PLL3_Config>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003dd8:	e006      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003de0:	e002      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003de2:	bf00      	nop
 8003de4:	e000      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003de6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003de8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10a      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003df0:	4b4f      	ldr	r3, [pc, #316]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003df2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003df4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dfe:	4a4c      	ldr	r2, [pc, #304]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e00:	430b      	orrs	r3, r1
 8003e02:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e04:	e003      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e16:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003e1a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003e1e:	2300      	movs	r3, #0
 8003e20:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003e24:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	d053      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003e36:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e3a:	d035      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003e3c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e40:	d82e      	bhi.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003e42:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003e46:	d031      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003e48:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003e4c:	d828      	bhi.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003e4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e52:	d01a      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003e54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e58:	d822      	bhi.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003e5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e62:	d007      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003e64:	e01c      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e66:	4b32      	ldr	r3, [pc, #200]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e6a:	4a31      	ldr	r2, [pc, #196]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e72:	e01c      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e78:	3308      	adds	r3, #8
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f001 fb83 	bl	8005588 <RCCEx_PLL2_Config>
 8003e82:	4603      	mov	r3, r0
 8003e84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003e88:	e011      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e8e:	3328      	adds	r3, #40	@ 0x28
 8003e90:	2100      	movs	r1, #0
 8003e92:	4618      	mov	r0, r3
 8003e94:	f001 fc2a 	bl	80056ec <RCCEx_PLL3_Config>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e9e:	e006      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ea6:	e002      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003ea8:	bf00      	nop
 8003eaa:	e000      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003eac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10b      	bne.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eba:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003ec6:	4a1a      	ldr	r2, [pc, #104]	@ (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ec8:	430b      	orrs	r3, r1
 8003eca:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ecc:	e003      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ece:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ed2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ede:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003ee2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003eec:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	d056      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003efa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003efe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f02:	d038      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003f04:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f08:	d831      	bhi.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003f0a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003f0e:	d034      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003f10:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003f14:	d82b      	bhi.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003f16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f1a:	d01d      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003f1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f20:	d825      	bhi.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d006      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003f26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f2a:	d00a      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003f2c:	e01f      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003f2e:	bf00      	nop
 8003f30:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f34:	4ba2      	ldr	r3, [pc, #648]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f38:	4aa1      	ldr	r2, [pc, #644]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f40:	e01c      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f46:	3308      	adds	r3, #8
 8003f48:	2100      	movs	r1, #0
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f001 fb1c 	bl	8005588 <RCCEx_PLL2_Config>
 8003f50:	4603      	mov	r3, r0
 8003f52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003f56:	e011      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f5c:	3328      	adds	r3, #40	@ 0x28
 8003f5e:	2100      	movs	r1, #0
 8003f60:	4618      	mov	r0, r3
 8003f62:	f001 fbc3 	bl	80056ec <RCCEx_PLL3_Config>
 8003f66:	4603      	mov	r3, r0
 8003f68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f6c:	e006      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f74:	e002      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003f76:	bf00      	nop
 8003f78:	e000      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003f7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10b      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003f84:	4b8e      	ldr	r3, [pc, #568]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f88:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003f94:	4a8a      	ldr	r2, [pc, #552]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f96:	430b      	orrs	r3, r1
 8003f98:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f9a:	e003      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fa0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fac:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003fb0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003fba:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	d03a      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fca:	2b30      	cmp	r3, #48	@ 0x30
 8003fcc:	d01f      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003fce:	2b30      	cmp	r3, #48	@ 0x30
 8003fd0:	d819      	bhi.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003fd2:	2b20      	cmp	r3, #32
 8003fd4:	d00c      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003fd6:	2b20      	cmp	r3, #32
 8003fd8:	d815      	bhi.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d019      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003fde:	2b10      	cmp	r3, #16
 8003fe0:	d111      	bne.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fe2:	4b77      	ldr	r3, [pc, #476]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe6:	4a76      	ldr	r2, [pc, #472]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fe8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003fee:	e011      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff4:	3308      	adds	r3, #8
 8003ff6:	2102      	movs	r1, #2
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f001 fac5 	bl	8005588 <RCCEx_PLL2_Config>
 8003ffe:	4603      	mov	r3, r0
 8004000:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004004:	e006      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800400c:	e002      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800400e:	bf00      	nop
 8004010:	e000      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004012:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004014:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10a      	bne.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800401c:	4b68      	ldr	r3, [pc, #416]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800401e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004020:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800402a:	4a65      	ldr	r2, [pc, #404]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800402c:	430b      	orrs	r3, r1
 800402e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004030:	e003      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004032:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004036:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800403a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800403e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004042:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004046:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800404a:	2300      	movs	r3, #0
 800404c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004050:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004054:	460b      	mov	r3, r1
 8004056:	4313      	orrs	r3, r2
 8004058:	d051      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800405a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800405e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004060:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004064:	d035      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004066:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800406a:	d82e      	bhi.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800406c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004070:	d031      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004072:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004076:	d828      	bhi.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004078:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800407c:	d01a      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800407e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004082:	d822      	bhi.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004084:	2b00      	cmp	r3, #0
 8004086:	d003      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004088:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800408c:	d007      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800408e:	e01c      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004090:	4b4b      	ldr	r3, [pc, #300]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004094:	4a4a      	ldr	r2, [pc, #296]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004096:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800409a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800409c:	e01c      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800409e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a2:	3308      	adds	r3, #8
 80040a4:	2100      	movs	r1, #0
 80040a6:	4618      	mov	r0, r3
 80040a8:	f001 fa6e 	bl	8005588 <RCCEx_PLL2_Config>
 80040ac:	4603      	mov	r3, r0
 80040ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80040b2:	e011      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b8:	3328      	adds	r3, #40	@ 0x28
 80040ba:	2100      	movs	r1, #0
 80040bc:	4618      	mov	r0, r3
 80040be:	f001 fb15 	bl	80056ec <RCCEx_PLL3_Config>
 80040c2:	4603      	mov	r3, r0
 80040c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80040c8:	e006      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040d0:	e002      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80040d2:	bf00      	nop
 80040d4:	e000      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80040d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d10a      	bne.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80040e0:	4b37      	ldr	r3, [pc, #220]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040e4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80040e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ee:	4a34      	ldr	r2, [pc, #208]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040f0:	430b      	orrs	r3, r1
 80040f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80040f4:	e003      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80040fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004106:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800410a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800410e:	2300      	movs	r3, #0
 8004110:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004114:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004118:	460b      	mov	r3, r1
 800411a:	4313      	orrs	r3, r2
 800411c:	d056      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800411e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004122:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004124:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004128:	d033      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800412a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800412e:	d82c      	bhi.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004130:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004134:	d02f      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004136:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800413a:	d826      	bhi.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800413c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004140:	d02b      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004142:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004146:	d820      	bhi.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004148:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800414c:	d012      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800414e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004152:	d81a      	bhi.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004154:	2b00      	cmp	r3, #0
 8004156:	d022      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004158:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800415c:	d115      	bne.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800415e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004162:	3308      	adds	r3, #8
 8004164:	2101      	movs	r1, #1
 8004166:	4618      	mov	r0, r3
 8004168:	f001 fa0e 	bl	8005588 <RCCEx_PLL2_Config>
 800416c:	4603      	mov	r3, r0
 800416e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004172:	e015      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004178:	3328      	adds	r3, #40	@ 0x28
 800417a:	2101      	movs	r1, #1
 800417c:	4618      	mov	r0, r3
 800417e:	f001 fab5 	bl	80056ec <RCCEx_PLL3_Config>
 8004182:	4603      	mov	r3, r0
 8004184:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004188:	e00a      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004190:	e006      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004192:	bf00      	nop
 8004194:	e004      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004196:	bf00      	nop
 8004198:	e002      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800419a:	bf00      	nop
 800419c:	e000      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800419e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10d      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80041a8:	4b05      	ldr	r3, [pc, #20]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041ac:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80041b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041b6:	4a02      	ldr	r2, [pc, #8]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041b8:	430b      	orrs	r3, r1
 80041ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80041bc:	e006      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80041be:	bf00      	nop
 80041c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80041cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80041d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80041dc:	2300      	movs	r3, #0
 80041de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80041e2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80041e6:	460b      	mov	r3, r1
 80041e8:	4313      	orrs	r3, r2
 80041ea:	d055      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80041ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80041f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041f8:	d033      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80041fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041fe:	d82c      	bhi.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004200:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004204:	d02f      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004206:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800420a:	d826      	bhi.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800420c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004210:	d02b      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004212:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004216:	d820      	bhi.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004218:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800421c:	d012      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800421e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004222:	d81a      	bhi.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004224:	2b00      	cmp	r3, #0
 8004226:	d022      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004228:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800422c:	d115      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800422e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004232:	3308      	adds	r3, #8
 8004234:	2101      	movs	r1, #1
 8004236:	4618      	mov	r0, r3
 8004238:	f001 f9a6 	bl	8005588 <RCCEx_PLL2_Config>
 800423c:	4603      	mov	r3, r0
 800423e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004242:	e015      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004248:	3328      	adds	r3, #40	@ 0x28
 800424a:	2101      	movs	r1, #1
 800424c:	4618      	mov	r0, r3
 800424e:	f001 fa4d 	bl	80056ec <RCCEx_PLL3_Config>
 8004252:	4603      	mov	r3, r0
 8004254:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004258:	e00a      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004260:	e006      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004262:	bf00      	nop
 8004264:	e004      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004266:	bf00      	nop
 8004268:	e002      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800426a:	bf00      	nop
 800426c:	e000      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800426e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004270:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10b      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004278:	4ba3      	ldr	r3, [pc, #652]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800427a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800427c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004284:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004288:	4a9f      	ldr	r2, [pc, #636]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800428a:	430b      	orrs	r3, r1
 800428c:	6593      	str	r3, [r2, #88]	@ 0x58
 800428e:	e003      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004290:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004294:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800429c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80042a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80042a8:	2300      	movs	r3, #0
 80042aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80042ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80042b2:	460b      	mov	r3, r1
 80042b4:	4313      	orrs	r3, r2
 80042b6:	d037      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80042b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042c2:	d00e      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80042c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042c8:	d816      	bhi.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d018      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80042ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042d2:	d111      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042d4:	4b8c      	ldr	r3, [pc, #560]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d8:	4a8b      	ldr	r2, [pc, #556]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80042e0:	e00f      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e6:	3308      	adds	r3, #8
 80042e8:	2101      	movs	r1, #1
 80042ea:	4618      	mov	r0, r3
 80042ec:	f001 f94c 	bl	8005588 <RCCEx_PLL2_Config>
 80042f0:	4603      	mov	r3, r0
 80042f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80042f6:	e004      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042fe:	e000      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004300:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004302:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10a      	bne.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800430a:	4b7f      	ldr	r3, [pc, #508]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800430c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800430e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004316:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004318:	4a7b      	ldr	r2, [pc, #492]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800431a:	430b      	orrs	r3, r1
 800431c:	6513      	str	r3, [r2, #80]	@ 0x50
 800431e:	e003      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004320:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004324:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800432c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004330:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004334:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004338:	2300      	movs	r3, #0
 800433a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800433e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004342:	460b      	mov	r3, r1
 8004344:	4313      	orrs	r3, r2
 8004346:	d039      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800434c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800434e:	2b03      	cmp	r3, #3
 8004350:	d81c      	bhi.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004352:	a201      	add	r2, pc, #4	@ (adr r2, 8004358 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004358:	08004395 	.word	0x08004395
 800435c:	08004369 	.word	0x08004369
 8004360:	08004377 	.word	0x08004377
 8004364:	08004395 	.word	0x08004395
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004368:	4b67      	ldr	r3, [pc, #412]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800436a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800436c:	4a66      	ldr	r2, [pc, #408]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800436e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004372:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004374:	e00f      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800437a:	3308      	adds	r3, #8
 800437c:	2102      	movs	r1, #2
 800437e:	4618      	mov	r0, r3
 8004380:	f001 f902 	bl	8005588 <RCCEx_PLL2_Config>
 8004384:	4603      	mov	r3, r0
 8004386:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800438a:	e004      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004392:	e000      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004394:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004396:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10a      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800439e:	4b5a      	ldr	r3, [pc, #360]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043a2:	f023 0103 	bic.w	r1, r3, #3
 80043a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043ac:	4a56      	ldr	r2, [pc, #344]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043ae:	430b      	orrs	r3, r1
 80043b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043b2:	e003      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80043c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043cc:	2300      	movs	r3, #0
 80043ce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80043d2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80043d6:	460b      	mov	r3, r1
 80043d8:	4313      	orrs	r3, r2
 80043da:	f000 809f 	beq.w	800451c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043de:	4b4b      	ldr	r3, [pc, #300]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a4a      	ldr	r2, [pc, #296]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80043e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043ea:	f7fd fc3f 	bl	8001c6c <HAL_GetTick>
 80043ee:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043f2:	e00b      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043f4:	f7fd fc3a 	bl	8001c6c <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b64      	cmp	r3, #100	@ 0x64
 8004402:	d903      	bls.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800440a:	e005      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800440c:	4b3f      	ldr	r3, [pc, #252]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004414:	2b00      	cmp	r3, #0
 8004416:	d0ed      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004418:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800441c:	2b00      	cmp	r3, #0
 800441e:	d179      	bne.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004420:	4b39      	ldr	r3, [pc, #228]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004422:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004428:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800442c:	4053      	eors	r3, r2
 800442e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004432:	2b00      	cmp	r3, #0
 8004434:	d015      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004436:	4b34      	ldr	r3, [pc, #208]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800443a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800443e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004442:	4b31      	ldr	r3, [pc, #196]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004446:	4a30      	ldr	r2, [pc, #192]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004448:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800444c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800444e:	4b2e      	ldr	r3, [pc, #184]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004452:	4a2d      	ldr	r2, [pc, #180]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004454:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004458:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800445a:	4a2b      	ldr	r2, [pc, #172]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800445c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004460:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004466:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800446a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800446e:	d118      	bne.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004470:	f7fd fbfc 	bl	8001c6c <HAL_GetTick>
 8004474:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004478:	e00d      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800447a:	f7fd fbf7 	bl	8001c6c <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004484:	1ad2      	subs	r2, r2, r3
 8004486:	f241 3388 	movw	r3, #5000	@ 0x1388
 800448a:	429a      	cmp	r2, r3
 800448c:	d903      	bls.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004494:	e005      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004496:	4b1c      	ldr	r3, [pc, #112]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004498:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0eb      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80044a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d129      	bne.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80044b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044ba:	d10e      	bne.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80044bc:	4b12      	ldr	r3, [pc, #72]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80044c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80044cc:	091a      	lsrs	r2, r3, #4
 80044ce:	4b10      	ldr	r3, [pc, #64]	@ (8004510 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80044d0:	4013      	ands	r3, r2
 80044d2:	4a0d      	ldr	r2, [pc, #52]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044d4:	430b      	orrs	r3, r1
 80044d6:	6113      	str	r3, [r2, #16]
 80044d8:	e005      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80044da:	4b0b      	ldr	r3, [pc, #44]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	4a0a      	ldr	r2, [pc, #40]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80044e4:	6113      	str	r3, [r2, #16]
 80044e6:	4b08      	ldr	r3, [pc, #32]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044e8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80044ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80044f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044f6:	4a04      	ldr	r2, [pc, #16]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044f8:	430b      	orrs	r3, r1
 80044fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80044fc:	e00e      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004502:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004506:	e009      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004508:	58024400 	.word	0x58024400
 800450c:	58024800 	.word	0x58024800
 8004510:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004514:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004518:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800451c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004524:	f002 0301 	and.w	r3, r2, #1
 8004528:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800452c:	2300      	movs	r3, #0
 800452e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004532:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004536:	460b      	mov	r3, r1
 8004538:	4313      	orrs	r3, r2
 800453a:	f000 8089 	beq.w	8004650 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800453e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004542:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004544:	2b28      	cmp	r3, #40	@ 0x28
 8004546:	d86b      	bhi.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004548:	a201      	add	r2, pc, #4	@ (adr r2, 8004550 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800454a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454e:	bf00      	nop
 8004550:	08004629 	.word	0x08004629
 8004554:	08004621 	.word	0x08004621
 8004558:	08004621 	.word	0x08004621
 800455c:	08004621 	.word	0x08004621
 8004560:	08004621 	.word	0x08004621
 8004564:	08004621 	.word	0x08004621
 8004568:	08004621 	.word	0x08004621
 800456c:	08004621 	.word	0x08004621
 8004570:	080045f5 	.word	0x080045f5
 8004574:	08004621 	.word	0x08004621
 8004578:	08004621 	.word	0x08004621
 800457c:	08004621 	.word	0x08004621
 8004580:	08004621 	.word	0x08004621
 8004584:	08004621 	.word	0x08004621
 8004588:	08004621 	.word	0x08004621
 800458c:	08004621 	.word	0x08004621
 8004590:	0800460b 	.word	0x0800460b
 8004594:	08004621 	.word	0x08004621
 8004598:	08004621 	.word	0x08004621
 800459c:	08004621 	.word	0x08004621
 80045a0:	08004621 	.word	0x08004621
 80045a4:	08004621 	.word	0x08004621
 80045a8:	08004621 	.word	0x08004621
 80045ac:	08004621 	.word	0x08004621
 80045b0:	08004629 	.word	0x08004629
 80045b4:	08004621 	.word	0x08004621
 80045b8:	08004621 	.word	0x08004621
 80045bc:	08004621 	.word	0x08004621
 80045c0:	08004621 	.word	0x08004621
 80045c4:	08004621 	.word	0x08004621
 80045c8:	08004621 	.word	0x08004621
 80045cc:	08004621 	.word	0x08004621
 80045d0:	08004629 	.word	0x08004629
 80045d4:	08004621 	.word	0x08004621
 80045d8:	08004621 	.word	0x08004621
 80045dc:	08004621 	.word	0x08004621
 80045e0:	08004621 	.word	0x08004621
 80045e4:	08004621 	.word	0x08004621
 80045e8:	08004621 	.word	0x08004621
 80045ec:	08004621 	.word	0x08004621
 80045f0:	08004629 	.word	0x08004629
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f8:	3308      	adds	r3, #8
 80045fa:	2101      	movs	r1, #1
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 ffc3 	bl	8005588 <RCCEx_PLL2_Config>
 8004602:	4603      	mov	r3, r0
 8004604:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004608:	e00f      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800460a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800460e:	3328      	adds	r3, #40	@ 0x28
 8004610:	2101      	movs	r1, #1
 8004612:	4618      	mov	r0, r3
 8004614:	f001 f86a 	bl	80056ec <RCCEx_PLL3_Config>
 8004618:	4603      	mov	r3, r0
 800461a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800461e:	e004      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004626:	e000      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004628:	bf00      	nop
    }

    if (ret == HAL_OK)
 800462a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10a      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004632:	4bbf      	ldr	r3, [pc, #764]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004636:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800463a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800463e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004640:	4abb      	ldr	r2, [pc, #748]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004642:	430b      	orrs	r3, r1
 8004644:	6553      	str	r3, [r2, #84]	@ 0x54
 8004646:	e003      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004648:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800464c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004658:	f002 0302 	and.w	r3, r2, #2
 800465c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004660:	2300      	movs	r3, #0
 8004662:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004666:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800466a:	460b      	mov	r3, r1
 800466c:	4313      	orrs	r3, r2
 800466e:	d041      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004674:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004676:	2b05      	cmp	r3, #5
 8004678:	d824      	bhi.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800467a:	a201      	add	r2, pc, #4	@ (adr r2, 8004680 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800467c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004680:	080046cd 	.word	0x080046cd
 8004684:	08004699 	.word	0x08004699
 8004688:	080046af 	.word	0x080046af
 800468c:	080046cd 	.word	0x080046cd
 8004690:	080046cd 	.word	0x080046cd
 8004694:	080046cd 	.word	0x080046cd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800469c:	3308      	adds	r3, #8
 800469e:	2101      	movs	r1, #1
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 ff71 	bl	8005588 <RCCEx_PLL2_Config>
 80046a6:	4603      	mov	r3, r0
 80046a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80046ac:	e00f      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b2:	3328      	adds	r3, #40	@ 0x28
 80046b4:	2101      	movs	r1, #1
 80046b6:	4618      	mov	r0, r3
 80046b8:	f001 f818 	bl	80056ec <RCCEx_PLL3_Config>
 80046bc:	4603      	mov	r3, r0
 80046be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80046c2:	e004      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046ca:	e000      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80046cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10a      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80046d6:	4b96      	ldr	r3, [pc, #600]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046da:	f023 0107 	bic.w	r1, r3, #7
 80046de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046e4:	4a92      	ldr	r2, [pc, #584]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046e6:	430b      	orrs	r3, r1
 80046e8:	6553      	str	r3, [r2, #84]	@ 0x54
 80046ea:	e003      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fc:	f002 0304 	and.w	r3, r2, #4
 8004700:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004704:	2300      	movs	r3, #0
 8004706:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800470a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800470e:	460b      	mov	r3, r1
 8004710:	4313      	orrs	r3, r2
 8004712:	d044      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004718:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800471c:	2b05      	cmp	r3, #5
 800471e:	d825      	bhi.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004720:	a201      	add	r2, pc, #4	@ (adr r2, 8004728 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004726:	bf00      	nop
 8004728:	08004775 	.word	0x08004775
 800472c:	08004741 	.word	0x08004741
 8004730:	08004757 	.word	0x08004757
 8004734:	08004775 	.word	0x08004775
 8004738:	08004775 	.word	0x08004775
 800473c:	08004775 	.word	0x08004775
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004744:	3308      	adds	r3, #8
 8004746:	2101      	movs	r1, #1
 8004748:	4618      	mov	r0, r3
 800474a:	f000 ff1d 	bl	8005588 <RCCEx_PLL2_Config>
 800474e:	4603      	mov	r3, r0
 8004750:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004754:	e00f      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800475a:	3328      	adds	r3, #40	@ 0x28
 800475c:	2101      	movs	r1, #1
 800475e:	4618      	mov	r0, r3
 8004760:	f000 ffc4 	bl	80056ec <RCCEx_PLL3_Config>
 8004764:	4603      	mov	r3, r0
 8004766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800476a:	e004      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004772:	e000      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004774:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004776:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10b      	bne.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800477e:	4b6c      	ldr	r3, [pc, #432]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004782:	f023 0107 	bic.w	r1, r3, #7
 8004786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800478a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800478e:	4a68      	ldr	r2, [pc, #416]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004790:	430b      	orrs	r3, r1
 8004792:	6593      	str	r3, [r2, #88]	@ 0x58
 8004794:	e003      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004796:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800479a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800479e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a6:	f002 0320 	and.w	r3, r2, #32
 80047aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80047ae:	2300      	movs	r3, #0
 80047b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80047b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80047b8:	460b      	mov	r3, r1
 80047ba:	4313      	orrs	r3, r2
 80047bc:	d055      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80047be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047ca:	d033      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80047cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047d0:	d82c      	bhi.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80047d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047d6:	d02f      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80047d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047dc:	d826      	bhi.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80047de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80047e2:	d02b      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80047e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80047e8:	d820      	bhi.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80047ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047ee:	d012      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80047f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047f4:	d81a      	bhi.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d022      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80047fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047fe:	d115      	bne.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004804:	3308      	adds	r3, #8
 8004806:	2100      	movs	r1, #0
 8004808:	4618      	mov	r0, r3
 800480a:	f000 febd 	bl	8005588 <RCCEx_PLL2_Config>
 800480e:	4603      	mov	r3, r0
 8004810:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004814:	e015      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800481a:	3328      	adds	r3, #40	@ 0x28
 800481c:	2102      	movs	r1, #2
 800481e:	4618      	mov	r0, r3
 8004820:	f000 ff64 	bl	80056ec <RCCEx_PLL3_Config>
 8004824:	4603      	mov	r3, r0
 8004826:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800482a:	e00a      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004832:	e006      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004834:	bf00      	nop
 8004836:	e004      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004838:	bf00      	nop
 800483a:	e002      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800483c:	bf00      	nop
 800483e:	e000      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004840:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004842:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10b      	bne.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800484a:	4b39      	ldr	r3, [pc, #228]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800484c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800484e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004856:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800485a:	4a35      	ldr	r2, [pc, #212]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800485c:	430b      	orrs	r3, r1
 800485e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004860:	e003      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004862:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004866:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800486a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800486e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004872:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004876:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800487a:	2300      	movs	r3, #0
 800487c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004880:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004884:	460b      	mov	r3, r1
 8004886:	4313      	orrs	r3, r2
 8004888:	d058      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800488a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800488e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004892:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004896:	d033      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004898:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800489c:	d82c      	bhi.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800489e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048a2:	d02f      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80048a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048a8:	d826      	bhi.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80048aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048ae:	d02b      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80048b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048b4:	d820      	bhi.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80048b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048ba:	d012      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80048bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048c0:	d81a      	bhi.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d022      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80048c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048ca:	d115      	bne.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048d0:	3308      	adds	r3, #8
 80048d2:	2100      	movs	r1, #0
 80048d4:	4618      	mov	r0, r3
 80048d6:	f000 fe57 	bl	8005588 <RCCEx_PLL2_Config>
 80048da:	4603      	mov	r3, r0
 80048dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80048e0:	e015      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048e6:	3328      	adds	r3, #40	@ 0x28
 80048e8:	2102      	movs	r1, #2
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 fefe 	bl	80056ec <RCCEx_PLL3_Config>
 80048f0:	4603      	mov	r3, r0
 80048f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80048f6:	e00a      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048fe:	e006      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004900:	bf00      	nop
 8004902:	e004      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004904:	bf00      	nop
 8004906:	e002      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004908:	bf00      	nop
 800490a:	e000      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800490c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800490e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10e      	bne.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004916:	4b06      	ldr	r3, [pc, #24]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800491a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800491e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004922:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004926:	4a02      	ldr	r2, [pc, #8]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004928:	430b      	orrs	r3, r1
 800492a:	6593      	str	r3, [r2, #88]	@ 0x58
 800492c:	e006      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800492e:	bf00      	nop
 8004930:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004934:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004938:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800493c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004944:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004948:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800494c:	2300      	movs	r3, #0
 800494e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004952:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004956:	460b      	mov	r3, r1
 8004958:	4313      	orrs	r3, r2
 800495a:	d055      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800495c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004960:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004964:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004968:	d033      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800496a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800496e:	d82c      	bhi.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004970:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004974:	d02f      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004976:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800497a:	d826      	bhi.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800497c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004980:	d02b      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004982:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004986:	d820      	bhi.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004988:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800498c:	d012      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800498e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004992:	d81a      	bhi.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004994:	2b00      	cmp	r3, #0
 8004996:	d022      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004998:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800499c:	d115      	bne.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800499e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a2:	3308      	adds	r3, #8
 80049a4:	2100      	movs	r1, #0
 80049a6:	4618      	mov	r0, r3
 80049a8:	f000 fdee 	bl	8005588 <RCCEx_PLL2_Config>
 80049ac:	4603      	mov	r3, r0
 80049ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80049b2:	e015      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b8:	3328      	adds	r3, #40	@ 0x28
 80049ba:	2102      	movs	r1, #2
 80049bc:	4618      	mov	r0, r3
 80049be:	f000 fe95 	bl	80056ec <RCCEx_PLL3_Config>
 80049c2:	4603      	mov	r3, r0
 80049c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80049c8:	e00a      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049d0:	e006      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80049d2:	bf00      	nop
 80049d4:	e004      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80049d6:	bf00      	nop
 80049d8:	e002      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80049da:	bf00      	nop
 80049dc:	e000      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80049de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10b      	bne.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80049e8:	4ba1      	ldr	r3, [pc, #644]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ec:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80049f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80049f8:	4a9d      	ldr	r2, [pc, #628]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049fa:	430b      	orrs	r3, r1
 80049fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80049fe:	e003      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a10:	f002 0308 	and.w	r3, r2, #8
 8004a14:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a18:	2300      	movs	r3, #0
 8004a1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004a1e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004a22:	460b      	mov	r3, r1
 8004a24:	4313      	orrs	r3, r2
 8004a26:	d01e      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a34:	d10c      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a3a:	3328      	adds	r3, #40	@ 0x28
 8004a3c:	2102      	movs	r1, #2
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 fe54 	bl	80056ec <RCCEx_PLL3_Config>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004a50:	4b87      	ldr	r3, [pc, #540]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a54:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a60:	4a83      	ldr	r2, [pc, #524]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a62:	430b      	orrs	r3, r1
 8004a64:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6e:	f002 0310 	and.w	r3, r2, #16
 8004a72:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a76:	2300      	movs	r3, #0
 8004a78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004a7c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004a80:	460b      	mov	r3, r1
 8004a82:	4313      	orrs	r3, r2
 8004a84:	d01e      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a92:	d10c      	bne.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a98:	3328      	adds	r3, #40	@ 0x28
 8004a9a:	2102      	movs	r1, #2
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 fe25 	bl	80056ec <RCCEx_PLL3_Config>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d002      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004aae:	4b70      	ldr	r3, [pc, #448]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ab2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004abe:	4a6c      	ldr	r2, [pc, #432]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ac0:	430b      	orrs	r3, r1
 8004ac2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004acc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004ad0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ada:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004ade:	460b      	mov	r3, r1
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	d03e      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ae8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004aec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004af0:	d022      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004af2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004af6:	d81b      	bhi.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d003      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004afc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b00:	d00b      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004b02:	e015      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b08:	3308      	adds	r3, #8
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f000 fd3b 	bl	8005588 <RCCEx_PLL2_Config>
 8004b12:	4603      	mov	r3, r0
 8004b14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004b18:	e00f      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b1e:	3328      	adds	r3, #40	@ 0x28
 8004b20:	2102      	movs	r1, #2
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 fde2 	bl	80056ec <RCCEx_PLL3_Config>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004b2e:	e004      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b36:	e000      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004b38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10b      	bne.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b42:	4b4b      	ldr	r3, [pc, #300]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b46:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004b52:	4a47      	ldr	r2, [pc, #284]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b54:	430b      	orrs	r3, r1
 8004b56:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b58:	e003      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004b6e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b70:	2300      	movs	r3, #0
 8004b72:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b74:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	d03b      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b86:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b8a:	d01f      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004b8c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b90:	d818      	bhi.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004b92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b96:	d003      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004b98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b9c:	d007      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004b9e:	e011      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ba0:	4b33      	ldr	r3, [pc, #204]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba4:	4a32      	ldr	r2, [pc, #200]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ba6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004baa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004bac:	e00f      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bb2:	3328      	adds	r3, #40	@ 0x28
 8004bb4:	2101      	movs	r1, #1
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 fd98 	bl	80056ec <RCCEx_PLL3_Config>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004bc2:	e004      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004bca:	e000      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004bcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10b      	bne.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bd6:	4b26      	ldr	r3, [pc, #152]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bda:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004be6:	4a22      	ldr	r2, [pc, #136]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004be8:	430b      	orrs	r3, r1
 8004bea:	6553      	str	r3, [r2, #84]	@ 0x54
 8004bec:	e003      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bf2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfe:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004c02:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c04:	2300      	movs	r3, #0
 8004c06:	677b      	str	r3, [r7, #116]	@ 0x74
 8004c08:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	d034      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004c1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c20:	d007      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004c22:	e011      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c24:	4b12      	ldr	r3, [pc, #72]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c28:	4a11      	ldr	r2, [pc, #68]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004c30:	e00e      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c36:	3308      	adds	r3, #8
 8004c38:	2102      	movs	r1, #2
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 fca4 	bl	8005588 <RCCEx_PLL2_Config>
 8004c40:	4603      	mov	r3, r0
 8004c42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004c46:	e003      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10d      	bne.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004c58:	4b05      	ldr	r3, [pc, #20]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c5c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c66:	4a02      	ldr	r2, [pc, #8]	@ (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c68:	430b      	orrs	r3, r1
 8004c6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004c6c:	e006      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004c6e:	bf00      	nop
 8004c70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c84:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004c88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c8e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004c92:	460b      	mov	r3, r1
 8004c94:	4313      	orrs	r3, r2
 8004c96:	d00c      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c9c:	3328      	adds	r3, #40	@ 0x28
 8004c9e:	2102      	movs	r1, #2
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f000 fd23 	bl	80056ec <RCCEx_PLL3_Config>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d002      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cba:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004cbe:	663b      	str	r3, [r7, #96]	@ 0x60
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	667b      	str	r3, [r7, #100]	@ 0x64
 8004cc4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004cc8:	460b      	mov	r3, r1
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	d038      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cda:	d018      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004cdc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ce0:	d811      	bhi.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004ce2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ce6:	d014      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004ce8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cec:	d80b      	bhi.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d011      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004cf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cf6:	d106      	bne.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cf8:	4bc3      	ldr	r3, [pc, #780]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfc:	4ac2      	ldr	r2, [pc, #776]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004d04:	e008      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d0c:	e004      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004d0e:	bf00      	nop
 8004d10:	e002      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004d12:	bf00      	nop
 8004d14:	e000      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004d16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10b      	bne.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d20:	4bb9      	ldr	r3, [pc, #740]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d24:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d30:	4ab5      	ldr	r2, [pc, #724]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d32:	430b      	orrs	r3, r1
 8004d34:	6553      	str	r3, [r2, #84]	@ 0x54
 8004d36:	e003      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d48:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004d4c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d4e:	2300      	movs	r3, #0
 8004d50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d52:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004d56:	460b      	mov	r3, r1
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	d009      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d5c:	4baa      	ldr	r3, [pc, #680]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d60:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d6a:	4aa7      	ldr	r2, [pc, #668]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d6c:	430b      	orrs	r3, r1
 8004d6e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d78:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004d7c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d7e:	2300      	movs	r3, #0
 8004d80:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d82:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004d86:	460b      	mov	r3, r1
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	d00a      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004d8c:	4b9e      	ldr	r3, [pc, #632]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d98:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004d9c:	4a9a      	ldr	r2, [pc, #616]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d9e:	430b      	orrs	r3, r1
 8004da0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004daa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004dae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004db0:	2300      	movs	r3, #0
 8004db2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004db4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004db8:	460b      	mov	r3, r1
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	d009      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004dbe:	4b92      	ldr	r3, [pc, #584]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dc2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dcc:	4a8e      	ldr	r2, [pc, #568]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dce:	430b      	orrs	r3, r1
 8004dd0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dda:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004dde:	643b      	str	r3, [r7, #64]	@ 0x40
 8004de0:	2300      	movs	r3, #0
 8004de2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004de4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004de8:	460b      	mov	r3, r1
 8004dea:	4313      	orrs	r3, r2
 8004dec:	d00e      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004dee:	4b86      	ldr	r3, [pc, #536]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	4a85      	ldr	r2, [pc, #532]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004df4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004df8:	6113      	str	r3, [r2, #16]
 8004dfa:	4b83      	ldr	r3, [pc, #524]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dfc:	6919      	ldr	r1, [r3, #16]
 8004dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e02:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004e06:	4a80      	ldr	r2, [pc, #512]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e08:	430b      	orrs	r3, r1
 8004e0a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e14:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004e18:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e1e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004e22:	460b      	mov	r3, r1
 8004e24:	4313      	orrs	r3, r2
 8004e26:	d009      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004e28:	4b77      	ldr	r3, [pc, #476]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e2c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e36:	4a74      	ldr	r2, [pc, #464]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e38:	430b      	orrs	r3, r1
 8004e3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e44:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004e48:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e4e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004e52:	460b      	mov	r3, r1
 8004e54:	4313      	orrs	r3, r2
 8004e56:	d00a      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e58:	4b6b      	ldr	r3, [pc, #428]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e5c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e68:	4a67      	ldr	r2, [pc, #412]	@ (8005008 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e6a:	430b      	orrs	r3, r1
 8004e6c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e76:	2100      	movs	r1, #0
 8004e78:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e80:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004e84:	460b      	mov	r3, r1
 8004e86:	4313      	orrs	r3, r2
 8004e88:	d011      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e8e:	3308      	adds	r3, #8
 8004e90:	2100      	movs	r1, #0
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 fb78 	bl	8005588 <RCCEx_PLL2_Config>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d003      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004eaa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	6239      	str	r1, [r7, #32]
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ec0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	d011      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ece:	3308      	adds	r3, #8
 8004ed0:	2101      	movs	r1, #1
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 fb58 	bl	8005588 <RCCEx_PLL2_Config>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004ede:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004eea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	61b9      	str	r1, [r7, #24]
 8004efa:	f003 0304 	and.w	r3, r3, #4
 8004efe:	61fb      	str	r3, [r7, #28]
 8004f00:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004f04:	460b      	mov	r3, r1
 8004f06:	4313      	orrs	r3, r2
 8004f08:	d011      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f0e:	3308      	adds	r3, #8
 8004f10:	2102      	movs	r1, #2
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 fb38 	bl	8005588 <RCCEx_PLL2_Config>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004f1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f36:	2100      	movs	r1, #0
 8004f38:	6139      	str	r1, [r7, #16]
 8004f3a:	f003 0308 	and.w	r3, r3, #8
 8004f3e:	617b      	str	r3, [r7, #20]
 8004f40:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004f44:	460b      	mov	r3, r1
 8004f46:	4313      	orrs	r3, r2
 8004f48:	d011      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f4e:	3328      	adds	r3, #40	@ 0x28
 8004f50:	2100      	movs	r1, #0
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 fbca 	bl	80056ec <RCCEx_PLL3_Config>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004f5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f76:	2100      	movs	r1, #0
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	f003 0310 	and.w	r3, r3, #16
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004f84:	460b      	mov	r3, r1
 8004f86:	4313      	orrs	r3, r2
 8004f88:	d011      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f8e:	3328      	adds	r3, #40	@ 0x28
 8004f90:	2101      	movs	r1, #1
 8004f92:	4618      	mov	r0, r3
 8004f94:	f000 fbaa 	bl	80056ec <RCCEx_PLL3_Config>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004faa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	6039      	str	r1, [r7, #0]
 8004fba:	f003 0320 	and.w	r3, r3, #32
 8004fbe:	607b      	str	r3, [r7, #4]
 8004fc0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	d011      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fce:	3328      	adds	r3, #40	@ 0x28
 8004fd0:	2102      	movs	r1, #2
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 fb8a 	bl	80056ec <RCCEx_PLL3_Config>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004fde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d003      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004fee:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	e000      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005002:	46bd      	mov	sp, r7
 8005004:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005008:	58024400 	.word	0x58024400

0800500c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005010:	f7fe fd96 	bl	8003b40 <HAL_RCC_GetHCLKFreq>
 8005014:	4602      	mov	r2, r0
 8005016:	4b06      	ldr	r3, [pc, #24]	@ (8005030 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	091b      	lsrs	r3, r3, #4
 800501c:	f003 0307 	and.w	r3, r3, #7
 8005020:	4904      	ldr	r1, [pc, #16]	@ (8005034 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005022:	5ccb      	ldrb	r3, [r1, r3]
 8005024:	f003 031f 	and.w	r3, r3, #31
 8005028:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800502c:	4618      	mov	r0, r3
 800502e:	bd80      	pop	{r7, pc}
 8005030:	58024400 	.word	0x58024400
 8005034:	0800affc 	.word	0x0800affc

08005038 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005038:	b480      	push	{r7}
 800503a:	b089      	sub	sp, #36	@ 0x24
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005040:	4ba1      	ldr	r3, [pc, #644]	@ (80052c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005044:	f003 0303 	and.w	r3, r3, #3
 8005048:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800504a:	4b9f      	ldr	r3, [pc, #636]	@ (80052c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800504c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800504e:	0b1b      	lsrs	r3, r3, #12
 8005050:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005054:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005056:	4b9c      	ldr	r3, [pc, #624]	@ (80052c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505a:	091b      	lsrs	r3, r3, #4
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005062:	4b99      	ldr	r3, [pc, #612]	@ (80052c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005066:	08db      	lsrs	r3, r3, #3
 8005068:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	fb02 f303 	mul.w	r3, r2, r3
 8005072:	ee07 3a90 	vmov	s15, r3
 8005076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800507a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 8111 	beq.w	80052a8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	2b02      	cmp	r3, #2
 800508a:	f000 8083 	beq.w	8005194 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	2b02      	cmp	r3, #2
 8005092:	f200 80a1 	bhi.w	80051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d003      	beq.n	80050a4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d056      	beq.n	8005150 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80050a2:	e099      	b.n	80051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050a4:	4b88      	ldr	r3, [pc, #544]	@ (80052c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0320 	and.w	r3, r3, #32
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d02d      	beq.n	800510c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050b0:	4b85      	ldr	r3, [pc, #532]	@ (80052c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	08db      	lsrs	r3, r3, #3
 80050b6:	f003 0303 	and.w	r3, r3, #3
 80050ba:	4a84      	ldr	r2, [pc, #528]	@ (80052cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80050bc:	fa22 f303 	lsr.w	r3, r2, r3
 80050c0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	ee07 3a90 	vmov	s15, r3
 80050c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	ee07 3a90 	vmov	s15, r3
 80050d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050da:	4b7b      	ldr	r3, [pc, #492]	@ (80052c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e2:	ee07 3a90 	vmov	s15, r3
 80050e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80050ee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80052d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005106:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800510a:	e087      	b.n	800521c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	ee07 3a90 	vmov	s15, r3
 8005112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005116:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80052d4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800511a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800511e:	4b6a      	ldr	r3, [pc, #424]	@ (80052c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005126:	ee07 3a90 	vmov	s15, r3
 800512a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800512e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005132:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80052d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800513a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800513e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800514a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800514e:	e065      	b.n	800521c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	ee07 3a90 	vmov	s15, r3
 8005156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800515a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80052d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800515e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005162:	4b59      	ldr	r3, [pc, #356]	@ (80052c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800516a:	ee07 3a90 	vmov	s15, r3
 800516e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005172:	ed97 6a03 	vldr	s12, [r7, #12]
 8005176:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80052d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800517a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800517e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005182:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800518a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800518e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005192:	e043      	b.n	800521c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	ee07 3a90 	vmov	s15, r3
 800519a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800519e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80052dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80051a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051a6:	4b48      	ldr	r3, [pc, #288]	@ (80052c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ae:	ee07 3a90 	vmov	s15, r3
 80051b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80051ba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80052d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051d6:	e021      	b.n	800521c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	ee07 3a90 	vmov	s15, r3
 80051de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051e2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80052d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80051e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ea:	4b37      	ldr	r3, [pc, #220]	@ (80052c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051f2:	ee07 3a90 	vmov	s15, r3
 80051f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80051fe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80052d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800520a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800520e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005216:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800521a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800521c:	4b2a      	ldr	r3, [pc, #168]	@ (80052c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800521e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005220:	0a5b      	lsrs	r3, r3, #9
 8005222:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005226:	ee07 3a90 	vmov	s15, r3
 800522a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800522e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005232:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005236:	edd7 6a07 	vldr	s13, [r7, #28]
 800523a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800523e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005242:	ee17 2a90 	vmov	r2, s15
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800524a:	4b1f      	ldr	r3, [pc, #124]	@ (80052c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800524c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800524e:	0c1b      	lsrs	r3, r3, #16
 8005250:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005254:	ee07 3a90 	vmov	s15, r3
 8005258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800525c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005260:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005264:	edd7 6a07 	vldr	s13, [r7, #28]
 8005268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800526c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005270:	ee17 2a90 	vmov	r2, s15
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005278:	4b13      	ldr	r3, [pc, #76]	@ (80052c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800527a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800527c:	0e1b      	lsrs	r3, r3, #24
 800527e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005282:	ee07 3a90 	vmov	s15, r3
 8005286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800528a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800528e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005292:	edd7 6a07 	vldr	s13, [r7, #28]
 8005296:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800529a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800529e:	ee17 2a90 	vmov	r2, s15
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80052a6:	e008      	b.n	80052ba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	609a      	str	r2, [r3, #8]
}
 80052ba:	bf00      	nop
 80052bc:	3724      	adds	r7, #36	@ 0x24
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	58024400 	.word	0x58024400
 80052cc:	03d09000 	.word	0x03d09000
 80052d0:	46000000 	.word	0x46000000
 80052d4:	4c742400 	.word	0x4c742400
 80052d8:	4a742400 	.word	0x4a742400
 80052dc:	4bbebc20 	.word	0x4bbebc20

080052e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b089      	sub	sp, #36	@ 0x24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052e8:	4ba1      	ldr	r3, [pc, #644]	@ (8005570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ec:	f003 0303 	and.w	r3, r3, #3
 80052f0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80052f2:	4b9f      	ldr	r3, [pc, #636]	@ (8005570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f6:	0d1b      	lsrs	r3, r3, #20
 80052f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052fc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80052fe:	4b9c      	ldr	r3, [pc, #624]	@ (8005570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005302:	0a1b      	lsrs	r3, r3, #8
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800530a:	4b99      	ldr	r3, [pc, #612]	@ (8005570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800530c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800530e:	08db      	lsrs	r3, r3, #3
 8005310:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	fb02 f303 	mul.w	r3, r2, r3
 800531a:	ee07 3a90 	vmov	s15, r3
 800531e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005322:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	2b00      	cmp	r3, #0
 800532a:	f000 8111 	beq.w	8005550 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	2b02      	cmp	r3, #2
 8005332:	f000 8083 	beq.w	800543c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	2b02      	cmp	r3, #2
 800533a:	f200 80a1 	bhi.w	8005480 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d003      	beq.n	800534c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d056      	beq.n	80053f8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800534a:	e099      	b.n	8005480 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800534c:	4b88      	ldr	r3, [pc, #544]	@ (8005570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0320 	and.w	r3, r3, #32
 8005354:	2b00      	cmp	r3, #0
 8005356:	d02d      	beq.n	80053b4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005358:	4b85      	ldr	r3, [pc, #532]	@ (8005570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	08db      	lsrs	r3, r3, #3
 800535e:	f003 0303 	and.w	r3, r3, #3
 8005362:	4a84      	ldr	r2, [pc, #528]	@ (8005574 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005364:	fa22 f303 	lsr.w	r3, r2, r3
 8005368:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	ee07 3a90 	vmov	s15, r3
 8005370:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	ee07 3a90 	vmov	s15, r3
 800537a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800537e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005382:	4b7b      	ldr	r3, [pc, #492]	@ (8005570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800538a:	ee07 3a90 	vmov	s15, r3
 800538e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005392:	ed97 6a03 	vldr	s12, [r7, #12]
 8005396:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005578 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800539a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800539e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80053b2:	e087      	b.n	80054c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	ee07 3a90 	vmov	s15, r3
 80053ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053be:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800557c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80053c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053c6:	4b6a      	ldr	r3, [pc, #424]	@ (8005570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ce:	ee07 3a90 	vmov	s15, r3
 80053d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80053da:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005578 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053f6:	e065      	b.n	80054c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	ee07 3a90 	vmov	s15, r3
 80053fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005402:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005580 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800540a:	4b59      	ldr	r3, [pc, #356]	@ (8005570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800540c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005412:	ee07 3a90 	vmov	s15, r3
 8005416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800541a:	ed97 6a03 	vldr	s12, [r7, #12]
 800541e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005578 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800542a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800542e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005436:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800543a:	e043      	b.n	80054c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	ee07 3a90 	vmov	s15, r3
 8005442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005446:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005584 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800544a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800544e:	4b48      	ldr	r3, [pc, #288]	@ (8005570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005456:	ee07 3a90 	vmov	s15, r3
 800545a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800545e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005462:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005578 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800546a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800546e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800547a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800547e:	e021      	b.n	80054c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	ee07 3a90 	vmov	s15, r3
 8005486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800548a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005580 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800548e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005492:	4b37      	ldr	r3, [pc, #220]	@ (8005570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800549a:	ee07 3a90 	vmov	s15, r3
 800549e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80054a6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005578 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054c2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80054c4:	4b2a      	ldr	r3, [pc, #168]	@ (8005570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c8:	0a5b      	lsrs	r3, r3, #9
 80054ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054ce:	ee07 3a90 	vmov	s15, r3
 80054d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054de:	edd7 6a07 	vldr	s13, [r7, #28]
 80054e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054ea:	ee17 2a90 	vmov	r2, s15
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80054f2:	4b1f      	ldr	r3, [pc, #124]	@ (8005570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f6:	0c1b      	lsrs	r3, r3, #16
 80054f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054fc:	ee07 3a90 	vmov	s15, r3
 8005500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005504:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005508:	ee37 7a87 	vadd.f32	s14, s15, s14
 800550c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005510:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005514:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005518:	ee17 2a90 	vmov	r2, s15
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005520:	4b13      	ldr	r3, [pc, #76]	@ (8005570 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005524:	0e1b      	lsrs	r3, r3, #24
 8005526:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800552a:	ee07 3a90 	vmov	s15, r3
 800552e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005532:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005536:	ee37 7a87 	vadd.f32	s14, s15, s14
 800553a:	edd7 6a07 	vldr	s13, [r7, #28]
 800553e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005542:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005546:	ee17 2a90 	vmov	r2, s15
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800554e:	e008      	b.n	8005562 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	609a      	str	r2, [r3, #8]
}
 8005562:	bf00      	nop
 8005564:	3724      	adds	r7, #36	@ 0x24
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	58024400 	.word	0x58024400
 8005574:	03d09000 	.word	0x03d09000
 8005578:	46000000 	.word	0x46000000
 800557c:	4c742400 	.word	0x4c742400
 8005580:	4a742400 	.word	0x4a742400
 8005584:	4bbebc20 	.word	0x4bbebc20

08005588 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005592:	2300      	movs	r3, #0
 8005594:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005596:	4b53      	ldr	r3, [pc, #332]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 8005598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800559a:	f003 0303 	and.w	r3, r3, #3
 800559e:	2b03      	cmp	r3, #3
 80055a0:	d101      	bne.n	80055a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e099      	b.n	80056da <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80055a6:	4b4f      	ldr	r3, [pc, #316]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a4e      	ldr	r2, [pc, #312]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 80055ac:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80055b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055b2:	f7fc fb5b 	bl	8001c6c <HAL_GetTick>
 80055b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80055b8:	e008      	b.n	80055cc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80055ba:	f7fc fb57 	bl	8001c6c <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d901      	bls.n	80055cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e086      	b.n	80056da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80055cc:	4b45      	ldr	r3, [pc, #276]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1f0      	bne.n	80055ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80055d8:	4b42      	ldr	r3, [pc, #264]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 80055da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055dc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	031b      	lsls	r3, r3, #12
 80055e6:	493f      	ldr	r1, [pc, #252]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	628b      	str	r3, [r1, #40]	@ 0x28
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	3b01      	subs	r3, #1
 80055f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	3b01      	subs	r3, #1
 80055fc:	025b      	lsls	r3, r3, #9
 80055fe:	b29b      	uxth	r3, r3
 8005600:	431a      	orrs	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	3b01      	subs	r3, #1
 8005608:	041b      	lsls	r3, r3, #16
 800560a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800560e:	431a      	orrs	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	3b01      	subs	r3, #1
 8005616:	061b      	lsls	r3, r3, #24
 8005618:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800561c:	4931      	ldr	r1, [pc, #196]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 800561e:	4313      	orrs	r3, r2
 8005620:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005622:	4b30      	ldr	r3, [pc, #192]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 8005624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005626:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	492d      	ldr	r1, [pc, #180]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 8005630:	4313      	orrs	r3, r2
 8005632:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005634:	4b2b      	ldr	r3, [pc, #172]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 8005636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005638:	f023 0220 	bic.w	r2, r3, #32
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	4928      	ldr	r1, [pc, #160]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 8005642:	4313      	orrs	r3, r2
 8005644:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005646:	4b27      	ldr	r3, [pc, #156]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 8005648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800564a:	4a26      	ldr	r2, [pc, #152]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 800564c:	f023 0310 	bic.w	r3, r3, #16
 8005650:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005652:	4b24      	ldr	r3, [pc, #144]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 8005654:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005656:	4b24      	ldr	r3, [pc, #144]	@ (80056e8 <RCCEx_PLL2_Config+0x160>)
 8005658:	4013      	ands	r3, r2
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	69d2      	ldr	r2, [r2, #28]
 800565e:	00d2      	lsls	r2, r2, #3
 8005660:	4920      	ldr	r1, [pc, #128]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 8005662:	4313      	orrs	r3, r2
 8005664:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005666:	4b1f      	ldr	r3, [pc, #124]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 8005668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800566a:	4a1e      	ldr	r2, [pc, #120]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 800566c:	f043 0310 	orr.w	r3, r3, #16
 8005670:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d106      	bne.n	8005686 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005678:	4b1a      	ldr	r3, [pc, #104]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 800567a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800567c:	4a19      	ldr	r2, [pc, #100]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 800567e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005682:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005684:	e00f      	b.n	80056a6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d106      	bne.n	800569a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800568c:	4b15      	ldr	r3, [pc, #84]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 800568e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005690:	4a14      	ldr	r2, [pc, #80]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 8005692:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005696:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005698:	e005      	b.n	80056a6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800569a:	4b12      	ldr	r3, [pc, #72]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 800569c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800569e:	4a11      	ldr	r2, [pc, #68]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 80056a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80056a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80056a6:	4b0f      	ldr	r3, [pc, #60]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a0e      	ldr	r2, [pc, #56]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 80056ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80056b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056b2:	f7fc fadb 	bl	8001c6c <HAL_GetTick>
 80056b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80056b8:	e008      	b.n	80056cc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80056ba:	f7fc fad7 	bl	8001c6c <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d901      	bls.n	80056cc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e006      	b.n	80056da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80056cc:	4b05      	ldr	r3, [pc, #20]	@ (80056e4 <RCCEx_PLL2_Config+0x15c>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d0f0      	beq.n	80056ba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80056d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	58024400 	.word	0x58024400
 80056e8:	ffff0007 	.word	0xffff0007

080056ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056f6:	2300      	movs	r3, #0
 80056f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056fa:	4b53      	ldr	r3, [pc, #332]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 80056fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056fe:	f003 0303 	and.w	r3, r3, #3
 8005702:	2b03      	cmp	r3, #3
 8005704:	d101      	bne.n	800570a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e099      	b.n	800583e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800570a:	4b4f      	ldr	r3, [pc, #316]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a4e      	ldr	r2, [pc, #312]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 8005710:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005714:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005716:	f7fc faa9 	bl	8001c6c <HAL_GetTick>
 800571a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800571c:	e008      	b.n	8005730 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800571e:	f7fc faa5 	bl	8001c6c <HAL_GetTick>
 8005722:	4602      	mov	r2, r0
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	2b02      	cmp	r3, #2
 800572a:	d901      	bls.n	8005730 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e086      	b.n	800583e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005730:	4b45      	ldr	r3, [pc, #276]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1f0      	bne.n	800571e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800573c:	4b42      	ldr	r3, [pc, #264]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 800573e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005740:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	051b      	lsls	r3, r3, #20
 800574a:	493f      	ldr	r1, [pc, #252]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 800574c:	4313      	orrs	r3, r2
 800574e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	3b01      	subs	r3, #1
 8005756:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	3b01      	subs	r3, #1
 8005760:	025b      	lsls	r3, r3, #9
 8005762:	b29b      	uxth	r3, r3
 8005764:	431a      	orrs	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	3b01      	subs	r3, #1
 800576c:	041b      	lsls	r3, r3, #16
 800576e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005772:	431a      	orrs	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	3b01      	subs	r3, #1
 800577a:	061b      	lsls	r3, r3, #24
 800577c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005780:	4931      	ldr	r1, [pc, #196]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 8005782:	4313      	orrs	r3, r2
 8005784:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005786:	4b30      	ldr	r3, [pc, #192]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 8005788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	492d      	ldr	r1, [pc, #180]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 8005794:	4313      	orrs	r3, r2
 8005796:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005798:	4b2b      	ldr	r3, [pc, #172]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 800579a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800579c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	4928      	ldr	r1, [pc, #160]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80057aa:	4b27      	ldr	r3, [pc, #156]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 80057ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ae:	4a26      	ldr	r2, [pc, #152]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 80057b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80057b6:	4b24      	ldr	r3, [pc, #144]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 80057b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057ba:	4b24      	ldr	r3, [pc, #144]	@ (800584c <RCCEx_PLL3_Config+0x160>)
 80057bc:	4013      	ands	r3, r2
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	69d2      	ldr	r2, [r2, #28]
 80057c2:	00d2      	lsls	r2, r2, #3
 80057c4:	4920      	ldr	r1, [pc, #128]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80057ca:	4b1f      	ldr	r3, [pc, #124]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 80057cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ce:	4a1e      	ldr	r2, [pc, #120]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 80057d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d106      	bne.n	80057ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80057dc:	4b1a      	ldr	r3, [pc, #104]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 80057de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e0:	4a19      	ldr	r2, [pc, #100]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 80057e2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80057e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80057e8:	e00f      	b.n	800580a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d106      	bne.n	80057fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80057f0:	4b15      	ldr	r3, [pc, #84]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 80057f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f4:	4a14      	ldr	r2, [pc, #80]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 80057f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80057fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80057fc:	e005      	b.n	800580a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80057fe:	4b12      	ldr	r3, [pc, #72]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 8005800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005802:	4a11      	ldr	r2, [pc, #68]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 8005804:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005808:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800580a:	4b0f      	ldr	r3, [pc, #60]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a0e      	ldr	r2, [pc, #56]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 8005810:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005814:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005816:	f7fc fa29 	bl	8001c6c <HAL_GetTick>
 800581a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800581c:	e008      	b.n	8005830 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800581e:	f7fc fa25 	bl	8001c6c <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	2b02      	cmp	r3, #2
 800582a:	d901      	bls.n	8005830 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e006      	b.n	800583e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005830:	4b05      	ldr	r3, [pc, #20]	@ (8005848 <RCCEx_PLL3_Config+0x15c>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d0f0      	beq.n	800581e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800583c:	7bfb      	ldrb	r3, [r7, #15]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	58024400 	.word	0x58024400
 800584c:	ffff0007 	.word	0xffff0007

08005850 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e10f      	b.n	8005a82 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a87      	ldr	r2, [pc, #540]	@ (8005a8c <HAL_SPI_Init+0x23c>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d00f      	beq.n	8005892 <HAL_SPI_Init+0x42>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a86      	ldr	r2, [pc, #536]	@ (8005a90 <HAL_SPI_Init+0x240>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d00a      	beq.n	8005892 <HAL_SPI_Init+0x42>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a84      	ldr	r2, [pc, #528]	@ (8005a94 <HAL_SPI_Init+0x244>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d005      	beq.n	8005892 <HAL_SPI_Init+0x42>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	2b0f      	cmp	r3, #15
 800588c:	d901      	bls.n	8005892 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e0f7      	b.n	8005a82 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f001 fbac 	bl	8006ff0 <SPI_GetPacketSize>
 8005898:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a7b      	ldr	r2, [pc, #492]	@ (8005a8c <HAL_SPI_Init+0x23c>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d00c      	beq.n	80058be <HAL_SPI_Init+0x6e>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a79      	ldr	r2, [pc, #484]	@ (8005a90 <HAL_SPI_Init+0x240>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d007      	beq.n	80058be <HAL_SPI_Init+0x6e>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a78      	ldr	r2, [pc, #480]	@ (8005a94 <HAL_SPI_Init+0x244>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d002      	beq.n	80058be <HAL_SPI_Init+0x6e>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2b08      	cmp	r3, #8
 80058bc:	d811      	bhi.n	80058e2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80058c2:	4a72      	ldr	r2, [pc, #456]	@ (8005a8c <HAL_SPI_Init+0x23c>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d009      	beq.n	80058dc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a70      	ldr	r2, [pc, #448]	@ (8005a90 <HAL_SPI_Init+0x240>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d004      	beq.n	80058dc <HAL_SPI_Init+0x8c>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a6f      	ldr	r2, [pc, #444]	@ (8005a94 <HAL_SPI_Init+0x244>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d104      	bne.n	80058e6 <HAL_SPI_Init+0x96>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2b10      	cmp	r3, #16
 80058e0:	d901      	bls.n	80058e6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e0cd      	b.n	8005a82 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d106      	bne.n	8005900 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f7fb fc68 	bl	80011d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2202      	movs	r2, #2
 8005904:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f022 0201 	bic.w	r2, r2, #1
 8005916:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8005922:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800592c:	d119      	bne.n	8005962 <HAL_SPI_Init+0x112>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005936:	d103      	bne.n	8005940 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800593c:	2b00      	cmp	r3, #0
 800593e:	d008      	beq.n	8005952 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10c      	bne.n	8005962 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800594c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005950:	d107      	bne.n	8005962 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005960:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00f      	beq.n	800598e <HAL_SPI_Init+0x13e>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	2b06      	cmp	r3, #6
 8005974:	d90b      	bls.n	800598e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	430a      	orrs	r2, r1
 800598a:	601a      	str	r2, [r3, #0]
 800598c:	e007      	b.n	800599e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800599c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	69da      	ldr	r2, [r3, #28]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a6:	431a      	orrs	r2, r3
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	431a      	orrs	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059b0:	ea42 0103 	orr.w	r1, r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	68da      	ldr	r2, [r3, #12]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	430a      	orrs	r2, r1
 80059be:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c8:	431a      	orrs	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ce:	431a      	orrs	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	431a      	orrs	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	431a      	orrs	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	431a      	orrs	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	431a      	orrs	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	431a      	orrs	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059f2:	431a      	orrs	r2, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	431a      	orrs	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059fe:	ea42 0103 	orr.w	r1, r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d113      	bne.n	8005a3e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a28:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005a3c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f022 0201 	bic.w	r2, r2, #1
 8005a4c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	40013000 	.word	0x40013000
 8005a90:	40003800 	.word	0x40003800
 8005a94:	40003c00 	.word	0x40003c00

08005a98 <HAL_SPI_DeInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e01b      	b.n	8005ae2 <HAL_SPI_DeInit+0x4a>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2202      	movs	r2, #2
 8005aae:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f022 0201 	bic.w	r2, r2, #1
 8005ac0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7fb fc0a 	bl	80012dc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State = HAL_SPI_STATE_RESET;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3708      	adds	r7, #8
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
	...

08005aec <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b088      	sub	sp, #32
 8005af0:	af02      	add	r7, sp, #8
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	603b      	str	r3, [r7, #0]
 8005af8:	4613      	mov	r3, r2
 8005afa:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	3320      	adds	r3, #32
 8005b02:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b04:	f7fc f8b2 	bl	8001c6c <HAL_GetTick>
 8005b08:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d001      	beq.n	8005b1a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8005b16:	2302      	movs	r3, #2
 8005b18:	e1d1      	b.n	8005ebe <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d002      	beq.n	8005b26 <HAL_SPI_Transmit+0x3a>
 8005b20:	88fb      	ldrh	r3, [r7, #6]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e1c9      	b.n	8005ebe <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d101      	bne.n	8005b38 <HAL_SPI_Transmit+0x4c>
 8005b34:	2302      	movs	r3, #2
 8005b36:	e1c2      	b.n	8005ebe <HAL_SPI_Transmit+0x3d2>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2203      	movs	r2, #3
 8005b44:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	88fa      	ldrh	r2, [r7, #6]
 8005b5a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	88fa      	ldrh	r2, [r7, #6]
 8005b62:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005b90:	d108      	bne.n	8005ba4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ba0:	601a      	str	r2, [r3, #0]
 8005ba2:	e009      	b.n	8005bb8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005bb6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	4b96      	ldr	r3, [pc, #600]	@ (8005e18 <HAL_SPI_Transmit+0x32c>)
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	88f9      	ldrh	r1, [r7, #6]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	6812      	ldr	r2, [r2, #0]
 8005bc8:	430b      	orrs	r3, r1
 8005bca:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f042 0201 	orr.w	r2, r2, #1
 8005bda:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005be4:	d107      	bne.n	8005bf6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bf4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	2b0f      	cmp	r3, #15
 8005bfc:	d947      	bls.n	8005c8e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005bfe:	e03f      	b.n	8005c80 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	f003 0302 	and.w	r3, r3, #2
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d114      	bne.n	8005c38 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	6812      	ldr	r2, [r2, #0]
 8005c18:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c1e:	1d1a      	adds	r2, r3, #4
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005c36:	e023      	b.n	8005c80 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c38:	f7fc f818 	bl	8001c6c <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d803      	bhi.n	8005c50 <HAL_SPI_Transmit+0x164>
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c4e:	d102      	bne.n	8005c56 <HAL_SPI_Transmit+0x16a>
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d114      	bne.n	8005c80 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	f001 f8fc 	bl	8006e54 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c62:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e11e      	b.n	8005ebe <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1b9      	bne.n	8005c00 <HAL_SPI_Transmit+0x114>
 8005c8c:	e0f1      	b.n	8005e72 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	2b07      	cmp	r3, #7
 8005c94:	f240 80e6 	bls.w	8005e64 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005c98:	e05d      	b.n	8005d56 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	f003 0302 	and.w	r3, r3, #2
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d132      	bne.n	8005d0e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d918      	bls.n	8005ce6 <HAL_SPI_Transmit+0x1fa>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d014      	beq.n	8005ce6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6812      	ldr	r2, [r2, #0]
 8005cc6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ccc:	1d1a      	adds	r2, r3, #4
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	3b02      	subs	r3, #2
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005ce4:	e037      	b.n	8005d56 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cea:	881a      	ldrh	r2, [r3, #0]
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cf4:	1c9a      	adds	r2, r3, #2
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	3b01      	subs	r3, #1
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005d0c:	e023      	b.n	8005d56 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d0e:	f7fb ffad 	bl	8001c6c <HAL_GetTick>
 8005d12:	4602      	mov	r2, r0
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	683a      	ldr	r2, [r7, #0]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d803      	bhi.n	8005d26 <HAL_SPI_Transmit+0x23a>
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d24:	d102      	bne.n	8005d2c <HAL_SPI_Transmit+0x240>
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d114      	bne.n	8005d56 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f001 f891 	bl	8006e54 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d38:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e0b3      	b.n	8005ebe <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d19b      	bne.n	8005c9a <HAL_SPI_Transmit+0x1ae>
 8005d62:	e086      	b.n	8005e72 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d154      	bne.n	8005e1c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	2b03      	cmp	r3, #3
 8005d7c:	d918      	bls.n	8005db0 <HAL_SPI_Transmit+0x2c4>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d82:	2b40      	cmp	r3, #64	@ 0x40
 8005d84:	d914      	bls.n	8005db0 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	6812      	ldr	r2, [r2, #0]
 8005d90:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d96:	1d1a      	adds	r2, r3, #4
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	3b04      	subs	r3, #4
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005dae:	e059      	b.n	8005e64 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d917      	bls.n	8005dec <HAL_SPI_Transmit+0x300>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d013      	beq.n	8005dec <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dc8:	881a      	ldrh	r2, [r3, #0]
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dd2:	1c9a      	adds	r2, r3, #2
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	3b02      	subs	r3, #2
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005dea:	e03b      	b.n	8005e64 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	3320      	adds	r3, #32
 8005df6:	7812      	ldrb	r2, [r2, #0]
 8005df8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dfe:	1c5a      	adds	r2, r3, #1
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005e16:	e025      	b.n	8005e64 <HAL_SPI_Transmit+0x378>
 8005e18:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e1c:	f7fb ff26 	bl	8001c6c <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	683a      	ldr	r2, [r7, #0]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d803      	bhi.n	8005e34 <HAL_SPI_Transmit+0x348>
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e32:	d102      	bne.n	8005e3a <HAL_SPI_Transmit+0x34e>
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d114      	bne.n	8005e64 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f001 f80a 	bl	8006e54 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e46:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e02c      	b.n	8005ebe <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f47f af79 	bne.w	8005d64 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	9300      	str	r3, [sp, #0]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	2108      	movs	r1, #8
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f001 f889 	bl	8006f94 <SPI_WaitOnFlagUntilTimeout>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d007      	beq.n	8005e98 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e8e:	f043 0220 	orr.w	r2, r3, #32
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f000 ffdb 	bl	8006e54 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d001      	beq.n	8005ebc <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e000      	b.n	8005ebe <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
  }
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3718      	adds	r7, #24
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop

08005ec8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b088      	sub	sp, #32
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	603b      	str	r3, [r7, #0]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005edc:	095b      	lsrs	r3, r3, #5
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	3330      	adds	r3, #48	@ 0x30
 8005eea:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005eec:	f7fb febe 	bl	8001c6c <HAL_GetTick>
 8005ef0:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d001      	beq.n	8005f02 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8005efe:	2302      	movs	r3, #2
 8005f00:	e250      	b.n	80063a4 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d002      	beq.n	8005f0e <HAL_SPI_Receive+0x46>
 8005f08:	88fb      	ldrh	r3, [r7, #6]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e248      	b.n	80063a4 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d101      	bne.n	8005f20 <HAL_SPI_Receive+0x58>
 8005f1c:	2302      	movs	r3, #2
 8005f1e:	e241      	b.n	80063a4 <HAL_SPI_Receive+0x4dc>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2204      	movs	r2, #4
 8005f2c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	68ba      	ldr	r2, [r7, #8]
 8005f3c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	88fa      	ldrh	r2, [r7, #6]
 8005f42:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	88fa      	ldrh	r2, [r7, #6]
 8005f4a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005f78:	d108      	bne.n	8005f8c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f88:	601a      	str	r2, [r3, #0]
 8005f8a:	e009      	b.n	8005fa0 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005f9e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	685a      	ldr	r2, [r3, #4]
 8005fa6:	4b95      	ldr	r3, [pc, #596]	@ (80061fc <HAL_SPI_Receive+0x334>)
 8005fa8:	4013      	ands	r3, r2
 8005faa:	88f9      	ldrh	r1, [r7, #6]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	6812      	ldr	r2, [r2, #0]
 8005fb0:	430b      	orrs	r3, r1
 8005fb2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f042 0201 	orr.w	r2, r2, #1
 8005fc2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005fcc:	d107      	bne.n	8005fde <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fdc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	2b0f      	cmp	r3, #15
 8005fe4:	d96c      	bls.n	80060c0 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005fe6:	e064      	b.n	80060b2 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d114      	bne.n	8006028 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006006:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006008:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800600e:	1d1a      	adds	r2, r3, #4
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800601a:	b29b      	uxth	r3, r3
 800601c:	3b01      	subs	r3, #1
 800601e:	b29a      	uxth	r2, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006026:	e044      	b.n	80060b2 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800602e:	b29b      	uxth	r3, r3
 8006030:	8bfa      	ldrh	r2, [r7, #30]
 8006032:	429a      	cmp	r2, r3
 8006034:	d919      	bls.n	800606a <HAL_SPI_Receive+0x1a2>
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d014      	beq.n	800606a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006048:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800604a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006050:	1d1a      	adds	r2, r3, #4
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800605c:	b29b      	uxth	r3, r3
 800605e:	3b01      	subs	r3, #1
 8006060:	b29a      	uxth	r2, r3
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006068:	e023      	b.n	80060b2 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800606a:	f7fb fdff 	bl	8001c6c <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	683a      	ldr	r2, [r7, #0]
 8006076:	429a      	cmp	r2, r3
 8006078:	d803      	bhi.n	8006082 <HAL_SPI_Receive+0x1ba>
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006080:	d102      	bne.n	8006088 <HAL_SPI_Receive+0x1c0>
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d114      	bne.n	80060b2 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f000 fee3 	bl	8006e54 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006094:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e178      	b.n	80063a4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d194      	bne.n	8005fe8 <HAL_SPI_Receive+0x120>
 80060be:	e15e      	b.n	800637e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	2b07      	cmp	r3, #7
 80060c6:	f240 8153 	bls.w	8006370 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80060ca:	e08f      	b.n	80061ec <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d114      	bne.n	800610c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060e6:	69ba      	ldr	r2, [r7, #24]
 80060e8:	8812      	ldrh	r2, [r2, #0]
 80060ea:	b292      	uxth	r2, r2
 80060ec:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060f2:	1c9a      	adds	r2, r3, #2
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80060fe:	b29b      	uxth	r3, r3
 8006100:	3b01      	subs	r3, #1
 8006102:	b29a      	uxth	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800610a:	e06f      	b.n	80061ec <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006112:	b29b      	uxth	r3, r3
 8006114:	8bfa      	ldrh	r2, [r7, #30]
 8006116:	429a      	cmp	r2, r3
 8006118:	d924      	bls.n	8006164 <HAL_SPI_Receive+0x29c>
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d01f      	beq.n	8006164 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006128:	69ba      	ldr	r2, [r7, #24]
 800612a:	8812      	ldrh	r2, [r2, #0]
 800612c:	b292      	uxth	r2, r2
 800612e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006134:	1c9a      	adds	r2, r3, #2
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800613e:	69ba      	ldr	r2, [r7, #24]
 8006140:	8812      	ldrh	r2, [r2, #0]
 8006142:	b292      	uxth	r2, r2
 8006144:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800614a:	1c9a      	adds	r2, r3, #2
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006156:	b29b      	uxth	r3, r3
 8006158:	3b02      	subs	r3, #2
 800615a:	b29a      	uxth	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006162:	e043      	b.n	80061ec <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800616a:	b29b      	uxth	r3, r3
 800616c:	2b01      	cmp	r3, #1
 800616e:	d119      	bne.n	80061a4 <HAL_SPI_Receive+0x2dc>
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d014      	beq.n	80061a4 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800617e:	69ba      	ldr	r2, [r7, #24]
 8006180:	8812      	ldrh	r2, [r2, #0]
 8006182:	b292      	uxth	r2, r2
 8006184:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800618a:	1c9a      	adds	r2, r3, #2
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006196:	b29b      	uxth	r3, r3
 8006198:	3b01      	subs	r3, #1
 800619a:	b29a      	uxth	r2, r3
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80061a2:	e023      	b.n	80061ec <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061a4:	f7fb fd62 	bl	8001c6c <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	683a      	ldr	r2, [r7, #0]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d803      	bhi.n	80061bc <HAL_SPI_Receive+0x2f4>
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ba:	d102      	bne.n	80061c2 <HAL_SPI_Receive+0x2fa>
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d114      	bne.n	80061ec <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f000 fe46 	bl	8006e54 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061ce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e0db      	b.n	80063a4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f47f af69 	bne.w	80060cc <HAL_SPI_Receive+0x204>
 80061fa:	e0c0      	b.n	800637e <HAL_SPI_Receive+0x4b6>
 80061fc:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b01      	cmp	r3, #1
 8006214:	d117      	bne.n	8006246 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006222:	7812      	ldrb	r2, [r2, #0]
 8006224:	b2d2      	uxtb	r2, r2
 8006226:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800622c:	1c5a      	adds	r2, r3, #1
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006238:	b29b      	uxth	r3, r3
 800623a:	3b01      	subs	r3, #1
 800623c:	b29a      	uxth	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006244:	e094      	b.n	8006370 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800624c:	b29b      	uxth	r3, r3
 800624e:	8bfa      	ldrh	r2, [r7, #30]
 8006250:	429a      	cmp	r2, r3
 8006252:	d946      	bls.n	80062e2 <HAL_SPI_Receive+0x41a>
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800625a:	2b00      	cmp	r3, #0
 800625c:	d041      	beq.n	80062e2 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800626a:	7812      	ldrb	r2, [r2, #0]
 800626c:	b2d2      	uxtb	r2, r2
 800626e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006274:	1c5a      	adds	r2, r3, #1
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006286:	7812      	ldrb	r2, [r2, #0]
 8006288:	b2d2      	uxtb	r2, r2
 800628a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006290:	1c5a      	adds	r2, r3, #1
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062a2:	7812      	ldrb	r2, [r2, #0]
 80062a4:	b2d2      	uxtb	r2, r2
 80062a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062ac:	1c5a      	adds	r2, r3, #1
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062be:	7812      	ldrb	r2, [r2, #0]
 80062c0:	b2d2      	uxtb	r2, r2
 80062c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062c8:	1c5a      	adds	r2, r3, #1
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	3b04      	subs	r3, #4
 80062d8:	b29a      	uxth	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80062e0:	e046      	b.n	8006370 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	2b03      	cmp	r3, #3
 80062ec:	d81c      	bhi.n	8006328 <HAL_SPI_Receive+0x460>
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d017      	beq.n	8006328 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006304:	7812      	ldrb	r2, [r2, #0]
 8006306:	b2d2      	uxtb	r2, r2
 8006308:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800630e:	1c5a      	adds	r2, r3, #1
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800631a:	b29b      	uxth	r3, r3
 800631c:	3b01      	subs	r3, #1
 800631e:	b29a      	uxth	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006326:	e023      	b.n	8006370 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006328:	f7fb fca0 	bl	8001c6c <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	683a      	ldr	r2, [r7, #0]
 8006334:	429a      	cmp	r2, r3
 8006336:	d803      	bhi.n	8006340 <HAL_SPI_Receive+0x478>
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800633e:	d102      	bne.n	8006346 <HAL_SPI_Receive+0x47e>
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d114      	bne.n	8006370 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f000 fd84 	bl	8006e54 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006352:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	e019      	b.n	80063a4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006376:	b29b      	uxth	r3, r3
 8006378:	2b00      	cmp	r3, #0
 800637a:	f47f af41 	bne.w	8006200 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800637e:	68f8      	ldr	r0, [r7, #12]
 8006380:	f000 fd68 	bl	8006e54 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e000      	b.n	80063a4 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 80063a2:	2300      	movs	r3, #0
  }
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3720      	adds	r7, #32
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b08e      	sub	sp, #56	@ 0x38
 80063b0:	af02      	add	r7, sp, #8
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
 80063b8:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	3320      	adds	r3, #32
 80063c0:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	3330      	adds	r3, #48	@ 0x30
 80063c8:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063ce:	095b      	lsrs	r3, r3, #5
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	3301      	adds	r3, #1
 80063d4:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063d6:	f7fb fc49 	bl	8001c6c <HAL_GetTick>
 80063da:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 80063dc:	887b      	ldrh	r3, [r7, #2]
 80063de:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 80063e0:	887b      	ldrh	r3, [r7, #2]
 80063e2:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d001      	beq.n	80063f4 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 80063f0:	2302      	movs	r3, #2
 80063f2:	e310      	b.n	8006a16 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d005      	beq.n	8006406 <HAL_SPI_TransmitReceive+0x5a>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d002      	beq.n	8006406 <HAL_SPI_TransmitReceive+0x5a>
 8006400:	887b      	ldrh	r3, [r7, #2]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d101      	bne.n	800640a <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e305      	b.n	8006a16 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006410:	2b01      	cmp	r3, #1
 8006412:	d101      	bne.n	8006418 <HAL_SPI_TransmitReceive+0x6c>
 8006414:	2302      	movs	r3, #2
 8006416:	e2fe      	b.n	8006a16 <HAL_SPI_TransmitReceive+0x66a>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2205      	movs	r2, #5
 8006424:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	887a      	ldrh	r2, [r7, #2]
 800643a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	887a      	ldrh	r2, [r7, #2]
 8006442:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	887a      	ldrh	r2, [r7, #2]
 8006450:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	887a      	ldrh	r2, [r7, #2]
 8006458:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68da      	ldr	r2, [r3, #12]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8006476:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a70      	ldr	r2, [pc, #448]	@ (8006640 <HAL_SPI_TransmitReceive+0x294>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d009      	beq.n	8006496 <HAL_SPI_TransmitReceive+0xea>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a6f      	ldr	r2, [pc, #444]	@ (8006644 <HAL_SPI_TransmitReceive+0x298>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d004      	beq.n	8006496 <HAL_SPI_TransmitReceive+0xea>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a6d      	ldr	r2, [pc, #436]	@ (8006648 <HAL_SPI_TransmitReceive+0x29c>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d102      	bne.n	800649c <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8006496:	2310      	movs	r3, #16
 8006498:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800649a:	e001      	b.n	80064a0 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800649c:	2308      	movs	r3, #8
 800649e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	4b69      	ldr	r3, [pc, #420]	@ (800664c <HAL_SPI_TransmitReceive+0x2a0>)
 80064a8:	4013      	ands	r3, r2
 80064aa:	8879      	ldrh	r1, [r7, #2]
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	6812      	ldr	r2, [r2, #0]
 80064b0:	430b      	orrs	r3, r1
 80064b2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f042 0201 	orr.w	r2, r2, #1
 80064c2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064cc:	d107      	bne.n	80064de <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	2b0f      	cmp	r3, #15
 80064e4:	f240 80a2 	bls.w	800662c <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 80064e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ea:	089b      	lsrs	r3, r3, #2
 80064ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80064ee:	e094      	b.n	800661a <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	f003 0302 	and.w	r3, r3, #2
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d120      	bne.n	8006540 <HAL_SPI_TransmitReceive+0x194>
 80064fe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006500:	2b00      	cmp	r3, #0
 8006502:	d01d      	beq.n	8006540 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006504:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006506:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800650a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800650c:	429a      	cmp	r2, r3
 800650e:	d217      	bcs.n	8006540 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	6812      	ldr	r2, [r2, #0]
 800651a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006520:	1d1a      	adds	r2, r3, #4
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800652c:	b29b      	uxth	r3, r3
 800652e:	3b01      	subs	r3, #1
 8006530:	b29a      	uxth	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800653e:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8006548:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800654a:	2b00      	cmp	r3, #0
 800654c:	d065      	beq.n	800661a <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	f003 0301 	and.w	r3, r3, #1
 8006558:	2b01      	cmp	r3, #1
 800655a:	d118      	bne.n	800658e <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006564:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006566:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800656c:	1d1a      	adds	r2, r3, #4
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006578:	b29b      	uxth	r3, r3
 800657a:	3b01      	subs	r3, #1
 800657c:	b29a      	uxth	r2, r3
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800658a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800658c:	e045      	b.n	800661a <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800658e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006590:	8bfb      	ldrh	r3, [r7, #30]
 8006592:	429a      	cmp	r2, r3
 8006594:	d21d      	bcs.n	80065d2 <HAL_SPI_TransmitReceive+0x226>
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d018      	beq.n	80065d2 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065a8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80065aa:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065b0:	1d1a      	adds	r2, r3, #4
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80065bc:	b29b      	uxth	r3, r3
 80065be:	3b01      	subs	r3, #1
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80065ce:	853b      	strh	r3, [r7, #40]	@ 0x28
 80065d0:	e023      	b.n	800661a <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065d2:	f7fb fb4b 	bl	8001c6c <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80065de:	429a      	cmp	r2, r3
 80065e0:	d803      	bhi.n	80065ea <HAL_SPI_TransmitReceive+0x23e>
 80065e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e8:	d102      	bne.n	80065f0 <HAL_SPI_TransmitReceive+0x244>
 80065ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d114      	bne.n	800661a <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f000 fc2f 	bl	8006e54 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065fc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e1fd      	b.n	8006a16 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800661a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800661c:	2b00      	cmp	r3, #0
 800661e:	f47f af67 	bne.w	80064f0 <HAL_SPI_TransmitReceive+0x144>
 8006622:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006624:	2b00      	cmp	r3, #0
 8006626:	f47f af63 	bne.w	80064f0 <HAL_SPI_TransmitReceive+0x144>
 800662a:	e1ce      	b.n	80069ca <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	2b07      	cmp	r3, #7
 8006632:	f240 81c2 	bls.w	80069ba <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8006636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006638:	085b      	lsrs	r3, r3, #1
 800663a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800663c:	e0c9      	b.n	80067d2 <HAL_SPI_TransmitReceive+0x426>
 800663e:	bf00      	nop
 8006640:	40013000 	.word	0x40013000
 8006644:	40003800 	.word	0x40003800
 8006648:	40003c00 	.word	0x40003c00
 800664c:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	f003 0302 	and.w	r3, r3, #2
 800665a:	2b02      	cmp	r3, #2
 800665c:	d11f      	bne.n	800669e <HAL_SPI_TransmitReceive+0x2f2>
 800665e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006660:	2b00      	cmp	r3, #0
 8006662:	d01c      	beq.n	800669e <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006664:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006666:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800666a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800666c:	429a      	cmp	r2, r3
 800666e:	d216      	bcs.n	800669e <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006674:	881a      	ldrh	r2, [r3, #0]
 8006676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006678:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800667e:	1c9a      	adds	r2, r3, #2
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800668a:	b29b      	uxth	r3, r3
 800668c:	3b01      	subs	r3, #1
 800668e:	b29a      	uxth	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800669c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	695b      	ldr	r3, [r3, #20]
 80066a4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80066a6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f000 8092 	beq.w	80067d2 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	695b      	ldr	r3, [r3, #20]
 80066b4:	f003 0301 	and.w	r3, r3, #1
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d118      	bne.n	80066ee <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066c0:	6a3a      	ldr	r2, [r7, #32]
 80066c2:	8812      	ldrh	r2, [r2, #0]
 80066c4:	b292      	uxth	r2, r2
 80066c6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066cc:	1c9a      	adds	r2, r3, #2
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80066d8:	b29b      	uxth	r3, r3
 80066da:	3b01      	subs	r3, #1
 80066dc:	b29a      	uxth	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80066ea:	853b      	strh	r3, [r7, #40]	@ 0x28
 80066ec:	e071      	b.n	80067d2 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80066ee:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80066f0:	8bfb      	ldrh	r3, [r7, #30]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d228      	bcs.n	8006748 <HAL_SPI_TransmitReceive+0x39c>
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d023      	beq.n	8006748 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006704:	6a3a      	ldr	r2, [r7, #32]
 8006706:	8812      	ldrh	r2, [r2, #0]
 8006708:	b292      	uxth	r2, r2
 800670a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006710:	1c9a      	adds	r2, r3, #2
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800671a:	6a3a      	ldr	r2, [r7, #32]
 800671c:	8812      	ldrh	r2, [r2, #0]
 800671e:	b292      	uxth	r2, r2
 8006720:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006726:	1c9a      	adds	r2, r3, #2
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006732:	b29b      	uxth	r3, r3
 8006734:	3b02      	subs	r3, #2
 8006736:	b29a      	uxth	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006744:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006746:	e044      	b.n	80067d2 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8006748:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800674a:	2b01      	cmp	r3, #1
 800674c:	d11d      	bne.n	800678a <HAL_SPI_TransmitReceive+0x3de>
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006754:	2b00      	cmp	r3, #0
 8006756:	d018      	beq.n	800678a <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800675c:	6a3a      	ldr	r2, [r7, #32]
 800675e:	8812      	ldrh	r2, [r2, #0]
 8006760:	b292      	uxth	r2, r2
 8006762:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006768:	1c9a      	adds	r2, r3, #2
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006774:	b29b      	uxth	r3, r3
 8006776:	3b01      	subs	r3, #1
 8006778:	b29a      	uxth	r2, r3
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006786:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006788:	e023      	b.n	80067d2 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800678a:	f7fb fa6f 	bl	8001c6c <HAL_GetTick>
 800678e:	4602      	mov	r2, r0
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006796:	429a      	cmp	r2, r3
 8006798:	d803      	bhi.n	80067a2 <HAL_SPI_TransmitReceive+0x3f6>
 800679a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800679c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a0:	d102      	bne.n	80067a8 <HAL_SPI_TransmitReceive+0x3fc>
 80067a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d114      	bne.n	80067d2 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f000 fb53 	bl	8006e54 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e121      	b.n	8006a16 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80067d2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f47f af3b 	bne.w	8006650 <HAL_SPI_TransmitReceive+0x2a4>
 80067da:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f47f af37 	bne.w	8006650 <HAL_SPI_TransmitReceive+0x2a4>
 80067e2:	e0f2      	b.n	80069ca <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	f003 0302 	and.w	r3, r3, #2
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d121      	bne.n	8006836 <HAL_SPI_TransmitReceive+0x48a>
 80067f2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d01e      	beq.n	8006836 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80067f8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80067fa:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80067fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067fe:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006800:	429a      	cmp	r2, r3
 8006802:	d218      	bcs.n	8006836 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	3320      	adds	r3, #32
 800680e:	7812      	ldrb	r2, [r2, #0]
 8006810:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006816:	1c5a      	adds	r2, r3, #1
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006822:	b29b      	uxth	r3, r3
 8006824:	3b01      	subs	r3, #1
 8006826:	b29a      	uxth	r2, r3
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006834:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	695b      	ldr	r3, [r3, #20]
 800683c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800683e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 80ba 	beq.w	80069ba <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	695b      	ldr	r3, [r3, #20]
 800684c:	f003 0301 	and.w	r3, r3, #1
 8006850:	2b01      	cmp	r3, #1
 8006852:	d11b      	bne.n	800688c <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006860:	7812      	ldrb	r2, [r2, #0]
 8006862:	b2d2      	uxtb	r2, r2
 8006864:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800686a:	1c5a      	adds	r2, r3, #1
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006876:	b29b      	uxth	r3, r3
 8006878:	3b01      	subs	r3, #1
 800687a:	b29a      	uxth	r2, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006888:	853b      	strh	r3, [r7, #40]	@ 0x28
 800688a:	e096      	b.n	80069ba <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800688c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800688e:	8bfb      	ldrh	r3, [r7, #30]
 8006890:	429a      	cmp	r2, r3
 8006892:	d24a      	bcs.n	800692a <HAL_SPI_TransmitReceive+0x57e>
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d045      	beq.n	800692a <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068aa:	7812      	ldrb	r2, [r2, #0]
 80068ac:	b2d2      	uxtb	r2, r2
 80068ae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068b4:	1c5a      	adds	r2, r3, #1
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068c6:	7812      	ldrb	r2, [r2, #0]
 80068c8:	b2d2      	uxtb	r2, r2
 80068ca:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068d0:	1c5a      	adds	r2, r3, #1
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068e2:	7812      	ldrb	r2, [r2, #0]
 80068e4:	b2d2      	uxtb	r2, r2
 80068e6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068ec:	1c5a      	adds	r2, r3, #1
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068fe:	7812      	ldrb	r2, [r2, #0]
 8006900:	b2d2      	uxtb	r2, r2
 8006902:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006908:	1c5a      	adds	r2, r3, #1
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006914:	b29b      	uxth	r3, r3
 8006916:	3b04      	subs	r3, #4
 8006918:	b29a      	uxth	r2, r3
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006926:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006928:	e047      	b.n	80069ba <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800692a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800692c:	2b03      	cmp	r3, #3
 800692e:	d820      	bhi.n	8006972 <HAL_SPI_TransmitReceive+0x5c6>
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8006936:	2b00      	cmp	r3, #0
 8006938:	d01b      	beq.n	8006972 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006946:	7812      	ldrb	r2, [r2, #0]
 8006948:	b2d2      	uxtb	r2, r2
 800694a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006950:	1c5a      	adds	r2, r3, #1
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800695c:	b29b      	uxth	r3, r3
 800695e:	3b01      	subs	r3, #1
 8006960:	b29a      	uxth	r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800696e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006970:	e023      	b.n	80069ba <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006972:	f7fb f97b 	bl	8001c6c <HAL_GetTick>
 8006976:	4602      	mov	r2, r0
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800697e:	429a      	cmp	r2, r3
 8006980:	d803      	bhi.n	800698a <HAL_SPI_TransmitReceive+0x5de>
 8006982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006988:	d102      	bne.n	8006990 <HAL_SPI_TransmitReceive+0x5e4>
 800698a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800698c:	2b00      	cmp	r3, #0
 800698e:	d114      	bne.n	80069ba <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f000 fa5f 	bl	8006e54 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800699c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2201      	movs	r2, #1
 80069aa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e02d      	b.n	8006a16 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80069ba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f47f af11 	bne.w	80067e4 <HAL_SPI_TransmitReceive+0x438>
 80069c2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f47f af0d 	bne.w	80067e4 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	9300      	str	r3, [sp, #0]
 80069ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d0:	2200      	movs	r2, #0
 80069d2:	2108      	movs	r1, #8
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f000 fadd 	bl	8006f94 <SPI_WaitOnFlagUntilTimeout>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d007      	beq.n	80069f0 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069e6:	f043 0220 	orr.w	r2, r3, #32
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f000 fa2f 	bl	8006e54 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2201      	movs	r2, #1
 80069fa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d001      	beq.n	8006a14 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e000      	b.n	8006a16 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8006a14:	2300      	movs	r3, #0
  }
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3730      	adds	r7, #48	@ 0x30
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop

08006a20 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b08a      	sub	sp, #40	@ 0x28
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8006a38:	6a3a      	ldr	r2, [r7, #32]
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006a52:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	3330      	adds	r3, #48	@ 0x30
 8006a5a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d010      	beq.n	8006a88 <HAL_SPI_IRQHandler+0x68>
 8006a66:	6a3b      	ldr	r3, [r7, #32]
 8006a68:	f003 0308 	and.w	r3, r3, #8
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00b      	beq.n	8006a88 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	699a      	ldr	r2, [r3, #24]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a7e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 f9c3 	bl	8006e0c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8006a86:	e192      	b.n	8006dae <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d113      	bne.n	8006aba <HAL_SPI_IRQHandler+0x9a>
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	f003 0320 	and.w	r3, r3, #32
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10e      	bne.n	8006aba <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d009      	beq.n	8006aba <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	4798      	blx	r3
    hspi->RxISR(hspi);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	4798      	blx	r3
    handled = 1UL;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d10f      	bne.n	8006ae4 <HAL_SPI_IRQHandler+0xc4>
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00a      	beq.n	8006ae4 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d105      	bne.n	8006ae4 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	4798      	blx	r3
    handled = 1UL;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	f003 0320 	and.w	r3, r3, #32
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d10f      	bne.n	8006b0e <HAL_SPI_IRQHandler+0xee>
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	f003 0302 	and.w	r3, r3, #2
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00a      	beq.n	8006b0e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d105      	bne.n	8006b0e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	4798      	blx	r3
    handled = 1UL;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f040 8147 	bne.w	8006da4 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	f003 0308 	and.w	r3, r3, #8
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f000 808b 	beq.w	8006c38 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	699a      	ldr	r2, [r3, #24]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f042 0208 	orr.w	r2, r2, #8
 8006b30:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	699a      	ldr	r2, [r3, #24]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f042 0210 	orr.w	r2, r2, #16
 8006b40:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	699a      	ldr	r2, [r3, #24]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b50:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	691a      	ldr	r2, [r3, #16]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f022 0208 	bic.w	r2, r2, #8
 8006b60:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d13d      	bne.n	8006bec <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8006b70:	e036      	b.n	8006be0 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	2b0f      	cmp	r3, #15
 8006b78:	d90b      	bls.n	8006b92 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b82:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006b84:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b8a:	1d1a      	adds	r2, r3, #4
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	665a      	str	r2, [r3, #100]	@ 0x64
 8006b90:	e01d      	b.n	8006bce <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	2b07      	cmp	r3, #7
 8006b98:	d90b      	bls.n	8006bb2 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	8812      	ldrh	r2, [r2, #0]
 8006ba2:	b292      	uxth	r2, r2
 8006ba4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006baa:	1c9a      	adds	r2, r3, #2
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	665a      	str	r2, [r3, #100]	@ 0x64
 8006bb0:	e00d      	b.n	8006bce <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bbe:	7812      	ldrb	r2, [r2, #0]
 8006bc0:	b2d2      	uxtb	r2, r2
 8006bc2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bc8:	1c5a      	adds	r2, r3, #1
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1c2      	bne.n	8006b72 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 f931 	bl	8006e54 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d003      	beq.n	8006c0c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 f8f7 	bl	8006df8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006c0a:	e0d0      	b.n	8006dae <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8006c0c:	7cfb      	ldrb	r3, [r7, #19]
 8006c0e:	2b05      	cmp	r3, #5
 8006c10:	d103      	bne.n	8006c1a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f8e6 	bl	8006de4 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8006c18:	e0c6      	b.n	8006da8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8006c1a:	7cfb      	ldrb	r3, [r7, #19]
 8006c1c:	2b04      	cmp	r3, #4
 8006c1e:	d103      	bne.n	8006c28 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f8d5 	bl	8006dd0 <HAL_SPI_RxCpltCallback>
    return;
 8006c26:	e0bf      	b.n	8006da8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8006c28:	7cfb      	ldrb	r3, [r7, #19]
 8006c2a:	2b03      	cmp	r3, #3
 8006c2c:	f040 80bc 	bne.w	8006da8 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 f8c3 	bl	8006dbc <HAL_SPI_TxCpltCallback>
    return;
 8006c36:	e0b7      	b.n	8006da8 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	f000 80b5 	beq.w	8006dae <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00f      	beq.n	8006c6e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c54:	f043 0204 	orr.w	r2, r3, #4
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	699a      	ldr	r2, [r3, #24]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c6c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00f      	beq.n	8006c98 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c7e:	f043 0201 	orr.w	r2, r3, #1
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	699a      	ldr	r2, [r3, #24]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c96:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00f      	beq.n	8006cc2 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ca8:	f043 0208 	orr.w	r2, r3, #8
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	699a      	ldr	r2, [r3, #24]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006cc0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	f003 0320 	and.w	r3, r3, #32
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00f      	beq.n	8006cec <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cd2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	699a      	ldr	r2, [r3, #24]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f042 0220 	orr.w	r2, r2, #32
 8006cea:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d05a      	beq.n	8006dac <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f022 0201 	bic.w	r2, r2, #1
 8006d04:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	6919      	ldr	r1, [r3, #16]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	4b28      	ldr	r3, [pc, #160]	@ (8006db4 <HAL_SPI_IRQHandler+0x394>)
 8006d12:	400b      	ands	r3, r1
 8006d14:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006d1c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006d20:	d138      	bne.n	8006d94 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	689a      	ldr	r2, [r3, #8]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006d30:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d013      	beq.n	8006d62 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d3e:	4a1e      	ldr	r2, [pc, #120]	@ (8006db8 <HAL_SPI_IRQHandler+0x398>)
 8006d40:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7fb f986 	bl	8002058 <HAL_DMA_Abort_IT>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d007      	beq.n	8006d62 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d58:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d020      	beq.n	8006dac <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006d6e:	4a12      	ldr	r2, [pc, #72]	@ (8006db8 <HAL_SPI_IRQHandler+0x398>)
 8006d70:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7fb f96e 	bl	8002058 <HAL_DMA_Abort_IT>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d014      	beq.n	8006dac <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d88:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006d92:	e00b      	b.n	8006dac <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 f82b 	bl	8006df8 <HAL_SPI_ErrorCallback>
    return;
 8006da2:	e003      	b.n	8006dac <HAL_SPI_IRQHandler+0x38c>
    return;
 8006da4:	bf00      	nop
 8006da6:	e002      	b.n	8006dae <HAL_SPI_IRQHandler+0x38e>
    return;
 8006da8:	bf00      	nop
 8006daa:	e000      	b.n	8006dae <HAL_SPI_IRQHandler+0x38e>
    return;
 8006dac:	bf00      	nop
  }
}
 8006dae:	3728      	adds	r7, #40	@ 0x28
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	fffffc94 	.word	0xfffffc94
 8006db8:	08006e21 	.word	0x08006e21

08006dbc <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006dd8:	bf00      	nop
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8006e14:	bf00      	nop
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e2c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f7ff ffd6 	bl	8006df8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006e4c:	bf00      	nop
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	695b      	ldr	r3, [r3, #20]
 8006e62:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	699a      	ldr	r2, [r3, #24]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f042 0208 	orr.w	r2, r2, #8
 8006e72:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	699a      	ldr	r2, [r3, #24]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f042 0210 	orr.w	r2, r2, #16
 8006e82:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f022 0201 	bic.w	r2, r2, #1
 8006e92:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	6919      	ldr	r1, [r3, #16]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	4b3c      	ldr	r3, [pc, #240]	@ (8006f90 <SPI_CloseTransfer+0x13c>)
 8006ea0:	400b      	ands	r3, r1
 8006ea2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	689a      	ldr	r2, [r3, #8]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006eb2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	2b04      	cmp	r3, #4
 8006ebe:	d014      	beq.n	8006eea <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f003 0320 	and.w	r3, r3, #32
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00f      	beq.n	8006eea <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ed0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	699a      	ldr	r2, [r3, #24]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f042 0220 	orr.w	r2, r2, #32
 8006ee8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b03      	cmp	r3, #3
 8006ef4:	d014      	beq.n	8006f20 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d00f      	beq.n	8006f20 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f06:	f043 0204 	orr.w	r2, r3, #4
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	699a      	ldr	r2, [r3, #24]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f1e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00f      	beq.n	8006f4a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f30:	f043 0201 	orr.w	r2, r3, #1
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	699a      	ldr	r2, [r3, #24]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f48:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00f      	beq.n	8006f74 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f5a:	f043 0208 	orr.w	r2, r3, #8
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	699a      	ldr	r2, [r3, #24]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f72:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8006f84:	bf00      	nop
 8006f86:	3714      	adds	r7, #20
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr
 8006f90:	fffffc90 	.word	0xfffffc90

08006f94 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	603b      	str	r3, [r7, #0]
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006fa4:	e010      	b.n	8006fc8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fa6:	f7fa fe61 	bl	8001c6c <HAL_GetTick>
 8006faa:	4602      	mov	r2, r0
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	683a      	ldr	r2, [r7, #0]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d803      	bhi.n	8006fbe <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fbc:	d102      	bne.n	8006fc4 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d101      	bne.n	8006fc8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	e00f      	b.n	8006fe8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	695a      	ldr	r2, [r3, #20]
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	bf0c      	ite	eq
 8006fd8:	2301      	moveq	r3, #1
 8006fda:	2300      	movne	r3, #0
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	461a      	mov	r2, r3
 8006fe0:	79fb      	ldrb	r3, [r7, #7]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d0df      	beq.n	8006fa6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3710      	adds	r7, #16
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ffc:	095b      	lsrs	r3, r3, #5
 8006ffe:	3301      	adds	r3, #1
 8007000:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	3301      	adds	r3, #1
 8007008:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	3307      	adds	r3, #7
 800700e:	08db      	lsrs	r3, r3, #3
 8007010:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	fb02 f303 	mul.w	r3, r2, r3
}
 800701a:	4618      	mov	r0, r3
 800701c:	3714      	adds	r7, #20
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr

08007026 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b082      	sub	sp, #8
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d101      	bne.n	8007038 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e042      	b.n	80070be <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800703e:	2b00      	cmp	r3, #0
 8007040:	d106      	bne.n	8007050 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f83b 	bl	80070c6 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2224      	movs	r2, #36	@ 0x24
 8007054:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f022 0201 	bic.w	r2, r2, #1
 8007066:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800706c:	2b00      	cmp	r3, #0
 800706e:	d002      	beq.n	8007076 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 fe29 	bl	8007cc8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f8be 	bl	80071f8 <UART_SetConfig>
 800707c:	4603      	mov	r3, r0
 800707e:	2b01      	cmp	r3, #1
 8007080:	d101      	bne.n	8007086 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e01b      	b.n	80070be <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	685a      	ldr	r2, [r3, #4]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007094:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	689a      	ldr	r2, [r3, #8]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80070a4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f042 0201 	orr.w	r2, r2, #1
 80070b4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 fea8 	bl	8007e0c <UART_CheckIdleState>
 80070bc:	4603      	mov	r3, r0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3708      	adds	r7, #8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80070c6:	b480      	push	{r7}
 80070c8:	b083      	sub	sp, #12
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80070ce:	bf00      	nop
 80070d0:	370c      	adds	r7, #12
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b08a      	sub	sp, #40	@ 0x28
 80070de:	af02      	add	r7, sp, #8
 80070e0:	60f8      	str	r0, [r7, #12]
 80070e2:	60b9      	str	r1, [r7, #8]
 80070e4:	603b      	str	r3, [r7, #0]
 80070e6:	4613      	mov	r3, r2
 80070e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070f0:	2b20      	cmp	r3, #32
 80070f2:	d17b      	bne.n	80071ec <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d002      	beq.n	8007100 <HAL_UART_Transmit+0x26>
 80070fa:	88fb      	ldrh	r3, [r7, #6]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d101      	bne.n	8007104 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	e074      	b.n	80071ee <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2221      	movs	r2, #33	@ 0x21
 8007110:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007114:	f7fa fdaa 	bl	8001c6c <HAL_GetTick>
 8007118:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	88fa      	ldrh	r2, [r7, #6]
 800711e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	88fa      	ldrh	r2, [r7, #6]
 8007126:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007132:	d108      	bne.n	8007146 <HAL_UART_Transmit+0x6c>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d104      	bne.n	8007146 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800713c:	2300      	movs	r3, #0
 800713e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	61bb      	str	r3, [r7, #24]
 8007144:	e003      	b.n	800714e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800714a:	2300      	movs	r3, #0
 800714c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800714e:	e030      	b.n	80071b2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	9300      	str	r3, [sp, #0]
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	2200      	movs	r2, #0
 8007158:	2180      	movs	r1, #128	@ 0x80
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f000 ff00 	bl	8007f60 <UART_WaitOnFlagUntilTimeout>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d005      	beq.n	8007172 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2220      	movs	r2, #32
 800716a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800716e:	2303      	movs	r3, #3
 8007170:	e03d      	b.n	80071ee <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d10b      	bne.n	8007190 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	881b      	ldrh	r3, [r3, #0]
 800717c:	461a      	mov	r2, r3
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007186:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	3302      	adds	r3, #2
 800718c:	61bb      	str	r3, [r7, #24]
 800718e:	e007      	b.n	80071a0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	781a      	ldrb	r2, [r3, #0]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	3301      	adds	r3, #1
 800719e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	3b01      	subs	r3, #1
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1c8      	bne.n	8007150 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	9300      	str	r3, [sp, #0]
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	2200      	movs	r2, #0
 80071c6:	2140      	movs	r1, #64	@ 0x40
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	f000 fec9 	bl	8007f60 <UART_WaitOnFlagUntilTimeout>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d005      	beq.n	80071e0 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2220      	movs	r2, #32
 80071d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80071dc:	2303      	movs	r3, #3
 80071de:	e006      	b.n	80071ee <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2220      	movs	r2, #32
 80071e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80071e8:	2300      	movs	r3, #0
 80071ea:	e000      	b.n	80071ee <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80071ec:	2302      	movs	r3, #2
  }
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3720      	adds	r7, #32
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
	...

080071f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071fc:	b092      	sub	sp, #72	@ 0x48
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007202:	2300      	movs	r3, #0
 8007204:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	689a      	ldr	r2, [r3, #8]
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	431a      	orrs	r2, r3
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	695b      	ldr	r3, [r3, #20]
 8007216:	431a      	orrs	r2, r3
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	69db      	ldr	r3, [r3, #28]
 800721c:	4313      	orrs	r3, r2
 800721e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	4bbe      	ldr	r3, [pc, #760]	@ (8007520 <UART_SetConfig+0x328>)
 8007228:	4013      	ands	r3, r2
 800722a:	697a      	ldr	r2, [r7, #20]
 800722c:	6812      	ldr	r2, [r2, #0]
 800722e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007230:	430b      	orrs	r3, r1
 8007232:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	68da      	ldr	r2, [r3, #12]
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	430a      	orrs	r2, r1
 8007248:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	699b      	ldr	r3, [r3, #24]
 800724e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4ab3      	ldr	r2, [pc, #716]	@ (8007524 <UART_SetConfig+0x32c>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d004      	beq.n	8007264 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007260:	4313      	orrs	r3, r2
 8007262:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	689a      	ldr	r2, [r3, #8]
 800726a:	4baf      	ldr	r3, [pc, #700]	@ (8007528 <UART_SetConfig+0x330>)
 800726c:	4013      	ands	r3, r2
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	6812      	ldr	r2, [r2, #0]
 8007272:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007274:	430b      	orrs	r3, r1
 8007276:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800727e:	f023 010f 	bic.w	r1, r3, #15
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	430a      	orrs	r2, r1
 800728c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4aa6      	ldr	r2, [pc, #664]	@ (800752c <UART_SetConfig+0x334>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d177      	bne.n	8007388 <UART_SetConfig+0x190>
 8007298:	4ba5      	ldr	r3, [pc, #660]	@ (8007530 <UART_SetConfig+0x338>)
 800729a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800729c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80072a0:	2b28      	cmp	r3, #40	@ 0x28
 80072a2:	d86d      	bhi.n	8007380 <UART_SetConfig+0x188>
 80072a4:	a201      	add	r2, pc, #4	@ (adr r2, 80072ac <UART_SetConfig+0xb4>)
 80072a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072aa:	bf00      	nop
 80072ac:	08007351 	.word	0x08007351
 80072b0:	08007381 	.word	0x08007381
 80072b4:	08007381 	.word	0x08007381
 80072b8:	08007381 	.word	0x08007381
 80072bc:	08007381 	.word	0x08007381
 80072c0:	08007381 	.word	0x08007381
 80072c4:	08007381 	.word	0x08007381
 80072c8:	08007381 	.word	0x08007381
 80072cc:	08007359 	.word	0x08007359
 80072d0:	08007381 	.word	0x08007381
 80072d4:	08007381 	.word	0x08007381
 80072d8:	08007381 	.word	0x08007381
 80072dc:	08007381 	.word	0x08007381
 80072e0:	08007381 	.word	0x08007381
 80072e4:	08007381 	.word	0x08007381
 80072e8:	08007381 	.word	0x08007381
 80072ec:	08007361 	.word	0x08007361
 80072f0:	08007381 	.word	0x08007381
 80072f4:	08007381 	.word	0x08007381
 80072f8:	08007381 	.word	0x08007381
 80072fc:	08007381 	.word	0x08007381
 8007300:	08007381 	.word	0x08007381
 8007304:	08007381 	.word	0x08007381
 8007308:	08007381 	.word	0x08007381
 800730c:	08007369 	.word	0x08007369
 8007310:	08007381 	.word	0x08007381
 8007314:	08007381 	.word	0x08007381
 8007318:	08007381 	.word	0x08007381
 800731c:	08007381 	.word	0x08007381
 8007320:	08007381 	.word	0x08007381
 8007324:	08007381 	.word	0x08007381
 8007328:	08007381 	.word	0x08007381
 800732c:	08007371 	.word	0x08007371
 8007330:	08007381 	.word	0x08007381
 8007334:	08007381 	.word	0x08007381
 8007338:	08007381 	.word	0x08007381
 800733c:	08007381 	.word	0x08007381
 8007340:	08007381 	.word	0x08007381
 8007344:	08007381 	.word	0x08007381
 8007348:	08007381 	.word	0x08007381
 800734c:	08007379 	.word	0x08007379
 8007350:	2301      	movs	r3, #1
 8007352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007356:	e222      	b.n	800779e <UART_SetConfig+0x5a6>
 8007358:	2304      	movs	r3, #4
 800735a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800735e:	e21e      	b.n	800779e <UART_SetConfig+0x5a6>
 8007360:	2308      	movs	r3, #8
 8007362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007366:	e21a      	b.n	800779e <UART_SetConfig+0x5a6>
 8007368:	2310      	movs	r3, #16
 800736a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800736e:	e216      	b.n	800779e <UART_SetConfig+0x5a6>
 8007370:	2320      	movs	r3, #32
 8007372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007376:	e212      	b.n	800779e <UART_SetConfig+0x5a6>
 8007378:	2340      	movs	r3, #64	@ 0x40
 800737a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800737e:	e20e      	b.n	800779e <UART_SetConfig+0x5a6>
 8007380:	2380      	movs	r3, #128	@ 0x80
 8007382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007386:	e20a      	b.n	800779e <UART_SetConfig+0x5a6>
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a69      	ldr	r2, [pc, #420]	@ (8007534 <UART_SetConfig+0x33c>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d130      	bne.n	80073f4 <UART_SetConfig+0x1fc>
 8007392:	4b67      	ldr	r3, [pc, #412]	@ (8007530 <UART_SetConfig+0x338>)
 8007394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007396:	f003 0307 	and.w	r3, r3, #7
 800739a:	2b05      	cmp	r3, #5
 800739c:	d826      	bhi.n	80073ec <UART_SetConfig+0x1f4>
 800739e:	a201      	add	r2, pc, #4	@ (adr r2, 80073a4 <UART_SetConfig+0x1ac>)
 80073a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a4:	080073bd 	.word	0x080073bd
 80073a8:	080073c5 	.word	0x080073c5
 80073ac:	080073cd 	.word	0x080073cd
 80073b0:	080073d5 	.word	0x080073d5
 80073b4:	080073dd 	.word	0x080073dd
 80073b8:	080073e5 	.word	0x080073e5
 80073bc:	2300      	movs	r3, #0
 80073be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073c2:	e1ec      	b.n	800779e <UART_SetConfig+0x5a6>
 80073c4:	2304      	movs	r3, #4
 80073c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ca:	e1e8      	b.n	800779e <UART_SetConfig+0x5a6>
 80073cc:	2308      	movs	r3, #8
 80073ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073d2:	e1e4      	b.n	800779e <UART_SetConfig+0x5a6>
 80073d4:	2310      	movs	r3, #16
 80073d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073da:	e1e0      	b.n	800779e <UART_SetConfig+0x5a6>
 80073dc:	2320      	movs	r3, #32
 80073de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073e2:	e1dc      	b.n	800779e <UART_SetConfig+0x5a6>
 80073e4:	2340      	movs	r3, #64	@ 0x40
 80073e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ea:	e1d8      	b.n	800779e <UART_SetConfig+0x5a6>
 80073ec:	2380      	movs	r3, #128	@ 0x80
 80073ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073f2:	e1d4      	b.n	800779e <UART_SetConfig+0x5a6>
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a4f      	ldr	r2, [pc, #316]	@ (8007538 <UART_SetConfig+0x340>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d130      	bne.n	8007460 <UART_SetConfig+0x268>
 80073fe:	4b4c      	ldr	r3, [pc, #304]	@ (8007530 <UART_SetConfig+0x338>)
 8007400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007402:	f003 0307 	and.w	r3, r3, #7
 8007406:	2b05      	cmp	r3, #5
 8007408:	d826      	bhi.n	8007458 <UART_SetConfig+0x260>
 800740a:	a201      	add	r2, pc, #4	@ (adr r2, 8007410 <UART_SetConfig+0x218>)
 800740c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007410:	08007429 	.word	0x08007429
 8007414:	08007431 	.word	0x08007431
 8007418:	08007439 	.word	0x08007439
 800741c:	08007441 	.word	0x08007441
 8007420:	08007449 	.word	0x08007449
 8007424:	08007451 	.word	0x08007451
 8007428:	2300      	movs	r3, #0
 800742a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800742e:	e1b6      	b.n	800779e <UART_SetConfig+0x5a6>
 8007430:	2304      	movs	r3, #4
 8007432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007436:	e1b2      	b.n	800779e <UART_SetConfig+0x5a6>
 8007438:	2308      	movs	r3, #8
 800743a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800743e:	e1ae      	b.n	800779e <UART_SetConfig+0x5a6>
 8007440:	2310      	movs	r3, #16
 8007442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007446:	e1aa      	b.n	800779e <UART_SetConfig+0x5a6>
 8007448:	2320      	movs	r3, #32
 800744a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800744e:	e1a6      	b.n	800779e <UART_SetConfig+0x5a6>
 8007450:	2340      	movs	r3, #64	@ 0x40
 8007452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007456:	e1a2      	b.n	800779e <UART_SetConfig+0x5a6>
 8007458:	2380      	movs	r3, #128	@ 0x80
 800745a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800745e:	e19e      	b.n	800779e <UART_SetConfig+0x5a6>
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a35      	ldr	r2, [pc, #212]	@ (800753c <UART_SetConfig+0x344>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d130      	bne.n	80074cc <UART_SetConfig+0x2d4>
 800746a:	4b31      	ldr	r3, [pc, #196]	@ (8007530 <UART_SetConfig+0x338>)
 800746c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800746e:	f003 0307 	and.w	r3, r3, #7
 8007472:	2b05      	cmp	r3, #5
 8007474:	d826      	bhi.n	80074c4 <UART_SetConfig+0x2cc>
 8007476:	a201      	add	r2, pc, #4	@ (adr r2, 800747c <UART_SetConfig+0x284>)
 8007478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747c:	08007495 	.word	0x08007495
 8007480:	0800749d 	.word	0x0800749d
 8007484:	080074a5 	.word	0x080074a5
 8007488:	080074ad 	.word	0x080074ad
 800748c:	080074b5 	.word	0x080074b5
 8007490:	080074bd 	.word	0x080074bd
 8007494:	2300      	movs	r3, #0
 8007496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800749a:	e180      	b.n	800779e <UART_SetConfig+0x5a6>
 800749c:	2304      	movs	r3, #4
 800749e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074a2:	e17c      	b.n	800779e <UART_SetConfig+0x5a6>
 80074a4:	2308      	movs	r3, #8
 80074a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074aa:	e178      	b.n	800779e <UART_SetConfig+0x5a6>
 80074ac:	2310      	movs	r3, #16
 80074ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074b2:	e174      	b.n	800779e <UART_SetConfig+0x5a6>
 80074b4:	2320      	movs	r3, #32
 80074b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ba:	e170      	b.n	800779e <UART_SetConfig+0x5a6>
 80074bc:	2340      	movs	r3, #64	@ 0x40
 80074be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074c2:	e16c      	b.n	800779e <UART_SetConfig+0x5a6>
 80074c4:	2380      	movs	r3, #128	@ 0x80
 80074c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ca:	e168      	b.n	800779e <UART_SetConfig+0x5a6>
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a1b      	ldr	r2, [pc, #108]	@ (8007540 <UART_SetConfig+0x348>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d142      	bne.n	800755c <UART_SetConfig+0x364>
 80074d6:	4b16      	ldr	r3, [pc, #88]	@ (8007530 <UART_SetConfig+0x338>)
 80074d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074da:	f003 0307 	and.w	r3, r3, #7
 80074de:	2b05      	cmp	r3, #5
 80074e0:	d838      	bhi.n	8007554 <UART_SetConfig+0x35c>
 80074e2:	a201      	add	r2, pc, #4	@ (adr r2, 80074e8 <UART_SetConfig+0x2f0>)
 80074e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e8:	08007501 	.word	0x08007501
 80074ec:	08007509 	.word	0x08007509
 80074f0:	08007511 	.word	0x08007511
 80074f4:	08007519 	.word	0x08007519
 80074f8:	08007545 	.word	0x08007545
 80074fc:	0800754d 	.word	0x0800754d
 8007500:	2300      	movs	r3, #0
 8007502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007506:	e14a      	b.n	800779e <UART_SetConfig+0x5a6>
 8007508:	2304      	movs	r3, #4
 800750a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800750e:	e146      	b.n	800779e <UART_SetConfig+0x5a6>
 8007510:	2308      	movs	r3, #8
 8007512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007516:	e142      	b.n	800779e <UART_SetConfig+0x5a6>
 8007518:	2310      	movs	r3, #16
 800751a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800751e:	e13e      	b.n	800779e <UART_SetConfig+0x5a6>
 8007520:	cfff69f3 	.word	0xcfff69f3
 8007524:	58000c00 	.word	0x58000c00
 8007528:	11fff4ff 	.word	0x11fff4ff
 800752c:	40011000 	.word	0x40011000
 8007530:	58024400 	.word	0x58024400
 8007534:	40004400 	.word	0x40004400
 8007538:	40004800 	.word	0x40004800
 800753c:	40004c00 	.word	0x40004c00
 8007540:	40005000 	.word	0x40005000
 8007544:	2320      	movs	r3, #32
 8007546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800754a:	e128      	b.n	800779e <UART_SetConfig+0x5a6>
 800754c:	2340      	movs	r3, #64	@ 0x40
 800754e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007552:	e124      	b.n	800779e <UART_SetConfig+0x5a6>
 8007554:	2380      	movs	r3, #128	@ 0x80
 8007556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800755a:	e120      	b.n	800779e <UART_SetConfig+0x5a6>
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4acb      	ldr	r2, [pc, #812]	@ (8007890 <UART_SetConfig+0x698>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d176      	bne.n	8007654 <UART_SetConfig+0x45c>
 8007566:	4bcb      	ldr	r3, [pc, #812]	@ (8007894 <UART_SetConfig+0x69c>)
 8007568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800756a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800756e:	2b28      	cmp	r3, #40	@ 0x28
 8007570:	d86c      	bhi.n	800764c <UART_SetConfig+0x454>
 8007572:	a201      	add	r2, pc, #4	@ (adr r2, 8007578 <UART_SetConfig+0x380>)
 8007574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007578:	0800761d 	.word	0x0800761d
 800757c:	0800764d 	.word	0x0800764d
 8007580:	0800764d 	.word	0x0800764d
 8007584:	0800764d 	.word	0x0800764d
 8007588:	0800764d 	.word	0x0800764d
 800758c:	0800764d 	.word	0x0800764d
 8007590:	0800764d 	.word	0x0800764d
 8007594:	0800764d 	.word	0x0800764d
 8007598:	08007625 	.word	0x08007625
 800759c:	0800764d 	.word	0x0800764d
 80075a0:	0800764d 	.word	0x0800764d
 80075a4:	0800764d 	.word	0x0800764d
 80075a8:	0800764d 	.word	0x0800764d
 80075ac:	0800764d 	.word	0x0800764d
 80075b0:	0800764d 	.word	0x0800764d
 80075b4:	0800764d 	.word	0x0800764d
 80075b8:	0800762d 	.word	0x0800762d
 80075bc:	0800764d 	.word	0x0800764d
 80075c0:	0800764d 	.word	0x0800764d
 80075c4:	0800764d 	.word	0x0800764d
 80075c8:	0800764d 	.word	0x0800764d
 80075cc:	0800764d 	.word	0x0800764d
 80075d0:	0800764d 	.word	0x0800764d
 80075d4:	0800764d 	.word	0x0800764d
 80075d8:	08007635 	.word	0x08007635
 80075dc:	0800764d 	.word	0x0800764d
 80075e0:	0800764d 	.word	0x0800764d
 80075e4:	0800764d 	.word	0x0800764d
 80075e8:	0800764d 	.word	0x0800764d
 80075ec:	0800764d 	.word	0x0800764d
 80075f0:	0800764d 	.word	0x0800764d
 80075f4:	0800764d 	.word	0x0800764d
 80075f8:	0800763d 	.word	0x0800763d
 80075fc:	0800764d 	.word	0x0800764d
 8007600:	0800764d 	.word	0x0800764d
 8007604:	0800764d 	.word	0x0800764d
 8007608:	0800764d 	.word	0x0800764d
 800760c:	0800764d 	.word	0x0800764d
 8007610:	0800764d 	.word	0x0800764d
 8007614:	0800764d 	.word	0x0800764d
 8007618:	08007645 	.word	0x08007645
 800761c:	2301      	movs	r3, #1
 800761e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007622:	e0bc      	b.n	800779e <UART_SetConfig+0x5a6>
 8007624:	2304      	movs	r3, #4
 8007626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800762a:	e0b8      	b.n	800779e <UART_SetConfig+0x5a6>
 800762c:	2308      	movs	r3, #8
 800762e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007632:	e0b4      	b.n	800779e <UART_SetConfig+0x5a6>
 8007634:	2310      	movs	r3, #16
 8007636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800763a:	e0b0      	b.n	800779e <UART_SetConfig+0x5a6>
 800763c:	2320      	movs	r3, #32
 800763e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007642:	e0ac      	b.n	800779e <UART_SetConfig+0x5a6>
 8007644:	2340      	movs	r3, #64	@ 0x40
 8007646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800764a:	e0a8      	b.n	800779e <UART_SetConfig+0x5a6>
 800764c:	2380      	movs	r3, #128	@ 0x80
 800764e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007652:	e0a4      	b.n	800779e <UART_SetConfig+0x5a6>
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a8f      	ldr	r2, [pc, #572]	@ (8007898 <UART_SetConfig+0x6a0>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d130      	bne.n	80076c0 <UART_SetConfig+0x4c8>
 800765e:	4b8d      	ldr	r3, [pc, #564]	@ (8007894 <UART_SetConfig+0x69c>)
 8007660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007662:	f003 0307 	and.w	r3, r3, #7
 8007666:	2b05      	cmp	r3, #5
 8007668:	d826      	bhi.n	80076b8 <UART_SetConfig+0x4c0>
 800766a:	a201      	add	r2, pc, #4	@ (adr r2, 8007670 <UART_SetConfig+0x478>)
 800766c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007670:	08007689 	.word	0x08007689
 8007674:	08007691 	.word	0x08007691
 8007678:	08007699 	.word	0x08007699
 800767c:	080076a1 	.word	0x080076a1
 8007680:	080076a9 	.word	0x080076a9
 8007684:	080076b1 	.word	0x080076b1
 8007688:	2300      	movs	r3, #0
 800768a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800768e:	e086      	b.n	800779e <UART_SetConfig+0x5a6>
 8007690:	2304      	movs	r3, #4
 8007692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007696:	e082      	b.n	800779e <UART_SetConfig+0x5a6>
 8007698:	2308      	movs	r3, #8
 800769a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800769e:	e07e      	b.n	800779e <UART_SetConfig+0x5a6>
 80076a0:	2310      	movs	r3, #16
 80076a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076a6:	e07a      	b.n	800779e <UART_SetConfig+0x5a6>
 80076a8:	2320      	movs	r3, #32
 80076aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ae:	e076      	b.n	800779e <UART_SetConfig+0x5a6>
 80076b0:	2340      	movs	r3, #64	@ 0x40
 80076b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076b6:	e072      	b.n	800779e <UART_SetConfig+0x5a6>
 80076b8:	2380      	movs	r3, #128	@ 0x80
 80076ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076be:	e06e      	b.n	800779e <UART_SetConfig+0x5a6>
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a75      	ldr	r2, [pc, #468]	@ (800789c <UART_SetConfig+0x6a4>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d130      	bne.n	800772c <UART_SetConfig+0x534>
 80076ca:	4b72      	ldr	r3, [pc, #456]	@ (8007894 <UART_SetConfig+0x69c>)
 80076cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076ce:	f003 0307 	and.w	r3, r3, #7
 80076d2:	2b05      	cmp	r3, #5
 80076d4:	d826      	bhi.n	8007724 <UART_SetConfig+0x52c>
 80076d6:	a201      	add	r2, pc, #4	@ (adr r2, 80076dc <UART_SetConfig+0x4e4>)
 80076d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076dc:	080076f5 	.word	0x080076f5
 80076e0:	080076fd 	.word	0x080076fd
 80076e4:	08007705 	.word	0x08007705
 80076e8:	0800770d 	.word	0x0800770d
 80076ec:	08007715 	.word	0x08007715
 80076f0:	0800771d 	.word	0x0800771d
 80076f4:	2300      	movs	r3, #0
 80076f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076fa:	e050      	b.n	800779e <UART_SetConfig+0x5a6>
 80076fc:	2304      	movs	r3, #4
 80076fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007702:	e04c      	b.n	800779e <UART_SetConfig+0x5a6>
 8007704:	2308      	movs	r3, #8
 8007706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800770a:	e048      	b.n	800779e <UART_SetConfig+0x5a6>
 800770c:	2310      	movs	r3, #16
 800770e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007712:	e044      	b.n	800779e <UART_SetConfig+0x5a6>
 8007714:	2320      	movs	r3, #32
 8007716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800771a:	e040      	b.n	800779e <UART_SetConfig+0x5a6>
 800771c:	2340      	movs	r3, #64	@ 0x40
 800771e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007722:	e03c      	b.n	800779e <UART_SetConfig+0x5a6>
 8007724:	2380      	movs	r3, #128	@ 0x80
 8007726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800772a:	e038      	b.n	800779e <UART_SetConfig+0x5a6>
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a5b      	ldr	r2, [pc, #364]	@ (80078a0 <UART_SetConfig+0x6a8>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d130      	bne.n	8007798 <UART_SetConfig+0x5a0>
 8007736:	4b57      	ldr	r3, [pc, #348]	@ (8007894 <UART_SetConfig+0x69c>)
 8007738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800773a:	f003 0307 	and.w	r3, r3, #7
 800773e:	2b05      	cmp	r3, #5
 8007740:	d826      	bhi.n	8007790 <UART_SetConfig+0x598>
 8007742:	a201      	add	r2, pc, #4	@ (adr r2, 8007748 <UART_SetConfig+0x550>)
 8007744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007748:	08007761 	.word	0x08007761
 800774c:	08007769 	.word	0x08007769
 8007750:	08007771 	.word	0x08007771
 8007754:	08007779 	.word	0x08007779
 8007758:	08007781 	.word	0x08007781
 800775c:	08007789 	.word	0x08007789
 8007760:	2302      	movs	r3, #2
 8007762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007766:	e01a      	b.n	800779e <UART_SetConfig+0x5a6>
 8007768:	2304      	movs	r3, #4
 800776a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800776e:	e016      	b.n	800779e <UART_SetConfig+0x5a6>
 8007770:	2308      	movs	r3, #8
 8007772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007776:	e012      	b.n	800779e <UART_SetConfig+0x5a6>
 8007778:	2310      	movs	r3, #16
 800777a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800777e:	e00e      	b.n	800779e <UART_SetConfig+0x5a6>
 8007780:	2320      	movs	r3, #32
 8007782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007786:	e00a      	b.n	800779e <UART_SetConfig+0x5a6>
 8007788:	2340      	movs	r3, #64	@ 0x40
 800778a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800778e:	e006      	b.n	800779e <UART_SetConfig+0x5a6>
 8007790:	2380      	movs	r3, #128	@ 0x80
 8007792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007796:	e002      	b.n	800779e <UART_SetConfig+0x5a6>
 8007798:	2380      	movs	r3, #128	@ 0x80
 800779a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a3f      	ldr	r2, [pc, #252]	@ (80078a0 <UART_SetConfig+0x6a8>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	f040 80f8 	bne.w	800799a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80077aa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80077ae:	2b20      	cmp	r3, #32
 80077b0:	dc46      	bgt.n	8007840 <UART_SetConfig+0x648>
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	f2c0 8082 	blt.w	80078bc <UART_SetConfig+0x6c4>
 80077b8:	3b02      	subs	r3, #2
 80077ba:	2b1e      	cmp	r3, #30
 80077bc:	d87e      	bhi.n	80078bc <UART_SetConfig+0x6c4>
 80077be:	a201      	add	r2, pc, #4	@ (adr r2, 80077c4 <UART_SetConfig+0x5cc>)
 80077c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c4:	08007847 	.word	0x08007847
 80077c8:	080078bd 	.word	0x080078bd
 80077cc:	0800784f 	.word	0x0800784f
 80077d0:	080078bd 	.word	0x080078bd
 80077d4:	080078bd 	.word	0x080078bd
 80077d8:	080078bd 	.word	0x080078bd
 80077dc:	0800785f 	.word	0x0800785f
 80077e0:	080078bd 	.word	0x080078bd
 80077e4:	080078bd 	.word	0x080078bd
 80077e8:	080078bd 	.word	0x080078bd
 80077ec:	080078bd 	.word	0x080078bd
 80077f0:	080078bd 	.word	0x080078bd
 80077f4:	080078bd 	.word	0x080078bd
 80077f8:	080078bd 	.word	0x080078bd
 80077fc:	0800786f 	.word	0x0800786f
 8007800:	080078bd 	.word	0x080078bd
 8007804:	080078bd 	.word	0x080078bd
 8007808:	080078bd 	.word	0x080078bd
 800780c:	080078bd 	.word	0x080078bd
 8007810:	080078bd 	.word	0x080078bd
 8007814:	080078bd 	.word	0x080078bd
 8007818:	080078bd 	.word	0x080078bd
 800781c:	080078bd 	.word	0x080078bd
 8007820:	080078bd 	.word	0x080078bd
 8007824:	080078bd 	.word	0x080078bd
 8007828:	080078bd 	.word	0x080078bd
 800782c:	080078bd 	.word	0x080078bd
 8007830:	080078bd 	.word	0x080078bd
 8007834:	080078bd 	.word	0x080078bd
 8007838:	080078bd 	.word	0x080078bd
 800783c:	080078af 	.word	0x080078af
 8007840:	2b40      	cmp	r3, #64	@ 0x40
 8007842:	d037      	beq.n	80078b4 <UART_SetConfig+0x6bc>
 8007844:	e03a      	b.n	80078bc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007846:	f7fd fbe1 	bl	800500c <HAL_RCCEx_GetD3PCLK1Freq>
 800784a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800784c:	e03c      	b.n	80078c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800784e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007852:	4618      	mov	r0, r3
 8007854:	f7fd fbf0 	bl	8005038 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800785a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800785c:	e034      	b.n	80078c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800785e:	f107 0318 	add.w	r3, r7, #24
 8007862:	4618      	mov	r0, r3
 8007864:	f7fd fd3c 	bl	80052e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800786c:	e02c      	b.n	80078c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800786e:	4b09      	ldr	r3, [pc, #36]	@ (8007894 <UART_SetConfig+0x69c>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 0320 	and.w	r3, r3, #32
 8007876:	2b00      	cmp	r3, #0
 8007878:	d016      	beq.n	80078a8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800787a:	4b06      	ldr	r3, [pc, #24]	@ (8007894 <UART_SetConfig+0x69c>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	08db      	lsrs	r3, r3, #3
 8007880:	f003 0303 	and.w	r3, r3, #3
 8007884:	4a07      	ldr	r2, [pc, #28]	@ (80078a4 <UART_SetConfig+0x6ac>)
 8007886:	fa22 f303 	lsr.w	r3, r2, r3
 800788a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800788c:	e01c      	b.n	80078c8 <UART_SetConfig+0x6d0>
 800788e:	bf00      	nop
 8007890:	40011400 	.word	0x40011400
 8007894:	58024400 	.word	0x58024400
 8007898:	40007800 	.word	0x40007800
 800789c:	40007c00 	.word	0x40007c00
 80078a0:	58000c00 	.word	0x58000c00
 80078a4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80078a8:	4b9d      	ldr	r3, [pc, #628]	@ (8007b20 <UART_SetConfig+0x928>)
 80078aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078ac:	e00c      	b.n	80078c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80078ae:	4b9d      	ldr	r3, [pc, #628]	@ (8007b24 <UART_SetConfig+0x92c>)
 80078b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078b2:	e009      	b.n	80078c8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078ba:	e005      	b.n	80078c8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80078bc:	2300      	movs	r3, #0
 80078be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80078c6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80078c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	f000 81de 	beq.w	8007c8c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078d4:	4a94      	ldr	r2, [pc, #592]	@ (8007b28 <UART_SetConfig+0x930>)
 80078d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078da:	461a      	mov	r2, r3
 80078dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078de:	fbb3 f3f2 	udiv	r3, r3, r2
 80078e2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	685a      	ldr	r2, [r3, #4]
 80078e8:	4613      	mov	r3, r2
 80078ea:	005b      	lsls	r3, r3, #1
 80078ec:	4413      	add	r3, r2
 80078ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d305      	bcc.n	8007900 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d903      	bls.n	8007908 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007906:	e1c1      	b.n	8007c8c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007908:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800790a:	2200      	movs	r2, #0
 800790c:	60bb      	str	r3, [r7, #8]
 800790e:	60fa      	str	r2, [r7, #12]
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007914:	4a84      	ldr	r2, [pc, #528]	@ (8007b28 <UART_SetConfig+0x930>)
 8007916:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800791a:	b29b      	uxth	r3, r3
 800791c:	2200      	movs	r2, #0
 800791e:	603b      	str	r3, [r7, #0]
 8007920:	607a      	str	r2, [r7, #4]
 8007922:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007926:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800792a:	f7f8 fd29 	bl	8000380 <__aeabi_uldivmod>
 800792e:	4602      	mov	r2, r0
 8007930:	460b      	mov	r3, r1
 8007932:	4610      	mov	r0, r2
 8007934:	4619      	mov	r1, r3
 8007936:	f04f 0200 	mov.w	r2, #0
 800793a:	f04f 0300 	mov.w	r3, #0
 800793e:	020b      	lsls	r3, r1, #8
 8007940:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007944:	0202      	lsls	r2, r0, #8
 8007946:	6979      	ldr	r1, [r7, #20]
 8007948:	6849      	ldr	r1, [r1, #4]
 800794a:	0849      	lsrs	r1, r1, #1
 800794c:	2000      	movs	r0, #0
 800794e:	460c      	mov	r4, r1
 8007950:	4605      	mov	r5, r0
 8007952:	eb12 0804 	adds.w	r8, r2, r4
 8007956:	eb43 0905 	adc.w	r9, r3, r5
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	469a      	mov	sl, r3
 8007962:	4693      	mov	fp, r2
 8007964:	4652      	mov	r2, sl
 8007966:	465b      	mov	r3, fp
 8007968:	4640      	mov	r0, r8
 800796a:	4649      	mov	r1, r9
 800796c:	f7f8 fd08 	bl	8000380 <__aeabi_uldivmod>
 8007970:	4602      	mov	r2, r0
 8007972:	460b      	mov	r3, r1
 8007974:	4613      	mov	r3, r2
 8007976:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800797a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800797e:	d308      	bcc.n	8007992 <UART_SetConfig+0x79a>
 8007980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007982:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007986:	d204      	bcs.n	8007992 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800798e:	60da      	str	r2, [r3, #12]
 8007990:	e17c      	b.n	8007c8c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007998:	e178      	b.n	8007c8c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	69db      	ldr	r3, [r3, #28]
 800799e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079a2:	f040 80c5 	bne.w	8007b30 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80079a6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80079aa:	2b20      	cmp	r3, #32
 80079ac:	dc48      	bgt.n	8007a40 <UART_SetConfig+0x848>
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	db7b      	blt.n	8007aaa <UART_SetConfig+0x8b2>
 80079b2:	2b20      	cmp	r3, #32
 80079b4:	d879      	bhi.n	8007aaa <UART_SetConfig+0x8b2>
 80079b6:	a201      	add	r2, pc, #4	@ (adr r2, 80079bc <UART_SetConfig+0x7c4>)
 80079b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079bc:	08007a47 	.word	0x08007a47
 80079c0:	08007a4f 	.word	0x08007a4f
 80079c4:	08007aab 	.word	0x08007aab
 80079c8:	08007aab 	.word	0x08007aab
 80079cc:	08007a57 	.word	0x08007a57
 80079d0:	08007aab 	.word	0x08007aab
 80079d4:	08007aab 	.word	0x08007aab
 80079d8:	08007aab 	.word	0x08007aab
 80079dc:	08007a67 	.word	0x08007a67
 80079e0:	08007aab 	.word	0x08007aab
 80079e4:	08007aab 	.word	0x08007aab
 80079e8:	08007aab 	.word	0x08007aab
 80079ec:	08007aab 	.word	0x08007aab
 80079f0:	08007aab 	.word	0x08007aab
 80079f4:	08007aab 	.word	0x08007aab
 80079f8:	08007aab 	.word	0x08007aab
 80079fc:	08007a77 	.word	0x08007a77
 8007a00:	08007aab 	.word	0x08007aab
 8007a04:	08007aab 	.word	0x08007aab
 8007a08:	08007aab 	.word	0x08007aab
 8007a0c:	08007aab 	.word	0x08007aab
 8007a10:	08007aab 	.word	0x08007aab
 8007a14:	08007aab 	.word	0x08007aab
 8007a18:	08007aab 	.word	0x08007aab
 8007a1c:	08007aab 	.word	0x08007aab
 8007a20:	08007aab 	.word	0x08007aab
 8007a24:	08007aab 	.word	0x08007aab
 8007a28:	08007aab 	.word	0x08007aab
 8007a2c:	08007aab 	.word	0x08007aab
 8007a30:	08007aab 	.word	0x08007aab
 8007a34:	08007aab 	.word	0x08007aab
 8007a38:	08007aab 	.word	0x08007aab
 8007a3c:	08007a9d 	.word	0x08007a9d
 8007a40:	2b40      	cmp	r3, #64	@ 0x40
 8007a42:	d02e      	beq.n	8007aa2 <UART_SetConfig+0x8aa>
 8007a44:	e031      	b.n	8007aaa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a46:	f7fc f8ab 	bl	8003ba0 <HAL_RCC_GetPCLK1Freq>
 8007a4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a4c:	e033      	b.n	8007ab6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a4e:	f7fc f8bd 	bl	8003bcc <HAL_RCC_GetPCLK2Freq>
 8007a52:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a54:	e02f      	b.n	8007ab6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7fd faec 	bl	8005038 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a64:	e027      	b.n	8007ab6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a66:	f107 0318 	add.w	r3, r7, #24
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7fd fc38 	bl	80052e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a74:	e01f      	b.n	8007ab6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a76:	4b2d      	ldr	r3, [pc, #180]	@ (8007b2c <UART_SetConfig+0x934>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f003 0320 	and.w	r3, r3, #32
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d009      	beq.n	8007a96 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a82:	4b2a      	ldr	r3, [pc, #168]	@ (8007b2c <UART_SetConfig+0x934>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	08db      	lsrs	r3, r3, #3
 8007a88:	f003 0303 	and.w	r3, r3, #3
 8007a8c:	4a24      	ldr	r2, [pc, #144]	@ (8007b20 <UART_SetConfig+0x928>)
 8007a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a94:	e00f      	b.n	8007ab6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007a96:	4b22      	ldr	r3, [pc, #136]	@ (8007b20 <UART_SetConfig+0x928>)
 8007a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a9a:	e00c      	b.n	8007ab6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a9c:	4b21      	ldr	r3, [pc, #132]	@ (8007b24 <UART_SetConfig+0x92c>)
 8007a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007aa0:	e009      	b.n	8007ab6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007aa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007aa8:	e005      	b.n	8007ab6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007ab4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f000 80e7 	beq.w	8007c8c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ac2:	4a19      	ldr	r2, [pc, #100]	@ (8007b28 <UART_SetConfig+0x930>)
 8007ac4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ac8:	461a      	mov	r2, r3
 8007aca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007acc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ad0:	005a      	lsls	r2, r3, #1
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	085b      	lsrs	r3, r3, #1
 8007ad8:	441a      	add	r2, r3
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae6:	2b0f      	cmp	r3, #15
 8007ae8:	d916      	bls.n	8007b18 <UART_SetConfig+0x920>
 8007aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007af0:	d212      	bcs.n	8007b18 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	f023 030f 	bic.w	r3, r3, #15
 8007afa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007afe:	085b      	lsrs	r3, r3, #1
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	f003 0307 	and.w	r3, r3, #7
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007b14:	60da      	str	r2, [r3, #12]
 8007b16:	e0b9      	b.n	8007c8c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007b1e:	e0b5      	b.n	8007c8c <UART_SetConfig+0xa94>
 8007b20:	03d09000 	.word	0x03d09000
 8007b24:	003d0900 	.word	0x003d0900
 8007b28:	0800b018 	.word	0x0800b018
 8007b2c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b30:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007b34:	2b20      	cmp	r3, #32
 8007b36:	dc49      	bgt.n	8007bcc <UART_SetConfig+0x9d4>
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	db7c      	blt.n	8007c36 <UART_SetConfig+0xa3e>
 8007b3c:	2b20      	cmp	r3, #32
 8007b3e:	d87a      	bhi.n	8007c36 <UART_SetConfig+0xa3e>
 8007b40:	a201      	add	r2, pc, #4	@ (adr r2, 8007b48 <UART_SetConfig+0x950>)
 8007b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b46:	bf00      	nop
 8007b48:	08007bd3 	.word	0x08007bd3
 8007b4c:	08007bdb 	.word	0x08007bdb
 8007b50:	08007c37 	.word	0x08007c37
 8007b54:	08007c37 	.word	0x08007c37
 8007b58:	08007be3 	.word	0x08007be3
 8007b5c:	08007c37 	.word	0x08007c37
 8007b60:	08007c37 	.word	0x08007c37
 8007b64:	08007c37 	.word	0x08007c37
 8007b68:	08007bf3 	.word	0x08007bf3
 8007b6c:	08007c37 	.word	0x08007c37
 8007b70:	08007c37 	.word	0x08007c37
 8007b74:	08007c37 	.word	0x08007c37
 8007b78:	08007c37 	.word	0x08007c37
 8007b7c:	08007c37 	.word	0x08007c37
 8007b80:	08007c37 	.word	0x08007c37
 8007b84:	08007c37 	.word	0x08007c37
 8007b88:	08007c03 	.word	0x08007c03
 8007b8c:	08007c37 	.word	0x08007c37
 8007b90:	08007c37 	.word	0x08007c37
 8007b94:	08007c37 	.word	0x08007c37
 8007b98:	08007c37 	.word	0x08007c37
 8007b9c:	08007c37 	.word	0x08007c37
 8007ba0:	08007c37 	.word	0x08007c37
 8007ba4:	08007c37 	.word	0x08007c37
 8007ba8:	08007c37 	.word	0x08007c37
 8007bac:	08007c37 	.word	0x08007c37
 8007bb0:	08007c37 	.word	0x08007c37
 8007bb4:	08007c37 	.word	0x08007c37
 8007bb8:	08007c37 	.word	0x08007c37
 8007bbc:	08007c37 	.word	0x08007c37
 8007bc0:	08007c37 	.word	0x08007c37
 8007bc4:	08007c37 	.word	0x08007c37
 8007bc8:	08007c29 	.word	0x08007c29
 8007bcc:	2b40      	cmp	r3, #64	@ 0x40
 8007bce:	d02e      	beq.n	8007c2e <UART_SetConfig+0xa36>
 8007bd0:	e031      	b.n	8007c36 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bd2:	f7fb ffe5 	bl	8003ba0 <HAL_RCC_GetPCLK1Freq>
 8007bd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007bd8:	e033      	b.n	8007c42 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bda:	f7fb fff7 	bl	8003bcc <HAL_RCC_GetPCLK2Freq>
 8007bde:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007be0:	e02f      	b.n	8007c42 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007be2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7fd fa26 	bl	8005038 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007bf0:	e027      	b.n	8007c42 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bf2:	f107 0318 	add.w	r3, r7, #24
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7fd fb72 	bl	80052e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c00:	e01f      	b.n	8007c42 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c02:	4b2d      	ldr	r3, [pc, #180]	@ (8007cb8 <UART_SetConfig+0xac0>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f003 0320 	and.w	r3, r3, #32
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d009      	beq.n	8007c22 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c0e:	4b2a      	ldr	r3, [pc, #168]	@ (8007cb8 <UART_SetConfig+0xac0>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	08db      	lsrs	r3, r3, #3
 8007c14:	f003 0303 	and.w	r3, r3, #3
 8007c18:	4a28      	ldr	r2, [pc, #160]	@ (8007cbc <UART_SetConfig+0xac4>)
 8007c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c20:	e00f      	b.n	8007c42 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007c22:	4b26      	ldr	r3, [pc, #152]	@ (8007cbc <UART_SetConfig+0xac4>)
 8007c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c26:	e00c      	b.n	8007c42 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007c28:	4b25      	ldr	r3, [pc, #148]	@ (8007cc0 <UART_SetConfig+0xac8>)
 8007c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c2c:	e009      	b.n	8007c42 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c34:	e005      	b.n	8007c42 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007c36:	2300      	movs	r3, #0
 8007c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007c40:	bf00      	nop
    }

    if (pclk != 0U)
 8007c42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d021      	beq.n	8007c8c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c4c:	4a1d      	ldr	r2, [pc, #116]	@ (8007cc4 <UART_SetConfig+0xacc>)
 8007c4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c52:	461a      	mov	r2, r3
 8007c54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c56:	fbb3 f2f2 	udiv	r2, r3, r2
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	085b      	lsrs	r3, r3, #1
 8007c60:	441a      	add	r2, r3
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c6e:	2b0f      	cmp	r3, #15
 8007c70:	d909      	bls.n	8007c86 <UART_SetConfig+0xa8e>
 8007c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c78:	d205      	bcs.n	8007c86 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c7c:	b29a      	uxth	r2, r3
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	60da      	str	r2, [r3, #12]
 8007c84:	e002      	b.n	8007c8c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007ca8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3748      	adds	r7, #72	@ 0x48
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007cb6:	bf00      	nop
 8007cb8:	58024400 	.word	0x58024400
 8007cbc:	03d09000 	.word	0x03d09000
 8007cc0:	003d0900 	.word	0x003d0900
 8007cc4:	0800b018 	.word	0x0800b018

08007cc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cd4:	f003 0308 	and.w	r3, r3, #8
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00a      	beq.n	8007cf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	430a      	orrs	r2, r1
 8007cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00a      	beq.n	8007d14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	430a      	orrs	r2, r1
 8007d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d18:	f003 0302 	and.w	r3, r3, #2
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00a      	beq.n	8007d36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	430a      	orrs	r2, r1
 8007d34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d3a:	f003 0304 	and.w	r3, r3, #4
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d00a      	beq.n	8007d58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	430a      	orrs	r2, r1
 8007d56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d5c:	f003 0310 	and.w	r3, r3, #16
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00a      	beq.n	8007d7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	430a      	orrs	r2, r1
 8007d78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d7e:	f003 0320 	and.w	r3, r3, #32
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00a      	beq.n	8007d9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	430a      	orrs	r2, r1
 8007d9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d01a      	beq.n	8007dde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	430a      	orrs	r2, r1
 8007dbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007dc6:	d10a      	bne.n	8007dde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	430a      	orrs	r2, r1
 8007ddc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00a      	beq.n	8007e00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	430a      	orrs	r2, r1
 8007dfe:	605a      	str	r2, [r3, #4]
  }
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b098      	sub	sp, #96	@ 0x60
 8007e10:	af02      	add	r7, sp, #8
 8007e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e1c:	f7f9 ff26 	bl	8001c6c <HAL_GetTick>
 8007e20:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 0308 	and.w	r3, r3, #8
 8007e2c:	2b08      	cmp	r3, #8
 8007e2e:	d12f      	bne.n	8007e90 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e34:	9300      	str	r3, [sp, #0]
 8007e36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 f88e 	bl	8007f60 <UART_WaitOnFlagUntilTimeout>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d022      	beq.n	8007e90 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e52:	e853 3f00 	ldrex	r3, [r3]
 8007e56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	461a      	mov	r2, r3
 8007e66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e68:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e6a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e70:	e841 2300 	strex	r3, r2, [r1]
 8007e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d1e6      	bne.n	8007e4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2220      	movs	r2, #32
 8007e80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	e063      	b.n	8007f58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f003 0304 	and.w	r3, r3, #4
 8007e9a:	2b04      	cmp	r3, #4
 8007e9c:	d149      	bne.n	8007f32 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e9e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ea2:	9300      	str	r3, [sp, #0]
 8007ea4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 f857 	bl	8007f60 <UART_WaitOnFlagUntilTimeout>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d03c      	beq.n	8007f32 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec0:	e853 3f00 	ldrex	r3, [r3]
 8007ec4:	623b      	str	r3, [r7, #32]
   return(result);
 8007ec6:	6a3b      	ldr	r3, [r7, #32]
 8007ec8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ecc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ed6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ed8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007edc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ede:	e841 2300 	strex	r3, r2, [r1]
 8007ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1e6      	bne.n	8007eb8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	3308      	adds	r3, #8
 8007ef0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	e853 3f00 	ldrex	r3, [r3]
 8007ef8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f023 0301 	bic.w	r3, r3, #1
 8007f00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	3308      	adds	r3, #8
 8007f08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f0a:	61fa      	str	r2, [r7, #28]
 8007f0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0e:	69b9      	ldr	r1, [r7, #24]
 8007f10:	69fa      	ldr	r2, [r7, #28]
 8007f12:	e841 2300 	strex	r3, r2, [r1]
 8007f16:	617b      	str	r3, [r7, #20]
   return(result);
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d1e5      	bne.n	8007eea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2220      	movs	r2, #32
 8007f22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	e012      	b.n	8007f58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2220      	movs	r2, #32
 8007f36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2220      	movs	r2, #32
 8007f3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f56:	2300      	movs	r3, #0
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3758      	adds	r7, #88	@ 0x58
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	603b      	str	r3, [r7, #0]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f70:	e04f      	b.n	8008012 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f78:	d04b      	beq.n	8008012 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f7a:	f7f9 fe77 	bl	8001c6c <HAL_GetTick>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	1ad3      	subs	r3, r2, r3
 8007f84:	69ba      	ldr	r2, [r7, #24]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d302      	bcc.n	8007f90 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d101      	bne.n	8007f94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007f90:	2303      	movs	r3, #3
 8007f92:	e04e      	b.n	8008032 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 0304 	and.w	r3, r3, #4
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d037      	beq.n	8008012 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	2b80      	cmp	r3, #128	@ 0x80
 8007fa6:	d034      	beq.n	8008012 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	2b40      	cmp	r3, #64	@ 0x40
 8007fac:	d031      	beq.n	8008012 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	69db      	ldr	r3, [r3, #28]
 8007fb4:	f003 0308 	and.w	r3, r3, #8
 8007fb8:	2b08      	cmp	r3, #8
 8007fba:	d110      	bne.n	8007fde <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2208      	movs	r2, #8
 8007fc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007fc4:	68f8      	ldr	r0, [r7, #12]
 8007fc6:	f000 f839 	bl	800803c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2208      	movs	r2, #8
 8007fce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e029      	b.n	8008032 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	69db      	ldr	r3, [r3, #28]
 8007fe4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007fe8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fec:	d111      	bne.n	8008012 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007ff6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ff8:	68f8      	ldr	r0, [r7, #12]
 8007ffa:	f000 f81f 	bl	800803c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2220      	movs	r2, #32
 8008002:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2200      	movs	r2, #0
 800800a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	e00f      	b.n	8008032 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	69da      	ldr	r2, [r3, #28]
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	4013      	ands	r3, r2
 800801c:	68ba      	ldr	r2, [r7, #8]
 800801e:	429a      	cmp	r2, r3
 8008020:	bf0c      	ite	eq
 8008022:	2301      	moveq	r3, #1
 8008024:	2300      	movne	r3, #0
 8008026:	b2db      	uxtb	r3, r3
 8008028:	461a      	mov	r2, r3
 800802a:	79fb      	ldrb	r3, [r7, #7]
 800802c:	429a      	cmp	r2, r3
 800802e:	d0a0      	beq.n	8007f72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
	...

0800803c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800803c:	b480      	push	{r7}
 800803e:	b095      	sub	sp, #84	@ 0x54
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800804c:	e853 3f00 	ldrex	r3, [r3]
 8008050:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008054:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008058:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	461a      	mov	r2, r3
 8008060:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008062:	643b      	str	r3, [r7, #64]	@ 0x40
 8008064:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008066:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008068:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800806a:	e841 2300 	strex	r3, r2, [r1]
 800806e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1e6      	bne.n	8008044 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	3308      	adds	r3, #8
 800807c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807e:	6a3b      	ldr	r3, [r7, #32]
 8008080:	e853 3f00 	ldrex	r3, [r3]
 8008084:	61fb      	str	r3, [r7, #28]
   return(result);
 8008086:	69fa      	ldr	r2, [r7, #28]
 8008088:	4b1e      	ldr	r3, [pc, #120]	@ (8008104 <UART_EndRxTransfer+0xc8>)
 800808a:	4013      	ands	r3, r2
 800808c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	3308      	adds	r3, #8
 8008094:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008096:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008098:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800809c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800809e:	e841 2300 	strex	r3, r2, [r1]
 80080a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80080a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d1e5      	bne.n	8008076 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d118      	bne.n	80080e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	e853 3f00 	ldrex	r3, [r3]
 80080be:	60bb      	str	r3, [r7, #8]
   return(result);
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	f023 0310 	bic.w	r3, r3, #16
 80080c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	461a      	mov	r2, r3
 80080ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080d0:	61bb      	str	r3, [r7, #24]
 80080d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d4:	6979      	ldr	r1, [r7, #20]
 80080d6:	69ba      	ldr	r2, [r7, #24]
 80080d8:	e841 2300 	strex	r3, r2, [r1]
 80080dc:	613b      	str	r3, [r7, #16]
   return(result);
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d1e6      	bne.n	80080b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2220      	movs	r2, #32
 80080e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80080f8:	bf00      	nop
 80080fa:	3754      	adds	r7, #84	@ 0x54
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr
 8008104:	effffffe 	.word	0xeffffffe

08008108 <std>:
 8008108:	2300      	movs	r3, #0
 800810a:	b510      	push	{r4, lr}
 800810c:	4604      	mov	r4, r0
 800810e:	e9c0 3300 	strd	r3, r3, [r0]
 8008112:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008116:	6083      	str	r3, [r0, #8]
 8008118:	8181      	strh	r1, [r0, #12]
 800811a:	6643      	str	r3, [r0, #100]	@ 0x64
 800811c:	81c2      	strh	r2, [r0, #14]
 800811e:	6183      	str	r3, [r0, #24]
 8008120:	4619      	mov	r1, r3
 8008122:	2208      	movs	r2, #8
 8008124:	305c      	adds	r0, #92	@ 0x5c
 8008126:	f000 f906 	bl	8008336 <memset>
 800812a:	4b0d      	ldr	r3, [pc, #52]	@ (8008160 <std+0x58>)
 800812c:	6263      	str	r3, [r4, #36]	@ 0x24
 800812e:	4b0d      	ldr	r3, [pc, #52]	@ (8008164 <std+0x5c>)
 8008130:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008132:	4b0d      	ldr	r3, [pc, #52]	@ (8008168 <std+0x60>)
 8008134:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008136:	4b0d      	ldr	r3, [pc, #52]	@ (800816c <std+0x64>)
 8008138:	6323      	str	r3, [r4, #48]	@ 0x30
 800813a:	4b0d      	ldr	r3, [pc, #52]	@ (8008170 <std+0x68>)
 800813c:	6224      	str	r4, [r4, #32]
 800813e:	429c      	cmp	r4, r3
 8008140:	d006      	beq.n	8008150 <std+0x48>
 8008142:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008146:	4294      	cmp	r4, r2
 8008148:	d002      	beq.n	8008150 <std+0x48>
 800814a:	33d0      	adds	r3, #208	@ 0xd0
 800814c:	429c      	cmp	r4, r3
 800814e:	d105      	bne.n	800815c <std+0x54>
 8008150:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008158:	f000 b966 	b.w	8008428 <__retarget_lock_init_recursive>
 800815c:	bd10      	pop	{r4, pc}
 800815e:	bf00      	nop
 8008160:	080082b1 	.word	0x080082b1
 8008164:	080082d3 	.word	0x080082d3
 8008168:	0800830b 	.word	0x0800830b
 800816c:	0800832f 	.word	0x0800832f
 8008170:	240001e8 	.word	0x240001e8

08008174 <stdio_exit_handler>:
 8008174:	4a02      	ldr	r2, [pc, #8]	@ (8008180 <stdio_exit_handler+0xc>)
 8008176:	4903      	ldr	r1, [pc, #12]	@ (8008184 <stdio_exit_handler+0x10>)
 8008178:	4803      	ldr	r0, [pc, #12]	@ (8008188 <stdio_exit_handler+0x14>)
 800817a:	f000 b869 	b.w	8008250 <_fwalk_sglue>
 800817e:	bf00      	nop
 8008180:	2400002c 	.word	0x2400002c
 8008184:	08008cc5 	.word	0x08008cc5
 8008188:	2400003c 	.word	0x2400003c

0800818c <cleanup_stdio>:
 800818c:	6841      	ldr	r1, [r0, #4]
 800818e:	4b0c      	ldr	r3, [pc, #48]	@ (80081c0 <cleanup_stdio+0x34>)
 8008190:	4299      	cmp	r1, r3
 8008192:	b510      	push	{r4, lr}
 8008194:	4604      	mov	r4, r0
 8008196:	d001      	beq.n	800819c <cleanup_stdio+0x10>
 8008198:	f000 fd94 	bl	8008cc4 <_fflush_r>
 800819c:	68a1      	ldr	r1, [r4, #8]
 800819e:	4b09      	ldr	r3, [pc, #36]	@ (80081c4 <cleanup_stdio+0x38>)
 80081a0:	4299      	cmp	r1, r3
 80081a2:	d002      	beq.n	80081aa <cleanup_stdio+0x1e>
 80081a4:	4620      	mov	r0, r4
 80081a6:	f000 fd8d 	bl	8008cc4 <_fflush_r>
 80081aa:	68e1      	ldr	r1, [r4, #12]
 80081ac:	4b06      	ldr	r3, [pc, #24]	@ (80081c8 <cleanup_stdio+0x3c>)
 80081ae:	4299      	cmp	r1, r3
 80081b0:	d004      	beq.n	80081bc <cleanup_stdio+0x30>
 80081b2:	4620      	mov	r0, r4
 80081b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081b8:	f000 bd84 	b.w	8008cc4 <_fflush_r>
 80081bc:	bd10      	pop	{r4, pc}
 80081be:	bf00      	nop
 80081c0:	240001e8 	.word	0x240001e8
 80081c4:	24000250 	.word	0x24000250
 80081c8:	240002b8 	.word	0x240002b8

080081cc <global_stdio_init.part.0>:
 80081cc:	b510      	push	{r4, lr}
 80081ce:	4b0b      	ldr	r3, [pc, #44]	@ (80081fc <global_stdio_init.part.0+0x30>)
 80081d0:	4c0b      	ldr	r4, [pc, #44]	@ (8008200 <global_stdio_init.part.0+0x34>)
 80081d2:	4a0c      	ldr	r2, [pc, #48]	@ (8008204 <global_stdio_init.part.0+0x38>)
 80081d4:	601a      	str	r2, [r3, #0]
 80081d6:	4620      	mov	r0, r4
 80081d8:	2200      	movs	r2, #0
 80081da:	2104      	movs	r1, #4
 80081dc:	f7ff ff94 	bl	8008108 <std>
 80081e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80081e4:	2201      	movs	r2, #1
 80081e6:	2109      	movs	r1, #9
 80081e8:	f7ff ff8e 	bl	8008108 <std>
 80081ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80081f0:	2202      	movs	r2, #2
 80081f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081f6:	2112      	movs	r1, #18
 80081f8:	f7ff bf86 	b.w	8008108 <std>
 80081fc:	24000320 	.word	0x24000320
 8008200:	240001e8 	.word	0x240001e8
 8008204:	08008175 	.word	0x08008175

08008208 <__sfp_lock_acquire>:
 8008208:	4801      	ldr	r0, [pc, #4]	@ (8008210 <__sfp_lock_acquire+0x8>)
 800820a:	f000 b90e 	b.w	800842a <__retarget_lock_acquire_recursive>
 800820e:	bf00      	nop
 8008210:	24000329 	.word	0x24000329

08008214 <__sfp_lock_release>:
 8008214:	4801      	ldr	r0, [pc, #4]	@ (800821c <__sfp_lock_release+0x8>)
 8008216:	f000 b909 	b.w	800842c <__retarget_lock_release_recursive>
 800821a:	bf00      	nop
 800821c:	24000329 	.word	0x24000329

08008220 <__sinit>:
 8008220:	b510      	push	{r4, lr}
 8008222:	4604      	mov	r4, r0
 8008224:	f7ff fff0 	bl	8008208 <__sfp_lock_acquire>
 8008228:	6a23      	ldr	r3, [r4, #32]
 800822a:	b11b      	cbz	r3, 8008234 <__sinit+0x14>
 800822c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008230:	f7ff bff0 	b.w	8008214 <__sfp_lock_release>
 8008234:	4b04      	ldr	r3, [pc, #16]	@ (8008248 <__sinit+0x28>)
 8008236:	6223      	str	r3, [r4, #32]
 8008238:	4b04      	ldr	r3, [pc, #16]	@ (800824c <__sinit+0x2c>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d1f5      	bne.n	800822c <__sinit+0xc>
 8008240:	f7ff ffc4 	bl	80081cc <global_stdio_init.part.0>
 8008244:	e7f2      	b.n	800822c <__sinit+0xc>
 8008246:	bf00      	nop
 8008248:	0800818d 	.word	0x0800818d
 800824c:	24000320 	.word	0x24000320

08008250 <_fwalk_sglue>:
 8008250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008254:	4607      	mov	r7, r0
 8008256:	4688      	mov	r8, r1
 8008258:	4614      	mov	r4, r2
 800825a:	2600      	movs	r6, #0
 800825c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008260:	f1b9 0901 	subs.w	r9, r9, #1
 8008264:	d505      	bpl.n	8008272 <_fwalk_sglue+0x22>
 8008266:	6824      	ldr	r4, [r4, #0]
 8008268:	2c00      	cmp	r4, #0
 800826a:	d1f7      	bne.n	800825c <_fwalk_sglue+0xc>
 800826c:	4630      	mov	r0, r6
 800826e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008272:	89ab      	ldrh	r3, [r5, #12]
 8008274:	2b01      	cmp	r3, #1
 8008276:	d907      	bls.n	8008288 <_fwalk_sglue+0x38>
 8008278:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800827c:	3301      	adds	r3, #1
 800827e:	d003      	beq.n	8008288 <_fwalk_sglue+0x38>
 8008280:	4629      	mov	r1, r5
 8008282:	4638      	mov	r0, r7
 8008284:	47c0      	blx	r8
 8008286:	4306      	orrs	r6, r0
 8008288:	3568      	adds	r5, #104	@ 0x68
 800828a:	e7e9      	b.n	8008260 <_fwalk_sglue+0x10>

0800828c <iprintf>:
 800828c:	b40f      	push	{r0, r1, r2, r3}
 800828e:	b507      	push	{r0, r1, r2, lr}
 8008290:	4906      	ldr	r1, [pc, #24]	@ (80082ac <iprintf+0x20>)
 8008292:	ab04      	add	r3, sp, #16
 8008294:	6808      	ldr	r0, [r1, #0]
 8008296:	f853 2b04 	ldr.w	r2, [r3], #4
 800829a:	6881      	ldr	r1, [r0, #8]
 800829c:	9301      	str	r3, [sp, #4]
 800829e:	f000 f9e9 	bl	8008674 <_vfiprintf_r>
 80082a2:	b003      	add	sp, #12
 80082a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80082a8:	b004      	add	sp, #16
 80082aa:	4770      	bx	lr
 80082ac:	24000038 	.word	0x24000038

080082b0 <__sread>:
 80082b0:	b510      	push	{r4, lr}
 80082b2:	460c      	mov	r4, r1
 80082b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082b8:	f000 f868 	bl	800838c <_read_r>
 80082bc:	2800      	cmp	r0, #0
 80082be:	bfab      	itete	ge
 80082c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80082c2:	89a3      	ldrhlt	r3, [r4, #12]
 80082c4:	181b      	addge	r3, r3, r0
 80082c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80082ca:	bfac      	ite	ge
 80082cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80082ce:	81a3      	strhlt	r3, [r4, #12]
 80082d0:	bd10      	pop	{r4, pc}

080082d2 <__swrite>:
 80082d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082d6:	461f      	mov	r7, r3
 80082d8:	898b      	ldrh	r3, [r1, #12]
 80082da:	05db      	lsls	r3, r3, #23
 80082dc:	4605      	mov	r5, r0
 80082de:	460c      	mov	r4, r1
 80082e0:	4616      	mov	r6, r2
 80082e2:	d505      	bpl.n	80082f0 <__swrite+0x1e>
 80082e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082e8:	2302      	movs	r3, #2
 80082ea:	2200      	movs	r2, #0
 80082ec:	f000 f83c 	bl	8008368 <_lseek_r>
 80082f0:	89a3      	ldrh	r3, [r4, #12]
 80082f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80082fa:	81a3      	strh	r3, [r4, #12]
 80082fc:	4632      	mov	r2, r6
 80082fe:	463b      	mov	r3, r7
 8008300:	4628      	mov	r0, r5
 8008302:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008306:	f000 b853 	b.w	80083b0 <_write_r>

0800830a <__sseek>:
 800830a:	b510      	push	{r4, lr}
 800830c:	460c      	mov	r4, r1
 800830e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008312:	f000 f829 	bl	8008368 <_lseek_r>
 8008316:	1c43      	adds	r3, r0, #1
 8008318:	89a3      	ldrh	r3, [r4, #12]
 800831a:	bf15      	itete	ne
 800831c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800831e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008322:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008326:	81a3      	strheq	r3, [r4, #12]
 8008328:	bf18      	it	ne
 800832a:	81a3      	strhne	r3, [r4, #12]
 800832c:	bd10      	pop	{r4, pc}

0800832e <__sclose>:
 800832e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008332:	f000 b809 	b.w	8008348 <_close_r>

08008336 <memset>:
 8008336:	4402      	add	r2, r0
 8008338:	4603      	mov	r3, r0
 800833a:	4293      	cmp	r3, r2
 800833c:	d100      	bne.n	8008340 <memset+0xa>
 800833e:	4770      	bx	lr
 8008340:	f803 1b01 	strb.w	r1, [r3], #1
 8008344:	e7f9      	b.n	800833a <memset+0x4>
	...

08008348 <_close_r>:
 8008348:	b538      	push	{r3, r4, r5, lr}
 800834a:	4d06      	ldr	r5, [pc, #24]	@ (8008364 <_close_r+0x1c>)
 800834c:	2300      	movs	r3, #0
 800834e:	4604      	mov	r4, r0
 8008350:	4608      	mov	r0, r1
 8008352:	602b      	str	r3, [r5, #0]
 8008354:	f7f9 f860 	bl	8001418 <_close>
 8008358:	1c43      	adds	r3, r0, #1
 800835a:	d102      	bne.n	8008362 <_close_r+0x1a>
 800835c:	682b      	ldr	r3, [r5, #0]
 800835e:	b103      	cbz	r3, 8008362 <_close_r+0x1a>
 8008360:	6023      	str	r3, [r4, #0]
 8008362:	bd38      	pop	{r3, r4, r5, pc}
 8008364:	24000324 	.word	0x24000324

08008368 <_lseek_r>:
 8008368:	b538      	push	{r3, r4, r5, lr}
 800836a:	4d07      	ldr	r5, [pc, #28]	@ (8008388 <_lseek_r+0x20>)
 800836c:	4604      	mov	r4, r0
 800836e:	4608      	mov	r0, r1
 8008370:	4611      	mov	r1, r2
 8008372:	2200      	movs	r2, #0
 8008374:	602a      	str	r2, [r5, #0]
 8008376:	461a      	mov	r2, r3
 8008378:	f7f9 f875 	bl	8001466 <_lseek>
 800837c:	1c43      	adds	r3, r0, #1
 800837e:	d102      	bne.n	8008386 <_lseek_r+0x1e>
 8008380:	682b      	ldr	r3, [r5, #0]
 8008382:	b103      	cbz	r3, 8008386 <_lseek_r+0x1e>
 8008384:	6023      	str	r3, [r4, #0]
 8008386:	bd38      	pop	{r3, r4, r5, pc}
 8008388:	24000324 	.word	0x24000324

0800838c <_read_r>:
 800838c:	b538      	push	{r3, r4, r5, lr}
 800838e:	4d07      	ldr	r5, [pc, #28]	@ (80083ac <_read_r+0x20>)
 8008390:	4604      	mov	r4, r0
 8008392:	4608      	mov	r0, r1
 8008394:	4611      	mov	r1, r2
 8008396:	2200      	movs	r2, #0
 8008398:	602a      	str	r2, [r5, #0]
 800839a:	461a      	mov	r2, r3
 800839c:	f7f9 f803 	bl	80013a6 <_read>
 80083a0:	1c43      	adds	r3, r0, #1
 80083a2:	d102      	bne.n	80083aa <_read_r+0x1e>
 80083a4:	682b      	ldr	r3, [r5, #0]
 80083a6:	b103      	cbz	r3, 80083aa <_read_r+0x1e>
 80083a8:	6023      	str	r3, [r4, #0]
 80083aa:	bd38      	pop	{r3, r4, r5, pc}
 80083ac:	24000324 	.word	0x24000324

080083b0 <_write_r>:
 80083b0:	b538      	push	{r3, r4, r5, lr}
 80083b2:	4d07      	ldr	r5, [pc, #28]	@ (80083d0 <_write_r+0x20>)
 80083b4:	4604      	mov	r4, r0
 80083b6:	4608      	mov	r0, r1
 80083b8:	4611      	mov	r1, r2
 80083ba:	2200      	movs	r2, #0
 80083bc:	602a      	str	r2, [r5, #0]
 80083be:	461a      	mov	r2, r3
 80083c0:	f7f9 f80e 	bl	80013e0 <_write>
 80083c4:	1c43      	adds	r3, r0, #1
 80083c6:	d102      	bne.n	80083ce <_write_r+0x1e>
 80083c8:	682b      	ldr	r3, [r5, #0]
 80083ca:	b103      	cbz	r3, 80083ce <_write_r+0x1e>
 80083cc:	6023      	str	r3, [r4, #0]
 80083ce:	bd38      	pop	{r3, r4, r5, pc}
 80083d0:	24000324 	.word	0x24000324

080083d4 <__errno>:
 80083d4:	4b01      	ldr	r3, [pc, #4]	@ (80083dc <__errno+0x8>)
 80083d6:	6818      	ldr	r0, [r3, #0]
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	24000038 	.word	0x24000038

080083e0 <__libc_init_array>:
 80083e0:	b570      	push	{r4, r5, r6, lr}
 80083e2:	4d0d      	ldr	r5, [pc, #52]	@ (8008418 <__libc_init_array+0x38>)
 80083e4:	4c0d      	ldr	r4, [pc, #52]	@ (800841c <__libc_init_array+0x3c>)
 80083e6:	1b64      	subs	r4, r4, r5
 80083e8:	10a4      	asrs	r4, r4, #2
 80083ea:	2600      	movs	r6, #0
 80083ec:	42a6      	cmp	r6, r4
 80083ee:	d109      	bne.n	8008404 <__libc_init_array+0x24>
 80083f0:	4d0b      	ldr	r5, [pc, #44]	@ (8008420 <__libc_init_array+0x40>)
 80083f2:	4c0c      	ldr	r4, [pc, #48]	@ (8008424 <__libc_init_array+0x44>)
 80083f4:	f000 fdb6 	bl	8008f64 <_init>
 80083f8:	1b64      	subs	r4, r4, r5
 80083fa:	10a4      	asrs	r4, r4, #2
 80083fc:	2600      	movs	r6, #0
 80083fe:	42a6      	cmp	r6, r4
 8008400:	d105      	bne.n	800840e <__libc_init_array+0x2e>
 8008402:	bd70      	pop	{r4, r5, r6, pc}
 8008404:	f855 3b04 	ldr.w	r3, [r5], #4
 8008408:	4798      	blx	r3
 800840a:	3601      	adds	r6, #1
 800840c:	e7ee      	b.n	80083ec <__libc_init_array+0xc>
 800840e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008412:	4798      	blx	r3
 8008414:	3601      	adds	r6, #1
 8008416:	e7f2      	b.n	80083fe <__libc_init_array+0x1e>
 8008418:	0800b06c 	.word	0x0800b06c
 800841c:	0800b06c 	.word	0x0800b06c
 8008420:	0800b06c 	.word	0x0800b06c
 8008424:	0800b070 	.word	0x0800b070

08008428 <__retarget_lock_init_recursive>:
 8008428:	4770      	bx	lr

0800842a <__retarget_lock_acquire_recursive>:
 800842a:	4770      	bx	lr

0800842c <__retarget_lock_release_recursive>:
 800842c:	4770      	bx	lr
	...

08008430 <_free_r>:
 8008430:	b538      	push	{r3, r4, r5, lr}
 8008432:	4605      	mov	r5, r0
 8008434:	2900      	cmp	r1, #0
 8008436:	d041      	beq.n	80084bc <_free_r+0x8c>
 8008438:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800843c:	1f0c      	subs	r4, r1, #4
 800843e:	2b00      	cmp	r3, #0
 8008440:	bfb8      	it	lt
 8008442:	18e4      	addlt	r4, r4, r3
 8008444:	f000 f8e0 	bl	8008608 <__malloc_lock>
 8008448:	4a1d      	ldr	r2, [pc, #116]	@ (80084c0 <_free_r+0x90>)
 800844a:	6813      	ldr	r3, [r2, #0]
 800844c:	b933      	cbnz	r3, 800845c <_free_r+0x2c>
 800844e:	6063      	str	r3, [r4, #4]
 8008450:	6014      	str	r4, [r2, #0]
 8008452:	4628      	mov	r0, r5
 8008454:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008458:	f000 b8dc 	b.w	8008614 <__malloc_unlock>
 800845c:	42a3      	cmp	r3, r4
 800845e:	d908      	bls.n	8008472 <_free_r+0x42>
 8008460:	6820      	ldr	r0, [r4, #0]
 8008462:	1821      	adds	r1, r4, r0
 8008464:	428b      	cmp	r3, r1
 8008466:	bf01      	itttt	eq
 8008468:	6819      	ldreq	r1, [r3, #0]
 800846a:	685b      	ldreq	r3, [r3, #4]
 800846c:	1809      	addeq	r1, r1, r0
 800846e:	6021      	streq	r1, [r4, #0]
 8008470:	e7ed      	b.n	800844e <_free_r+0x1e>
 8008472:	461a      	mov	r2, r3
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	b10b      	cbz	r3, 800847c <_free_r+0x4c>
 8008478:	42a3      	cmp	r3, r4
 800847a:	d9fa      	bls.n	8008472 <_free_r+0x42>
 800847c:	6811      	ldr	r1, [r2, #0]
 800847e:	1850      	adds	r0, r2, r1
 8008480:	42a0      	cmp	r0, r4
 8008482:	d10b      	bne.n	800849c <_free_r+0x6c>
 8008484:	6820      	ldr	r0, [r4, #0]
 8008486:	4401      	add	r1, r0
 8008488:	1850      	adds	r0, r2, r1
 800848a:	4283      	cmp	r3, r0
 800848c:	6011      	str	r1, [r2, #0]
 800848e:	d1e0      	bne.n	8008452 <_free_r+0x22>
 8008490:	6818      	ldr	r0, [r3, #0]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	6053      	str	r3, [r2, #4]
 8008496:	4408      	add	r0, r1
 8008498:	6010      	str	r0, [r2, #0]
 800849a:	e7da      	b.n	8008452 <_free_r+0x22>
 800849c:	d902      	bls.n	80084a4 <_free_r+0x74>
 800849e:	230c      	movs	r3, #12
 80084a0:	602b      	str	r3, [r5, #0]
 80084a2:	e7d6      	b.n	8008452 <_free_r+0x22>
 80084a4:	6820      	ldr	r0, [r4, #0]
 80084a6:	1821      	adds	r1, r4, r0
 80084a8:	428b      	cmp	r3, r1
 80084aa:	bf04      	itt	eq
 80084ac:	6819      	ldreq	r1, [r3, #0]
 80084ae:	685b      	ldreq	r3, [r3, #4]
 80084b0:	6063      	str	r3, [r4, #4]
 80084b2:	bf04      	itt	eq
 80084b4:	1809      	addeq	r1, r1, r0
 80084b6:	6021      	streq	r1, [r4, #0]
 80084b8:	6054      	str	r4, [r2, #4]
 80084ba:	e7ca      	b.n	8008452 <_free_r+0x22>
 80084bc:	bd38      	pop	{r3, r4, r5, pc}
 80084be:	bf00      	nop
 80084c0:	24000330 	.word	0x24000330

080084c4 <sbrk_aligned>:
 80084c4:	b570      	push	{r4, r5, r6, lr}
 80084c6:	4e0f      	ldr	r6, [pc, #60]	@ (8008504 <sbrk_aligned+0x40>)
 80084c8:	460c      	mov	r4, r1
 80084ca:	6831      	ldr	r1, [r6, #0]
 80084cc:	4605      	mov	r5, r0
 80084ce:	b911      	cbnz	r1, 80084d6 <sbrk_aligned+0x12>
 80084d0:	f000 fcb4 	bl	8008e3c <_sbrk_r>
 80084d4:	6030      	str	r0, [r6, #0]
 80084d6:	4621      	mov	r1, r4
 80084d8:	4628      	mov	r0, r5
 80084da:	f000 fcaf 	bl	8008e3c <_sbrk_r>
 80084de:	1c43      	adds	r3, r0, #1
 80084e0:	d103      	bne.n	80084ea <sbrk_aligned+0x26>
 80084e2:	f04f 34ff 	mov.w	r4, #4294967295
 80084e6:	4620      	mov	r0, r4
 80084e8:	bd70      	pop	{r4, r5, r6, pc}
 80084ea:	1cc4      	adds	r4, r0, #3
 80084ec:	f024 0403 	bic.w	r4, r4, #3
 80084f0:	42a0      	cmp	r0, r4
 80084f2:	d0f8      	beq.n	80084e6 <sbrk_aligned+0x22>
 80084f4:	1a21      	subs	r1, r4, r0
 80084f6:	4628      	mov	r0, r5
 80084f8:	f000 fca0 	bl	8008e3c <_sbrk_r>
 80084fc:	3001      	adds	r0, #1
 80084fe:	d1f2      	bne.n	80084e6 <sbrk_aligned+0x22>
 8008500:	e7ef      	b.n	80084e2 <sbrk_aligned+0x1e>
 8008502:	bf00      	nop
 8008504:	2400032c 	.word	0x2400032c

08008508 <_malloc_r>:
 8008508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800850c:	1ccd      	adds	r5, r1, #3
 800850e:	f025 0503 	bic.w	r5, r5, #3
 8008512:	3508      	adds	r5, #8
 8008514:	2d0c      	cmp	r5, #12
 8008516:	bf38      	it	cc
 8008518:	250c      	movcc	r5, #12
 800851a:	2d00      	cmp	r5, #0
 800851c:	4606      	mov	r6, r0
 800851e:	db01      	blt.n	8008524 <_malloc_r+0x1c>
 8008520:	42a9      	cmp	r1, r5
 8008522:	d904      	bls.n	800852e <_malloc_r+0x26>
 8008524:	230c      	movs	r3, #12
 8008526:	6033      	str	r3, [r6, #0]
 8008528:	2000      	movs	r0, #0
 800852a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800852e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008604 <_malloc_r+0xfc>
 8008532:	f000 f869 	bl	8008608 <__malloc_lock>
 8008536:	f8d8 3000 	ldr.w	r3, [r8]
 800853a:	461c      	mov	r4, r3
 800853c:	bb44      	cbnz	r4, 8008590 <_malloc_r+0x88>
 800853e:	4629      	mov	r1, r5
 8008540:	4630      	mov	r0, r6
 8008542:	f7ff ffbf 	bl	80084c4 <sbrk_aligned>
 8008546:	1c43      	adds	r3, r0, #1
 8008548:	4604      	mov	r4, r0
 800854a:	d158      	bne.n	80085fe <_malloc_r+0xf6>
 800854c:	f8d8 4000 	ldr.w	r4, [r8]
 8008550:	4627      	mov	r7, r4
 8008552:	2f00      	cmp	r7, #0
 8008554:	d143      	bne.n	80085de <_malloc_r+0xd6>
 8008556:	2c00      	cmp	r4, #0
 8008558:	d04b      	beq.n	80085f2 <_malloc_r+0xea>
 800855a:	6823      	ldr	r3, [r4, #0]
 800855c:	4639      	mov	r1, r7
 800855e:	4630      	mov	r0, r6
 8008560:	eb04 0903 	add.w	r9, r4, r3
 8008564:	f000 fc6a 	bl	8008e3c <_sbrk_r>
 8008568:	4581      	cmp	r9, r0
 800856a:	d142      	bne.n	80085f2 <_malloc_r+0xea>
 800856c:	6821      	ldr	r1, [r4, #0]
 800856e:	1a6d      	subs	r5, r5, r1
 8008570:	4629      	mov	r1, r5
 8008572:	4630      	mov	r0, r6
 8008574:	f7ff ffa6 	bl	80084c4 <sbrk_aligned>
 8008578:	3001      	adds	r0, #1
 800857a:	d03a      	beq.n	80085f2 <_malloc_r+0xea>
 800857c:	6823      	ldr	r3, [r4, #0]
 800857e:	442b      	add	r3, r5
 8008580:	6023      	str	r3, [r4, #0]
 8008582:	f8d8 3000 	ldr.w	r3, [r8]
 8008586:	685a      	ldr	r2, [r3, #4]
 8008588:	bb62      	cbnz	r2, 80085e4 <_malloc_r+0xdc>
 800858a:	f8c8 7000 	str.w	r7, [r8]
 800858e:	e00f      	b.n	80085b0 <_malloc_r+0xa8>
 8008590:	6822      	ldr	r2, [r4, #0]
 8008592:	1b52      	subs	r2, r2, r5
 8008594:	d420      	bmi.n	80085d8 <_malloc_r+0xd0>
 8008596:	2a0b      	cmp	r2, #11
 8008598:	d917      	bls.n	80085ca <_malloc_r+0xc2>
 800859a:	1961      	adds	r1, r4, r5
 800859c:	42a3      	cmp	r3, r4
 800859e:	6025      	str	r5, [r4, #0]
 80085a0:	bf18      	it	ne
 80085a2:	6059      	strne	r1, [r3, #4]
 80085a4:	6863      	ldr	r3, [r4, #4]
 80085a6:	bf08      	it	eq
 80085a8:	f8c8 1000 	streq.w	r1, [r8]
 80085ac:	5162      	str	r2, [r4, r5]
 80085ae:	604b      	str	r3, [r1, #4]
 80085b0:	4630      	mov	r0, r6
 80085b2:	f000 f82f 	bl	8008614 <__malloc_unlock>
 80085b6:	f104 000b 	add.w	r0, r4, #11
 80085ba:	1d23      	adds	r3, r4, #4
 80085bc:	f020 0007 	bic.w	r0, r0, #7
 80085c0:	1ac2      	subs	r2, r0, r3
 80085c2:	bf1c      	itt	ne
 80085c4:	1a1b      	subne	r3, r3, r0
 80085c6:	50a3      	strne	r3, [r4, r2]
 80085c8:	e7af      	b.n	800852a <_malloc_r+0x22>
 80085ca:	6862      	ldr	r2, [r4, #4]
 80085cc:	42a3      	cmp	r3, r4
 80085ce:	bf0c      	ite	eq
 80085d0:	f8c8 2000 	streq.w	r2, [r8]
 80085d4:	605a      	strne	r2, [r3, #4]
 80085d6:	e7eb      	b.n	80085b0 <_malloc_r+0xa8>
 80085d8:	4623      	mov	r3, r4
 80085da:	6864      	ldr	r4, [r4, #4]
 80085dc:	e7ae      	b.n	800853c <_malloc_r+0x34>
 80085de:	463c      	mov	r4, r7
 80085e0:	687f      	ldr	r7, [r7, #4]
 80085e2:	e7b6      	b.n	8008552 <_malloc_r+0x4a>
 80085e4:	461a      	mov	r2, r3
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	42a3      	cmp	r3, r4
 80085ea:	d1fb      	bne.n	80085e4 <_malloc_r+0xdc>
 80085ec:	2300      	movs	r3, #0
 80085ee:	6053      	str	r3, [r2, #4]
 80085f0:	e7de      	b.n	80085b0 <_malloc_r+0xa8>
 80085f2:	230c      	movs	r3, #12
 80085f4:	6033      	str	r3, [r6, #0]
 80085f6:	4630      	mov	r0, r6
 80085f8:	f000 f80c 	bl	8008614 <__malloc_unlock>
 80085fc:	e794      	b.n	8008528 <_malloc_r+0x20>
 80085fe:	6005      	str	r5, [r0, #0]
 8008600:	e7d6      	b.n	80085b0 <_malloc_r+0xa8>
 8008602:	bf00      	nop
 8008604:	24000330 	.word	0x24000330

08008608 <__malloc_lock>:
 8008608:	4801      	ldr	r0, [pc, #4]	@ (8008610 <__malloc_lock+0x8>)
 800860a:	f7ff bf0e 	b.w	800842a <__retarget_lock_acquire_recursive>
 800860e:	bf00      	nop
 8008610:	24000328 	.word	0x24000328

08008614 <__malloc_unlock>:
 8008614:	4801      	ldr	r0, [pc, #4]	@ (800861c <__malloc_unlock+0x8>)
 8008616:	f7ff bf09 	b.w	800842c <__retarget_lock_release_recursive>
 800861a:	bf00      	nop
 800861c:	24000328 	.word	0x24000328

08008620 <__sfputc_r>:
 8008620:	6893      	ldr	r3, [r2, #8]
 8008622:	3b01      	subs	r3, #1
 8008624:	2b00      	cmp	r3, #0
 8008626:	b410      	push	{r4}
 8008628:	6093      	str	r3, [r2, #8]
 800862a:	da08      	bge.n	800863e <__sfputc_r+0x1e>
 800862c:	6994      	ldr	r4, [r2, #24]
 800862e:	42a3      	cmp	r3, r4
 8008630:	db01      	blt.n	8008636 <__sfputc_r+0x16>
 8008632:	290a      	cmp	r1, #10
 8008634:	d103      	bne.n	800863e <__sfputc_r+0x1e>
 8008636:	f85d 4b04 	ldr.w	r4, [sp], #4
 800863a:	f000 bb6b 	b.w	8008d14 <__swbuf_r>
 800863e:	6813      	ldr	r3, [r2, #0]
 8008640:	1c58      	adds	r0, r3, #1
 8008642:	6010      	str	r0, [r2, #0]
 8008644:	7019      	strb	r1, [r3, #0]
 8008646:	4608      	mov	r0, r1
 8008648:	f85d 4b04 	ldr.w	r4, [sp], #4
 800864c:	4770      	bx	lr

0800864e <__sfputs_r>:
 800864e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008650:	4606      	mov	r6, r0
 8008652:	460f      	mov	r7, r1
 8008654:	4614      	mov	r4, r2
 8008656:	18d5      	adds	r5, r2, r3
 8008658:	42ac      	cmp	r4, r5
 800865a:	d101      	bne.n	8008660 <__sfputs_r+0x12>
 800865c:	2000      	movs	r0, #0
 800865e:	e007      	b.n	8008670 <__sfputs_r+0x22>
 8008660:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008664:	463a      	mov	r2, r7
 8008666:	4630      	mov	r0, r6
 8008668:	f7ff ffda 	bl	8008620 <__sfputc_r>
 800866c:	1c43      	adds	r3, r0, #1
 800866e:	d1f3      	bne.n	8008658 <__sfputs_r+0xa>
 8008670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008674 <_vfiprintf_r>:
 8008674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008678:	460d      	mov	r5, r1
 800867a:	b09d      	sub	sp, #116	@ 0x74
 800867c:	4614      	mov	r4, r2
 800867e:	4698      	mov	r8, r3
 8008680:	4606      	mov	r6, r0
 8008682:	b118      	cbz	r0, 800868c <_vfiprintf_r+0x18>
 8008684:	6a03      	ldr	r3, [r0, #32]
 8008686:	b90b      	cbnz	r3, 800868c <_vfiprintf_r+0x18>
 8008688:	f7ff fdca 	bl	8008220 <__sinit>
 800868c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800868e:	07d9      	lsls	r1, r3, #31
 8008690:	d405      	bmi.n	800869e <_vfiprintf_r+0x2a>
 8008692:	89ab      	ldrh	r3, [r5, #12]
 8008694:	059a      	lsls	r2, r3, #22
 8008696:	d402      	bmi.n	800869e <_vfiprintf_r+0x2a>
 8008698:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800869a:	f7ff fec6 	bl	800842a <__retarget_lock_acquire_recursive>
 800869e:	89ab      	ldrh	r3, [r5, #12]
 80086a0:	071b      	lsls	r3, r3, #28
 80086a2:	d501      	bpl.n	80086a8 <_vfiprintf_r+0x34>
 80086a4:	692b      	ldr	r3, [r5, #16]
 80086a6:	b99b      	cbnz	r3, 80086d0 <_vfiprintf_r+0x5c>
 80086a8:	4629      	mov	r1, r5
 80086aa:	4630      	mov	r0, r6
 80086ac:	f000 fb70 	bl	8008d90 <__swsetup_r>
 80086b0:	b170      	cbz	r0, 80086d0 <_vfiprintf_r+0x5c>
 80086b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80086b4:	07dc      	lsls	r4, r3, #31
 80086b6:	d504      	bpl.n	80086c2 <_vfiprintf_r+0x4e>
 80086b8:	f04f 30ff 	mov.w	r0, #4294967295
 80086bc:	b01d      	add	sp, #116	@ 0x74
 80086be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086c2:	89ab      	ldrh	r3, [r5, #12]
 80086c4:	0598      	lsls	r0, r3, #22
 80086c6:	d4f7      	bmi.n	80086b8 <_vfiprintf_r+0x44>
 80086c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80086ca:	f7ff feaf 	bl	800842c <__retarget_lock_release_recursive>
 80086ce:	e7f3      	b.n	80086b8 <_vfiprintf_r+0x44>
 80086d0:	2300      	movs	r3, #0
 80086d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80086d4:	2320      	movs	r3, #32
 80086d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80086da:	f8cd 800c 	str.w	r8, [sp, #12]
 80086de:	2330      	movs	r3, #48	@ 0x30
 80086e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008890 <_vfiprintf_r+0x21c>
 80086e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80086e8:	f04f 0901 	mov.w	r9, #1
 80086ec:	4623      	mov	r3, r4
 80086ee:	469a      	mov	sl, r3
 80086f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086f4:	b10a      	cbz	r2, 80086fa <_vfiprintf_r+0x86>
 80086f6:	2a25      	cmp	r2, #37	@ 0x25
 80086f8:	d1f9      	bne.n	80086ee <_vfiprintf_r+0x7a>
 80086fa:	ebba 0b04 	subs.w	fp, sl, r4
 80086fe:	d00b      	beq.n	8008718 <_vfiprintf_r+0xa4>
 8008700:	465b      	mov	r3, fp
 8008702:	4622      	mov	r2, r4
 8008704:	4629      	mov	r1, r5
 8008706:	4630      	mov	r0, r6
 8008708:	f7ff ffa1 	bl	800864e <__sfputs_r>
 800870c:	3001      	adds	r0, #1
 800870e:	f000 80a7 	beq.w	8008860 <_vfiprintf_r+0x1ec>
 8008712:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008714:	445a      	add	r2, fp
 8008716:	9209      	str	r2, [sp, #36]	@ 0x24
 8008718:	f89a 3000 	ldrb.w	r3, [sl]
 800871c:	2b00      	cmp	r3, #0
 800871e:	f000 809f 	beq.w	8008860 <_vfiprintf_r+0x1ec>
 8008722:	2300      	movs	r3, #0
 8008724:	f04f 32ff 	mov.w	r2, #4294967295
 8008728:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800872c:	f10a 0a01 	add.w	sl, sl, #1
 8008730:	9304      	str	r3, [sp, #16]
 8008732:	9307      	str	r3, [sp, #28]
 8008734:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008738:	931a      	str	r3, [sp, #104]	@ 0x68
 800873a:	4654      	mov	r4, sl
 800873c:	2205      	movs	r2, #5
 800873e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008742:	4853      	ldr	r0, [pc, #332]	@ (8008890 <_vfiprintf_r+0x21c>)
 8008744:	f7f7 fdcc 	bl	80002e0 <memchr>
 8008748:	9a04      	ldr	r2, [sp, #16]
 800874a:	b9d8      	cbnz	r0, 8008784 <_vfiprintf_r+0x110>
 800874c:	06d1      	lsls	r1, r2, #27
 800874e:	bf44      	itt	mi
 8008750:	2320      	movmi	r3, #32
 8008752:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008756:	0713      	lsls	r3, r2, #28
 8008758:	bf44      	itt	mi
 800875a:	232b      	movmi	r3, #43	@ 0x2b
 800875c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008760:	f89a 3000 	ldrb.w	r3, [sl]
 8008764:	2b2a      	cmp	r3, #42	@ 0x2a
 8008766:	d015      	beq.n	8008794 <_vfiprintf_r+0x120>
 8008768:	9a07      	ldr	r2, [sp, #28]
 800876a:	4654      	mov	r4, sl
 800876c:	2000      	movs	r0, #0
 800876e:	f04f 0c0a 	mov.w	ip, #10
 8008772:	4621      	mov	r1, r4
 8008774:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008778:	3b30      	subs	r3, #48	@ 0x30
 800877a:	2b09      	cmp	r3, #9
 800877c:	d94b      	bls.n	8008816 <_vfiprintf_r+0x1a2>
 800877e:	b1b0      	cbz	r0, 80087ae <_vfiprintf_r+0x13a>
 8008780:	9207      	str	r2, [sp, #28]
 8008782:	e014      	b.n	80087ae <_vfiprintf_r+0x13a>
 8008784:	eba0 0308 	sub.w	r3, r0, r8
 8008788:	fa09 f303 	lsl.w	r3, r9, r3
 800878c:	4313      	orrs	r3, r2
 800878e:	9304      	str	r3, [sp, #16]
 8008790:	46a2      	mov	sl, r4
 8008792:	e7d2      	b.n	800873a <_vfiprintf_r+0xc6>
 8008794:	9b03      	ldr	r3, [sp, #12]
 8008796:	1d19      	adds	r1, r3, #4
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	9103      	str	r1, [sp, #12]
 800879c:	2b00      	cmp	r3, #0
 800879e:	bfbb      	ittet	lt
 80087a0:	425b      	neglt	r3, r3
 80087a2:	f042 0202 	orrlt.w	r2, r2, #2
 80087a6:	9307      	strge	r3, [sp, #28]
 80087a8:	9307      	strlt	r3, [sp, #28]
 80087aa:	bfb8      	it	lt
 80087ac:	9204      	strlt	r2, [sp, #16]
 80087ae:	7823      	ldrb	r3, [r4, #0]
 80087b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80087b2:	d10a      	bne.n	80087ca <_vfiprintf_r+0x156>
 80087b4:	7863      	ldrb	r3, [r4, #1]
 80087b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80087b8:	d132      	bne.n	8008820 <_vfiprintf_r+0x1ac>
 80087ba:	9b03      	ldr	r3, [sp, #12]
 80087bc:	1d1a      	adds	r2, r3, #4
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	9203      	str	r2, [sp, #12]
 80087c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80087c6:	3402      	adds	r4, #2
 80087c8:	9305      	str	r3, [sp, #20]
 80087ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80088a0 <_vfiprintf_r+0x22c>
 80087ce:	7821      	ldrb	r1, [r4, #0]
 80087d0:	2203      	movs	r2, #3
 80087d2:	4650      	mov	r0, sl
 80087d4:	f7f7 fd84 	bl	80002e0 <memchr>
 80087d8:	b138      	cbz	r0, 80087ea <_vfiprintf_r+0x176>
 80087da:	9b04      	ldr	r3, [sp, #16]
 80087dc:	eba0 000a 	sub.w	r0, r0, sl
 80087e0:	2240      	movs	r2, #64	@ 0x40
 80087e2:	4082      	lsls	r2, r0
 80087e4:	4313      	orrs	r3, r2
 80087e6:	3401      	adds	r4, #1
 80087e8:	9304      	str	r3, [sp, #16]
 80087ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087ee:	4829      	ldr	r0, [pc, #164]	@ (8008894 <_vfiprintf_r+0x220>)
 80087f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80087f4:	2206      	movs	r2, #6
 80087f6:	f7f7 fd73 	bl	80002e0 <memchr>
 80087fa:	2800      	cmp	r0, #0
 80087fc:	d03f      	beq.n	800887e <_vfiprintf_r+0x20a>
 80087fe:	4b26      	ldr	r3, [pc, #152]	@ (8008898 <_vfiprintf_r+0x224>)
 8008800:	bb1b      	cbnz	r3, 800884a <_vfiprintf_r+0x1d6>
 8008802:	9b03      	ldr	r3, [sp, #12]
 8008804:	3307      	adds	r3, #7
 8008806:	f023 0307 	bic.w	r3, r3, #7
 800880a:	3308      	adds	r3, #8
 800880c:	9303      	str	r3, [sp, #12]
 800880e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008810:	443b      	add	r3, r7
 8008812:	9309      	str	r3, [sp, #36]	@ 0x24
 8008814:	e76a      	b.n	80086ec <_vfiprintf_r+0x78>
 8008816:	fb0c 3202 	mla	r2, ip, r2, r3
 800881a:	460c      	mov	r4, r1
 800881c:	2001      	movs	r0, #1
 800881e:	e7a8      	b.n	8008772 <_vfiprintf_r+0xfe>
 8008820:	2300      	movs	r3, #0
 8008822:	3401      	adds	r4, #1
 8008824:	9305      	str	r3, [sp, #20]
 8008826:	4619      	mov	r1, r3
 8008828:	f04f 0c0a 	mov.w	ip, #10
 800882c:	4620      	mov	r0, r4
 800882e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008832:	3a30      	subs	r2, #48	@ 0x30
 8008834:	2a09      	cmp	r2, #9
 8008836:	d903      	bls.n	8008840 <_vfiprintf_r+0x1cc>
 8008838:	2b00      	cmp	r3, #0
 800883a:	d0c6      	beq.n	80087ca <_vfiprintf_r+0x156>
 800883c:	9105      	str	r1, [sp, #20]
 800883e:	e7c4      	b.n	80087ca <_vfiprintf_r+0x156>
 8008840:	fb0c 2101 	mla	r1, ip, r1, r2
 8008844:	4604      	mov	r4, r0
 8008846:	2301      	movs	r3, #1
 8008848:	e7f0      	b.n	800882c <_vfiprintf_r+0x1b8>
 800884a:	ab03      	add	r3, sp, #12
 800884c:	9300      	str	r3, [sp, #0]
 800884e:	462a      	mov	r2, r5
 8008850:	4b12      	ldr	r3, [pc, #72]	@ (800889c <_vfiprintf_r+0x228>)
 8008852:	a904      	add	r1, sp, #16
 8008854:	4630      	mov	r0, r6
 8008856:	f3af 8000 	nop.w
 800885a:	4607      	mov	r7, r0
 800885c:	1c78      	adds	r0, r7, #1
 800885e:	d1d6      	bne.n	800880e <_vfiprintf_r+0x19a>
 8008860:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008862:	07d9      	lsls	r1, r3, #31
 8008864:	d405      	bmi.n	8008872 <_vfiprintf_r+0x1fe>
 8008866:	89ab      	ldrh	r3, [r5, #12]
 8008868:	059a      	lsls	r2, r3, #22
 800886a:	d402      	bmi.n	8008872 <_vfiprintf_r+0x1fe>
 800886c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800886e:	f7ff fddd 	bl	800842c <__retarget_lock_release_recursive>
 8008872:	89ab      	ldrh	r3, [r5, #12]
 8008874:	065b      	lsls	r3, r3, #25
 8008876:	f53f af1f 	bmi.w	80086b8 <_vfiprintf_r+0x44>
 800887a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800887c:	e71e      	b.n	80086bc <_vfiprintf_r+0x48>
 800887e:	ab03      	add	r3, sp, #12
 8008880:	9300      	str	r3, [sp, #0]
 8008882:	462a      	mov	r2, r5
 8008884:	4b05      	ldr	r3, [pc, #20]	@ (800889c <_vfiprintf_r+0x228>)
 8008886:	a904      	add	r1, sp, #16
 8008888:	4630      	mov	r0, r6
 800888a:	f000 f879 	bl	8008980 <_printf_i>
 800888e:	e7e4      	b.n	800885a <_vfiprintf_r+0x1e6>
 8008890:	0800b030 	.word	0x0800b030
 8008894:	0800b03a 	.word	0x0800b03a
 8008898:	00000000 	.word	0x00000000
 800889c:	0800864f 	.word	0x0800864f
 80088a0:	0800b036 	.word	0x0800b036

080088a4 <_printf_common>:
 80088a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088a8:	4616      	mov	r6, r2
 80088aa:	4698      	mov	r8, r3
 80088ac:	688a      	ldr	r2, [r1, #8]
 80088ae:	690b      	ldr	r3, [r1, #16]
 80088b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80088b4:	4293      	cmp	r3, r2
 80088b6:	bfb8      	it	lt
 80088b8:	4613      	movlt	r3, r2
 80088ba:	6033      	str	r3, [r6, #0]
 80088bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80088c0:	4607      	mov	r7, r0
 80088c2:	460c      	mov	r4, r1
 80088c4:	b10a      	cbz	r2, 80088ca <_printf_common+0x26>
 80088c6:	3301      	adds	r3, #1
 80088c8:	6033      	str	r3, [r6, #0]
 80088ca:	6823      	ldr	r3, [r4, #0]
 80088cc:	0699      	lsls	r1, r3, #26
 80088ce:	bf42      	ittt	mi
 80088d0:	6833      	ldrmi	r3, [r6, #0]
 80088d2:	3302      	addmi	r3, #2
 80088d4:	6033      	strmi	r3, [r6, #0]
 80088d6:	6825      	ldr	r5, [r4, #0]
 80088d8:	f015 0506 	ands.w	r5, r5, #6
 80088dc:	d106      	bne.n	80088ec <_printf_common+0x48>
 80088de:	f104 0a19 	add.w	sl, r4, #25
 80088e2:	68e3      	ldr	r3, [r4, #12]
 80088e4:	6832      	ldr	r2, [r6, #0]
 80088e6:	1a9b      	subs	r3, r3, r2
 80088e8:	42ab      	cmp	r3, r5
 80088ea:	dc26      	bgt.n	800893a <_printf_common+0x96>
 80088ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80088f0:	6822      	ldr	r2, [r4, #0]
 80088f2:	3b00      	subs	r3, #0
 80088f4:	bf18      	it	ne
 80088f6:	2301      	movne	r3, #1
 80088f8:	0692      	lsls	r2, r2, #26
 80088fa:	d42b      	bmi.n	8008954 <_printf_common+0xb0>
 80088fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008900:	4641      	mov	r1, r8
 8008902:	4638      	mov	r0, r7
 8008904:	47c8      	blx	r9
 8008906:	3001      	adds	r0, #1
 8008908:	d01e      	beq.n	8008948 <_printf_common+0xa4>
 800890a:	6823      	ldr	r3, [r4, #0]
 800890c:	6922      	ldr	r2, [r4, #16]
 800890e:	f003 0306 	and.w	r3, r3, #6
 8008912:	2b04      	cmp	r3, #4
 8008914:	bf02      	ittt	eq
 8008916:	68e5      	ldreq	r5, [r4, #12]
 8008918:	6833      	ldreq	r3, [r6, #0]
 800891a:	1aed      	subeq	r5, r5, r3
 800891c:	68a3      	ldr	r3, [r4, #8]
 800891e:	bf0c      	ite	eq
 8008920:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008924:	2500      	movne	r5, #0
 8008926:	4293      	cmp	r3, r2
 8008928:	bfc4      	itt	gt
 800892a:	1a9b      	subgt	r3, r3, r2
 800892c:	18ed      	addgt	r5, r5, r3
 800892e:	2600      	movs	r6, #0
 8008930:	341a      	adds	r4, #26
 8008932:	42b5      	cmp	r5, r6
 8008934:	d11a      	bne.n	800896c <_printf_common+0xc8>
 8008936:	2000      	movs	r0, #0
 8008938:	e008      	b.n	800894c <_printf_common+0xa8>
 800893a:	2301      	movs	r3, #1
 800893c:	4652      	mov	r2, sl
 800893e:	4641      	mov	r1, r8
 8008940:	4638      	mov	r0, r7
 8008942:	47c8      	blx	r9
 8008944:	3001      	adds	r0, #1
 8008946:	d103      	bne.n	8008950 <_printf_common+0xac>
 8008948:	f04f 30ff 	mov.w	r0, #4294967295
 800894c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008950:	3501      	adds	r5, #1
 8008952:	e7c6      	b.n	80088e2 <_printf_common+0x3e>
 8008954:	18e1      	adds	r1, r4, r3
 8008956:	1c5a      	adds	r2, r3, #1
 8008958:	2030      	movs	r0, #48	@ 0x30
 800895a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800895e:	4422      	add	r2, r4
 8008960:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008964:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008968:	3302      	adds	r3, #2
 800896a:	e7c7      	b.n	80088fc <_printf_common+0x58>
 800896c:	2301      	movs	r3, #1
 800896e:	4622      	mov	r2, r4
 8008970:	4641      	mov	r1, r8
 8008972:	4638      	mov	r0, r7
 8008974:	47c8      	blx	r9
 8008976:	3001      	adds	r0, #1
 8008978:	d0e6      	beq.n	8008948 <_printf_common+0xa4>
 800897a:	3601      	adds	r6, #1
 800897c:	e7d9      	b.n	8008932 <_printf_common+0x8e>
	...

08008980 <_printf_i>:
 8008980:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008984:	7e0f      	ldrb	r7, [r1, #24]
 8008986:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008988:	2f78      	cmp	r7, #120	@ 0x78
 800898a:	4691      	mov	r9, r2
 800898c:	4680      	mov	r8, r0
 800898e:	460c      	mov	r4, r1
 8008990:	469a      	mov	sl, r3
 8008992:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008996:	d807      	bhi.n	80089a8 <_printf_i+0x28>
 8008998:	2f62      	cmp	r7, #98	@ 0x62
 800899a:	d80a      	bhi.n	80089b2 <_printf_i+0x32>
 800899c:	2f00      	cmp	r7, #0
 800899e:	f000 80d1 	beq.w	8008b44 <_printf_i+0x1c4>
 80089a2:	2f58      	cmp	r7, #88	@ 0x58
 80089a4:	f000 80b8 	beq.w	8008b18 <_printf_i+0x198>
 80089a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80089ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80089b0:	e03a      	b.n	8008a28 <_printf_i+0xa8>
 80089b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80089b6:	2b15      	cmp	r3, #21
 80089b8:	d8f6      	bhi.n	80089a8 <_printf_i+0x28>
 80089ba:	a101      	add	r1, pc, #4	@ (adr r1, 80089c0 <_printf_i+0x40>)
 80089bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80089c0:	08008a19 	.word	0x08008a19
 80089c4:	08008a2d 	.word	0x08008a2d
 80089c8:	080089a9 	.word	0x080089a9
 80089cc:	080089a9 	.word	0x080089a9
 80089d0:	080089a9 	.word	0x080089a9
 80089d4:	080089a9 	.word	0x080089a9
 80089d8:	08008a2d 	.word	0x08008a2d
 80089dc:	080089a9 	.word	0x080089a9
 80089e0:	080089a9 	.word	0x080089a9
 80089e4:	080089a9 	.word	0x080089a9
 80089e8:	080089a9 	.word	0x080089a9
 80089ec:	08008b2b 	.word	0x08008b2b
 80089f0:	08008a57 	.word	0x08008a57
 80089f4:	08008ae5 	.word	0x08008ae5
 80089f8:	080089a9 	.word	0x080089a9
 80089fc:	080089a9 	.word	0x080089a9
 8008a00:	08008b4d 	.word	0x08008b4d
 8008a04:	080089a9 	.word	0x080089a9
 8008a08:	08008a57 	.word	0x08008a57
 8008a0c:	080089a9 	.word	0x080089a9
 8008a10:	080089a9 	.word	0x080089a9
 8008a14:	08008aed 	.word	0x08008aed
 8008a18:	6833      	ldr	r3, [r6, #0]
 8008a1a:	1d1a      	adds	r2, r3, #4
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	6032      	str	r2, [r6, #0]
 8008a20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e09c      	b.n	8008b66 <_printf_i+0x1e6>
 8008a2c:	6833      	ldr	r3, [r6, #0]
 8008a2e:	6820      	ldr	r0, [r4, #0]
 8008a30:	1d19      	adds	r1, r3, #4
 8008a32:	6031      	str	r1, [r6, #0]
 8008a34:	0606      	lsls	r6, r0, #24
 8008a36:	d501      	bpl.n	8008a3c <_printf_i+0xbc>
 8008a38:	681d      	ldr	r5, [r3, #0]
 8008a3a:	e003      	b.n	8008a44 <_printf_i+0xc4>
 8008a3c:	0645      	lsls	r5, r0, #25
 8008a3e:	d5fb      	bpl.n	8008a38 <_printf_i+0xb8>
 8008a40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008a44:	2d00      	cmp	r5, #0
 8008a46:	da03      	bge.n	8008a50 <_printf_i+0xd0>
 8008a48:	232d      	movs	r3, #45	@ 0x2d
 8008a4a:	426d      	negs	r5, r5
 8008a4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a50:	4858      	ldr	r0, [pc, #352]	@ (8008bb4 <_printf_i+0x234>)
 8008a52:	230a      	movs	r3, #10
 8008a54:	e011      	b.n	8008a7a <_printf_i+0xfa>
 8008a56:	6821      	ldr	r1, [r4, #0]
 8008a58:	6833      	ldr	r3, [r6, #0]
 8008a5a:	0608      	lsls	r0, r1, #24
 8008a5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008a60:	d402      	bmi.n	8008a68 <_printf_i+0xe8>
 8008a62:	0649      	lsls	r1, r1, #25
 8008a64:	bf48      	it	mi
 8008a66:	b2ad      	uxthmi	r5, r5
 8008a68:	2f6f      	cmp	r7, #111	@ 0x6f
 8008a6a:	4852      	ldr	r0, [pc, #328]	@ (8008bb4 <_printf_i+0x234>)
 8008a6c:	6033      	str	r3, [r6, #0]
 8008a6e:	bf14      	ite	ne
 8008a70:	230a      	movne	r3, #10
 8008a72:	2308      	moveq	r3, #8
 8008a74:	2100      	movs	r1, #0
 8008a76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008a7a:	6866      	ldr	r6, [r4, #4]
 8008a7c:	60a6      	str	r6, [r4, #8]
 8008a7e:	2e00      	cmp	r6, #0
 8008a80:	db05      	blt.n	8008a8e <_printf_i+0x10e>
 8008a82:	6821      	ldr	r1, [r4, #0]
 8008a84:	432e      	orrs	r6, r5
 8008a86:	f021 0104 	bic.w	r1, r1, #4
 8008a8a:	6021      	str	r1, [r4, #0]
 8008a8c:	d04b      	beq.n	8008b26 <_printf_i+0x1a6>
 8008a8e:	4616      	mov	r6, r2
 8008a90:	fbb5 f1f3 	udiv	r1, r5, r3
 8008a94:	fb03 5711 	mls	r7, r3, r1, r5
 8008a98:	5dc7      	ldrb	r7, [r0, r7]
 8008a9a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008a9e:	462f      	mov	r7, r5
 8008aa0:	42bb      	cmp	r3, r7
 8008aa2:	460d      	mov	r5, r1
 8008aa4:	d9f4      	bls.n	8008a90 <_printf_i+0x110>
 8008aa6:	2b08      	cmp	r3, #8
 8008aa8:	d10b      	bne.n	8008ac2 <_printf_i+0x142>
 8008aaa:	6823      	ldr	r3, [r4, #0]
 8008aac:	07df      	lsls	r7, r3, #31
 8008aae:	d508      	bpl.n	8008ac2 <_printf_i+0x142>
 8008ab0:	6923      	ldr	r3, [r4, #16]
 8008ab2:	6861      	ldr	r1, [r4, #4]
 8008ab4:	4299      	cmp	r1, r3
 8008ab6:	bfde      	ittt	le
 8008ab8:	2330      	movle	r3, #48	@ 0x30
 8008aba:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008abe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008ac2:	1b92      	subs	r2, r2, r6
 8008ac4:	6122      	str	r2, [r4, #16]
 8008ac6:	f8cd a000 	str.w	sl, [sp]
 8008aca:	464b      	mov	r3, r9
 8008acc:	aa03      	add	r2, sp, #12
 8008ace:	4621      	mov	r1, r4
 8008ad0:	4640      	mov	r0, r8
 8008ad2:	f7ff fee7 	bl	80088a4 <_printf_common>
 8008ad6:	3001      	adds	r0, #1
 8008ad8:	d14a      	bne.n	8008b70 <_printf_i+0x1f0>
 8008ada:	f04f 30ff 	mov.w	r0, #4294967295
 8008ade:	b004      	add	sp, #16
 8008ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ae4:	6823      	ldr	r3, [r4, #0]
 8008ae6:	f043 0320 	orr.w	r3, r3, #32
 8008aea:	6023      	str	r3, [r4, #0]
 8008aec:	4832      	ldr	r0, [pc, #200]	@ (8008bb8 <_printf_i+0x238>)
 8008aee:	2778      	movs	r7, #120	@ 0x78
 8008af0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008af4:	6823      	ldr	r3, [r4, #0]
 8008af6:	6831      	ldr	r1, [r6, #0]
 8008af8:	061f      	lsls	r7, r3, #24
 8008afa:	f851 5b04 	ldr.w	r5, [r1], #4
 8008afe:	d402      	bmi.n	8008b06 <_printf_i+0x186>
 8008b00:	065f      	lsls	r7, r3, #25
 8008b02:	bf48      	it	mi
 8008b04:	b2ad      	uxthmi	r5, r5
 8008b06:	6031      	str	r1, [r6, #0]
 8008b08:	07d9      	lsls	r1, r3, #31
 8008b0a:	bf44      	itt	mi
 8008b0c:	f043 0320 	orrmi.w	r3, r3, #32
 8008b10:	6023      	strmi	r3, [r4, #0]
 8008b12:	b11d      	cbz	r5, 8008b1c <_printf_i+0x19c>
 8008b14:	2310      	movs	r3, #16
 8008b16:	e7ad      	b.n	8008a74 <_printf_i+0xf4>
 8008b18:	4826      	ldr	r0, [pc, #152]	@ (8008bb4 <_printf_i+0x234>)
 8008b1a:	e7e9      	b.n	8008af0 <_printf_i+0x170>
 8008b1c:	6823      	ldr	r3, [r4, #0]
 8008b1e:	f023 0320 	bic.w	r3, r3, #32
 8008b22:	6023      	str	r3, [r4, #0]
 8008b24:	e7f6      	b.n	8008b14 <_printf_i+0x194>
 8008b26:	4616      	mov	r6, r2
 8008b28:	e7bd      	b.n	8008aa6 <_printf_i+0x126>
 8008b2a:	6833      	ldr	r3, [r6, #0]
 8008b2c:	6825      	ldr	r5, [r4, #0]
 8008b2e:	6961      	ldr	r1, [r4, #20]
 8008b30:	1d18      	adds	r0, r3, #4
 8008b32:	6030      	str	r0, [r6, #0]
 8008b34:	062e      	lsls	r6, r5, #24
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	d501      	bpl.n	8008b3e <_printf_i+0x1be>
 8008b3a:	6019      	str	r1, [r3, #0]
 8008b3c:	e002      	b.n	8008b44 <_printf_i+0x1c4>
 8008b3e:	0668      	lsls	r0, r5, #25
 8008b40:	d5fb      	bpl.n	8008b3a <_printf_i+0x1ba>
 8008b42:	8019      	strh	r1, [r3, #0]
 8008b44:	2300      	movs	r3, #0
 8008b46:	6123      	str	r3, [r4, #16]
 8008b48:	4616      	mov	r6, r2
 8008b4a:	e7bc      	b.n	8008ac6 <_printf_i+0x146>
 8008b4c:	6833      	ldr	r3, [r6, #0]
 8008b4e:	1d1a      	adds	r2, r3, #4
 8008b50:	6032      	str	r2, [r6, #0]
 8008b52:	681e      	ldr	r6, [r3, #0]
 8008b54:	6862      	ldr	r2, [r4, #4]
 8008b56:	2100      	movs	r1, #0
 8008b58:	4630      	mov	r0, r6
 8008b5a:	f7f7 fbc1 	bl	80002e0 <memchr>
 8008b5e:	b108      	cbz	r0, 8008b64 <_printf_i+0x1e4>
 8008b60:	1b80      	subs	r0, r0, r6
 8008b62:	6060      	str	r0, [r4, #4]
 8008b64:	6863      	ldr	r3, [r4, #4]
 8008b66:	6123      	str	r3, [r4, #16]
 8008b68:	2300      	movs	r3, #0
 8008b6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b6e:	e7aa      	b.n	8008ac6 <_printf_i+0x146>
 8008b70:	6923      	ldr	r3, [r4, #16]
 8008b72:	4632      	mov	r2, r6
 8008b74:	4649      	mov	r1, r9
 8008b76:	4640      	mov	r0, r8
 8008b78:	47d0      	blx	sl
 8008b7a:	3001      	adds	r0, #1
 8008b7c:	d0ad      	beq.n	8008ada <_printf_i+0x15a>
 8008b7e:	6823      	ldr	r3, [r4, #0]
 8008b80:	079b      	lsls	r3, r3, #30
 8008b82:	d413      	bmi.n	8008bac <_printf_i+0x22c>
 8008b84:	68e0      	ldr	r0, [r4, #12]
 8008b86:	9b03      	ldr	r3, [sp, #12]
 8008b88:	4298      	cmp	r0, r3
 8008b8a:	bfb8      	it	lt
 8008b8c:	4618      	movlt	r0, r3
 8008b8e:	e7a6      	b.n	8008ade <_printf_i+0x15e>
 8008b90:	2301      	movs	r3, #1
 8008b92:	4632      	mov	r2, r6
 8008b94:	4649      	mov	r1, r9
 8008b96:	4640      	mov	r0, r8
 8008b98:	47d0      	blx	sl
 8008b9a:	3001      	adds	r0, #1
 8008b9c:	d09d      	beq.n	8008ada <_printf_i+0x15a>
 8008b9e:	3501      	adds	r5, #1
 8008ba0:	68e3      	ldr	r3, [r4, #12]
 8008ba2:	9903      	ldr	r1, [sp, #12]
 8008ba4:	1a5b      	subs	r3, r3, r1
 8008ba6:	42ab      	cmp	r3, r5
 8008ba8:	dcf2      	bgt.n	8008b90 <_printf_i+0x210>
 8008baa:	e7eb      	b.n	8008b84 <_printf_i+0x204>
 8008bac:	2500      	movs	r5, #0
 8008bae:	f104 0619 	add.w	r6, r4, #25
 8008bb2:	e7f5      	b.n	8008ba0 <_printf_i+0x220>
 8008bb4:	0800b041 	.word	0x0800b041
 8008bb8:	0800b052 	.word	0x0800b052

08008bbc <__sflush_r>:
 8008bbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bc4:	0716      	lsls	r6, r2, #28
 8008bc6:	4605      	mov	r5, r0
 8008bc8:	460c      	mov	r4, r1
 8008bca:	d454      	bmi.n	8008c76 <__sflush_r+0xba>
 8008bcc:	684b      	ldr	r3, [r1, #4]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	dc02      	bgt.n	8008bd8 <__sflush_r+0x1c>
 8008bd2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	dd48      	ble.n	8008c6a <__sflush_r+0xae>
 8008bd8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008bda:	2e00      	cmp	r6, #0
 8008bdc:	d045      	beq.n	8008c6a <__sflush_r+0xae>
 8008bde:	2300      	movs	r3, #0
 8008be0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008be4:	682f      	ldr	r7, [r5, #0]
 8008be6:	6a21      	ldr	r1, [r4, #32]
 8008be8:	602b      	str	r3, [r5, #0]
 8008bea:	d030      	beq.n	8008c4e <__sflush_r+0x92>
 8008bec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008bee:	89a3      	ldrh	r3, [r4, #12]
 8008bf0:	0759      	lsls	r1, r3, #29
 8008bf2:	d505      	bpl.n	8008c00 <__sflush_r+0x44>
 8008bf4:	6863      	ldr	r3, [r4, #4]
 8008bf6:	1ad2      	subs	r2, r2, r3
 8008bf8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008bfa:	b10b      	cbz	r3, 8008c00 <__sflush_r+0x44>
 8008bfc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008bfe:	1ad2      	subs	r2, r2, r3
 8008c00:	2300      	movs	r3, #0
 8008c02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c04:	6a21      	ldr	r1, [r4, #32]
 8008c06:	4628      	mov	r0, r5
 8008c08:	47b0      	blx	r6
 8008c0a:	1c43      	adds	r3, r0, #1
 8008c0c:	89a3      	ldrh	r3, [r4, #12]
 8008c0e:	d106      	bne.n	8008c1e <__sflush_r+0x62>
 8008c10:	6829      	ldr	r1, [r5, #0]
 8008c12:	291d      	cmp	r1, #29
 8008c14:	d82b      	bhi.n	8008c6e <__sflush_r+0xb2>
 8008c16:	4a2a      	ldr	r2, [pc, #168]	@ (8008cc0 <__sflush_r+0x104>)
 8008c18:	40ca      	lsrs	r2, r1
 8008c1a:	07d6      	lsls	r6, r2, #31
 8008c1c:	d527      	bpl.n	8008c6e <__sflush_r+0xb2>
 8008c1e:	2200      	movs	r2, #0
 8008c20:	6062      	str	r2, [r4, #4]
 8008c22:	04d9      	lsls	r1, r3, #19
 8008c24:	6922      	ldr	r2, [r4, #16]
 8008c26:	6022      	str	r2, [r4, #0]
 8008c28:	d504      	bpl.n	8008c34 <__sflush_r+0x78>
 8008c2a:	1c42      	adds	r2, r0, #1
 8008c2c:	d101      	bne.n	8008c32 <__sflush_r+0x76>
 8008c2e:	682b      	ldr	r3, [r5, #0]
 8008c30:	b903      	cbnz	r3, 8008c34 <__sflush_r+0x78>
 8008c32:	6560      	str	r0, [r4, #84]	@ 0x54
 8008c34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c36:	602f      	str	r7, [r5, #0]
 8008c38:	b1b9      	cbz	r1, 8008c6a <__sflush_r+0xae>
 8008c3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c3e:	4299      	cmp	r1, r3
 8008c40:	d002      	beq.n	8008c48 <__sflush_r+0x8c>
 8008c42:	4628      	mov	r0, r5
 8008c44:	f7ff fbf4 	bl	8008430 <_free_r>
 8008c48:	2300      	movs	r3, #0
 8008c4a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c4c:	e00d      	b.n	8008c6a <__sflush_r+0xae>
 8008c4e:	2301      	movs	r3, #1
 8008c50:	4628      	mov	r0, r5
 8008c52:	47b0      	blx	r6
 8008c54:	4602      	mov	r2, r0
 8008c56:	1c50      	adds	r0, r2, #1
 8008c58:	d1c9      	bne.n	8008bee <__sflush_r+0x32>
 8008c5a:	682b      	ldr	r3, [r5, #0]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d0c6      	beq.n	8008bee <__sflush_r+0x32>
 8008c60:	2b1d      	cmp	r3, #29
 8008c62:	d001      	beq.n	8008c68 <__sflush_r+0xac>
 8008c64:	2b16      	cmp	r3, #22
 8008c66:	d11e      	bne.n	8008ca6 <__sflush_r+0xea>
 8008c68:	602f      	str	r7, [r5, #0]
 8008c6a:	2000      	movs	r0, #0
 8008c6c:	e022      	b.n	8008cb4 <__sflush_r+0xf8>
 8008c6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c72:	b21b      	sxth	r3, r3
 8008c74:	e01b      	b.n	8008cae <__sflush_r+0xf2>
 8008c76:	690f      	ldr	r7, [r1, #16]
 8008c78:	2f00      	cmp	r7, #0
 8008c7a:	d0f6      	beq.n	8008c6a <__sflush_r+0xae>
 8008c7c:	0793      	lsls	r3, r2, #30
 8008c7e:	680e      	ldr	r6, [r1, #0]
 8008c80:	bf08      	it	eq
 8008c82:	694b      	ldreq	r3, [r1, #20]
 8008c84:	600f      	str	r7, [r1, #0]
 8008c86:	bf18      	it	ne
 8008c88:	2300      	movne	r3, #0
 8008c8a:	eba6 0807 	sub.w	r8, r6, r7
 8008c8e:	608b      	str	r3, [r1, #8]
 8008c90:	f1b8 0f00 	cmp.w	r8, #0
 8008c94:	dde9      	ble.n	8008c6a <__sflush_r+0xae>
 8008c96:	6a21      	ldr	r1, [r4, #32]
 8008c98:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008c9a:	4643      	mov	r3, r8
 8008c9c:	463a      	mov	r2, r7
 8008c9e:	4628      	mov	r0, r5
 8008ca0:	47b0      	blx	r6
 8008ca2:	2800      	cmp	r0, #0
 8008ca4:	dc08      	bgt.n	8008cb8 <__sflush_r+0xfc>
 8008ca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008caa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cae:	81a3      	strh	r3, [r4, #12]
 8008cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cb8:	4407      	add	r7, r0
 8008cba:	eba8 0800 	sub.w	r8, r8, r0
 8008cbe:	e7e7      	b.n	8008c90 <__sflush_r+0xd4>
 8008cc0:	20400001 	.word	0x20400001

08008cc4 <_fflush_r>:
 8008cc4:	b538      	push	{r3, r4, r5, lr}
 8008cc6:	690b      	ldr	r3, [r1, #16]
 8008cc8:	4605      	mov	r5, r0
 8008cca:	460c      	mov	r4, r1
 8008ccc:	b913      	cbnz	r3, 8008cd4 <_fflush_r+0x10>
 8008cce:	2500      	movs	r5, #0
 8008cd0:	4628      	mov	r0, r5
 8008cd2:	bd38      	pop	{r3, r4, r5, pc}
 8008cd4:	b118      	cbz	r0, 8008cde <_fflush_r+0x1a>
 8008cd6:	6a03      	ldr	r3, [r0, #32]
 8008cd8:	b90b      	cbnz	r3, 8008cde <_fflush_r+0x1a>
 8008cda:	f7ff faa1 	bl	8008220 <__sinit>
 8008cde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d0f3      	beq.n	8008cce <_fflush_r+0xa>
 8008ce6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008ce8:	07d0      	lsls	r0, r2, #31
 8008cea:	d404      	bmi.n	8008cf6 <_fflush_r+0x32>
 8008cec:	0599      	lsls	r1, r3, #22
 8008cee:	d402      	bmi.n	8008cf6 <_fflush_r+0x32>
 8008cf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008cf2:	f7ff fb9a 	bl	800842a <__retarget_lock_acquire_recursive>
 8008cf6:	4628      	mov	r0, r5
 8008cf8:	4621      	mov	r1, r4
 8008cfa:	f7ff ff5f 	bl	8008bbc <__sflush_r>
 8008cfe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d00:	07da      	lsls	r2, r3, #31
 8008d02:	4605      	mov	r5, r0
 8008d04:	d4e4      	bmi.n	8008cd0 <_fflush_r+0xc>
 8008d06:	89a3      	ldrh	r3, [r4, #12]
 8008d08:	059b      	lsls	r3, r3, #22
 8008d0a:	d4e1      	bmi.n	8008cd0 <_fflush_r+0xc>
 8008d0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d0e:	f7ff fb8d 	bl	800842c <__retarget_lock_release_recursive>
 8008d12:	e7dd      	b.n	8008cd0 <_fflush_r+0xc>

08008d14 <__swbuf_r>:
 8008d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d16:	460e      	mov	r6, r1
 8008d18:	4614      	mov	r4, r2
 8008d1a:	4605      	mov	r5, r0
 8008d1c:	b118      	cbz	r0, 8008d26 <__swbuf_r+0x12>
 8008d1e:	6a03      	ldr	r3, [r0, #32]
 8008d20:	b90b      	cbnz	r3, 8008d26 <__swbuf_r+0x12>
 8008d22:	f7ff fa7d 	bl	8008220 <__sinit>
 8008d26:	69a3      	ldr	r3, [r4, #24]
 8008d28:	60a3      	str	r3, [r4, #8]
 8008d2a:	89a3      	ldrh	r3, [r4, #12]
 8008d2c:	071a      	lsls	r2, r3, #28
 8008d2e:	d501      	bpl.n	8008d34 <__swbuf_r+0x20>
 8008d30:	6923      	ldr	r3, [r4, #16]
 8008d32:	b943      	cbnz	r3, 8008d46 <__swbuf_r+0x32>
 8008d34:	4621      	mov	r1, r4
 8008d36:	4628      	mov	r0, r5
 8008d38:	f000 f82a 	bl	8008d90 <__swsetup_r>
 8008d3c:	b118      	cbz	r0, 8008d46 <__swbuf_r+0x32>
 8008d3e:	f04f 37ff 	mov.w	r7, #4294967295
 8008d42:	4638      	mov	r0, r7
 8008d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d46:	6823      	ldr	r3, [r4, #0]
 8008d48:	6922      	ldr	r2, [r4, #16]
 8008d4a:	1a98      	subs	r0, r3, r2
 8008d4c:	6963      	ldr	r3, [r4, #20]
 8008d4e:	b2f6      	uxtb	r6, r6
 8008d50:	4283      	cmp	r3, r0
 8008d52:	4637      	mov	r7, r6
 8008d54:	dc05      	bgt.n	8008d62 <__swbuf_r+0x4e>
 8008d56:	4621      	mov	r1, r4
 8008d58:	4628      	mov	r0, r5
 8008d5a:	f7ff ffb3 	bl	8008cc4 <_fflush_r>
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	d1ed      	bne.n	8008d3e <__swbuf_r+0x2a>
 8008d62:	68a3      	ldr	r3, [r4, #8]
 8008d64:	3b01      	subs	r3, #1
 8008d66:	60a3      	str	r3, [r4, #8]
 8008d68:	6823      	ldr	r3, [r4, #0]
 8008d6a:	1c5a      	adds	r2, r3, #1
 8008d6c:	6022      	str	r2, [r4, #0]
 8008d6e:	701e      	strb	r6, [r3, #0]
 8008d70:	6962      	ldr	r2, [r4, #20]
 8008d72:	1c43      	adds	r3, r0, #1
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d004      	beq.n	8008d82 <__swbuf_r+0x6e>
 8008d78:	89a3      	ldrh	r3, [r4, #12]
 8008d7a:	07db      	lsls	r3, r3, #31
 8008d7c:	d5e1      	bpl.n	8008d42 <__swbuf_r+0x2e>
 8008d7e:	2e0a      	cmp	r6, #10
 8008d80:	d1df      	bne.n	8008d42 <__swbuf_r+0x2e>
 8008d82:	4621      	mov	r1, r4
 8008d84:	4628      	mov	r0, r5
 8008d86:	f7ff ff9d 	bl	8008cc4 <_fflush_r>
 8008d8a:	2800      	cmp	r0, #0
 8008d8c:	d0d9      	beq.n	8008d42 <__swbuf_r+0x2e>
 8008d8e:	e7d6      	b.n	8008d3e <__swbuf_r+0x2a>

08008d90 <__swsetup_r>:
 8008d90:	b538      	push	{r3, r4, r5, lr}
 8008d92:	4b29      	ldr	r3, [pc, #164]	@ (8008e38 <__swsetup_r+0xa8>)
 8008d94:	4605      	mov	r5, r0
 8008d96:	6818      	ldr	r0, [r3, #0]
 8008d98:	460c      	mov	r4, r1
 8008d9a:	b118      	cbz	r0, 8008da4 <__swsetup_r+0x14>
 8008d9c:	6a03      	ldr	r3, [r0, #32]
 8008d9e:	b90b      	cbnz	r3, 8008da4 <__swsetup_r+0x14>
 8008da0:	f7ff fa3e 	bl	8008220 <__sinit>
 8008da4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008da8:	0719      	lsls	r1, r3, #28
 8008daa:	d422      	bmi.n	8008df2 <__swsetup_r+0x62>
 8008dac:	06da      	lsls	r2, r3, #27
 8008dae:	d407      	bmi.n	8008dc0 <__swsetup_r+0x30>
 8008db0:	2209      	movs	r2, #9
 8008db2:	602a      	str	r2, [r5, #0]
 8008db4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008db8:	81a3      	strh	r3, [r4, #12]
 8008dba:	f04f 30ff 	mov.w	r0, #4294967295
 8008dbe:	e033      	b.n	8008e28 <__swsetup_r+0x98>
 8008dc0:	0758      	lsls	r0, r3, #29
 8008dc2:	d512      	bpl.n	8008dea <__swsetup_r+0x5a>
 8008dc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008dc6:	b141      	cbz	r1, 8008dda <__swsetup_r+0x4a>
 8008dc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008dcc:	4299      	cmp	r1, r3
 8008dce:	d002      	beq.n	8008dd6 <__swsetup_r+0x46>
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	f7ff fb2d 	bl	8008430 <_free_r>
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	6363      	str	r3, [r4, #52]	@ 0x34
 8008dda:	89a3      	ldrh	r3, [r4, #12]
 8008ddc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008de0:	81a3      	strh	r3, [r4, #12]
 8008de2:	2300      	movs	r3, #0
 8008de4:	6063      	str	r3, [r4, #4]
 8008de6:	6923      	ldr	r3, [r4, #16]
 8008de8:	6023      	str	r3, [r4, #0]
 8008dea:	89a3      	ldrh	r3, [r4, #12]
 8008dec:	f043 0308 	orr.w	r3, r3, #8
 8008df0:	81a3      	strh	r3, [r4, #12]
 8008df2:	6923      	ldr	r3, [r4, #16]
 8008df4:	b94b      	cbnz	r3, 8008e0a <__swsetup_r+0x7a>
 8008df6:	89a3      	ldrh	r3, [r4, #12]
 8008df8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008dfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e00:	d003      	beq.n	8008e0a <__swsetup_r+0x7a>
 8008e02:	4621      	mov	r1, r4
 8008e04:	4628      	mov	r0, r5
 8008e06:	f000 f84f 	bl	8008ea8 <__smakebuf_r>
 8008e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e0e:	f013 0201 	ands.w	r2, r3, #1
 8008e12:	d00a      	beq.n	8008e2a <__swsetup_r+0x9a>
 8008e14:	2200      	movs	r2, #0
 8008e16:	60a2      	str	r2, [r4, #8]
 8008e18:	6962      	ldr	r2, [r4, #20]
 8008e1a:	4252      	negs	r2, r2
 8008e1c:	61a2      	str	r2, [r4, #24]
 8008e1e:	6922      	ldr	r2, [r4, #16]
 8008e20:	b942      	cbnz	r2, 8008e34 <__swsetup_r+0xa4>
 8008e22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008e26:	d1c5      	bne.n	8008db4 <__swsetup_r+0x24>
 8008e28:	bd38      	pop	{r3, r4, r5, pc}
 8008e2a:	0799      	lsls	r1, r3, #30
 8008e2c:	bf58      	it	pl
 8008e2e:	6962      	ldrpl	r2, [r4, #20]
 8008e30:	60a2      	str	r2, [r4, #8]
 8008e32:	e7f4      	b.n	8008e1e <__swsetup_r+0x8e>
 8008e34:	2000      	movs	r0, #0
 8008e36:	e7f7      	b.n	8008e28 <__swsetup_r+0x98>
 8008e38:	24000038 	.word	0x24000038

08008e3c <_sbrk_r>:
 8008e3c:	b538      	push	{r3, r4, r5, lr}
 8008e3e:	4d06      	ldr	r5, [pc, #24]	@ (8008e58 <_sbrk_r+0x1c>)
 8008e40:	2300      	movs	r3, #0
 8008e42:	4604      	mov	r4, r0
 8008e44:	4608      	mov	r0, r1
 8008e46:	602b      	str	r3, [r5, #0]
 8008e48:	f7f8 fb1a 	bl	8001480 <_sbrk>
 8008e4c:	1c43      	adds	r3, r0, #1
 8008e4e:	d102      	bne.n	8008e56 <_sbrk_r+0x1a>
 8008e50:	682b      	ldr	r3, [r5, #0]
 8008e52:	b103      	cbz	r3, 8008e56 <_sbrk_r+0x1a>
 8008e54:	6023      	str	r3, [r4, #0]
 8008e56:	bd38      	pop	{r3, r4, r5, pc}
 8008e58:	24000324 	.word	0x24000324

08008e5c <__swhatbuf_r>:
 8008e5c:	b570      	push	{r4, r5, r6, lr}
 8008e5e:	460c      	mov	r4, r1
 8008e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e64:	2900      	cmp	r1, #0
 8008e66:	b096      	sub	sp, #88	@ 0x58
 8008e68:	4615      	mov	r5, r2
 8008e6a:	461e      	mov	r6, r3
 8008e6c:	da0d      	bge.n	8008e8a <__swhatbuf_r+0x2e>
 8008e6e:	89a3      	ldrh	r3, [r4, #12]
 8008e70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008e74:	f04f 0100 	mov.w	r1, #0
 8008e78:	bf14      	ite	ne
 8008e7a:	2340      	movne	r3, #64	@ 0x40
 8008e7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008e80:	2000      	movs	r0, #0
 8008e82:	6031      	str	r1, [r6, #0]
 8008e84:	602b      	str	r3, [r5, #0]
 8008e86:	b016      	add	sp, #88	@ 0x58
 8008e88:	bd70      	pop	{r4, r5, r6, pc}
 8008e8a:	466a      	mov	r2, sp
 8008e8c:	f000 f848 	bl	8008f20 <_fstat_r>
 8008e90:	2800      	cmp	r0, #0
 8008e92:	dbec      	blt.n	8008e6e <__swhatbuf_r+0x12>
 8008e94:	9901      	ldr	r1, [sp, #4]
 8008e96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008e9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008e9e:	4259      	negs	r1, r3
 8008ea0:	4159      	adcs	r1, r3
 8008ea2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ea6:	e7eb      	b.n	8008e80 <__swhatbuf_r+0x24>

08008ea8 <__smakebuf_r>:
 8008ea8:	898b      	ldrh	r3, [r1, #12]
 8008eaa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008eac:	079d      	lsls	r5, r3, #30
 8008eae:	4606      	mov	r6, r0
 8008eb0:	460c      	mov	r4, r1
 8008eb2:	d507      	bpl.n	8008ec4 <__smakebuf_r+0x1c>
 8008eb4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008eb8:	6023      	str	r3, [r4, #0]
 8008eba:	6123      	str	r3, [r4, #16]
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	6163      	str	r3, [r4, #20]
 8008ec0:	b003      	add	sp, #12
 8008ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ec4:	ab01      	add	r3, sp, #4
 8008ec6:	466a      	mov	r2, sp
 8008ec8:	f7ff ffc8 	bl	8008e5c <__swhatbuf_r>
 8008ecc:	9f00      	ldr	r7, [sp, #0]
 8008ece:	4605      	mov	r5, r0
 8008ed0:	4639      	mov	r1, r7
 8008ed2:	4630      	mov	r0, r6
 8008ed4:	f7ff fb18 	bl	8008508 <_malloc_r>
 8008ed8:	b948      	cbnz	r0, 8008eee <__smakebuf_r+0x46>
 8008eda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ede:	059a      	lsls	r2, r3, #22
 8008ee0:	d4ee      	bmi.n	8008ec0 <__smakebuf_r+0x18>
 8008ee2:	f023 0303 	bic.w	r3, r3, #3
 8008ee6:	f043 0302 	orr.w	r3, r3, #2
 8008eea:	81a3      	strh	r3, [r4, #12]
 8008eec:	e7e2      	b.n	8008eb4 <__smakebuf_r+0xc>
 8008eee:	89a3      	ldrh	r3, [r4, #12]
 8008ef0:	6020      	str	r0, [r4, #0]
 8008ef2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ef6:	81a3      	strh	r3, [r4, #12]
 8008ef8:	9b01      	ldr	r3, [sp, #4]
 8008efa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008efe:	b15b      	cbz	r3, 8008f18 <__smakebuf_r+0x70>
 8008f00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f04:	4630      	mov	r0, r6
 8008f06:	f000 f81d 	bl	8008f44 <_isatty_r>
 8008f0a:	b128      	cbz	r0, 8008f18 <__smakebuf_r+0x70>
 8008f0c:	89a3      	ldrh	r3, [r4, #12]
 8008f0e:	f023 0303 	bic.w	r3, r3, #3
 8008f12:	f043 0301 	orr.w	r3, r3, #1
 8008f16:	81a3      	strh	r3, [r4, #12]
 8008f18:	89a3      	ldrh	r3, [r4, #12]
 8008f1a:	431d      	orrs	r5, r3
 8008f1c:	81a5      	strh	r5, [r4, #12]
 8008f1e:	e7cf      	b.n	8008ec0 <__smakebuf_r+0x18>

08008f20 <_fstat_r>:
 8008f20:	b538      	push	{r3, r4, r5, lr}
 8008f22:	4d07      	ldr	r5, [pc, #28]	@ (8008f40 <_fstat_r+0x20>)
 8008f24:	2300      	movs	r3, #0
 8008f26:	4604      	mov	r4, r0
 8008f28:	4608      	mov	r0, r1
 8008f2a:	4611      	mov	r1, r2
 8008f2c:	602b      	str	r3, [r5, #0]
 8008f2e:	f7f8 fa7f 	bl	8001430 <_fstat>
 8008f32:	1c43      	adds	r3, r0, #1
 8008f34:	d102      	bne.n	8008f3c <_fstat_r+0x1c>
 8008f36:	682b      	ldr	r3, [r5, #0]
 8008f38:	b103      	cbz	r3, 8008f3c <_fstat_r+0x1c>
 8008f3a:	6023      	str	r3, [r4, #0]
 8008f3c:	bd38      	pop	{r3, r4, r5, pc}
 8008f3e:	bf00      	nop
 8008f40:	24000324 	.word	0x24000324

08008f44 <_isatty_r>:
 8008f44:	b538      	push	{r3, r4, r5, lr}
 8008f46:	4d06      	ldr	r5, [pc, #24]	@ (8008f60 <_isatty_r+0x1c>)
 8008f48:	2300      	movs	r3, #0
 8008f4a:	4604      	mov	r4, r0
 8008f4c:	4608      	mov	r0, r1
 8008f4e:	602b      	str	r3, [r5, #0]
 8008f50:	f7f8 fa7e 	bl	8001450 <_isatty>
 8008f54:	1c43      	adds	r3, r0, #1
 8008f56:	d102      	bne.n	8008f5e <_isatty_r+0x1a>
 8008f58:	682b      	ldr	r3, [r5, #0]
 8008f5a:	b103      	cbz	r3, 8008f5e <_isatty_r+0x1a>
 8008f5c:	6023      	str	r3, [r4, #0]
 8008f5e:	bd38      	pop	{r3, r4, r5, pc}
 8008f60:	24000324 	.word	0x24000324

08008f64 <_init>:
 8008f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f66:	bf00      	nop
 8008f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f6a:	bc08      	pop	{r3}
 8008f6c:	469e      	mov	lr, r3
 8008f6e:	4770      	bx	lr

08008f70 <_fini>:
 8008f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f72:	bf00      	nop
 8008f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f76:	bc08      	pop	{r3}
 8008f78:	469e      	mov	lr, r3
 8008f7a:	4770      	bx	lr
