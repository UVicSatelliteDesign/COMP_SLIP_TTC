
STM_to_CC1201.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088b0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ff0  08008b50  08008b50  00009b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ab40  0800ab40  0000bb40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ab48  0800ab48  0000bb48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ab4c  0800ab4c  0000bb4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  24000000  0800ab50  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002ac  24000088  0800abd8  0000c088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000334  0800abd8  0000c334  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c088  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015bff  00000000  00000000  0000c0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002ca0  00000000  00000000  00021cb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f18  00000000  00000000  00024958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b8f  00000000  00000000  00025870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000384e5  00000000  00000000  000263ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016426  00000000  00000000  0005e8e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015eed1  00000000  00000000  00074d0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d3bdb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000045b0  00000000  00000000  001d3c20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000051  00000000  00000000  001d81d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008b38 	.word	0x08008b38

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	08008b38 	.word	0x08008b38

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <CC1201_Nop>:
{
    return CC1201_SendStrobe(CC1201_STROBE_WOR_RESET, status_byte);
}

HAL_StatusTypeDef CC1201_Nop(uint8_t *status_byte)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    printf("[DEBUG] Entered CC1201_Nop function\n\r");
 80006b4:	4809      	ldr	r0, [pc, #36]	@ (80006dc <CC1201_Nop+0x30>)
 80006b6:	f007 fbd3 	bl	8007e60 <iprintf>
    HAL_StatusTypeDef result = CC1201_SendStrobe(CC1201_STROBE_NOP, status_byte);
 80006ba:	6879      	ldr	r1, [r7, #4]
 80006bc:	203d      	movs	r0, #61	@ 0x3d
 80006be:	f000 f811 	bl	80006e4 <CC1201_SendStrobe>
 80006c2:	4603      	mov	r3, r0
 80006c4:	73fb      	strb	r3, [r7, #15]
    printf("[DEBUG] CC1201_Nop about to return: %d\n\r", result);
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	4619      	mov	r1, r3
 80006ca:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <CC1201_Nop+0x34>)
 80006cc:	f007 fbc8 	bl	8007e60 <iprintf>
    return result;
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	08008bac 	.word	0x08008bac
 80006e0:	08008bd4 	.word	0x08008bd4

080006e4 <CC1201_SendStrobe>:
 * @param status_byte Pointer to a uint8_t where the status byte received from the CC1201 will be stored.
 *                    Can be NULL if the status byte is not needed.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_SendStrobe(uint8_t strobe_command, uint8_t *status_byte)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af02      	add	r7, sp, #8
 80006ea:	4603      	mov	r3, r0
 80006ec:	6039      	str	r1, [r7, #0]
 80006ee:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;
    uint8_t rx_data;

    printf("    [DEBUG] SendStrobe called with command 0x%02X\n\r", strobe_command);
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	4619      	mov	r1, r3
 80006f4:	485d      	ldr	r0, [pc, #372]	@ (800086c <CC1201_SendStrobe+0x188>)
 80006f6:	f007 fbb3 	bl	8007e60 <iprintf>

    // Debug: Check CS pin before transaction
    printf("  Strobe 0x%02X: CS before=", strobe_command);
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	4619      	mov	r1, r3
 80006fe:	485c      	ldr	r0, [pc, #368]	@ (8000870 <CC1201_SendStrobe+0x18c>)
 8000700:	f007 fbae 	bl	8007e60 <iprintf>
    printf("%s", HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN) == GPIO_PIN_SET ? "HIGH" : "LOW");
 8000704:	2110      	movs	r1, #16
 8000706:	485b      	ldr	r0, [pc, #364]	@ (8000874 <CC1201_SendStrobe+0x190>)
 8000708:	f002 f81e 	bl	8002748 <HAL_GPIO_ReadPin>
 800070c:	4603      	mov	r3, r0
 800070e:	2b01      	cmp	r3, #1
 8000710:	d101      	bne.n	8000716 <CC1201_SendStrobe+0x32>
 8000712:	4b59      	ldr	r3, [pc, #356]	@ (8000878 <CC1201_SendStrobe+0x194>)
 8000714:	e000      	b.n	8000718 <CC1201_SendStrobe+0x34>
 8000716:	4b59      	ldr	r3, [pc, #356]	@ (800087c <CC1201_SendStrobe+0x198>)
 8000718:	4619      	mov	r1, r3
 800071a:	4859      	ldr	r0, [pc, #356]	@ (8000880 <CC1201_SendStrobe+0x19c>)
 800071c:	f007 fba0 	bl	8007e60 <iprintf>

    printf("    [DEBUG] About to pull CS low...\n\r");
 8000720:	4858      	ldr	r0, [pc, #352]	@ (8000884 <CC1201_SendStrobe+0x1a0>)
 8000722:	f007 fb9d 	bl	8007e60 <iprintf>
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 8000726:	2200      	movs	r2, #0
 8000728:	2110      	movs	r1, #16
 800072a:	4852      	ldr	r0, [pc, #328]	@ (8000874 <CC1201_SendStrobe+0x190>)
 800072c:	f002 f824 	bl	8002778 <HAL_GPIO_WritePin>
    
    // Debug: Check CS pin during transaction
    printf(", CS during=");
 8000730:	4855      	ldr	r0, [pc, #340]	@ (8000888 <CC1201_SendStrobe+0x1a4>)
 8000732:	f007 fb95 	bl	8007e60 <iprintf>
    printf("%s", HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN) == GPIO_PIN_SET ? "HIGH" : "LOW");
 8000736:	2110      	movs	r1, #16
 8000738:	484e      	ldr	r0, [pc, #312]	@ (8000874 <CC1201_SendStrobe+0x190>)
 800073a:	f002 f805 	bl	8002748 <HAL_GPIO_ReadPin>
 800073e:	4603      	mov	r3, r0
 8000740:	2b01      	cmp	r3, #1
 8000742:	d101      	bne.n	8000748 <CC1201_SendStrobe+0x64>
 8000744:	4b4c      	ldr	r3, [pc, #304]	@ (8000878 <CC1201_SendStrobe+0x194>)
 8000746:	e000      	b.n	800074a <CC1201_SendStrobe+0x66>
 8000748:	4b4c      	ldr	r3, [pc, #304]	@ (800087c <CC1201_SendStrobe+0x198>)
 800074a:	4619      	mov	r1, r3
 800074c:	484c      	ldr	r0, [pc, #304]	@ (8000880 <CC1201_SendStrobe+0x19c>)
 800074e:	f007 fb87 	bl	8007e60 <iprintf>
    
    printf("    [DEBUG] About to start SPI transaction...\n\r");
 8000752:	484e      	ldr	r0, [pc, #312]	@ (800088c <CC1201_SendStrobe+0x1a8>)
 8000754:	f007 fb84 	bl	8007e60 <iprintf>
    
    // Check SPI configuration before transaction
    printf("    [SPI DEBUG] SPI2 Config: State=%d, Mode=%lu, DataSize=%lu\n\r", 
           CC1201_SPI_HANDLE.State, 
 8000758:	4b4d      	ldr	r3, [pc, #308]	@ (8000890 <CC1201_SendStrobe+0x1ac>)
 800075a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800075e:	b2db      	uxtb	r3, r3
    printf("    [SPI DEBUG] SPI2 Config: State=%d, Mode=%lu, DataSize=%lu\n\r", 
 8000760:	4619      	mov	r1, r3
 8000762:	4b4b      	ldr	r3, [pc, #300]	@ (8000890 <CC1201_SendStrobe+0x1ac>)
 8000764:	685a      	ldr	r2, [r3, #4]
 8000766:	4b4a      	ldr	r3, [pc, #296]	@ (8000890 <CC1201_SendStrobe+0x1ac>)
 8000768:	68db      	ldr	r3, [r3, #12]
 800076a:	484a      	ldr	r0, [pc, #296]	@ (8000894 <CC1201_SendStrobe+0x1b0>)
 800076c:	f007 fb78 	bl	8007e60 <iprintf>
           CC1201_SPI_HANDLE.Init.Mode,
           CC1201_SPI_HANDLE.Init.DataSize);
    printf("    [SPI DEBUG] BaudRate=%lu, CPOL=%lu, CPHA=%lu\n\r",
 8000770:	4b47      	ldr	r3, [pc, #284]	@ (8000890 <CC1201_SendStrobe+0x1ac>)
 8000772:	69d9      	ldr	r1, [r3, #28]
 8000774:	4b46      	ldr	r3, [pc, #280]	@ (8000890 <CC1201_SendStrobe+0x1ac>)
 8000776:	691a      	ldr	r2, [r3, #16]
 8000778:	4b45      	ldr	r3, [pc, #276]	@ (8000890 <CC1201_SendStrobe+0x1ac>)
 800077a:	695b      	ldr	r3, [r3, #20]
 800077c:	4846      	ldr	r0, [pc, #280]	@ (8000898 <CC1201_SendStrobe+0x1b4>)
 800077e:	f007 fb6f 	bl	8007e60 <iprintf>
           CC1201_SPI_HANDLE.Init.BaudRatePrescaler,
           CC1201_SPI_HANDLE.Init.CLKPolarity,
           CC1201_SPI_HANDLE.Init.CLKPhase);
    
    // Small delay to ensure CS is stable
    HAL_Delay(1);
 8000782:	2001      	movs	r0, #1
 8000784:	f001 f9ce 	bl	8001b24 <HAL_Delay>

    // Use even shorter timeout to avoid long waits
    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, &strobe_command, &rx_data, 1, 100); // 100ms timeout
 8000788:	f107 020e 	add.w	r2, r7, #14
 800078c:	1df9      	adds	r1, r7, #7
 800078e:	2364      	movs	r3, #100	@ 0x64
 8000790:	9300      	str	r3, [sp, #0]
 8000792:	2301      	movs	r3, #1
 8000794:	483e      	ldr	r0, [pc, #248]	@ (8000890 <CC1201_SendStrobe+0x1ac>)
 8000796:	f005 fbf3 	bl	8005f80 <HAL_SPI_TransmitReceive>
 800079a:	4603      	mov	r3, r0
 800079c:	73fb      	strb	r3, [r7, #15]
    
    printf("    [DEBUG] SPI transaction returned with status: %d\n\r", status);
 800079e:	7bfb      	ldrb	r3, [r7, #15]
 80007a0:	4619      	mov	r1, r3
 80007a2:	483e      	ldr	r0, [pc, #248]	@ (800089c <CC1201_SendStrobe+0x1b8>)
 80007a4:	f007 fb5c 	bl	8007e60 <iprintf>
    
    // If TransmitReceive failed, try separate transmit and receive
    if (status != HAL_OK) {
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d023      	beq.n	80007f6 <CC1201_SendStrobe+0x112>
        printf("    [DEBUG] Trying separate TX/RX...\n\r");
 80007ae:	483c      	ldr	r0, [pc, #240]	@ (80008a0 <CC1201_SendStrobe+0x1bc>)
 80007b0:	f007 fb56 	bl	8007e60 <iprintf>
        rx_data = 0x00; // Reset rx_data
 80007b4:	2300      	movs	r3, #0
 80007b6:	73bb      	strb	r3, [r7, #14]
        
        status = HAL_SPI_Transmit(&CC1201_SPI_HANDLE, &strobe_command, 1, 100);
 80007b8:	1df9      	adds	r1, r7, #7
 80007ba:	2364      	movs	r3, #100	@ 0x64
 80007bc:	2201      	movs	r2, #1
 80007be:	4834      	ldr	r0, [pc, #208]	@ (8000890 <CC1201_SendStrobe+0x1ac>)
 80007c0:	f004 ff7e 	bl	80056c0 <HAL_SPI_Transmit>
 80007c4:	4603      	mov	r3, r0
 80007c6:	73fb      	strb	r3, [r7, #15]
        printf("    [DEBUG] SPI Transmit status: %d\n\r", status);
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	4619      	mov	r1, r3
 80007cc:	4835      	ldr	r0, [pc, #212]	@ (80008a4 <CC1201_SendStrobe+0x1c0>)
 80007ce:	f007 fb47 	bl	8007e60 <iprintf>
        
        if (status == HAL_OK) {
 80007d2:	7bfb      	ldrb	r3, [r7, #15]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d10e      	bne.n	80007f6 <CC1201_SendStrobe+0x112>
            status = HAL_SPI_Receive(&CC1201_SPI_HANDLE, &rx_data, 1, 100);
 80007d8:	f107 010e 	add.w	r1, r7, #14
 80007dc:	2364      	movs	r3, #100	@ 0x64
 80007de:	2201      	movs	r2, #1
 80007e0:	482b      	ldr	r0, [pc, #172]	@ (8000890 <CC1201_SendStrobe+0x1ac>)
 80007e2:	f005 f95b 	bl	8005a9c <HAL_SPI_Receive>
 80007e6:	4603      	mov	r3, r0
 80007e8:	73fb      	strb	r3, [r7, #15]
            printf("    [DEBUG] SPI Receive status: %d, RX: 0x%02X\n\r", status, rx_data);
 80007ea:	7bfb      	ldrb	r3, [r7, #15]
 80007ec:	7bba      	ldrb	r2, [r7, #14]
 80007ee:	4619      	mov	r1, r3
 80007f0:	482d      	ldr	r0, [pc, #180]	@ (80008a8 <CC1201_SendStrobe+0x1c4>)
 80007f2:	f007 fb35 	bl	8007e60 <iprintf>
        }
    }
    
    if (status != HAL_OK) {
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d016      	beq.n	800082a <CC1201_SendStrobe+0x146>
        printf("    [ERROR] SPI transaction failed! Status: %d\n\r", status);
 80007fc:	7bfb      	ldrb	r3, [r7, #15]
 80007fe:	4619      	mov	r1, r3
 8000800:	482a      	ldr	r0, [pc, #168]	@ (80008ac <CC1201_SendStrobe+0x1c8>)
 8000802:	f007 fb2d 	bl	8007e60 <iprintf>
        if (status == HAL_TIMEOUT) {
 8000806:	7bfb      	ldrb	r3, [r7, #15]
 8000808:	2b03      	cmp	r3, #3
 800080a:	d102      	bne.n	8000812 <CC1201_SendStrobe+0x12e>
            printf("    [ERROR] SPI TIMEOUT occurred!\n\r");
 800080c:	4828      	ldr	r0, [pc, #160]	@ (80008b0 <CC1201_SendStrobe+0x1cc>)
 800080e:	f007 fb27 	bl	8007e60 <iprintf>
        }
        if (status == HAL_ERROR) {
 8000812:	7bfb      	ldrb	r3, [r7, #15]
 8000814:	2b01      	cmp	r3, #1
 8000816:	d102      	bne.n	800081e <CC1201_SendStrobe+0x13a>
            printf("    [ERROR] SPI ERROR occurred!\n\r");
 8000818:	4826      	ldr	r0, [pc, #152]	@ (80008b4 <CC1201_SendStrobe+0x1d0>)
 800081a:	f007 fb21 	bl	8007e60 <iprintf>
        }
        if (status == HAL_BUSY) {
 800081e:	7bfb      	ldrb	r3, [r7, #15]
 8000820:	2b02      	cmp	r3, #2
 8000822:	d102      	bne.n	800082a <CC1201_SendStrobe+0x146>
            printf("    [ERROR] SPI BUSY occurred!\n\r");
 8000824:	4824      	ldr	r0, [pc, #144]	@ (80008b8 <CC1201_SendStrobe+0x1d4>)
 8000826:	f007 fb1b 	bl	8007e60 <iprintf>
        }
    }

    printf("    [DEBUG] SPI transaction complete, pulling CS high...\n\r");
 800082a:	4824      	ldr	r0, [pc, #144]	@ (80008bc <CC1201_SendStrobe+0x1d8>)
 800082c:	f007 fb18 	bl	8007e60 <iprintf>
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 8000830:	2201      	movs	r2, #1
 8000832:	2110      	movs	r1, #16
 8000834:	480f      	ldr	r0, [pc, #60]	@ (8000874 <CC1201_SendStrobe+0x190>)
 8000836:	f001 ff9f 	bl	8002778 <HAL_GPIO_WritePin>

    // Debug output
    printf(", CS after=HIGH, RX=0x%02X, HAL=%d\n\r", rx_data, status);
 800083a:	7bbb      	ldrb	r3, [r7, #14]
 800083c:	4619      	mov	r1, r3
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	461a      	mov	r2, r3
 8000842:	481f      	ldr	r0, [pc, #124]	@ (80008c0 <CC1201_SendStrobe+0x1dc>)
 8000844:	f007 fb0c 	bl	8007e60 <iprintf>
    printf("    [DEBUG] SendStrobe complete\n\r");
 8000848:	481e      	ldr	r0, [pc, #120]	@ (80008c4 <CC1201_SendStrobe+0x1e0>)
 800084a:	f007 fb09 	bl	8007e60 <iprintf>

    if (status == HAL_OK) {
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d105      	bne.n	8000860 <CC1201_SendStrobe+0x17c>
        if (status_byte != NULL) {
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d002      	beq.n	8000860 <CC1201_SendStrobe+0x17c>
            *status_byte = rx_data;
 800085a:	7bba      	ldrb	r2, [r7, #14]
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	701a      	strb	r2, [r3, #0]
        }
    }
    return status;
 8000860:	7bfb      	ldrb	r3, [r7, #15]
}
 8000862:	4618      	mov	r0, r3
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	08008c00 	.word	0x08008c00
 8000870:	08008c34 	.word	0x08008c34
 8000874:	58021000 	.word	0x58021000
 8000878:	08008c50 	.word	0x08008c50
 800087c:	08008c58 	.word	0x08008c58
 8000880:	08008c5c 	.word	0x08008c5c
 8000884:	08008c60 	.word	0x08008c60
 8000888:	08008c88 	.word	0x08008c88
 800088c:	08008c98 	.word	0x08008c98
 8000890:	240000b8 	.word	0x240000b8
 8000894:	08008cc8 	.word	0x08008cc8
 8000898:	08008d08 	.word	0x08008d08
 800089c:	08008d3c 	.word	0x08008d3c
 80008a0:	08008d74 	.word	0x08008d74
 80008a4:	08008d9c 	.word	0x08008d9c
 80008a8:	08008dc4 	.word	0x08008dc4
 80008ac:	08008df8 	.word	0x08008df8
 80008b0:	08008e2c 	.word	0x08008e2c
 80008b4:	08008e50 	.word	0x08008e50
 80008b8:	08008e74 	.word	0x08008e74
 80008bc:	08008e98 	.word	0x08008e98
 80008c0:	08008ed4 	.word	0x08008ed4
 80008c4:	08008efc 	.word	0x08008efc

080008c8 <test_GPIO_pins>:
    printf("\n🎉 COMPREHENSIVE TEST SEQUENCE COMPLETE! 🎉\n\r");
    printf("==============================================\n\r");
}

// Function to test GPIO pin states
void test_GPIO_pins(void) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
    printf("=== GPIO Pin Test ===\n\r");
 80008ce:	485c      	ldr	r0, [pc, #368]	@ (8000a40 <test_GPIO_pins+0x178>)
 80008d0:	f007 fac6 	bl	8007e60 <iprintf>
    
    // Test CS pin more thoroughly
    printf("CS Pin (PE4) Detailed Test:\n\r");
 80008d4:	485b      	ldr	r0, [pc, #364]	@ (8000a44 <test_GPIO_pins+0x17c>)
 80008d6:	f007 fac3 	bl	8007e60 <iprintf>
    GPIO_PinState cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 80008da:	2110      	movs	r1, #16
 80008dc:	485a      	ldr	r0, [pc, #360]	@ (8000a48 <test_GPIO_pins+0x180>)
 80008de:	f001 ff33 	bl	8002748 <HAL_GPIO_ReadPin>
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
    printf("  Initial state: %s\n\r", cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d101      	bne.n	80008f0 <test_GPIO_pins+0x28>
 80008ec:	4b57      	ldr	r3, [pc, #348]	@ (8000a4c <test_GPIO_pins+0x184>)
 80008ee:	e000      	b.n	80008f2 <test_GPIO_pins+0x2a>
 80008f0:	4b57      	ldr	r3, [pc, #348]	@ (8000a50 <test_GPIO_pins+0x188>)
 80008f2:	4619      	mov	r1, r3
 80008f4:	4857      	ldr	r0, [pc, #348]	@ (8000a54 <test_GPIO_pins+0x18c>)
 80008f6:	f007 fab3 	bl	8007e60 <iprintf>
    
    // Force CS LOW and check multiple times
    printf("  Forcing CS LOW...\n\r");
 80008fa:	4857      	ldr	r0, [pc, #348]	@ (8000a58 <test_GPIO_pins+0x190>)
 80008fc:	f007 fab0 	bl	8007e60 <iprintf>
    for (int i = 0; i < 5; i++) {
 8000900:	2300      	movs	r3, #0
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	e01c      	b.n	8000940 <test_GPIO_pins+0x78>
        HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	2110      	movs	r1, #16
 800090a:	484f      	ldr	r0, [pc, #316]	@ (8000a48 <test_GPIO_pins+0x180>)
 800090c:	f001 ff34 	bl	8002778 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8000910:	200a      	movs	r0, #10
 8000912:	f001 f907 	bl	8001b24 <HAL_Delay>
        cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 8000916:	2110      	movs	r1, #16
 8000918:	484b      	ldr	r0, [pc, #300]	@ (8000a48 <test_GPIO_pins+0x180>)
 800091a:	f001 ff15 	bl	8002748 <HAL_GPIO_ReadPin>
 800091e:	4603      	mov	r3, r0
 8000920:	71fb      	strb	r3, [r7, #7]
        printf("    Attempt %d: %s\n\r", i+1, cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	1c59      	adds	r1, r3, #1
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d101      	bne.n	8000930 <test_GPIO_pins+0x68>
 800092c:	4b47      	ldr	r3, [pc, #284]	@ (8000a4c <test_GPIO_pins+0x184>)
 800092e:	e000      	b.n	8000932 <test_GPIO_pins+0x6a>
 8000930:	4b47      	ldr	r3, [pc, #284]	@ (8000a50 <test_GPIO_pins+0x188>)
 8000932:	461a      	mov	r2, r3
 8000934:	4849      	ldr	r0, [pc, #292]	@ (8000a5c <test_GPIO_pins+0x194>)
 8000936:	f007 fa93 	bl	8007e60 <iprintf>
    for (int i = 0; i < 5; i++) {
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	3301      	adds	r3, #1
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	2b04      	cmp	r3, #4
 8000944:	dddf      	ble.n	8000906 <test_GPIO_pins+0x3e>
    }
    
    // Force CS HIGH and check multiple times
    printf("  Forcing CS HIGH...\n\r");
 8000946:	4846      	ldr	r0, [pc, #280]	@ (8000a60 <test_GPIO_pins+0x198>)
 8000948:	f007 fa8a 	bl	8007e60 <iprintf>
    for (int i = 0; i < 5; i++) {
 800094c:	2300      	movs	r3, #0
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	e01c      	b.n	800098c <test_GPIO_pins+0xc4>
        HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 8000952:	2201      	movs	r2, #1
 8000954:	2110      	movs	r1, #16
 8000956:	483c      	ldr	r0, [pc, #240]	@ (8000a48 <test_GPIO_pins+0x180>)
 8000958:	f001 ff0e 	bl	8002778 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 800095c:	200a      	movs	r0, #10
 800095e:	f001 f8e1 	bl	8001b24 <HAL_Delay>
        cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 8000962:	2110      	movs	r1, #16
 8000964:	4838      	ldr	r0, [pc, #224]	@ (8000a48 <test_GPIO_pins+0x180>)
 8000966:	f001 feef 	bl	8002748 <HAL_GPIO_ReadPin>
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
        printf("    Attempt %d: %s\n\r", i+1, cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	1c59      	adds	r1, r3, #1
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d101      	bne.n	800097c <test_GPIO_pins+0xb4>
 8000978:	4b34      	ldr	r3, [pc, #208]	@ (8000a4c <test_GPIO_pins+0x184>)
 800097a:	e000      	b.n	800097e <test_GPIO_pins+0xb6>
 800097c:	4b34      	ldr	r3, [pc, #208]	@ (8000a50 <test_GPIO_pins+0x188>)
 800097e:	461a      	mov	r2, r3
 8000980:	4836      	ldr	r0, [pc, #216]	@ (8000a5c <test_GPIO_pins+0x194>)
 8000982:	f007 fa6d 	bl	8007e60 <iprintf>
    for (int i = 0; i < 5; i++) {
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	3301      	adds	r3, #1
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	2b04      	cmp	r3, #4
 8000990:	dddf      	ble.n	8000952 <test_GPIO_pins+0x8a>
    }
    
    // Test INT pin
    printf("INT Pin (PD4): ");
 8000992:	4834      	ldr	r0, [pc, #208]	@ (8000a64 <test_GPIO_pins+0x19c>)
 8000994:	f007 fa64 	bl	8007e60 <iprintf>
    GPIO_PinState int_state = HAL_GPIO_ReadPin(CC1201_INT_PORT, CC1201_INT_PIN);
 8000998:	2110      	movs	r1, #16
 800099a:	4833      	ldr	r0, [pc, #204]	@ (8000a68 <test_GPIO_pins+0x1a0>)
 800099c:	f001 fed4 	bl	8002748 <HAL_GPIO_ReadPin>
 80009a0:	4603      	mov	r3, r0
 80009a2:	71bb      	strb	r3, [r7, #6]
    printf("%s\n\r", int_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 80009a4:	79bb      	ldrb	r3, [r7, #6]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d101      	bne.n	80009ae <test_GPIO_pins+0xe6>
 80009aa:	4b28      	ldr	r3, [pc, #160]	@ (8000a4c <test_GPIO_pins+0x184>)
 80009ac:	e000      	b.n	80009b0 <test_GPIO_pins+0xe8>
 80009ae:	4b28      	ldr	r3, [pc, #160]	@ (8000a50 <test_GPIO_pins+0x188>)
 80009b0:	4619      	mov	r1, r3
 80009b2:	482e      	ldr	r0, [pc, #184]	@ (8000a6c <test_GPIO_pins+0x1a4>)
 80009b4:	f007 fa54 	bl	8007e60 <iprintf>
    
    // Check SPI state
    printf("SPI2 State: ");
 80009b8:	482d      	ldr	r0, [pc, #180]	@ (8000a70 <test_GPIO_pins+0x1a8>)
 80009ba:	f007 fa51 	bl	8007e60 <iprintf>
    if (CC1201_SPI_HANDLE.State == HAL_SPI_STATE_READY) {
 80009be:	4b2d      	ldr	r3, [pc, #180]	@ (8000a74 <test_GPIO_pins+0x1ac>)
 80009c0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d103      	bne.n	80009d2 <test_GPIO_pins+0x10a>
        printf("READY\n\r");
 80009ca:	482b      	ldr	r0, [pc, #172]	@ (8000a78 <test_GPIO_pins+0x1b0>)
 80009cc:	f007 fa48 	bl	8007e60 <iprintf>
 80009d0:	e02f      	b.n	8000a32 <test_GPIO_pins+0x16a>
    } else if (CC1201_SPI_HANDLE.State == HAL_SPI_STATE_BUSY) {
 80009d2:	4b28      	ldr	r3, [pc, #160]	@ (8000a74 <test_GPIO_pins+0x1ac>)
 80009d4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	2b02      	cmp	r3, #2
 80009dc:	d103      	bne.n	80009e6 <test_GPIO_pins+0x11e>
        printf("BUSY\n\r");
 80009de:	4827      	ldr	r0, [pc, #156]	@ (8000a7c <test_GPIO_pins+0x1b4>)
 80009e0:	f007 fa3e 	bl	8007e60 <iprintf>
 80009e4:	e025      	b.n	8000a32 <test_GPIO_pins+0x16a>
    } else if (CC1201_SPI_HANDLE.State == HAL_SPI_STATE_BUSY_TX) {
 80009e6:	4b23      	ldr	r3, [pc, #140]	@ (8000a74 <test_GPIO_pins+0x1ac>)
 80009e8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	2b03      	cmp	r3, #3
 80009f0:	d103      	bne.n	80009fa <test_GPIO_pins+0x132>
        printf("BUSY_TX\n\r");
 80009f2:	4823      	ldr	r0, [pc, #140]	@ (8000a80 <test_GPIO_pins+0x1b8>)
 80009f4:	f007 fa34 	bl	8007e60 <iprintf>
 80009f8:	e01b      	b.n	8000a32 <test_GPIO_pins+0x16a>
    } else if (CC1201_SPI_HANDLE.State == HAL_SPI_STATE_BUSY_RX) {
 80009fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000a74 <test_GPIO_pins+0x1ac>)
 80009fc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	2b04      	cmp	r3, #4
 8000a04:	d103      	bne.n	8000a0e <test_GPIO_pins+0x146>
        printf("BUSY_RX\n\r");
 8000a06:	481f      	ldr	r0, [pc, #124]	@ (8000a84 <test_GPIO_pins+0x1bc>)
 8000a08:	f007 fa2a 	bl	8007e60 <iprintf>
 8000a0c:	e011      	b.n	8000a32 <test_GPIO_pins+0x16a>
    } else if (CC1201_SPI_HANDLE.State == HAL_SPI_STATE_BUSY_TX_RX) {
 8000a0e:	4b19      	ldr	r3, [pc, #100]	@ (8000a74 <test_GPIO_pins+0x1ac>)
 8000a10:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	2b05      	cmp	r3, #5
 8000a18:	d103      	bne.n	8000a22 <test_GPIO_pins+0x15a>
        printf("BUSY_TX_RX\n\r");
 8000a1a:	481b      	ldr	r0, [pc, #108]	@ (8000a88 <test_GPIO_pins+0x1c0>)
 8000a1c:	f007 fa20 	bl	8007e60 <iprintf>
 8000a20:	e007      	b.n	8000a32 <test_GPIO_pins+0x16a>
    } else {
        printf("ERROR/RESET (%d)\n\r", CC1201_SPI_HANDLE.State);
 8000a22:	4b14      	ldr	r3, [pc, #80]	@ (8000a74 <test_GPIO_pins+0x1ac>)
 8000a24:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4817      	ldr	r0, [pc, #92]	@ (8000a8c <test_GPIO_pins+0x1c4>)
 8000a2e:	f007 fa17 	bl	8007e60 <iprintf>
    }
    
    printf("===================\n\r");
 8000a32:	4817      	ldr	r0, [pc, #92]	@ (8000a90 <test_GPIO_pins+0x1c8>)
 8000a34:	f007 fa14 	bl	8007e60 <iprintf>
}
 8000a38:	bf00      	nop
 8000a3a:	3710      	adds	r7, #16
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	08009f08 	.word	0x08009f08
 8000a44:	08009f20 	.word	0x08009f20
 8000a48:	58021000 	.word	0x58021000
 8000a4c:	08009f40 	.word	0x08009f40
 8000a50:	08009f48 	.word	0x08009f48
 8000a54:	08009f4c 	.word	0x08009f4c
 8000a58:	08009f64 	.word	0x08009f64
 8000a5c:	08009f7c 	.word	0x08009f7c
 8000a60:	08009f94 	.word	0x08009f94
 8000a64:	08009fac 	.word	0x08009fac
 8000a68:	58020c00 	.word	0x58020c00
 8000a6c:	08009fbc 	.word	0x08009fbc
 8000a70:	08009fc4 	.word	0x08009fc4
 8000a74:	240000b8 	.word	0x240000b8
 8000a78:	08009fd4 	.word	0x08009fd4
 8000a7c:	08009fdc 	.word	0x08009fdc
 8000a80:	08009fe4 	.word	0x08009fe4
 8000a84:	08009ff0 	.word	0x08009ff0
 8000a88:	08009ffc 	.word	0x08009ffc
 8000a8c:	0800a00c 	.word	0x0800a00c
 8000a90:	0800a020 	.word	0x0800a020

08000a94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b088      	sub	sp, #32
 8000a98:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a9a:	f000 faad 	bl	8000ff8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a9e:	f000 ffaf 	bl	8001a00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa2:	f000 f945 	bl	8000d30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa6:	f000 fa17 	bl	8000ed8 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000aaa:	f000 f9bf 	bl	8000e2c <MX_SPI2_Init>
  // CC1201 testing will be done after UART is initialized

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f000 fd50 	bl	8001554 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f000 fd4d 	bl	8001554 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000aba:	2002      	movs	r0, #2
 8000abc:	f000 fd4a 	bl	8001554 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f000 fe3a 	bl	800173c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000ac8:	4b80      	ldr	r3, [pc, #512]	@ (8000ccc <main+0x238>)
 8000aca:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ace:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000ad0:	4b7e      	ldr	r3, [pc, #504]	@ (8000ccc <main+0x238>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000ad6:	4b7d      	ldr	r3, [pc, #500]	@ (8000ccc <main+0x238>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000adc:	4b7b      	ldr	r3, [pc, #492]	@ (8000ccc <main+0x238>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000ae2:	4b7a      	ldr	r3, [pc, #488]	@ (8000ccc <main+0x238>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000ae8:	4978      	ldr	r1, [pc, #480]	@ (8000ccc <main+0x238>)
 8000aea:	2000      	movs	r0, #0
 8000aec:	f000 feaa 	bl	8001844 <BSP_COM_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <main+0x66>
  {
    Error_Handler();
 8000af6:	f000 fabf 	bl	8001078 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8000afa:	4875      	ldr	r0, [pc, #468]	@ (8000cd0 <main+0x23c>)
 8000afc:	f007 f9b0 	bl	8007e60 <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8000b00:	2000      	movs	r0, #0
 8000b02:	f000 fd9d 	bl	8001640 <BSP_LED_On>
  BSP_LED_On(LED_YELLOW);
 8000b06:	2001      	movs	r0, #1
 8000b08:	f000 fd9a 	bl	8001640 <BSP_LED_On>
  BSP_LED_On(LED_RED);
 8000b0c:	2002      	movs	r0, #2
 8000b0e:	f000 fd97 	bl	8001640 <BSP_LED_On>
  
  // Now that UART is initialized, start CC1201 testing
  printf("\n=== CC1201 COMMUNICATION SYSTEM STARTUP ===\n\r");
 8000b12:	4870      	ldr	r0, [pc, #448]	@ (8000cd4 <main+0x240>)
 8000b14:	f007 f9a4 	bl	8007e60 <iprintf>
  
  // Test GPIO pins first
  test_GPIO_pins();
 8000b18:	f7ff fed6 	bl	80008c8 <test_GPIO_pins>
  
  // Simple test instead of full initialization
  printf("Starting simple CC1201 test...\n\r");
 8000b1c:	486e      	ldr	r0, [pc, #440]	@ (8000cd8 <main+0x244>)
 8000b1e:	f007 f99f 	bl	8007e60 <iprintf>
  HAL_Delay(100);
 8000b22:	2064      	movs	r0, #100	@ 0x64
 8000b24:	f000 fffe 	bl	8001b24 <HAL_Delay>
  
  // First, test SPI2 peripheral directly
  printf("Testing SPI2 peripheral directly...\n\r");
 8000b28:	486c      	ldr	r0, [pc, #432]	@ (8000cdc <main+0x248>)
 8000b2a:	f007 f999 	bl	8007e60 <iprintf>
  uint8_t spi_test_tx = 0xAA;
 8000b2e:	23aa      	movs	r3, #170	@ 0xaa
 8000b30:	72fb      	strb	r3, [r7, #11]
  uint8_t spi_test_rx = 0x00;
 8000b32:	2300      	movs	r3, #0
 8000b34:	72bb      	strb	r3, [r7, #10]
  
  HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // CS Low
 8000b36:	2200      	movs	r2, #0
 8000b38:	2110      	movs	r1, #16
 8000b3a:	4869      	ldr	r0, [pc, #420]	@ (8000ce0 <main+0x24c>)
 8000b3c:	f001 fe1c 	bl	8002778 <HAL_GPIO_WritePin>
  HAL_StatusTypeDef spi_test_result = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, &spi_test_tx, &spi_test_rx, 1, 100);
 8000b40:	f107 020a 	add.w	r2, r7, #10
 8000b44:	f107 010b 	add.w	r1, r7, #11
 8000b48:	2364      	movs	r3, #100	@ 0x64
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	4865      	ldr	r0, [pc, #404]	@ (8000ce4 <main+0x250>)
 8000b50:	f005 fa16 	bl	8005f80 <HAL_SPI_TransmitReceive>
 8000b54:	4603      	mov	r3, r0
 8000b56:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // CS High
 8000b58:	2201      	movs	r2, #1
 8000b5a:	2110      	movs	r1, #16
 8000b5c:	4860      	ldr	r0, [pc, #384]	@ (8000ce0 <main+0x24c>)
 8000b5e:	f001 fe0b 	bl	8002778 <HAL_GPIO_WritePin>
  
  printf("Direct SPI test - HAL: %d, TX: 0x%02X, RX: 0x%02X\n\r", spi_test_result, spi_test_tx, spi_test_rx);
 8000b62:	7bf9      	ldrb	r1, [r7, #15]
 8000b64:	7afb      	ldrb	r3, [r7, #11]
 8000b66:	461a      	mov	r2, r3
 8000b68:	7abb      	ldrb	r3, [r7, #10]
 8000b6a:	485f      	ldr	r0, [pc, #380]	@ (8000ce8 <main+0x254>)
 8000b6c:	f007 f978 	bl	8007e60 <iprintf>
  
  if (spi_test_result == HAL_OK) {
 8000b70:	7bfb      	ldrb	r3, [r7, #15]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d103      	bne.n	8000b7e <main+0xea>
      printf("SPI2 peripheral working!\n\r");
 8000b76:	485d      	ldr	r0, [pc, #372]	@ (8000cec <main+0x258>)
 8000b78:	f007 f972 	bl	8007e60 <iprintf>
 8000b7c:	e016      	b.n	8000bac <main+0x118>
  } else {
      printf("SPI2 peripheral failed! Error: %d\n\r", spi_test_result);
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
 8000b80:	4619      	mov	r1, r3
 8000b82:	485b      	ldr	r0, [pc, #364]	@ (8000cf0 <main+0x25c>)
 8000b84:	f007 f96c 	bl	8007e60 <iprintf>
      if (spi_test_result == HAL_TIMEOUT) printf("  -> SPI TIMEOUT\n\r");
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	2b03      	cmp	r3, #3
 8000b8c:	d102      	bne.n	8000b94 <main+0x100>
 8000b8e:	4859      	ldr	r0, [pc, #356]	@ (8000cf4 <main+0x260>)
 8000b90:	f007 f966 	bl	8007e60 <iprintf>
      if (spi_test_result == HAL_ERROR) printf("  -> SPI ERROR\n\r");
 8000b94:	7bfb      	ldrb	r3, [r7, #15]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d102      	bne.n	8000ba0 <main+0x10c>
 8000b9a:	4857      	ldr	r0, [pc, #348]	@ (8000cf8 <main+0x264>)
 8000b9c:	f007 f960 	bl	8007e60 <iprintf>
      if (spi_test_result == HAL_BUSY) printf("  -> SPI BUSY\n\r");
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	2b02      	cmp	r3, #2
 8000ba4:	d102      	bne.n	8000bac <main+0x118>
 8000ba6:	4855      	ldr	r0, [pc, #340]	@ (8000cfc <main+0x268>)
 8000ba8:	f007 f95a 	bl	8007e60 <iprintf>
  }
  
  printf("Test 1: Creating status byte variable...\n\r");
 8000bac:	4854      	ldr	r0, [pc, #336]	@ (8000d00 <main+0x26c>)
 8000bae:	f007 f957 	bl	8007e60 <iprintf>
  uint8_t test_status = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	727b      	strb	r3, [r7, #9]
  
  printf("Test 2: About to call CC1201_Nop...\n\r");
 8000bb6:	4853      	ldr	r0, [pc, #332]	@ (8000d04 <main+0x270>)
 8000bb8:	f007 f952 	bl	8007e60 <iprintf>
  HAL_StatusTypeDef nop_result = CC1201_Nop(&test_status);
 8000bbc:	f107 0309 	add.w	r3, r7, #9
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fd73 	bl	80006ac <CC1201_Nop>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	73bb      	strb	r3, [r7, #14]
  
  printf("Test 3: NOP returned - HAL: %d, Status: 0x%02X\n\r", nop_result, test_status);
 8000bca:	7bbb      	ldrb	r3, [r7, #14]
 8000bcc:	7a7a      	ldrb	r2, [r7, #9]
 8000bce:	4619      	mov	r1, r3
 8000bd0:	484d      	ldr	r0, [pc, #308]	@ (8000d08 <main+0x274>)
 8000bd2:	f007 f945 	bl	8007e60 <iprintf>
  
  if (nop_result == HAL_OK) {
 8000bd6:	7bbb      	ldrb	r3, [r7, #14]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d109      	bne.n	8000bf0 <main+0x15c>
      printf("Basic CC1201 communication working!\n\r");
 8000bdc:	484b      	ldr	r0, [pc, #300]	@ (8000d0c <main+0x278>)
 8000bde:	f007 f93f 	bl	8007e60 <iprintf>
      BSP_LED_Off(LED_RED);
 8000be2:	2002      	movs	r0, #2
 8000be4:	f000 fd56 	bl	8001694 <BSP_LED_Off>
      BSP_LED_On(LED_GREEN);
 8000be8:	2000      	movs	r0, #0
 8000bea:	f000 fd29 	bl	8001640 <BSP_LED_On>
 8000bee:	e008      	b.n	8000c02 <main+0x16e>
  } else {
      printf("CC1201 communication failed!\n\r");
 8000bf0:	4847      	ldr	r0, [pc, #284]	@ (8000d10 <main+0x27c>)
 8000bf2:	f007 f935 	bl	8007e60 <iprintf>
      BSP_LED_Off(LED_GREEN);
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f000 fd4c 	bl	8001694 <BSP_LED_Off>
      BSP_LED_On(LED_RED);
 8000bfc:	2002      	movs	r0, #2
 8000bfe:	f000 fd1f 	bl	8001640 <BSP_LED_On>

  /* USER CODE END BSP */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t last_test = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
  uint32_t test_counter = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
  
  printf("\n🚀 STARTING SIMPLE CC1201 TEST MODE 🚀\n\r");
 8000c0a:	4842      	ldr	r0, [pc, #264]	@ (8000d14 <main+0x280>)
 8000c0c:	f007 f928 	bl	8007e60 <iprintf>
  
  while (1)
  {

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 8000c10:	4b41      	ldr	r3, [pc, #260]	@ (8000d18 <main+0x284>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d11d      	bne.n	8000c54 <main+0x1c0>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 8000c18:	4b3f      	ldr	r3, [pc, #252]	@ (8000d18 <main+0x284>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle leds ---- */
      BSP_LED_Toggle(LED_GREEN);
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f000 fd62 	bl	80016e8 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_YELLOW);
 8000c24:	2001      	movs	r0, #1
 8000c26:	f000 fd5f 	bl	80016e8 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_RED);
 8000c2a:	2002      	movs	r0, #2
 8000c2c:	f000 fd5c 	bl	80016e8 <BSP_LED_Toggle>

      /* ..... Perform your action ..... */
      printf("\n[BUTTON] Manual test triggered...\n\r");
 8000c30:	483a      	ldr	r0, [pc, #232]	@ (8000d1c <main+0x288>)
 8000c32:	f007 f915 	bl	8007e60 <iprintf>
      uint8_t button_status = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	723b      	strb	r3, [r7, #8]
      HAL_StatusTypeDef button_result = CC1201_Nop(&button_status);
 8000c3a:	f107 0308 	add.w	r3, r7, #8
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fd34 	bl	80006ac <CC1201_Nop>
 8000c44:	4603      	mov	r3, r0
 8000c46:	737b      	strb	r3, [r7, #13]
      printf("Button test - HAL: %d, Status: 0x%02X\n\r", button_result, button_status);
 8000c48:	7b7b      	ldrb	r3, [r7, #13]
 8000c4a:	7a3a      	ldrb	r2, [r7, #8]
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4834      	ldr	r0, [pc, #208]	@ (8000d20 <main+0x28c>)
 8000c50:	f007 f906 	bl	8007e60 <iprintf>
    }
    
    // Simple periodic test every 5 seconds
    if (HAL_GetTick() - last_test > 5000) {
 8000c54:	f000 ff5a 	bl	8001b0c <HAL_GetTick>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d92e      	bls.n	8000cc4 <main+0x230>
      printf("[%lu] Test %lu: ", HAL_GetTick(), ++test_counter);
 8000c66:	f000 ff51 	bl	8001b0c <HAL_GetTick>
 8000c6a:	4601      	mov	r1, r0
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	482b      	ldr	r0, [pc, #172]	@ (8000d24 <main+0x290>)
 8000c76:	f007 f8f3 	bl	8007e60 <iprintf>
      
      uint8_t status_byte = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	71fb      	strb	r3, [r7, #7]
      HAL_StatusTypeDef hal_status = CC1201_Nop(&status_byte);
 8000c7e:	1dfb      	adds	r3, r7, #7
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fd13 	bl	80006ac <CC1201_Nop>
 8000c86:	4603      	mov	r3, r0
 8000c88:	733b      	strb	r3, [r7, #12]
      
      if (hal_status == HAL_OK) {
 8000c8a:	7b3b      	ldrb	r3, [r7, #12]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d10b      	bne.n	8000ca8 <main+0x214>
        printf("OK - Status: 0x%02X\n\r", status_byte);
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	4619      	mov	r1, r3
 8000c94:	4824      	ldr	r0, [pc, #144]	@ (8000d28 <main+0x294>)
 8000c96:	f007 f8e3 	bl	8007e60 <iprintf>
        BSP_LED_On(LED_GREEN);
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f000 fcd0 	bl	8001640 <BSP_LED_On>
        BSP_LED_Off(LED_RED);
 8000ca0:	2002      	movs	r0, #2
 8000ca2:	f000 fcf7 	bl	8001694 <BSP_LED_Off>
 8000ca6:	e00a      	b.n	8000cbe <main+0x22a>
      } else {
        printf("FAILED - HAL: %d\n\r", hal_status);
 8000ca8:	7b3b      	ldrb	r3, [r7, #12]
 8000caa:	4619      	mov	r1, r3
 8000cac:	481f      	ldr	r0, [pc, #124]	@ (8000d2c <main+0x298>)
 8000cae:	f007 f8d7 	bl	8007e60 <iprintf>
        BSP_LED_Off(LED_GREEN);
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f000 fcee 	bl	8001694 <BSP_LED_Off>
        BSP_LED_On(LED_RED);
 8000cb8:	2002      	movs	r0, #2
 8000cba:	f000 fcc1 	bl	8001640 <BSP_LED_On>
      }
      
      last_test = HAL_GetTick();
 8000cbe:	f000 ff25 	bl	8001b0c <HAL_GetTick>
 8000cc2:	6178      	str	r0, [r7, #20]
    }
    
    HAL_Delay(100);
 8000cc4:	2064      	movs	r0, #100	@ 0x64
 8000cc6:	f000 ff2d 	bl	8001b24 <HAL_Delay>
    if (BspButtonState == BUTTON_PRESSED)
 8000cca:	e7a1      	b.n	8000c10 <main+0x17c>
 8000ccc:	240000a4 	.word	0x240000a4
 8000cd0:	0800a784 	.word	0x0800a784
 8000cd4:	0800a7a0 	.word	0x0800a7a0
 8000cd8:	0800a7d0 	.word	0x0800a7d0
 8000cdc:	0800a7f4 	.word	0x0800a7f4
 8000ce0:	58021000 	.word	0x58021000
 8000ce4:	240000b8 	.word	0x240000b8
 8000ce8:	0800a81c 	.word	0x0800a81c
 8000cec:	0800a850 	.word	0x0800a850
 8000cf0:	0800a86c 	.word	0x0800a86c
 8000cf4:	0800a890 	.word	0x0800a890
 8000cf8:	0800a8a4 	.word	0x0800a8a4
 8000cfc:	0800a8b8 	.word	0x0800a8b8
 8000d00:	0800a8c8 	.word	0x0800a8c8
 8000d04:	0800a8f4 	.word	0x0800a8f4
 8000d08:	0800a91c 	.word	0x0800a91c
 8000d0c:	0800a950 	.word	0x0800a950
 8000d10:	0800a978 	.word	0x0800a978
 8000d14:	0800a998 	.word	0x0800a998
 8000d18:	240000b4 	.word	0x240000b4
 8000d1c:	0800a9c8 	.word	0x0800a9c8
 8000d20:	0800a9f0 	.word	0x0800a9f0
 8000d24:	0800aa18 	.word	0x0800aa18
 8000d28:	0800aa2c 	.word	0x0800aa2c
 8000d2c:	0800aa44 	.word	0x0800aa44

08000d30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b09c      	sub	sp, #112	@ 0x70
 8000d34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d3a:	224c      	movs	r2, #76	@ 0x4c
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f007 f8e3 	bl	8007f0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	2220      	movs	r2, #32
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f007 f8dd 	bl	8007f0a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d50:	2002      	movs	r0, #2
 8000d52:	f001 fd45 	bl	80027e0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d56:	2300      	movs	r3, #0
 8000d58:	603b      	str	r3, [r7, #0]
 8000d5a:	4b32      	ldr	r3, [pc, #200]	@ (8000e24 <SystemClock_Config+0xf4>)
 8000d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d5e:	4a31      	ldr	r2, [pc, #196]	@ (8000e24 <SystemClock_Config+0xf4>)
 8000d60:	f023 0301 	bic.w	r3, r3, #1
 8000d64:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d66:	4b2f      	ldr	r3, [pc, #188]	@ (8000e24 <SystemClock_Config+0xf4>)
 8000d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	4b2d      	ldr	r3, [pc, #180]	@ (8000e28 <SystemClock_Config+0xf8>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d78:	4a2b      	ldr	r2, [pc, #172]	@ (8000e28 <SystemClock_Config+0xf8>)
 8000d7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d7e:	6193      	str	r3, [r2, #24]
 8000d80:	4b29      	ldr	r3, [pc, #164]	@ (8000e28 <SystemClock_Config+0xf8>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d88:	603b      	str	r3, [r7, #0]
 8000d8a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d8c:	bf00      	nop
 8000d8e:	4b26      	ldr	r3, [pc, #152]	@ (8000e28 <SystemClock_Config+0xf8>)
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d9a:	d1f8      	bne.n	8000d8e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000da0:	2301      	movs	r3, #1
 8000da2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000da4:	2340      	movs	r3, #64	@ 0x40
 8000da6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da8:	2302      	movs	r3, #2
 8000daa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dac:	2300      	movs	r3, #0
 8000dae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000db0:	2304      	movs	r3, #4
 8000db2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000db4:	230a      	movs	r3, #10
 8000db6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000db8:	2302      	movs	r3, #2
 8000dba:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000dc4:	230c      	movs	r3, #12
 8000dc6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f001 fd3d 	bl	8002854 <HAL_RCC_OscConfig>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000de0:	f000 f94a 	bl	8001078 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de4:	233f      	movs	r3, #63	@ 0x3f
 8000de6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000df0:	2300      	movs	r3, #0
 8000df2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000dfc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e00:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000e02:	2300      	movs	r3, #0
 8000e04:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	2101      	movs	r1, #1
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f002 f97c 	bl	8003108 <HAL_RCC_ClockConfig>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000e16:	f000 f92f 	bl	8001078 <Error_Handler>
  }
}
 8000e1a:	bf00      	nop
 8000e1c:	3770      	adds	r7, #112	@ 0x70
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	58000400 	.word	0x58000400
 8000e28:	58024800 	.word	0x58024800

08000e2c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000e30:	4b27      	ldr	r3, [pc, #156]	@ (8000ed0 <MX_SPI2_Init+0xa4>)
 8000e32:	4a28      	ldr	r2, [pc, #160]	@ (8000ed4 <MX_SPI2_Init+0xa8>)
 8000e34:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e36:	4b26      	ldr	r3, [pc, #152]	@ (8000ed0 <MX_SPI2_Init+0xa4>)
 8000e38:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000e3c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e3e:	4b24      	ldr	r3, [pc, #144]	@ (8000ed0 <MX_SPI2_Init+0xa4>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e44:	4b22      	ldr	r3, [pc, #136]	@ (8000ed0 <MX_SPI2_Init+0xa4>)
 8000e46:	2203      	movs	r2, #3
 8000e48:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e4a:	4b21      	ldr	r3, [pc, #132]	@ (8000ed0 <MX_SPI2_Init+0xa4>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e50:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed0 <MX_SPI2_Init+0xa4>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000e56:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed0 <MX_SPI2_Init+0xa4>)
 8000e58:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000e5c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed0 <MX_SPI2_Init+0xa4>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e64:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed0 <MX_SPI2_Init+0xa4>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e6a:	4b19      	ldr	r3, [pc, #100]	@ (8000ed0 <MX_SPI2_Init+0xa4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e70:	4b17      	ldr	r3, [pc, #92]	@ (8000ed0 <MX_SPI2_Init+0xa4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000e76:	4b16      	ldr	r3, [pc, #88]	@ (8000ed0 <MX_SPI2_Init+0xa4>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e7c:	4b14      	ldr	r3, [pc, #80]	@ (8000ed0 <MX_SPI2_Init+0xa4>)
 8000e7e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e82:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e84:	4b12      	ldr	r3, [pc, #72]	@ (8000ed0 <MX_SPI2_Init+0xa4>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e8a:	4b11      	ldr	r3, [pc, #68]	@ (8000ed0 <MX_SPI2_Init+0xa4>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e90:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed0 <MX_SPI2_Init+0xa4>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed0 <MX_SPI2_Init+0xa4>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <MX_SPI2_Init+0xa4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed0 <MX_SPI2_Init+0xa4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ea8:	4b09      	ldr	r3, [pc, #36]	@ (8000ed0 <MX_SPI2_Init+0xa4>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000eae:	4b08      	ldr	r3, [pc, #32]	@ (8000ed0 <MX_SPI2_Init+0xa4>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <MX_SPI2_Init+0xa4>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000eba:	4805      	ldr	r0, [pc, #20]	@ (8000ed0 <MX_SPI2_Init+0xa4>)
 8000ebc:	f004 fadc 	bl	8005478 <HAL_SPI_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000ec6:	f000 f8d7 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	240000b8 	.word	0x240000b8
 8000ed4:	40003800 	.word	0x40003800

08000ed8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08c      	sub	sp, #48	@ 0x30
 8000edc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ede:	f107 031c 	add.w	r3, r7, #28
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
 8000eec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eee:	4b3f      	ldr	r3, [pc, #252]	@ (8000fec <MX_GPIO_Init+0x114>)
 8000ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ef4:	4a3d      	ldr	r2, [pc, #244]	@ (8000fec <MX_GPIO_Init+0x114>)
 8000ef6:	f043 0310 	orr.w	r3, r3, #16
 8000efa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000efe:	4b3b      	ldr	r3, [pc, #236]	@ (8000fec <MX_GPIO_Init+0x114>)
 8000f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f04:	f003 0310 	and.w	r3, r3, #16
 8000f08:	61bb      	str	r3, [r7, #24]
 8000f0a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0c:	4b37      	ldr	r3, [pc, #220]	@ (8000fec <MX_GPIO_Init+0x114>)
 8000f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f12:	4a36      	ldr	r2, [pc, #216]	@ (8000fec <MX_GPIO_Init+0x114>)
 8000f14:	f043 0304 	orr.w	r3, r3, #4
 8000f18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f1c:	4b33      	ldr	r3, [pc, #204]	@ (8000fec <MX_GPIO_Init+0x114>)
 8000f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f22:	f003 0304 	and.w	r3, r3, #4
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f2a:	4b30      	ldr	r3, [pc, #192]	@ (8000fec <MX_GPIO_Init+0x114>)
 8000f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f30:	4a2e      	ldr	r2, [pc, #184]	@ (8000fec <MX_GPIO_Init+0x114>)
 8000f32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f3a:	4b2c      	ldr	r3, [pc, #176]	@ (8000fec <MX_GPIO_Init+0x114>)
 8000f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f44:	613b      	str	r3, [r7, #16]
 8000f46:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f48:	4b28      	ldr	r3, [pc, #160]	@ (8000fec <MX_GPIO_Init+0x114>)
 8000f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f4e:	4a27      	ldr	r2, [pc, #156]	@ (8000fec <MX_GPIO_Init+0x114>)
 8000f50:	f043 0302 	orr.w	r3, r3, #2
 8000f54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f58:	4b24      	ldr	r3, [pc, #144]	@ (8000fec <MX_GPIO_Init+0x114>)
 8000f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	4b21      	ldr	r3, [pc, #132]	@ (8000fec <MX_GPIO_Init+0x114>)
 8000f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f6c:	4a1f      	ldr	r2, [pc, #124]	@ (8000fec <MX_GPIO_Init+0x114>)
 8000f6e:	f043 0301 	orr.w	r3, r3, #1
 8000f72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f76:	4b1d      	ldr	r3, [pc, #116]	@ (8000fec <MX_GPIO_Init+0x114>)
 8000f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f84:	4b19      	ldr	r3, [pc, #100]	@ (8000fec <MX_GPIO_Init+0x114>)
 8000f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8a:	4a18      	ldr	r2, [pc, #96]	@ (8000fec <MX_GPIO_Init+0x114>)
 8000f8c:	f043 0308 	orr.w	r3, r3, #8
 8000f90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f94:	4b15      	ldr	r3, [pc, #84]	@ (8000fec <MX_GPIO_Init+0x114>)
 8000f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f9a:	f003 0308 	and.w	r3, r3, #8
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2110      	movs	r1, #16
 8000fa6:	4812      	ldr	r0, [pc, #72]	@ (8000ff0 <MX_GPIO_Init+0x118>)
 8000fa8:	f001 fbe6 	bl	8002778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fac:	2310      	movs	r3, #16
 8000fae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fbc:	f107 031c 	add.w	r3, r7, #28
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	480b      	ldr	r0, [pc, #44]	@ (8000ff0 <MX_GPIO_Init+0x118>)
 8000fc4:	f001 fa10 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fc8:	2310      	movs	r3, #16
 8000fca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fcc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000fd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fd6:	f107 031c 	add.w	r3, r7, #28
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4805      	ldr	r0, [pc, #20]	@ (8000ff4 <MX_GPIO_Init+0x11c>)
 8000fde:	f001 fa03 	bl	80023e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fe2:	bf00      	nop
 8000fe4:	3730      	adds	r7, #48	@ 0x30
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	58024400 	.word	0x58024400
 8000ff0:	58021000 	.word	0x58021000
 8000ff4:	58020c00 	.word	0x58020c00

08000ff8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ffe:	463b      	mov	r3, r7
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800100a:	f000 fecb 	bl	8001da4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800100e:	2301      	movs	r3, #1
 8001010:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001012:	2300      	movs	r3, #0
 8001014:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001016:	2300      	movs	r3, #0
 8001018:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800101a:	231f      	movs	r3, #31
 800101c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800101e:	2387      	movs	r3, #135	@ 0x87
 8001020:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001022:	2300      	movs	r3, #0
 8001024:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001026:	2300      	movs	r3, #0
 8001028:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800102a:	2301      	movs	r3, #1
 800102c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800102e:	2301      	movs	r3, #1
 8001030:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001032:	2300      	movs	r3, #0
 8001034:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001036:	2300      	movs	r3, #0
 8001038:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800103a:	463b      	mov	r3, r7
 800103c:	4618      	mov	r0, r3
 800103e:	f000 fee9 	bl	8001e14 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001042:	2004      	movs	r0, #4
 8001044:	f000 fec6 	bl	8001dd4 <HAL_MPU_Enable>

}
 8001048:	bf00      	nop
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d102      	bne.n	8001066 <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8001060:	4b04      	ldr	r3, [pc, #16]	@ (8001074 <BSP_PB_Callback+0x24>)
 8001062:	2201      	movs	r2, #1
 8001064:	601a      	str	r2, [r3, #0]
  }
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	240000b4 	.word	0x240000b4

08001078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800107c:	b672      	cpsid	i
}
 800107e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001080:	bf00      	nop
 8001082:	e7fd      	b.n	8001080 <Error_Handler+0x8>

08001084 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108a:	4b0a      	ldr	r3, [pc, #40]	@ (80010b4 <HAL_MspInit+0x30>)
 800108c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001090:	4a08      	ldr	r2, [pc, #32]	@ (80010b4 <HAL_MspInit+0x30>)
 8001092:	f043 0302 	orr.w	r3, r3, #2
 8001096:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800109a:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <HAL_MspInit+0x30>)
 800109c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	58024400 	.word	0x58024400

080010b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b0ba      	sub	sp, #232	@ 0xe8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d0:	f107 0310 	add.w	r3, r7, #16
 80010d4:	22c0      	movs	r2, #192	@ 0xc0
 80010d6:	2100      	movs	r1, #0
 80010d8:	4618      	mov	r0, r3
 80010da:	f006 ff16 	bl	8007f0a <memset>
  if(hspi->Instance==SPI2)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a35      	ldr	r2, [pc, #212]	@ (80011b8 <HAL_SPI_MspInit+0x100>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d163      	bne.n	80011b0 <HAL_SPI_MspInit+0xf8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80010e8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80010ec:	f04f 0300 	mov.w	r3, #0
 80010f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010f8:	f107 0310 	add.w	r3, r7, #16
 80010fc:	4618      	mov	r0, r3
 80010fe:	f002 fb8f 	bl	8003820 <HAL_RCCEx_PeriphCLKConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001108:	f7ff ffb6 	bl	8001078 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800110c:	4b2b      	ldr	r3, [pc, #172]	@ (80011bc <HAL_SPI_MspInit+0x104>)
 800110e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001112:	4a2a      	ldr	r2, [pc, #168]	@ (80011bc <HAL_SPI_MspInit+0x104>)
 8001114:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001118:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800111c:	4b27      	ldr	r3, [pc, #156]	@ (80011bc <HAL_SPI_MspInit+0x104>)
 800111e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001122:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	4b24      	ldr	r3, [pc, #144]	@ (80011bc <HAL_SPI_MspInit+0x104>)
 800112c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001130:	4a22      	ldr	r2, [pc, #136]	@ (80011bc <HAL_SPI_MspInit+0x104>)
 8001132:	f043 0302 	orr.w	r3, r3, #2
 8001136:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800113a:	4b20      	ldr	r3, [pc, #128]	@ (80011bc <HAL_SPI_MspInit+0x104>)
 800113c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001148:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800114c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001150:	2302      	movs	r3, #2
 8001152:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001156:	2301      	movs	r3, #1
 8001158:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001162:	2305      	movs	r3, #5
 8001164:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001168:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800116c:	4619      	mov	r1, r3
 800116e:	4814      	ldr	r0, [pc, #80]	@ (80011c0 <HAL_SPI_MspInit+0x108>)
 8001170:	f001 f93a 	bl	80023e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001174:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001178:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117c:	2302      	movs	r3, #2
 800117e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800118e:	2305      	movs	r3, #5
 8001190:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001194:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001198:	4619      	mov	r1, r3
 800119a:	4809      	ldr	r0, [pc, #36]	@ (80011c0 <HAL_SPI_MspInit+0x108>)
 800119c:	f001 f924 	bl	80023e8 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2100      	movs	r1, #0
 80011a4:	2024      	movs	r0, #36	@ 0x24
 80011a6:	f000 fdc8 	bl	8001d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80011aa:	2024      	movs	r0, #36	@ 0x24
 80011ac:	f000 fddf 	bl	8001d6e <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80011b0:	bf00      	nop
 80011b2:	37e8      	adds	r7, #232	@ 0xe8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40003800 	.word	0x40003800
 80011bc:	58024400 	.word	0x58024400
 80011c0:	58020400 	.word	0x58020400

080011c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <NMI_Handler+0x4>

080011cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <HardFault_Handler+0x4>

080011d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <MemManage_Handler+0x4>

080011dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <BusFault_Handler+0x4>

080011e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e8:	bf00      	nop
 80011ea:	e7fd      	b.n	80011e8 <UsageFault_Handler+0x4>

080011ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800121a:	f000 fc63 	bl	8001ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001228:	4802      	ldr	r0, [pc, #8]	@ (8001234 <SPI2_IRQHandler+0x10>)
 800122a:	f005 f9e3 	bl	80065f4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	240000b8 	.word	0x240000b8

08001238 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800123c:	2000      	movs	r0, #0
 800123e:	f000 faef 	bl	8001820 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}

08001246 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b086      	sub	sp, #24
 800124a:	af00      	add	r7, sp, #0
 800124c:	60f8      	str	r0, [r7, #12]
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	e00a      	b.n	800126e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001258:	f3af 8000 	nop.w
 800125c:	4601      	mov	r1, r0
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	1c5a      	adds	r2, r3, #1
 8001262:	60ba      	str	r2, [r7, #8]
 8001264:	b2ca      	uxtb	r2, r1
 8001266:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	3301      	adds	r3, #1
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	429a      	cmp	r2, r3
 8001274:	dbf0      	blt.n	8001258 <_read+0x12>
  }

  return len;
 8001276:	687b      	ldr	r3, [r7, #4]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
 8001290:	e009      	b.n	80012a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	1c5a      	adds	r2, r3, #1
 8001296:	60ba      	str	r2, [r7, #8]
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f000 fb34 	bl	8001908 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	3301      	adds	r3, #1
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	697a      	ldr	r2, [r7, #20]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	dbf1      	blt.n	8001292 <_write+0x12>
  }
  return len;
 80012ae:	687b      	ldr	r3, [r7, #4]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <_close>:

int _close(int file)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012e0:	605a      	str	r2, [r3, #4]
  return 0;
 80012e2:	2300      	movs	r3, #0
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <_isatty>:

int _isatty(int file)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012f8:	2301      	movs	r3, #1
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001306:	b480      	push	{r7}
 8001308:	b085      	sub	sp, #20
 800130a:	af00      	add	r7, sp, #0
 800130c:	60f8      	str	r0, [r7, #12]
 800130e:	60b9      	str	r1, [r7, #8]
 8001310:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001328:	4a14      	ldr	r2, [pc, #80]	@ (800137c <_sbrk+0x5c>)
 800132a:	4b15      	ldr	r3, [pc, #84]	@ (8001380 <_sbrk+0x60>)
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001334:	4b13      	ldr	r3, [pc, #76]	@ (8001384 <_sbrk+0x64>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d102      	bne.n	8001342 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800133c:	4b11      	ldr	r3, [pc, #68]	@ (8001384 <_sbrk+0x64>)
 800133e:	4a12      	ldr	r2, [pc, #72]	@ (8001388 <_sbrk+0x68>)
 8001340:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001342:	4b10      	ldr	r3, [pc, #64]	@ (8001384 <_sbrk+0x64>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	429a      	cmp	r2, r3
 800134e:	d207      	bcs.n	8001360 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001350:	f006 fe2a 	bl	8007fa8 <__errno>
 8001354:	4603      	mov	r3, r0
 8001356:	220c      	movs	r2, #12
 8001358:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800135a:	f04f 33ff 	mov.w	r3, #4294967295
 800135e:	e009      	b.n	8001374 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001360:	4b08      	ldr	r3, [pc, #32]	@ (8001384 <_sbrk+0x64>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001366:	4b07      	ldr	r3, [pc, #28]	@ (8001384 <_sbrk+0x64>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4413      	add	r3, r2
 800136e:	4a05      	ldr	r2, [pc, #20]	@ (8001384 <_sbrk+0x64>)
 8001370:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001372:	68fb      	ldr	r3, [r7, #12]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3718      	adds	r7, #24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	24080000 	.word	0x24080000
 8001380:	00000400 	.word	0x00000400
 8001384:	24000140 	.word	0x24000140
 8001388:	24000338 	.word	0x24000338

0800138c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001390:	4b43      	ldr	r3, [pc, #268]	@ (80014a0 <SystemInit+0x114>)
 8001392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001396:	4a42      	ldr	r2, [pc, #264]	@ (80014a0 <SystemInit+0x114>)
 8001398:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800139c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013a0:	4b40      	ldr	r3, [pc, #256]	@ (80014a4 <SystemInit+0x118>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 030f 	and.w	r3, r3, #15
 80013a8:	2b06      	cmp	r3, #6
 80013aa:	d807      	bhi.n	80013bc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013ac:	4b3d      	ldr	r3, [pc, #244]	@ (80014a4 <SystemInit+0x118>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f023 030f 	bic.w	r3, r3, #15
 80013b4:	4a3b      	ldr	r2, [pc, #236]	@ (80014a4 <SystemInit+0x118>)
 80013b6:	f043 0307 	orr.w	r3, r3, #7
 80013ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80013bc:	4b3a      	ldr	r3, [pc, #232]	@ (80014a8 <SystemInit+0x11c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a39      	ldr	r2, [pc, #228]	@ (80014a8 <SystemInit+0x11c>)
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013c8:	4b37      	ldr	r3, [pc, #220]	@ (80014a8 <SystemInit+0x11c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80013ce:	4b36      	ldr	r3, [pc, #216]	@ (80014a8 <SystemInit+0x11c>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	4935      	ldr	r1, [pc, #212]	@ (80014a8 <SystemInit+0x11c>)
 80013d4:	4b35      	ldr	r3, [pc, #212]	@ (80014ac <SystemInit+0x120>)
 80013d6:	4013      	ands	r3, r2
 80013d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013da:	4b32      	ldr	r3, [pc, #200]	@ (80014a4 <SystemInit+0x118>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d007      	beq.n	80013f6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013e6:	4b2f      	ldr	r3, [pc, #188]	@ (80014a4 <SystemInit+0x118>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f023 030f 	bic.w	r3, r3, #15
 80013ee:	4a2d      	ldr	r2, [pc, #180]	@ (80014a4 <SystemInit+0x118>)
 80013f0:	f043 0307 	orr.w	r3, r3, #7
 80013f4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80013f6:	4b2c      	ldr	r3, [pc, #176]	@ (80014a8 <SystemInit+0x11c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80013fc:	4b2a      	ldr	r3, [pc, #168]	@ (80014a8 <SystemInit+0x11c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001402:	4b29      	ldr	r3, [pc, #164]	@ (80014a8 <SystemInit+0x11c>)
 8001404:	2200      	movs	r2, #0
 8001406:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001408:	4b27      	ldr	r3, [pc, #156]	@ (80014a8 <SystemInit+0x11c>)
 800140a:	4a29      	ldr	r2, [pc, #164]	@ (80014b0 <SystemInit+0x124>)
 800140c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800140e:	4b26      	ldr	r3, [pc, #152]	@ (80014a8 <SystemInit+0x11c>)
 8001410:	4a28      	ldr	r2, [pc, #160]	@ (80014b4 <SystemInit+0x128>)
 8001412:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001414:	4b24      	ldr	r3, [pc, #144]	@ (80014a8 <SystemInit+0x11c>)
 8001416:	4a28      	ldr	r2, [pc, #160]	@ (80014b8 <SystemInit+0x12c>)
 8001418:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800141a:	4b23      	ldr	r3, [pc, #140]	@ (80014a8 <SystemInit+0x11c>)
 800141c:	2200      	movs	r2, #0
 800141e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001420:	4b21      	ldr	r3, [pc, #132]	@ (80014a8 <SystemInit+0x11c>)
 8001422:	4a25      	ldr	r2, [pc, #148]	@ (80014b8 <SystemInit+0x12c>)
 8001424:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001426:	4b20      	ldr	r3, [pc, #128]	@ (80014a8 <SystemInit+0x11c>)
 8001428:	2200      	movs	r2, #0
 800142a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800142c:	4b1e      	ldr	r3, [pc, #120]	@ (80014a8 <SystemInit+0x11c>)
 800142e:	4a22      	ldr	r2, [pc, #136]	@ (80014b8 <SystemInit+0x12c>)
 8001430:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001432:	4b1d      	ldr	r3, [pc, #116]	@ (80014a8 <SystemInit+0x11c>)
 8001434:	2200      	movs	r2, #0
 8001436:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001438:	4b1b      	ldr	r3, [pc, #108]	@ (80014a8 <SystemInit+0x11c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a1a      	ldr	r2, [pc, #104]	@ (80014a8 <SystemInit+0x11c>)
 800143e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001442:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001444:	4b18      	ldr	r3, [pc, #96]	@ (80014a8 <SystemInit+0x11c>)
 8001446:	2200      	movs	r2, #0
 8001448:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800144a:	4b1c      	ldr	r3, [pc, #112]	@ (80014bc <SystemInit+0x130>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	4b1c      	ldr	r3, [pc, #112]	@ (80014c0 <SystemInit+0x134>)
 8001450:	4013      	ands	r3, r2
 8001452:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001456:	d202      	bcs.n	800145e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001458:	4b1a      	ldr	r3, [pc, #104]	@ (80014c4 <SystemInit+0x138>)
 800145a:	2201      	movs	r2, #1
 800145c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800145e:	4b12      	ldr	r3, [pc, #72]	@ (80014a8 <SystemInit+0x11c>)
 8001460:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001464:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d113      	bne.n	8001494 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800146c:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <SystemInit+0x11c>)
 800146e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001472:	4a0d      	ldr	r2, [pc, #52]	@ (80014a8 <SystemInit+0x11c>)
 8001474:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001478:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800147c:	4b12      	ldr	r3, [pc, #72]	@ (80014c8 <SystemInit+0x13c>)
 800147e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001482:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001484:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <SystemInit+0x11c>)
 8001486:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800148a:	4a07      	ldr	r2, [pc, #28]	@ (80014a8 <SystemInit+0x11c>)
 800148c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001490:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000ed00 	.word	0xe000ed00
 80014a4:	52002000 	.word	0x52002000
 80014a8:	58024400 	.word	0x58024400
 80014ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80014b0:	02020200 	.word	0x02020200
 80014b4:	01ff0000 	.word	0x01ff0000
 80014b8:	01010280 	.word	0x01010280
 80014bc:	5c001000 	.word	0x5c001000
 80014c0:	ffff0000 	.word	0xffff0000
 80014c4:	51008108 	.word	0x51008108
 80014c8:	52004000 	.word	0x52004000

080014cc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80014d0:	4b09      	ldr	r3, [pc, #36]	@ (80014f8 <ExitRun0Mode+0x2c>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	4a08      	ldr	r2, [pc, #32]	@ (80014f8 <ExitRun0Mode+0x2c>)
 80014d6:	f043 0302 	orr.w	r3, r3, #2
 80014da:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80014dc:	bf00      	nop
 80014de:	4b06      	ldr	r3, [pc, #24]	@ (80014f8 <ExitRun0Mode+0x2c>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d0f9      	beq.n	80014de <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80014ea:	bf00      	nop
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	58024800 	.word	0x58024800

080014fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014fc:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001538 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001500:	f7ff ffe4 	bl	80014cc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001504:	f7ff ff42 	bl	800138c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001508:	480c      	ldr	r0, [pc, #48]	@ (800153c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800150a:	490d      	ldr	r1, [pc, #52]	@ (8001540 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800150c:	4a0d      	ldr	r2, [pc, #52]	@ (8001544 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001510:	e002      	b.n	8001518 <LoopCopyDataInit>

08001512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001516:	3304      	adds	r3, #4

08001518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800151a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800151c:	d3f9      	bcc.n	8001512 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800151e:	4a0a      	ldr	r2, [pc, #40]	@ (8001548 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001520:	4c0a      	ldr	r4, [pc, #40]	@ (800154c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001524:	e001      	b.n	800152a <LoopFillZerobss>

08001526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001528:	3204      	adds	r2, #4

0800152a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800152a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800152c:	d3fb      	bcc.n	8001526 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800152e:	f006 fd41 	bl	8007fb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001532:	f7ff faaf 	bl	8000a94 <main>
  bx  lr
 8001536:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001538:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800153c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001540:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8001544:	0800ab50 	.word	0x0800ab50
  ldr r2, =_sbss
 8001548:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 800154c:	24000334 	.word	0x24000334

08001550 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001550:	e7fe      	b.n	8001550 <ADC3_IRQHandler>
	...

08001554 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08c      	sub	sp, #48	@ 0x30
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800155e:	2300      	movs	r3, #0
 8001560:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d009      	beq.n	800157c <BSP_LED_Init+0x28>
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d006      	beq.n	800157c <BSP_LED_Init+0x28>
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	2b02      	cmp	r3, #2
 8001572:	d003      	beq.n	800157c <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001574:	f06f 0301 	mvn.w	r3, #1
 8001578:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800157a:	e055      	b.n	8001628 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10f      	bne.n	80015a2 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8001582:	4b2c      	ldr	r3, [pc, #176]	@ (8001634 <BSP_LED_Init+0xe0>)
 8001584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001588:	4a2a      	ldr	r2, [pc, #168]	@ (8001634 <BSP_LED_Init+0xe0>)
 800158a:	f043 0302 	orr.w	r3, r3, #2
 800158e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001592:	4b28      	ldr	r3, [pc, #160]	@ (8001634 <BSP_LED_Init+0xe0>)
 8001594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	617b      	str	r3, [r7, #20]
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	e021      	b.n	80015e6 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d10f      	bne.n	80015c8 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80015a8:	4b22      	ldr	r3, [pc, #136]	@ (8001634 <BSP_LED_Init+0xe0>)
 80015aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ae:	4a21      	ldr	r2, [pc, #132]	@ (8001634 <BSP_LED_Init+0xe0>)
 80015b0:	f043 0310 	orr.w	r3, r3, #16
 80015b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001634 <BSP_LED_Init+0xe0>)
 80015ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015be:	f003 0310 	and.w	r3, r3, #16
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	e00e      	b.n	80015e6 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80015c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001634 <BSP_LED_Init+0xe0>)
 80015ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ce:	4a19      	ldr	r2, [pc, #100]	@ (8001634 <BSP_LED_Init+0xe0>)
 80015d0:	f043 0302 	orr.w	r3, r3, #2
 80015d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015d8:	4b16      	ldr	r3, [pc, #88]	@ (8001634 <BSP_LED_Init+0xe0>)
 80015da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	4a13      	ldr	r2, [pc, #76]	@ (8001638 <BSP_LED_Init+0xe4>)
 80015ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015ee:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80015f0:	2301      	movs	r3, #1
 80015f2:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f8:	2303      	movs	r3, #3
 80015fa:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	4a0f      	ldr	r2, [pc, #60]	@ (800163c <BSP_LED_Init+0xe8>)
 8001600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001604:	f107 0218 	add.w	r2, r7, #24
 8001608:	4611      	mov	r1, r2
 800160a:	4618      	mov	r0, r3
 800160c:	f000 feec 	bl	80023e8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	4a0a      	ldr	r2, [pc, #40]	@ (800163c <BSP_LED_Init+0xe8>)
 8001614:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	4a07      	ldr	r2, [pc, #28]	@ (8001638 <BSP_LED_Init+0xe4>)
 800161c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001620:	2200      	movs	r2, #0
 8001622:	4619      	mov	r1, r3
 8001624:	f001 f8a8 	bl	8002778 <HAL_GPIO_WritePin>
  }

  return ret;
 8001628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800162a:	4618      	mov	r0, r3
 800162c:	3730      	adds	r7, #48	@ 0x30
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	58024400 	.word	0x58024400
 8001638:	0800aae8 	.word	0x0800aae8
 800163c:	2400000c 	.word	0x2400000c

08001640 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d009      	beq.n	8001668 <BSP_LED_On+0x28>
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d006      	beq.n	8001668 <BSP_LED_On+0x28>
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	2b02      	cmp	r3, #2
 800165e:	d003      	beq.n	8001668 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001660:	f06f 0301 	mvn.w	r3, #1
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	e00b      	b.n	8001680 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	4a08      	ldr	r2, [pc, #32]	@ (800168c <BSP_LED_On+0x4c>)
 800166c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	4a07      	ldr	r2, [pc, #28]	@ (8001690 <BSP_LED_On+0x50>)
 8001674:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001678:	2201      	movs	r2, #1
 800167a:	4619      	mov	r1, r3
 800167c:	f001 f87c 	bl	8002778 <HAL_GPIO_WritePin>
  }

  return ret;
 8001680:	68fb      	ldr	r3, [r7, #12]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	2400000c 	.word	0x2400000c
 8001690:	0800aae8 	.word	0x0800aae8

08001694 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d009      	beq.n	80016bc <BSP_LED_Off+0x28>
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d006      	beq.n	80016bc <BSP_LED_Off+0x28>
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d003      	beq.n	80016bc <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80016b4:	f06f 0301 	mvn.w	r3, #1
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	e00b      	b.n	80016d4 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	4a08      	ldr	r2, [pc, #32]	@ (80016e0 <BSP_LED_Off+0x4c>)
 80016c0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	4a07      	ldr	r2, [pc, #28]	@ (80016e4 <BSP_LED_Off+0x50>)
 80016c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016cc:	2200      	movs	r2, #0
 80016ce:	4619      	mov	r1, r3
 80016d0:	f001 f852 	bl	8002778 <HAL_GPIO_WritePin>
  }

  return ret;
 80016d4:	68fb      	ldr	r3, [r7, #12]
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	2400000c 	.word	0x2400000c
 80016e4:	0800aae8 	.word	0x0800aae8

080016e8 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d009      	beq.n	8001710 <BSP_LED_Toggle+0x28>
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d006      	beq.n	8001710 <BSP_LED_Toggle+0x28>
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	2b02      	cmp	r3, #2
 8001706:	d003      	beq.n	8001710 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001708:	f06f 0301 	mvn.w	r3, #1
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	e00b      	b.n	8001728 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	4a08      	ldr	r2, [pc, #32]	@ (8001734 <BSP_LED_Toggle+0x4c>)
 8001714:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	4907      	ldr	r1, [pc, #28]	@ (8001738 <BSP_LED_Toggle+0x50>)
 800171c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001720:	4619      	mov	r1, r3
 8001722:	4610      	mov	r0, r2
 8001724:	f001 f841 	bl	80027aa <HAL_GPIO_TogglePin>
  }

  return ret;
 8001728:	68fb      	ldr	r3, [r7, #12]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	2400000c 	.word	0x2400000c
 8001738:	0800aae8 	.word	0x0800aae8

0800173c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	460a      	mov	r2, r1
 8001746:	71fb      	strb	r3, [r7, #7]
 8001748:	4613      	mov	r3, r2
 800174a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 800174c:	4b2e      	ldr	r3, [pc, #184]	@ (8001808 <BSP_PB_Init+0xcc>)
 800174e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001752:	4a2d      	ldr	r2, [pc, #180]	@ (8001808 <BSP_PB_Init+0xcc>)
 8001754:	f043 0304 	orr.w	r3, r3, #4
 8001758:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800175c:	4b2a      	ldr	r3, [pc, #168]	@ (8001808 <BSP_PB_Init+0xcc>)
 800175e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001762:	f003 0304 	and.w	r3, r3, #4
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800176a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800176e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001770:	2302      	movs	r3, #2
 8001772:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001774:	2302      	movs	r3, #2
 8001776:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001778:	79bb      	ldrb	r3, [r7, #6]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10c      	bne.n	8001798 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	4a21      	ldr	r2, [pc, #132]	@ (800180c <BSP_PB_Init+0xd0>)
 8001786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800178a:	f107 020c 	add.w	r2, r7, #12
 800178e:	4611      	mov	r1, r2
 8001790:	4618      	mov	r0, r3
 8001792:	f000 fe29 	bl	80023e8 <HAL_GPIO_Init>
 8001796:	e031      	b.n	80017fc <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001798:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800179c:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	4a1a      	ldr	r2, [pc, #104]	@ (800180c <BSP_PB_Init+0xd0>)
 80017a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a6:	f107 020c 	add.w	r2, r7, #12
 80017aa:	4611      	mov	r1, r2
 80017ac:	4618      	mov	r0, r3
 80017ae:	f000 fe1b 	bl	80023e8 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	4a16      	ldr	r2, [pc, #88]	@ (8001810 <BSP_PB_Init+0xd4>)
 80017b8:	441a      	add	r2, r3
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	4915      	ldr	r1, [pc, #84]	@ (8001814 <BSP_PB_Init+0xd8>)
 80017be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017c2:	4619      	mov	r1, r3
 80017c4:	4610      	mov	r0, r2
 80017c6:	f000 fdca 	bl	800235e <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	4a10      	ldr	r2, [pc, #64]	@ (8001810 <BSP_PB_Init+0xd4>)
 80017d0:	1898      	adds	r0, r3, r2
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	4a10      	ldr	r2, [pc, #64]	@ (8001818 <BSP_PB_Init+0xdc>)
 80017d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017da:	461a      	mov	r2, r3
 80017dc:	2100      	movs	r1, #0
 80017de:	f000 fd9f 	bl	8002320 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80017e2:	2028      	movs	r0, #40	@ 0x28
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	4a0d      	ldr	r2, [pc, #52]	@ (800181c <BSP_PB_Init+0xe0>)
 80017e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ec:	2200      	movs	r2, #0
 80017ee:	4619      	mov	r1, r3
 80017f0:	f000 faa3 	bl	8001d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80017f4:	2328      	movs	r3, #40	@ 0x28
 80017f6:	4618      	mov	r0, r3
 80017f8:	f000 fab9 	bl	8001d6e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3720      	adds	r7, #32
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	58024400 	.word	0x58024400
 800180c:	24000018 	.word	0x24000018
 8001810:	24000144 	.word	0x24000144
 8001814:	0800aaf0 	.word	0x0800aaf0
 8001818:	2400001c 	.word	0x2400001c
 800181c:	24000020 	.word	0x24000020

08001820 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	4a04      	ldr	r2, [pc, #16]	@ (8001840 <BSP_PB_IRQHandler+0x20>)
 8001830:	4413      	add	r3, r2
 8001832:	4618      	mov	r0, r3
 8001834:	f000 fda8 	bl	8002388 <HAL_EXTI_IRQHandler>
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	24000144 	.word	0x24000144

08001844 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	6039      	str	r1, [r7, #0]
 800184e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800185a:	f06f 0301 	mvn.w	r3, #1
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	e018      	b.n	8001894 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	2294      	movs	r2, #148	@ 0x94
 8001866:	fb02 f303 	mul.w	r3, r2, r3
 800186a:	4a0d      	ldr	r2, [pc, #52]	@ (80018a0 <BSP_COM_Init+0x5c>)
 800186c:	4413      	add	r3, r2
 800186e:	4618      	mov	r0, r3
 8001870:	f000 f86e 	bl	8001950 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	2294      	movs	r2, #148	@ 0x94
 8001878:	fb02 f303 	mul.w	r3, r2, r3
 800187c:	4a08      	ldr	r2, [pc, #32]	@ (80018a0 <BSP_COM_Init+0x5c>)
 800187e:	4413      	add	r3, r2
 8001880:	6839      	ldr	r1, [r7, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f000 f80e 	bl	80018a4 <MX_USART3_Init>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d002      	beq.n	8001894 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800188e:	f06f 0303 	mvn.w	r3, #3
 8001892:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001894:	68fb      	ldr	r3, [r7, #12]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	2400014c 	.word	0x2400014c

080018a4 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80018ae:	4b15      	ldr	r3, [pc, #84]	@ (8001904 <MX_USART3_Init+0x60>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	220c      	movs	r2, #12
 80018c2:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	895b      	ldrh	r3, [r3, #10]
 80018c8:	461a      	mov	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	891b      	ldrh	r3, [r3, #8]
 80018da:	461a      	mov	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	899b      	ldrh	r3, [r3, #12]
 80018e4:	461a      	mov	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80018f0:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f005 f981 	bl	8006bfa <HAL_UART_Init>
 80018f8:	4603      	mov	r3, r0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	24000008 	.word	0x24000008

08001908 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001910:	4b09      	ldr	r3, [pc, #36]	@ (8001938 <__io_putchar+0x30>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	2394      	movs	r3, #148	@ 0x94
 8001918:	fb02 f303 	mul.w	r3, r2, r3
 800191c:	4a07      	ldr	r2, [pc, #28]	@ (800193c <__io_putchar+0x34>)
 800191e:	1898      	adds	r0, r3, r2
 8001920:	1d39      	adds	r1, r7, #4
 8001922:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001926:	2201      	movs	r2, #1
 8001928:	f005 f9c1 	bl	8006cae <HAL_UART_Transmit>
  return ch;
 800192c:	687b      	ldr	r3, [r7, #4]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	240001e0 	.word	0x240001e0
 800193c:	2400014c 	.word	0x2400014c

08001940 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001944:	2000      	movs	r0, #0
 8001946:	f7ff fb83 	bl	8001050 <BSP_PB_Callback>
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08a      	sub	sp, #40	@ 0x28
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001958:	4b27      	ldr	r3, [pc, #156]	@ (80019f8 <COM1_MspInit+0xa8>)
 800195a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800195e:	4a26      	ldr	r2, [pc, #152]	@ (80019f8 <COM1_MspInit+0xa8>)
 8001960:	f043 0308 	orr.w	r3, r3, #8
 8001964:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001968:	4b23      	ldr	r3, [pc, #140]	@ (80019f8 <COM1_MspInit+0xa8>)
 800196a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001976:	4b20      	ldr	r3, [pc, #128]	@ (80019f8 <COM1_MspInit+0xa8>)
 8001978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800197c:	4a1e      	ldr	r2, [pc, #120]	@ (80019f8 <COM1_MspInit+0xa8>)
 800197e:	f043 0308 	orr.w	r3, r3, #8
 8001982:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001986:	4b1c      	ldr	r3, [pc, #112]	@ (80019f8 <COM1_MspInit+0xa8>)
 8001988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800198c:	f003 0308 	and.w	r3, r3, #8
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001994:	4b18      	ldr	r3, [pc, #96]	@ (80019f8 <COM1_MspInit+0xa8>)
 8001996:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800199a:	4a17      	ldr	r2, [pc, #92]	@ (80019f8 <COM1_MspInit+0xa8>)
 800199c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019a0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80019a4:	4b14      	ldr	r3, [pc, #80]	@ (80019f8 <COM1_MspInit+0xa8>)
 80019a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 80019b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019b6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80019b8:	2302      	movs	r3, #2
 80019ba:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80019bc:	2302      	movs	r3, #2
 80019be:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80019c0:	2301      	movs	r3, #1
 80019c2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80019c4:	2307      	movs	r3, #7
 80019c6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	4619      	mov	r1, r3
 80019ce:	480b      	ldr	r0, [pc, #44]	@ (80019fc <COM1_MspInit+0xac>)
 80019d0:	f000 fd0a 	bl	80023e8 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80019d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019d8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80019da:	2302      	movs	r3, #2
 80019dc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80019de:	2307      	movs	r3, #7
 80019e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	4619      	mov	r1, r3
 80019e8:	4804      	ldr	r0, [pc, #16]	@ (80019fc <COM1_MspInit+0xac>)
 80019ea:	f000 fcfd 	bl	80023e8 <HAL_GPIO_Init>
}
 80019ee:	bf00      	nop
 80019f0:	3728      	adds	r7, #40	@ 0x28
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	58024400 	.word	0x58024400
 80019fc:	58020c00 	.word	0x58020c00

08001a00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a06:	2003      	movs	r0, #3
 8001a08:	f000 f98c 	bl	8001d24 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a0c:	f001 fd32 	bl	8003474 <HAL_RCC_GetSysClockFreq>
 8001a10:	4602      	mov	r2, r0
 8001a12:	4b15      	ldr	r3, [pc, #84]	@ (8001a68 <HAL_Init+0x68>)
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	0a1b      	lsrs	r3, r3, #8
 8001a18:	f003 030f 	and.w	r3, r3, #15
 8001a1c:	4913      	ldr	r1, [pc, #76]	@ (8001a6c <HAL_Init+0x6c>)
 8001a1e:	5ccb      	ldrb	r3, [r1, r3]
 8001a20:	f003 031f 	and.w	r3, r3, #31
 8001a24:	fa22 f303 	lsr.w	r3, r2, r3
 8001a28:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a68 <HAL_Init+0x68>)
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	4a0e      	ldr	r2, [pc, #56]	@ (8001a6c <HAL_Init+0x6c>)
 8001a34:	5cd3      	ldrb	r3, [r2, r3]
 8001a36:	f003 031f 	and.w	r3, r3, #31
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a40:	4a0b      	ldr	r2, [pc, #44]	@ (8001a70 <HAL_Init+0x70>)
 8001a42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a44:	4a0b      	ldr	r2, [pc, #44]	@ (8001a74 <HAL_Init+0x74>)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	f000 f814 	bl	8001a78 <HAL_InitTick>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e002      	b.n	8001a60 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a5a:	f7ff fb13 	bl	8001084 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	58024400 	.word	0x58024400
 8001a6c:	0800aad8 	.word	0x0800aad8
 8001a70:	24000004 	.word	0x24000004
 8001a74:	24000000 	.word	0x24000000

08001a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a80:	4b15      	ldr	r3, [pc, #84]	@ (8001ad8 <HAL_InitTick+0x60>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e021      	b.n	8001ad0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a8c:	4b13      	ldr	r3, [pc, #76]	@ (8001adc <HAL_InitTick+0x64>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b11      	ldr	r3, [pc, #68]	@ (8001ad8 <HAL_InitTick+0x60>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	4619      	mov	r1, r3
 8001a96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 f971 	bl	8001d8a <HAL_SYSTICK_Config>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e00e      	b.n	8001ad0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b0f      	cmp	r3, #15
 8001ab6:	d80a      	bhi.n	8001ace <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac0:	f000 f93b 	bl	8001d3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ac4:	4a06      	ldr	r2, [pc, #24]	@ (8001ae0 <HAL_InitTick+0x68>)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
 8001acc:	e000      	b.n	8001ad0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	24000028 	.word	0x24000028
 8001adc:	24000000 	.word	0x24000000
 8001ae0:	24000024 	.word	0x24000024

08001ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ae8:	4b06      	ldr	r3, [pc, #24]	@ (8001b04 <HAL_IncTick+0x20>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	461a      	mov	r2, r3
 8001aee:	4b06      	ldr	r3, [pc, #24]	@ (8001b08 <HAL_IncTick+0x24>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4413      	add	r3, r2
 8001af4:	4a04      	ldr	r2, [pc, #16]	@ (8001b08 <HAL_IncTick+0x24>)
 8001af6:	6013      	str	r3, [r2, #0]
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	24000028 	.word	0x24000028
 8001b08:	240001e4 	.word	0x240001e4

08001b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b10:	4b03      	ldr	r3, [pc, #12]	@ (8001b20 <HAL_GetTick+0x14>)
 8001b12:	681b      	ldr	r3, [r3, #0]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	240001e4 	.word	0x240001e4

08001b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b2c:	f7ff ffee 	bl	8001b0c <HAL_GetTick>
 8001b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b3c:	d005      	beq.n	8001b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b68 <HAL_Delay+0x44>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	461a      	mov	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4413      	add	r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b4a:	bf00      	nop
 8001b4c:	f7ff ffde 	bl	8001b0c <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d8f7      	bhi.n	8001b4c <HAL_Delay+0x28>
  {
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	24000028 	.word	0x24000028

08001b6c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001b70:	4b03      	ldr	r3, [pc, #12]	@ (8001b80 <HAL_GetREVID+0x14>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	0c1b      	lsrs	r3, r3, #16
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	5c001000 	.word	0x5c001000

08001b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b94:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc4 <__NVIC_SetPriorityGrouping+0x40>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001bac:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bb2:	4a04      	ldr	r2, [pc, #16]	@ (8001bc4 <__NVIC_SetPriorityGrouping+0x40>)
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	60d3      	str	r3, [r2, #12]
}
 8001bb8:	bf00      	nop
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	e000ed00 	.word	0xe000ed00
 8001bc8:	05fa0000 	.word	0x05fa0000

08001bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd0:	4b04      	ldr	r3, [pc, #16]	@ (8001be4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	0a1b      	lsrs	r3, r3, #8
 8001bd6:	f003 0307 	and.w	r3, r3, #7
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	db0b      	blt.n	8001c12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bfa:	88fb      	ldrh	r3, [r7, #6]
 8001bfc:	f003 021f 	and.w	r2, r3, #31
 8001c00:	4907      	ldr	r1, [pc, #28]	@ (8001c20 <__NVIC_EnableIRQ+0x38>)
 8001c02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c06:	095b      	lsrs	r3, r3, #5
 8001c08:	2001      	movs	r0, #1
 8001c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000e100 	.word	0xe000e100

08001c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	6039      	str	r1, [r7, #0]
 8001c2e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001c30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	db0a      	blt.n	8001c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	490c      	ldr	r1, [pc, #48]	@ (8001c70 <__NVIC_SetPriority+0x4c>)
 8001c3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c42:	0112      	lsls	r2, r2, #4
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	440b      	add	r3, r1
 8001c48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c4c:	e00a      	b.n	8001c64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	4908      	ldr	r1, [pc, #32]	@ (8001c74 <__NVIC_SetPriority+0x50>)
 8001c54:	88fb      	ldrh	r3, [r7, #6]
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	3b04      	subs	r3, #4
 8001c5c:	0112      	lsls	r2, r2, #4
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	440b      	add	r3, r1
 8001c62:	761a      	strb	r2, [r3, #24]
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000e100 	.word	0xe000e100
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b089      	sub	sp, #36	@ 0x24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f1c3 0307 	rsb	r3, r3, #7
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	bf28      	it	cs
 8001c96:	2304      	movcs	r3, #4
 8001c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	2b06      	cmp	r3, #6
 8001ca0:	d902      	bls.n	8001ca8 <NVIC_EncodePriority+0x30>
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3b03      	subs	r3, #3
 8001ca6:	e000      	b.n	8001caa <NVIC_EncodePriority+0x32>
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cac:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43da      	mvns	r2, r3
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	401a      	ands	r2, r3
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cca:	43d9      	mvns	r1, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	4313      	orrs	r3, r2
         );
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3724      	adds	r7, #36	@ 0x24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cf0:	d301      	bcc.n	8001cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e00f      	b.n	8001d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8001d20 <SysTick_Config+0x40>)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cfe:	210f      	movs	r1, #15
 8001d00:	f04f 30ff 	mov.w	r0, #4294967295
 8001d04:	f7ff ff8e 	bl	8001c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d08:	4b05      	ldr	r3, [pc, #20]	@ (8001d20 <SysTick_Config+0x40>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d0e:	4b04      	ldr	r3, [pc, #16]	@ (8001d20 <SysTick_Config+0x40>)
 8001d10:	2207      	movs	r2, #7
 8001d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	e000e010 	.word	0xe000e010

08001d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff ff29 	bl	8001b84 <__NVIC_SetPriorityGrouping>
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b086      	sub	sp, #24
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	4603      	mov	r3, r0
 8001d42:	60b9      	str	r1, [r7, #8]
 8001d44:	607a      	str	r2, [r7, #4]
 8001d46:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d48:	f7ff ff40 	bl	8001bcc <__NVIC_GetPriorityGrouping>
 8001d4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	6978      	ldr	r0, [r7, #20]
 8001d54:	f7ff ff90 	bl	8001c78 <NVIC_EncodePriority>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d5e:	4611      	mov	r1, r2
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff ff5f 	bl	8001c24 <__NVIC_SetPriority>
}
 8001d66:	bf00      	nop
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	4603      	mov	r3, r0
 8001d76:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff ff33 	bl	8001be8 <__NVIC_EnableIRQ>
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff ffa4 	bl	8001ce0 <SysTick_Config>
 8001d98:	4603      	mov	r3, r0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001da8:	f3bf 8f5f 	dmb	sy
}
 8001dac:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001dae:	4b07      	ldr	r3, [pc, #28]	@ (8001dcc <HAL_MPU_Disable+0x28>)
 8001db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db2:	4a06      	ldr	r2, [pc, #24]	@ (8001dcc <HAL_MPU_Disable+0x28>)
 8001db4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001db8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001dba:	4b05      	ldr	r3, [pc, #20]	@ (8001dd0 <HAL_MPU_Disable+0x2c>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	605a      	str	r2, [r3, #4]
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	e000ed00 	.word	0xe000ed00
 8001dd0:	e000ed90 	.word	0xe000ed90

08001dd4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001ddc:	4a0b      	ldr	r2, [pc, #44]	@ (8001e0c <HAL_MPU_Enable+0x38>)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001de6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e10 <HAL_MPU_Enable+0x3c>)
 8001de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dea:	4a09      	ldr	r2, [pc, #36]	@ (8001e10 <HAL_MPU_Enable+0x3c>)
 8001dec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001df0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001df2:	f3bf 8f4f 	dsb	sy
}
 8001df6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001df8:	f3bf 8f6f 	isb	sy
}
 8001dfc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	e000ed90 	.word	0xe000ed90
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	785a      	ldrb	r2, [r3, #1]
 8001e20:	4b1b      	ldr	r3, [pc, #108]	@ (8001e90 <HAL_MPU_ConfigRegion+0x7c>)
 8001e22:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001e24:	4b1a      	ldr	r3, [pc, #104]	@ (8001e90 <HAL_MPU_ConfigRegion+0x7c>)
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	4a19      	ldr	r2, [pc, #100]	@ (8001e90 <HAL_MPU_ConfigRegion+0x7c>)
 8001e2a:	f023 0301 	bic.w	r3, r3, #1
 8001e2e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001e30:	4a17      	ldr	r2, [pc, #92]	@ (8001e90 <HAL_MPU_ConfigRegion+0x7c>)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	7b1b      	ldrb	r3, [r3, #12]
 8001e3c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	7adb      	ldrb	r3, [r3, #11]
 8001e42:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e44:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	7a9b      	ldrb	r3, [r3, #10]
 8001e4a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001e4c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	7b5b      	ldrb	r3, [r3, #13]
 8001e52:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001e54:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	7b9b      	ldrb	r3, [r3, #14]
 8001e5a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001e5c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	7bdb      	ldrb	r3, [r3, #15]
 8001e62:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001e64:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	7a5b      	ldrb	r3, [r3, #9]
 8001e6a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001e6c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	7a1b      	ldrb	r3, [r3, #8]
 8001e72:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001e74:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	7812      	ldrb	r2, [r2, #0]
 8001e7a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e7c:	4a04      	ldr	r2, [pc, #16]	@ (8001e90 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001e7e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e80:	6113      	str	r3, [r2, #16]
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	e000ed90 	.word	0xe000ed90

08001e94 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e237      	b.n	8002316 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d004      	beq.n	8001ebc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2280      	movs	r2, #128	@ 0x80
 8001eb6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e22c      	b.n	8002316 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a5c      	ldr	r2, [pc, #368]	@ (8002034 <HAL_DMA_Abort_IT+0x1a0>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d04a      	beq.n	8001f5c <HAL_DMA_Abort_IT+0xc8>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a5b      	ldr	r2, [pc, #364]	@ (8002038 <HAL_DMA_Abort_IT+0x1a4>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d045      	beq.n	8001f5c <HAL_DMA_Abort_IT+0xc8>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a59      	ldr	r2, [pc, #356]	@ (800203c <HAL_DMA_Abort_IT+0x1a8>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d040      	beq.n	8001f5c <HAL_DMA_Abort_IT+0xc8>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a58      	ldr	r2, [pc, #352]	@ (8002040 <HAL_DMA_Abort_IT+0x1ac>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d03b      	beq.n	8001f5c <HAL_DMA_Abort_IT+0xc8>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a56      	ldr	r2, [pc, #344]	@ (8002044 <HAL_DMA_Abort_IT+0x1b0>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d036      	beq.n	8001f5c <HAL_DMA_Abort_IT+0xc8>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a55      	ldr	r2, [pc, #340]	@ (8002048 <HAL_DMA_Abort_IT+0x1b4>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d031      	beq.n	8001f5c <HAL_DMA_Abort_IT+0xc8>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a53      	ldr	r2, [pc, #332]	@ (800204c <HAL_DMA_Abort_IT+0x1b8>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d02c      	beq.n	8001f5c <HAL_DMA_Abort_IT+0xc8>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a52      	ldr	r2, [pc, #328]	@ (8002050 <HAL_DMA_Abort_IT+0x1bc>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d027      	beq.n	8001f5c <HAL_DMA_Abort_IT+0xc8>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a50      	ldr	r2, [pc, #320]	@ (8002054 <HAL_DMA_Abort_IT+0x1c0>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d022      	beq.n	8001f5c <HAL_DMA_Abort_IT+0xc8>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a4f      	ldr	r2, [pc, #316]	@ (8002058 <HAL_DMA_Abort_IT+0x1c4>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d01d      	beq.n	8001f5c <HAL_DMA_Abort_IT+0xc8>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a4d      	ldr	r2, [pc, #308]	@ (800205c <HAL_DMA_Abort_IT+0x1c8>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d018      	beq.n	8001f5c <HAL_DMA_Abort_IT+0xc8>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a4c      	ldr	r2, [pc, #304]	@ (8002060 <HAL_DMA_Abort_IT+0x1cc>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d013      	beq.n	8001f5c <HAL_DMA_Abort_IT+0xc8>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a4a      	ldr	r2, [pc, #296]	@ (8002064 <HAL_DMA_Abort_IT+0x1d0>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d00e      	beq.n	8001f5c <HAL_DMA_Abort_IT+0xc8>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a49      	ldr	r2, [pc, #292]	@ (8002068 <HAL_DMA_Abort_IT+0x1d4>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d009      	beq.n	8001f5c <HAL_DMA_Abort_IT+0xc8>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a47      	ldr	r2, [pc, #284]	@ (800206c <HAL_DMA_Abort_IT+0x1d8>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d004      	beq.n	8001f5c <HAL_DMA_Abort_IT+0xc8>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a46      	ldr	r2, [pc, #280]	@ (8002070 <HAL_DMA_Abort_IT+0x1dc>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d101      	bne.n	8001f60 <HAL_DMA_Abort_IT+0xcc>
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e000      	b.n	8001f62 <HAL_DMA_Abort_IT+0xce>
 8001f60:	2300      	movs	r3, #0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 8086 	beq.w	8002074 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2204      	movs	r2, #4
 8001f6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a2f      	ldr	r2, [pc, #188]	@ (8002034 <HAL_DMA_Abort_IT+0x1a0>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d04a      	beq.n	8002010 <HAL_DMA_Abort_IT+0x17c>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a2e      	ldr	r2, [pc, #184]	@ (8002038 <HAL_DMA_Abort_IT+0x1a4>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d045      	beq.n	8002010 <HAL_DMA_Abort_IT+0x17c>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a2c      	ldr	r2, [pc, #176]	@ (800203c <HAL_DMA_Abort_IT+0x1a8>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d040      	beq.n	8002010 <HAL_DMA_Abort_IT+0x17c>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a2b      	ldr	r2, [pc, #172]	@ (8002040 <HAL_DMA_Abort_IT+0x1ac>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d03b      	beq.n	8002010 <HAL_DMA_Abort_IT+0x17c>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a29      	ldr	r2, [pc, #164]	@ (8002044 <HAL_DMA_Abort_IT+0x1b0>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d036      	beq.n	8002010 <HAL_DMA_Abort_IT+0x17c>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a28      	ldr	r2, [pc, #160]	@ (8002048 <HAL_DMA_Abort_IT+0x1b4>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d031      	beq.n	8002010 <HAL_DMA_Abort_IT+0x17c>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a26      	ldr	r2, [pc, #152]	@ (800204c <HAL_DMA_Abort_IT+0x1b8>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d02c      	beq.n	8002010 <HAL_DMA_Abort_IT+0x17c>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a25      	ldr	r2, [pc, #148]	@ (8002050 <HAL_DMA_Abort_IT+0x1bc>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d027      	beq.n	8002010 <HAL_DMA_Abort_IT+0x17c>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a23      	ldr	r2, [pc, #140]	@ (8002054 <HAL_DMA_Abort_IT+0x1c0>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d022      	beq.n	8002010 <HAL_DMA_Abort_IT+0x17c>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a22      	ldr	r2, [pc, #136]	@ (8002058 <HAL_DMA_Abort_IT+0x1c4>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d01d      	beq.n	8002010 <HAL_DMA_Abort_IT+0x17c>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a20      	ldr	r2, [pc, #128]	@ (800205c <HAL_DMA_Abort_IT+0x1c8>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d018      	beq.n	8002010 <HAL_DMA_Abort_IT+0x17c>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a1f      	ldr	r2, [pc, #124]	@ (8002060 <HAL_DMA_Abort_IT+0x1cc>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d013      	beq.n	8002010 <HAL_DMA_Abort_IT+0x17c>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a1d      	ldr	r2, [pc, #116]	@ (8002064 <HAL_DMA_Abort_IT+0x1d0>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d00e      	beq.n	8002010 <HAL_DMA_Abort_IT+0x17c>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a1c      	ldr	r2, [pc, #112]	@ (8002068 <HAL_DMA_Abort_IT+0x1d4>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d009      	beq.n	8002010 <HAL_DMA_Abort_IT+0x17c>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a1a      	ldr	r2, [pc, #104]	@ (800206c <HAL_DMA_Abort_IT+0x1d8>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d004      	beq.n	8002010 <HAL_DMA_Abort_IT+0x17c>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a19      	ldr	r2, [pc, #100]	@ (8002070 <HAL_DMA_Abort_IT+0x1dc>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d108      	bne.n	8002022 <HAL_DMA_Abort_IT+0x18e>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0201 	bic.w	r2, r2, #1
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	e178      	b.n	8002314 <HAL_DMA_Abort_IT+0x480>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 0201 	bic.w	r2, r2, #1
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	e16f      	b.n	8002314 <HAL_DMA_Abort_IT+0x480>
 8002034:	40020010 	.word	0x40020010
 8002038:	40020028 	.word	0x40020028
 800203c:	40020040 	.word	0x40020040
 8002040:	40020058 	.word	0x40020058
 8002044:	40020070 	.word	0x40020070
 8002048:	40020088 	.word	0x40020088
 800204c:	400200a0 	.word	0x400200a0
 8002050:	400200b8 	.word	0x400200b8
 8002054:	40020410 	.word	0x40020410
 8002058:	40020428 	.word	0x40020428
 800205c:	40020440 	.word	0x40020440
 8002060:	40020458 	.word	0x40020458
 8002064:	40020470 	.word	0x40020470
 8002068:	40020488 	.word	0x40020488
 800206c:	400204a0 	.word	0x400204a0
 8002070:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 020e 	bic.w	r2, r2, #14
 8002082:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a6c      	ldr	r2, [pc, #432]	@ (800223c <HAL_DMA_Abort_IT+0x3a8>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d04a      	beq.n	8002124 <HAL_DMA_Abort_IT+0x290>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a6b      	ldr	r2, [pc, #428]	@ (8002240 <HAL_DMA_Abort_IT+0x3ac>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d045      	beq.n	8002124 <HAL_DMA_Abort_IT+0x290>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a69      	ldr	r2, [pc, #420]	@ (8002244 <HAL_DMA_Abort_IT+0x3b0>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d040      	beq.n	8002124 <HAL_DMA_Abort_IT+0x290>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a68      	ldr	r2, [pc, #416]	@ (8002248 <HAL_DMA_Abort_IT+0x3b4>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d03b      	beq.n	8002124 <HAL_DMA_Abort_IT+0x290>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a66      	ldr	r2, [pc, #408]	@ (800224c <HAL_DMA_Abort_IT+0x3b8>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d036      	beq.n	8002124 <HAL_DMA_Abort_IT+0x290>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a65      	ldr	r2, [pc, #404]	@ (8002250 <HAL_DMA_Abort_IT+0x3bc>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d031      	beq.n	8002124 <HAL_DMA_Abort_IT+0x290>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a63      	ldr	r2, [pc, #396]	@ (8002254 <HAL_DMA_Abort_IT+0x3c0>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d02c      	beq.n	8002124 <HAL_DMA_Abort_IT+0x290>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a62      	ldr	r2, [pc, #392]	@ (8002258 <HAL_DMA_Abort_IT+0x3c4>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d027      	beq.n	8002124 <HAL_DMA_Abort_IT+0x290>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a60      	ldr	r2, [pc, #384]	@ (800225c <HAL_DMA_Abort_IT+0x3c8>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d022      	beq.n	8002124 <HAL_DMA_Abort_IT+0x290>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a5f      	ldr	r2, [pc, #380]	@ (8002260 <HAL_DMA_Abort_IT+0x3cc>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d01d      	beq.n	8002124 <HAL_DMA_Abort_IT+0x290>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a5d      	ldr	r2, [pc, #372]	@ (8002264 <HAL_DMA_Abort_IT+0x3d0>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d018      	beq.n	8002124 <HAL_DMA_Abort_IT+0x290>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a5c      	ldr	r2, [pc, #368]	@ (8002268 <HAL_DMA_Abort_IT+0x3d4>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d013      	beq.n	8002124 <HAL_DMA_Abort_IT+0x290>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a5a      	ldr	r2, [pc, #360]	@ (800226c <HAL_DMA_Abort_IT+0x3d8>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d00e      	beq.n	8002124 <HAL_DMA_Abort_IT+0x290>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a59      	ldr	r2, [pc, #356]	@ (8002270 <HAL_DMA_Abort_IT+0x3dc>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d009      	beq.n	8002124 <HAL_DMA_Abort_IT+0x290>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a57      	ldr	r2, [pc, #348]	@ (8002274 <HAL_DMA_Abort_IT+0x3e0>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d004      	beq.n	8002124 <HAL_DMA_Abort_IT+0x290>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a56      	ldr	r2, [pc, #344]	@ (8002278 <HAL_DMA_Abort_IT+0x3e4>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d108      	bne.n	8002136 <HAL_DMA_Abort_IT+0x2a2>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0201 	bic.w	r2, r2, #1
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	e007      	b.n	8002146 <HAL_DMA_Abort_IT+0x2b2>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 0201 	bic.w	r2, r2, #1
 8002144:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a3c      	ldr	r2, [pc, #240]	@ (800223c <HAL_DMA_Abort_IT+0x3a8>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d072      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a3a      	ldr	r2, [pc, #232]	@ (8002240 <HAL_DMA_Abort_IT+0x3ac>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d06d      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a39      	ldr	r2, [pc, #228]	@ (8002244 <HAL_DMA_Abort_IT+0x3b0>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d068      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a37      	ldr	r2, [pc, #220]	@ (8002248 <HAL_DMA_Abort_IT+0x3b4>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d063      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a36      	ldr	r2, [pc, #216]	@ (800224c <HAL_DMA_Abort_IT+0x3b8>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d05e      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a34      	ldr	r2, [pc, #208]	@ (8002250 <HAL_DMA_Abort_IT+0x3bc>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d059      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a33      	ldr	r2, [pc, #204]	@ (8002254 <HAL_DMA_Abort_IT+0x3c0>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d054      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a31      	ldr	r2, [pc, #196]	@ (8002258 <HAL_DMA_Abort_IT+0x3c4>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d04f      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a30      	ldr	r2, [pc, #192]	@ (800225c <HAL_DMA_Abort_IT+0x3c8>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d04a      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a2e      	ldr	r2, [pc, #184]	@ (8002260 <HAL_DMA_Abort_IT+0x3cc>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d045      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a2d      	ldr	r2, [pc, #180]	@ (8002264 <HAL_DMA_Abort_IT+0x3d0>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d040      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a2b      	ldr	r2, [pc, #172]	@ (8002268 <HAL_DMA_Abort_IT+0x3d4>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d03b      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a2a      	ldr	r2, [pc, #168]	@ (800226c <HAL_DMA_Abort_IT+0x3d8>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d036      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a28      	ldr	r2, [pc, #160]	@ (8002270 <HAL_DMA_Abort_IT+0x3dc>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d031      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a27      	ldr	r2, [pc, #156]	@ (8002274 <HAL_DMA_Abort_IT+0x3e0>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d02c      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a25      	ldr	r2, [pc, #148]	@ (8002278 <HAL_DMA_Abort_IT+0x3e4>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d027      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a24      	ldr	r2, [pc, #144]	@ (800227c <HAL_DMA_Abort_IT+0x3e8>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d022      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a22      	ldr	r2, [pc, #136]	@ (8002280 <HAL_DMA_Abort_IT+0x3ec>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d01d      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a21      	ldr	r2, [pc, #132]	@ (8002284 <HAL_DMA_Abort_IT+0x3f0>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d018      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a1f      	ldr	r2, [pc, #124]	@ (8002288 <HAL_DMA_Abort_IT+0x3f4>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d013      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a1e      	ldr	r2, [pc, #120]	@ (800228c <HAL_DMA_Abort_IT+0x3f8>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d00e      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a1c      	ldr	r2, [pc, #112]	@ (8002290 <HAL_DMA_Abort_IT+0x3fc>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d009      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a1b      	ldr	r2, [pc, #108]	@ (8002294 <HAL_DMA_Abort_IT+0x400>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d004      	beq.n	8002236 <HAL_DMA_Abort_IT+0x3a2>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a19      	ldr	r2, [pc, #100]	@ (8002298 <HAL_DMA_Abort_IT+0x404>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d132      	bne.n	800229c <HAL_DMA_Abort_IT+0x408>
 8002236:	2301      	movs	r3, #1
 8002238:	e031      	b.n	800229e <HAL_DMA_Abort_IT+0x40a>
 800223a:	bf00      	nop
 800223c:	40020010 	.word	0x40020010
 8002240:	40020028 	.word	0x40020028
 8002244:	40020040 	.word	0x40020040
 8002248:	40020058 	.word	0x40020058
 800224c:	40020070 	.word	0x40020070
 8002250:	40020088 	.word	0x40020088
 8002254:	400200a0 	.word	0x400200a0
 8002258:	400200b8 	.word	0x400200b8
 800225c:	40020410 	.word	0x40020410
 8002260:	40020428 	.word	0x40020428
 8002264:	40020440 	.word	0x40020440
 8002268:	40020458 	.word	0x40020458
 800226c:	40020470 	.word	0x40020470
 8002270:	40020488 	.word	0x40020488
 8002274:	400204a0 	.word	0x400204a0
 8002278:	400204b8 	.word	0x400204b8
 800227c:	58025408 	.word	0x58025408
 8002280:	5802541c 	.word	0x5802541c
 8002284:	58025430 	.word	0x58025430
 8002288:	58025444 	.word	0x58025444
 800228c:	58025458 	.word	0x58025458
 8002290:	5802546c 	.word	0x5802546c
 8002294:	58025480 	.word	0x58025480
 8002298:	58025494 	.word	0x58025494
 800229c:	2300      	movs	r3, #0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d028      	beq.n	80022f4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022b0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022bc:	f003 031f 	and.w	r3, r3, #31
 80022c0:	2201      	movs	r2, #1
 80022c2:	409a      	lsls	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80022d0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00c      	beq.n	80022f4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022e8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80022f2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop

08002320 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8002320:	b480      	push	{r7}
 8002322:	b087      	sub	sp, #28
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	460b      	mov	r3, r1
 800232a:	607a      	str	r2, [r7, #4]
 800232c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800232e:	2300      	movs	r3, #0
 8002330:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e00a      	b.n	8002352 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 800233c:	7afb      	ldrb	r3, [r7, #11]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d103      	bne.n	800234a <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	605a      	str	r2, [r3, #4]
      break;
 8002348:	e002      	b.n	8002350 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	75fb      	strb	r3, [r7, #23]
      break;
 800234e:	bf00      	nop
  }

  return status;
 8002350:	7dfb      	ldrb	r3, [r7, #23]
}
 8002352:	4618      	mov	r0, r3
 8002354:	371c      	adds	r7, #28
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
 8002366:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e003      	b.n	800237a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002378:	2300      	movs	r3, #0
  }
}
 800237a:	4618      	mov	r0, r3
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
	...

08002388 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	0c1b      	lsrs	r3, r3, #16
 8002396:	f003 0303 	and.w	r3, r3, #3
 800239a:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 031f 	and.w	r3, r3, #31
 80023a4:	2201      	movs	r2, #1
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	011a      	lsls	r2, r3, #4
 80023b0:	4b0c      	ldr	r3, [pc, #48]	@ (80023e4 <HAL_EXTI_IRQHandler+0x5c>)
 80023b2:	4413      	add	r3, r2
 80023b4:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4013      	ands	r3, r2
 80023be:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d009      	beq.n	80023da <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d002      	beq.n	80023da <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	4798      	blx	r3
    }
  }
}
 80023da:	bf00      	nop
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	58000088 	.word	0x58000088

080023e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b089      	sub	sp, #36	@ 0x24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80023f6:	4b89      	ldr	r3, [pc, #548]	@ (800261c <HAL_GPIO_Init+0x234>)
 80023f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023fa:	e194      	b.n	8002726 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	2101      	movs	r1, #1
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	fa01 f303 	lsl.w	r3, r1, r3
 8002408:	4013      	ands	r3, r2
 800240a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 8186 	beq.w	8002720 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 0303 	and.w	r3, r3, #3
 800241c:	2b01      	cmp	r3, #1
 800241e:	d005      	beq.n	800242c <HAL_GPIO_Init+0x44>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 0303 	and.w	r3, r3, #3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d130      	bne.n	800248e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	2203      	movs	r2, #3
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	68da      	ldr	r2, [r3, #12]
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4313      	orrs	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002462:	2201      	movs	r2, #1
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43db      	mvns	r3, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4013      	ands	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	091b      	lsrs	r3, r3, #4
 8002478:	f003 0201 	and.w	r2, r3, #1
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	2b03      	cmp	r3, #3
 8002498:	d017      	beq.n	80024ca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	2203      	movs	r2, #3
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43db      	mvns	r3, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4013      	ands	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d123      	bne.n	800251e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	08da      	lsrs	r2, r3, #3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	3208      	adds	r2, #8
 80024de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	220f      	movs	r2, #15
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43db      	mvns	r3, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4013      	ands	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	691a      	ldr	r2, [r3, #16]
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	08da      	lsrs	r2, r3, #3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3208      	adds	r2, #8
 8002518:	69b9      	ldr	r1, [r7, #24]
 800251a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	2203      	movs	r2, #3
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43db      	mvns	r3, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4013      	ands	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f003 0203 	and.w	r2, r3, #3
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 80e0 	beq.w	8002720 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002560:	4b2f      	ldr	r3, [pc, #188]	@ (8002620 <HAL_GPIO_Init+0x238>)
 8002562:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002566:	4a2e      	ldr	r2, [pc, #184]	@ (8002620 <HAL_GPIO_Init+0x238>)
 8002568:	f043 0302 	orr.w	r3, r3, #2
 800256c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002570:	4b2b      	ldr	r3, [pc, #172]	@ (8002620 <HAL_GPIO_Init+0x238>)
 8002572:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800257e:	4a29      	ldr	r2, [pc, #164]	@ (8002624 <HAL_GPIO_Init+0x23c>)
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	089b      	lsrs	r3, r3, #2
 8002584:	3302      	adds	r3, #2
 8002586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	220f      	movs	r2, #15
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43db      	mvns	r3, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4013      	ands	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a20      	ldr	r2, [pc, #128]	@ (8002628 <HAL_GPIO_Init+0x240>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d052      	beq.n	8002650 <HAL_GPIO_Init+0x268>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a1f      	ldr	r2, [pc, #124]	@ (800262c <HAL_GPIO_Init+0x244>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d031      	beq.n	8002616 <HAL_GPIO_Init+0x22e>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a1e      	ldr	r2, [pc, #120]	@ (8002630 <HAL_GPIO_Init+0x248>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d02b      	beq.n	8002612 <HAL_GPIO_Init+0x22a>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002634 <HAL_GPIO_Init+0x24c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d025      	beq.n	800260e <HAL_GPIO_Init+0x226>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a1c      	ldr	r2, [pc, #112]	@ (8002638 <HAL_GPIO_Init+0x250>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d01f      	beq.n	800260a <HAL_GPIO_Init+0x222>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a1b      	ldr	r2, [pc, #108]	@ (800263c <HAL_GPIO_Init+0x254>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d019      	beq.n	8002606 <HAL_GPIO_Init+0x21e>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a1a      	ldr	r2, [pc, #104]	@ (8002640 <HAL_GPIO_Init+0x258>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d013      	beq.n	8002602 <HAL_GPIO_Init+0x21a>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a19      	ldr	r2, [pc, #100]	@ (8002644 <HAL_GPIO_Init+0x25c>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d00d      	beq.n	80025fe <HAL_GPIO_Init+0x216>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a18      	ldr	r2, [pc, #96]	@ (8002648 <HAL_GPIO_Init+0x260>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d007      	beq.n	80025fa <HAL_GPIO_Init+0x212>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a17      	ldr	r2, [pc, #92]	@ (800264c <HAL_GPIO_Init+0x264>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d101      	bne.n	80025f6 <HAL_GPIO_Init+0x20e>
 80025f2:	2309      	movs	r3, #9
 80025f4:	e02d      	b.n	8002652 <HAL_GPIO_Init+0x26a>
 80025f6:	230a      	movs	r3, #10
 80025f8:	e02b      	b.n	8002652 <HAL_GPIO_Init+0x26a>
 80025fa:	2308      	movs	r3, #8
 80025fc:	e029      	b.n	8002652 <HAL_GPIO_Init+0x26a>
 80025fe:	2307      	movs	r3, #7
 8002600:	e027      	b.n	8002652 <HAL_GPIO_Init+0x26a>
 8002602:	2306      	movs	r3, #6
 8002604:	e025      	b.n	8002652 <HAL_GPIO_Init+0x26a>
 8002606:	2305      	movs	r3, #5
 8002608:	e023      	b.n	8002652 <HAL_GPIO_Init+0x26a>
 800260a:	2304      	movs	r3, #4
 800260c:	e021      	b.n	8002652 <HAL_GPIO_Init+0x26a>
 800260e:	2303      	movs	r3, #3
 8002610:	e01f      	b.n	8002652 <HAL_GPIO_Init+0x26a>
 8002612:	2302      	movs	r3, #2
 8002614:	e01d      	b.n	8002652 <HAL_GPIO_Init+0x26a>
 8002616:	2301      	movs	r3, #1
 8002618:	e01b      	b.n	8002652 <HAL_GPIO_Init+0x26a>
 800261a:	bf00      	nop
 800261c:	58000080 	.word	0x58000080
 8002620:	58024400 	.word	0x58024400
 8002624:	58000400 	.word	0x58000400
 8002628:	58020000 	.word	0x58020000
 800262c:	58020400 	.word	0x58020400
 8002630:	58020800 	.word	0x58020800
 8002634:	58020c00 	.word	0x58020c00
 8002638:	58021000 	.word	0x58021000
 800263c:	58021400 	.word	0x58021400
 8002640:	58021800 	.word	0x58021800
 8002644:	58021c00 	.word	0x58021c00
 8002648:	58022000 	.word	0x58022000
 800264c:	58022400 	.word	0x58022400
 8002650:	2300      	movs	r3, #0
 8002652:	69fa      	ldr	r2, [r7, #28]
 8002654:	f002 0203 	and.w	r2, r2, #3
 8002658:	0092      	lsls	r2, r2, #2
 800265a:	4093      	lsls	r3, r2
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002662:	4938      	ldr	r1, [pc, #224]	@ (8002744 <HAL_GPIO_Init+0x35c>)
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	089b      	lsrs	r3, r3, #2
 8002668:	3302      	adds	r3, #2
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002670:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	43db      	mvns	r3, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4013      	ands	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	4313      	orrs	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002696:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800269e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d003      	beq.n	80026c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80026c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	43db      	mvns	r3, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4013      	ands	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	3301      	adds	r3, #1
 8002724:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	fa22 f303 	lsr.w	r3, r2, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	f47f ae63 	bne.w	80023fc <HAL_GPIO_Init+0x14>
  }
}
 8002736:	bf00      	nop
 8002738:	bf00      	nop
 800273a:	3724      	adds	r7, #36	@ 0x24
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	58000400 	.word	0x58000400

08002748 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691a      	ldr	r2, [r3, #16]
 8002758:	887b      	ldrh	r3, [r7, #2]
 800275a:	4013      	ands	r3, r2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d002      	beq.n	8002766 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002760:	2301      	movs	r3, #1
 8002762:	73fb      	strb	r3, [r7, #15]
 8002764:	e001      	b.n	800276a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002766:	2300      	movs	r3, #0
 8002768:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800276a:	7bfb      	ldrb	r3, [r7, #15]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	460b      	mov	r3, r1
 8002782:	807b      	strh	r3, [r7, #2]
 8002784:	4613      	mov	r3, r2
 8002786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002788:	787b      	ldrb	r3, [r7, #1]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800278e:	887a      	ldrh	r2, [r7, #2]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002794:	e003      	b.n	800279e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002796:	887b      	ldrh	r3, [r7, #2]
 8002798:	041a      	lsls	r2, r3, #16
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	619a      	str	r2, [r3, #24]
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027aa:	b480      	push	{r7}
 80027ac:	b085      	sub	sp, #20
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
 80027b2:	460b      	mov	r3, r1
 80027b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027bc:	887a      	ldrh	r2, [r7, #2]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	4013      	ands	r3, r2
 80027c2:	041a      	lsls	r2, r3, #16
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	43d9      	mvns	r1, r3
 80027c8:	887b      	ldrh	r3, [r7, #2]
 80027ca:	400b      	ands	r3, r1
 80027cc:	431a      	orrs	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	619a      	str	r2, [r3, #24]
}
 80027d2:	bf00      	nop
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
	...

080027e0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80027e8:	4b19      	ldr	r3, [pc, #100]	@ (8002850 <HAL_PWREx_ConfigSupply+0x70>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b04      	cmp	r3, #4
 80027f2:	d00a      	beq.n	800280a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80027f4:	4b16      	ldr	r3, [pc, #88]	@ (8002850 <HAL_PWREx_ConfigSupply+0x70>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d001      	beq.n	8002806 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e01f      	b.n	8002846 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	e01d      	b.n	8002846 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800280a:	4b11      	ldr	r3, [pc, #68]	@ (8002850 <HAL_PWREx_ConfigSupply+0x70>)
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	f023 0207 	bic.w	r2, r3, #7
 8002812:	490f      	ldr	r1, [pc, #60]	@ (8002850 <HAL_PWREx_ConfigSupply+0x70>)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4313      	orrs	r3, r2
 8002818:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800281a:	f7ff f977 	bl	8001b0c <HAL_GetTick>
 800281e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002820:	e009      	b.n	8002836 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002822:	f7ff f973 	bl	8001b0c <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002830:	d901      	bls.n	8002836 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e007      	b.n	8002846 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002836:	4b06      	ldr	r3, [pc, #24]	@ (8002850 <HAL_PWREx_ConfigSupply+0x70>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800283e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002842:	d1ee      	bne.n	8002822 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	58024800 	.word	0x58024800

08002854 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b08c      	sub	sp, #48	@ 0x30
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d102      	bne.n	8002868 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	f000 bc48 	b.w	80030f8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 8088 	beq.w	8002986 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002876:	4b99      	ldr	r3, [pc, #612]	@ (8002adc <HAL_RCC_OscConfig+0x288>)
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800287e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002880:	4b96      	ldr	r3, [pc, #600]	@ (8002adc <HAL_RCC_OscConfig+0x288>)
 8002882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002884:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002888:	2b10      	cmp	r3, #16
 800288a:	d007      	beq.n	800289c <HAL_RCC_OscConfig+0x48>
 800288c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800288e:	2b18      	cmp	r3, #24
 8002890:	d111      	bne.n	80028b6 <HAL_RCC_OscConfig+0x62>
 8002892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002894:	f003 0303 	and.w	r3, r3, #3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d10c      	bne.n	80028b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800289c:	4b8f      	ldr	r3, [pc, #572]	@ (8002adc <HAL_RCC_OscConfig+0x288>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d06d      	beq.n	8002984 <HAL_RCC_OscConfig+0x130>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d169      	bne.n	8002984 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	f000 bc21 	b.w	80030f8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028be:	d106      	bne.n	80028ce <HAL_RCC_OscConfig+0x7a>
 80028c0:	4b86      	ldr	r3, [pc, #536]	@ (8002adc <HAL_RCC_OscConfig+0x288>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a85      	ldr	r2, [pc, #532]	@ (8002adc <HAL_RCC_OscConfig+0x288>)
 80028c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028ca:	6013      	str	r3, [r2, #0]
 80028cc:	e02e      	b.n	800292c <HAL_RCC_OscConfig+0xd8>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10c      	bne.n	80028f0 <HAL_RCC_OscConfig+0x9c>
 80028d6:	4b81      	ldr	r3, [pc, #516]	@ (8002adc <HAL_RCC_OscConfig+0x288>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a80      	ldr	r2, [pc, #512]	@ (8002adc <HAL_RCC_OscConfig+0x288>)
 80028dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	4b7e      	ldr	r3, [pc, #504]	@ (8002adc <HAL_RCC_OscConfig+0x288>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a7d      	ldr	r2, [pc, #500]	@ (8002adc <HAL_RCC_OscConfig+0x288>)
 80028e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	e01d      	b.n	800292c <HAL_RCC_OscConfig+0xd8>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028f8:	d10c      	bne.n	8002914 <HAL_RCC_OscConfig+0xc0>
 80028fa:	4b78      	ldr	r3, [pc, #480]	@ (8002adc <HAL_RCC_OscConfig+0x288>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a77      	ldr	r2, [pc, #476]	@ (8002adc <HAL_RCC_OscConfig+0x288>)
 8002900:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002904:	6013      	str	r3, [r2, #0]
 8002906:	4b75      	ldr	r3, [pc, #468]	@ (8002adc <HAL_RCC_OscConfig+0x288>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a74      	ldr	r2, [pc, #464]	@ (8002adc <HAL_RCC_OscConfig+0x288>)
 800290c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	e00b      	b.n	800292c <HAL_RCC_OscConfig+0xd8>
 8002914:	4b71      	ldr	r3, [pc, #452]	@ (8002adc <HAL_RCC_OscConfig+0x288>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a70      	ldr	r2, [pc, #448]	@ (8002adc <HAL_RCC_OscConfig+0x288>)
 800291a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800291e:	6013      	str	r3, [r2, #0]
 8002920:	4b6e      	ldr	r3, [pc, #440]	@ (8002adc <HAL_RCC_OscConfig+0x288>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a6d      	ldr	r2, [pc, #436]	@ (8002adc <HAL_RCC_OscConfig+0x288>)
 8002926:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800292a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d013      	beq.n	800295c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002934:	f7ff f8ea 	bl	8001b0c <HAL_GetTick>
 8002938:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800293c:	f7ff f8e6 	bl	8001b0c <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b64      	cmp	r3, #100	@ 0x64
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e3d4      	b.n	80030f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800294e:	4b63      	ldr	r3, [pc, #396]	@ (8002adc <HAL_RCC_OscConfig+0x288>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0f0      	beq.n	800293c <HAL_RCC_OscConfig+0xe8>
 800295a:	e014      	b.n	8002986 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295c:	f7ff f8d6 	bl	8001b0c <HAL_GetTick>
 8002960:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002964:	f7ff f8d2 	bl	8001b0c <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b64      	cmp	r3, #100	@ 0x64
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e3c0      	b.n	80030f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002976:	4b59      	ldr	r3, [pc, #356]	@ (8002adc <HAL_RCC_OscConfig+0x288>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f0      	bne.n	8002964 <HAL_RCC_OscConfig+0x110>
 8002982:	e000      	b.n	8002986 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 80ca 	beq.w	8002b28 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002994:	4b51      	ldr	r3, [pc, #324]	@ (8002adc <HAL_RCC_OscConfig+0x288>)
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800299c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800299e:	4b4f      	ldr	r3, [pc, #316]	@ (8002adc <HAL_RCC_OscConfig+0x288>)
 80029a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d007      	beq.n	80029ba <HAL_RCC_OscConfig+0x166>
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	2b18      	cmp	r3, #24
 80029ae:	d156      	bne.n	8002a5e <HAL_RCC_OscConfig+0x20a>
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f003 0303 	and.w	r3, r3, #3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d151      	bne.n	8002a5e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029ba:	4b48      	ldr	r3, [pc, #288]	@ (8002adc <HAL_RCC_OscConfig+0x288>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0304 	and.w	r3, r3, #4
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d005      	beq.n	80029d2 <HAL_RCC_OscConfig+0x17e>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e392      	b.n	80030f8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80029d2:	4b42      	ldr	r3, [pc, #264]	@ (8002adc <HAL_RCC_OscConfig+0x288>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f023 0219 	bic.w	r2, r3, #25
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	493f      	ldr	r1, [pc, #252]	@ (8002adc <HAL_RCC_OscConfig+0x288>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e4:	f7ff f892 	bl	8001b0c <HAL_GetTick>
 80029e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ec:	f7ff f88e 	bl	8001b0c <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e37c      	b.n	80030f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029fe:	4b37      	ldr	r3, [pc, #220]	@ (8002adc <HAL_RCC_OscConfig+0x288>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0304 	and.w	r3, r3, #4
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0f0      	beq.n	80029ec <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a0a:	f7ff f8af 	bl	8001b6c <HAL_GetREVID>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d817      	bhi.n	8002a48 <HAL_RCC_OscConfig+0x1f4>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	2b40      	cmp	r3, #64	@ 0x40
 8002a1e:	d108      	bne.n	8002a32 <HAL_RCC_OscConfig+0x1de>
 8002a20:	4b2e      	ldr	r3, [pc, #184]	@ (8002adc <HAL_RCC_OscConfig+0x288>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002a28:	4a2c      	ldr	r2, [pc, #176]	@ (8002adc <HAL_RCC_OscConfig+0x288>)
 8002a2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a2e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a30:	e07a      	b.n	8002b28 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a32:	4b2a      	ldr	r3, [pc, #168]	@ (8002adc <HAL_RCC_OscConfig+0x288>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	031b      	lsls	r3, r3, #12
 8002a40:	4926      	ldr	r1, [pc, #152]	@ (8002adc <HAL_RCC_OscConfig+0x288>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a46:	e06f      	b.n	8002b28 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a48:	4b24      	ldr	r3, [pc, #144]	@ (8002adc <HAL_RCC_OscConfig+0x288>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	061b      	lsls	r3, r3, #24
 8002a56:	4921      	ldr	r1, [pc, #132]	@ (8002adc <HAL_RCC_OscConfig+0x288>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a5c:	e064      	b.n	8002b28 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d047      	beq.n	8002af6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002a66:	4b1d      	ldr	r3, [pc, #116]	@ (8002adc <HAL_RCC_OscConfig+0x288>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f023 0219 	bic.w	r2, r3, #25
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	491a      	ldr	r1, [pc, #104]	@ (8002adc <HAL_RCC_OscConfig+0x288>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a78:	f7ff f848 	bl	8001b0c <HAL_GetTick>
 8002a7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a80:	f7ff f844 	bl	8001b0c <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e332      	b.n	80030f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a92:	4b12      	ldr	r3, [pc, #72]	@ (8002adc <HAL_RCC_OscConfig+0x288>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0304 	and.w	r3, r3, #4
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0f0      	beq.n	8002a80 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a9e:	f7ff f865 	bl	8001b6c <HAL_GetREVID>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d819      	bhi.n	8002ae0 <HAL_RCC_OscConfig+0x28c>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	2b40      	cmp	r3, #64	@ 0x40
 8002ab2:	d108      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x272>
 8002ab4:	4b09      	ldr	r3, [pc, #36]	@ (8002adc <HAL_RCC_OscConfig+0x288>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002abc:	4a07      	ldr	r2, [pc, #28]	@ (8002adc <HAL_RCC_OscConfig+0x288>)
 8002abe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ac2:	6053      	str	r3, [r2, #4]
 8002ac4:	e030      	b.n	8002b28 <HAL_RCC_OscConfig+0x2d4>
 8002ac6:	4b05      	ldr	r3, [pc, #20]	@ (8002adc <HAL_RCC_OscConfig+0x288>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	031b      	lsls	r3, r3, #12
 8002ad4:	4901      	ldr	r1, [pc, #4]	@ (8002adc <HAL_RCC_OscConfig+0x288>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	604b      	str	r3, [r1, #4]
 8002ada:	e025      	b.n	8002b28 <HAL_RCC_OscConfig+0x2d4>
 8002adc:	58024400 	.word	0x58024400
 8002ae0:	4b9a      	ldr	r3, [pc, #616]	@ (8002d4c <HAL_RCC_OscConfig+0x4f8>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	061b      	lsls	r3, r3, #24
 8002aee:	4997      	ldr	r1, [pc, #604]	@ (8002d4c <HAL_RCC_OscConfig+0x4f8>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	604b      	str	r3, [r1, #4]
 8002af4:	e018      	b.n	8002b28 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002af6:	4b95      	ldr	r3, [pc, #596]	@ (8002d4c <HAL_RCC_OscConfig+0x4f8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a94      	ldr	r2, [pc, #592]	@ (8002d4c <HAL_RCC_OscConfig+0x4f8>)
 8002afc:	f023 0301 	bic.w	r3, r3, #1
 8002b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b02:	f7ff f803 	bl	8001b0c <HAL_GetTick>
 8002b06:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b0a:	f7fe ffff 	bl	8001b0c <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e2ed      	b.n	80030f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b1c:	4b8b      	ldr	r3, [pc, #556]	@ (8002d4c <HAL_RCC_OscConfig+0x4f8>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1f0      	bne.n	8002b0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0310 	and.w	r3, r3, #16
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 80a9 	beq.w	8002c88 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b36:	4b85      	ldr	r3, [pc, #532]	@ (8002d4c <HAL_RCC_OscConfig+0x4f8>)
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b3e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b40:	4b82      	ldr	r3, [pc, #520]	@ (8002d4c <HAL_RCC_OscConfig+0x4f8>)
 8002b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b44:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d007      	beq.n	8002b5c <HAL_RCC_OscConfig+0x308>
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	2b18      	cmp	r3, #24
 8002b50:	d13a      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x374>
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f003 0303 	and.w	r3, r3, #3
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d135      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b5c:	4b7b      	ldr	r3, [pc, #492]	@ (8002d4c <HAL_RCC_OscConfig+0x4f8>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d005      	beq.n	8002b74 <HAL_RCC_OscConfig+0x320>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	2b80      	cmp	r3, #128	@ 0x80
 8002b6e:	d001      	beq.n	8002b74 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e2c1      	b.n	80030f8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b74:	f7fe fffa 	bl	8001b6c <HAL_GetREVID>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d817      	bhi.n	8002bb2 <HAL_RCC_OscConfig+0x35e>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	2b20      	cmp	r3, #32
 8002b88:	d108      	bne.n	8002b9c <HAL_RCC_OscConfig+0x348>
 8002b8a:	4b70      	ldr	r3, [pc, #448]	@ (8002d4c <HAL_RCC_OscConfig+0x4f8>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002b92:	4a6e      	ldr	r2, [pc, #440]	@ (8002d4c <HAL_RCC_OscConfig+0x4f8>)
 8002b94:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002b98:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b9a:	e075      	b.n	8002c88 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b9c:	4b6b      	ldr	r3, [pc, #428]	@ (8002d4c <HAL_RCC_OscConfig+0x4f8>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	069b      	lsls	r3, r3, #26
 8002baa:	4968      	ldr	r1, [pc, #416]	@ (8002d4c <HAL_RCC_OscConfig+0x4f8>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bb0:	e06a      	b.n	8002c88 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bb2:	4b66      	ldr	r3, [pc, #408]	@ (8002d4c <HAL_RCC_OscConfig+0x4f8>)
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	061b      	lsls	r3, r3, #24
 8002bc0:	4962      	ldr	r1, [pc, #392]	@ (8002d4c <HAL_RCC_OscConfig+0x4f8>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bc6:	e05f      	b.n	8002c88 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	69db      	ldr	r3, [r3, #28]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d042      	beq.n	8002c56 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002bd0:	4b5e      	ldr	r3, [pc, #376]	@ (8002d4c <HAL_RCC_OscConfig+0x4f8>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a5d      	ldr	r2, [pc, #372]	@ (8002d4c <HAL_RCC_OscConfig+0x4f8>)
 8002bd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bdc:	f7fe ff96 	bl	8001b0c <HAL_GetTick>
 8002be0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002be4:	f7fe ff92 	bl	8001b0c <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e280      	b.n	80030f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002bf6:	4b55      	ldr	r3, [pc, #340]	@ (8002d4c <HAL_RCC_OscConfig+0x4f8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0f0      	beq.n	8002be4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c02:	f7fe ffb3 	bl	8001b6c <HAL_GetREVID>
 8002c06:	4603      	mov	r3, r0
 8002c08:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d817      	bhi.n	8002c40 <HAL_RCC_OscConfig+0x3ec>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	2b20      	cmp	r3, #32
 8002c16:	d108      	bne.n	8002c2a <HAL_RCC_OscConfig+0x3d6>
 8002c18:	4b4c      	ldr	r3, [pc, #304]	@ (8002d4c <HAL_RCC_OscConfig+0x4f8>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002c20:	4a4a      	ldr	r2, [pc, #296]	@ (8002d4c <HAL_RCC_OscConfig+0x4f8>)
 8002c22:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002c26:	6053      	str	r3, [r2, #4]
 8002c28:	e02e      	b.n	8002c88 <HAL_RCC_OscConfig+0x434>
 8002c2a:	4b48      	ldr	r3, [pc, #288]	@ (8002d4c <HAL_RCC_OscConfig+0x4f8>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	069b      	lsls	r3, r3, #26
 8002c38:	4944      	ldr	r1, [pc, #272]	@ (8002d4c <HAL_RCC_OscConfig+0x4f8>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	604b      	str	r3, [r1, #4]
 8002c3e:	e023      	b.n	8002c88 <HAL_RCC_OscConfig+0x434>
 8002c40:	4b42      	ldr	r3, [pc, #264]	@ (8002d4c <HAL_RCC_OscConfig+0x4f8>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	061b      	lsls	r3, r3, #24
 8002c4e:	493f      	ldr	r1, [pc, #252]	@ (8002d4c <HAL_RCC_OscConfig+0x4f8>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	60cb      	str	r3, [r1, #12]
 8002c54:	e018      	b.n	8002c88 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002c56:	4b3d      	ldr	r3, [pc, #244]	@ (8002d4c <HAL_RCC_OscConfig+0x4f8>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a3c      	ldr	r2, [pc, #240]	@ (8002d4c <HAL_RCC_OscConfig+0x4f8>)
 8002c5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c62:	f7fe ff53 	bl	8001b0c <HAL_GetTick>
 8002c66:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c68:	e008      	b.n	8002c7c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002c6a:	f7fe ff4f 	bl	8001b0c <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e23d      	b.n	80030f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c7c:	4b33      	ldr	r3, [pc, #204]	@ (8002d4c <HAL_RCC_OscConfig+0x4f8>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1f0      	bne.n	8002c6a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0308 	and.w	r3, r3, #8
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d036      	beq.n	8002d02 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d019      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c9c:	4b2b      	ldr	r3, [pc, #172]	@ (8002d4c <HAL_RCC_OscConfig+0x4f8>)
 8002c9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ca0:	4a2a      	ldr	r2, [pc, #168]	@ (8002d4c <HAL_RCC_OscConfig+0x4f8>)
 8002ca2:	f043 0301 	orr.w	r3, r3, #1
 8002ca6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca8:	f7fe ff30 	bl	8001b0c <HAL_GetTick>
 8002cac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb0:	f7fe ff2c 	bl	8001b0c <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e21a      	b.n	80030f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002cc2:	4b22      	ldr	r3, [pc, #136]	@ (8002d4c <HAL_RCC_OscConfig+0x4f8>)
 8002cc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0f0      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x45c>
 8002cce:	e018      	b.n	8002d02 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cd0:	4b1e      	ldr	r3, [pc, #120]	@ (8002d4c <HAL_RCC_OscConfig+0x4f8>)
 8002cd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cd4:	4a1d      	ldr	r2, [pc, #116]	@ (8002d4c <HAL_RCC_OscConfig+0x4f8>)
 8002cd6:	f023 0301 	bic.w	r3, r3, #1
 8002cda:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cdc:	f7fe ff16 	bl	8001b0c <HAL_GetTick>
 8002ce0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ce4:	f7fe ff12 	bl	8001b0c <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e200      	b.n	80030f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002cf6:	4b15      	ldr	r3, [pc, #84]	@ (8002d4c <HAL_RCC_OscConfig+0x4f8>)
 8002cf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1f0      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0320 	and.w	r3, r3, #32
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d039      	beq.n	8002d82 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d01c      	beq.n	8002d50 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d16:	4b0d      	ldr	r3, [pc, #52]	@ (8002d4c <HAL_RCC_OscConfig+0x4f8>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a0c      	ldr	r2, [pc, #48]	@ (8002d4c <HAL_RCC_OscConfig+0x4f8>)
 8002d1c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002d20:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d22:	f7fe fef3 	bl	8001b0c <HAL_GetTick>
 8002d26:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d2a:	f7fe feef 	bl	8001b0c <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e1dd      	b.n	80030f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d3c:	4b03      	ldr	r3, [pc, #12]	@ (8002d4c <HAL_RCC_OscConfig+0x4f8>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0f0      	beq.n	8002d2a <HAL_RCC_OscConfig+0x4d6>
 8002d48:	e01b      	b.n	8002d82 <HAL_RCC_OscConfig+0x52e>
 8002d4a:	bf00      	nop
 8002d4c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d50:	4b9b      	ldr	r3, [pc, #620]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a9a      	ldr	r2, [pc, #616]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002d56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002d5a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d5c:	f7fe fed6 	bl	8001b0c <HAL_GetTick>
 8002d60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d64:	f7fe fed2 	bl	8001b0c <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e1c0      	b.n	80030f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d76:	4b92      	ldr	r3, [pc, #584]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1f0      	bne.n	8002d64 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0304 	and.w	r3, r3, #4
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 8081 	beq.w	8002e92 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d90:	4b8c      	ldr	r3, [pc, #560]	@ (8002fc4 <HAL_RCC_OscConfig+0x770>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a8b      	ldr	r2, [pc, #556]	@ (8002fc4 <HAL_RCC_OscConfig+0x770>)
 8002d96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d9c:	f7fe feb6 	bl	8001b0c <HAL_GetTick>
 8002da0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da4:	f7fe feb2 	bl	8001b0c <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b64      	cmp	r3, #100	@ 0x64
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e1a0      	b.n	80030f8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002db6:	4b83      	ldr	r3, [pc, #524]	@ (8002fc4 <HAL_RCC_OscConfig+0x770>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0f0      	beq.n	8002da4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d106      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x584>
 8002dca:	4b7d      	ldr	r3, [pc, #500]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dce:	4a7c      	ldr	r2, [pc, #496]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002dd0:	f043 0301 	orr.w	r3, r3, #1
 8002dd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dd6:	e02d      	b.n	8002e34 <HAL_RCC_OscConfig+0x5e0>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10c      	bne.n	8002dfa <HAL_RCC_OscConfig+0x5a6>
 8002de0:	4b77      	ldr	r3, [pc, #476]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002de4:	4a76      	ldr	r2, [pc, #472]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002de6:	f023 0301 	bic.w	r3, r3, #1
 8002dea:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dec:	4b74      	ldr	r3, [pc, #464]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df0:	4a73      	ldr	r2, [pc, #460]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002df2:	f023 0304 	bic.w	r3, r3, #4
 8002df6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002df8:	e01c      	b.n	8002e34 <HAL_RCC_OscConfig+0x5e0>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2b05      	cmp	r3, #5
 8002e00:	d10c      	bne.n	8002e1c <HAL_RCC_OscConfig+0x5c8>
 8002e02:	4b6f      	ldr	r3, [pc, #444]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e06:	4a6e      	ldr	r2, [pc, #440]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002e08:	f043 0304 	orr.w	r3, r3, #4
 8002e0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e0e:	4b6c      	ldr	r3, [pc, #432]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e12:	4a6b      	ldr	r2, [pc, #428]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002e14:	f043 0301 	orr.w	r3, r3, #1
 8002e18:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e1a:	e00b      	b.n	8002e34 <HAL_RCC_OscConfig+0x5e0>
 8002e1c:	4b68      	ldr	r3, [pc, #416]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002e1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e20:	4a67      	ldr	r2, [pc, #412]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002e22:	f023 0301 	bic.w	r3, r3, #1
 8002e26:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e28:	4b65      	ldr	r3, [pc, #404]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e2c:	4a64      	ldr	r2, [pc, #400]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002e2e:	f023 0304 	bic.w	r3, r3, #4
 8002e32:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d015      	beq.n	8002e68 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3c:	f7fe fe66 	bl	8001b0c <HAL_GetTick>
 8002e40:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e42:	e00a      	b.n	8002e5a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e44:	f7fe fe62 	bl	8001b0c <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e14e      	b.n	80030f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e5a:	4b59      	ldr	r3, [pc, #356]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0ee      	beq.n	8002e44 <HAL_RCC_OscConfig+0x5f0>
 8002e66:	e014      	b.n	8002e92 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e68:	f7fe fe50 	bl	8001b0c <HAL_GetTick>
 8002e6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e6e:	e00a      	b.n	8002e86 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e70:	f7fe fe4c 	bl	8001b0c <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e138      	b.n	80030f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e86:	4b4e      	ldr	r3, [pc, #312]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1ee      	bne.n	8002e70 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 812d 	beq.w	80030f6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002e9c:	4b48      	ldr	r3, [pc, #288]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ea4:	2b18      	cmp	r3, #24
 8002ea6:	f000 80bd 	beq.w	8003024 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	f040 809e 	bne.w	8002ff0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb4:	4b42      	ldr	r3, [pc, #264]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a41      	ldr	r2, [pc, #260]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002eba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec0:	f7fe fe24 	bl	8001b0c <HAL_GetTick>
 8002ec4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec8:	f7fe fe20 	bl	8001b0c <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e10e      	b.n	80030f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002eda:	4b39      	ldr	r3, [pc, #228]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f0      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ee6:	4b36      	ldr	r3, [pc, #216]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002ee8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002eea:	4b37      	ldr	r3, [pc, #220]	@ (8002fc8 <HAL_RCC_OscConfig+0x774>)
 8002eec:	4013      	ands	r3, r2
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002ef6:	0112      	lsls	r2, r2, #4
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	4931      	ldr	r1, [pc, #196]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	628b      	str	r3, [r1, #40]	@ 0x28
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f04:	3b01      	subs	r3, #1
 8002f06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	025b      	lsls	r3, r3, #9
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	431a      	orrs	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	041b      	lsls	r3, r3, #16
 8002f1e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	061b      	lsls	r3, r3, #24
 8002f2c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002f30:	4923      	ldr	r1, [pc, #140]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002f36:	4b22      	ldr	r3, [pc, #136]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f3a:	4a21      	ldr	r2, [pc, #132]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002f3c:	f023 0301 	bic.w	r3, r3, #1
 8002f40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f42:	4b1f      	ldr	r3, [pc, #124]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002f44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f46:	4b21      	ldr	r3, [pc, #132]	@ (8002fcc <HAL_RCC_OscConfig+0x778>)
 8002f48:	4013      	ands	r3, r2
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002f4e:	00d2      	lsls	r2, r2, #3
 8002f50:	491b      	ldr	r1, [pc, #108]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002f56:	4b1a      	ldr	r3, [pc, #104]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f5a:	f023 020c 	bic.w	r2, r3, #12
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f62:	4917      	ldr	r1, [pc, #92]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002f68:	4b15      	ldr	r3, [pc, #84]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f6c:	f023 0202 	bic.w	r2, r3, #2
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f74:	4912      	ldr	r1, [pc, #72]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002f7a:	4b11      	ldr	r3, [pc, #68]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f7e:	4a10      	ldr	r2, [pc, #64]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002f80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f86:	4b0e      	ldr	r3, [pc, #56]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f8a:	4a0d      	ldr	r2, [pc, #52]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002f8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002f92:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f96:	4a0a      	ldr	r2, [pc, #40]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002f98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002f9e:	4b08      	ldr	r3, [pc, #32]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa2:	4a07      	ldr	r2, [pc, #28]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002faa:	4b05      	ldr	r3, [pc, #20]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a04      	ldr	r2, [pc, #16]	@ (8002fc0 <HAL_RCC_OscConfig+0x76c>)
 8002fb0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb6:	f7fe fda9 	bl	8001b0c <HAL_GetTick>
 8002fba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fbc:	e011      	b.n	8002fe2 <HAL_RCC_OscConfig+0x78e>
 8002fbe:	bf00      	nop
 8002fc0:	58024400 	.word	0x58024400
 8002fc4:	58024800 	.word	0x58024800
 8002fc8:	fffffc0c 	.word	0xfffffc0c
 8002fcc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd0:	f7fe fd9c 	bl	8001b0c <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e08a      	b.n	80030f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fe2:	4b47      	ldr	r3, [pc, #284]	@ (8003100 <HAL_RCC_OscConfig+0x8ac>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0f0      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x77c>
 8002fee:	e082      	b.n	80030f6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff0:	4b43      	ldr	r3, [pc, #268]	@ (8003100 <HAL_RCC_OscConfig+0x8ac>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a42      	ldr	r2, [pc, #264]	@ (8003100 <HAL_RCC_OscConfig+0x8ac>)
 8002ff6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ffa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffc:	f7fe fd86 	bl	8001b0c <HAL_GetTick>
 8003000:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003004:	f7fe fd82 	bl	8001b0c <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e070      	b.n	80030f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003016:	4b3a      	ldr	r3, [pc, #232]	@ (8003100 <HAL_RCC_OscConfig+0x8ac>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1f0      	bne.n	8003004 <HAL_RCC_OscConfig+0x7b0>
 8003022:	e068      	b.n	80030f6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003024:	4b36      	ldr	r3, [pc, #216]	@ (8003100 <HAL_RCC_OscConfig+0x8ac>)
 8003026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003028:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800302a:	4b35      	ldr	r3, [pc, #212]	@ (8003100 <HAL_RCC_OscConfig+0x8ac>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003034:	2b01      	cmp	r3, #1
 8003036:	d031      	beq.n	800309c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	f003 0203 	and.w	r2, r3, #3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003042:	429a      	cmp	r2, r3
 8003044:	d12a      	bne.n	800309c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	091b      	lsrs	r3, r3, #4
 800304a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003052:	429a      	cmp	r2, r3
 8003054:	d122      	bne.n	800309c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003060:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003062:	429a      	cmp	r2, r3
 8003064:	d11a      	bne.n	800309c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	0a5b      	lsrs	r3, r3, #9
 800306a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003072:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003074:	429a      	cmp	r2, r3
 8003076:	d111      	bne.n	800309c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	0c1b      	lsrs	r3, r3, #16
 800307c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003084:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003086:	429a      	cmp	r2, r3
 8003088:	d108      	bne.n	800309c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	0e1b      	lsrs	r3, r3, #24
 800308e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003096:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003098:	429a      	cmp	r2, r3
 800309a:	d001      	beq.n	80030a0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e02b      	b.n	80030f8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80030a0:	4b17      	ldr	r3, [pc, #92]	@ (8003100 <HAL_RCC_OscConfig+0x8ac>)
 80030a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030a4:	08db      	lsrs	r3, r3, #3
 80030a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80030aa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d01f      	beq.n	80030f6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80030b6:	4b12      	ldr	r3, [pc, #72]	@ (8003100 <HAL_RCC_OscConfig+0x8ac>)
 80030b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ba:	4a11      	ldr	r2, [pc, #68]	@ (8003100 <HAL_RCC_OscConfig+0x8ac>)
 80030bc:	f023 0301 	bic.w	r3, r3, #1
 80030c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030c2:	f7fe fd23 	bl	8001b0c <HAL_GetTick>
 80030c6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80030c8:	bf00      	nop
 80030ca:	f7fe fd1f 	bl	8001b0c <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d0f9      	beq.n	80030ca <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80030d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003100 <HAL_RCC_OscConfig+0x8ac>)
 80030d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030da:	4b0a      	ldr	r3, [pc, #40]	@ (8003104 <HAL_RCC_OscConfig+0x8b0>)
 80030dc:	4013      	ands	r3, r2
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80030e2:	00d2      	lsls	r2, r2, #3
 80030e4:	4906      	ldr	r1, [pc, #24]	@ (8003100 <HAL_RCC_OscConfig+0x8ac>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80030ea:	4b05      	ldr	r3, [pc, #20]	@ (8003100 <HAL_RCC_OscConfig+0x8ac>)
 80030ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ee:	4a04      	ldr	r2, [pc, #16]	@ (8003100 <HAL_RCC_OscConfig+0x8ac>)
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3730      	adds	r7, #48	@ 0x30
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	58024400 	.word	0x58024400
 8003104:	ffff0007 	.word	0xffff0007

08003108 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e19c      	b.n	8003456 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800311c:	4b8a      	ldr	r3, [pc, #552]	@ (8003348 <HAL_RCC_ClockConfig+0x240>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 030f 	and.w	r3, r3, #15
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	429a      	cmp	r2, r3
 8003128:	d910      	bls.n	800314c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312a:	4b87      	ldr	r3, [pc, #540]	@ (8003348 <HAL_RCC_ClockConfig+0x240>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f023 020f 	bic.w	r2, r3, #15
 8003132:	4985      	ldr	r1, [pc, #532]	@ (8003348 <HAL_RCC_ClockConfig+0x240>)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	4313      	orrs	r3, r2
 8003138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800313a:	4b83      	ldr	r3, [pc, #524]	@ (8003348 <HAL_RCC_ClockConfig+0x240>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 030f 	and.w	r3, r3, #15
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	429a      	cmp	r2, r3
 8003146:	d001      	beq.n	800314c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e184      	b.n	8003456 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d010      	beq.n	800317a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691a      	ldr	r2, [r3, #16]
 800315c:	4b7b      	ldr	r3, [pc, #492]	@ (800334c <HAL_RCC_ClockConfig+0x244>)
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003164:	429a      	cmp	r2, r3
 8003166:	d908      	bls.n	800317a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003168:	4b78      	ldr	r3, [pc, #480]	@ (800334c <HAL_RCC_ClockConfig+0x244>)
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	4975      	ldr	r1, [pc, #468]	@ (800334c <HAL_RCC_ClockConfig+0x244>)
 8003176:	4313      	orrs	r3, r2
 8003178:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b00      	cmp	r3, #0
 8003184:	d010      	beq.n	80031a8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695a      	ldr	r2, [r3, #20]
 800318a:	4b70      	ldr	r3, [pc, #448]	@ (800334c <HAL_RCC_ClockConfig+0x244>)
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003192:	429a      	cmp	r2, r3
 8003194:	d908      	bls.n	80031a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003196:	4b6d      	ldr	r3, [pc, #436]	@ (800334c <HAL_RCC_ClockConfig+0x244>)
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	496a      	ldr	r1, [pc, #424]	@ (800334c <HAL_RCC_ClockConfig+0x244>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0310 	and.w	r3, r3, #16
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d010      	beq.n	80031d6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	699a      	ldr	r2, [r3, #24]
 80031b8:	4b64      	ldr	r3, [pc, #400]	@ (800334c <HAL_RCC_ClockConfig+0x244>)
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d908      	bls.n	80031d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80031c4:	4b61      	ldr	r3, [pc, #388]	@ (800334c <HAL_RCC_ClockConfig+0x244>)
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	495e      	ldr	r1, [pc, #376]	@ (800334c <HAL_RCC_ClockConfig+0x244>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0320 	and.w	r3, r3, #32
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d010      	beq.n	8003204 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69da      	ldr	r2, [r3, #28]
 80031e6:	4b59      	ldr	r3, [pc, #356]	@ (800334c <HAL_RCC_ClockConfig+0x244>)
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d908      	bls.n	8003204 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80031f2:	4b56      	ldr	r3, [pc, #344]	@ (800334c <HAL_RCC_ClockConfig+0x244>)
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	4953      	ldr	r1, [pc, #332]	@ (800334c <HAL_RCC_ClockConfig+0x244>)
 8003200:	4313      	orrs	r3, r2
 8003202:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d010      	beq.n	8003232 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68da      	ldr	r2, [r3, #12]
 8003214:	4b4d      	ldr	r3, [pc, #308]	@ (800334c <HAL_RCC_ClockConfig+0x244>)
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	f003 030f 	and.w	r3, r3, #15
 800321c:	429a      	cmp	r2, r3
 800321e:	d908      	bls.n	8003232 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003220:	4b4a      	ldr	r3, [pc, #296]	@ (800334c <HAL_RCC_ClockConfig+0x244>)
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	f023 020f 	bic.w	r2, r3, #15
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	4947      	ldr	r1, [pc, #284]	@ (800334c <HAL_RCC_ClockConfig+0x244>)
 800322e:	4313      	orrs	r3, r2
 8003230:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d055      	beq.n	80032ea <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800323e:	4b43      	ldr	r3, [pc, #268]	@ (800334c <HAL_RCC_ClockConfig+0x244>)
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	4940      	ldr	r1, [pc, #256]	@ (800334c <HAL_RCC_ClockConfig+0x244>)
 800324c:	4313      	orrs	r3, r2
 800324e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b02      	cmp	r3, #2
 8003256:	d107      	bne.n	8003268 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003258:	4b3c      	ldr	r3, [pc, #240]	@ (800334c <HAL_RCC_ClockConfig+0x244>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d121      	bne.n	80032a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e0f6      	b.n	8003456 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b03      	cmp	r3, #3
 800326e:	d107      	bne.n	8003280 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003270:	4b36      	ldr	r3, [pc, #216]	@ (800334c <HAL_RCC_ClockConfig+0x244>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d115      	bne.n	80032a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e0ea      	b.n	8003456 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d107      	bne.n	8003298 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003288:	4b30      	ldr	r3, [pc, #192]	@ (800334c <HAL_RCC_ClockConfig+0x244>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003290:	2b00      	cmp	r3, #0
 8003292:	d109      	bne.n	80032a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e0de      	b.n	8003456 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003298:	4b2c      	ldr	r3, [pc, #176]	@ (800334c <HAL_RCC_ClockConfig+0x244>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e0d6      	b.n	8003456 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032a8:	4b28      	ldr	r3, [pc, #160]	@ (800334c <HAL_RCC_ClockConfig+0x244>)
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	f023 0207 	bic.w	r2, r3, #7
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	4925      	ldr	r1, [pc, #148]	@ (800334c <HAL_RCC_ClockConfig+0x244>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032ba:	f7fe fc27 	bl	8001b0c <HAL_GetTick>
 80032be:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c0:	e00a      	b.n	80032d8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c2:	f7fe fc23 	bl	8001b0c <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e0be      	b.n	8003456 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d8:	4b1c      	ldr	r3, [pc, #112]	@ (800334c <HAL_RCC_ClockConfig+0x244>)
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d1eb      	bne.n	80032c2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d010      	beq.n	8003318 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	4b14      	ldr	r3, [pc, #80]	@ (800334c <HAL_RCC_ClockConfig+0x244>)
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	429a      	cmp	r2, r3
 8003304:	d208      	bcs.n	8003318 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003306:	4b11      	ldr	r3, [pc, #68]	@ (800334c <HAL_RCC_ClockConfig+0x244>)
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	f023 020f 	bic.w	r2, r3, #15
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	490e      	ldr	r1, [pc, #56]	@ (800334c <HAL_RCC_ClockConfig+0x244>)
 8003314:	4313      	orrs	r3, r2
 8003316:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003318:	4b0b      	ldr	r3, [pc, #44]	@ (8003348 <HAL_RCC_ClockConfig+0x240>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 030f 	and.w	r3, r3, #15
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d214      	bcs.n	8003350 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003326:	4b08      	ldr	r3, [pc, #32]	@ (8003348 <HAL_RCC_ClockConfig+0x240>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f023 020f 	bic.w	r2, r3, #15
 800332e:	4906      	ldr	r1, [pc, #24]	@ (8003348 <HAL_RCC_ClockConfig+0x240>)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	4313      	orrs	r3, r2
 8003334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003336:	4b04      	ldr	r3, [pc, #16]	@ (8003348 <HAL_RCC_ClockConfig+0x240>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d005      	beq.n	8003350 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e086      	b.n	8003456 <HAL_RCC_ClockConfig+0x34e>
 8003348:	52002000 	.word	0x52002000
 800334c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0304 	and.w	r3, r3, #4
 8003358:	2b00      	cmp	r3, #0
 800335a:	d010      	beq.n	800337e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	691a      	ldr	r2, [r3, #16]
 8003360:	4b3f      	ldr	r3, [pc, #252]	@ (8003460 <HAL_RCC_ClockConfig+0x358>)
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003368:	429a      	cmp	r2, r3
 800336a:	d208      	bcs.n	800337e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800336c:	4b3c      	ldr	r3, [pc, #240]	@ (8003460 <HAL_RCC_ClockConfig+0x358>)
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	4939      	ldr	r1, [pc, #228]	@ (8003460 <HAL_RCC_ClockConfig+0x358>)
 800337a:	4313      	orrs	r3, r2
 800337c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0308 	and.w	r3, r3, #8
 8003386:	2b00      	cmp	r3, #0
 8003388:	d010      	beq.n	80033ac <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	695a      	ldr	r2, [r3, #20]
 800338e:	4b34      	ldr	r3, [pc, #208]	@ (8003460 <HAL_RCC_ClockConfig+0x358>)
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003396:	429a      	cmp	r2, r3
 8003398:	d208      	bcs.n	80033ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800339a:	4b31      	ldr	r3, [pc, #196]	@ (8003460 <HAL_RCC_ClockConfig+0x358>)
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	492e      	ldr	r1, [pc, #184]	@ (8003460 <HAL_RCC_ClockConfig+0x358>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0310 	and.w	r3, r3, #16
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d010      	beq.n	80033da <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	699a      	ldr	r2, [r3, #24]
 80033bc:	4b28      	ldr	r3, [pc, #160]	@ (8003460 <HAL_RCC_ClockConfig+0x358>)
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d208      	bcs.n	80033da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80033c8:	4b25      	ldr	r3, [pc, #148]	@ (8003460 <HAL_RCC_ClockConfig+0x358>)
 80033ca:	69db      	ldr	r3, [r3, #28]
 80033cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	4922      	ldr	r1, [pc, #136]	@ (8003460 <HAL_RCC_ClockConfig+0x358>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d010      	beq.n	8003408 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69da      	ldr	r2, [r3, #28]
 80033ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003460 <HAL_RCC_ClockConfig+0x358>)
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d208      	bcs.n	8003408 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80033f6:	4b1a      	ldr	r3, [pc, #104]	@ (8003460 <HAL_RCC_ClockConfig+0x358>)
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	4917      	ldr	r1, [pc, #92]	@ (8003460 <HAL_RCC_ClockConfig+0x358>)
 8003404:	4313      	orrs	r3, r2
 8003406:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003408:	f000 f834 	bl	8003474 <HAL_RCC_GetSysClockFreq>
 800340c:	4602      	mov	r2, r0
 800340e:	4b14      	ldr	r3, [pc, #80]	@ (8003460 <HAL_RCC_ClockConfig+0x358>)
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	0a1b      	lsrs	r3, r3, #8
 8003414:	f003 030f 	and.w	r3, r3, #15
 8003418:	4912      	ldr	r1, [pc, #72]	@ (8003464 <HAL_RCC_ClockConfig+0x35c>)
 800341a:	5ccb      	ldrb	r3, [r1, r3]
 800341c:	f003 031f 	and.w	r3, r3, #31
 8003420:	fa22 f303 	lsr.w	r3, r2, r3
 8003424:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <HAL_RCC_ClockConfig+0x358>)
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	4a0d      	ldr	r2, [pc, #52]	@ (8003464 <HAL_RCC_ClockConfig+0x35c>)
 8003430:	5cd3      	ldrb	r3, [r2, r3]
 8003432:	f003 031f 	and.w	r3, r3, #31
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	fa22 f303 	lsr.w	r3, r2, r3
 800343c:	4a0a      	ldr	r2, [pc, #40]	@ (8003468 <HAL_RCC_ClockConfig+0x360>)
 800343e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003440:	4a0a      	ldr	r2, [pc, #40]	@ (800346c <HAL_RCC_ClockConfig+0x364>)
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003446:	4b0a      	ldr	r3, [pc, #40]	@ (8003470 <HAL_RCC_ClockConfig+0x368>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f7fe fb14 	bl	8001a78 <HAL_InitTick>
 8003450:	4603      	mov	r3, r0
 8003452:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003454:	7bfb      	ldrb	r3, [r7, #15]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	58024400 	.word	0x58024400
 8003464:	0800aad8 	.word	0x0800aad8
 8003468:	24000004 	.word	0x24000004
 800346c:	24000000 	.word	0x24000000
 8003470:	24000024 	.word	0x24000024

08003474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003474:	b480      	push	{r7}
 8003476:	b089      	sub	sp, #36	@ 0x24
 8003478:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800347a:	4bb3      	ldr	r3, [pc, #716]	@ (8003748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003482:	2b18      	cmp	r3, #24
 8003484:	f200 8155 	bhi.w	8003732 <HAL_RCC_GetSysClockFreq+0x2be>
 8003488:	a201      	add	r2, pc, #4	@ (adr r2, 8003490 <HAL_RCC_GetSysClockFreq+0x1c>)
 800348a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348e:	bf00      	nop
 8003490:	080034f5 	.word	0x080034f5
 8003494:	08003733 	.word	0x08003733
 8003498:	08003733 	.word	0x08003733
 800349c:	08003733 	.word	0x08003733
 80034a0:	08003733 	.word	0x08003733
 80034a4:	08003733 	.word	0x08003733
 80034a8:	08003733 	.word	0x08003733
 80034ac:	08003733 	.word	0x08003733
 80034b0:	0800351b 	.word	0x0800351b
 80034b4:	08003733 	.word	0x08003733
 80034b8:	08003733 	.word	0x08003733
 80034bc:	08003733 	.word	0x08003733
 80034c0:	08003733 	.word	0x08003733
 80034c4:	08003733 	.word	0x08003733
 80034c8:	08003733 	.word	0x08003733
 80034cc:	08003733 	.word	0x08003733
 80034d0:	08003521 	.word	0x08003521
 80034d4:	08003733 	.word	0x08003733
 80034d8:	08003733 	.word	0x08003733
 80034dc:	08003733 	.word	0x08003733
 80034e0:	08003733 	.word	0x08003733
 80034e4:	08003733 	.word	0x08003733
 80034e8:	08003733 	.word	0x08003733
 80034ec:	08003733 	.word	0x08003733
 80034f0:	08003527 	.word	0x08003527
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034f4:	4b94      	ldr	r3, [pc, #592]	@ (8003748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0320 	and.w	r3, r3, #32
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d009      	beq.n	8003514 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003500:	4b91      	ldr	r3, [pc, #580]	@ (8003748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	08db      	lsrs	r3, r3, #3
 8003506:	f003 0303 	and.w	r3, r3, #3
 800350a:	4a90      	ldr	r2, [pc, #576]	@ (800374c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800350c:	fa22 f303 	lsr.w	r3, r2, r3
 8003510:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003512:	e111      	b.n	8003738 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003514:	4b8d      	ldr	r3, [pc, #564]	@ (800374c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003516:	61bb      	str	r3, [r7, #24]
      break;
 8003518:	e10e      	b.n	8003738 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800351a:	4b8d      	ldr	r3, [pc, #564]	@ (8003750 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800351c:	61bb      	str	r3, [r7, #24]
      break;
 800351e:	e10b      	b.n	8003738 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003520:	4b8c      	ldr	r3, [pc, #560]	@ (8003754 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003522:	61bb      	str	r3, [r7, #24]
      break;
 8003524:	e108      	b.n	8003738 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003526:	4b88      	ldr	r3, [pc, #544]	@ (8003748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003530:	4b85      	ldr	r3, [pc, #532]	@ (8003748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003534:	091b      	lsrs	r3, r3, #4
 8003536:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800353a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800353c:	4b82      	ldr	r3, [pc, #520]	@ (8003748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800353e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003546:	4b80      	ldr	r3, [pc, #512]	@ (8003748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800354a:	08db      	lsrs	r3, r3, #3
 800354c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	fb02 f303 	mul.w	r3, r2, r3
 8003556:	ee07 3a90 	vmov	s15, r3
 800355a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800355e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 80e1 	beq.w	800372c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	2b02      	cmp	r3, #2
 800356e:	f000 8083 	beq.w	8003678 <HAL_RCC_GetSysClockFreq+0x204>
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2b02      	cmp	r3, #2
 8003576:	f200 80a1 	bhi.w	80036bc <HAL_RCC_GetSysClockFreq+0x248>
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d003      	beq.n	8003588 <HAL_RCC_GetSysClockFreq+0x114>
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d056      	beq.n	8003634 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003586:	e099      	b.n	80036bc <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003588:	4b6f      	ldr	r3, [pc, #444]	@ (8003748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0320 	and.w	r3, r3, #32
 8003590:	2b00      	cmp	r3, #0
 8003592:	d02d      	beq.n	80035f0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003594:	4b6c      	ldr	r3, [pc, #432]	@ (8003748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	08db      	lsrs	r3, r3, #3
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	4a6b      	ldr	r2, [pc, #428]	@ (800374c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035a0:	fa22 f303 	lsr.w	r3, r2, r3
 80035a4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	ee07 3a90 	vmov	s15, r3
 80035ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	ee07 3a90 	vmov	s15, r3
 80035b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035be:	4b62      	ldr	r3, [pc, #392]	@ (8003748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035c6:	ee07 3a90 	vmov	s15, r3
 80035ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80035d2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003758 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80035e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80035ee:	e087      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	ee07 3a90 	vmov	s15, r3
 80035f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035fa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800375c <HAL_RCC_GetSysClockFreq+0x2e8>
 80035fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003602:	4b51      	ldr	r3, [pc, #324]	@ (8003748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800360a:	ee07 3a90 	vmov	s15, r3
 800360e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003612:	ed97 6a02 	vldr	s12, [r7, #8]
 8003616:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003758 <HAL_RCC_GetSysClockFreq+0x2e4>
 800361a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800361e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003622:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800362a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800362e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003632:	e065      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	ee07 3a90 	vmov	s15, r3
 800363a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800363e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003760 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003646:	4b40      	ldr	r3, [pc, #256]	@ (8003748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800364e:	ee07 3a90 	vmov	s15, r3
 8003652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003656:	ed97 6a02 	vldr	s12, [r7, #8]
 800365a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003758 <HAL_RCC_GetSysClockFreq+0x2e4>
 800365e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003666:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800366a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800366e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003672:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003676:	e043      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	ee07 3a90 	vmov	s15, r3
 800367e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003682:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003764 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800368a:	4b2f      	ldr	r3, [pc, #188]	@ (8003748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800368c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003692:	ee07 3a90 	vmov	s15, r3
 8003696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800369a:	ed97 6a02 	vldr	s12, [r7, #8]
 800369e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003758 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80036ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80036ba:	e021      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	ee07 3a90 	vmov	s15, r3
 80036c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036c6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003760 <HAL_RCC_GetSysClockFreq+0x2ec>
 80036ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036d6:	ee07 3a90 	vmov	s15, r3
 80036da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036de:	ed97 6a02 	vldr	s12, [r7, #8]
 80036e2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003758 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80036f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80036fe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003700:	4b11      	ldr	r3, [pc, #68]	@ (8003748 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003704:	0a5b      	lsrs	r3, r3, #9
 8003706:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800370a:	3301      	adds	r3, #1
 800370c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	ee07 3a90 	vmov	s15, r3
 8003714:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003718:	edd7 6a07 	vldr	s13, [r7, #28]
 800371c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003720:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003724:	ee17 3a90 	vmov	r3, s15
 8003728:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800372a:	e005      	b.n	8003738 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800372c:	2300      	movs	r3, #0
 800372e:	61bb      	str	r3, [r7, #24]
      break;
 8003730:	e002      	b.n	8003738 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003732:	4b07      	ldr	r3, [pc, #28]	@ (8003750 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003734:	61bb      	str	r3, [r7, #24]
      break;
 8003736:	bf00      	nop
  }

  return sysclockfreq;
 8003738:	69bb      	ldr	r3, [r7, #24]
}
 800373a:	4618      	mov	r0, r3
 800373c:	3724      	adds	r7, #36	@ 0x24
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	58024400 	.word	0x58024400
 800374c:	03d09000 	.word	0x03d09000
 8003750:	003d0900 	.word	0x003d0900
 8003754:	017d7840 	.word	0x017d7840
 8003758:	46000000 	.word	0x46000000
 800375c:	4c742400 	.word	0x4c742400
 8003760:	4a742400 	.word	0x4a742400
 8003764:	4bbebc20 	.word	0x4bbebc20

08003768 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800376e:	f7ff fe81 	bl	8003474 <HAL_RCC_GetSysClockFreq>
 8003772:	4602      	mov	r2, r0
 8003774:	4b10      	ldr	r3, [pc, #64]	@ (80037b8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	0a1b      	lsrs	r3, r3, #8
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	490f      	ldr	r1, [pc, #60]	@ (80037bc <HAL_RCC_GetHCLKFreq+0x54>)
 8003780:	5ccb      	ldrb	r3, [r1, r3]
 8003782:	f003 031f 	and.w	r3, r3, #31
 8003786:	fa22 f303 	lsr.w	r3, r2, r3
 800378a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800378c:	4b0a      	ldr	r3, [pc, #40]	@ (80037b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	f003 030f 	and.w	r3, r3, #15
 8003794:	4a09      	ldr	r2, [pc, #36]	@ (80037bc <HAL_RCC_GetHCLKFreq+0x54>)
 8003796:	5cd3      	ldrb	r3, [r2, r3]
 8003798:	f003 031f 	and.w	r3, r3, #31
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	fa22 f303 	lsr.w	r3, r2, r3
 80037a2:	4a07      	ldr	r2, [pc, #28]	@ (80037c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80037a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80037a6:	4a07      	ldr	r2, [pc, #28]	@ (80037c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80037ac:	4b04      	ldr	r3, [pc, #16]	@ (80037c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80037ae:	681b      	ldr	r3, [r3, #0]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	58024400 	.word	0x58024400
 80037bc:	0800aad8 	.word	0x0800aad8
 80037c0:	24000004 	.word	0x24000004
 80037c4:	24000000 	.word	0x24000000

080037c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80037cc:	f7ff ffcc 	bl	8003768 <HAL_RCC_GetHCLKFreq>
 80037d0:	4602      	mov	r2, r0
 80037d2:	4b06      	ldr	r3, [pc, #24]	@ (80037ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	091b      	lsrs	r3, r3, #4
 80037d8:	f003 0307 	and.w	r3, r3, #7
 80037dc:	4904      	ldr	r1, [pc, #16]	@ (80037f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037de:	5ccb      	ldrb	r3, [r1, r3]
 80037e0:	f003 031f 	and.w	r3, r3, #31
 80037e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	58024400 	.word	0x58024400
 80037f0:	0800aad8 	.word	0x0800aad8

080037f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80037f8:	f7ff ffb6 	bl	8003768 <HAL_RCC_GetHCLKFreq>
 80037fc:	4602      	mov	r2, r0
 80037fe:	4b06      	ldr	r3, [pc, #24]	@ (8003818 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	0a1b      	lsrs	r3, r3, #8
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	4904      	ldr	r1, [pc, #16]	@ (800381c <HAL_RCC_GetPCLK2Freq+0x28>)
 800380a:	5ccb      	ldrb	r3, [r1, r3]
 800380c:	f003 031f 	and.w	r3, r3, #31
 8003810:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003814:	4618      	mov	r0, r3
 8003816:	bd80      	pop	{r7, pc}
 8003818:	58024400 	.word	0x58024400
 800381c:	0800aad8 	.word	0x0800aad8

08003820 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003824:	b0ca      	sub	sp, #296	@ 0x128
 8003826:	af00      	add	r7, sp, #0
 8003828:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800382c:	2300      	movs	r3, #0
 800382e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003832:	2300      	movs	r3, #0
 8003834:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800383c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003840:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003844:	2500      	movs	r5, #0
 8003846:	ea54 0305 	orrs.w	r3, r4, r5
 800384a:	d049      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800384c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003850:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003852:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003856:	d02f      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003858:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800385c:	d828      	bhi.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800385e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003862:	d01a      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003864:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003868:	d822      	bhi.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800386e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003872:	d007      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003874:	e01c      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003876:	4bb8      	ldr	r3, [pc, #736]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387a:	4ab7      	ldr	r2, [pc, #732]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800387c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003880:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003882:	e01a      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003888:	3308      	adds	r3, #8
 800388a:	2102      	movs	r1, #2
 800388c:	4618      	mov	r0, r3
 800388e:	f001 fc8f 	bl	80051b0 <RCCEx_PLL2_Config>
 8003892:	4603      	mov	r3, r0
 8003894:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003898:	e00f      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800389a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800389e:	3328      	adds	r3, #40	@ 0x28
 80038a0:	2102      	movs	r1, #2
 80038a2:	4618      	mov	r0, r3
 80038a4:	f001 fd36 	bl	8005314 <RCCEx_PLL3_Config>
 80038a8:	4603      	mov	r3, r0
 80038aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80038ae:	e004      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038b6:	e000      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80038b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10a      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80038c2:	4ba5      	ldr	r3, [pc, #660]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038c6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80038ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038d0:	4aa1      	ldr	r2, [pc, #644]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038d2:	430b      	orrs	r3, r1
 80038d4:	6513      	str	r3, [r2, #80]	@ 0x50
 80038d6:	e003      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80038e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80038ec:	f04f 0900 	mov.w	r9, #0
 80038f0:	ea58 0309 	orrs.w	r3, r8, r9
 80038f4:	d047      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80038f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038fc:	2b04      	cmp	r3, #4
 80038fe:	d82a      	bhi.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003900:	a201      	add	r2, pc, #4	@ (adr r2, 8003908 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003906:	bf00      	nop
 8003908:	0800391d 	.word	0x0800391d
 800390c:	0800392b 	.word	0x0800392b
 8003910:	08003941 	.word	0x08003941
 8003914:	0800395f 	.word	0x0800395f
 8003918:	0800395f 	.word	0x0800395f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800391c:	4b8e      	ldr	r3, [pc, #568]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800391e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003920:	4a8d      	ldr	r2, [pc, #564]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003922:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003926:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003928:	e01a      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800392a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800392e:	3308      	adds	r3, #8
 8003930:	2100      	movs	r1, #0
 8003932:	4618      	mov	r0, r3
 8003934:	f001 fc3c 	bl	80051b0 <RCCEx_PLL2_Config>
 8003938:	4603      	mov	r3, r0
 800393a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800393e:	e00f      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003944:	3328      	adds	r3, #40	@ 0x28
 8003946:	2100      	movs	r1, #0
 8003948:	4618      	mov	r0, r3
 800394a:	f001 fce3 	bl	8005314 <RCCEx_PLL3_Config>
 800394e:	4603      	mov	r3, r0
 8003950:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003954:	e004      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800395c:	e000      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800395e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003960:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10a      	bne.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003968:	4b7b      	ldr	r3, [pc, #492]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800396a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800396c:	f023 0107 	bic.w	r1, r3, #7
 8003970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003976:	4a78      	ldr	r2, [pc, #480]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003978:	430b      	orrs	r3, r1
 800397a:	6513      	str	r3, [r2, #80]	@ 0x50
 800397c:	e003      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800397e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003982:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800398a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003992:	f04f 0b00 	mov.w	fp, #0
 8003996:	ea5a 030b 	orrs.w	r3, sl, fp
 800399a:	d04c      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800399c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039a6:	d030      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80039a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039ac:	d829      	bhi.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80039ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80039b0:	d02d      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80039b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80039b4:	d825      	bhi.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80039b6:	2b80      	cmp	r3, #128	@ 0x80
 80039b8:	d018      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80039ba:	2b80      	cmp	r3, #128	@ 0x80
 80039bc:	d821      	bhi.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d002      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80039c2:	2b40      	cmp	r3, #64	@ 0x40
 80039c4:	d007      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80039c6:	e01c      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039c8:	4b63      	ldr	r3, [pc, #396]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039cc:	4a62      	ldr	r2, [pc, #392]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80039d4:	e01c      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039da:	3308      	adds	r3, #8
 80039dc:	2100      	movs	r1, #0
 80039de:	4618      	mov	r0, r3
 80039e0:	f001 fbe6 	bl	80051b0 <RCCEx_PLL2_Config>
 80039e4:	4603      	mov	r3, r0
 80039e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80039ea:	e011      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f0:	3328      	adds	r3, #40	@ 0x28
 80039f2:	2100      	movs	r1, #0
 80039f4:	4618      	mov	r0, r3
 80039f6:	f001 fc8d 	bl	8005314 <RCCEx_PLL3_Config>
 80039fa:	4603      	mov	r3, r0
 80039fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003a00:	e006      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a08:	e002      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003a0a:	bf00      	nop
 8003a0c:	e000      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003a0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10a      	bne.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003a18:	4b4f      	ldr	r3, [pc, #316]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a1c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a26:	4a4c      	ldr	r2, [pc, #304]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a28:	430b      	orrs	r3, r1
 8003a2a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a2c:	e003      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003a42:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003a46:	2300      	movs	r3, #0
 8003a48:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003a4c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003a50:	460b      	mov	r3, r1
 8003a52:	4313      	orrs	r3, r2
 8003a54:	d053      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003a5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003a62:	d035      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003a64:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003a68:	d82e      	bhi.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003a6a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003a6e:	d031      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003a70:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003a74:	d828      	bhi.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003a76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a7a:	d01a      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003a7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a80:	d822      	bhi.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003a86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a8a:	d007      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003a8c:	e01c      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a8e:	4b32      	ldr	r3, [pc, #200]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a92:	4a31      	ldr	r2, [pc, #196]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a9a:	e01c      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa0:	3308      	adds	r3, #8
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f001 fb83 	bl	80051b0 <RCCEx_PLL2_Config>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003ab0:	e011      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab6:	3328      	adds	r3, #40	@ 0x28
 8003ab8:	2100      	movs	r1, #0
 8003aba:	4618      	mov	r0, r3
 8003abc:	f001 fc2a 	bl	8005314 <RCCEx_PLL3_Config>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ac6:	e006      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ace:	e002      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003ad0:	bf00      	nop
 8003ad2:	e000      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003ad4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10b      	bne.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003ade:	4b1e      	ldr	r3, [pc, #120]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ae2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003aee:	4a1a      	ldr	r2, [pc, #104]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003af0:	430b      	orrs	r3, r1
 8003af2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003af4:	e003      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003afa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b06:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003b0a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003b0e:	2300      	movs	r3, #0
 8003b10:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003b14:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003b18:	460b      	mov	r3, r1
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	d056      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003b26:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b2a:	d038      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003b2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b30:	d831      	bhi.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003b32:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003b36:	d034      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003b38:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003b3c:	d82b      	bhi.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003b3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b42:	d01d      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003b44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b48:	d825      	bhi.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d006      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003b4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b52:	d00a      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003b54:	e01f      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003b56:	bf00      	nop
 8003b58:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b5c:	4ba2      	ldr	r3, [pc, #648]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b60:	4aa1      	ldr	r2, [pc, #644]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b68:	e01c      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b6e:	3308      	adds	r3, #8
 8003b70:	2100      	movs	r1, #0
 8003b72:	4618      	mov	r0, r3
 8003b74:	f001 fb1c 	bl	80051b0 <RCCEx_PLL2_Config>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003b7e:	e011      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b84:	3328      	adds	r3, #40	@ 0x28
 8003b86:	2100      	movs	r1, #0
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f001 fbc3 	bl	8005314 <RCCEx_PLL3_Config>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b94:	e006      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b9c:	e002      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003b9e:	bf00      	nop
 8003ba0:	e000      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003ba2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ba4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10b      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003bac:	4b8e      	ldr	r3, [pc, #568]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003bbc:	4a8a      	ldr	r2, [pc, #552]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bbe:	430b      	orrs	r3, r1
 8003bc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bc2:	e003      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003bd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003be2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003be6:	460b      	mov	r3, r1
 8003be8:	4313      	orrs	r3, r2
 8003bea:	d03a      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bf2:	2b30      	cmp	r3, #48	@ 0x30
 8003bf4:	d01f      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003bf6:	2b30      	cmp	r3, #48	@ 0x30
 8003bf8:	d819      	bhi.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003bfa:	2b20      	cmp	r3, #32
 8003bfc:	d00c      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003bfe:	2b20      	cmp	r3, #32
 8003c00:	d815      	bhi.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d019      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003c06:	2b10      	cmp	r3, #16
 8003c08:	d111      	bne.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c0a:	4b77      	ldr	r3, [pc, #476]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0e:	4a76      	ldr	r2, [pc, #472]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003c16:	e011      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c1c:	3308      	adds	r3, #8
 8003c1e:	2102      	movs	r1, #2
 8003c20:	4618      	mov	r0, r3
 8003c22:	f001 fac5 	bl	80051b0 <RCCEx_PLL2_Config>
 8003c26:	4603      	mov	r3, r0
 8003c28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003c2c:	e006      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c34:	e002      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003c36:	bf00      	nop
 8003c38:	e000      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003c3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10a      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003c44:	4b68      	ldr	r3, [pc, #416]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c48:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c52:	4a65      	ldr	r2, [pc, #404]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c54:	430b      	orrs	r3, r1
 8003c56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c58:	e003      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003c6e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003c72:	2300      	movs	r3, #0
 8003c74:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003c78:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	d051      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c8c:	d035      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003c8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c92:	d82e      	bhi.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003c94:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c98:	d031      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003c9a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c9e:	d828      	bhi.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ca0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ca4:	d01a      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003ca6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003caa:	d822      	bhi.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003cb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cb4:	d007      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003cb6:	e01c      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cb8:	4b4b      	ldr	r3, [pc, #300]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cbc:	4a4a      	ldr	r2, [pc, #296]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003cc4:	e01c      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cca:	3308      	adds	r3, #8
 8003ccc:	2100      	movs	r1, #0
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f001 fa6e 	bl	80051b0 <RCCEx_PLL2_Config>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003cda:	e011      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce0:	3328      	adds	r3, #40	@ 0x28
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f001 fb15 	bl	8005314 <RCCEx_PLL3_Config>
 8003cea:	4603      	mov	r3, r0
 8003cec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003cf0:	e006      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cf8:	e002      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003cfa:	bf00      	nop
 8003cfc:	e000      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003cfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10a      	bne.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003d08:	4b37      	ldr	r3, [pc, #220]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d0c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d16:	4a34      	ldr	r2, [pc, #208]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d18:	430b      	orrs	r3, r1
 8003d1a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d1c:	e003      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003d32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d36:	2300      	movs	r3, #0
 8003d38:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003d3c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003d40:	460b      	mov	r3, r1
 8003d42:	4313      	orrs	r3, r2
 8003d44:	d056      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d50:	d033      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003d52:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d56:	d82c      	bhi.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003d58:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d5c:	d02f      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003d5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d62:	d826      	bhi.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003d64:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d68:	d02b      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003d6a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d6e:	d820      	bhi.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003d70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d74:	d012      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003d76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d7a:	d81a      	bhi.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d022      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003d80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d84:	d115      	bne.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d8a:	3308      	adds	r3, #8
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f001 fa0e 	bl	80051b0 <RCCEx_PLL2_Config>
 8003d94:	4603      	mov	r3, r0
 8003d96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003d9a:	e015      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da0:	3328      	adds	r3, #40	@ 0x28
 8003da2:	2101      	movs	r1, #1
 8003da4:	4618      	mov	r0, r3
 8003da6:	f001 fab5 	bl	8005314 <RCCEx_PLL3_Config>
 8003daa:	4603      	mov	r3, r0
 8003dac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003db0:	e00a      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003db8:	e006      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003dba:	bf00      	nop
 8003dbc:	e004      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003dbe:	bf00      	nop
 8003dc0:	e002      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003dc2:	bf00      	nop
 8003dc4:	e000      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003dc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10d      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003dd0:	4b05      	ldr	r3, [pc, #20]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dd4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ddc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003dde:	4a02      	ldr	r2, [pc, #8]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003de0:	430b      	orrs	r3, r1
 8003de2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003de4:	e006      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003de6:	bf00      	nop
 8003de8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003df0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003e00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e04:	2300      	movs	r3, #0
 8003e06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e0a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4313      	orrs	r3, r2
 8003e12:	d055      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003e1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e20:	d033      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003e22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e26:	d82c      	bhi.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003e28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e2c:	d02f      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e32:	d826      	bhi.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003e34:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e38:	d02b      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003e3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e3e:	d820      	bhi.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003e40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e44:	d012      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003e46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e4a:	d81a      	bhi.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d022      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003e50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e54:	d115      	bne.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e5a:	3308      	adds	r3, #8
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f001 f9a6 	bl	80051b0 <RCCEx_PLL2_Config>
 8003e64:	4603      	mov	r3, r0
 8003e66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003e6a:	e015      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e70:	3328      	adds	r3, #40	@ 0x28
 8003e72:	2101      	movs	r1, #1
 8003e74:	4618      	mov	r0, r3
 8003e76:	f001 fa4d 	bl	8005314 <RCCEx_PLL3_Config>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003e80:	e00a      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e88:	e006      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e8a:	bf00      	nop
 8003e8c:	e004      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e8e:	bf00      	nop
 8003e90:	e002      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e92:	bf00      	nop
 8003e94:	e000      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10b      	bne.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003ea0:	4ba3      	ldr	r3, [pc, #652]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ea4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003eb0:	4a9f      	ldr	r2, [pc, #636]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eb2:	430b      	orrs	r3, r1
 8003eb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003eb6:	e003      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ebc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003ecc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003ed6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003eda:	460b      	mov	r3, r1
 8003edc:	4313      	orrs	r3, r2
 8003ede:	d037      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ee6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003eea:	d00e      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003eec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ef0:	d816      	bhi.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d018      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003ef6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003efa:	d111      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003efc:	4b8c      	ldr	r3, [pc, #560]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f00:	4a8b      	ldr	r2, [pc, #556]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003f08:	e00f      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f0e:	3308      	adds	r3, #8
 8003f10:	2101      	movs	r1, #1
 8003f12:	4618      	mov	r0, r3
 8003f14:	f001 f94c 	bl	80051b0 <RCCEx_PLL2_Config>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003f1e:	e004      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f26:	e000      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003f28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10a      	bne.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003f32:	4b7f      	ldr	r3, [pc, #508]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f36:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f40:	4a7b      	ldr	r2, [pc, #492]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f42:	430b      	orrs	r3, r1
 8003f44:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f46:	e003      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f58:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f60:	2300      	movs	r3, #0
 8003f62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003f66:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	d039      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f76:	2b03      	cmp	r3, #3
 8003f78:	d81c      	bhi.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003f7a:	a201      	add	r2, pc, #4	@ (adr r2, 8003f80 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f80:	08003fbd 	.word	0x08003fbd
 8003f84:	08003f91 	.word	0x08003f91
 8003f88:	08003f9f 	.word	0x08003f9f
 8003f8c:	08003fbd 	.word	0x08003fbd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f90:	4b67      	ldr	r3, [pc, #412]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f94:	4a66      	ldr	r2, [pc, #408]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003f9c:	e00f      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fa2:	3308      	adds	r3, #8
 8003fa4:	2102      	movs	r1, #2
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f001 f902 	bl	80051b0 <RCCEx_PLL2_Config>
 8003fac:	4603      	mov	r3, r0
 8003fae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003fb2:	e004      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fba:	e000      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003fbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10a      	bne.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003fc6:	4b5a      	ldr	r3, [pc, #360]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fca:	f023 0103 	bic.w	r1, r3, #3
 8003fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fd4:	4a56      	ldr	r2, [pc, #344]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fd6:	430b      	orrs	r3, r1
 8003fd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fda:	e003      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fe0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fec:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003ff0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ffa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003ffe:	460b      	mov	r3, r1
 8004000:	4313      	orrs	r3, r2
 8004002:	f000 809f 	beq.w	8004144 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004006:	4b4b      	ldr	r3, [pc, #300]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a4a      	ldr	r2, [pc, #296]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800400c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004010:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004012:	f7fd fd7b 	bl	8001b0c <HAL_GetTick>
 8004016:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800401a:	e00b      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800401c:	f7fd fd76 	bl	8001b0c <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b64      	cmp	r3, #100	@ 0x64
 800402a:	d903      	bls.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004032:	e005      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004034:	4b3f      	ldr	r3, [pc, #252]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0ed      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004040:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004044:	2b00      	cmp	r3, #0
 8004046:	d179      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004048:	4b39      	ldr	r3, [pc, #228]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800404a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800404c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004050:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004054:	4053      	eors	r3, r2
 8004056:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800405a:	2b00      	cmp	r3, #0
 800405c:	d015      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800405e:	4b34      	ldr	r3, [pc, #208]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004062:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004066:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800406a:	4b31      	ldr	r3, [pc, #196]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800406c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800406e:	4a30      	ldr	r2, [pc, #192]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004070:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004074:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004076:	4b2e      	ldr	r3, [pc, #184]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800407a:	4a2d      	ldr	r2, [pc, #180]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800407c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004080:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004082:	4a2b      	ldr	r2, [pc, #172]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004084:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004088:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800408a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800408e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004092:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004096:	d118      	bne.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004098:	f7fd fd38 	bl	8001b0c <HAL_GetTick>
 800409c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040a0:	e00d      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040a2:	f7fd fd33 	bl	8001b0c <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80040ac:	1ad2      	subs	r2, r2, r3
 80040ae:	f241 3388 	movw	r3, #5000	@ 0x1388
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d903      	bls.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80040bc:	e005      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040be:	4b1c      	ldr	r3, [pc, #112]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d0eb      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80040ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d129      	bne.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80040da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040e2:	d10e      	bne.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80040e4:	4b12      	ldr	r3, [pc, #72]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80040ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80040f4:	091a      	lsrs	r2, r3, #4
 80040f6:	4b10      	ldr	r3, [pc, #64]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80040f8:	4013      	ands	r3, r2
 80040fa:	4a0d      	ldr	r2, [pc, #52]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040fc:	430b      	orrs	r3, r1
 80040fe:	6113      	str	r3, [r2, #16]
 8004100:	e005      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004102:	4b0b      	ldr	r3, [pc, #44]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	4a0a      	ldr	r2, [pc, #40]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004108:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800410c:	6113      	str	r3, [r2, #16]
 800410e:	4b08      	ldr	r3, [pc, #32]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004110:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004116:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800411a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800411e:	4a04      	ldr	r2, [pc, #16]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004120:	430b      	orrs	r3, r1
 8004122:	6713      	str	r3, [r2, #112]	@ 0x70
 8004124:	e00e      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004126:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800412a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800412e:	e009      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004130:	58024400 	.word	0x58024400
 8004134:	58024800 	.word	0x58024800
 8004138:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800413c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004140:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414c:	f002 0301 	and.w	r3, r2, #1
 8004150:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004154:	2300      	movs	r3, #0
 8004156:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800415a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800415e:	460b      	mov	r3, r1
 8004160:	4313      	orrs	r3, r2
 8004162:	f000 8089 	beq.w	8004278 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800416a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800416c:	2b28      	cmp	r3, #40	@ 0x28
 800416e:	d86b      	bhi.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004170:	a201      	add	r2, pc, #4	@ (adr r2, 8004178 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004176:	bf00      	nop
 8004178:	08004251 	.word	0x08004251
 800417c:	08004249 	.word	0x08004249
 8004180:	08004249 	.word	0x08004249
 8004184:	08004249 	.word	0x08004249
 8004188:	08004249 	.word	0x08004249
 800418c:	08004249 	.word	0x08004249
 8004190:	08004249 	.word	0x08004249
 8004194:	08004249 	.word	0x08004249
 8004198:	0800421d 	.word	0x0800421d
 800419c:	08004249 	.word	0x08004249
 80041a0:	08004249 	.word	0x08004249
 80041a4:	08004249 	.word	0x08004249
 80041a8:	08004249 	.word	0x08004249
 80041ac:	08004249 	.word	0x08004249
 80041b0:	08004249 	.word	0x08004249
 80041b4:	08004249 	.word	0x08004249
 80041b8:	08004233 	.word	0x08004233
 80041bc:	08004249 	.word	0x08004249
 80041c0:	08004249 	.word	0x08004249
 80041c4:	08004249 	.word	0x08004249
 80041c8:	08004249 	.word	0x08004249
 80041cc:	08004249 	.word	0x08004249
 80041d0:	08004249 	.word	0x08004249
 80041d4:	08004249 	.word	0x08004249
 80041d8:	08004251 	.word	0x08004251
 80041dc:	08004249 	.word	0x08004249
 80041e0:	08004249 	.word	0x08004249
 80041e4:	08004249 	.word	0x08004249
 80041e8:	08004249 	.word	0x08004249
 80041ec:	08004249 	.word	0x08004249
 80041f0:	08004249 	.word	0x08004249
 80041f4:	08004249 	.word	0x08004249
 80041f8:	08004251 	.word	0x08004251
 80041fc:	08004249 	.word	0x08004249
 8004200:	08004249 	.word	0x08004249
 8004204:	08004249 	.word	0x08004249
 8004208:	08004249 	.word	0x08004249
 800420c:	08004249 	.word	0x08004249
 8004210:	08004249 	.word	0x08004249
 8004214:	08004249 	.word	0x08004249
 8004218:	08004251 	.word	0x08004251
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800421c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004220:	3308      	adds	r3, #8
 8004222:	2101      	movs	r1, #1
 8004224:	4618      	mov	r0, r3
 8004226:	f000 ffc3 	bl	80051b0 <RCCEx_PLL2_Config>
 800422a:	4603      	mov	r3, r0
 800422c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004230:	e00f      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004236:	3328      	adds	r3, #40	@ 0x28
 8004238:	2101      	movs	r1, #1
 800423a:	4618      	mov	r0, r3
 800423c:	f001 f86a 	bl	8005314 <RCCEx_PLL3_Config>
 8004240:	4603      	mov	r3, r0
 8004242:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004246:	e004      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800424e:	e000      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004250:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004252:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10a      	bne.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800425a:	4bbf      	ldr	r3, [pc, #764]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800425c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800425e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004266:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004268:	4abb      	ldr	r2, [pc, #748]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800426a:	430b      	orrs	r3, r1
 800426c:	6553      	str	r3, [r2, #84]	@ 0x54
 800426e:	e003      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004270:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004274:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800427c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004280:	f002 0302 	and.w	r3, r2, #2
 8004284:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004288:	2300      	movs	r3, #0
 800428a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800428e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004292:	460b      	mov	r3, r1
 8004294:	4313      	orrs	r3, r2
 8004296:	d041      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800429c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800429e:	2b05      	cmp	r3, #5
 80042a0:	d824      	bhi.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80042a2:	a201      	add	r2, pc, #4	@ (adr r2, 80042a8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80042a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a8:	080042f5 	.word	0x080042f5
 80042ac:	080042c1 	.word	0x080042c1
 80042b0:	080042d7 	.word	0x080042d7
 80042b4:	080042f5 	.word	0x080042f5
 80042b8:	080042f5 	.word	0x080042f5
 80042bc:	080042f5 	.word	0x080042f5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c4:	3308      	adds	r3, #8
 80042c6:	2101      	movs	r1, #1
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 ff71 	bl	80051b0 <RCCEx_PLL2_Config>
 80042ce:	4603      	mov	r3, r0
 80042d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80042d4:	e00f      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042da:	3328      	adds	r3, #40	@ 0x28
 80042dc:	2101      	movs	r1, #1
 80042de:	4618      	mov	r0, r3
 80042e0:	f001 f818 	bl	8005314 <RCCEx_PLL3_Config>
 80042e4:	4603      	mov	r3, r0
 80042e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80042ea:	e004      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042f2:	e000      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80042f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10a      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80042fe:	4b96      	ldr	r3, [pc, #600]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004302:	f023 0107 	bic.w	r1, r3, #7
 8004306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800430a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800430c:	4a92      	ldr	r2, [pc, #584]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800430e:	430b      	orrs	r3, r1
 8004310:	6553      	str	r3, [r2, #84]	@ 0x54
 8004312:	e003      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004314:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004318:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800431c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004324:	f002 0304 	and.w	r3, r2, #4
 8004328:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800432c:	2300      	movs	r3, #0
 800432e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004332:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004336:	460b      	mov	r3, r1
 8004338:	4313      	orrs	r3, r2
 800433a:	d044      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800433c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004340:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004344:	2b05      	cmp	r3, #5
 8004346:	d825      	bhi.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004348:	a201      	add	r2, pc, #4	@ (adr r2, 8004350 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800434a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434e:	bf00      	nop
 8004350:	0800439d 	.word	0x0800439d
 8004354:	08004369 	.word	0x08004369
 8004358:	0800437f 	.word	0x0800437f
 800435c:	0800439d 	.word	0x0800439d
 8004360:	0800439d 	.word	0x0800439d
 8004364:	0800439d 	.word	0x0800439d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800436c:	3308      	adds	r3, #8
 800436e:	2101      	movs	r1, #1
 8004370:	4618      	mov	r0, r3
 8004372:	f000 ff1d 	bl	80051b0 <RCCEx_PLL2_Config>
 8004376:	4603      	mov	r3, r0
 8004378:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800437c:	e00f      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800437e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004382:	3328      	adds	r3, #40	@ 0x28
 8004384:	2101      	movs	r1, #1
 8004386:	4618      	mov	r0, r3
 8004388:	f000 ffc4 	bl	8005314 <RCCEx_PLL3_Config>
 800438c:	4603      	mov	r3, r0
 800438e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004392:	e004      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800439a:	e000      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800439c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800439e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10b      	bne.n	80043be <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043a6:	4b6c      	ldr	r3, [pc, #432]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043aa:	f023 0107 	bic.w	r1, r3, #7
 80043ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043b6:	4a68      	ldr	r2, [pc, #416]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043b8:	430b      	orrs	r3, r1
 80043ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80043bc:	e003      	b.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80043c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ce:	f002 0320 	and.w	r3, r2, #32
 80043d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80043d6:	2300      	movs	r3, #0
 80043d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80043dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80043e0:	460b      	mov	r3, r1
 80043e2:	4313      	orrs	r3, r2
 80043e4:	d055      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80043e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80043f2:	d033      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80043f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80043f8:	d82c      	bhi.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80043fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043fe:	d02f      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004400:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004404:	d826      	bhi.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004406:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800440a:	d02b      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800440c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004410:	d820      	bhi.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004412:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004416:	d012      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004418:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800441c:	d81a      	bhi.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800441e:	2b00      	cmp	r3, #0
 8004420:	d022      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004422:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004426:	d115      	bne.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800442c:	3308      	adds	r3, #8
 800442e:	2100      	movs	r1, #0
 8004430:	4618      	mov	r0, r3
 8004432:	f000 febd 	bl	80051b0 <RCCEx_PLL2_Config>
 8004436:	4603      	mov	r3, r0
 8004438:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800443c:	e015      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800443e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004442:	3328      	adds	r3, #40	@ 0x28
 8004444:	2102      	movs	r1, #2
 8004446:	4618      	mov	r0, r3
 8004448:	f000 ff64 	bl	8005314 <RCCEx_PLL3_Config>
 800444c:	4603      	mov	r3, r0
 800444e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004452:	e00a      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800445a:	e006      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800445c:	bf00      	nop
 800445e:	e004      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004460:	bf00      	nop
 8004462:	e002      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004464:	bf00      	nop
 8004466:	e000      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004468:	bf00      	nop
    }

    if (ret == HAL_OK)
 800446a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10b      	bne.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004472:	4b39      	ldr	r3, [pc, #228]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004476:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800447a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800447e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004482:	4a35      	ldr	r2, [pc, #212]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004484:	430b      	orrs	r3, r1
 8004486:	6553      	str	r3, [r2, #84]	@ 0x54
 8004488:	e003      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800448a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800448e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800449e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80044a2:	2300      	movs	r3, #0
 80044a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80044a8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80044ac:	460b      	mov	r3, r1
 80044ae:	4313      	orrs	r3, r2
 80044b0:	d058      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80044b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80044ba:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80044be:	d033      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80044c0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80044c4:	d82c      	bhi.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80044c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044ca:	d02f      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80044cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044d0:	d826      	bhi.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80044d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80044d6:	d02b      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80044d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80044dc:	d820      	bhi.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80044de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044e2:	d012      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80044e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044e8:	d81a      	bhi.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d022      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80044ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044f2:	d115      	bne.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f8:	3308      	adds	r3, #8
 80044fa:	2100      	movs	r1, #0
 80044fc:	4618      	mov	r0, r3
 80044fe:	f000 fe57 	bl	80051b0 <RCCEx_PLL2_Config>
 8004502:	4603      	mov	r3, r0
 8004504:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004508:	e015      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800450a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800450e:	3328      	adds	r3, #40	@ 0x28
 8004510:	2102      	movs	r1, #2
 8004512:	4618      	mov	r0, r3
 8004514:	f000 fefe 	bl	8005314 <RCCEx_PLL3_Config>
 8004518:	4603      	mov	r3, r0
 800451a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800451e:	e00a      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004526:	e006      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004528:	bf00      	nop
 800452a:	e004      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800452c:	bf00      	nop
 800452e:	e002      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004530:	bf00      	nop
 8004532:	e000      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004534:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004536:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10e      	bne.n	800455c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800453e:	4b06      	ldr	r3, [pc, #24]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004542:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800454a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800454e:	4a02      	ldr	r2, [pc, #8]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004550:	430b      	orrs	r3, r1
 8004552:	6593      	str	r3, [r2, #88]	@ 0x58
 8004554:	e006      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004556:	bf00      	nop
 8004558:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800455c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004560:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004570:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004574:	2300      	movs	r3, #0
 8004576:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800457a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800457e:	460b      	mov	r3, r1
 8004580:	4313      	orrs	r3, r2
 8004582:	d055      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004588:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800458c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004590:	d033      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004592:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004596:	d82c      	bhi.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004598:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800459c:	d02f      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800459e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045a2:	d826      	bhi.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80045a4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80045a8:	d02b      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80045aa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80045ae:	d820      	bhi.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80045b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045b4:	d012      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80045b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045ba:	d81a      	bhi.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d022      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80045c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045c4:	d115      	bne.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ca:	3308      	adds	r3, #8
 80045cc:	2100      	movs	r1, #0
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 fdee 	bl	80051b0 <RCCEx_PLL2_Config>
 80045d4:	4603      	mov	r3, r0
 80045d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80045da:	e015      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e0:	3328      	adds	r3, #40	@ 0x28
 80045e2:	2102      	movs	r1, #2
 80045e4:	4618      	mov	r0, r3
 80045e6:	f000 fe95 	bl	8005314 <RCCEx_PLL3_Config>
 80045ea:	4603      	mov	r3, r0
 80045ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80045f0:	e00a      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045f8:	e006      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80045fa:	bf00      	nop
 80045fc:	e004      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80045fe:	bf00      	nop
 8004600:	e002      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004602:	bf00      	nop
 8004604:	e000      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004606:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004608:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10b      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004610:	4ba1      	ldr	r3, [pc, #644]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004614:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800461c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004620:	4a9d      	ldr	r2, [pc, #628]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004622:	430b      	orrs	r3, r1
 8004624:	6593      	str	r3, [r2, #88]	@ 0x58
 8004626:	e003      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004628:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800462c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004638:	f002 0308 	and.w	r3, r2, #8
 800463c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004640:	2300      	movs	r3, #0
 8004642:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004646:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800464a:	460b      	mov	r3, r1
 800464c:	4313      	orrs	r3, r2
 800464e:	d01e      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004654:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004658:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800465c:	d10c      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800465e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004662:	3328      	adds	r3, #40	@ 0x28
 8004664:	2102      	movs	r1, #2
 8004666:	4618      	mov	r0, r3
 8004668:	f000 fe54 	bl	8005314 <RCCEx_PLL3_Config>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d002      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004678:	4b87      	ldr	r3, [pc, #540]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800467a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800467c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004684:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004688:	4a83      	ldr	r2, [pc, #524]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800468a:	430b      	orrs	r3, r1
 800468c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800468e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004696:	f002 0310 	and.w	r3, r2, #16
 800469a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800469e:	2300      	movs	r3, #0
 80046a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80046a4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80046a8:	460b      	mov	r3, r1
 80046aa:	4313      	orrs	r3, r2
 80046ac:	d01e      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80046ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046ba:	d10c      	bne.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80046bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c0:	3328      	adds	r3, #40	@ 0x28
 80046c2:	2102      	movs	r1, #2
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 fe25 	bl	8005314 <RCCEx_PLL3_Config>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d002      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80046d6:	4b70      	ldr	r3, [pc, #448]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80046de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046e6:	4a6c      	ldr	r2, [pc, #432]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046e8:	430b      	orrs	r3, r1
 80046ea:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80046f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80046fc:	2300      	movs	r3, #0
 80046fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004702:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004706:	460b      	mov	r3, r1
 8004708:	4313      	orrs	r3, r2
 800470a:	d03e      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800470c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004710:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004714:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004718:	d022      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800471a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800471e:	d81b      	bhi.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004728:	d00b      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800472a:	e015      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800472c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004730:	3308      	adds	r3, #8
 8004732:	2100      	movs	r1, #0
 8004734:	4618      	mov	r0, r3
 8004736:	f000 fd3b 	bl	80051b0 <RCCEx_PLL2_Config>
 800473a:	4603      	mov	r3, r0
 800473c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004740:	e00f      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004746:	3328      	adds	r3, #40	@ 0x28
 8004748:	2102      	movs	r1, #2
 800474a:	4618      	mov	r0, r3
 800474c:	f000 fde2 	bl	8005314 <RCCEx_PLL3_Config>
 8004750:	4603      	mov	r3, r0
 8004752:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004756:	e004      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800475e:	e000      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004760:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004762:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10b      	bne.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800476a:	4b4b      	ldr	r3, [pc, #300]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800476c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800476e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004776:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800477a:	4a47      	ldr	r2, [pc, #284]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800477c:	430b      	orrs	r3, r1
 800477e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004780:	e003      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004782:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004786:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800478a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800478e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004792:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004796:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004798:	2300      	movs	r3, #0
 800479a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800479c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80047a0:	460b      	mov	r3, r1
 80047a2:	4313      	orrs	r3, r2
 80047a4:	d03b      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80047a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80047b2:	d01f      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80047b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80047b8:	d818      	bhi.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80047ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047be:	d003      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80047c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047c4:	d007      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80047c6:	e011      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047c8:	4b33      	ldr	r3, [pc, #204]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047cc:	4a32      	ldr	r2, [pc, #200]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80047d4:	e00f      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047da:	3328      	adds	r3, #40	@ 0x28
 80047dc:	2101      	movs	r1, #1
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 fd98 	bl	8005314 <RCCEx_PLL3_Config>
 80047e4:	4603      	mov	r3, r0
 80047e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80047ea:	e004      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047f2:	e000      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80047f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10b      	bne.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047fe:	4b26      	ldr	r3, [pc, #152]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004802:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800480a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800480e:	4a22      	ldr	r2, [pc, #136]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004810:	430b      	orrs	r3, r1
 8004812:	6553      	str	r3, [r2, #84]	@ 0x54
 8004814:	e003      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004816:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800481a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800481e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004826:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800482a:	673b      	str	r3, [r7, #112]	@ 0x70
 800482c:	2300      	movs	r3, #0
 800482e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004830:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004834:	460b      	mov	r3, r1
 8004836:	4313      	orrs	r3, r2
 8004838:	d034      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800483a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800483e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004844:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004848:	d007      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800484a:	e011      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800484c:	4b12      	ldr	r3, [pc, #72]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800484e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004850:	4a11      	ldr	r2, [pc, #68]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004852:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004856:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004858:	e00e      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800485a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485e:	3308      	adds	r3, #8
 8004860:	2102      	movs	r1, #2
 8004862:	4618      	mov	r0, r3
 8004864:	f000 fca4 	bl	80051b0 <RCCEx_PLL2_Config>
 8004868:	4603      	mov	r3, r0
 800486a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800486e:	e003      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004876:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004878:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10d      	bne.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004880:	4b05      	ldr	r3, [pc, #20]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004882:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004884:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800488c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800488e:	4a02      	ldr	r2, [pc, #8]	@ (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004890:	430b      	orrs	r3, r1
 8004892:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004894:	e006      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004896:	bf00      	nop
 8004898:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800489c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80048a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ac:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80048b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048b2:	2300      	movs	r3, #0
 80048b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80048b6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80048ba:	460b      	mov	r3, r1
 80048bc:	4313      	orrs	r3, r2
 80048be:	d00c      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80048c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048c4:	3328      	adds	r3, #40	@ 0x28
 80048c6:	2102      	movs	r1, #2
 80048c8:	4618      	mov	r0, r3
 80048ca:	f000 fd23 	bl	8005314 <RCCEx_PLL3_Config>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d002      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80048da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80048e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80048e8:	2300      	movs	r3, #0
 80048ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80048ec:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80048f0:	460b      	mov	r3, r1
 80048f2:	4313      	orrs	r3, r2
 80048f4:	d038      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80048f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004902:	d018      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004904:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004908:	d811      	bhi.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800490a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800490e:	d014      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004910:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004914:	d80b      	bhi.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004916:	2b00      	cmp	r3, #0
 8004918:	d011      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800491a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800491e:	d106      	bne.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004920:	4bc3      	ldr	r3, [pc, #780]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004924:	4ac2      	ldr	r2, [pc, #776]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004926:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800492a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800492c:	e008      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004934:	e004      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004936:	bf00      	nop
 8004938:	e002      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800493a:	bf00      	nop
 800493c:	e000      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800493e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004940:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10b      	bne.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004948:	4bb9      	ldr	r3, [pc, #740]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800494a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800494c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004954:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004958:	4ab5      	ldr	r2, [pc, #724]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800495a:	430b      	orrs	r3, r1
 800495c:	6553      	str	r3, [r2, #84]	@ 0x54
 800495e:	e003      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004960:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004964:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800496c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004970:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004974:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004976:	2300      	movs	r3, #0
 8004978:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800497a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800497e:	460b      	mov	r3, r1
 8004980:	4313      	orrs	r3, r2
 8004982:	d009      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004984:	4baa      	ldr	r3, [pc, #680]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004986:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004988:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800498c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004990:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004992:	4aa7      	ldr	r2, [pc, #668]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004994:	430b      	orrs	r3, r1
 8004996:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800499c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80049a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80049a6:	2300      	movs	r3, #0
 80049a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80049aa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80049ae:	460b      	mov	r3, r1
 80049b0:	4313      	orrs	r3, r2
 80049b2:	d00a      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80049b4:	4b9e      	ldr	r3, [pc, #632]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80049bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80049c4:	4a9a      	ldr	r2, [pc, #616]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049c6:	430b      	orrs	r3, r1
 80049c8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80049ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80049d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049d8:	2300      	movs	r3, #0
 80049da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049dc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80049e0:	460b      	mov	r3, r1
 80049e2:	4313      	orrs	r3, r2
 80049e4:	d009      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80049e6:	4b92      	ldr	r3, [pc, #584]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ea:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80049ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049f4:	4a8e      	ldr	r2, [pc, #568]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049f6:	430b      	orrs	r3, r1
 80049f8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80049fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a02:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004a06:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a08:	2300      	movs	r3, #0
 8004a0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a0c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004a10:	460b      	mov	r3, r1
 8004a12:	4313      	orrs	r3, r2
 8004a14:	d00e      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a16:	4b86      	ldr	r3, [pc, #536]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	4a85      	ldr	r2, [pc, #532]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a1c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004a20:	6113      	str	r3, [r2, #16]
 8004a22:	4b83      	ldr	r3, [pc, #524]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a24:	6919      	ldr	r1, [r3, #16]
 8004a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a2a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004a2e:	4a80      	ldr	r2, [pc, #512]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a30:	430b      	orrs	r3, r1
 8004a32:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004a40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a42:	2300      	movs	r3, #0
 8004a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a46:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	d009      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004a50:	4b77      	ldr	r3, [pc, #476]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a54:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a5e:	4a74      	ldr	r2, [pc, #464]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a60:	430b      	orrs	r3, r1
 8004a62:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004a70:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a72:	2300      	movs	r3, #0
 8004a74:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a76:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	d00a      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a80:	4b6b      	ldr	r3, [pc, #428]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a84:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a90:	4a67      	ldr	r2, [pc, #412]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a92:	430b      	orrs	r3, r1
 8004a94:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004aa8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004aac:	460b      	mov	r3, r1
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	d011      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab6:	3308      	adds	r3, #8
 8004ab8:	2100      	movs	r1, #0
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 fb78 	bl	80051b0 <RCCEx_PLL2_Config>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ace:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ad2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ade:	2100      	movs	r1, #0
 8004ae0:	6239      	str	r1, [r7, #32]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ae8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004aec:	460b      	mov	r3, r1
 8004aee:	4313      	orrs	r3, r2
 8004af0:	d011      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004af6:	3308      	adds	r3, #8
 8004af8:	2101      	movs	r1, #1
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 fb58 	bl	80051b0 <RCCEx_PLL2_Config>
 8004b00:	4603      	mov	r3, r0
 8004b02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004b06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1e:	2100      	movs	r1, #0
 8004b20:	61b9      	str	r1, [r7, #24]
 8004b22:	f003 0304 	and.w	r3, r3, #4
 8004b26:	61fb      	str	r3, [r7, #28]
 8004b28:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	d011      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b36:	3308      	adds	r3, #8
 8004b38:	2102      	movs	r1, #2
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 fb38 	bl	80051b0 <RCCEx_PLL2_Config>
 8004b40:	4603      	mov	r3, r0
 8004b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004b46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5e:	2100      	movs	r1, #0
 8004b60:	6139      	str	r1, [r7, #16]
 8004b62:	f003 0308 	and.w	r3, r3, #8
 8004b66:	617b      	str	r3, [r7, #20]
 8004b68:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	d011      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b76:	3328      	adds	r3, #40	@ 0x28
 8004b78:	2100      	movs	r1, #0
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 fbca 	bl	8005314 <RCCEx_PLL3_Config>
 8004b80:	4603      	mov	r3, r0
 8004b82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004b86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	f003 0310 	and.w	r3, r3, #16
 8004ba6:	60fb      	str	r3, [r7, #12]
 8004ba8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004bac:	460b      	mov	r3, r1
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	d011      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bb6:	3328      	adds	r3, #40	@ 0x28
 8004bb8:	2101      	movs	r1, #1
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 fbaa 	bl	8005314 <RCCEx_PLL3_Config>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004bc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bde:	2100      	movs	r1, #0
 8004be0:	6039      	str	r1, [r7, #0]
 8004be2:	f003 0320 	and.w	r3, r3, #32
 8004be6:	607b      	str	r3, [r7, #4]
 8004be8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004bec:	460b      	mov	r3, r1
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	d011      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bf6:	3328      	adds	r3, #40	@ 0x28
 8004bf8:	2102      	movs	r1, #2
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 fb8a 	bl	8005314 <RCCEx_PLL3_Config>
 8004c00:	4603      	mov	r3, r0
 8004c02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004c06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004c16:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	e000      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c30:	58024400 	.word	0x58024400

08004c34 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004c38:	f7fe fd96 	bl	8003768 <HAL_RCC_GetHCLKFreq>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	4b06      	ldr	r3, [pc, #24]	@ (8004c58 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	091b      	lsrs	r3, r3, #4
 8004c44:	f003 0307 	and.w	r3, r3, #7
 8004c48:	4904      	ldr	r1, [pc, #16]	@ (8004c5c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004c4a:	5ccb      	ldrb	r3, [r1, r3]
 8004c4c:	f003 031f 	and.w	r3, r3, #31
 8004c50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	58024400 	.word	0x58024400
 8004c5c:	0800aad8 	.word	0x0800aad8

08004c60 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b089      	sub	sp, #36	@ 0x24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c68:	4ba1      	ldr	r3, [pc, #644]	@ (8004ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c6c:	f003 0303 	and.w	r3, r3, #3
 8004c70:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004c72:	4b9f      	ldr	r3, [pc, #636]	@ (8004ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c76:	0b1b      	lsrs	r3, r3, #12
 8004c78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c7c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004c7e:	4b9c      	ldr	r3, [pc, #624]	@ (8004ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c82:	091b      	lsrs	r3, r3, #4
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004c8a:	4b99      	ldr	r3, [pc, #612]	@ (8004ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c8e:	08db      	lsrs	r3, r3, #3
 8004c90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	fb02 f303 	mul.w	r3, r2, r3
 8004c9a:	ee07 3a90 	vmov	s15, r3
 8004c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ca2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 8111 	beq.w	8004ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	f000 8083 	beq.w	8004dbc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	f200 80a1 	bhi.w	8004e00 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d003      	beq.n	8004ccc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d056      	beq.n	8004d78 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004cca:	e099      	b.n	8004e00 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ccc:	4b88      	ldr	r3, [pc, #544]	@ (8004ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0320 	and.w	r3, r3, #32
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d02d      	beq.n	8004d34 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004cd8:	4b85      	ldr	r3, [pc, #532]	@ (8004ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	08db      	lsrs	r3, r3, #3
 8004cde:	f003 0303 	and.w	r3, r3, #3
 8004ce2:	4a84      	ldr	r2, [pc, #528]	@ (8004ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	ee07 3a90 	vmov	s15, r3
 8004cf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	ee07 3a90 	vmov	s15, r3
 8004cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d02:	4b7b      	ldr	r3, [pc, #492]	@ (8004ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d0a:	ee07 3a90 	vmov	s15, r3
 8004d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d12:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d16:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d2e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004d32:	e087      	b.n	8004e44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	ee07 3a90 	vmov	s15, r3
 8004d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d3e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004efc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d46:	4b6a      	ldr	r3, [pc, #424]	@ (8004ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d4e:	ee07 3a90 	vmov	s15, r3
 8004d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d56:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d5a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d76:	e065      	b.n	8004e44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	ee07 3a90 	vmov	s15, r3
 8004d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d82:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004f00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d8a:	4b59      	ldr	r3, [pc, #356]	@ (8004ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d92:	ee07 3a90 	vmov	s15, r3
 8004d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d9e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004daa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004db6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dba:	e043      	b.n	8004e44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	ee07 3a90 	vmov	s15, r3
 8004dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dc6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004f04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dce:	4b48      	ldr	r3, [pc, #288]	@ (8004ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dd6:	ee07 3a90 	vmov	s15, r3
 8004dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dde:	ed97 6a03 	vldr	s12, [r7, #12]
 8004de2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dfe:	e021      	b.n	8004e44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	ee07 3a90 	vmov	s15, r3
 8004e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e0a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004f00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e12:	4b37      	ldr	r3, [pc, #220]	@ (8004ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e1a:	ee07 3a90 	vmov	s15, r3
 8004e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e22:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e26:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e42:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004e44:	4b2a      	ldr	r3, [pc, #168]	@ (8004ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e48:	0a5b      	lsrs	r3, r3, #9
 8004e4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e4e:	ee07 3a90 	vmov	s15, r3
 8004e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e6a:	ee17 2a90 	vmov	r2, s15
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004e72:	4b1f      	ldr	r3, [pc, #124]	@ (8004ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e76:	0c1b      	lsrs	r3, r3, #16
 8004e78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e7c:	ee07 3a90 	vmov	s15, r3
 8004e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e98:	ee17 2a90 	vmov	r2, s15
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004ea0:	4b13      	ldr	r3, [pc, #76]	@ (8004ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea4:	0e1b      	lsrs	r3, r3, #24
 8004ea6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004eaa:	ee07 3a90 	vmov	s15, r3
 8004eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004eb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004eba:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ebe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ec2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ec6:	ee17 2a90 	vmov	r2, s15
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004ece:	e008      	b.n	8004ee2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	609a      	str	r2, [r3, #8]
}
 8004ee2:	bf00      	nop
 8004ee4:	3724      	adds	r7, #36	@ 0x24
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	58024400 	.word	0x58024400
 8004ef4:	03d09000 	.word	0x03d09000
 8004ef8:	46000000 	.word	0x46000000
 8004efc:	4c742400 	.word	0x4c742400
 8004f00:	4a742400 	.word	0x4a742400
 8004f04:	4bbebc20 	.word	0x4bbebc20

08004f08 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b089      	sub	sp, #36	@ 0x24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f10:	4ba1      	ldr	r3, [pc, #644]	@ (8005198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f14:	f003 0303 	and.w	r3, r3, #3
 8004f18:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004f1a:	4b9f      	ldr	r3, [pc, #636]	@ (8005198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f1e:	0d1b      	lsrs	r3, r3, #20
 8004f20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f24:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004f26:	4b9c      	ldr	r3, [pc, #624]	@ (8005198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f2a:	0a1b      	lsrs	r3, r3, #8
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004f32:	4b99      	ldr	r3, [pc, #612]	@ (8005198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f36:	08db      	lsrs	r3, r3, #3
 8004f38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	fb02 f303 	mul.w	r3, r2, r3
 8004f42:	ee07 3a90 	vmov	s15, r3
 8004f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f000 8111 	beq.w	8005178 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	f000 8083 	beq.w	8005064 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	f200 80a1 	bhi.w	80050a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d003      	beq.n	8004f74 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d056      	beq.n	8005020 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004f72:	e099      	b.n	80050a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f74:	4b88      	ldr	r3, [pc, #544]	@ (8005198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0320 	and.w	r3, r3, #32
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d02d      	beq.n	8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f80:	4b85      	ldr	r3, [pc, #532]	@ (8005198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	08db      	lsrs	r3, r3, #3
 8004f86:	f003 0303 	and.w	r3, r3, #3
 8004f8a:	4a84      	ldr	r2, [pc, #528]	@ (800519c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f90:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	ee07 3a90 	vmov	s15, r3
 8004f98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	ee07 3a90 	vmov	s15, r3
 8004fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004faa:	4b7b      	ldr	r3, [pc, #492]	@ (8005198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fb2:	ee07 3a90 	vmov	s15, r3
 8004fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fba:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fbe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80051a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fd6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004fda:	e087      	b.n	80050ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	ee07 3a90 	vmov	s15, r3
 8004fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80051a4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fee:	4b6a      	ldr	r3, [pc, #424]	@ (8005198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ff6:	ee07 3a90 	vmov	s15, r3
 8004ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ffe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005002:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80051a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800500a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800500e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800501a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800501e:	e065      	b.n	80050ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	ee07 3a90 	vmov	s15, r3
 8005026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800502a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80051a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800502e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005032:	4b59      	ldr	r3, [pc, #356]	@ (8005198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800503a:	ee07 3a90 	vmov	s15, r3
 800503e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005042:	ed97 6a03 	vldr	s12, [r7, #12]
 8005046:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80051a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800504a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800504e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005052:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800505a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800505e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005062:	e043      	b.n	80050ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	ee07 3a90 	vmov	s15, r3
 800506a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800506e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80051ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005076:	4b48      	ldr	r3, [pc, #288]	@ (8005198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800507e:	ee07 3a90 	vmov	s15, r3
 8005082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005086:	ed97 6a03 	vldr	s12, [r7, #12]
 800508a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80051a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800508e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005096:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800509a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800509e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050a6:	e021      	b.n	80050ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	ee07 3a90 	vmov	s15, r3
 80050ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050b2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80051a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80050b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ba:	4b37      	ldr	r3, [pc, #220]	@ (8005198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050c2:	ee07 3a90 	vmov	s15, r3
 80050c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80050ce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80051a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050ea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80050ec:	4b2a      	ldr	r3, [pc, #168]	@ (8005198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f0:	0a5b      	lsrs	r3, r3, #9
 80050f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050f6:	ee07 3a90 	vmov	s15, r3
 80050fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005102:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005106:	edd7 6a07 	vldr	s13, [r7, #28]
 800510a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800510e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005112:	ee17 2a90 	vmov	r2, s15
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800511a:	4b1f      	ldr	r3, [pc, #124]	@ (8005198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800511c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511e:	0c1b      	lsrs	r3, r3, #16
 8005120:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005124:	ee07 3a90 	vmov	s15, r3
 8005128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800512c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005130:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005134:	edd7 6a07 	vldr	s13, [r7, #28]
 8005138:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800513c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005140:	ee17 2a90 	vmov	r2, s15
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005148:	4b13      	ldr	r3, [pc, #76]	@ (8005198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800514a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800514c:	0e1b      	lsrs	r3, r3, #24
 800514e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005152:	ee07 3a90 	vmov	s15, r3
 8005156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800515a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800515e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005162:	edd7 6a07 	vldr	s13, [r7, #28]
 8005166:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800516a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800516e:	ee17 2a90 	vmov	r2, s15
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005176:	e008      	b.n	800518a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	609a      	str	r2, [r3, #8]
}
 800518a:	bf00      	nop
 800518c:	3724      	adds	r7, #36	@ 0x24
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	58024400 	.word	0x58024400
 800519c:	03d09000 	.word	0x03d09000
 80051a0:	46000000 	.word	0x46000000
 80051a4:	4c742400 	.word	0x4c742400
 80051a8:	4a742400 	.word	0x4a742400
 80051ac:	4bbebc20 	.word	0x4bbebc20

080051b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051ba:	2300      	movs	r3, #0
 80051bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80051be:	4b53      	ldr	r3, [pc, #332]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 80051c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c2:	f003 0303 	and.w	r3, r3, #3
 80051c6:	2b03      	cmp	r3, #3
 80051c8:	d101      	bne.n	80051ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e099      	b.n	8005302 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80051ce:	4b4f      	ldr	r3, [pc, #316]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a4e      	ldr	r2, [pc, #312]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 80051d4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80051d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051da:	f7fc fc97 	bl	8001b0c <HAL_GetTick>
 80051de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80051e0:	e008      	b.n	80051f4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80051e2:	f7fc fc93 	bl	8001b0c <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d901      	bls.n	80051f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e086      	b.n	8005302 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80051f4:	4b45      	ldr	r3, [pc, #276]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1f0      	bne.n	80051e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005200:	4b42      	ldr	r3, [pc, #264]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 8005202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005204:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	031b      	lsls	r3, r3, #12
 800520e:	493f      	ldr	r1, [pc, #252]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 8005210:	4313      	orrs	r3, r2
 8005212:	628b      	str	r3, [r1, #40]	@ 0x28
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	3b01      	subs	r3, #1
 800521a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	3b01      	subs	r3, #1
 8005224:	025b      	lsls	r3, r3, #9
 8005226:	b29b      	uxth	r3, r3
 8005228:	431a      	orrs	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	3b01      	subs	r3, #1
 8005230:	041b      	lsls	r3, r3, #16
 8005232:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005236:	431a      	orrs	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	3b01      	subs	r3, #1
 800523e:	061b      	lsls	r3, r3, #24
 8005240:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005244:	4931      	ldr	r1, [pc, #196]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 8005246:	4313      	orrs	r3, r2
 8005248:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800524a:	4b30      	ldr	r3, [pc, #192]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 800524c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800524e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	492d      	ldr	r1, [pc, #180]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 8005258:	4313      	orrs	r3, r2
 800525a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800525c:	4b2b      	ldr	r3, [pc, #172]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 800525e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005260:	f023 0220 	bic.w	r2, r3, #32
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	4928      	ldr	r1, [pc, #160]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 800526a:	4313      	orrs	r3, r2
 800526c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800526e:	4b27      	ldr	r3, [pc, #156]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 8005270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005272:	4a26      	ldr	r2, [pc, #152]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 8005274:	f023 0310 	bic.w	r3, r3, #16
 8005278:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800527a:	4b24      	ldr	r3, [pc, #144]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 800527c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800527e:	4b24      	ldr	r3, [pc, #144]	@ (8005310 <RCCEx_PLL2_Config+0x160>)
 8005280:	4013      	ands	r3, r2
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	69d2      	ldr	r2, [r2, #28]
 8005286:	00d2      	lsls	r2, r2, #3
 8005288:	4920      	ldr	r1, [pc, #128]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 800528a:	4313      	orrs	r3, r2
 800528c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800528e:	4b1f      	ldr	r3, [pc, #124]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 8005290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005292:	4a1e      	ldr	r2, [pc, #120]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 8005294:	f043 0310 	orr.w	r3, r3, #16
 8005298:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d106      	bne.n	80052ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80052a0:	4b1a      	ldr	r3, [pc, #104]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 80052a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a4:	4a19      	ldr	r2, [pc, #100]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 80052a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80052aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80052ac:	e00f      	b.n	80052ce <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d106      	bne.n	80052c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80052b4:	4b15      	ldr	r3, [pc, #84]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 80052b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b8:	4a14      	ldr	r2, [pc, #80]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 80052ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80052c0:	e005      	b.n	80052ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80052c2:	4b12      	ldr	r3, [pc, #72]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 80052c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c6:	4a11      	ldr	r2, [pc, #68]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 80052c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80052cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80052ce:	4b0f      	ldr	r3, [pc, #60]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a0e      	ldr	r2, [pc, #56]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 80052d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80052d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052da:	f7fc fc17 	bl	8001b0c <HAL_GetTick>
 80052de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80052e0:	e008      	b.n	80052f4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80052e2:	f7fc fc13 	bl	8001b0c <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d901      	bls.n	80052f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e006      	b.n	8005302 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80052f4:	4b05      	ldr	r3, [pc, #20]	@ (800530c <RCCEx_PLL2_Config+0x15c>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d0f0      	beq.n	80052e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005300:	7bfb      	ldrb	r3, [r7, #15]
}
 8005302:	4618      	mov	r0, r3
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	58024400 	.word	0x58024400
 8005310:	ffff0007 	.word	0xffff0007

08005314 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800531e:	2300      	movs	r3, #0
 8005320:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005322:	4b53      	ldr	r3, [pc, #332]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 8005324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005326:	f003 0303 	and.w	r3, r3, #3
 800532a:	2b03      	cmp	r3, #3
 800532c:	d101      	bne.n	8005332 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e099      	b.n	8005466 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005332:	4b4f      	ldr	r3, [pc, #316]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a4e      	ldr	r2, [pc, #312]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 8005338:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800533c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800533e:	f7fc fbe5 	bl	8001b0c <HAL_GetTick>
 8005342:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005344:	e008      	b.n	8005358 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005346:	f7fc fbe1 	bl	8001b0c <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	2b02      	cmp	r3, #2
 8005352:	d901      	bls.n	8005358 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e086      	b.n	8005466 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005358:	4b45      	ldr	r3, [pc, #276]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1f0      	bne.n	8005346 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005364:	4b42      	ldr	r3, [pc, #264]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 8005366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005368:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	051b      	lsls	r3, r3, #20
 8005372:	493f      	ldr	r1, [pc, #252]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 8005374:	4313      	orrs	r3, r2
 8005376:	628b      	str	r3, [r1, #40]	@ 0x28
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	3b01      	subs	r3, #1
 800537e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	3b01      	subs	r3, #1
 8005388:	025b      	lsls	r3, r3, #9
 800538a:	b29b      	uxth	r3, r3
 800538c:	431a      	orrs	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	3b01      	subs	r3, #1
 8005394:	041b      	lsls	r3, r3, #16
 8005396:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800539a:	431a      	orrs	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	3b01      	subs	r3, #1
 80053a2:	061b      	lsls	r3, r3, #24
 80053a4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80053a8:	4931      	ldr	r1, [pc, #196]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80053ae:	4b30      	ldr	r3, [pc, #192]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 80053b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	492d      	ldr	r1, [pc, #180]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80053c0:	4b2b      	ldr	r3, [pc, #172]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 80053c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	4928      	ldr	r1, [pc, #160]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80053d2:	4b27      	ldr	r3, [pc, #156]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 80053d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d6:	4a26      	ldr	r2, [pc, #152]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 80053d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80053de:	4b24      	ldr	r3, [pc, #144]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 80053e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053e2:	4b24      	ldr	r3, [pc, #144]	@ (8005474 <RCCEx_PLL3_Config+0x160>)
 80053e4:	4013      	ands	r3, r2
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	69d2      	ldr	r2, [r2, #28]
 80053ea:	00d2      	lsls	r2, r2, #3
 80053ec:	4920      	ldr	r1, [pc, #128]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80053f2:	4b1f      	ldr	r3, [pc, #124]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 80053f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f6:	4a1e      	ldr	r2, [pc, #120]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 80053f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d106      	bne.n	8005412 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005404:	4b1a      	ldr	r3, [pc, #104]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 8005406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005408:	4a19      	ldr	r2, [pc, #100]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 800540a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800540e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005410:	e00f      	b.n	8005432 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d106      	bne.n	8005426 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005418:	4b15      	ldr	r3, [pc, #84]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 800541a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800541c:	4a14      	ldr	r2, [pc, #80]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 800541e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005422:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005424:	e005      	b.n	8005432 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005426:	4b12      	ldr	r3, [pc, #72]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 8005428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800542a:	4a11      	ldr	r2, [pc, #68]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 800542c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005430:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005432:	4b0f      	ldr	r3, [pc, #60]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a0e      	ldr	r2, [pc, #56]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 8005438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800543c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800543e:	f7fc fb65 	bl	8001b0c <HAL_GetTick>
 8005442:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005444:	e008      	b.n	8005458 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005446:	f7fc fb61 	bl	8001b0c <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b02      	cmp	r3, #2
 8005452:	d901      	bls.n	8005458 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e006      	b.n	8005466 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005458:	4b05      	ldr	r3, [pc, #20]	@ (8005470 <RCCEx_PLL3_Config+0x15c>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d0f0      	beq.n	8005446 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005464:	7bfb      	ldrb	r3, [r7, #15]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	58024400 	.word	0x58024400
 8005474:	ffff0007 	.word	0xffff0007

08005478 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e10f      	b.n	80056aa <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a87      	ldr	r2, [pc, #540]	@ (80056b4 <HAL_SPI_Init+0x23c>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d00f      	beq.n	80054ba <HAL_SPI_Init+0x42>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a86      	ldr	r2, [pc, #536]	@ (80056b8 <HAL_SPI_Init+0x240>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d00a      	beq.n	80054ba <HAL_SPI_Init+0x42>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a84      	ldr	r2, [pc, #528]	@ (80056bc <HAL_SPI_Init+0x244>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d005      	beq.n	80054ba <HAL_SPI_Init+0x42>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	2b0f      	cmp	r3, #15
 80054b4:	d901      	bls.n	80054ba <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e0f7      	b.n	80056aa <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f001 fb82 	bl	8006bc4 <SPI_GetPacketSize>
 80054c0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a7b      	ldr	r2, [pc, #492]	@ (80056b4 <HAL_SPI_Init+0x23c>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d00c      	beq.n	80054e6 <HAL_SPI_Init+0x6e>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a79      	ldr	r2, [pc, #484]	@ (80056b8 <HAL_SPI_Init+0x240>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d007      	beq.n	80054e6 <HAL_SPI_Init+0x6e>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a78      	ldr	r2, [pc, #480]	@ (80056bc <HAL_SPI_Init+0x244>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d002      	beq.n	80054e6 <HAL_SPI_Init+0x6e>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2b08      	cmp	r3, #8
 80054e4:	d811      	bhi.n	800550a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80054ea:	4a72      	ldr	r2, [pc, #456]	@ (80056b4 <HAL_SPI_Init+0x23c>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d009      	beq.n	8005504 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a70      	ldr	r2, [pc, #448]	@ (80056b8 <HAL_SPI_Init+0x240>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d004      	beq.n	8005504 <HAL_SPI_Init+0x8c>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a6f      	ldr	r2, [pc, #444]	@ (80056bc <HAL_SPI_Init+0x244>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d104      	bne.n	800550e <HAL_SPI_Init+0x96>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2b10      	cmp	r3, #16
 8005508:	d901      	bls.n	800550e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e0cd      	b.n	80056aa <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d106      	bne.n	8005528 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f7fb fdc8 	bl	80010b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2202      	movs	r2, #2
 800552c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 0201 	bic.w	r2, r2, #1
 800553e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800554a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005554:	d119      	bne.n	800558a <HAL_SPI_Init+0x112>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800555e:	d103      	bne.n	8005568 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005564:	2b00      	cmp	r3, #0
 8005566:	d008      	beq.n	800557a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10c      	bne.n	800558a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005574:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005578:	d107      	bne.n	800558a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005588:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00f      	beq.n	80055b6 <HAL_SPI_Init+0x13e>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	2b06      	cmp	r3, #6
 800559c:	d90b      	bls.n	80055b6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	430a      	orrs	r2, r1
 80055b2:	601a      	str	r2, [r3, #0]
 80055b4:	e007      	b.n	80055c6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80055c4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	69da      	ldr	r2, [r3, #28]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ce:	431a      	orrs	r2, r3
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	431a      	orrs	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055d8:	ea42 0103 	orr.w	r1, r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68da      	ldr	r2, [r3, #12]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	430a      	orrs	r2, r1
 80055e6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f0:	431a      	orrs	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f6:	431a      	orrs	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	431a      	orrs	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	431a      	orrs	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	431a      	orrs	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	431a      	orrs	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	431a      	orrs	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800561a:	431a      	orrs	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	431a      	orrs	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005626:	ea42 0103 	orr.w	r1, r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d113      	bne.n	8005666 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005650:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005664:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f022 0201 	bic.w	r2, r2, #1
 8005674:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00a      	beq.n	8005698 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	430a      	orrs	r2, r1
 8005696:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	40013000 	.word	0x40013000
 80056b8:	40003800 	.word	0x40003800
 80056bc:	40003c00 	.word	0x40003c00

080056c0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b088      	sub	sp, #32
 80056c4:	af02      	add	r7, sp, #8
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	603b      	str	r3, [r7, #0]
 80056cc:	4613      	mov	r3, r2
 80056ce:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3320      	adds	r3, #32
 80056d6:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056d8:	f7fc fa18 	bl	8001b0c <HAL_GetTick>
 80056dc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d001      	beq.n	80056ee <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80056ea:	2302      	movs	r3, #2
 80056ec:	e1d1      	b.n	8005a92 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <HAL_SPI_Transmit+0x3a>
 80056f4:	88fb      	ldrh	r3, [r7, #6]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e1c9      	b.n	8005a92 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005704:	2b01      	cmp	r3, #1
 8005706:	d101      	bne.n	800570c <HAL_SPI_Transmit+0x4c>
 8005708:	2302      	movs	r3, #2
 800570a:	e1c2      	b.n	8005a92 <HAL_SPI_Transmit+0x3d2>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2203      	movs	r2, #3
 8005718:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	88fa      	ldrh	r2, [r7, #6]
 800572e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	88fa      	ldrh	r2, [r7, #6]
 8005736:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005764:	d108      	bne.n	8005778 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005774:	601a      	str	r2, [r3, #0]
 8005776:	e009      	b.n	800578c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800578a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	4b96      	ldr	r3, [pc, #600]	@ (80059ec <HAL_SPI_Transmit+0x32c>)
 8005794:	4013      	ands	r3, r2
 8005796:	88f9      	ldrh	r1, [r7, #6]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	6812      	ldr	r2, [r2, #0]
 800579c:	430b      	orrs	r3, r1
 800579e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f042 0201 	orr.w	r2, r2, #1
 80057ae:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057b8:	d107      	bne.n	80057ca <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	2b0f      	cmp	r3, #15
 80057d0:	d947      	bls.n	8005862 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80057d2:	e03f      	b.n	8005854 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d114      	bne.n	800580c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	6812      	ldr	r2, [r2, #0]
 80057ec:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057f2:	1d1a      	adds	r2, r3, #4
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80057fe:	b29b      	uxth	r3, r3
 8005800:	3b01      	subs	r3, #1
 8005802:	b29a      	uxth	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800580a:	e023      	b.n	8005854 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800580c:	f7fc f97e 	bl	8001b0c <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	683a      	ldr	r2, [r7, #0]
 8005818:	429a      	cmp	r2, r3
 800581a:	d803      	bhi.n	8005824 <HAL_SPI_Transmit+0x164>
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005822:	d102      	bne.n	800582a <HAL_SPI_Transmit+0x16a>
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d114      	bne.n	8005854 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f001 f8fc 	bl	8006a28 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005836:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	e11e      	b.n	8005a92 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800585a:	b29b      	uxth	r3, r3
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1b9      	bne.n	80057d4 <HAL_SPI_Transmit+0x114>
 8005860:	e0f1      	b.n	8005a46 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	2b07      	cmp	r3, #7
 8005868:	f240 80e6 	bls.w	8005a38 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800586c:	e05d      	b.n	800592a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	695b      	ldr	r3, [r3, #20]
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b02      	cmp	r3, #2
 800587a:	d132      	bne.n	80058e2 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005882:	b29b      	uxth	r3, r3
 8005884:	2b01      	cmp	r3, #1
 8005886:	d918      	bls.n	80058ba <HAL_SPI_Transmit+0x1fa>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800588c:	2b00      	cmp	r3, #0
 800588e:	d014      	beq.n	80058ba <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6812      	ldr	r2, [r2, #0]
 800589a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058a0:	1d1a      	adds	r2, r3, #4
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	3b02      	subs	r3, #2
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80058b8:	e037      	b.n	800592a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058be:	881a      	ldrh	r2, [r3, #0]
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058c8:	1c9a      	adds	r2, r3, #2
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	3b01      	subs	r3, #1
 80058d8:	b29a      	uxth	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80058e0:	e023      	b.n	800592a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058e2:	f7fc f913 	bl	8001b0c <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d803      	bhi.n	80058fa <HAL_SPI_Transmit+0x23a>
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f8:	d102      	bne.n	8005900 <HAL_SPI_Transmit+0x240>
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d114      	bne.n	800592a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f001 f891 	bl	8006a28 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800590c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2201      	movs	r2, #1
 800591a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e0b3      	b.n	8005a92 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005930:	b29b      	uxth	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d19b      	bne.n	800586e <HAL_SPI_Transmit+0x1ae>
 8005936:	e086      	b.n	8005a46 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b02      	cmp	r3, #2
 8005944:	d154      	bne.n	80059f0 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800594c:	b29b      	uxth	r3, r3
 800594e:	2b03      	cmp	r3, #3
 8005950:	d918      	bls.n	8005984 <HAL_SPI_Transmit+0x2c4>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005956:	2b40      	cmp	r3, #64	@ 0x40
 8005958:	d914      	bls.n	8005984 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	6812      	ldr	r2, [r2, #0]
 8005964:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800596a:	1d1a      	adds	r2, r3, #4
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005976:	b29b      	uxth	r3, r3
 8005978:	3b04      	subs	r3, #4
 800597a:	b29a      	uxth	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005982:	e059      	b.n	8005a38 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800598a:	b29b      	uxth	r3, r3
 800598c:	2b01      	cmp	r3, #1
 800598e:	d917      	bls.n	80059c0 <HAL_SPI_Transmit+0x300>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005994:	2b00      	cmp	r3, #0
 8005996:	d013      	beq.n	80059c0 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800599c:	881a      	ldrh	r2, [r3, #0]
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059a6:	1c9a      	adds	r2, r3, #2
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	3b02      	subs	r3, #2
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80059be:	e03b      	b.n	8005a38 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	3320      	adds	r3, #32
 80059ca:	7812      	ldrb	r2, [r2, #0]
 80059cc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059d2:	1c5a      	adds	r2, r3, #1
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80059de:	b29b      	uxth	r3, r3
 80059e0:	3b01      	subs	r3, #1
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80059ea:	e025      	b.n	8005a38 <HAL_SPI_Transmit+0x378>
 80059ec:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059f0:	f7fc f88c 	bl	8001b0c <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	683a      	ldr	r2, [r7, #0]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d803      	bhi.n	8005a08 <HAL_SPI_Transmit+0x348>
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a06:	d102      	bne.n	8005a0e <HAL_SPI_Transmit+0x34e>
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d114      	bne.n	8005a38 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f001 f80a 	bl	8006a28 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a1a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e02c      	b.n	8005a92 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f47f af79 	bne.w	8005938 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	2108      	movs	r1, #8
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f001 f889 	bl	8006b68 <SPI_WaitOnFlagUntilTimeout>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d007      	beq.n	8005a6c <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a62:	f043 0220 	orr.w	r2, r3, #32
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f000 ffdb 	bl	8006a28 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d001      	beq.n	8005a90 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e000      	b.n	8005a92 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8005a90:	2300      	movs	r3, #0
  }
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3718      	adds	r7, #24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop

08005a9c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b088      	sub	sp, #32
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	603b      	str	r3, [r7, #0]
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ab0:	095b      	lsrs	r3, r3, #5
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	3330      	adds	r3, #48	@ 0x30
 8005abe:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ac0:	f7fc f824 	bl	8001b0c <HAL_GetTick>
 8005ac4:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d001      	beq.n	8005ad6 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	e250      	b.n	8005f78 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d002      	beq.n	8005ae2 <HAL_SPI_Receive+0x46>
 8005adc:	88fb      	ldrh	r3, [r7, #6]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e248      	b.n	8005f78 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d101      	bne.n	8005af4 <HAL_SPI_Receive+0x58>
 8005af0:	2302      	movs	r3, #2
 8005af2:	e241      	b.n	8005f78 <HAL_SPI_Receive+0x4dc>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2204      	movs	r2, #4
 8005b00:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	88fa      	ldrh	r2, [r7, #6]
 8005b16:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	88fa      	ldrh	r2, [r7, #6]
 8005b1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005b4c:	d108      	bne.n	8005b60 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b5c:	601a      	str	r2, [r3, #0]
 8005b5e:	e009      	b.n	8005b74 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005b72:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	4b95      	ldr	r3, [pc, #596]	@ (8005dd0 <HAL_SPI_Receive+0x334>)
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	88f9      	ldrh	r1, [r7, #6]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	6812      	ldr	r2, [r2, #0]
 8005b84:	430b      	orrs	r3, r1
 8005b86:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f042 0201 	orr.w	r2, r2, #1
 8005b96:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ba0:	d107      	bne.n	8005bb2 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bb0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	2b0f      	cmp	r3, #15
 8005bb8:	d96c      	bls.n	8005c94 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005bba:	e064      	b.n	8005c86 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d114      	bne.n	8005bfc <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bda:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005bdc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005be2:	1d1a      	adds	r2, r3, #4
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005bfa:	e044      	b.n	8005c86 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	8bfa      	ldrh	r2, [r7, #30]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d919      	bls.n	8005c3e <HAL_SPI_Receive+0x1a2>
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d014      	beq.n	8005c3e <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c1c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005c1e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c24:	1d1a      	adds	r2, r3, #4
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	3b01      	subs	r3, #1
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005c3c:	e023      	b.n	8005c86 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c3e:	f7fb ff65 	bl	8001b0c <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	683a      	ldr	r2, [r7, #0]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d803      	bhi.n	8005c56 <HAL_SPI_Receive+0x1ba>
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c54:	d102      	bne.n	8005c5c <HAL_SPI_Receive+0x1c0>
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d114      	bne.n	8005c86 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f000 fee3 	bl	8006a28 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c68:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e178      	b.n	8005f78 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d194      	bne.n	8005bbc <HAL_SPI_Receive+0x120>
 8005c92:	e15e      	b.n	8005f52 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	2b07      	cmp	r3, #7
 8005c9a:	f240 8153 	bls.w	8005f44 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005c9e:	e08f      	b.n	8005dc0 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d114      	bne.n	8005ce0 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cba:	69ba      	ldr	r2, [r7, #24]
 8005cbc:	8812      	ldrh	r2, [r2, #0]
 8005cbe:	b292      	uxth	r2, r2
 8005cc0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cc6:	1c9a      	adds	r2, r3, #2
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005cde:	e06f      	b.n	8005dc0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	8bfa      	ldrh	r2, [r7, #30]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d924      	bls.n	8005d38 <HAL_SPI_Receive+0x29c>
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d01f      	beq.n	8005d38 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cfc:	69ba      	ldr	r2, [r7, #24]
 8005cfe:	8812      	ldrh	r2, [r2, #0]
 8005d00:	b292      	uxth	r2, r2
 8005d02:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d08:	1c9a      	adds	r2, r3, #2
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	8812      	ldrh	r2, [r2, #0]
 8005d16:	b292      	uxth	r2, r2
 8005d18:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d1e:	1c9a      	adds	r2, r3, #2
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	3b02      	subs	r3, #2
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005d36:	e043      	b.n	8005dc0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d119      	bne.n	8005d78 <HAL_SPI_Receive+0x2dc>
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d014      	beq.n	8005d78 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d52:	69ba      	ldr	r2, [r7, #24]
 8005d54:	8812      	ldrh	r2, [r2, #0]
 8005d56:	b292      	uxth	r2, r2
 8005d58:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d5e:	1c9a      	adds	r2, r3, #2
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005d76:	e023      	b.n	8005dc0 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d78:	f7fb fec8 	bl	8001b0c <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	683a      	ldr	r2, [r7, #0]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d803      	bhi.n	8005d90 <HAL_SPI_Receive+0x2f4>
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8e:	d102      	bne.n	8005d96 <HAL_SPI_Receive+0x2fa>
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d114      	bne.n	8005dc0 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f000 fe46 	bl	8006a28 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005da2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e0db      	b.n	8005f78 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f47f af69 	bne.w	8005ca0 <HAL_SPI_Receive+0x204>
 8005dce:	e0c0      	b.n	8005f52 <HAL_SPI_Receive+0x4b6>
 8005dd0:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	695b      	ldr	r3, [r3, #20]
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d117      	bne.n	8005e1a <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005df6:	7812      	ldrb	r2, [r2, #0]
 8005df8:	b2d2      	uxtb	r2, r2
 8005dfa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e00:	1c5a      	adds	r2, r3, #1
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005e18:	e094      	b.n	8005f44 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	8bfa      	ldrh	r2, [r7, #30]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d946      	bls.n	8005eb6 <HAL_SPI_Receive+0x41a>
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d041      	beq.n	8005eb6 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e3e:	7812      	ldrb	r2, [r2, #0]
 8005e40:	b2d2      	uxtb	r2, r2
 8005e42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e48:	1c5a      	adds	r2, r3, #1
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e5a:	7812      	ldrb	r2, [r2, #0]
 8005e5c:	b2d2      	uxtb	r2, r2
 8005e5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e64:	1c5a      	adds	r2, r3, #1
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e76:	7812      	ldrb	r2, [r2, #0]
 8005e78:	b2d2      	uxtb	r2, r2
 8005e7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e80:	1c5a      	adds	r2, r3, #1
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e92:	7812      	ldrb	r2, [r2, #0]
 8005e94:	b2d2      	uxtb	r2, r2
 8005e96:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e9c:	1c5a      	adds	r2, r3, #1
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	3b04      	subs	r3, #4
 8005eac:	b29a      	uxth	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005eb4:	e046      	b.n	8005f44 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	2b03      	cmp	r3, #3
 8005ec0:	d81c      	bhi.n	8005efc <HAL_SPI_Receive+0x460>
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d017      	beq.n	8005efc <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ed8:	7812      	ldrb	r2, [r2, #0]
 8005eda:	b2d2      	uxtb	r2, r2
 8005edc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ee2:	1c5a      	adds	r2, r3, #1
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005efa:	e023      	b.n	8005f44 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005efc:	f7fb fe06 	bl	8001b0c <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	683a      	ldr	r2, [r7, #0]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d803      	bhi.n	8005f14 <HAL_SPI_Receive+0x478>
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f12:	d102      	bne.n	8005f1a <HAL_SPI_Receive+0x47e>
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d114      	bne.n	8005f44 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f000 fd84 	bl	8006a28 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f26:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e019      	b.n	8005f78 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f47f af41 	bne.w	8005dd4 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f000 fd68 	bl	8006a28 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d001      	beq.n	8005f76 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e000      	b.n	8005f78 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8005f76:	2300      	movs	r3, #0
  }
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3720      	adds	r7, #32
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b08e      	sub	sp, #56	@ 0x38
 8005f84:	af02      	add	r7, sp, #8
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
 8005f8c:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	3320      	adds	r3, #32
 8005f94:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	3330      	adds	r3, #48	@ 0x30
 8005f9c:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fa2:	095b      	lsrs	r3, r3, #5
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005faa:	f7fb fdaf 	bl	8001b0c <HAL_GetTick>
 8005fae:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8005fb0:	887b      	ldrh	r3, [r7, #2]
 8005fb2:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8005fb4:	887b      	ldrh	r3, [r7, #2]
 8005fb6:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d001      	beq.n	8005fc8 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	e310      	b.n	80065ea <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d005      	beq.n	8005fda <HAL_SPI_TransmitReceive+0x5a>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d002      	beq.n	8005fda <HAL_SPI_TransmitReceive+0x5a>
 8005fd4:	887b      	ldrh	r3, [r7, #2]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e305      	b.n	80065ea <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d101      	bne.n	8005fec <HAL_SPI_TransmitReceive+0x6c>
 8005fe8:	2302      	movs	r3, #2
 8005fea:	e2fe      	b.n	80065ea <HAL_SPI_TransmitReceive+0x66a>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2205      	movs	r2, #5
 8005ff8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	887a      	ldrh	r2, [r7, #2]
 800600e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	887a      	ldrh	r2, [r7, #2]
 8006016:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	887a      	ldrh	r2, [r7, #2]
 8006024:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	887a      	ldrh	r2, [r7, #2]
 800602c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68da      	ldr	r2, [r3, #12]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800604a:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a70      	ldr	r2, [pc, #448]	@ (8006214 <HAL_SPI_TransmitReceive+0x294>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d009      	beq.n	800606a <HAL_SPI_TransmitReceive+0xea>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a6f      	ldr	r2, [pc, #444]	@ (8006218 <HAL_SPI_TransmitReceive+0x298>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d004      	beq.n	800606a <HAL_SPI_TransmitReceive+0xea>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a6d      	ldr	r2, [pc, #436]	@ (800621c <HAL_SPI_TransmitReceive+0x29c>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d102      	bne.n	8006070 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800606a:	2310      	movs	r3, #16
 800606c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800606e:	e001      	b.n	8006074 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8006070:	2308      	movs	r3, #8
 8006072:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	685a      	ldr	r2, [r3, #4]
 800607a:	4b69      	ldr	r3, [pc, #420]	@ (8006220 <HAL_SPI_TransmitReceive+0x2a0>)
 800607c:	4013      	ands	r3, r2
 800607e:	8879      	ldrh	r1, [r7, #2]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	6812      	ldr	r2, [r2, #0]
 8006084:	430b      	orrs	r3, r1
 8006086:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f042 0201 	orr.w	r2, r2, #1
 8006096:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80060a0:	d107      	bne.n	80060b2 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	2b0f      	cmp	r3, #15
 80060b8:	f240 80a2 	bls.w	8006200 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 80060bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060be:	089b      	lsrs	r3, r3, #2
 80060c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80060c2:	e094      	b.n	80061ee <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	f003 0302 	and.w	r3, r3, #2
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d120      	bne.n	8006114 <HAL_SPI_TransmitReceive+0x194>
 80060d2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d01d      	beq.n	8006114 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80060d8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80060da:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80060dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060de:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d217      	bcs.n	8006114 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6812      	ldr	r2, [r2, #0]
 80060ee:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060f4:	1d1a      	adds	r2, r3, #4
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006100:	b29b      	uxth	r3, r3
 8006102:	3b01      	subs	r3, #1
 8006104:	b29a      	uxth	r2, r3
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006112:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800611c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800611e:	2b00      	cmp	r3, #0
 8006120:	d065      	beq.n	80061ee <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	f003 0301 	and.w	r3, r3, #1
 800612c:	2b01      	cmp	r3, #1
 800612e:	d118      	bne.n	8006162 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006138:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800613a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006140:	1d1a      	adds	r2, r3, #4
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800614c:	b29b      	uxth	r3, r3
 800614e:	3b01      	subs	r3, #1
 8006150:	b29a      	uxth	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800615e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006160:	e045      	b.n	80061ee <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006162:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006164:	8bfb      	ldrh	r3, [r7, #30]
 8006166:	429a      	cmp	r2, r3
 8006168:	d21d      	bcs.n	80061a6 <HAL_SPI_TransmitReceive+0x226>
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d018      	beq.n	80061a6 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800617c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800617e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006184:	1d1a      	adds	r2, r3, #4
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006190:	b29b      	uxth	r3, r3
 8006192:	3b01      	subs	r3, #1
 8006194:	b29a      	uxth	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80061a2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80061a4:	e023      	b.n	80061ee <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061a6:	f7fb fcb1 	bl	8001b0c <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d803      	bhi.n	80061be <HAL_SPI_TransmitReceive+0x23e>
 80061b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061bc:	d102      	bne.n	80061c4 <HAL_SPI_TransmitReceive+0x244>
 80061be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d114      	bne.n	80061ee <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f000 fc2f 	bl	8006a28 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e1fd      	b.n	80065ea <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80061ee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f47f af67 	bne.w	80060c4 <HAL_SPI_TransmitReceive+0x144>
 80061f6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f47f af63 	bne.w	80060c4 <HAL_SPI_TransmitReceive+0x144>
 80061fe:	e1ce      	b.n	800659e <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	2b07      	cmp	r3, #7
 8006206:	f240 81c2 	bls.w	800658e <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800620a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800620c:	085b      	lsrs	r3, r3, #1
 800620e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006210:	e0c9      	b.n	80063a6 <HAL_SPI_TransmitReceive+0x426>
 8006212:	bf00      	nop
 8006214:	40013000 	.word	0x40013000
 8006218:	40003800 	.word	0x40003800
 800621c:	40003c00 	.word	0x40003c00
 8006220:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	f003 0302 	and.w	r3, r3, #2
 800622e:	2b02      	cmp	r3, #2
 8006230:	d11f      	bne.n	8006272 <HAL_SPI_TransmitReceive+0x2f2>
 8006232:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006234:	2b00      	cmp	r3, #0
 8006236:	d01c      	beq.n	8006272 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006238:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800623a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800623c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800623e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006240:	429a      	cmp	r2, r3
 8006242:	d216      	bcs.n	8006272 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006248:	881a      	ldrh	r2, [r3, #0]
 800624a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624c:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006252:	1c9a      	adds	r2, r3, #2
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800625e:	b29b      	uxth	r3, r3
 8006260:	3b01      	subs	r3, #1
 8006262:	b29a      	uxth	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006270:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	695b      	ldr	r3, [r3, #20]
 8006278:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800627a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 8092 	beq.w	80063a6 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	f003 0301 	and.w	r3, r3, #1
 800628c:	2b01      	cmp	r3, #1
 800628e:	d118      	bne.n	80062c2 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006294:	6a3a      	ldr	r2, [r7, #32]
 8006296:	8812      	ldrh	r2, [r2, #0]
 8006298:	b292      	uxth	r2, r2
 800629a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062a0:	1c9a      	adds	r2, r3, #2
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	3b01      	subs	r3, #1
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80062be:	853b      	strh	r3, [r7, #40]	@ 0x28
 80062c0:	e071      	b.n	80063a6 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80062c2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80062c4:	8bfb      	ldrh	r3, [r7, #30]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d228      	bcs.n	800631c <HAL_SPI_TransmitReceive+0x39c>
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d023      	beq.n	800631c <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062d8:	6a3a      	ldr	r2, [r7, #32]
 80062da:	8812      	ldrh	r2, [r2, #0]
 80062dc:	b292      	uxth	r2, r2
 80062de:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062e4:	1c9a      	adds	r2, r3, #2
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062ee:	6a3a      	ldr	r2, [r7, #32]
 80062f0:	8812      	ldrh	r2, [r2, #0]
 80062f2:	b292      	uxth	r2, r2
 80062f4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062fa:	1c9a      	adds	r2, r3, #2
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006306:	b29b      	uxth	r3, r3
 8006308:	3b02      	subs	r3, #2
 800630a:	b29a      	uxth	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006318:	853b      	strh	r3, [r7, #40]	@ 0x28
 800631a:	e044      	b.n	80063a6 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800631c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800631e:	2b01      	cmp	r3, #1
 8006320:	d11d      	bne.n	800635e <HAL_SPI_TransmitReceive+0x3de>
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d018      	beq.n	800635e <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006330:	6a3a      	ldr	r2, [r7, #32]
 8006332:	8812      	ldrh	r2, [r2, #0]
 8006334:	b292      	uxth	r2, r2
 8006336:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800633c:	1c9a      	adds	r2, r3, #2
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006348:	b29b      	uxth	r3, r3
 800634a:	3b01      	subs	r3, #1
 800634c:	b29a      	uxth	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800635a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800635c:	e023      	b.n	80063a6 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800635e:	f7fb fbd5 	bl	8001b0c <HAL_GetTick>
 8006362:	4602      	mov	r2, r0
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800636a:	429a      	cmp	r2, r3
 800636c:	d803      	bhi.n	8006376 <HAL_SPI_TransmitReceive+0x3f6>
 800636e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006374:	d102      	bne.n	800637c <HAL_SPI_TransmitReceive+0x3fc>
 8006376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006378:	2b00      	cmp	r3, #0
 800637a:	d114      	bne.n	80063a6 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f000 fb53 	bl	8006a28 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006388:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e121      	b.n	80065ea <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80063a6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f47f af3b 	bne.w	8006224 <HAL_SPI_TransmitReceive+0x2a4>
 80063ae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f47f af37 	bne.w	8006224 <HAL_SPI_TransmitReceive+0x2a4>
 80063b6:	e0f2      	b.n	800659e <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	f003 0302 	and.w	r3, r3, #2
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d121      	bne.n	800640a <HAL_SPI_TransmitReceive+0x48a>
 80063c6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d01e      	beq.n	800640a <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80063cc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80063ce:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80063d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063d2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d218      	bcs.n	800640a <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	3320      	adds	r3, #32
 80063e2:	7812      	ldrb	r2, [r2, #0]
 80063e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063ea:	1c5a      	adds	r2, r3, #1
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	3b01      	subs	r3, #1
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006408:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	695b      	ldr	r3, [r3, #20]
 8006410:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8006412:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006414:	2b00      	cmp	r3, #0
 8006416:	f000 80ba 	beq.w	800658e <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	695b      	ldr	r3, [r3, #20]
 8006420:	f003 0301 	and.w	r3, r3, #1
 8006424:	2b01      	cmp	r3, #1
 8006426:	d11b      	bne.n	8006460 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006434:	7812      	ldrb	r2, [r2, #0]
 8006436:	b2d2      	uxtb	r2, r2
 8006438:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800643e:	1c5a      	adds	r2, r3, #1
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800644a:	b29b      	uxth	r3, r3
 800644c:	3b01      	subs	r3, #1
 800644e:	b29a      	uxth	r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800645c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800645e:	e096      	b.n	800658e <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006460:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006462:	8bfb      	ldrh	r3, [r7, #30]
 8006464:	429a      	cmp	r2, r3
 8006466:	d24a      	bcs.n	80064fe <HAL_SPI_TransmitReceive+0x57e>
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d045      	beq.n	80064fe <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800647e:	7812      	ldrb	r2, [r2, #0]
 8006480:	b2d2      	uxtb	r2, r2
 8006482:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006488:	1c5a      	adds	r2, r3, #1
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800649a:	7812      	ldrb	r2, [r2, #0]
 800649c:	b2d2      	uxtb	r2, r2
 800649e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064a4:	1c5a      	adds	r2, r3, #1
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064b6:	7812      	ldrb	r2, [r2, #0]
 80064b8:	b2d2      	uxtb	r2, r2
 80064ba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064c0:	1c5a      	adds	r2, r3, #1
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064d2:	7812      	ldrb	r2, [r2, #0]
 80064d4:	b2d2      	uxtb	r2, r2
 80064d6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064dc:	1c5a      	adds	r2, r3, #1
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	3b04      	subs	r3, #4
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80064fa:	853b      	strh	r3, [r7, #40]	@ 0x28
 80064fc:	e047      	b.n	800658e <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80064fe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006500:	2b03      	cmp	r3, #3
 8006502:	d820      	bhi.n	8006546 <HAL_SPI_TransmitReceive+0x5c6>
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d01b      	beq.n	8006546 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800651a:	7812      	ldrb	r2, [r2, #0]
 800651c:	b2d2      	uxtb	r2, r2
 800651e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006524:	1c5a      	adds	r2, r3, #1
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006530:	b29b      	uxth	r3, r3
 8006532:	3b01      	subs	r3, #1
 8006534:	b29a      	uxth	r2, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006542:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006544:	e023      	b.n	800658e <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006546:	f7fb fae1 	bl	8001b0c <HAL_GetTick>
 800654a:	4602      	mov	r2, r0
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006552:	429a      	cmp	r2, r3
 8006554:	d803      	bhi.n	800655e <HAL_SPI_TransmitReceive+0x5de>
 8006556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800655c:	d102      	bne.n	8006564 <HAL_SPI_TransmitReceive+0x5e4>
 800655e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006560:	2b00      	cmp	r3, #0
 8006562:	d114      	bne.n	800658e <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f000 fa5f 	bl	8006a28 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006570:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e02d      	b.n	80065ea <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800658e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006590:	2b00      	cmp	r3, #0
 8006592:	f47f af11 	bne.w	80063b8 <HAL_SPI_TransmitReceive+0x438>
 8006596:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006598:	2b00      	cmp	r3, #0
 800659a:	f47f af0d 	bne.w	80063b8 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065a4:	2200      	movs	r2, #0
 80065a6:	2108      	movs	r1, #8
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f000 fadd 	bl	8006b68 <SPI_WaitOnFlagUntilTimeout>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d007      	beq.n	80065c4 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065ba:	f043 0220 	orr.w	r2, r3, #32
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f000 fa2f 	bl	8006a28 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d001      	beq.n	80065e8 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e000      	b.n	80065ea <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 80065e8:	2300      	movs	r3, #0
  }
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3730      	adds	r7, #48	@ 0x30
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop

080065f4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b08a      	sub	sp, #40	@ 0x28
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800660c:	6a3a      	ldr	r2, [r7, #32]
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	4013      	ands	r3, r2
 8006612:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800661c:	2300      	movs	r3, #0
 800661e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006626:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	3330      	adds	r3, #48	@ 0x30
 800662e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006636:	2b00      	cmp	r3, #0
 8006638:	d010      	beq.n	800665c <HAL_SPI_IRQHandler+0x68>
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	f003 0308 	and.w	r3, r3, #8
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00b      	beq.n	800665c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	699a      	ldr	r2, [r3, #24]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006652:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 f9c3 	bl	80069e0 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800665a:	e192      	b.n	8006982 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006662:	2b00      	cmp	r3, #0
 8006664:	d113      	bne.n	800668e <HAL_SPI_IRQHandler+0x9a>
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	f003 0320 	and.w	r3, r3, #32
 800666c:	2b00      	cmp	r3, #0
 800666e:	d10e      	bne.n	800668e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8006676:	2b00      	cmp	r3, #0
 8006678:	d009      	beq.n	800668e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	4798      	blx	r3
    hspi->RxISR(hspi);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	4798      	blx	r3
    handled = 1UL;
 800668a:	2301      	movs	r3, #1
 800668c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006694:	2b00      	cmp	r3, #0
 8006696:	d10f      	bne.n	80066b8 <HAL_SPI_IRQHandler+0xc4>
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	f003 0301 	and.w	r3, r3, #1
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00a      	beq.n	80066b8 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d105      	bne.n	80066b8 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	4798      	blx	r3
    handled = 1UL;
 80066b4:	2301      	movs	r3, #1
 80066b6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	f003 0320 	and.w	r3, r3, #32
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10f      	bne.n	80066e2 <HAL_SPI_IRQHandler+0xee>
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	f003 0302 	and.w	r3, r3, #2
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00a      	beq.n	80066e2 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d105      	bne.n	80066e2 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	4798      	blx	r3
    handled = 1UL;
 80066de:	2301      	movs	r3, #1
 80066e0:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80066e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f040 8147 	bne.w	8006978 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	f003 0308 	and.w	r3, r3, #8
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f000 808b 	beq.w	800680c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	699a      	ldr	r2, [r3, #24]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f042 0208 	orr.w	r2, r2, #8
 8006704:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	699a      	ldr	r2, [r3, #24]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f042 0210 	orr.w	r2, r2, #16
 8006714:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	699a      	ldr	r2, [r3, #24]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006724:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	691a      	ldr	r2, [r3, #16]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f022 0208 	bic.w	r2, r2, #8
 8006734:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006740:	2b00      	cmp	r3, #0
 8006742:	d13d      	bne.n	80067c0 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8006744:	e036      	b.n	80067b4 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	2b0f      	cmp	r3, #15
 800674c:	d90b      	bls.n	8006766 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006756:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006758:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800675e:	1d1a      	adds	r2, r3, #4
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	665a      	str	r2, [r3, #100]	@ 0x64
 8006764:	e01d      	b.n	80067a2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	2b07      	cmp	r3, #7
 800676c:	d90b      	bls.n	8006786 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	8812      	ldrh	r2, [r2, #0]
 8006776:	b292      	uxth	r2, r2
 8006778:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800677e:	1c9a      	adds	r2, r3, #2
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	665a      	str	r2, [r3, #100]	@ 0x64
 8006784:	e00d      	b.n	80067a2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006792:	7812      	ldrb	r2, [r2, #0]
 8006794:	b2d2      	uxtb	r2, r2
 8006796:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800679c:	1c5a      	adds	r2, r3, #1
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	3b01      	subs	r3, #1
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1c2      	bne.n	8006746 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 f931 	bl	8006a28 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2201      	movs	r2, #1
 80067ca:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d003      	beq.n	80067e0 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 f8f7 	bl	80069cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80067de:	e0d0      	b.n	8006982 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80067e0:	7cfb      	ldrb	r3, [r7, #19]
 80067e2:	2b05      	cmp	r3, #5
 80067e4:	d103      	bne.n	80067ee <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f8e6 	bl	80069b8 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80067ec:	e0c6      	b.n	800697c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80067ee:	7cfb      	ldrb	r3, [r7, #19]
 80067f0:	2b04      	cmp	r3, #4
 80067f2:	d103      	bne.n	80067fc <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f8d5 	bl	80069a4 <HAL_SPI_RxCpltCallback>
    return;
 80067fa:	e0bf      	b.n	800697c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80067fc:	7cfb      	ldrb	r3, [r7, #19]
 80067fe:	2b03      	cmp	r3, #3
 8006800:	f040 80bc 	bne.w	800697c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 f8c3 	bl	8006990 <HAL_SPI_TxCpltCallback>
    return;
 800680a:	e0b7      	b.n	800697c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8006812:	2b00      	cmp	r3, #0
 8006814:	f000 80b5 	beq.w	8006982 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00f      	beq.n	8006842 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006828:	f043 0204 	orr.w	r2, r3, #4
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	699a      	ldr	r2, [r3, #24]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006840:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00f      	beq.n	800686c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006852:	f043 0201 	orr.w	r2, r3, #1
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	699a      	ldr	r2, [r3, #24]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800686a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00f      	beq.n	8006896 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800687c:	f043 0208 	orr.w	r2, r3, #8
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	699a      	ldr	r2, [r3, #24]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006894:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	f003 0320 	and.w	r3, r3, #32
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00f      	beq.n	80068c0 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068a6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	699a      	ldr	r2, [r3, #24]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f042 0220 	orr.w	r2, r2, #32
 80068be:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d05a      	beq.n	8006980 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f022 0201 	bic.w	r2, r2, #1
 80068d8:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	6919      	ldr	r1, [r3, #16]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	4b28      	ldr	r3, [pc, #160]	@ (8006988 <HAL_SPI_IRQHandler+0x394>)
 80068e6:	400b      	ands	r3, r1
 80068e8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80068f0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80068f4:	d138      	bne.n	8006968 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	689a      	ldr	r2, [r3, #8]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006904:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800690a:	2b00      	cmp	r3, #0
 800690c:	d013      	beq.n	8006936 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006912:	4a1e      	ldr	r2, [pc, #120]	@ (800698c <HAL_SPI_IRQHandler+0x398>)
 8006914:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800691a:	4618      	mov	r0, r3
 800691c:	f7fb faba 	bl	8001e94 <HAL_DMA_Abort_IT>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d007      	beq.n	8006936 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800692c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800693a:	2b00      	cmp	r3, #0
 800693c:	d020      	beq.n	8006980 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006942:	4a12      	ldr	r2, [pc, #72]	@ (800698c <HAL_SPI_IRQHandler+0x398>)
 8006944:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800694a:	4618      	mov	r0, r3
 800694c:	f7fb faa2 	bl	8001e94 <HAL_DMA_Abort_IT>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d014      	beq.n	8006980 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800695c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006966:	e00b      	b.n	8006980 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 f82b 	bl	80069cc <HAL_SPI_ErrorCallback>
    return;
 8006976:	e003      	b.n	8006980 <HAL_SPI_IRQHandler+0x38c>
    return;
 8006978:	bf00      	nop
 800697a:	e002      	b.n	8006982 <HAL_SPI_IRQHandler+0x38e>
    return;
 800697c:	bf00      	nop
 800697e:	e000      	b.n	8006982 <HAL_SPI_IRQHandler+0x38e>
    return;
 8006980:	bf00      	nop
  }
}
 8006982:	3728      	adds	r7, #40	@ 0x28
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	fffffc94 	.word	0xfffffc94
 800698c:	080069f5 	.word	0x080069f5

08006990 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006998:	bf00      	nop
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80069ac:	bf00      	nop
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80069c0:	bf00      	nop
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a00:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f7ff ffd6 	bl	80069cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006a20:	bf00      	nop
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	699a      	ldr	r2, [r3, #24]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f042 0208 	orr.w	r2, r2, #8
 8006a46:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	699a      	ldr	r2, [r3, #24]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f042 0210 	orr.w	r2, r2, #16
 8006a56:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f022 0201 	bic.w	r2, r2, #1
 8006a66:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6919      	ldr	r1, [r3, #16]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	4b3c      	ldr	r3, [pc, #240]	@ (8006b64 <SPI_CloseTransfer+0x13c>)
 8006a74:	400b      	ands	r3, r1
 8006a76:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	689a      	ldr	r2, [r3, #8]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006a86:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	2b04      	cmp	r3, #4
 8006a92:	d014      	beq.n	8006abe <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f003 0320 	and.w	r3, r3, #32
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00f      	beq.n	8006abe <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006aa4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	699a      	ldr	r2, [r3, #24]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f042 0220 	orr.w	r2, r2, #32
 8006abc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2b03      	cmp	r3, #3
 8006ac8:	d014      	beq.n	8006af4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d00f      	beq.n	8006af4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ada:	f043 0204 	orr.w	r2, r3, #4
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	699a      	ldr	r2, [r3, #24]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006af2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00f      	beq.n	8006b1e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b04:	f043 0201 	orr.w	r2, r3, #1
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	699a      	ldr	r2, [r3, #24]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b1c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00f      	beq.n	8006b48 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b2e:	f043 0208 	orr.w	r2, r3, #8
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	699a      	ldr	r2, [r3, #24]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b46:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8006b58:	bf00      	nop
 8006b5a:	3714      	adds	r7, #20
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr
 8006b64:	fffffc90 	.word	0xfffffc90

08006b68 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	603b      	str	r3, [r7, #0]
 8006b74:	4613      	mov	r3, r2
 8006b76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006b78:	e010      	b.n	8006b9c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b7a:	f7fa ffc7 	bl	8001b0c <HAL_GetTick>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d803      	bhi.n	8006b92 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b90:	d102      	bne.n	8006b98 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d101      	bne.n	8006b9c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e00f      	b.n	8006bbc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	695a      	ldr	r2, [r3, #20]
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	68ba      	ldr	r2, [r7, #8]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	bf0c      	ite	eq
 8006bac:	2301      	moveq	r3, #1
 8006bae:	2300      	movne	r3, #0
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	79fb      	ldrb	r3, [r7, #7]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d0df      	beq.n	8006b7a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3710      	adds	r7, #16
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bd0:	095b      	lsrs	r3, r3, #5
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	3307      	adds	r3, #7
 8006be2:	08db      	lsrs	r3, r3, #3
 8006be4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	fb02 f303 	mul.w	r3, r2, r3
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3714      	adds	r7, #20
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b082      	sub	sp, #8
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d101      	bne.n	8006c0c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e042      	b.n	8006c92 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d106      	bne.n	8006c24 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 f83b 	bl	8006c9a <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2224      	movs	r2, #36	@ 0x24
 8006c28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f022 0201 	bic.w	r2, r2, #1
 8006c3a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d002      	beq.n	8006c4a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 fe29 	bl	800789c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 f8be 	bl	8006dcc <UART_SetConfig>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d101      	bne.n	8006c5a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e01b      	b.n	8006c92 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	685a      	ldr	r2, [r3, #4]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c68:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	689a      	ldr	r2, [r3, #8]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c78:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f042 0201 	orr.w	r2, r2, #1
 8006c88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fea8 	bl	80079e0 <UART_CheckIdleState>
 8006c90:	4603      	mov	r3, r0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3708      	adds	r7, #8
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b083      	sub	sp, #12
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8006ca2:	bf00      	nop
 8006ca4:	370c      	adds	r7, #12
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr

08006cae <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b08a      	sub	sp, #40	@ 0x28
 8006cb2:	af02      	add	r7, sp, #8
 8006cb4:	60f8      	str	r0, [r7, #12]
 8006cb6:	60b9      	str	r1, [r7, #8]
 8006cb8:	603b      	str	r3, [r7, #0]
 8006cba:	4613      	mov	r3, r2
 8006cbc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cc4:	2b20      	cmp	r3, #32
 8006cc6:	d17b      	bne.n	8006dc0 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d002      	beq.n	8006cd4 <HAL_UART_Transmit+0x26>
 8006cce:	88fb      	ldrh	r3, [r7, #6]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d101      	bne.n	8006cd8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e074      	b.n	8006dc2 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2221      	movs	r2, #33	@ 0x21
 8006ce4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ce8:	f7fa ff10 	bl	8001b0c <HAL_GetTick>
 8006cec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	88fa      	ldrh	r2, [r7, #6]
 8006cf2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	88fa      	ldrh	r2, [r7, #6]
 8006cfa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d06:	d108      	bne.n	8006d1a <HAL_UART_Transmit+0x6c>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d104      	bne.n	8006d1a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006d10:	2300      	movs	r3, #0
 8006d12:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	61bb      	str	r3, [r7, #24]
 8006d18:	e003      	b.n	8006d22 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d22:	e030      	b.n	8006d86 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	9300      	str	r3, [sp, #0]
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	2180      	movs	r1, #128	@ 0x80
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f000 ff00 	bl	8007b34 <UART_WaitOnFlagUntilTimeout>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d005      	beq.n	8006d46 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2220      	movs	r2, #32
 8006d3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e03d      	b.n	8006dc2 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d10b      	bne.n	8006d64 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	881b      	ldrh	r3, [r3, #0]
 8006d50:	461a      	mov	r2, r3
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d5a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	3302      	adds	r3, #2
 8006d60:	61bb      	str	r3, [r7, #24]
 8006d62:	e007      	b.n	8006d74 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	781a      	ldrb	r2, [r3, #0]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	3301      	adds	r3, #1
 8006d72:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1c8      	bne.n	8006d24 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	2140      	movs	r1, #64	@ 0x40
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f000 fec9 	bl	8007b34 <UART_WaitOnFlagUntilTimeout>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d005      	beq.n	8006db4 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2220      	movs	r2, #32
 8006dac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006db0:	2303      	movs	r3, #3
 8006db2:	e006      	b.n	8006dc2 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2220      	movs	r2, #32
 8006db8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	e000      	b.n	8006dc2 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006dc0:	2302      	movs	r3, #2
  }
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3720      	adds	r7, #32
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
	...

08006dcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006dd0:	b092      	sub	sp, #72	@ 0x48
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	689a      	ldr	r2, [r3, #8]
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	431a      	orrs	r2, r3
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	431a      	orrs	r2, r3
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	69db      	ldr	r3, [r3, #28]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	4bbe      	ldr	r3, [pc, #760]	@ (80070f4 <UART_SetConfig+0x328>)
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	6812      	ldr	r2, [r2, #0]
 8006e02:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006e04:	430b      	orrs	r3, r1
 8006e06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	68da      	ldr	r2, [r3, #12]
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4ab3      	ldr	r2, [pc, #716]	@ (80070f8 <UART_SetConfig+0x32c>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d004      	beq.n	8006e38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	6a1b      	ldr	r3, [r3, #32]
 8006e32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e34:	4313      	orrs	r3, r2
 8006e36:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	689a      	ldr	r2, [r3, #8]
 8006e3e:	4baf      	ldr	r3, [pc, #700]	@ (80070fc <UART_SetConfig+0x330>)
 8006e40:	4013      	ands	r3, r2
 8006e42:	697a      	ldr	r2, [r7, #20]
 8006e44:	6812      	ldr	r2, [r2, #0]
 8006e46:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006e48:	430b      	orrs	r3, r1
 8006e4a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e52:	f023 010f 	bic.w	r1, r3, #15
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	430a      	orrs	r2, r1
 8006e60:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4aa6      	ldr	r2, [pc, #664]	@ (8007100 <UART_SetConfig+0x334>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d177      	bne.n	8006f5c <UART_SetConfig+0x190>
 8006e6c:	4ba5      	ldr	r3, [pc, #660]	@ (8007104 <UART_SetConfig+0x338>)
 8006e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e74:	2b28      	cmp	r3, #40	@ 0x28
 8006e76:	d86d      	bhi.n	8006f54 <UART_SetConfig+0x188>
 8006e78:	a201      	add	r2, pc, #4	@ (adr r2, 8006e80 <UART_SetConfig+0xb4>)
 8006e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7e:	bf00      	nop
 8006e80:	08006f25 	.word	0x08006f25
 8006e84:	08006f55 	.word	0x08006f55
 8006e88:	08006f55 	.word	0x08006f55
 8006e8c:	08006f55 	.word	0x08006f55
 8006e90:	08006f55 	.word	0x08006f55
 8006e94:	08006f55 	.word	0x08006f55
 8006e98:	08006f55 	.word	0x08006f55
 8006e9c:	08006f55 	.word	0x08006f55
 8006ea0:	08006f2d 	.word	0x08006f2d
 8006ea4:	08006f55 	.word	0x08006f55
 8006ea8:	08006f55 	.word	0x08006f55
 8006eac:	08006f55 	.word	0x08006f55
 8006eb0:	08006f55 	.word	0x08006f55
 8006eb4:	08006f55 	.word	0x08006f55
 8006eb8:	08006f55 	.word	0x08006f55
 8006ebc:	08006f55 	.word	0x08006f55
 8006ec0:	08006f35 	.word	0x08006f35
 8006ec4:	08006f55 	.word	0x08006f55
 8006ec8:	08006f55 	.word	0x08006f55
 8006ecc:	08006f55 	.word	0x08006f55
 8006ed0:	08006f55 	.word	0x08006f55
 8006ed4:	08006f55 	.word	0x08006f55
 8006ed8:	08006f55 	.word	0x08006f55
 8006edc:	08006f55 	.word	0x08006f55
 8006ee0:	08006f3d 	.word	0x08006f3d
 8006ee4:	08006f55 	.word	0x08006f55
 8006ee8:	08006f55 	.word	0x08006f55
 8006eec:	08006f55 	.word	0x08006f55
 8006ef0:	08006f55 	.word	0x08006f55
 8006ef4:	08006f55 	.word	0x08006f55
 8006ef8:	08006f55 	.word	0x08006f55
 8006efc:	08006f55 	.word	0x08006f55
 8006f00:	08006f45 	.word	0x08006f45
 8006f04:	08006f55 	.word	0x08006f55
 8006f08:	08006f55 	.word	0x08006f55
 8006f0c:	08006f55 	.word	0x08006f55
 8006f10:	08006f55 	.word	0x08006f55
 8006f14:	08006f55 	.word	0x08006f55
 8006f18:	08006f55 	.word	0x08006f55
 8006f1c:	08006f55 	.word	0x08006f55
 8006f20:	08006f4d 	.word	0x08006f4d
 8006f24:	2301      	movs	r3, #1
 8006f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f2a:	e222      	b.n	8007372 <UART_SetConfig+0x5a6>
 8006f2c:	2304      	movs	r3, #4
 8006f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f32:	e21e      	b.n	8007372 <UART_SetConfig+0x5a6>
 8006f34:	2308      	movs	r3, #8
 8006f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f3a:	e21a      	b.n	8007372 <UART_SetConfig+0x5a6>
 8006f3c:	2310      	movs	r3, #16
 8006f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f42:	e216      	b.n	8007372 <UART_SetConfig+0x5a6>
 8006f44:	2320      	movs	r3, #32
 8006f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f4a:	e212      	b.n	8007372 <UART_SetConfig+0x5a6>
 8006f4c:	2340      	movs	r3, #64	@ 0x40
 8006f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f52:	e20e      	b.n	8007372 <UART_SetConfig+0x5a6>
 8006f54:	2380      	movs	r3, #128	@ 0x80
 8006f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f5a:	e20a      	b.n	8007372 <UART_SetConfig+0x5a6>
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a69      	ldr	r2, [pc, #420]	@ (8007108 <UART_SetConfig+0x33c>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d130      	bne.n	8006fc8 <UART_SetConfig+0x1fc>
 8006f66:	4b67      	ldr	r3, [pc, #412]	@ (8007104 <UART_SetConfig+0x338>)
 8006f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f6a:	f003 0307 	and.w	r3, r3, #7
 8006f6e:	2b05      	cmp	r3, #5
 8006f70:	d826      	bhi.n	8006fc0 <UART_SetConfig+0x1f4>
 8006f72:	a201      	add	r2, pc, #4	@ (adr r2, 8006f78 <UART_SetConfig+0x1ac>)
 8006f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f78:	08006f91 	.word	0x08006f91
 8006f7c:	08006f99 	.word	0x08006f99
 8006f80:	08006fa1 	.word	0x08006fa1
 8006f84:	08006fa9 	.word	0x08006fa9
 8006f88:	08006fb1 	.word	0x08006fb1
 8006f8c:	08006fb9 	.word	0x08006fb9
 8006f90:	2300      	movs	r3, #0
 8006f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f96:	e1ec      	b.n	8007372 <UART_SetConfig+0x5a6>
 8006f98:	2304      	movs	r3, #4
 8006f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f9e:	e1e8      	b.n	8007372 <UART_SetConfig+0x5a6>
 8006fa0:	2308      	movs	r3, #8
 8006fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fa6:	e1e4      	b.n	8007372 <UART_SetConfig+0x5a6>
 8006fa8:	2310      	movs	r3, #16
 8006faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fae:	e1e0      	b.n	8007372 <UART_SetConfig+0x5a6>
 8006fb0:	2320      	movs	r3, #32
 8006fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fb6:	e1dc      	b.n	8007372 <UART_SetConfig+0x5a6>
 8006fb8:	2340      	movs	r3, #64	@ 0x40
 8006fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fbe:	e1d8      	b.n	8007372 <UART_SetConfig+0x5a6>
 8006fc0:	2380      	movs	r3, #128	@ 0x80
 8006fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fc6:	e1d4      	b.n	8007372 <UART_SetConfig+0x5a6>
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a4f      	ldr	r2, [pc, #316]	@ (800710c <UART_SetConfig+0x340>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d130      	bne.n	8007034 <UART_SetConfig+0x268>
 8006fd2:	4b4c      	ldr	r3, [pc, #304]	@ (8007104 <UART_SetConfig+0x338>)
 8006fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fd6:	f003 0307 	and.w	r3, r3, #7
 8006fda:	2b05      	cmp	r3, #5
 8006fdc:	d826      	bhi.n	800702c <UART_SetConfig+0x260>
 8006fde:	a201      	add	r2, pc, #4	@ (adr r2, 8006fe4 <UART_SetConfig+0x218>)
 8006fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe4:	08006ffd 	.word	0x08006ffd
 8006fe8:	08007005 	.word	0x08007005
 8006fec:	0800700d 	.word	0x0800700d
 8006ff0:	08007015 	.word	0x08007015
 8006ff4:	0800701d 	.word	0x0800701d
 8006ff8:	08007025 	.word	0x08007025
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007002:	e1b6      	b.n	8007372 <UART_SetConfig+0x5a6>
 8007004:	2304      	movs	r3, #4
 8007006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800700a:	e1b2      	b.n	8007372 <UART_SetConfig+0x5a6>
 800700c:	2308      	movs	r3, #8
 800700e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007012:	e1ae      	b.n	8007372 <UART_SetConfig+0x5a6>
 8007014:	2310      	movs	r3, #16
 8007016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800701a:	e1aa      	b.n	8007372 <UART_SetConfig+0x5a6>
 800701c:	2320      	movs	r3, #32
 800701e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007022:	e1a6      	b.n	8007372 <UART_SetConfig+0x5a6>
 8007024:	2340      	movs	r3, #64	@ 0x40
 8007026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800702a:	e1a2      	b.n	8007372 <UART_SetConfig+0x5a6>
 800702c:	2380      	movs	r3, #128	@ 0x80
 800702e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007032:	e19e      	b.n	8007372 <UART_SetConfig+0x5a6>
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a35      	ldr	r2, [pc, #212]	@ (8007110 <UART_SetConfig+0x344>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d130      	bne.n	80070a0 <UART_SetConfig+0x2d4>
 800703e:	4b31      	ldr	r3, [pc, #196]	@ (8007104 <UART_SetConfig+0x338>)
 8007040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007042:	f003 0307 	and.w	r3, r3, #7
 8007046:	2b05      	cmp	r3, #5
 8007048:	d826      	bhi.n	8007098 <UART_SetConfig+0x2cc>
 800704a:	a201      	add	r2, pc, #4	@ (adr r2, 8007050 <UART_SetConfig+0x284>)
 800704c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007050:	08007069 	.word	0x08007069
 8007054:	08007071 	.word	0x08007071
 8007058:	08007079 	.word	0x08007079
 800705c:	08007081 	.word	0x08007081
 8007060:	08007089 	.word	0x08007089
 8007064:	08007091 	.word	0x08007091
 8007068:	2300      	movs	r3, #0
 800706a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800706e:	e180      	b.n	8007372 <UART_SetConfig+0x5a6>
 8007070:	2304      	movs	r3, #4
 8007072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007076:	e17c      	b.n	8007372 <UART_SetConfig+0x5a6>
 8007078:	2308      	movs	r3, #8
 800707a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800707e:	e178      	b.n	8007372 <UART_SetConfig+0x5a6>
 8007080:	2310      	movs	r3, #16
 8007082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007086:	e174      	b.n	8007372 <UART_SetConfig+0x5a6>
 8007088:	2320      	movs	r3, #32
 800708a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800708e:	e170      	b.n	8007372 <UART_SetConfig+0x5a6>
 8007090:	2340      	movs	r3, #64	@ 0x40
 8007092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007096:	e16c      	b.n	8007372 <UART_SetConfig+0x5a6>
 8007098:	2380      	movs	r3, #128	@ 0x80
 800709a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800709e:	e168      	b.n	8007372 <UART_SetConfig+0x5a6>
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a1b      	ldr	r2, [pc, #108]	@ (8007114 <UART_SetConfig+0x348>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d142      	bne.n	8007130 <UART_SetConfig+0x364>
 80070aa:	4b16      	ldr	r3, [pc, #88]	@ (8007104 <UART_SetConfig+0x338>)
 80070ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070ae:	f003 0307 	and.w	r3, r3, #7
 80070b2:	2b05      	cmp	r3, #5
 80070b4:	d838      	bhi.n	8007128 <UART_SetConfig+0x35c>
 80070b6:	a201      	add	r2, pc, #4	@ (adr r2, 80070bc <UART_SetConfig+0x2f0>)
 80070b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070bc:	080070d5 	.word	0x080070d5
 80070c0:	080070dd 	.word	0x080070dd
 80070c4:	080070e5 	.word	0x080070e5
 80070c8:	080070ed 	.word	0x080070ed
 80070cc:	08007119 	.word	0x08007119
 80070d0:	08007121 	.word	0x08007121
 80070d4:	2300      	movs	r3, #0
 80070d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070da:	e14a      	b.n	8007372 <UART_SetConfig+0x5a6>
 80070dc:	2304      	movs	r3, #4
 80070de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070e2:	e146      	b.n	8007372 <UART_SetConfig+0x5a6>
 80070e4:	2308      	movs	r3, #8
 80070e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070ea:	e142      	b.n	8007372 <UART_SetConfig+0x5a6>
 80070ec:	2310      	movs	r3, #16
 80070ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070f2:	e13e      	b.n	8007372 <UART_SetConfig+0x5a6>
 80070f4:	cfff69f3 	.word	0xcfff69f3
 80070f8:	58000c00 	.word	0x58000c00
 80070fc:	11fff4ff 	.word	0x11fff4ff
 8007100:	40011000 	.word	0x40011000
 8007104:	58024400 	.word	0x58024400
 8007108:	40004400 	.word	0x40004400
 800710c:	40004800 	.word	0x40004800
 8007110:	40004c00 	.word	0x40004c00
 8007114:	40005000 	.word	0x40005000
 8007118:	2320      	movs	r3, #32
 800711a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800711e:	e128      	b.n	8007372 <UART_SetConfig+0x5a6>
 8007120:	2340      	movs	r3, #64	@ 0x40
 8007122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007126:	e124      	b.n	8007372 <UART_SetConfig+0x5a6>
 8007128:	2380      	movs	r3, #128	@ 0x80
 800712a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800712e:	e120      	b.n	8007372 <UART_SetConfig+0x5a6>
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4acb      	ldr	r2, [pc, #812]	@ (8007464 <UART_SetConfig+0x698>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d176      	bne.n	8007228 <UART_SetConfig+0x45c>
 800713a:	4bcb      	ldr	r3, [pc, #812]	@ (8007468 <UART_SetConfig+0x69c>)
 800713c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800713e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007142:	2b28      	cmp	r3, #40	@ 0x28
 8007144:	d86c      	bhi.n	8007220 <UART_SetConfig+0x454>
 8007146:	a201      	add	r2, pc, #4	@ (adr r2, 800714c <UART_SetConfig+0x380>)
 8007148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800714c:	080071f1 	.word	0x080071f1
 8007150:	08007221 	.word	0x08007221
 8007154:	08007221 	.word	0x08007221
 8007158:	08007221 	.word	0x08007221
 800715c:	08007221 	.word	0x08007221
 8007160:	08007221 	.word	0x08007221
 8007164:	08007221 	.word	0x08007221
 8007168:	08007221 	.word	0x08007221
 800716c:	080071f9 	.word	0x080071f9
 8007170:	08007221 	.word	0x08007221
 8007174:	08007221 	.word	0x08007221
 8007178:	08007221 	.word	0x08007221
 800717c:	08007221 	.word	0x08007221
 8007180:	08007221 	.word	0x08007221
 8007184:	08007221 	.word	0x08007221
 8007188:	08007221 	.word	0x08007221
 800718c:	08007201 	.word	0x08007201
 8007190:	08007221 	.word	0x08007221
 8007194:	08007221 	.word	0x08007221
 8007198:	08007221 	.word	0x08007221
 800719c:	08007221 	.word	0x08007221
 80071a0:	08007221 	.word	0x08007221
 80071a4:	08007221 	.word	0x08007221
 80071a8:	08007221 	.word	0x08007221
 80071ac:	08007209 	.word	0x08007209
 80071b0:	08007221 	.word	0x08007221
 80071b4:	08007221 	.word	0x08007221
 80071b8:	08007221 	.word	0x08007221
 80071bc:	08007221 	.word	0x08007221
 80071c0:	08007221 	.word	0x08007221
 80071c4:	08007221 	.word	0x08007221
 80071c8:	08007221 	.word	0x08007221
 80071cc:	08007211 	.word	0x08007211
 80071d0:	08007221 	.word	0x08007221
 80071d4:	08007221 	.word	0x08007221
 80071d8:	08007221 	.word	0x08007221
 80071dc:	08007221 	.word	0x08007221
 80071e0:	08007221 	.word	0x08007221
 80071e4:	08007221 	.word	0x08007221
 80071e8:	08007221 	.word	0x08007221
 80071ec:	08007219 	.word	0x08007219
 80071f0:	2301      	movs	r3, #1
 80071f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071f6:	e0bc      	b.n	8007372 <UART_SetConfig+0x5a6>
 80071f8:	2304      	movs	r3, #4
 80071fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071fe:	e0b8      	b.n	8007372 <UART_SetConfig+0x5a6>
 8007200:	2308      	movs	r3, #8
 8007202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007206:	e0b4      	b.n	8007372 <UART_SetConfig+0x5a6>
 8007208:	2310      	movs	r3, #16
 800720a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800720e:	e0b0      	b.n	8007372 <UART_SetConfig+0x5a6>
 8007210:	2320      	movs	r3, #32
 8007212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007216:	e0ac      	b.n	8007372 <UART_SetConfig+0x5a6>
 8007218:	2340      	movs	r3, #64	@ 0x40
 800721a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800721e:	e0a8      	b.n	8007372 <UART_SetConfig+0x5a6>
 8007220:	2380      	movs	r3, #128	@ 0x80
 8007222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007226:	e0a4      	b.n	8007372 <UART_SetConfig+0x5a6>
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a8f      	ldr	r2, [pc, #572]	@ (800746c <UART_SetConfig+0x6a0>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d130      	bne.n	8007294 <UART_SetConfig+0x4c8>
 8007232:	4b8d      	ldr	r3, [pc, #564]	@ (8007468 <UART_SetConfig+0x69c>)
 8007234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007236:	f003 0307 	and.w	r3, r3, #7
 800723a:	2b05      	cmp	r3, #5
 800723c:	d826      	bhi.n	800728c <UART_SetConfig+0x4c0>
 800723e:	a201      	add	r2, pc, #4	@ (adr r2, 8007244 <UART_SetConfig+0x478>)
 8007240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007244:	0800725d 	.word	0x0800725d
 8007248:	08007265 	.word	0x08007265
 800724c:	0800726d 	.word	0x0800726d
 8007250:	08007275 	.word	0x08007275
 8007254:	0800727d 	.word	0x0800727d
 8007258:	08007285 	.word	0x08007285
 800725c:	2300      	movs	r3, #0
 800725e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007262:	e086      	b.n	8007372 <UART_SetConfig+0x5a6>
 8007264:	2304      	movs	r3, #4
 8007266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800726a:	e082      	b.n	8007372 <UART_SetConfig+0x5a6>
 800726c:	2308      	movs	r3, #8
 800726e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007272:	e07e      	b.n	8007372 <UART_SetConfig+0x5a6>
 8007274:	2310      	movs	r3, #16
 8007276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800727a:	e07a      	b.n	8007372 <UART_SetConfig+0x5a6>
 800727c:	2320      	movs	r3, #32
 800727e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007282:	e076      	b.n	8007372 <UART_SetConfig+0x5a6>
 8007284:	2340      	movs	r3, #64	@ 0x40
 8007286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800728a:	e072      	b.n	8007372 <UART_SetConfig+0x5a6>
 800728c:	2380      	movs	r3, #128	@ 0x80
 800728e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007292:	e06e      	b.n	8007372 <UART_SetConfig+0x5a6>
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a75      	ldr	r2, [pc, #468]	@ (8007470 <UART_SetConfig+0x6a4>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d130      	bne.n	8007300 <UART_SetConfig+0x534>
 800729e:	4b72      	ldr	r3, [pc, #456]	@ (8007468 <UART_SetConfig+0x69c>)
 80072a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072a2:	f003 0307 	and.w	r3, r3, #7
 80072a6:	2b05      	cmp	r3, #5
 80072a8:	d826      	bhi.n	80072f8 <UART_SetConfig+0x52c>
 80072aa:	a201      	add	r2, pc, #4	@ (adr r2, 80072b0 <UART_SetConfig+0x4e4>)
 80072ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b0:	080072c9 	.word	0x080072c9
 80072b4:	080072d1 	.word	0x080072d1
 80072b8:	080072d9 	.word	0x080072d9
 80072bc:	080072e1 	.word	0x080072e1
 80072c0:	080072e9 	.word	0x080072e9
 80072c4:	080072f1 	.word	0x080072f1
 80072c8:	2300      	movs	r3, #0
 80072ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ce:	e050      	b.n	8007372 <UART_SetConfig+0x5a6>
 80072d0:	2304      	movs	r3, #4
 80072d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072d6:	e04c      	b.n	8007372 <UART_SetConfig+0x5a6>
 80072d8:	2308      	movs	r3, #8
 80072da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072de:	e048      	b.n	8007372 <UART_SetConfig+0x5a6>
 80072e0:	2310      	movs	r3, #16
 80072e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072e6:	e044      	b.n	8007372 <UART_SetConfig+0x5a6>
 80072e8:	2320      	movs	r3, #32
 80072ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ee:	e040      	b.n	8007372 <UART_SetConfig+0x5a6>
 80072f0:	2340      	movs	r3, #64	@ 0x40
 80072f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072f6:	e03c      	b.n	8007372 <UART_SetConfig+0x5a6>
 80072f8:	2380      	movs	r3, #128	@ 0x80
 80072fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072fe:	e038      	b.n	8007372 <UART_SetConfig+0x5a6>
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a5b      	ldr	r2, [pc, #364]	@ (8007474 <UART_SetConfig+0x6a8>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d130      	bne.n	800736c <UART_SetConfig+0x5a0>
 800730a:	4b57      	ldr	r3, [pc, #348]	@ (8007468 <UART_SetConfig+0x69c>)
 800730c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800730e:	f003 0307 	and.w	r3, r3, #7
 8007312:	2b05      	cmp	r3, #5
 8007314:	d826      	bhi.n	8007364 <UART_SetConfig+0x598>
 8007316:	a201      	add	r2, pc, #4	@ (adr r2, 800731c <UART_SetConfig+0x550>)
 8007318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800731c:	08007335 	.word	0x08007335
 8007320:	0800733d 	.word	0x0800733d
 8007324:	08007345 	.word	0x08007345
 8007328:	0800734d 	.word	0x0800734d
 800732c:	08007355 	.word	0x08007355
 8007330:	0800735d 	.word	0x0800735d
 8007334:	2302      	movs	r3, #2
 8007336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800733a:	e01a      	b.n	8007372 <UART_SetConfig+0x5a6>
 800733c:	2304      	movs	r3, #4
 800733e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007342:	e016      	b.n	8007372 <UART_SetConfig+0x5a6>
 8007344:	2308      	movs	r3, #8
 8007346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800734a:	e012      	b.n	8007372 <UART_SetConfig+0x5a6>
 800734c:	2310      	movs	r3, #16
 800734e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007352:	e00e      	b.n	8007372 <UART_SetConfig+0x5a6>
 8007354:	2320      	movs	r3, #32
 8007356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800735a:	e00a      	b.n	8007372 <UART_SetConfig+0x5a6>
 800735c:	2340      	movs	r3, #64	@ 0x40
 800735e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007362:	e006      	b.n	8007372 <UART_SetConfig+0x5a6>
 8007364:	2380      	movs	r3, #128	@ 0x80
 8007366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800736a:	e002      	b.n	8007372 <UART_SetConfig+0x5a6>
 800736c:	2380      	movs	r3, #128	@ 0x80
 800736e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a3f      	ldr	r2, [pc, #252]	@ (8007474 <UART_SetConfig+0x6a8>)
 8007378:	4293      	cmp	r3, r2
 800737a:	f040 80f8 	bne.w	800756e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800737e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007382:	2b20      	cmp	r3, #32
 8007384:	dc46      	bgt.n	8007414 <UART_SetConfig+0x648>
 8007386:	2b02      	cmp	r3, #2
 8007388:	f2c0 8082 	blt.w	8007490 <UART_SetConfig+0x6c4>
 800738c:	3b02      	subs	r3, #2
 800738e:	2b1e      	cmp	r3, #30
 8007390:	d87e      	bhi.n	8007490 <UART_SetConfig+0x6c4>
 8007392:	a201      	add	r2, pc, #4	@ (adr r2, 8007398 <UART_SetConfig+0x5cc>)
 8007394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007398:	0800741b 	.word	0x0800741b
 800739c:	08007491 	.word	0x08007491
 80073a0:	08007423 	.word	0x08007423
 80073a4:	08007491 	.word	0x08007491
 80073a8:	08007491 	.word	0x08007491
 80073ac:	08007491 	.word	0x08007491
 80073b0:	08007433 	.word	0x08007433
 80073b4:	08007491 	.word	0x08007491
 80073b8:	08007491 	.word	0x08007491
 80073bc:	08007491 	.word	0x08007491
 80073c0:	08007491 	.word	0x08007491
 80073c4:	08007491 	.word	0x08007491
 80073c8:	08007491 	.word	0x08007491
 80073cc:	08007491 	.word	0x08007491
 80073d0:	08007443 	.word	0x08007443
 80073d4:	08007491 	.word	0x08007491
 80073d8:	08007491 	.word	0x08007491
 80073dc:	08007491 	.word	0x08007491
 80073e0:	08007491 	.word	0x08007491
 80073e4:	08007491 	.word	0x08007491
 80073e8:	08007491 	.word	0x08007491
 80073ec:	08007491 	.word	0x08007491
 80073f0:	08007491 	.word	0x08007491
 80073f4:	08007491 	.word	0x08007491
 80073f8:	08007491 	.word	0x08007491
 80073fc:	08007491 	.word	0x08007491
 8007400:	08007491 	.word	0x08007491
 8007404:	08007491 	.word	0x08007491
 8007408:	08007491 	.word	0x08007491
 800740c:	08007491 	.word	0x08007491
 8007410:	08007483 	.word	0x08007483
 8007414:	2b40      	cmp	r3, #64	@ 0x40
 8007416:	d037      	beq.n	8007488 <UART_SetConfig+0x6bc>
 8007418:	e03a      	b.n	8007490 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800741a:	f7fd fc0b 	bl	8004c34 <HAL_RCCEx_GetD3PCLK1Freq>
 800741e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007420:	e03c      	b.n	800749c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007422:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007426:	4618      	mov	r0, r3
 8007428:	f7fd fc1a 	bl	8004c60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800742c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800742e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007430:	e034      	b.n	800749c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007432:	f107 0318 	add.w	r3, r7, #24
 8007436:	4618      	mov	r0, r3
 8007438:	f7fd fd66 	bl	8004f08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007440:	e02c      	b.n	800749c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007442:	4b09      	ldr	r3, [pc, #36]	@ (8007468 <UART_SetConfig+0x69c>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 0320 	and.w	r3, r3, #32
 800744a:	2b00      	cmp	r3, #0
 800744c:	d016      	beq.n	800747c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800744e:	4b06      	ldr	r3, [pc, #24]	@ (8007468 <UART_SetConfig+0x69c>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	08db      	lsrs	r3, r3, #3
 8007454:	f003 0303 	and.w	r3, r3, #3
 8007458:	4a07      	ldr	r2, [pc, #28]	@ (8007478 <UART_SetConfig+0x6ac>)
 800745a:	fa22 f303 	lsr.w	r3, r2, r3
 800745e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007460:	e01c      	b.n	800749c <UART_SetConfig+0x6d0>
 8007462:	bf00      	nop
 8007464:	40011400 	.word	0x40011400
 8007468:	58024400 	.word	0x58024400
 800746c:	40007800 	.word	0x40007800
 8007470:	40007c00 	.word	0x40007c00
 8007474:	58000c00 	.word	0x58000c00
 8007478:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800747c:	4b9d      	ldr	r3, [pc, #628]	@ (80076f4 <UART_SetConfig+0x928>)
 800747e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007480:	e00c      	b.n	800749c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007482:	4b9d      	ldr	r3, [pc, #628]	@ (80076f8 <UART_SetConfig+0x92c>)
 8007484:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007486:	e009      	b.n	800749c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007488:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800748c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800748e:	e005      	b.n	800749c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007490:	2300      	movs	r3, #0
 8007492:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800749a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800749c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800749e:	2b00      	cmp	r3, #0
 80074a0:	f000 81de 	beq.w	8007860 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074a8:	4a94      	ldr	r2, [pc, #592]	@ (80076fc <UART_SetConfig+0x930>)
 80074aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074ae:	461a      	mov	r2, r3
 80074b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80074b6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	685a      	ldr	r2, [r3, #4]
 80074bc:	4613      	mov	r3, r2
 80074be:	005b      	lsls	r3, r3, #1
 80074c0:	4413      	add	r3, r2
 80074c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d305      	bcc.n	80074d4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d903      	bls.n	80074dc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80074da:	e1c1      	b.n	8007860 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074de:	2200      	movs	r2, #0
 80074e0:	60bb      	str	r3, [r7, #8]
 80074e2:	60fa      	str	r2, [r7, #12]
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e8:	4a84      	ldr	r2, [pc, #528]	@ (80076fc <UART_SetConfig+0x930>)
 80074ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	2200      	movs	r2, #0
 80074f2:	603b      	str	r3, [r7, #0]
 80074f4:	607a      	str	r2, [r7, #4]
 80074f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80074fe:	f7f8 ff3f 	bl	8000380 <__aeabi_uldivmod>
 8007502:	4602      	mov	r2, r0
 8007504:	460b      	mov	r3, r1
 8007506:	4610      	mov	r0, r2
 8007508:	4619      	mov	r1, r3
 800750a:	f04f 0200 	mov.w	r2, #0
 800750e:	f04f 0300 	mov.w	r3, #0
 8007512:	020b      	lsls	r3, r1, #8
 8007514:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007518:	0202      	lsls	r2, r0, #8
 800751a:	6979      	ldr	r1, [r7, #20]
 800751c:	6849      	ldr	r1, [r1, #4]
 800751e:	0849      	lsrs	r1, r1, #1
 8007520:	2000      	movs	r0, #0
 8007522:	460c      	mov	r4, r1
 8007524:	4605      	mov	r5, r0
 8007526:	eb12 0804 	adds.w	r8, r2, r4
 800752a:	eb43 0905 	adc.w	r9, r3, r5
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	469a      	mov	sl, r3
 8007536:	4693      	mov	fp, r2
 8007538:	4652      	mov	r2, sl
 800753a:	465b      	mov	r3, fp
 800753c:	4640      	mov	r0, r8
 800753e:	4649      	mov	r1, r9
 8007540:	f7f8 ff1e 	bl	8000380 <__aeabi_uldivmod>
 8007544:	4602      	mov	r2, r0
 8007546:	460b      	mov	r3, r1
 8007548:	4613      	mov	r3, r2
 800754a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800754c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800754e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007552:	d308      	bcc.n	8007566 <UART_SetConfig+0x79a>
 8007554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007556:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800755a:	d204      	bcs.n	8007566 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007562:	60da      	str	r2, [r3, #12]
 8007564:	e17c      	b.n	8007860 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800756c:	e178      	b.n	8007860 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	69db      	ldr	r3, [r3, #28]
 8007572:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007576:	f040 80c5 	bne.w	8007704 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800757a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800757e:	2b20      	cmp	r3, #32
 8007580:	dc48      	bgt.n	8007614 <UART_SetConfig+0x848>
 8007582:	2b00      	cmp	r3, #0
 8007584:	db7b      	blt.n	800767e <UART_SetConfig+0x8b2>
 8007586:	2b20      	cmp	r3, #32
 8007588:	d879      	bhi.n	800767e <UART_SetConfig+0x8b2>
 800758a:	a201      	add	r2, pc, #4	@ (adr r2, 8007590 <UART_SetConfig+0x7c4>)
 800758c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007590:	0800761b 	.word	0x0800761b
 8007594:	08007623 	.word	0x08007623
 8007598:	0800767f 	.word	0x0800767f
 800759c:	0800767f 	.word	0x0800767f
 80075a0:	0800762b 	.word	0x0800762b
 80075a4:	0800767f 	.word	0x0800767f
 80075a8:	0800767f 	.word	0x0800767f
 80075ac:	0800767f 	.word	0x0800767f
 80075b0:	0800763b 	.word	0x0800763b
 80075b4:	0800767f 	.word	0x0800767f
 80075b8:	0800767f 	.word	0x0800767f
 80075bc:	0800767f 	.word	0x0800767f
 80075c0:	0800767f 	.word	0x0800767f
 80075c4:	0800767f 	.word	0x0800767f
 80075c8:	0800767f 	.word	0x0800767f
 80075cc:	0800767f 	.word	0x0800767f
 80075d0:	0800764b 	.word	0x0800764b
 80075d4:	0800767f 	.word	0x0800767f
 80075d8:	0800767f 	.word	0x0800767f
 80075dc:	0800767f 	.word	0x0800767f
 80075e0:	0800767f 	.word	0x0800767f
 80075e4:	0800767f 	.word	0x0800767f
 80075e8:	0800767f 	.word	0x0800767f
 80075ec:	0800767f 	.word	0x0800767f
 80075f0:	0800767f 	.word	0x0800767f
 80075f4:	0800767f 	.word	0x0800767f
 80075f8:	0800767f 	.word	0x0800767f
 80075fc:	0800767f 	.word	0x0800767f
 8007600:	0800767f 	.word	0x0800767f
 8007604:	0800767f 	.word	0x0800767f
 8007608:	0800767f 	.word	0x0800767f
 800760c:	0800767f 	.word	0x0800767f
 8007610:	08007671 	.word	0x08007671
 8007614:	2b40      	cmp	r3, #64	@ 0x40
 8007616:	d02e      	beq.n	8007676 <UART_SetConfig+0x8aa>
 8007618:	e031      	b.n	800767e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800761a:	f7fc f8d5 	bl	80037c8 <HAL_RCC_GetPCLK1Freq>
 800761e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007620:	e033      	b.n	800768a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007622:	f7fc f8e7 	bl	80037f4 <HAL_RCC_GetPCLK2Freq>
 8007626:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007628:	e02f      	b.n	800768a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800762a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800762e:	4618      	mov	r0, r3
 8007630:	f7fd fb16 	bl	8004c60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007636:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007638:	e027      	b.n	800768a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800763a:	f107 0318 	add.w	r3, r7, #24
 800763e:	4618      	mov	r0, r3
 8007640:	f7fd fc62 	bl	8004f08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007644:	69fb      	ldr	r3, [r7, #28]
 8007646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007648:	e01f      	b.n	800768a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800764a:	4b2d      	ldr	r3, [pc, #180]	@ (8007700 <UART_SetConfig+0x934>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 0320 	and.w	r3, r3, #32
 8007652:	2b00      	cmp	r3, #0
 8007654:	d009      	beq.n	800766a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007656:	4b2a      	ldr	r3, [pc, #168]	@ (8007700 <UART_SetConfig+0x934>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	08db      	lsrs	r3, r3, #3
 800765c:	f003 0303 	and.w	r3, r3, #3
 8007660:	4a24      	ldr	r2, [pc, #144]	@ (80076f4 <UART_SetConfig+0x928>)
 8007662:	fa22 f303 	lsr.w	r3, r2, r3
 8007666:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007668:	e00f      	b.n	800768a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800766a:	4b22      	ldr	r3, [pc, #136]	@ (80076f4 <UART_SetConfig+0x928>)
 800766c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800766e:	e00c      	b.n	800768a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007670:	4b21      	ldr	r3, [pc, #132]	@ (80076f8 <UART_SetConfig+0x92c>)
 8007672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007674:	e009      	b.n	800768a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007676:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800767a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800767c:	e005      	b.n	800768a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800767e:	2300      	movs	r3, #0
 8007680:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007688:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800768a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800768c:	2b00      	cmp	r3, #0
 800768e:	f000 80e7 	beq.w	8007860 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007696:	4a19      	ldr	r2, [pc, #100]	@ (80076fc <UART_SetConfig+0x930>)
 8007698:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800769c:	461a      	mov	r2, r3
 800769e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80076a4:	005a      	lsls	r2, r3, #1
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	085b      	lsrs	r3, r3, #1
 80076ac:	441a      	add	r2, r3
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80076b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ba:	2b0f      	cmp	r3, #15
 80076bc:	d916      	bls.n	80076ec <UART_SetConfig+0x920>
 80076be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076c4:	d212      	bcs.n	80076ec <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	f023 030f 	bic.w	r3, r3, #15
 80076ce:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076d2:	085b      	lsrs	r3, r3, #1
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	f003 0307 	and.w	r3, r3, #7
 80076da:	b29a      	uxth	r2, r3
 80076dc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80076de:	4313      	orrs	r3, r2
 80076e0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80076e8:	60da      	str	r2, [r3, #12]
 80076ea:	e0b9      	b.n	8007860 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80076f2:	e0b5      	b.n	8007860 <UART_SetConfig+0xa94>
 80076f4:	03d09000 	.word	0x03d09000
 80076f8:	003d0900 	.word	0x003d0900
 80076fc:	0800aaf4 	.word	0x0800aaf4
 8007700:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007704:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007708:	2b20      	cmp	r3, #32
 800770a:	dc49      	bgt.n	80077a0 <UART_SetConfig+0x9d4>
 800770c:	2b00      	cmp	r3, #0
 800770e:	db7c      	blt.n	800780a <UART_SetConfig+0xa3e>
 8007710:	2b20      	cmp	r3, #32
 8007712:	d87a      	bhi.n	800780a <UART_SetConfig+0xa3e>
 8007714:	a201      	add	r2, pc, #4	@ (adr r2, 800771c <UART_SetConfig+0x950>)
 8007716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771a:	bf00      	nop
 800771c:	080077a7 	.word	0x080077a7
 8007720:	080077af 	.word	0x080077af
 8007724:	0800780b 	.word	0x0800780b
 8007728:	0800780b 	.word	0x0800780b
 800772c:	080077b7 	.word	0x080077b7
 8007730:	0800780b 	.word	0x0800780b
 8007734:	0800780b 	.word	0x0800780b
 8007738:	0800780b 	.word	0x0800780b
 800773c:	080077c7 	.word	0x080077c7
 8007740:	0800780b 	.word	0x0800780b
 8007744:	0800780b 	.word	0x0800780b
 8007748:	0800780b 	.word	0x0800780b
 800774c:	0800780b 	.word	0x0800780b
 8007750:	0800780b 	.word	0x0800780b
 8007754:	0800780b 	.word	0x0800780b
 8007758:	0800780b 	.word	0x0800780b
 800775c:	080077d7 	.word	0x080077d7
 8007760:	0800780b 	.word	0x0800780b
 8007764:	0800780b 	.word	0x0800780b
 8007768:	0800780b 	.word	0x0800780b
 800776c:	0800780b 	.word	0x0800780b
 8007770:	0800780b 	.word	0x0800780b
 8007774:	0800780b 	.word	0x0800780b
 8007778:	0800780b 	.word	0x0800780b
 800777c:	0800780b 	.word	0x0800780b
 8007780:	0800780b 	.word	0x0800780b
 8007784:	0800780b 	.word	0x0800780b
 8007788:	0800780b 	.word	0x0800780b
 800778c:	0800780b 	.word	0x0800780b
 8007790:	0800780b 	.word	0x0800780b
 8007794:	0800780b 	.word	0x0800780b
 8007798:	0800780b 	.word	0x0800780b
 800779c:	080077fd 	.word	0x080077fd
 80077a0:	2b40      	cmp	r3, #64	@ 0x40
 80077a2:	d02e      	beq.n	8007802 <UART_SetConfig+0xa36>
 80077a4:	e031      	b.n	800780a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077a6:	f7fc f80f 	bl	80037c8 <HAL_RCC_GetPCLK1Freq>
 80077aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80077ac:	e033      	b.n	8007816 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077ae:	f7fc f821 	bl	80037f4 <HAL_RCC_GetPCLK2Freq>
 80077b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80077b4:	e02f      	b.n	8007816 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fd fa50 	bl	8004c60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80077c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077c4:	e027      	b.n	8007816 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077c6:	f107 0318 	add.w	r3, r7, #24
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fd fb9c 	bl	8004f08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077d4:	e01f      	b.n	8007816 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077d6:	4b2d      	ldr	r3, [pc, #180]	@ (800788c <UART_SetConfig+0xac0>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f003 0320 	and.w	r3, r3, #32
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d009      	beq.n	80077f6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80077e2:	4b2a      	ldr	r3, [pc, #168]	@ (800788c <UART_SetConfig+0xac0>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	08db      	lsrs	r3, r3, #3
 80077e8:	f003 0303 	and.w	r3, r3, #3
 80077ec:	4a28      	ldr	r2, [pc, #160]	@ (8007890 <UART_SetConfig+0xac4>)
 80077ee:	fa22 f303 	lsr.w	r3, r2, r3
 80077f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80077f4:	e00f      	b.n	8007816 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80077f6:	4b26      	ldr	r3, [pc, #152]	@ (8007890 <UART_SetConfig+0xac4>)
 80077f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077fa:	e00c      	b.n	8007816 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80077fc:	4b25      	ldr	r3, [pc, #148]	@ (8007894 <UART_SetConfig+0xac8>)
 80077fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007800:	e009      	b.n	8007816 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007802:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007808:	e005      	b.n	8007816 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800780a:	2300      	movs	r3, #0
 800780c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007814:	bf00      	nop
    }

    if (pclk != 0U)
 8007816:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007818:	2b00      	cmp	r3, #0
 800781a:	d021      	beq.n	8007860 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007820:	4a1d      	ldr	r2, [pc, #116]	@ (8007898 <UART_SetConfig+0xacc>)
 8007822:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007826:	461a      	mov	r2, r3
 8007828:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800782a:	fbb3 f2f2 	udiv	r2, r3, r2
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	085b      	lsrs	r3, r3, #1
 8007834:	441a      	add	r2, r3
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	fbb2 f3f3 	udiv	r3, r2, r3
 800783e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007842:	2b0f      	cmp	r3, #15
 8007844:	d909      	bls.n	800785a <UART_SetConfig+0xa8e>
 8007846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007848:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800784c:	d205      	bcs.n	800785a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800784e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007850:	b29a      	uxth	r2, r3
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	60da      	str	r2, [r3, #12]
 8007858:	e002      	b.n	8007860 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	2201      	movs	r2, #1
 8007864:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	2201      	movs	r2, #1
 800786c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	2200      	movs	r2, #0
 8007874:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	2200      	movs	r2, #0
 800787a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800787c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007880:	4618      	mov	r0, r3
 8007882:	3748      	adds	r7, #72	@ 0x48
 8007884:	46bd      	mov	sp, r7
 8007886:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800788a:	bf00      	nop
 800788c:	58024400 	.word	0x58024400
 8007890:	03d09000 	.word	0x03d09000
 8007894:	003d0900 	.word	0x003d0900
 8007898:	0800aaf4 	.word	0x0800aaf4

0800789c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078a8:	f003 0308 	and.w	r3, r3, #8
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00a      	beq.n	80078c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	430a      	orrs	r2, r1
 80078c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078ca:	f003 0301 	and.w	r3, r3, #1
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00a      	beq.n	80078e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	430a      	orrs	r2, r1
 80078e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078ec:	f003 0302 	and.w	r3, r3, #2
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d00a      	beq.n	800790a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	430a      	orrs	r2, r1
 8007908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800790e:	f003 0304 	and.w	r3, r3, #4
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00a      	beq.n	800792c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	430a      	orrs	r2, r1
 800792a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007930:	f003 0310 	and.w	r3, r3, #16
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00a      	beq.n	800794e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	430a      	orrs	r2, r1
 800794c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007952:	f003 0320 	and.w	r3, r3, #32
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00a      	beq.n	8007970 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	430a      	orrs	r2, r1
 800796e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007978:	2b00      	cmp	r3, #0
 800797a:	d01a      	beq.n	80079b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	430a      	orrs	r2, r1
 8007990:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007996:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800799a:	d10a      	bne.n	80079b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	430a      	orrs	r2, r1
 80079b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00a      	beq.n	80079d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	430a      	orrs	r2, r1
 80079d2:	605a      	str	r2, [r3, #4]
  }
}
 80079d4:	bf00      	nop
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b098      	sub	sp, #96	@ 0x60
 80079e4:	af02      	add	r7, sp, #8
 80079e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80079f0:	f7fa f88c 	bl	8001b0c <HAL_GetTick>
 80079f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 0308 	and.w	r3, r3, #8
 8007a00:	2b08      	cmp	r3, #8
 8007a02:	d12f      	bne.n	8007a64 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a08:	9300      	str	r3, [sp, #0]
 8007a0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 f88e 	bl	8007b34 <UART_WaitOnFlagUntilTimeout>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d022      	beq.n	8007a64 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a26:	e853 3f00 	ldrex	r3, [r3]
 8007a2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a32:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	461a      	mov	r2, r3
 8007a3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a3e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a44:	e841 2300 	strex	r3, r2, [r1]
 8007a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1e6      	bne.n	8007a1e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2220      	movs	r2, #32
 8007a54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a60:	2303      	movs	r3, #3
 8007a62:	e063      	b.n	8007b2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 0304 	and.w	r3, r3, #4
 8007a6e:	2b04      	cmp	r3, #4
 8007a70:	d149      	bne.n	8007b06 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a72:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007a76:	9300      	str	r3, [sp, #0]
 8007a78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 f857 	bl	8007b34 <UART_WaitOnFlagUntilTimeout>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d03c      	beq.n	8007b06 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a94:	e853 3f00 	ldrex	r3, [r3]
 8007a98:	623b      	str	r3, [r7, #32]
   return(result);
 8007a9a:	6a3b      	ldr	r3, [r7, #32]
 8007a9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007aa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007aaa:	633b      	str	r3, [r7, #48]	@ 0x30
 8007aac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ab0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ab2:	e841 2300 	strex	r3, r2, [r1]
 8007ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1e6      	bne.n	8007a8c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	3308      	adds	r3, #8
 8007ac4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	e853 3f00 	ldrex	r3, [r3]
 8007acc:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f023 0301 	bic.w	r3, r3, #1
 8007ad4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	3308      	adds	r3, #8
 8007adc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ade:	61fa      	str	r2, [r7, #28]
 8007ae0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae2:	69b9      	ldr	r1, [r7, #24]
 8007ae4:	69fa      	ldr	r2, [r7, #28]
 8007ae6:	e841 2300 	strex	r3, r2, [r1]
 8007aea:	617b      	str	r3, [r7, #20]
   return(result);
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1e5      	bne.n	8007abe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2220      	movs	r2, #32
 8007af6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b02:	2303      	movs	r3, #3
 8007b04:	e012      	b.n	8007b2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2220      	movs	r2, #32
 8007b0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2220      	movs	r2, #32
 8007b12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3758      	adds	r7, #88	@ 0x58
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	603b      	str	r3, [r7, #0]
 8007b40:	4613      	mov	r3, r2
 8007b42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b44:	e04f      	b.n	8007be6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b4c:	d04b      	beq.n	8007be6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b4e:	f7f9 ffdd 	bl	8001b0c <HAL_GetTick>
 8007b52:	4602      	mov	r2, r0
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	69ba      	ldr	r2, [r7, #24]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d302      	bcc.n	8007b64 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d101      	bne.n	8007b68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b64:	2303      	movs	r3, #3
 8007b66:	e04e      	b.n	8007c06 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 0304 	and.w	r3, r3, #4
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d037      	beq.n	8007be6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	2b80      	cmp	r3, #128	@ 0x80
 8007b7a:	d034      	beq.n	8007be6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	2b40      	cmp	r3, #64	@ 0x40
 8007b80:	d031      	beq.n	8007be6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	69db      	ldr	r3, [r3, #28]
 8007b88:	f003 0308 	and.w	r3, r3, #8
 8007b8c:	2b08      	cmp	r3, #8
 8007b8e:	d110      	bne.n	8007bb2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2208      	movs	r2, #8
 8007b96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f000 f839 	bl	8007c10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2208      	movs	r2, #8
 8007ba2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e029      	b.n	8007c06 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	69db      	ldr	r3, [r3, #28]
 8007bb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007bbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bc0:	d111      	bne.n	8007be6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007bca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f000 f81f 	bl	8007c10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2220      	movs	r2, #32
 8007bd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007be2:	2303      	movs	r3, #3
 8007be4:	e00f      	b.n	8007c06 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	69da      	ldr	r2, [r3, #28]
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	4013      	ands	r3, r2
 8007bf0:	68ba      	ldr	r2, [r7, #8]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	bf0c      	ite	eq
 8007bf6:	2301      	moveq	r3, #1
 8007bf8:	2300      	movne	r3, #0
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	79fb      	ldrb	r3, [r7, #7]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d0a0      	beq.n	8007b46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
	...

08007c10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b095      	sub	sp, #84	@ 0x54
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c20:	e853 3f00 	ldrex	r3, [r3]
 8007c24:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	461a      	mov	r2, r3
 8007c34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c36:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c38:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c3e:	e841 2300 	strex	r3, r2, [r1]
 8007c42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d1e6      	bne.n	8007c18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	3308      	adds	r3, #8
 8007c50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c52:	6a3b      	ldr	r3, [r7, #32]
 8007c54:	e853 3f00 	ldrex	r3, [r3]
 8007c58:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c5a:	69fa      	ldr	r2, [r7, #28]
 8007c5c:	4b1e      	ldr	r3, [pc, #120]	@ (8007cd8 <UART_EndRxTransfer+0xc8>)
 8007c5e:	4013      	ands	r3, r2
 8007c60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	3308      	adds	r3, #8
 8007c68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c72:	e841 2300 	strex	r3, r2, [r1]
 8007c76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d1e5      	bne.n	8007c4a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d118      	bne.n	8007cb8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	e853 3f00 	ldrex	r3, [r3]
 8007c92:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	f023 0310 	bic.w	r3, r3, #16
 8007c9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ca4:	61bb      	str	r3, [r7, #24]
 8007ca6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca8:	6979      	ldr	r1, [r7, #20]
 8007caa:	69ba      	ldr	r2, [r7, #24]
 8007cac:	e841 2300 	strex	r3, r2, [r1]
 8007cb0:	613b      	str	r3, [r7, #16]
   return(result);
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d1e6      	bne.n	8007c86 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2220      	movs	r2, #32
 8007cbc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007ccc:	bf00      	nop
 8007cce:	3754      	adds	r7, #84	@ 0x54
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr
 8007cd8:	effffffe 	.word	0xeffffffe

08007cdc <std>:
 8007cdc:	2300      	movs	r3, #0
 8007cde:	b510      	push	{r4, lr}
 8007ce0:	4604      	mov	r4, r0
 8007ce2:	e9c0 3300 	strd	r3, r3, [r0]
 8007ce6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cea:	6083      	str	r3, [r0, #8]
 8007cec:	8181      	strh	r1, [r0, #12]
 8007cee:	6643      	str	r3, [r0, #100]	@ 0x64
 8007cf0:	81c2      	strh	r2, [r0, #14]
 8007cf2:	6183      	str	r3, [r0, #24]
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	2208      	movs	r2, #8
 8007cf8:	305c      	adds	r0, #92	@ 0x5c
 8007cfa:	f000 f906 	bl	8007f0a <memset>
 8007cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8007d34 <std+0x58>)
 8007d00:	6263      	str	r3, [r4, #36]	@ 0x24
 8007d02:	4b0d      	ldr	r3, [pc, #52]	@ (8007d38 <std+0x5c>)
 8007d04:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007d06:	4b0d      	ldr	r3, [pc, #52]	@ (8007d3c <std+0x60>)
 8007d08:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8007d40 <std+0x64>)
 8007d0c:	6323      	str	r3, [r4, #48]	@ 0x30
 8007d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8007d44 <std+0x68>)
 8007d10:	6224      	str	r4, [r4, #32]
 8007d12:	429c      	cmp	r4, r3
 8007d14:	d006      	beq.n	8007d24 <std+0x48>
 8007d16:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007d1a:	4294      	cmp	r4, r2
 8007d1c:	d002      	beq.n	8007d24 <std+0x48>
 8007d1e:	33d0      	adds	r3, #208	@ 0xd0
 8007d20:	429c      	cmp	r4, r3
 8007d22:	d105      	bne.n	8007d30 <std+0x54>
 8007d24:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d2c:	f000 b966 	b.w	8007ffc <__retarget_lock_init_recursive>
 8007d30:	bd10      	pop	{r4, pc}
 8007d32:	bf00      	nop
 8007d34:	08007e85 	.word	0x08007e85
 8007d38:	08007ea7 	.word	0x08007ea7
 8007d3c:	08007edf 	.word	0x08007edf
 8007d40:	08007f03 	.word	0x08007f03
 8007d44:	240001e8 	.word	0x240001e8

08007d48 <stdio_exit_handler>:
 8007d48:	4a02      	ldr	r2, [pc, #8]	@ (8007d54 <stdio_exit_handler+0xc>)
 8007d4a:	4903      	ldr	r1, [pc, #12]	@ (8007d58 <stdio_exit_handler+0x10>)
 8007d4c:	4803      	ldr	r0, [pc, #12]	@ (8007d5c <stdio_exit_handler+0x14>)
 8007d4e:	f000 b869 	b.w	8007e24 <_fwalk_sglue>
 8007d52:	bf00      	nop
 8007d54:	2400002c 	.word	0x2400002c
 8007d58:	08008899 	.word	0x08008899
 8007d5c:	2400003c 	.word	0x2400003c

08007d60 <cleanup_stdio>:
 8007d60:	6841      	ldr	r1, [r0, #4]
 8007d62:	4b0c      	ldr	r3, [pc, #48]	@ (8007d94 <cleanup_stdio+0x34>)
 8007d64:	4299      	cmp	r1, r3
 8007d66:	b510      	push	{r4, lr}
 8007d68:	4604      	mov	r4, r0
 8007d6a:	d001      	beq.n	8007d70 <cleanup_stdio+0x10>
 8007d6c:	f000 fd94 	bl	8008898 <_fflush_r>
 8007d70:	68a1      	ldr	r1, [r4, #8]
 8007d72:	4b09      	ldr	r3, [pc, #36]	@ (8007d98 <cleanup_stdio+0x38>)
 8007d74:	4299      	cmp	r1, r3
 8007d76:	d002      	beq.n	8007d7e <cleanup_stdio+0x1e>
 8007d78:	4620      	mov	r0, r4
 8007d7a:	f000 fd8d 	bl	8008898 <_fflush_r>
 8007d7e:	68e1      	ldr	r1, [r4, #12]
 8007d80:	4b06      	ldr	r3, [pc, #24]	@ (8007d9c <cleanup_stdio+0x3c>)
 8007d82:	4299      	cmp	r1, r3
 8007d84:	d004      	beq.n	8007d90 <cleanup_stdio+0x30>
 8007d86:	4620      	mov	r0, r4
 8007d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d8c:	f000 bd84 	b.w	8008898 <_fflush_r>
 8007d90:	bd10      	pop	{r4, pc}
 8007d92:	bf00      	nop
 8007d94:	240001e8 	.word	0x240001e8
 8007d98:	24000250 	.word	0x24000250
 8007d9c:	240002b8 	.word	0x240002b8

08007da0 <global_stdio_init.part.0>:
 8007da0:	b510      	push	{r4, lr}
 8007da2:	4b0b      	ldr	r3, [pc, #44]	@ (8007dd0 <global_stdio_init.part.0+0x30>)
 8007da4:	4c0b      	ldr	r4, [pc, #44]	@ (8007dd4 <global_stdio_init.part.0+0x34>)
 8007da6:	4a0c      	ldr	r2, [pc, #48]	@ (8007dd8 <global_stdio_init.part.0+0x38>)
 8007da8:	601a      	str	r2, [r3, #0]
 8007daa:	4620      	mov	r0, r4
 8007dac:	2200      	movs	r2, #0
 8007dae:	2104      	movs	r1, #4
 8007db0:	f7ff ff94 	bl	8007cdc <std>
 8007db4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007db8:	2201      	movs	r2, #1
 8007dba:	2109      	movs	r1, #9
 8007dbc:	f7ff ff8e 	bl	8007cdc <std>
 8007dc0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007dc4:	2202      	movs	r2, #2
 8007dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dca:	2112      	movs	r1, #18
 8007dcc:	f7ff bf86 	b.w	8007cdc <std>
 8007dd0:	24000320 	.word	0x24000320
 8007dd4:	240001e8 	.word	0x240001e8
 8007dd8:	08007d49 	.word	0x08007d49

08007ddc <__sfp_lock_acquire>:
 8007ddc:	4801      	ldr	r0, [pc, #4]	@ (8007de4 <__sfp_lock_acquire+0x8>)
 8007dde:	f000 b90e 	b.w	8007ffe <__retarget_lock_acquire_recursive>
 8007de2:	bf00      	nop
 8007de4:	24000329 	.word	0x24000329

08007de8 <__sfp_lock_release>:
 8007de8:	4801      	ldr	r0, [pc, #4]	@ (8007df0 <__sfp_lock_release+0x8>)
 8007dea:	f000 b909 	b.w	8008000 <__retarget_lock_release_recursive>
 8007dee:	bf00      	nop
 8007df0:	24000329 	.word	0x24000329

08007df4 <__sinit>:
 8007df4:	b510      	push	{r4, lr}
 8007df6:	4604      	mov	r4, r0
 8007df8:	f7ff fff0 	bl	8007ddc <__sfp_lock_acquire>
 8007dfc:	6a23      	ldr	r3, [r4, #32]
 8007dfe:	b11b      	cbz	r3, 8007e08 <__sinit+0x14>
 8007e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e04:	f7ff bff0 	b.w	8007de8 <__sfp_lock_release>
 8007e08:	4b04      	ldr	r3, [pc, #16]	@ (8007e1c <__sinit+0x28>)
 8007e0a:	6223      	str	r3, [r4, #32]
 8007e0c:	4b04      	ldr	r3, [pc, #16]	@ (8007e20 <__sinit+0x2c>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d1f5      	bne.n	8007e00 <__sinit+0xc>
 8007e14:	f7ff ffc4 	bl	8007da0 <global_stdio_init.part.0>
 8007e18:	e7f2      	b.n	8007e00 <__sinit+0xc>
 8007e1a:	bf00      	nop
 8007e1c:	08007d61 	.word	0x08007d61
 8007e20:	24000320 	.word	0x24000320

08007e24 <_fwalk_sglue>:
 8007e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e28:	4607      	mov	r7, r0
 8007e2a:	4688      	mov	r8, r1
 8007e2c:	4614      	mov	r4, r2
 8007e2e:	2600      	movs	r6, #0
 8007e30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e34:	f1b9 0901 	subs.w	r9, r9, #1
 8007e38:	d505      	bpl.n	8007e46 <_fwalk_sglue+0x22>
 8007e3a:	6824      	ldr	r4, [r4, #0]
 8007e3c:	2c00      	cmp	r4, #0
 8007e3e:	d1f7      	bne.n	8007e30 <_fwalk_sglue+0xc>
 8007e40:	4630      	mov	r0, r6
 8007e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e46:	89ab      	ldrh	r3, [r5, #12]
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d907      	bls.n	8007e5c <_fwalk_sglue+0x38>
 8007e4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e50:	3301      	adds	r3, #1
 8007e52:	d003      	beq.n	8007e5c <_fwalk_sglue+0x38>
 8007e54:	4629      	mov	r1, r5
 8007e56:	4638      	mov	r0, r7
 8007e58:	47c0      	blx	r8
 8007e5a:	4306      	orrs	r6, r0
 8007e5c:	3568      	adds	r5, #104	@ 0x68
 8007e5e:	e7e9      	b.n	8007e34 <_fwalk_sglue+0x10>

08007e60 <iprintf>:
 8007e60:	b40f      	push	{r0, r1, r2, r3}
 8007e62:	b507      	push	{r0, r1, r2, lr}
 8007e64:	4906      	ldr	r1, [pc, #24]	@ (8007e80 <iprintf+0x20>)
 8007e66:	ab04      	add	r3, sp, #16
 8007e68:	6808      	ldr	r0, [r1, #0]
 8007e6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e6e:	6881      	ldr	r1, [r0, #8]
 8007e70:	9301      	str	r3, [sp, #4]
 8007e72:	f000 f9e9 	bl	8008248 <_vfiprintf_r>
 8007e76:	b003      	add	sp, #12
 8007e78:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e7c:	b004      	add	sp, #16
 8007e7e:	4770      	bx	lr
 8007e80:	24000038 	.word	0x24000038

08007e84 <__sread>:
 8007e84:	b510      	push	{r4, lr}
 8007e86:	460c      	mov	r4, r1
 8007e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e8c:	f000 f868 	bl	8007f60 <_read_r>
 8007e90:	2800      	cmp	r0, #0
 8007e92:	bfab      	itete	ge
 8007e94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007e96:	89a3      	ldrhlt	r3, [r4, #12]
 8007e98:	181b      	addge	r3, r3, r0
 8007e9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007e9e:	bfac      	ite	ge
 8007ea0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007ea2:	81a3      	strhlt	r3, [r4, #12]
 8007ea4:	bd10      	pop	{r4, pc}

08007ea6 <__swrite>:
 8007ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eaa:	461f      	mov	r7, r3
 8007eac:	898b      	ldrh	r3, [r1, #12]
 8007eae:	05db      	lsls	r3, r3, #23
 8007eb0:	4605      	mov	r5, r0
 8007eb2:	460c      	mov	r4, r1
 8007eb4:	4616      	mov	r6, r2
 8007eb6:	d505      	bpl.n	8007ec4 <__swrite+0x1e>
 8007eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ebc:	2302      	movs	r3, #2
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f000 f83c 	bl	8007f3c <_lseek_r>
 8007ec4:	89a3      	ldrh	r3, [r4, #12]
 8007ec6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007eca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ece:	81a3      	strh	r3, [r4, #12]
 8007ed0:	4632      	mov	r2, r6
 8007ed2:	463b      	mov	r3, r7
 8007ed4:	4628      	mov	r0, r5
 8007ed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007eda:	f000 b853 	b.w	8007f84 <_write_r>

08007ede <__sseek>:
 8007ede:	b510      	push	{r4, lr}
 8007ee0:	460c      	mov	r4, r1
 8007ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ee6:	f000 f829 	bl	8007f3c <_lseek_r>
 8007eea:	1c43      	adds	r3, r0, #1
 8007eec:	89a3      	ldrh	r3, [r4, #12]
 8007eee:	bf15      	itete	ne
 8007ef0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007ef2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007ef6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007efa:	81a3      	strheq	r3, [r4, #12]
 8007efc:	bf18      	it	ne
 8007efe:	81a3      	strhne	r3, [r4, #12]
 8007f00:	bd10      	pop	{r4, pc}

08007f02 <__sclose>:
 8007f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f06:	f000 b809 	b.w	8007f1c <_close_r>

08007f0a <memset>:
 8007f0a:	4402      	add	r2, r0
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d100      	bne.n	8007f14 <memset+0xa>
 8007f12:	4770      	bx	lr
 8007f14:	f803 1b01 	strb.w	r1, [r3], #1
 8007f18:	e7f9      	b.n	8007f0e <memset+0x4>
	...

08007f1c <_close_r>:
 8007f1c:	b538      	push	{r3, r4, r5, lr}
 8007f1e:	4d06      	ldr	r5, [pc, #24]	@ (8007f38 <_close_r+0x1c>)
 8007f20:	2300      	movs	r3, #0
 8007f22:	4604      	mov	r4, r0
 8007f24:	4608      	mov	r0, r1
 8007f26:	602b      	str	r3, [r5, #0]
 8007f28:	f7f9 f9c6 	bl	80012b8 <_close>
 8007f2c:	1c43      	adds	r3, r0, #1
 8007f2e:	d102      	bne.n	8007f36 <_close_r+0x1a>
 8007f30:	682b      	ldr	r3, [r5, #0]
 8007f32:	b103      	cbz	r3, 8007f36 <_close_r+0x1a>
 8007f34:	6023      	str	r3, [r4, #0]
 8007f36:	bd38      	pop	{r3, r4, r5, pc}
 8007f38:	24000324 	.word	0x24000324

08007f3c <_lseek_r>:
 8007f3c:	b538      	push	{r3, r4, r5, lr}
 8007f3e:	4d07      	ldr	r5, [pc, #28]	@ (8007f5c <_lseek_r+0x20>)
 8007f40:	4604      	mov	r4, r0
 8007f42:	4608      	mov	r0, r1
 8007f44:	4611      	mov	r1, r2
 8007f46:	2200      	movs	r2, #0
 8007f48:	602a      	str	r2, [r5, #0]
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	f7f9 f9db 	bl	8001306 <_lseek>
 8007f50:	1c43      	adds	r3, r0, #1
 8007f52:	d102      	bne.n	8007f5a <_lseek_r+0x1e>
 8007f54:	682b      	ldr	r3, [r5, #0]
 8007f56:	b103      	cbz	r3, 8007f5a <_lseek_r+0x1e>
 8007f58:	6023      	str	r3, [r4, #0]
 8007f5a:	bd38      	pop	{r3, r4, r5, pc}
 8007f5c:	24000324 	.word	0x24000324

08007f60 <_read_r>:
 8007f60:	b538      	push	{r3, r4, r5, lr}
 8007f62:	4d07      	ldr	r5, [pc, #28]	@ (8007f80 <_read_r+0x20>)
 8007f64:	4604      	mov	r4, r0
 8007f66:	4608      	mov	r0, r1
 8007f68:	4611      	mov	r1, r2
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	602a      	str	r2, [r5, #0]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	f7f9 f969 	bl	8001246 <_read>
 8007f74:	1c43      	adds	r3, r0, #1
 8007f76:	d102      	bne.n	8007f7e <_read_r+0x1e>
 8007f78:	682b      	ldr	r3, [r5, #0]
 8007f7a:	b103      	cbz	r3, 8007f7e <_read_r+0x1e>
 8007f7c:	6023      	str	r3, [r4, #0]
 8007f7e:	bd38      	pop	{r3, r4, r5, pc}
 8007f80:	24000324 	.word	0x24000324

08007f84 <_write_r>:
 8007f84:	b538      	push	{r3, r4, r5, lr}
 8007f86:	4d07      	ldr	r5, [pc, #28]	@ (8007fa4 <_write_r+0x20>)
 8007f88:	4604      	mov	r4, r0
 8007f8a:	4608      	mov	r0, r1
 8007f8c:	4611      	mov	r1, r2
 8007f8e:	2200      	movs	r2, #0
 8007f90:	602a      	str	r2, [r5, #0]
 8007f92:	461a      	mov	r2, r3
 8007f94:	f7f9 f974 	bl	8001280 <_write>
 8007f98:	1c43      	adds	r3, r0, #1
 8007f9a:	d102      	bne.n	8007fa2 <_write_r+0x1e>
 8007f9c:	682b      	ldr	r3, [r5, #0]
 8007f9e:	b103      	cbz	r3, 8007fa2 <_write_r+0x1e>
 8007fa0:	6023      	str	r3, [r4, #0]
 8007fa2:	bd38      	pop	{r3, r4, r5, pc}
 8007fa4:	24000324 	.word	0x24000324

08007fa8 <__errno>:
 8007fa8:	4b01      	ldr	r3, [pc, #4]	@ (8007fb0 <__errno+0x8>)
 8007faa:	6818      	ldr	r0, [r3, #0]
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop
 8007fb0:	24000038 	.word	0x24000038

08007fb4 <__libc_init_array>:
 8007fb4:	b570      	push	{r4, r5, r6, lr}
 8007fb6:	4d0d      	ldr	r5, [pc, #52]	@ (8007fec <__libc_init_array+0x38>)
 8007fb8:	4c0d      	ldr	r4, [pc, #52]	@ (8007ff0 <__libc_init_array+0x3c>)
 8007fba:	1b64      	subs	r4, r4, r5
 8007fbc:	10a4      	asrs	r4, r4, #2
 8007fbe:	2600      	movs	r6, #0
 8007fc0:	42a6      	cmp	r6, r4
 8007fc2:	d109      	bne.n	8007fd8 <__libc_init_array+0x24>
 8007fc4:	4d0b      	ldr	r5, [pc, #44]	@ (8007ff4 <__libc_init_array+0x40>)
 8007fc6:	4c0c      	ldr	r4, [pc, #48]	@ (8007ff8 <__libc_init_array+0x44>)
 8007fc8:	f000 fdb6 	bl	8008b38 <_init>
 8007fcc:	1b64      	subs	r4, r4, r5
 8007fce:	10a4      	asrs	r4, r4, #2
 8007fd0:	2600      	movs	r6, #0
 8007fd2:	42a6      	cmp	r6, r4
 8007fd4:	d105      	bne.n	8007fe2 <__libc_init_array+0x2e>
 8007fd6:	bd70      	pop	{r4, r5, r6, pc}
 8007fd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fdc:	4798      	blx	r3
 8007fde:	3601      	adds	r6, #1
 8007fe0:	e7ee      	b.n	8007fc0 <__libc_init_array+0xc>
 8007fe2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fe6:	4798      	blx	r3
 8007fe8:	3601      	adds	r6, #1
 8007fea:	e7f2      	b.n	8007fd2 <__libc_init_array+0x1e>
 8007fec:	0800ab48 	.word	0x0800ab48
 8007ff0:	0800ab48 	.word	0x0800ab48
 8007ff4:	0800ab48 	.word	0x0800ab48
 8007ff8:	0800ab4c 	.word	0x0800ab4c

08007ffc <__retarget_lock_init_recursive>:
 8007ffc:	4770      	bx	lr

08007ffe <__retarget_lock_acquire_recursive>:
 8007ffe:	4770      	bx	lr

08008000 <__retarget_lock_release_recursive>:
 8008000:	4770      	bx	lr
	...

08008004 <_free_r>:
 8008004:	b538      	push	{r3, r4, r5, lr}
 8008006:	4605      	mov	r5, r0
 8008008:	2900      	cmp	r1, #0
 800800a:	d041      	beq.n	8008090 <_free_r+0x8c>
 800800c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008010:	1f0c      	subs	r4, r1, #4
 8008012:	2b00      	cmp	r3, #0
 8008014:	bfb8      	it	lt
 8008016:	18e4      	addlt	r4, r4, r3
 8008018:	f000 f8e0 	bl	80081dc <__malloc_lock>
 800801c:	4a1d      	ldr	r2, [pc, #116]	@ (8008094 <_free_r+0x90>)
 800801e:	6813      	ldr	r3, [r2, #0]
 8008020:	b933      	cbnz	r3, 8008030 <_free_r+0x2c>
 8008022:	6063      	str	r3, [r4, #4]
 8008024:	6014      	str	r4, [r2, #0]
 8008026:	4628      	mov	r0, r5
 8008028:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800802c:	f000 b8dc 	b.w	80081e8 <__malloc_unlock>
 8008030:	42a3      	cmp	r3, r4
 8008032:	d908      	bls.n	8008046 <_free_r+0x42>
 8008034:	6820      	ldr	r0, [r4, #0]
 8008036:	1821      	adds	r1, r4, r0
 8008038:	428b      	cmp	r3, r1
 800803a:	bf01      	itttt	eq
 800803c:	6819      	ldreq	r1, [r3, #0]
 800803e:	685b      	ldreq	r3, [r3, #4]
 8008040:	1809      	addeq	r1, r1, r0
 8008042:	6021      	streq	r1, [r4, #0]
 8008044:	e7ed      	b.n	8008022 <_free_r+0x1e>
 8008046:	461a      	mov	r2, r3
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	b10b      	cbz	r3, 8008050 <_free_r+0x4c>
 800804c:	42a3      	cmp	r3, r4
 800804e:	d9fa      	bls.n	8008046 <_free_r+0x42>
 8008050:	6811      	ldr	r1, [r2, #0]
 8008052:	1850      	adds	r0, r2, r1
 8008054:	42a0      	cmp	r0, r4
 8008056:	d10b      	bne.n	8008070 <_free_r+0x6c>
 8008058:	6820      	ldr	r0, [r4, #0]
 800805a:	4401      	add	r1, r0
 800805c:	1850      	adds	r0, r2, r1
 800805e:	4283      	cmp	r3, r0
 8008060:	6011      	str	r1, [r2, #0]
 8008062:	d1e0      	bne.n	8008026 <_free_r+0x22>
 8008064:	6818      	ldr	r0, [r3, #0]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	6053      	str	r3, [r2, #4]
 800806a:	4408      	add	r0, r1
 800806c:	6010      	str	r0, [r2, #0]
 800806e:	e7da      	b.n	8008026 <_free_r+0x22>
 8008070:	d902      	bls.n	8008078 <_free_r+0x74>
 8008072:	230c      	movs	r3, #12
 8008074:	602b      	str	r3, [r5, #0]
 8008076:	e7d6      	b.n	8008026 <_free_r+0x22>
 8008078:	6820      	ldr	r0, [r4, #0]
 800807a:	1821      	adds	r1, r4, r0
 800807c:	428b      	cmp	r3, r1
 800807e:	bf04      	itt	eq
 8008080:	6819      	ldreq	r1, [r3, #0]
 8008082:	685b      	ldreq	r3, [r3, #4]
 8008084:	6063      	str	r3, [r4, #4]
 8008086:	bf04      	itt	eq
 8008088:	1809      	addeq	r1, r1, r0
 800808a:	6021      	streq	r1, [r4, #0]
 800808c:	6054      	str	r4, [r2, #4]
 800808e:	e7ca      	b.n	8008026 <_free_r+0x22>
 8008090:	bd38      	pop	{r3, r4, r5, pc}
 8008092:	bf00      	nop
 8008094:	24000330 	.word	0x24000330

08008098 <sbrk_aligned>:
 8008098:	b570      	push	{r4, r5, r6, lr}
 800809a:	4e0f      	ldr	r6, [pc, #60]	@ (80080d8 <sbrk_aligned+0x40>)
 800809c:	460c      	mov	r4, r1
 800809e:	6831      	ldr	r1, [r6, #0]
 80080a0:	4605      	mov	r5, r0
 80080a2:	b911      	cbnz	r1, 80080aa <sbrk_aligned+0x12>
 80080a4:	f000 fcb4 	bl	8008a10 <_sbrk_r>
 80080a8:	6030      	str	r0, [r6, #0]
 80080aa:	4621      	mov	r1, r4
 80080ac:	4628      	mov	r0, r5
 80080ae:	f000 fcaf 	bl	8008a10 <_sbrk_r>
 80080b2:	1c43      	adds	r3, r0, #1
 80080b4:	d103      	bne.n	80080be <sbrk_aligned+0x26>
 80080b6:	f04f 34ff 	mov.w	r4, #4294967295
 80080ba:	4620      	mov	r0, r4
 80080bc:	bd70      	pop	{r4, r5, r6, pc}
 80080be:	1cc4      	adds	r4, r0, #3
 80080c0:	f024 0403 	bic.w	r4, r4, #3
 80080c4:	42a0      	cmp	r0, r4
 80080c6:	d0f8      	beq.n	80080ba <sbrk_aligned+0x22>
 80080c8:	1a21      	subs	r1, r4, r0
 80080ca:	4628      	mov	r0, r5
 80080cc:	f000 fca0 	bl	8008a10 <_sbrk_r>
 80080d0:	3001      	adds	r0, #1
 80080d2:	d1f2      	bne.n	80080ba <sbrk_aligned+0x22>
 80080d4:	e7ef      	b.n	80080b6 <sbrk_aligned+0x1e>
 80080d6:	bf00      	nop
 80080d8:	2400032c 	.word	0x2400032c

080080dc <_malloc_r>:
 80080dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080e0:	1ccd      	adds	r5, r1, #3
 80080e2:	f025 0503 	bic.w	r5, r5, #3
 80080e6:	3508      	adds	r5, #8
 80080e8:	2d0c      	cmp	r5, #12
 80080ea:	bf38      	it	cc
 80080ec:	250c      	movcc	r5, #12
 80080ee:	2d00      	cmp	r5, #0
 80080f0:	4606      	mov	r6, r0
 80080f2:	db01      	blt.n	80080f8 <_malloc_r+0x1c>
 80080f4:	42a9      	cmp	r1, r5
 80080f6:	d904      	bls.n	8008102 <_malloc_r+0x26>
 80080f8:	230c      	movs	r3, #12
 80080fa:	6033      	str	r3, [r6, #0]
 80080fc:	2000      	movs	r0, #0
 80080fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008102:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80081d8 <_malloc_r+0xfc>
 8008106:	f000 f869 	bl	80081dc <__malloc_lock>
 800810a:	f8d8 3000 	ldr.w	r3, [r8]
 800810e:	461c      	mov	r4, r3
 8008110:	bb44      	cbnz	r4, 8008164 <_malloc_r+0x88>
 8008112:	4629      	mov	r1, r5
 8008114:	4630      	mov	r0, r6
 8008116:	f7ff ffbf 	bl	8008098 <sbrk_aligned>
 800811a:	1c43      	adds	r3, r0, #1
 800811c:	4604      	mov	r4, r0
 800811e:	d158      	bne.n	80081d2 <_malloc_r+0xf6>
 8008120:	f8d8 4000 	ldr.w	r4, [r8]
 8008124:	4627      	mov	r7, r4
 8008126:	2f00      	cmp	r7, #0
 8008128:	d143      	bne.n	80081b2 <_malloc_r+0xd6>
 800812a:	2c00      	cmp	r4, #0
 800812c:	d04b      	beq.n	80081c6 <_malloc_r+0xea>
 800812e:	6823      	ldr	r3, [r4, #0]
 8008130:	4639      	mov	r1, r7
 8008132:	4630      	mov	r0, r6
 8008134:	eb04 0903 	add.w	r9, r4, r3
 8008138:	f000 fc6a 	bl	8008a10 <_sbrk_r>
 800813c:	4581      	cmp	r9, r0
 800813e:	d142      	bne.n	80081c6 <_malloc_r+0xea>
 8008140:	6821      	ldr	r1, [r4, #0]
 8008142:	1a6d      	subs	r5, r5, r1
 8008144:	4629      	mov	r1, r5
 8008146:	4630      	mov	r0, r6
 8008148:	f7ff ffa6 	bl	8008098 <sbrk_aligned>
 800814c:	3001      	adds	r0, #1
 800814e:	d03a      	beq.n	80081c6 <_malloc_r+0xea>
 8008150:	6823      	ldr	r3, [r4, #0]
 8008152:	442b      	add	r3, r5
 8008154:	6023      	str	r3, [r4, #0]
 8008156:	f8d8 3000 	ldr.w	r3, [r8]
 800815a:	685a      	ldr	r2, [r3, #4]
 800815c:	bb62      	cbnz	r2, 80081b8 <_malloc_r+0xdc>
 800815e:	f8c8 7000 	str.w	r7, [r8]
 8008162:	e00f      	b.n	8008184 <_malloc_r+0xa8>
 8008164:	6822      	ldr	r2, [r4, #0]
 8008166:	1b52      	subs	r2, r2, r5
 8008168:	d420      	bmi.n	80081ac <_malloc_r+0xd0>
 800816a:	2a0b      	cmp	r2, #11
 800816c:	d917      	bls.n	800819e <_malloc_r+0xc2>
 800816e:	1961      	adds	r1, r4, r5
 8008170:	42a3      	cmp	r3, r4
 8008172:	6025      	str	r5, [r4, #0]
 8008174:	bf18      	it	ne
 8008176:	6059      	strne	r1, [r3, #4]
 8008178:	6863      	ldr	r3, [r4, #4]
 800817a:	bf08      	it	eq
 800817c:	f8c8 1000 	streq.w	r1, [r8]
 8008180:	5162      	str	r2, [r4, r5]
 8008182:	604b      	str	r3, [r1, #4]
 8008184:	4630      	mov	r0, r6
 8008186:	f000 f82f 	bl	80081e8 <__malloc_unlock>
 800818a:	f104 000b 	add.w	r0, r4, #11
 800818e:	1d23      	adds	r3, r4, #4
 8008190:	f020 0007 	bic.w	r0, r0, #7
 8008194:	1ac2      	subs	r2, r0, r3
 8008196:	bf1c      	itt	ne
 8008198:	1a1b      	subne	r3, r3, r0
 800819a:	50a3      	strne	r3, [r4, r2]
 800819c:	e7af      	b.n	80080fe <_malloc_r+0x22>
 800819e:	6862      	ldr	r2, [r4, #4]
 80081a0:	42a3      	cmp	r3, r4
 80081a2:	bf0c      	ite	eq
 80081a4:	f8c8 2000 	streq.w	r2, [r8]
 80081a8:	605a      	strne	r2, [r3, #4]
 80081aa:	e7eb      	b.n	8008184 <_malloc_r+0xa8>
 80081ac:	4623      	mov	r3, r4
 80081ae:	6864      	ldr	r4, [r4, #4]
 80081b0:	e7ae      	b.n	8008110 <_malloc_r+0x34>
 80081b2:	463c      	mov	r4, r7
 80081b4:	687f      	ldr	r7, [r7, #4]
 80081b6:	e7b6      	b.n	8008126 <_malloc_r+0x4a>
 80081b8:	461a      	mov	r2, r3
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	42a3      	cmp	r3, r4
 80081be:	d1fb      	bne.n	80081b8 <_malloc_r+0xdc>
 80081c0:	2300      	movs	r3, #0
 80081c2:	6053      	str	r3, [r2, #4]
 80081c4:	e7de      	b.n	8008184 <_malloc_r+0xa8>
 80081c6:	230c      	movs	r3, #12
 80081c8:	6033      	str	r3, [r6, #0]
 80081ca:	4630      	mov	r0, r6
 80081cc:	f000 f80c 	bl	80081e8 <__malloc_unlock>
 80081d0:	e794      	b.n	80080fc <_malloc_r+0x20>
 80081d2:	6005      	str	r5, [r0, #0]
 80081d4:	e7d6      	b.n	8008184 <_malloc_r+0xa8>
 80081d6:	bf00      	nop
 80081d8:	24000330 	.word	0x24000330

080081dc <__malloc_lock>:
 80081dc:	4801      	ldr	r0, [pc, #4]	@ (80081e4 <__malloc_lock+0x8>)
 80081de:	f7ff bf0e 	b.w	8007ffe <__retarget_lock_acquire_recursive>
 80081e2:	bf00      	nop
 80081e4:	24000328 	.word	0x24000328

080081e8 <__malloc_unlock>:
 80081e8:	4801      	ldr	r0, [pc, #4]	@ (80081f0 <__malloc_unlock+0x8>)
 80081ea:	f7ff bf09 	b.w	8008000 <__retarget_lock_release_recursive>
 80081ee:	bf00      	nop
 80081f0:	24000328 	.word	0x24000328

080081f4 <__sfputc_r>:
 80081f4:	6893      	ldr	r3, [r2, #8]
 80081f6:	3b01      	subs	r3, #1
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	b410      	push	{r4}
 80081fc:	6093      	str	r3, [r2, #8]
 80081fe:	da08      	bge.n	8008212 <__sfputc_r+0x1e>
 8008200:	6994      	ldr	r4, [r2, #24]
 8008202:	42a3      	cmp	r3, r4
 8008204:	db01      	blt.n	800820a <__sfputc_r+0x16>
 8008206:	290a      	cmp	r1, #10
 8008208:	d103      	bne.n	8008212 <__sfputc_r+0x1e>
 800820a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800820e:	f000 bb6b 	b.w	80088e8 <__swbuf_r>
 8008212:	6813      	ldr	r3, [r2, #0]
 8008214:	1c58      	adds	r0, r3, #1
 8008216:	6010      	str	r0, [r2, #0]
 8008218:	7019      	strb	r1, [r3, #0]
 800821a:	4608      	mov	r0, r1
 800821c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008220:	4770      	bx	lr

08008222 <__sfputs_r>:
 8008222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008224:	4606      	mov	r6, r0
 8008226:	460f      	mov	r7, r1
 8008228:	4614      	mov	r4, r2
 800822a:	18d5      	adds	r5, r2, r3
 800822c:	42ac      	cmp	r4, r5
 800822e:	d101      	bne.n	8008234 <__sfputs_r+0x12>
 8008230:	2000      	movs	r0, #0
 8008232:	e007      	b.n	8008244 <__sfputs_r+0x22>
 8008234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008238:	463a      	mov	r2, r7
 800823a:	4630      	mov	r0, r6
 800823c:	f7ff ffda 	bl	80081f4 <__sfputc_r>
 8008240:	1c43      	adds	r3, r0, #1
 8008242:	d1f3      	bne.n	800822c <__sfputs_r+0xa>
 8008244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008248 <_vfiprintf_r>:
 8008248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800824c:	460d      	mov	r5, r1
 800824e:	b09d      	sub	sp, #116	@ 0x74
 8008250:	4614      	mov	r4, r2
 8008252:	4698      	mov	r8, r3
 8008254:	4606      	mov	r6, r0
 8008256:	b118      	cbz	r0, 8008260 <_vfiprintf_r+0x18>
 8008258:	6a03      	ldr	r3, [r0, #32]
 800825a:	b90b      	cbnz	r3, 8008260 <_vfiprintf_r+0x18>
 800825c:	f7ff fdca 	bl	8007df4 <__sinit>
 8008260:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008262:	07d9      	lsls	r1, r3, #31
 8008264:	d405      	bmi.n	8008272 <_vfiprintf_r+0x2a>
 8008266:	89ab      	ldrh	r3, [r5, #12]
 8008268:	059a      	lsls	r2, r3, #22
 800826a:	d402      	bmi.n	8008272 <_vfiprintf_r+0x2a>
 800826c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800826e:	f7ff fec6 	bl	8007ffe <__retarget_lock_acquire_recursive>
 8008272:	89ab      	ldrh	r3, [r5, #12]
 8008274:	071b      	lsls	r3, r3, #28
 8008276:	d501      	bpl.n	800827c <_vfiprintf_r+0x34>
 8008278:	692b      	ldr	r3, [r5, #16]
 800827a:	b99b      	cbnz	r3, 80082a4 <_vfiprintf_r+0x5c>
 800827c:	4629      	mov	r1, r5
 800827e:	4630      	mov	r0, r6
 8008280:	f000 fb70 	bl	8008964 <__swsetup_r>
 8008284:	b170      	cbz	r0, 80082a4 <_vfiprintf_r+0x5c>
 8008286:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008288:	07dc      	lsls	r4, r3, #31
 800828a:	d504      	bpl.n	8008296 <_vfiprintf_r+0x4e>
 800828c:	f04f 30ff 	mov.w	r0, #4294967295
 8008290:	b01d      	add	sp, #116	@ 0x74
 8008292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008296:	89ab      	ldrh	r3, [r5, #12]
 8008298:	0598      	lsls	r0, r3, #22
 800829a:	d4f7      	bmi.n	800828c <_vfiprintf_r+0x44>
 800829c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800829e:	f7ff feaf 	bl	8008000 <__retarget_lock_release_recursive>
 80082a2:	e7f3      	b.n	800828c <_vfiprintf_r+0x44>
 80082a4:	2300      	movs	r3, #0
 80082a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80082a8:	2320      	movs	r3, #32
 80082aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80082ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80082b2:	2330      	movs	r3, #48	@ 0x30
 80082b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008464 <_vfiprintf_r+0x21c>
 80082b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80082bc:	f04f 0901 	mov.w	r9, #1
 80082c0:	4623      	mov	r3, r4
 80082c2:	469a      	mov	sl, r3
 80082c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082c8:	b10a      	cbz	r2, 80082ce <_vfiprintf_r+0x86>
 80082ca:	2a25      	cmp	r2, #37	@ 0x25
 80082cc:	d1f9      	bne.n	80082c2 <_vfiprintf_r+0x7a>
 80082ce:	ebba 0b04 	subs.w	fp, sl, r4
 80082d2:	d00b      	beq.n	80082ec <_vfiprintf_r+0xa4>
 80082d4:	465b      	mov	r3, fp
 80082d6:	4622      	mov	r2, r4
 80082d8:	4629      	mov	r1, r5
 80082da:	4630      	mov	r0, r6
 80082dc:	f7ff ffa1 	bl	8008222 <__sfputs_r>
 80082e0:	3001      	adds	r0, #1
 80082e2:	f000 80a7 	beq.w	8008434 <_vfiprintf_r+0x1ec>
 80082e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082e8:	445a      	add	r2, fp
 80082ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80082ec:	f89a 3000 	ldrb.w	r3, [sl]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	f000 809f 	beq.w	8008434 <_vfiprintf_r+0x1ec>
 80082f6:	2300      	movs	r3, #0
 80082f8:	f04f 32ff 	mov.w	r2, #4294967295
 80082fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008300:	f10a 0a01 	add.w	sl, sl, #1
 8008304:	9304      	str	r3, [sp, #16]
 8008306:	9307      	str	r3, [sp, #28]
 8008308:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800830c:	931a      	str	r3, [sp, #104]	@ 0x68
 800830e:	4654      	mov	r4, sl
 8008310:	2205      	movs	r2, #5
 8008312:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008316:	4853      	ldr	r0, [pc, #332]	@ (8008464 <_vfiprintf_r+0x21c>)
 8008318:	f7f7 ffe2 	bl	80002e0 <memchr>
 800831c:	9a04      	ldr	r2, [sp, #16]
 800831e:	b9d8      	cbnz	r0, 8008358 <_vfiprintf_r+0x110>
 8008320:	06d1      	lsls	r1, r2, #27
 8008322:	bf44      	itt	mi
 8008324:	2320      	movmi	r3, #32
 8008326:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800832a:	0713      	lsls	r3, r2, #28
 800832c:	bf44      	itt	mi
 800832e:	232b      	movmi	r3, #43	@ 0x2b
 8008330:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008334:	f89a 3000 	ldrb.w	r3, [sl]
 8008338:	2b2a      	cmp	r3, #42	@ 0x2a
 800833a:	d015      	beq.n	8008368 <_vfiprintf_r+0x120>
 800833c:	9a07      	ldr	r2, [sp, #28]
 800833e:	4654      	mov	r4, sl
 8008340:	2000      	movs	r0, #0
 8008342:	f04f 0c0a 	mov.w	ip, #10
 8008346:	4621      	mov	r1, r4
 8008348:	f811 3b01 	ldrb.w	r3, [r1], #1
 800834c:	3b30      	subs	r3, #48	@ 0x30
 800834e:	2b09      	cmp	r3, #9
 8008350:	d94b      	bls.n	80083ea <_vfiprintf_r+0x1a2>
 8008352:	b1b0      	cbz	r0, 8008382 <_vfiprintf_r+0x13a>
 8008354:	9207      	str	r2, [sp, #28]
 8008356:	e014      	b.n	8008382 <_vfiprintf_r+0x13a>
 8008358:	eba0 0308 	sub.w	r3, r0, r8
 800835c:	fa09 f303 	lsl.w	r3, r9, r3
 8008360:	4313      	orrs	r3, r2
 8008362:	9304      	str	r3, [sp, #16]
 8008364:	46a2      	mov	sl, r4
 8008366:	e7d2      	b.n	800830e <_vfiprintf_r+0xc6>
 8008368:	9b03      	ldr	r3, [sp, #12]
 800836a:	1d19      	adds	r1, r3, #4
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	9103      	str	r1, [sp, #12]
 8008370:	2b00      	cmp	r3, #0
 8008372:	bfbb      	ittet	lt
 8008374:	425b      	neglt	r3, r3
 8008376:	f042 0202 	orrlt.w	r2, r2, #2
 800837a:	9307      	strge	r3, [sp, #28]
 800837c:	9307      	strlt	r3, [sp, #28]
 800837e:	bfb8      	it	lt
 8008380:	9204      	strlt	r2, [sp, #16]
 8008382:	7823      	ldrb	r3, [r4, #0]
 8008384:	2b2e      	cmp	r3, #46	@ 0x2e
 8008386:	d10a      	bne.n	800839e <_vfiprintf_r+0x156>
 8008388:	7863      	ldrb	r3, [r4, #1]
 800838a:	2b2a      	cmp	r3, #42	@ 0x2a
 800838c:	d132      	bne.n	80083f4 <_vfiprintf_r+0x1ac>
 800838e:	9b03      	ldr	r3, [sp, #12]
 8008390:	1d1a      	adds	r2, r3, #4
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	9203      	str	r2, [sp, #12]
 8008396:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800839a:	3402      	adds	r4, #2
 800839c:	9305      	str	r3, [sp, #20]
 800839e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008474 <_vfiprintf_r+0x22c>
 80083a2:	7821      	ldrb	r1, [r4, #0]
 80083a4:	2203      	movs	r2, #3
 80083a6:	4650      	mov	r0, sl
 80083a8:	f7f7 ff9a 	bl	80002e0 <memchr>
 80083ac:	b138      	cbz	r0, 80083be <_vfiprintf_r+0x176>
 80083ae:	9b04      	ldr	r3, [sp, #16]
 80083b0:	eba0 000a 	sub.w	r0, r0, sl
 80083b4:	2240      	movs	r2, #64	@ 0x40
 80083b6:	4082      	lsls	r2, r0
 80083b8:	4313      	orrs	r3, r2
 80083ba:	3401      	adds	r4, #1
 80083bc:	9304      	str	r3, [sp, #16]
 80083be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083c2:	4829      	ldr	r0, [pc, #164]	@ (8008468 <_vfiprintf_r+0x220>)
 80083c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80083c8:	2206      	movs	r2, #6
 80083ca:	f7f7 ff89 	bl	80002e0 <memchr>
 80083ce:	2800      	cmp	r0, #0
 80083d0:	d03f      	beq.n	8008452 <_vfiprintf_r+0x20a>
 80083d2:	4b26      	ldr	r3, [pc, #152]	@ (800846c <_vfiprintf_r+0x224>)
 80083d4:	bb1b      	cbnz	r3, 800841e <_vfiprintf_r+0x1d6>
 80083d6:	9b03      	ldr	r3, [sp, #12]
 80083d8:	3307      	adds	r3, #7
 80083da:	f023 0307 	bic.w	r3, r3, #7
 80083de:	3308      	adds	r3, #8
 80083e0:	9303      	str	r3, [sp, #12]
 80083e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083e4:	443b      	add	r3, r7
 80083e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80083e8:	e76a      	b.n	80082c0 <_vfiprintf_r+0x78>
 80083ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80083ee:	460c      	mov	r4, r1
 80083f0:	2001      	movs	r0, #1
 80083f2:	e7a8      	b.n	8008346 <_vfiprintf_r+0xfe>
 80083f4:	2300      	movs	r3, #0
 80083f6:	3401      	adds	r4, #1
 80083f8:	9305      	str	r3, [sp, #20]
 80083fa:	4619      	mov	r1, r3
 80083fc:	f04f 0c0a 	mov.w	ip, #10
 8008400:	4620      	mov	r0, r4
 8008402:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008406:	3a30      	subs	r2, #48	@ 0x30
 8008408:	2a09      	cmp	r2, #9
 800840a:	d903      	bls.n	8008414 <_vfiprintf_r+0x1cc>
 800840c:	2b00      	cmp	r3, #0
 800840e:	d0c6      	beq.n	800839e <_vfiprintf_r+0x156>
 8008410:	9105      	str	r1, [sp, #20]
 8008412:	e7c4      	b.n	800839e <_vfiprintf_r+0x156>
 8008414:	fb0c 2101 	mla	r1, ip, r1, r2
 8008418:	4604      	mov	r4, r0
 800841a:	2301      	movs	r3, #1
 800841c:	e7f0      	b.n	8008400 <_vfiprintf_r+0x1b8>
 800841e:	ab03      	add	r3, sp, #12
 8008420:	9300      	str	r3, [sp, #0]
 8008422:	462a      	mov	r2, r5
 8008424:	4b12      	ldr	r3, [pc, #72]	@ (8008470 <_vfiprintf_r+0x228>)
 8008426:	a904      	add	r1, sp, #16
 8008428:	4630      	mov	r0, r6
 800842a:	f3af 8000 	nop.w
 800842e:	4607      	mov	r7, r0
 8008430:	1c78      	adds	r0, r7, #1
 8008432:	d1d6      	bne.n	80083e2 <_vfiprintf_r+0x19a>
 8008434:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008436:	07d9      	lsls	r1, r3, #31
 8008438:	d405      	bmi.n	8008446 <_vfiprintf_r+0x1fe>
 800843a:	89ab      	ldrh	r3, [r5, #12]
 800843c:	059a      	lsls	r2, r3, #22
 800843e:	d402      	bmi.n	8008446 <_vfiprintf_r+0x1fe>
 8008440:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008442:	f7ff fddd 	bl	8008000 <__retarget_lock_release_recursive>
 8008446:	89ab      	ldrh	r3, [r5, #12]
 8008448:	065b      	lsls	r3, r3, #25
 800844a:	f53f af1f 	bmi.w	800828c <_vfiprintf_r+0x44>
 800844e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008450:	e71e      	b.n	8008290 <_vfiprintf_r+0x48>
 8008452:	ab03      	add	r3, sp, #12
 8008454:	9300      	str	r3, [sp, #0]
 8008456:	462a      	mov	r2, r5
 8008458:	4b05      	ldr	r3, [pc, #20]	@ (8008470 <_vfiprintf_r+0x228>)
 800845a:	a904      	add	r1, sp, #16
 800845c:	4630      	mov	r0, r6
 800845e:	f000 f879 	bl	8008554 <_printf_i>
 8008462:	e7e4      	b.n	800842e <_vfiprintf_r+0x1e6>
 8008464:	0800ab0c 	.word	0x0800ab0c
 8008468:	0800ab16 	.word	0x0800ab16
 800846c:	00000000 	.word	0x00000000
 8008470:	08008223 	.word	0x08008223
 8008474:	0800ab12 	.word	0x0800ab12

08008478 <_printf_common>:
 8008478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800847c:	4616      	mov	r6, r2
 800847e:	4698      	mov	r8, r3
 8008480:	688a      	ldr	r2, [r1, #8]
 8008482:	690b      	ldr	r3, [r1, #16]
 8008484:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008488:	4293      	cmp	r3, r2
 800848a:	bfb8      	it	lt
 800848c:	4613      	movlt	r3, r2
 800848e:	6033      	str	r3, [r6, #0]
 8008490:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008494:	4607      	mov	r7, r0
 8008496:	460c      	mov	r4, r1
 8008498:	b10a      	cbz	r2, 800849e <_printf_common+0x26>
 800849a:	3301      	adds	r3, #1
 800849c:	6033      	str	r3, [r6, #0]
 800849e:	6823      	ldr	r3, [r4, #0]
 80084a0:	0699      	lsls	r1, r3, #26
 80084a2:	bf42      	ittt	mi
 80084a4:	6833      	ldrmi	r3, [r6, #0]
 80084a6:	3302      	addmi	r3, #2
 80084a8:	6033      	strmi	r3, [r6, #0]
 80084aa:	6825      	ldr	r5, [r4, #0]
 80084ac:	f015 0506 	ands.w	r5, r5, #6
 80084b0:	d106      	bne.n	80084c0 <_printf_common+0x48>
 80084b2:	f104 0a19 	add.w	sl, r4, #25
 80084b6:	68e3      	ldr	r3, [r4, #12]
 80084b8:	6832      	ldr	r2, [r6, #0]
 80084ba:	1a9b      	subs	r3, r3, r2
 80084bc:	42ab      	cmp	r3, r5
 80084be:	dc26      	bgt.n	800850e <_printf_common+0x96>
 80084c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80084c4:	6822      	ldr	r2, [r4, #0]
 80084c6:	3b00      	subs	r3, #0
 80084c8:	bf18      	it	ne
 80084ca:	2301      	movne	r3, #1
 80084cc:	0692      	lsls	r2, r2, #26
 80084ce:	d42b      	bmi.n	8008528 <_printf_common+0xb0>
 80084d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80084d4:	4641      	mov	r1, r8
 80084d6:	4638      	mov	r0, r7
 80084d8:	47c8      	blx	r9
 80084da:	3001      	adds	r0, #1
 80084dc:	d01e      	beq.n	800851c <_printf_common+0xa4>
 80084de:	6823      	ldr	r3, [r4, #0]
 80084e0:	6922      	ldr	r2, [r4, #16]
 80084e2:	f003 0306 	and.w	r3, r3, #6
 80084e6:	2b04      	cmp	r3, #4
 80084e8:	bf02      	ittt	eq
 80084ea:	68e5      	ldreq	r5, [r4, #12]
 80084ec:	6833      	ldreq	r3, [r6, #0]
 80084ee:	1aed      	subeq	r5, r5, r3
 80084f0:	68a3      	ldr	r3, [r4, #8]
 80084f2:	bf0c      	ite	eq
 80084f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084f8:	2500      	movne	r5, #0
 80084fa:	4293      	cmp	r3, r2
 80084fc:	bfc4      	itt	gt
 80084fe:	1a9b      	subgt	r3, r3, r2
 8008500:	18ed      	addgt	r5, r5, r3
 8008502:	2600      	movs	r6, #0
 8008504:	341a      	adds	r4, #26
 8008506:	42b5      	cmp	r5, r6
 8008508:	d11a      	bne.n	8008540 <_printf_common+0xc8>
 800850a:	2000      	movs	r0, #0
 800850c:	e008      	b.n	8008520 <_printf_common+0xa8>
 800850e:	2301      	movs	r3, #1
 8008510:	4652      	mov	r2, sl
 8008512:	4641      	mov	r1, r8
 8008514:	4638      	mov	r0, r7
 8008516:	47c8      	blx	r9
 8008518:	3001      	adds	r0, #1
 800851a:	d103      	bne.n	8008524 <_printf_common+0xac>
 800851c:	f04f 30ff 	mov.w	r0, #4294967295
 8008520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008524:	3501      	adds	r5, #1
 8008526:	e7c6      	b.n	80084b6 <_printf_common+0x3e>
 8008528:	18e1      	adds	r1, r4, r3
 800852a:	1c5a      	adds	r2, r3, #1
 800852c:	2030      	movs	r0, #48	@ 0x30
 800852e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008532:	4422      	add	r2, r4
 8008534:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008538:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800853c:	3302      	adds	r3, #2
 800853e:	e7c7      	b.n	80084d0 <_printf_common+0x58>
 8008540:	2301      	movs	r3, #1
 8008542:	4622      	mov	r2, r4
 8008544:	4641      	mov	r1, r8
 8008546:	4638      	mov	r0, r7
 8008548:	47c8      	blx	r9
 800854a:	3001      	adds	r0, #1
 800854c:	d0e6      	beq.n	800851c <_printf_common+0xa4>
 800854e:	3601      	adds	r6, #1
 8008550:	e7d9      	b.n	8008506 <_printf_common+0x8e>
	...

08008554 <_printf_i>:
 8008554:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008558:	7e0f      	ldrb	r7, [r1, #24]
 800855a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800855c:	2f78      	cmp	r7, #120	@ 0x78
 800855e:	4691      	mov	r9, r2
 8008560:	4680      	mov	r8, r0
 8008562:	460c      	mov	r4, r1
 8008564:	469a      	mov	sl, r3
 8008566:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800856a:	d807      	bhi.n	800857c <_printf_i+0x28>
 800856c:	2f62      	cmp	r7, #98	@ 0x62
 800856e:	d80a      	bhi.n	8008586 <_printf_i+0x32>
 8008570:	2f00      	cmp	r7, #0
 8008572:	f000 80d1 	beq.w	8008718 <_printf_i+0x1c4>
 8008576:	2f58      	cmp	r7, #88	@ 0x58
 8008578:	f000 80b8 	beq.w	80086ec <_printf_i+0x198>
 800857c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008580:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008584:	e03a      	b.n	80085fc <_printf_i+0xa8>
 8008586:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800858a:	2b15      	cmp	r3, #21
 800858c:	d8f6      	bhi.n	800857c <_printf_i+0x28>
 800858e:	a101      	add	r1, pc, #4	@ (adr r1, 8008594 <_printf_i+0x40>)
 8008590:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008594:	080085ed 	.word	0x080085ed
 8008598:	08008601 	.word	0x08008601
 800859c:	0800857d 	.word	0x0800857d
 80085a0:	0800857d 	.word	0x0800857d
 80085a4:	0800857d 	.word	0x0800857d
 80085a8:	0800857d 	.word	0x0800857d
 80085ac:	08008601 	.word	0x08008601
 80085b0:	0800857d 	.word	0x0800857d
 80085b4:	0800857d 	.word	0x0800857d
 80085b8:	0800857d 	.word	0x0800857d
 80085bc:	0800857d 	.word	0x0800857d
 80085c0:	080086ff 	.word	0x080086ff
 80085c4:	0800862b 	.word	0x0800862b
 80085c8:	080086b9 	.word	0x080086b9
 80085cc:	0800857d 	.word	0x0800857d
 80085d0:	0800857d 	.word	0x0800857d
 80085d4:	08008721 	.word	0x08008721
 80085d8:	0800857d 	.word	0x0800857d
 80085dc:	0800862b 	.word	0x0800862b
 80085e0:	0800857d 	.word	0x0800857d
 80085e4:	0800857d 	.word	0x0800857d
 80085e8:	080086c1 	.word	0x080086c1
 80085ec:	6833      	ldr	r3, [r6, #0]
 80085ee:	1d1a      	adds	r2, r3, #4
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	6032      	str	r2, [r6, #0]
 80085f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80085fc:	2301      	movs	r3, #1
 80085fe:	e09c      	b.n	800873a <_printf_i+0x1e6>
 8008600:	6833      	ldr	r3, [r6, #0]
 8008602:	6820      	ldr	r0, [r4, #0]
 8008604:	1d19      	adds	r1, r3, #4
 8008606:	6031      	str	r1, [r6, #0]
 8008608:	0606      	lsls	r6, r0, #24
 800860a:	d501      	bpl.n	8008610 <_printf_i+0xbc>
 800860c:	681d      	ldr	r5, [r3, #0]
 800860e:	e003      	b.n	8008618 <_printf_i+0xc4>
 8008610:	0645      	lsls	r5, r0, #25
 8008612:	d5fb      	bpl.n	800860c <_printf_i+0xb8>
 8008614:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008618:	2d00      	cmp	r5, #0
 800861a:	da03      	bge.n	8008624 <_printf_i+0xd0>
 800861c:	232d      	movs	r3, #45	@ 0x2d
 800861e:	426d      	negs	r5, r5
 8008620:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008624:	4858      	ldr	r0, [pc, #352]	@ (8008788 <_printf_i+0x234>)
 8008626:	230a      	movs	r3, #10
 8008628:	e011      	b.n	800864e <_printf_i+0xfa>
 800862a:	6821      	ldr	r1, [r4, #0]
 800862c:	6833      	ldr	r3, [r6, #0]
 800862e:	0608      	lsls	r0, r1, #24
 8008630:	f853 5b04 	ldr.w	r5, [r3], #4
 8008634:	d402      	bmi.n	800863c <_printf_i+0xe8>
 8008636:	0649      	lsls	r1, r1, #25
 8008638:	bf48      	it	mi
 800863a:	b2ad      	uxthmi	r5, r5
 800863c:	2f6f      	cmp	r7, #111	@ 0x6f
 800863e:	4852      	ldr	r0, [pc, #328]	@ (8008788 <_printf_i+0x234>)
 8008640:	6033      	str	r3, [r6, #0]
 8008642:	bf14      	ite	ne
 8008644:	230a      	movne	r3, #10
 8008646:	2308      	moveq	r3, #8
 8008648:	2100      	movs	r1, #0
 800864a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800864e:	6866      	ldr	r6, [r4, #4]
 8008650:	60a6      	str	r6, [r4, #8]
 8008652:	2e00      	cmp	r6, #0
 8008654:	db05      	blt.n	8008662 <_printf_i+0x10e>
 8008656:	6821      	ldr	r1, [r4, #0]
 8008658:	432e      	orrs	r6, r5
 800865a:	f021 0104 	bic.w	r1, r1, #4
 800865e:	6021      	str	r1, [r4, #0]
 8008660:	d04b      	beq.n	80086fa <_printf_i+0x1a6>
 8008662:	4616      	mov	r6, r2
 8008664:	fbb5 f1f3 	udiv	r1, r5, r3
 8008668:	fb03 5711 	mls	r7, r3, r1, r5
 800866c:	5dc7      	ldrb	r7, [r0, r7]
 800866e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008672:	462f      	mov	r7, r5
 8008674:	42bb      	cmp	r3, r7
 8008676:	460d      	mov	r5, r1
 8008678:	d9f4      	bls.n	8008664 <_printf_i+0x110>
 800867a:	2b08      	cmp	r3, #8
 800867c:	d10b      	bne.n	8008696 <_printf_i+0x142>
 800867e:	6823      	ldr	r3, [r4, #0]
 8008680:	07df      	lsls	r7, r3, #31
 8008682:	d508      	bpl.n	8008696 <_printf_i+0x142>
 8008684:	6923      	ldr	r3, [r4, #16]
 8008686:	6861      	ldr	r1, [r4, #4]
 8008688:	4299      	cmp	r1, r3
 800868a:	bfde      	ittt	le
 800868c:	2330      	movle	r3, #48	@ 0x30
 800868e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008692:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008696:	1b92      	subs	r2, r2, r6
 8008698:	6122      	str	r2, [r4, #16]
 800869a:	f8cd a000 	str.w	sl, [sp]
 800869e:	464b      	mov	r3, r9
 80086a0:	aa03      	add	r2, sp, #12
 80086a2:	4621      	mov	r1, r4
 80086a4:	4640      	mov	r0, r8
 80086a6:	f7ff fee7 	bl	8008478 <_printf_common>
 80086aa:	3001      	adds	r0, #1
 80086ac:	d14a      	bne.n	8008744 <_printf_i+0x1f0>
 80086ae:	f04f 30ff 	mov.w	r0, #4294967295
 80086b2:	b004      	add	sp, #16
 80086b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086b8:	6823      	ldr	r3, [r4, #0]
 80086ba:	f043 0320 	orr.w	r3, r3, #32
 80086be:	6023      	str	r3, [r4, #0]
 80086c0:	4832      	ldr	r0, [pc, #200]	@ (800878c <_printf_i+0x238>)
 80086c2:	2778      	movs	r7, #120	@ 0x78
 80086c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80086c8:	6823      	ldr	r3, [r4, #0]
 80086ca:	6831      	ldr	r1, [r6, #0]
 80086cc:	061f      	lsls	r7, r3, #24
 80086ce:	f851 5b04 	ldr.w	r5, [r1], #4
 80086d2:	d402      	bmi.n	80086da <_printf_i+0x186>
 80086d4:	065f      	lsls	r7, r3, #25
 80086d6:	bf48      	it	mi
 80086d8:	b2ad      	uxthmi	r5, r5
 80086da:	6031      	str	r1, [r6, #0]
 80086dc:	07d9      	lsls	r1, r3, #31
 80086de:	bf44      	itt	mi
 80086e0:	f043 0320 	orrmi.w	r3, r3, #32
 80086e4:	6023      	strmi	r3, [r4, #0]
 80086e6:	b11d      	cbz	r5, 80086f0 <_printf_i+0x19c>
 80086e8:	2310      	movs	r3, #16
 80086ea:	e7ad      	b.n	8008648 <_printf_i+0xf4>
 80086ec:	4826      	ldr	r0, [pc, #152]	@ (8008788 <_printf_i+0x234>)
 80086ee:	e7e9      	b.n	80086c4 <_printf_i+0x170>
 80086f0:	6823      	ldr	r3, [r4, #0]
 80086f2:	f023 0320 	bic.w	r3, r3, #32
 80086f6:	6023      	str	r3, [r4, #0]
 80086f8:	e7f6      	b.n	80086e8 <_printf_i+0x194>
 80086fa:	4616      	mov	r6, r2
 80086fc:	e7bd      	b.n	800867a <_printf_i+0x126>
 80086fe:	6833      	ldr	r3, [r6, #0]
 8008700:	6825      	ldr	r5, [r4, #0]
 8008702:	6961      	ldr	r1, [r4, #20]
 8008704:	1d18      	adds	r0, r3, #4
 8008706:	6030      	str	r0, [r6, #0]
 8008708:	062e      	lsls	r6, r5, #24
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	d501      	bpl.n	8008712 <_printf_i+0x1be>
 800870e:	6019      	str	r1, [r3, #0]
 8008710:	e002      	b.n	8008718 <_printf_i+0x1c4>
 8008712:	0668      	lsls	r0, r5, #25
 8008714:	d5fb      	bpl.n	800870e <_printf_i+0x1ba>
 8008716:	8019      	strh	r1, [r3, #0]
 8008718:	2300      	movs	r3, #0
 800871a:	6123      	str	r3, [r4, #16]
 800871c:	4616      	mov	r6, r2
 800871e:	e7bc      	b.n	800869a <_printf_i+0x146>
 8008720:	6833      	ldr	r3, [r6, #0]
 8008722:	1d1a      	adds	r2, r3, #4
 8008724:	6032      	str	r2, [r6, #0]
 8008726:	681e      	ldr	r6, [r3, #0]
 8008728:	6862      	ldr	r2, [r4, #4]
 800872a:	2100      	movs	r1, #0
 800872c:	4630      	mov	r0, r6
 800872e:	f7f7 fdd7 	bl	80002e0 <memchr>
 8008732:	b108      	cbz	r0, 8008738 <_printf_i+0x1e4>
 8008734:	1b80      	subs	r0, r0, r6
 8008736:	6060      	str	r0, [r4, #4]
 8008738:	6863      	ldr	r3, [r4, #4]
 800873a:	6123      	str	r3, [r4, #16]
 800873c:	2300      	movs	r3, #0
 800873e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008742:	e7aa      	b.n	800869a <_printf_i+0x146>
 8008744:	6923      	ldr	r3, [r4, #16]
 8008746:	4632      	mov	r2, r6
 8008748:	4649      	mov	r1, r9
 800874a:	4640      	mov	r0, r8
 800874c:	47d0      	blx	sl
 800874e:	3001      	adds	r0, #1
 8008750:	d0ad      	beq.n	80086ae <_printf_i+0x15a>
 8008752:	6823      	ldr	r3, [r4, #0]
 8008754:	079b      	lsls	r3, r3, #30
 8008756:	d413      	bmi.n	8008780 <_printf_i+0x22c>
 8008758:	68e0      	ldr	r0, [r4, #12]
 800875a:	9b03      	ldr	r3, [sp, #12]
 800875c:	4298      	cmp	r0, r3
 800875e:	bfb8      	it	lt
 8008760:	4618      	movlt	r0, r3
 8008762:	e7a6      	b.n	80086b2 <_printf_i+0x15e>
 8008764:	2301      	movs	r3, #1
 8008766:	4632      	mov	r2, r6
 8008768:	4649      	mov	r1, r9
 800876a:	4640      	mov	r0, r8
 800876c:	47d0      	blx	sl
 800876e:	3001      	adds	r0, #1
 8008770:	d09d      	beq.n	80086ae <_printf_i+0x15a>
 8008772:	3501      	adds	r5, #1
 8008774:	68e3      	ldr	r3, [r4, #12]
 8008776:	9903      	ldr	r1, [sp, #12]
 8008778:	1a5b      	subs	r3, r3, r1
 800877a:	42ab      	cmp	r3, r5
 800877c:	dcf2      	bgt.n	8008764 <_printf_i+0x210>
 800877e:	e7eb      	b.n	8008758 <_printf_i+0x204>
 8008780:	2500      	movs	r5, #0
 8008782:	f104 0619 	add.w	r6, r4, #25
 8008786:	e7f5      	b.n	8008774 <_printf_i+0x220>
 8008788:	0800ab1d 	.word	0x0800ab1d
 800878c:	0800ab2e 	.word	0x0800ab2e

08008790 <__sflush_r>:
 8008790:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008798:	0716      	lsls	r6, r2, #28
 800879a:	4605      	mov	r5, r0
 800879c:	460c      	mov	r4, r1
 800879e:	d454      	bmi.n	800884a <__sflush_r+0xba>
 80087a0:	684b      	ldr	r3, [r1, #4]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	dc02      	bgt.n	80087ac <__sflush_r+0x1c>
 80087a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	dd48      	ble.n	800883e <__sflush_r+0xae>
 80087ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80087ae:	2e00      	cmp	r6, #0
 80087b0:	d045      	beq.n	800883e <__sflush_r+0xae>
 80087b2:	2300      	movs	r3, #0
 80087b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80087b8:	682f      	ldr	r7, [r5, #0]
 80087ba:	6a21      	ldr	r1, [r4, #32]
 80087bc:	602b      	str	r3, [r5, #0]
 80087be:	d030      	beq.n	8008822 <__sflush_r+0x92>
 80087c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80087c2:	89a3      	ldrh	r3, [r4, #12]
 80087c4:	0759      	lsls	r1, r3, #29
 80087c6:	d505      	bpl.n	80087d4 <__sflush_r+0x44>
 80087c8:	6863      	ldr	r3, [r4, #4]
 80087ca:	1ad2      	subs	r2, r2, r3
 80087cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80087ce:	b10b      	cbz	r3, 80087d4 <__sflush_r+0x44>
 80087d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80087d2:	1ad2      	subs	r2, r2, r3
 80087d4:	2300      	movs	r3, #0
 80087d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80087d8:	6a21      	ldr	r1, [r4, #32]
 80087da:	4628      	mov	r0, r5
 80087dc:	47b0      	blx	r6
 80087de:	1c43      	adds	r3, r0, #1
 80087e0:	89a3      	ldrh	r3, [r4, #12]
 80087e2:	d106      	bne.n	80087f2 <__sflush_r+0x62>
 80087e4:	6829      	ldr	r1, [r5, #0]
 80087e6:	291d      	cmp	r1, #29
 80087e8:	d82b      	bhi.n	8008842 <__sflush_r+0xb2>
 80087ea:	4a2a      	ldr	r2, [pc, #168]	@ (8008894 <__sflush_r+0x104>)
 80087ec:	40ca      	lsrs	r2, r1
 80087ee:	07d6      	lsls	r6, r2, #31
 80087f0:	d527      	bpl.n	8008842 <__sflush_r+0xb2>
 80087f2:	2200      	movs	r2, #0
 80087f4:	6062      	str	r2, [r4, #4]
 80087f6:	04d9      	lsls	r1, r3, #19
 80087f8:	6922      	ldr	r2, [r4, #16]
 80087fa:	6022      	str	r2, [r4, #0]
 80087fc:	d504      	bpl.n	8008808 <__sflush_r+0x78>
 80087fe:	1c42      	adds	r2, r0, #1
 8008800:	d101      	bne.n	8008806 <__sflush_r+0x76>
 8008802:	682b      	ldr	r3, [r5, #0]
 8008804:	b903      	cbnz	r3, 8008808 <__sflush_r+0x78>
 8008806:	6560      	str	r0, [r4, #84]	@ 0x54
 8008808:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800880a:	602f      	str	r7, [r5, #0]
 800880c:	b1b9      	cbz	r1, 800883e <__sflush_r+0xae>
 800880e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008812:	4299      	cmp	r1, r3
 8008814:	d002      	beq.n	800881c <__sflush_r+0x8c>
 8008816:	4628      	mov	r0, r5
 8008818:	f7ff fbf4 	bl	8008004 <_free_r>
 800881c:	2300      	movs	r3, #0
 800881e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008820:	e00d      	b.n	800883e <__sflush_r+0xae>
 8008822:	2301      	movs	r3, #1
 8008824:	4628      	mov	r0, r5
 8008826:	47b0      	blx	r6
 8008828:	4602      	mov	r2, r0
 800882a:	1c50      	adds	r0, r2, #1
 800882c:	d1c9      	bne.n	80087c2 <__sflush_r+0x32>
 800882e:	682b      	ldr	r3, [r5, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d0c6      	beq.n	80087c2 <__sflush_r+0x32>
 8008834:	2b1d      	cmp	r3, #29
 8008836:	d001      	beq.n	800883c <__sflush_r+0xac>
 8008838:	2b16      	cmp	r3, #22
 800883a:	d11e      	bne.n	800887a <__sflush_r+0xea>
 800883c:	602f      	str	r7, [r5, #0]
 800883e:	2000      	movs	r0, #0
 8008840:	e022      	b.n	8008888 <__sflush_r+0xf8>
 8008842:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008846:	b21b      	sxth	r3, r3
 8008848:	e01b      	b.n	8008882 <__sflush_r+0xf2>
 800884a:	690f      	ldr	r7, [r1, #16]
 800884c:	2f00      	cmp	r7, #0
 800884e:	d0f6      	beq.n	800883e <__sflush_r+0xae>
 8008850:	0793      	lsls	r3, r2, #30
 8008852:	680e      	ldr	r6, [r1, #0]
 8008854:	bf08      	it	eq
 8008856:	694b      	ldreq	r3, [r1, #20]
 8008858:	600f      	str	r7, [r1, #0]
 800885a:	bf18      	it	ne
 800885c:	2300      	movne	r3, #0
 800885e:	eba6 0807 	sub.w	r8, r6, r7
 8008862:	608b      	str	r3, [r1, #8]
 8008864:	f1b8 0f00 	cmp.w	r8, #0
 8008868:	dde9      	ble.n	800883e <__sflush_r+0xae>
 800886a:	6a21      	ldr	r1, [r4, #32]
 800886c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800886e:	4643      	mov	r3, r8
 8008870:	463a      	mov	r2, r7
 8008872:	4628      	mov	r0, r5
 8008874:	47b0      	blx	r6
 8008876:	2800      	cmp	r0, #0
 8008878:	dc08      	bgt.n	800888c <__sflush_r+0xfc>
 800887a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800887e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008882:	81a3      	strh	r3, [r4, #12]
 8008884:	f04f 30ff 	mov.w	r0, #4294967295
 8008888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800888c:	4407      	add	r7, r0
 800888e:	eba8 0800 	sub.w	r8, r8, r0
 8008892:	e7e7      	b.n	8008864 <__sflush_r+0xd4>
 8008894:	20400001 	.word	0x20400001

08008898 <_fflush_r>:
 8008898:	b538      	push	{r3, r4, r5, lr}
 800889a:	690b      	ldr	r3, [r1, #16]
 800889c:	4605      	mov	r5, r0
 800889e:	460c      	mov	r4, r1
 80088a0:	b913      	cbnz	r3, 80088a8 <_fflush_r+0x10>
 80088a2:	2500      	movs	r5, #0
 80088a4:	4628      	mov	r0, r5
 80088a6:	bd38      	pop	{r3, r4, r5, pc}
 80088a8:	b118      	cbz	r0, 80088b2 <_fflush_r+0x1a>
 80088aa:	6a03      	ldr	r3, [r0, #32]
 80088ac:	b90b      	cbnz	r3, 80088b2 <_fflush_r+0x1a>
 80088ae:	f7ff faa1 	bl	8007df4 <__sinit>
 80088b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d0f3      	beq.n	80088a2 <_fflush_r+0xa>
 80088ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80088bc:	07d0      	lsls	r0, r2, #31
 80088be:	d404      	bmi.n	80088ca <_fflush_r+0x32>
 80088c0:	0599      	lsls	r1, r3, #22
 80088c2:	d402      	bmi.n	80088ca <_fflush_r+0x32>
 80088c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088c6:	f7ff fb9a 	bl	8007ffe <__retarget_lock_acquire_recursive>
 80088ca:	4628      	mov	r0, r5
 80088cc:	4621      	mov	r1, r4
 80088ce:	f7ff ff5f 	bl	8008790 <__sflush_r>
 80088d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80088d4:	07da      	lsls	r2, r3, #31
 80088d6:	4605      	mov	r5, r0
 80088d8:	d4e4      	bmi.n	80088a4 <_fflush_r+0xc>
 80088da:	89a3      	ldrh	r3, [r4, #12]
 80088dc:	059b      	lsls	r3, r3, #22
 80088de:	d4e1      	bmi.n	80088a4 <_fflush_r+0xc>
 80088e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088e2:	f7ff fb8d 	bl	8008000 <__retarget_lock_release_recursive>
 80088e6:	e7dd      	b.n	80088a4 <_fflush_r+0xc>

080088e8 <__swbuf_r>:
 80088e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ea:	460e      	mov	r6, r1
 80088ec:	4614      	mov	r4, r2
 80088ee:	4605      	mov	r5, r0
 80088f0:	b118      	cbz	r0, 80088fa <__swbuf_r+0x12>
 80088f2:	6a03      	ldr	r3, [r0, #32]
 80088f4:	b90b      	cbnz	r3, 80088fa <__swbuf_r+0x12>
 80088f6:	f7ff fa7d 	bl	8007df4 <__sinit>
 80088fa:	69a3      	ldr	r3, [r4, #24]
 80088fc:	60a3      	str	r3, [r4, #8]
 80088fe:	89a3      	ldrh	r3, [r4, #12]
 8008900:	071a      	lsls	r2, r3, #28
 8008902:	d501      	bpl.n	8008908 <__swbuf_r+0x20>
 8008904:	6923      	ldr	r3, [r4, #16]
 8008906:	b943      	cbnz	r3, 800891a <__swbuf_r+0x32>
 8008908:	4621      	mov	r1, r4
 800890a:	4628      	mov	r0, r5
 800890c:	f000 f82a 	bl	8008964 <__swsetup_r>
 8008910:	b118      	cbz	r0, 800891a <__swbuf_r+0x32>
 8008912:	f04f 37ff 	mov.w	r7, #4294967295
 8008916:	4638      	mov	r0, r7
 8008918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800891a:	6823      	ldr	r3, [r4, #0]
 800891c:	6922      	ldr	r2, [r4, #16]
 800891e:	1a98      	subs	r0, r3, r2
 8008920:	6963      	ldr	r3, [r4, #20]
 8008922:	b2f6      	uxtb	r6, r6
 8008924:	4283      	cmp	r3, r0
 8008926:	4637      	mov	r7, r6
 8008928:	dc05      	bgt.n	8008936 <__swbuf_r+0x4e>
 800892a:	4621      	mov	r1, r4
 800892c:	4628      	mov	r0, r5
 800892e:	f7ff ffb3 	bl	8008898 <_fflush_r>
 8008932:	2800      	cmp	r0, #0
 8008934:	d1ed      	bne.n	8008912 <__swbuf_r+0x2a>
 8008936:	68a3      	ldr	r3, [r4, #8]
 8008938:	3b01      	subs	r3, #1
 800893a:	60a3      	str	r3, [r4, #8]
 800893c:	6823      	ldr	r3, [r4, #0]
 800893e:	1c5a      	adds	r2, r3, #1
 8008940:	6022      	str	r2, [r4, #0]
 8008942:	701e      	strb	r6, [r3, #0]
 8008944:	6962      	ldr	r2, [r4, #20]
 8008946:	1c43      	adds	r3, r0, #1
 8008948:	429a      	cmp	r2, r3
 800894a:	d004      	beq.n	8008956 <__swbuf_r+0x6e>
 800894c:	89a3      	ldrh	r3, [r4, #12]
 800894e:	07db      	lsls	r3, r3, #31
 8008950:	d5e1      	bpl.n	8008916 <__swbuf_r+0x2e>
 8008952:	2e0a      	cmp	r6, #10
 8008954:	d1df      	bne.n	8008916 <__swbuf_r+0x2e>
 8008956:	4621      	mov	r1, r4
 8008958:	4628      	mov	r0, r5
 800895a:	f7ff ff9d 	bl	8008898 <_fflush_r>
 800895e:	2800      	cmp	r0, #0
 8008960:	d0d9      	beq.n	8008916 <__swbuf_r+0x2e>
 8008962:	e7d6      	b.n	8008912 <__swbuf_r+0x2a>

08008964 <__swsetup_r>:
 8008964:	b538      	push	{r3, r4, r5, lr}
 8008966:	4b29      	ldr	r3, [pc, #164]	@ (8008a0c <__swsetup_r+0xa8>)
 8008968:	4605      	mov	r5, r0
 800896a:	6818      	ldr	r0, [r3, #0]
 800896c:	460c      	mov	r4, r1
 800896e:	b118      	cbz	r0, 8008978 <__swsetup_r+0x14>
 8008970:	6a03      	ldr	r3, [r0, #32]
 8008972:	b90b      	cbnz	r3, 8008978 <__swsetup_r+0x14>
 8008974:	f7ff fa3e 	bl	8007df4 <__sinit>
 8008978:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800897c:	0719      	lsls	r1, r3, #28
 800897e:	d422      	bmi.n	80089c6 <__swsetup_r+0x62>
 8008980:	06da      	lsls	r2, r3, #27
 8008982:	d407      	bmi.n	8008994 <__swsetup_r+0x30>
 8008984:	2209      	movs	r2, #9
 8008986:	602a      	str	r2, [r5, #0]
 8008988:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800898c:	81a3      	strh	r3, [r4, #12]
 800898e:	f04f 30ff 	mov.w	r0, #4294967295
 8008992:	e033      	b.n	80089fc <__swsetup_r+0x98>
 8008994:	0758      	lsls	r0, r3, #29
 8008996:	d512      	bpl.n	80089be <__swsetup_r+0x5a>
 8008998:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800899a:	b141      	cbz	r1, 80089ae <__swsetup_r+0x4a>
 800899c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80089a0:	4299      	cmp	r1, r3
 80089a2:	d002      	beq.n	80089aa <__swsetup_r+0x46>
 80089a4:	4628      	mov	r0, r5
 80089a6:	f7ff fb2d 	bl	8008004 <_free_r>
 80089aa:	2300      	movs	r3, #0
 80089ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80089ae:	89a3      	ldrh	r3, [r4, #12]
 80089b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80089b4:	81a3      	strh	r3, [r4, #12]
 80089b6:	2300      	movs	r3, #0
 80089b8:	6063      	str	r3, [r4, #4]
 80089ba:	6923      	ldr	r3, [r4, #16]
 80089bc:	6023      	str	r3, [r4, #0]
 80089be:	89a3      	ldrh	r3, [r4, #12]
 80089c0:	f043 0308 	orr.w	r3, r3, #8
 80089c4:	81a3      	strh	r3, [r4, #12]
 80089c6:	6923      	ldr	r3, [r4, #16]
 80089c8:	b94b      	cbnz	r3, 80089de <__swsetup_r+0x7a>
 80089ca:	89a3      	ldrh	r3, [r4, #12]
 80089cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80089d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089d4:	d003      	beq.n	80089de <__swsetup_r+0x7a>
 80089d6:	4621      	mov	r1, r4
 80089d8:	4628      	mov	r0, r5
 80089da:	f000 f84f 	bl	8008a7c <__smakebuf_r>
 80089de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089e2:	f013 0201 	ands.w	r2, r3, #1
 80089e6:	d00a      	beq.n	80089fe <__swsetup_r+0x9a>
 80089e8:	2200      	movs	r2, #0
 80089ea:	60a2      	str	r2, [r4, #8]
 80089ec:	6962      	ldr	r2, [r4, #20]
 80089ee:	4252      	negs	r2, r2
 80089f0:	61a2      	str	r2, [r4, #24]
 80089f2:	6922      	ldr	r2, [r4, #16]
 80089f4:	b942      	cbnz	r2, 8008a08 <__swsetup_r+0xa4>
 80089f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80089fa:	d1c5      	bne.n	8008988 <__swsetup_r+0x24>
 80089fc:	bd38      	pop	{r3, r4, r5, pc}
 80089fe:	0799      	lsls	r1, r3, #30
 8008a00:	bf58      	it	pl
 8008a02:	6962      	ldrpl	r2, [r4, #20]
 8008a04:	60a2      	str	r2, [r4, #8]
 8008a06:	e7f4      	b.n	80089f2 <__swsetup_r+0x8e>
 8008a08:	2000      	movs	r0, #0
 8008a0a:	e7f7      	b.n	80089fc <__swsetup_r+0x98>
 8008a0c:	24000038 	.word	0x24000038

08008a10 <_sbrk_r>:
 8008a10:	b538      	push	{r3, r4, r5, lr}
 8008a12:	4d06      	ldr	r5, [pc, #24]	@ (8008a2c <_sbrk_r+0x1c>)
 8008a14:	2300      	movs	r3, #0
 8008a16:	4604      	mov	r4, r0
 8008a18:	4608      	mov	r0, r1
 8008a1a:	602b      	str	r3, [r5, #0]
 8008a1c:	f7f8 fc80 	bl	8001320 <_sbrk>
 8008a20:	1c43      	adds	r3, r0, #1
 8008a22:	d102      	bne.n	8008a2a <_sbrk_r+0x1a>
 8008a24:	682b      	ldr	r3, [r5, #0]
 8008a26:	b103      	cbz	r3, 8008a2a <_sbrk_r+0x1a>
 8008a28:	6023      	str	r3, [r4, #0]
 8008a2a:	bd38      	pop	{r3, r4, r5, pc}
 8008a2c:	24000324 	.word	0x24000324

08008a30 <__swhatbuf_r>:
 8008a30:	b570      	push	{r4, r5, r6, lr}
 8008a32:	460c      	mov	r4, r1
 8008a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a38:	2900      	cmp	r1, #0
 8008a3a:	b096      	sub	sp, #88	@ 0x58
 8008a3c:	4615      	mov	r5, r2
 8008a3e:	461e      	mov	r6, r3
 8008a40:	da0d      	bge.n	8008a5e <__swhatbuf_r+0x2e>
 8008a42:	89a3      	ldrh	r3, [r4, #12]
 8008a44:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008a48:	f04f 0100 	mov.w	r1, #0
 8008a4c:	bf14      	ite	ne
 8008a4e:	2340      	movne	r3, #64	@ 0x40
 8008a50:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008a54:	2000      	movs	r0, #0
 8008a56:	6031      	str	r1, [r6, #0]
 8008a58:	602b      	str	r3, [r5, #0]
 8008a5a:	b016      	add	sp, #88	@ 0x58
 8008a5c:	bd70      	pop	{r4, r5, r6, pc}
 8008a5e:	466a      	mov	r2, sp
 8008a60:	f000 f848 	bl	8008af4 <_fstat_r>
 8008a64:	2800      	cmp	r0, #0
 8008a66:	dbec      	blt.n	8008a42 <__swhatbuf_r+0x12>
 8008a68:	9901      	ldr	r1, [sp, #4]
 8008a6a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008a6e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008a72:	4259      	negs	r1, r3
 8008a74:	4159      	adcs	r1, r3
 8008a76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a7a:	e7eb      	b.n	8008a54 <__swhatbuf_r+0x24>

08008a7c <__smakebuf_r>:
 8008a7c:	898b      	ldrh	r3, [r1, #12]
 8008a7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a80:	079d      	lsls	r5, r3, #30
 8008a82:	4606      	mov	r6, r0
 8008a84:	460c      	mov	r4, r1
 8008a86:	d507      	bpl.n	8008a98 <__smakebuf_r+0x1c>
 8008a88:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008a8c:	6023      	str	r3, [r4, #0]
 8008a8e:	6123      	str	r3, [r4, #16]
 8008a90:	2301      	movs	r3, #1
 8008a92:	6163      	str	r3, [r4, #20]
 8008a94:	b003      	add	sp, #12
 8008a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a98:	ab01      	add	r3, sp, #4
 8008a9a:	466a      	mov	r2, sp
 8008a9c:	f7ff ffc8 	bl	8008a30 <__swhatbuf_r>
 8008aa0:	9f00      	ldr	r7, [sp, #0]
 8008aa2:	4605      	mov	r5, r0
 8008aa4:	4639      	mov	r1, r7
 8008aa6:	4630      	mov	r0, r6
 8008aa8:	f7ff fb18 	bl	80080dc <_malloc_r>
 8008aac:	b948      	cbnz	r0, 8008ac2 <__smakebuf_r+0x46>
 8008aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ab2:	059a      	lsls	r2, r3, #22
 8008ab4:	d4ee      	bmi.n	8008a94 <__smakebuf_r+0x18>
 8008ab6:	f023 0303 	bic.w	r3, r3, #3
 8008aba:	f043 0302 	orr.w	r3, r3, #2
 8008abe:	81a3      	strh	r3, [r4, #12]
 8008ac0:	e7e2      	b.n	8008a88 <__smakebuf_r+0xc>
 8008ac2:	89a3      	ldrh	r3, [r4, #12]
 8008ac4:	6020      	str	r0, [r4, #0]
 8008ac6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008aca:	81a3      	strh	r3, [r4, #12]
 8008acc:	9b01      	ldr	r3, [sp, #4]
 8008ace:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008ad2:	b15b      	cbz	r3, 8008aec <__smakebuf_r+0x70>
 8008ad4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ad8:	4630      	mov	r0, r6
 8008ada:	f000 f81d 	bl	8008b18 <_isatty_r>
 8008ade:	b128      	cbz	r0, 8008aec <__smakebuf_r+0x70>
 8008ae0:	89a3      	ldrh	r3, [r4, #12]
 8008ae2:	f023 0303 	bic.w	r3, r3, #3
 8008ae6:	f043 0301 	orr.w	r3, r3, #1
 8008aea:	81a3      	strh	r3, [r4, #12]
 8008aec:	89a3      	ldrh	r3, [r4, #12]
 8008aee:	431d      	orrs	r5, r3
 8008af0:	81a5      	strh	r5, [r4, #12]
 8008af2:	e7cf      	b.n	8008a94 <__smakebuf_r+0x18>

08008af4 <_fstat_r>:
 8008af4:	b538      	push	{r3, r4, r5, lr}
 8008af6:	4d07      	ldr	r5, [pc, #28]	@ (8008b14 <_fstat_r+0x20>)
 8008af8:	2300      	movs	r3, #0
 8008afa:	4604      	mov	r4, r0
 8008afc:	4608      	mov	r0, r1
 8008afe:	4611      	mov	r1, r2
 8008b00:	602b      	str	r3, [r5, #0]
 8008b02:	f7f8 fbe5 	bl	80012d0 <_fstat>
 8008b06:	1c43      	adds	r3, r0, #1
 8008b08:	d102      	bne.n	8008b10 <_fstat_r+0x1c>
 8008b0a:	682b      	ldr	r3, [r5, #0]
 8008b0c:	b103      	cbz	r3, 8008b10 <_fstat_r+0x1c>
 8008b0e:	6023      	str	r3, [r4, #0]
 8008b10:	bd38      	pop	{r3, r4, r5, pc}
 8008b12:	bf00      	nop
 8008b14:	24000324 	.word	0x24000324

08008b18 <_isatty_r>:
 8008b18:	b538      	push	{r3, r4, r5, lr}
 8008b1a:	4d06      	ldr	r5, [pc, #24]	@ (8008b34 <_isatty_r+0x1c>)
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	4604      	mov	r4, r0
 8008b20:	4608      	mov	r0, r1
 8008b22:	602b      	str	r3, [r5, #0]
 8008b24:	f7f8 fbe4 	bl	80012f0 <_isatty>
 8008b28:	1c43      	adds	r3, r0, #1
 8008b2a:	d102      	bne.n	8008b32 <_isatty_r+0x1a>
 8008b2c:	682b      	ldr	r3, [r5, #0]
 8008b2e:	b103      	cbz	r3, 8008b32 <_isatty_r+0x1a>
 8008b30:	6023      	str	r3, [r4, #0]
 8008b32:	bd38      	pop	{r3, r4, r5, pc}
 8008b34:	24000324 	.word	0x24000324

08008b38 <_init>:
 8008b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b3a:	bf00      	nop
 8008b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b3e:	bc08      	pop	{r3}
 8008b40:	469e      	mov	lr, r3
 8008b42:	4770      	bx	lr

08008b44 <_fini>:
 8008b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b46:	bf00      	nop
 8008b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b4a:	bc08      	pop	{r3}
 8008b4c:	469e      	mov	lr, r3
 8008b4e:	4770      	bx	lr
