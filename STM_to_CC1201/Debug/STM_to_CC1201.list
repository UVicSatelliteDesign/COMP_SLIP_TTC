
STM_to_CC1201.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009358  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001830  080095f8  080095f8  0000a5f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ae28  0800ae28  0000be28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ae30  0800ae30  0000be30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ae34  0800ae34  0000be34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  24000000  0800ae38  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002ac  24000088  0800aec0  0000c088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000334  0800aec0  0000c334  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c088  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015aa7  00000000  00000000  0000c0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c87  00000000  00000000  00021b5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f08  00000000  00000000  000247e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b7e  00000000  00000000  000256f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000384f5  00000000  00000000  0002626e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000162c1  00000000  00000000  0005e763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015ef63  00000000  00000000  00074a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d3987  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000455c  00000000  00000000  001d39cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006a  00000000  00000000  001d7f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080095e0 	.word	0x080095e0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	080095e0 	.word	0x080095e0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <CC1201_SoftReset>:

// Read bit for register addresses
#define CC1201_READ_BIT                 0x80

HAL_StatusTypeDef CC1201_SoftReset(uint8_t *status_byte)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    printf("[DEBUG] Entered CC1201_SoftReset function\n\r");
 80006b4:	4809      	ldr	r0, [pc, #36]	@ (80006dc <CC1201_SoftReset+0x30>)
 80006b6:	f008 f927 	bl	8008908 <iprintf>
    HAL_StatusTypeDef result = CC1201_SendStrobe(CC1201_STROBE_SOFT_RESET, status_byte);
 80006ba:	6879      	ldr	r1, [r7, #4]
 80006bc:	2030      	movs	r0, #48	@ 0x30
 80006be:	f000 faab 	bl	8000c18 <CC1201_SendStrobe>
 80006c2:	4603      	mov	r3, r0
 80006c4:	73fb      	strb	r3, [r7, #15]
    printf("[DEBUG] CC1201_SoftReset about to return: %d\n\r", result);
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	4619      	mov	r1, r3
 80006ca:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <CC1201_SoftReset+0x34>)
 80006cc:	f008 f91c 	bl	8008908 <iprintf>
    return result;
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	080095f8 	.word	0x080095f8
 80006e0:	08009624 	.word	0x08009624

080006e4 <CC1201_FastTxOn>:

HAL_StatusTypeDef CC1201_FastTxOn(uint8_t *status_byte)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_FAST_TX_ON, status_byte);
 80006ec:	6879      	ldr	r1, [r7, #4]
 80006ee:	2031      	movs	r0, #49	@ 0x31
 80006f0:	f000 fa92 	bl	8000c18 <CC1201_SendStrobe>
 80006f4:	4603      	mov	r3, r0
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <CC1201_EnterRxMode>:
{
    return CC1201_SendStrobe(CC1201_STROBE_CAL_FREQ_SYNTH, status_byte);
}

HAL_StatusTypeDef CC1201_EnterRxMode(uint8_t *status_byte)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	b082      	sub	sp, #8
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_RX, status_byte);
 8000706:	6879      	ldr	r1, [r7, #4]
 8000708:	2034      	movs	r0, #52	@ 0x34
 800070a:	f000 fa85 	bl	8000c18 <CC1201_SendStrobe>
 800070e:	4603      	mov	r3, r0
}
 8000710:	4618      	mov	r0, r3
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <CC1201_EnterTxMode>:

HAL_StatusTypeDef CC1201_EnterTxMode(uint8_t *status_byte)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_TX, status_byte);
 8000720:	6879      	ldr	r1, [r7, #4]
 8000722:	2035      	movs	r0, #53	@ 0x35
 8000724:	f000 fa78 	bl	8000c18 <CC1201_SendStrobe>
 8000728:	4603      	mov	r3, r0
}
 800072a:	4618      	mov	r0, r3
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <CC1201_EnterIdleMode>:

HAL_StatusTypeDef CC1201_EnterIdleMode(uint8_t *status_byte)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	b082      	sub	sp, #8
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_IDLE, status_byte);
 800073a:	6879      	ldr	r1, [r7, #4]
 800073c:	2036      	movs	r0, #54	@ 0x36
 800073e:	f000 fa6b 	bl	8000c18 <CC1201_SendStrobe>
 8000742:	4603      	mov	r3, r0
}
 8000744:	4618      	mov	r0, r3
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <CC1201_FlushRxFifo>:
{
    return CC1201_SendStrobe(CC1201_STROBE_SLEEP, status_byte);
}

HAL_StatusTypeDef CC1201_FlushRxFifo(uint8_t *status_byte)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_FLUSH_RX, status_byte);
 8000754:	6879      	ldr	r1, [r7, #4]
 8000756:	203a      	movs	r0, #58	@ 0x3a
 8000758:	f000 fa5e 	bl	8000c18 <CC1201_SendStrobe>
 800075c:	4603      	mov	r3, r0
}
 800075e:	4618      	mov	r0, r3
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <CC1201_FlushTxFifo>:

HAL_StatusTypeDef CC1201_FlushTxFifo(uint8_t *status_byte)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b082      	sub	sp, #8
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_FLUSH_TX, status_byte);
 800076e:	6879      	ldr	r1, [r7, #4]
 8000770:	203b      	movs	r0, #59	@ 0x3b
 8000772:	f000 fa51 	bl	8000c18 <CC1201_SendStrobe>
 8000776:	4603      	mov	r3, r0
}
 8000778:	4618      	mov	r0, r3
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <CC1201_Nop>:
{
    return CC1201_SendStrobe(CC1201_STROBE_WOR_RESET, status_byte);
}

HAL_StatusTypeDef CC1201_Nop(uint8_t *status_byte)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
    printf("[DEBUG] Entered CC1201_Nop function\n\r");
 8000788:	4809      	ldr	r0, [pc, #36]	@ (80007b0 <CC1201_Nop+0x30>)
 800078a:	f008 f8bd 	bl	8008908 <iprintf>
    HAL_StatusTypeDef result = CC1201_SendStrobe(CC1201_STROBE_NOP, status_byte);
 800078e:	6879      	ldr	r1, [r7, #4]
 8000790:	203d      	movs	r0, #61	@ 0x3d
 8000792:	f000 fa41 	bl	8000c18 <CC1201_SendStrobe>
 8000796:	4603      	mov	r3, r0
 8000798:	73fb      	strb	r3, [r7, #15]
    printf("[DEBUG] CC1201_Nop about to return: %d\n\r", result);
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	4619      	mov	r1, r3
 800079e:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <CC1201_Nop+0x34>)
 80007a0:	f008 f8b2 	bl	8008908 <iprintf>
    return result;
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	08009654 	.word	0x08009654
 80007b4:	0800967c 	.word	0x0800967c

080007b8 <CC1201_ReadStatus>:
 * @param reg_addr The address of the register to read. The read bit (MSB) will be set internally.
 * @param read_data Pointer to a uint8_t where the read data will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadStatus(uint16_t reg_addr, uint8_t *read_data)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b088      	sub	sp, #32
 80007bc:	af02      	add	r7, sp, #8
 80007be:	4603      	mov	r3, r0
 80007c0:	6039      	str	r1, [r7, #0]
 80007c2:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[4];
    uint8_t rx_buffer[4];
    uint8_t buffer_size;

    if (reg_addr > 0xFF) {
 80007c4:	88fb      	ldrh	r3, [r7, #6]
 80007c6:	2bff      	cmp	r3, #255	@ 0xff
 80007c8:	d909      	bls.n	80007de <CC1201_ReadStatus+0x26>
        // Extended register single read: first byte is 0x2F with R/W bit set
        tx_buffer[0] = 0x2F | CC1201_READ_BIT; // Extended register READ command
 80007ca:	23af      	movs	r3, #175	@ 0xaf
 80007cc:	743b      	strb	r3, [r7, #16]
        tx_buffer[1] = (uint8_t)(reg_addr & 0xFF); // Low byte of address
 80007ce:	88fb      	ldrh	r3, [r7, #6]
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	747b      	strb	r3, [r7, #17]
        tx_buffer[2] = 0x00; // Dummy byte for reading
 80007d4:	2300      	movs	r3, #0
 80007d6:	74bb      	strb	r3, [r7, #18]
        buffer_size = 3;
 80007d8:	2303      	movs	r3, #3
 80007da:	75fb      	strb	r3, [r7, #23]
 80007dc:	e009      	b.n	80007f2 <CC1201_ReadStatus+0x3a>
    } else {
        // Standard register
        tx_buffer[0] = (uint8_t)reg_addr | CC1201_READ_BIT;
 80007de:	88fb      	ldrh	r3, [r7, #6]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	743b      	strb	r3, [r7, #16]
        tx_buffer[1] = 0x00; // Dummy byte for reading
 80007ea:	2300      	movs	r3, #0
 80007ec:	747b      	strb	r3, [r7, #17]
        buffer_size = 2;
 80007ee:	2302      	movs	r3, #2
 80007f0:	75fb      	strb	r3, [r7, #23]
    }

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 80007f2:	2200      	movs	r2, #0
 80007f4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007f8:	4815      	ldr	r0, [pc, #84]	@ (8000850 <CC1201_ReadStatus+0x98>)
 80007fa:	f002 ff69 	bl	80036d0 <HAL_GPIO_WritePin>

    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, tx_buffer, rx_buffer, buffer_size, HAL_MAX_DELAY);
 80007fe:	7dfb      	ldrb	r3, [r7, #23]
 8000800:	b29b      	uxth	r3, r3
 8000802:	f107 020c 	add.w	r2, r7, #12
 8000806:	f107 0110 	add.w	r1, r7, #16
 800080a:	f04f 30ff 	mov.w	r0, #4294967295
 800080e:	9000      	str	r0, [sp, #0]
 8000810:	4810      	ldr	r0, [pc, #64]	@ (8000854 <CC1201_ReadStatus+0x9c>)
 8000812:	f006 f909 	bl	8006a28 <HAL_SPI_TransmitReceive>
 8000816:	4603      	mov	r3, r0
 8000818:	75bb      	strb	r3, [r7, #22]

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 800081a:	2201      	movs	r2, #1
 800081c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000820:	480b      	ldr	r0, [pc, #44]	@ (8000850 <CC1201_ReadStatus+0x98>)
 8000822:	f002 ff55 	bl	80036d0 <HAL_GPIO_WritePin>

    if (status == HAL_OK) {
 8000826:	7dbb      	ldrb	r3, [r7, #22]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d10c      	bne.n	8000846 <CC1201_ReadStatus+0x8e>
        if (read_data != NULL) {
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d009      	beq.n	8000846 <CC1201_ReadStatus+0x8e>
            if (reg_addr > 0xFF) {
 8000832:	88fb      	ldrh	r3, [r7, #6]
 8000834:	2bff      	cmp	r3, #255	@ 0xff
 8000836:	d903      	bls.n	8000840 <CC1201_ReadStatus+0x88>
                *read_data = rx_buffer[2]; // Extended register data
 8000838:	7bba      	ldrb	r2, [r7, #14]
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	701a      	strb	r2, [r3, #0]
 800083e:	e002      	b.n	8000846 <CC1201_ReadStatus+0x8e>
            } else {
                *read_data = rx_buffer[1]; // Standard register data
 8000840:	7b7a      	ldrb	r2, [r7, #13]
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return status;
 8000846:	7dbb      	ldrb	r3, [r7, #22]
}
 8000848:	4618      	mov	r0, r3
 800084a:	3718      	adds	r7, #24
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	58021000 	.word	0x58021000
 8000854:	240000b8 	.word	0x240000b8

08000858 <CC1201_WriteRegister>:
 * @param reg_addr The address of the register to write to.
 * @param write_data The byte of data to write to the register.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteRegister(uint16_t reg_addr, uint8_t write_data)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	460a      	mov	r2, r1
 8000862:	80fb      	strh	r3, [r7, #6]
 8000864:	4613      	mov	r3, r2
 8000866:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[4];
    uint8_t buffer_size;

    if (reg_addr > 0xFF) {
 8000868:	88fb      	ldrh	r3, [r7, #6]
 800086a:	2bff      	cmp	r3, #255	@ 0xff
 800086c:	d909      	bls.n	8000882 <CC1201_WriteRegister+0x2a>
        // Extended register single write: first byte is 0x2F with WRITE (no read bit)
        tx_buffer[0] = 0x2F; // Extended register WRITE command
 800086e:	232f      	movs	r3, #47	@ 0x2f
 8000870:	723b      	strb	r3, [r7, #8]
        tx_buffer[1] = (uint8_t)(reg_addr & 0xFF); // Low byte of address
 8000872:	88fb      	ldrh	r3, [r7, #6]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	727b      	strb	r3, [r7, #9]
        tx_buffer[2] = write_data; // Data to write
 8000878:	797b      	ldrb	r3, [r7, #5]
 800087a:	72bb      	strb	r3, [r7, #10]
        buffer_size = 3;
 800087c:	2303      	movs	r3, #3
 800087e:	73fb      	strb	r3, [r7, #15]
 8000880:	e006      	b.n	8000890 <CC1201_WriteRegister+0x38>
    } else {
        // Standard register
        tx_buffer[0] = (uint8_t)reg_addr; // Register address
 8000882:	88fb      	ldrh	r3, [r7, #6]
 8000884:	b2db      	uxtb	r3, r3
 8000886:	723b      	strb	r3, [r7, #8]
        tx_buffer[1] = write_data; // Data to write
 8000888:	797b      	ldrb	r3, [r7, #5]
 800088a:	727b      	strb	r3, [r7, #9]
        buffer_size = 2;
 800088c:	2302      	movs	r3, #2
 800088e:	73fb      	strb	r3, [r7, #15]
    }

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 8000890:	2200      	movs	r2, #0
 8000892:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000896:	480c      	ldr	r0, [pc, #48]	@ (80008c8 <CC1201_WriteRegister+0x70>)
 8000898:	f002 ff1a 	bl	80036d0 <HAL_GPIO_WritePin>

    status = HAL_SPI_Transmit(&CC1201_SPI_HANDLE, tx_buffer, buffer_size, HAL_MAX_DELAY);
 800089c:	7bfb      	ldrb	r3, [r7, #15]
 800089e:	b29a      	uxth	r2, r3
 80008a0:	f107 0108 	add.w	r1, r7, #8
 80008a4:	f04f 33ff 	mov.w	r3, #4294967295
 80008a8:	4808      	ldr	r0, [pc, #32]	@ (80008cc <CC1201_WriteRegister+0x74>)
 80008aa:	f005 fecf 	bl	800664c <HAL_SPI_Transmit>
 80008ae:	4603      	mov	r3, r0
 80008b0:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 80008b2:	2201      	movs	r2, #1
 80008b4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008b8:	4803      	ldr	r0, [pc, #12]	@ (80008c8 <CC1201_WriteRegister+0x70>)
 80008ba:	f002 ff09 	bl	80036d0 <HAL_GPIO_WritePin>

    return status;
 80008be:	7bbb      	ldrb	r3, [r7, #14]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3710      	adds	r7, #16
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	58021000 	.word	0x58021000
 80008cc:	240000b8 	.word	0x240000b8

080008d0 <CC1201_ReadMARCState>:
 *
 * @param marc_state Pointer to a uint8_t where the MARCSTATE value will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadMARCState(uint8_t *marc_state)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_MARCSTATE, marc_state);
 80008d8:	6879      	ldr	r1, [r7, #4]
 80008da:	f642 7073 	movw	r0, #12147	@ 0x2f73
 80008de:	f7ff ff6b 	bl	80007b8 <CC1201_ReadStatus>
 80008e2:	4603      	mov	r3, r0
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <CC1201_GetNumRXBytes>:
 *
 * @param num_bytes Pointer to a uint8_t where the number of RX bytes will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_GetNumRXBytes(uint8_t *num_bytes)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_NUM_RXBYTES, num_bytes);
 80008f4:	6879      	ldr	r1, [r7, #4]
 80008f6:	f642 707a 	movw	r0, #12154	@ 0x2f7a
 80008fa:	f7ff ff5d 	bl	80007b8 <CC1201_ReadStatus>
 80008fe:	4603      	mov	r3, r0
}
 8000900:	4618      	mov	r0, r3
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <CC1201_GetNumTXBytes>:
 *
 * @param num_bytes Pointer to a uint8_t where the number of TX bytes will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_GetNumTXBytes(uint8_t *num_bytes)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_NUM_TXBYTES, num_bytes);
 8000910:	6879      	ldr	r1, [r7, #4]
 8000912:	f642 707b 	movw	r0, #12155	@ 0x2f7b
 8000916:	f7ff ff4f 	bl	80007b8 <CC1201_ReadStatus>
 800091a:	4603      	mov	r3, r0
}
 800091c:	4618      	mov	r0, r3
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <CC1201_WriteTxFifo>:
 * @param length Number of bytes to write.
 * @param status_byte Pointer to store the status byte returned.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteTxFifo(uint8_t *data, uint8_t length, uint8_t *status_byte)
{
 8000924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000928:	b08f      	sub	sp, #60	@ 0x3c
 800092a:	af02      	add	r7, sp, #8
 800092c:	6178      	str	r0, [r7, #20]
 800092e:	460b      	mov	r3, r1
 8000930:	60fa      	str	r2, [r7, #12]
 8000932:	74fb      	strb	r3, [r7, #19]
 8000934:	466b      	mov	r3, sp
 8000936:	461e      	mov	r6, r3
    if (data == NULL || status_byte == NULL || length == 0) {
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d005      	beq.n	800094a <CC1201_WriteTxFifo+0x26>
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d002      	beq.n	800094a <CC1201_WriteTxFifo+0x26>
 8000944:	7cfb      	ldrb	r3, [r7, #19]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d101      	bne.n	800094e <CC1201_WriteTxFifo+0x2a>
        return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
 800094c:	e08a      	b.n	8000a64 <CC1201_WriteTxFifo+0x140>
    }
    
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[2 + length]; // Command + address + data
 800094e:	7cfb      	ldrb	r3, [r7, #19]
 8000950:	1c99      	adds	r1, r3, #2
 8000952:	1e4b      	subs	r3, r1, #1
 8000954:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000956:	460a      	mov	r2, r1
 8000958:	2300      	movs	r3, #0
 800095a:	603a      	str	r2, [r7, #0]
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	f04f 0200 	mov.w	r2, #0
 8000962:	f04f 0300 	mov.w	r3, #0
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	00c3      	lsls	r3, r0, #3
 800096a:	6838      	ldr	r0, [r7, #0]
 800096c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000970:	6838      	ldr	r0, [r7, #0]
 8000972:	00c2      	lsls	r2, r0, #3
 8000974:	460a      	mov	r2, r1
 8000976:	2300      	movs	r3, #0
 8000978:	4692      	mov	sl, r2
 800097a:	469b      	mov	fp, r3
 800097c:	f04f 0200 	mov.w	r2, #0
 8000980:	f04f 0300 	mov.w	r3, #0
 8000984:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000988:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800098c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000990:	460b      	mov	r3, r1
 8000992:	3307      	adds	r3, #7
 8000994:	08db      	lsrs	r3, r3, #3
 8000996:	00db      	lsls	r3, r3, #3
 8000998:	ebad 0d03 	sub.w	sp, sp, r3
 800099c:	ab02      	add	r3, sp, #8
 800099e:	3300      	adds	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t rx_buffer[2 + length];
 80009a2:	7cfb      	ldrb	r3, [r7, #19]
 80009a4:	1c99      	adds	r1, r3, #2
 80009a6:	1e4b      	subs	r3, r1, #1
 80009a8:	623b      	str	r3, [r7, #32]
 80009aa:	460a      	mov	r2, r1
 80009ac:	2300      	movs	r3, #0
 80009ae:	4690      	mov	r8, r2
 80009b0:	4699      	mov	r9, r3
 80009b2:	f04f 0200 	mov.w	r2, #0
 80009b6:	f04f 0300 	mov.w	r3, #0
 80009ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80009be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80009c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80009c6:	460a      	mov	r2, r1
 80009c8:	2300      	movs	r3, #0
 80009ca:	4614      	mov	r4, r2
 80009cc:	461d      	mov	r5, r3
 80009ce:	f04f 0200 	mov.w	r2, #0
 80009d2:	f04f 0300 	mov.w	r3, #0
 80009d6:	00eb      	lsls	r3, r5, #3
 80009d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80009dc:	00e2      	lsls	r2, r4, #3
 80009de:	460b      	mov	r3, r1
 80009e0:	3307      	adds	r3, #7
 80009e2:	08db      	lsrs	r3, r3, #3
 80009e4:	00db      	lsls	r3, r3, #3
 80009e6:	ebad 0d03 	sub.w	sp, sp, r3
 80009ea:	ab02      	add	r3, sp, #8
 80009ec:	3300      	adds	r3, #0
 80009ee:	61fb      	str	r3, [r7, #28]
    
    // Build command: burst write to TX FIFO (0x3F | 0x40)
    tx_buffer[0] = 0x7F; // TX FIFO burst write
 80009f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009f2:	227f      	movs	r2, #127	@ 0x7f
 80009f4:	701a      	strb	r2, [r3, #0]
    
    // Copy data to transmit buffer
    for (uint8_t i = 0; i < length; i++) {
 80009f6:	2300      	movs	r3, #0
 80009f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80009fc:	e00e      	b.n	8000a1c <CC1201_WriteTxFifo+0xf8>
        tx_buffer[1 + i] = data[i];
 80009fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a02:	697a      	ldr	r2, [r7, #20]
 8000a04:	441a      	add	r2, r3
 8000a06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	7811      	ldrb	r1, [r2, #0]
 8000a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a10:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < length; i++) {
 8000a12:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a16:	3301      	adds	r3, #1
 8000a18:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000a1c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000a20:	7cfb      	ldrb	r3, [r7, #19]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d3eb      	bcc.n	80009fe <CC1201_WriteTxFifo+0xda>
    }
    
    // Pull CS low to start SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a2c:	4810      	ldr	r0, [pc, #64]	@ (8000a70 <CC1201_WriteTxFifo+0x14c>)
 8000a2e:	f002 fe4f 	bl	80036d0 <HAL_GPIO_WritePin>
    
    // Perform SPI transaction
    status = HAL_SPI_TransmitReceive(&hspi4, tx_buffer, rx_buffer, length + 1, HAL_MAX_DELAY);
 8000a32:	7cfb      	ldrb	r3, [r7, #19]
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	3301      	adds	r3, #1
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a3e:	9200      	str	r2, [sp, #0]
 8000a40:	69fa      	ldr	r2, [r7, #28]
 8000a42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000a44:	480b      	ldr	r0, [pc, #44]	@ (8000a74 <CC1201_WriteTxFifo+0x150>)
 8000a46:	f005 ffef 	bl	8006a28 <HAL_SPI_TransmitReceive>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	76fb      	strb	r3, [r7, #27]
    
    // Pull CS high to end SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 8000a4e:	2201      	movs	r2, #1
 8000a50:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a54:	4806      	ldr	r0, [pc, #24]	@ (8000a70 <CC1201_WriteTxFifo+0x14c>)
 8000a56:	f002 fe3b 	bl	80036d0 <HAL_GPIO_WritePin>
    
    // Store status byte (first received byte)
    *status_byte = rx_buffer[0];
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	781a      	ldrb	r2, [r3, #0]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	701a      	strb	r2, [r3, #0]
    
    return status;
 8000a62:	7efb      	ldrb	r3, [r7, #27]
 8000a64:	46b5      	mov	sp, r6
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3734      	adds	r7, #52	@ 0x34
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a70:	58021000 	.word	0x58021000
 8000a74:	240000b8 	.word	0x240000b8

08000a78 <CC1201_ReadRxFifo>:
 * @param length Number of bytes to read.
 * @param status_byte Pointer to store the status byte returned.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadRxFifo(uint8_t *data, uint8_t length, uint8_t *status_byte)
{
 8000a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a7c:	b08f      	sub	sp, #60	@ 0x3c
 8000a7e:	af02      	add	r7, sp, #8
 8000a80:	6178      	str	r0, [r7, #20]
 8000a82:	460b      	mov	r3, r1
 8000a84:	60fa      	str	r2, [r7, #12]
 8000a86:	74fb      	strb	r3, [r7, #19]
 8000a88:	466b      	mov	r3, sp
 8000a8a:	461e      	mov	r6, r3
    if (data == NULL || status_byte == NULL || length == 0) {
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d005      	beq.n	8000a9e <CC1201_ReadRxFifo+0x26>
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d002      	beq.n	8000a9e <CC1201_ReadRxFifo+0x26>
 8000a98:	7cfb      	ldrb	r3, [r7, #19]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d101      	bne.n	8000aa2 <CC1201_ReadRxFifo+0x2a>
        return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e09d      	b.n	8000bde <CC1201_ReadRxFifo+0x166>
    }
    
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[1 + length]; // Command + dummy bytes
 8000aa2:	7cfb      	ldrb	r3, [r7, #19]
 8000aa4:	1c59      	adds	r1, r3, #1
 8000aa6:	1e4b      	subs	r3, r1, #1
 8000aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000aaa:	460a      	mov	r2, r1
 8000aac:	2300      	movs	r3, #0
 8000aae:	603a      	str	r2, [r7, #0]
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	f04f 0200 	mov.w	r2, #0
 8000ab6:	f04f 0300 	mov.w	r3, #0
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	00c3      	lsls	r3, r0, #3
 8000abe:	6838      	ldr	r0, [r7, #0]
 8000ac0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000ac4:	6838      	ldr	r0, [r7, #0]
 8000ac6:	00c2      	lsls	r2, r0, #3
 8000ac8:	460a      	mov	r2, r1
 8000aca:	2300      	movs	r3, #0
 8000acc:	4692      	mov	sl, r2
 8000ace:	469b      	mov	fp, r3
 8000ad0:	f04f 0200 	mov.w	r2, #0
 8000ad4:	f04f 0300 	mov.w	r3, #0
 8000ad8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000adc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000ae0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	3307      	adds	r3, #7
 8000ae8:	08db      	lsrs	r3, r3, #3
 8000aea:	00db      	lsls	r3, r3, #3
 8000aec:	ebad 0d03 	sub.w	sp, sp, r3
 8000af0:	ab02      	add	r3, sp, #8
 8000af2:	3300      	adds	r3, #0
 8000af4:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t rx_buffer[1 + length];
 8000af6:	7cfb      	ldrb	r3, [r7, #19]
 8000af8:	1c59      	adds	r1, r3, #1
 8000afa:	1e4b      	subs	r3, r1, #1
 8000afc:	623b      	str	r3, [r7, #32]
 8000afe:	460a      	mov	r2, r1
 8000b00:	2300      	movs	r3, #0
 8000b02:	4690      	mov	r8, r2
 8000b04:	4699      	mov	r9, r3
 8000b06:	f04f 0200 	mov.w	r2, #0
 8000b0a:	f04f 0300 	mov.w	r3, #0
 8000b0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000b12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000b16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000b1a:	460a      	mov	r2, r1
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	4614      	mov	r4, r2
 8000b20:	461d      	mov	r5, r3
 8000b22:	f04f 0200 	mov.w	r2, #0
 8000b26:	f04f 0300 	mov.w	r3, #0
 8000b2a:	00eb      	lsls	r3, r5, #3
 8000b2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000b30:	00e2      	lsls	r2, r4, #3
 8000b32:	460b      	mov	r3, r1
 8000b34:	3307      	adds	r3, #7
 8000b36:	08db      	lsrs	r3, r3, #3
 8000b38:	00db      	lsls	r3, r3, #3
 8000b3a:	ebad 0d03 	sub.w	sp, sp, r3
 8000b3e:	ab02      	add	r3, sp, #8
 8000b40:	3300      	adds	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
    
    // Build command: burst read from RX FIFO (0x3F | 0x80 | 0x40)
    tx_buffer[0] = 0xFF; // RX FIFO burst read
 8000b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b46:	22ff      	movs	r2, #255	@ 0xff
 8000b48:	701a      	strb	r2, [r3, #0]
    
    // Fill with dummy bytes for reading
    for (uint8_t i = 1; i <= length; i++) {
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000b50:	e009      	b.n	8000b66 <CC1201_ReadRxFifo+0xee>
        tx_buffer[i] = 0x00;
 8000b52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b58:	2100      	movs	r1, #0
 8000b5a:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 1; i <= length; i++) {
 8000b5c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b60:	3301      	adds	r3, #1
 8000b62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000b66:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000b6a:	7cfb      	ldrb	r3, [r7, #19]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d9f0      	bls.n	8000b52 <CC1201_ReadRxFifo+0xda>
    }
    
    // Pull CS low to start SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b76:	481d      	ldr	r0, [pc, #116]	@ (8000bec <CC1201_ReadRxFifo+0x174>)
 8000b78:	f002 fdaa 	bl	80036d0 <HAL_GPIO_WritePin>
    
    // Perform SPI transaction
    status = HAL_SPI_TransmitReceive(&hspi4, tx_buffer, rx_buffer, length + 1, HAL_MAX_DELAY);
 8000b7c:	7cfb      	ldrb	r3, [r7, #19]
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	3301      	adds	r3, #1
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	f04f 32ff 	mov.w	r2, #4294967295
 8000b88:	9200      	str	r2, [sp, #0]
 8000b8a:	69fa      	ldr	r2, [r7, #28]
 8000b8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000b8e:	4818      	ldr	r0, [pc, #96]	@ (8000bf0 <CC1201_ReadRxFifo+0x178>)
 8000b90:	f005 ff4a 	bl	8006a28 <HAL_SPI_TransmitReceive>
 8000b94:	4603      	mov	r3, r0
 8000b96:	76fb      	strb	r3, [r7, #27]
    
    // Pull CS high to end SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b9e:	4813      	ldr	r0, [pc, #76]	@ (8000bec <CC1201_ReadRxFifo+0x174>)
 8000ba0:	f002 fd96 	bl	80036d0 <HAL_GPIO_WritePin>
    
    // Store status byte (first received byte)
    *status_byte = rx_buffer[0];
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	781a      	ldrb	r2, [r3, #0]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	701a      	strb	r2, [r3, #0]
    
    // Copy received data
    for (uint8_t i = 0; i < length; i++) {
 8000bac:	2300      	movs	r3, #0
 8000bae:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000bb2:	e00e      	b.n	8000bd2 <CC1201_ReadRxFifo+0x15a>
        data[i] = rx_buffer[1 + i];
 8000bb4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000bb8:	1c5a      	adds	r2, r3, #1
 8000bba:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000bbe:	6979      	ldr	r1, [r7, #20]
 8000bc0:	440b      	add	r3, r1
 8000bc2:	69f9      	ldr	r1, [r7, #28]
 8000bc4:	5c8a      	ldrb	r2, [r1, r2]
 8000bc6:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < length; i++) {
 8000bc8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000bcc:	3301      	adds	r3, #1
 8000bce:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000bd2:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000bd6:	7cfb      	ldrb	r3, [r7, #19]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d3eb      	bcc.n	8000bb4 <CC1201_ReadRxFifo+0x13c>
    }
    
    return status;
 8000bdc:	7efb      	ldrb	r3, [r7, #27]
 8000bde:	46b5      	mov	sp, r6
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3734      	adds	r7, #52	@ 0x34
 8000be4:	46bd      	mov	sp, r7
 8000be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bea:	bf00      	nop
 8000bec:	58021000 	.word	0x58021000
 8000bf0:	240000b8 	.word	0x240000b8

08000bf4 <CC1201_WriteSingleTxFifo>:
 * @param data Single byte to write to TX FIFO.
 * @param status_byte Pointer to store the status byte returned.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteSingleTxFifo(uint8_t data, uint8_t *status_byte)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	71fb      	strb	r3, [r7, #7]
    return CC1201_WriteTxFifo(&data, 1, status_byte);
 8000c00:	1dfb      	adds	r3, r7, #7
 8000c02:	683a      	ldr	r2, [r7, #0]
 8000c04:	2101      	movs	r1, #1
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fe8c 	bl	8000924 <CC1201_WriteTxFifo>
 8000c0c:	4603      	mov	r3, r0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <CC1201_SendStrobe>:
 * @param status_byte Pointer to a uint8_t where the status byte received from the CC1201 will be stored.
 *                    Can be NULL if the status byte is not needed.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_SendStrobe(uint8_t strobe_command, uint8_t *status_byte)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af02      	add	r7, sp, #8
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;
    uint8_t rx_data;

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 8000c24:	2200      	movs	r2, #0
 8000c26:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c2a:	4816      	ldr	r0, [pc, #88]	@ (8000c84 <CC1201_SendStrobe+0x6c>)
 8000c2c:	f002 fd50 	bl	80036d0 <HAL_GPIO_WritePin>
    
    // Small delay to ensure CS is stable
    HAL_Delay(1);
 8000c30:	2001      	movs	r0, #1
 8000c32:	f001 ff23 	bl	8002a7c <HAL_Delay>

    // Perform SPI transaction
    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, &strobe_command, &rx_data, 1, 1000);
 8000c36:	f107 020e 	add.w	r2, r7, #14
 8000c3a:	1df9      	adds	r1, r7, #7
 8000c3c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c40:	9300      	str	r3, [sp, #0]
 8000c42:	2301      	movs	r3, #1
 8000c44:	4810      	ldr	r0, [pc, #64]	@ (8000c88 <CC1201_SendStrobe+0x70>)
 8000c46:	f005 feef 	bl	8006a28 <HAL_SPI_TransmitReceive>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	73fb      	strb	r3, [r7, #15]
    printf("[DEBUG] CC1201_SendStrobe 0x%02X -> HAL=%d, statusByte=0x%02X\n\r", strobe_command, status, rx_data);
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	4619      	mov	r1, r3
 8000c52:	7bfa      	ldrb	r2, [r7, #15]
 8000c54:	7bbb      	ldrb	r3, [r7, #14]
 8000c56:	480d      	ldr	r0, [pc, #52]	@ (8000c8c <CC1201_SendStrobe+0x74>)
 8000c58:	f007 fe56 	bl	8008908 <iprintf>
    
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c62:	4808      	ldr	r0, [pc, #32]	@ (8000c84 <CC1201_SendStrobe+0x6c>)
 8000c64:	f002 fd34 	bl	80036d0 <HAL_GPIO_WritePin>
    
    if (status == HAL_OK) {
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d105      	bne.n	8000c7a <CC1201_SendStrobe+0x62>
        if (status_byte != NULL) {
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d002      	beq.n	8000c7a <CC1201_SendStrobe+0x62>
            *status_byte = rx_data;
 8000c74:	7bba      	ldrb	r2, [r7, #14]
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	701a      	strb	r2, [r3, #0]
        }
    }
    return status;
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	58021000 	.word	0x58021000
 8000c88:	240000b8 	.word	0x240000b8
 8000c8c:	080096a8 	.word	0x080096a8

08000c90 <print_cc1201_status>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Function to decode and print CC1201 status
void print_cc1201_status(uint8_t status_byte, const char* context) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	6039      	str	r1, [r7, #0]
 8000c9a:	71fb      	strb	r3, [r7, #7]
    uint8_t radio_state = (status_byte >> 4) & 0x0F;
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	091b      	lsrs	r3, r3, #4
 8000ca0:	73fb      	strb	r3, [r7, #15]
    uint8_t fifo_bytes = status_byte & 0x0F;
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	f003 030f 	and.w	r3, r3, #15
 8000ca8:	73bb      	strb	r3, [r7, #14]
    
    printf("  %s: Status=0x%02X, State=0x%X", context, status_byte, radio_state);
 8000caa:	79fa      	ldrb	r2, [r7, #7]
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
 8000cae:	6839      	ldr	r1, [r7, #0]
 8000cb0:	4823      	ldr	r0, [pc, #140]	@ (8000d40 <print_cc1201_status+0xb0>)
 8000cb2:	f007 fe29 	bl	8008908 <iprintf>
    switch(radio_state) {
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
 8000cb8:	2b07      	cmp	r3, #7
 8000cba:	d833      	bhi.n	8000d24 <print_cc1201_status+0x94>
 8000cbc:	a201      	add	r2, pc, #4	@ (adr r2, 8000cc4 <print_cc1201_status+0x34>)
 8000cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc2:	bf00      	nop
 8000cc4:	08000ce5 	.word	0x08000ce5
 8000cc8:	08000ced 	.word	0x08000ced
 8000ccc:	08000cf5 	.word	0x08000cf5
 8000cd0:	08000cfd 	.word	0x08000cfd
 8000cd4:	08000d05 	.word	0x08000d05
 8000cd8:	08000d0d 	.word	0x08000d0d
 8000cdc:	08000d15 	.word	0x08000d15
 8000ce0:	08000d1d 	.word	0x08000d1d
        case 0x0: printf("(IDLE)"); break;
 8000ce4:	4817      	ldr	r0, [pc, #92]	@ (8000d44 <print_cc1201_status+0xb4>)
 8000ce6:	f007 fe0f 	bl	8008908 <iprintf>
 8000cea:	e01f      	b.n	8000d2c <print_cc1201_status+0x9c>
        case 0x1: printf("(RX)"); break;
 8000cec:	4816      	ldr	r0, [pc, #88]	@ (8000d48 <print_cc1201_status+0xb8>)
 8000cee:	f007 fe0b 	bl	8008908 <iprintf>
 8000cf2:	e01b      	b.n	8000d2c <print_cc1201_status+0x9c>
        case 0x2: printf("(TX)"); break;
 8000cf4:	4815      	ldr	r0, [pc, #84]	@ (8000d4c <print_cc1201_status+0xbc>)
 8000cf6:	f007 fe07 	bl	8008908 <iprintf>
 8000cfa:	e017      	b.n	8000d2c <print_cc1201_status+0x9c>
        case 0x3: printf("(FSTXON)"); break;
 8000cfc:	4814      	ldr	r0, [pc, #80]	@ (8000d50 <print_cc1201_status+0xc0>)
 8000cfe:	f007 fe03 	bl	8008908 <iprintf>
 8000d02:	e013      	b.n	8000d2c <print_cc1201_status+0x9c>
        case 0x4: printf("(CALIBRATE)"); break;
 8000d04:	4813      	ldr	r0, [pc, #76]	@ (8000d54 <print_cc1201_status+0xc4>)
 8000d06:	f007 fdff 	bl	8008908 <iprintf>
 8000d0a:	e00f      	b.n	8000d2c <print_cc1201_status+0x9c>
        case 0x5: printf("(SETTLING)"); break;
 8000d0c:	4812      	ldr	r0, [pc, #72]	@ (8000d58 <print_cc1201_status+0xc8>)
 8000d0e:	f007 fdfb 	bl	8008908 <iprintf>
 8000d12:	e00b      	b.n	8000d2c <print_cc1201_status+0x9c>
        case 0x6: printf("(RX_FIFO_ERR)"); break;
 8000d14:	4811      	ldr	r0, [pc, #68]	@ (8000d5c <print_cc1201_status+0xcc>)
 8000d16:	f007 fdf7 	bl	8008908 <iprintf>
 8000d1a:	e007      	b.n	8000d2c <print_cc1201_status+0x9c>
        case 0x7: printf("(TX_FIFO_ERR)"); break;
 8000d1c:	4810      	ldr	r0, [pc, #64]	@ (8000d60 <print_cc1201_status+0xd0>)
 8000d1e:	f007 fdf3 	bl	8008908 <iprintf>
 8000d22:	e003      	b.n	8000d2c <print_cc1201_status+0x9c>
        default: printf("(UNKNOWN)"); break;
 8000d24:	480f      	ldr	r0, [pc, #60]	@ (8000d64 <print_cc1201_status+0xd4>)
 8000d26:	f007 fdef 	bl	8008908 <iprintf>
 8000d2a:	bf00      	nop
    }
    printf(", FIFO=%d\n\r", fifo_bytes);
 8000d2c:	7bbb      	ldrb	r3, [r7, #14]
 8000d2e:	4619      	mov	r1, r3
 8000d30:	480d      	ldr	r0, [pc, #52]	@ (8000d68 <print_cc1201_status+0xd8>)
 8000d32:	f007 fde9 	bl	8008908 <iprintf>
}
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	080096e8 	.word	0x080096e8
 8000d44:	08009708 	.word	0x08009708
 8000d48:	08009710 	.word	0x08009710
 8000d4c:	08009718 	.word	0x08009718
 8000d50:	08009720 	.word	0x08009720
 8000d54:	0800972c 	.word	0x0800972c
 8000d58:	08009738 	.word	0x08009738
 8000d5c:	08009744 	.word	0x08009744
 8000d60:	08009754 	.word	0x08009754
 8000d64:	08009764 	.word	0x08009764
 8000d68:	08009770 	.word	0x08009770

08000d6c <cc1201_hardware_reset>:

// Hardware Reset Function
void cc1201_hardware_reset(void) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
    printf("  Performing hardware reset...\n\r");
 8000d70:	480b      	ldr	r0, [pc, #44]	@ (8000da0 <cc1201_hardware_reset+0x34>)
 8000d72:	f007 fdc9 	bl	8008908 <iprintf>
    
    // Pull reset pin LOW (active reset)
    HAL_GPIO_WritePin(CC1201_RESET_PORT, CC1201_RESET_PIN, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2110      	movs	r1, #16
 8000d7a:	480a      	ldr	r0, [pc, #40]	@ (8000da4 <cc1201_hardware_reset+0x38>)
 8000d7c:	f002 fca8 	bl	80036d0 <HAL_GPIO_WritePin>
    HAL_Delay(10); // Hold reset for 10ms
 8000d80:	200a      	movs	r0, #10
 8000d82:	f001 fe7b 	bl	8002a7c <HAL_Delay>
    
    // Release reset pin HIGH (inactive)
    HAL_GPIO_WritePin(CC1201_RESET_PORT, CC1201_RESET_PIN, GPIO_PIN_SET);
 8000d86:	2201      	movs	r2, #1
 8000d88:	2110      	movs	r1, #16
 8000d8a:	4806      	ldr	r0, [pc, #24]	@ (8000da4 <cc1201_hardware_reset+0x38>)
 8000d8c:	f002 fca0 	bl	80036d0 <HAL_GPIO_WritePin>
    HAL_Delay(50); // Wait for reset to complete
 8000d90:	2032      	movs	r0, #50	@ 0x32
 8000d92:	f001 fe73 	bl	8002a7c <HAL_Delay>
    
    printf("  Hardware reset complete\n\r");
 8000d96:	4804      	ldr	r0, [pc, #16]	@ (8000da8 <cc1201_hardware_reset+0x3c>)
 8000d98:	f007 fdb6 	bl	8008908 <iprintf>
}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	0800977c 	.word	0x0800977c
 8000da4:	58020c00 	.word	0x58020c00
 8000da8:	080097a0 	.word	0x080097a0

08000dac <cc1201_power_up_sequence>:

// CC1201 Power-up and Reset Sequence  
void cc1201_power_up_sequence(void) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
    printf("\n=== CC1201 POWER-UP SEQUENCE ===\n\r");
 8000db2:	4838      	ldr	r0, [pc, #224]	@ (8000e94 <cc1201_power_up_sequence+0xe8>)
 8000db4:	f007 fda8 	bl	8008908 <iprintf>
    
    // 1. Ensure CS is high (inactive)
    printf("1. Setting CS HIGH (inactive)...\n\r");
 8000db8:	4837      	ldr	r0, [pc, #220]	@ (8000e98 <cc1201_power_up_sequence+0xec>)
 8000dba:	f007 fda5 	bl	8008908 <iprintf>
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000dc4:	4835      	ldr	r0, [pc, #212]	@ (8000e9c <cc1201_power_up_sequence+0xf0>)
 8000dc6:	f002 fc83 	bl	80036d0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000dca:	200a      	movs	r0, #10
 8000dcc:	f001 fe56 	bl	8002a7c <HAL_Delay>
    
    // 2. Hardware reset sequence
    printf("2. Hardware reset sequence...\n\r");
 8000dd0:	4833      	ldr	r0, [pc, #204]	@ (8000ea0 <cc1201_power_up_sequence+0xf4>)
 8000dd2:	f007 fd99 	bl	8008908 <iprintf>
    cc1201_hardware_reset();
 8000dd6:	f7ff ffc9 	bl	8000d6c <cc1201_hardware_reset>
    
    // 3. Power-up delay (let voltages stabilize)
    printf("3. Power stabilization delay (100ms)...\n\r");
 8000dda:	4832      	ldr	r0, [pc, #200]	@ (8000ea4 <cc1201_power_up_sequence+0xf8>)
 8000ddc:	f007 fd94 	bl	8008908 <iprintf>
    HAL_Delay(100);
 8000de0:	2064      	movs	r0, #100	@ 0x64
 8000de2:	f001 fe4b 	bl	8002a7c <HAL_Delay>
    
    // 4. Crystal oscillator startup time
    printf("4. Crystal oscillator startup delay (10ms)...\n\r");
 8000de6:	4830      	ldr	r0, [pc, #192]	@ (8000ea8 <cc1201_power_up_sequence+0xfc>)
 8000de8:	f007 fd8e 	bl	8008908 <iprintf>
    HAL_Delay(10);
 8000dec:	200a      	movs	r0, #10
 8000dee:	f001 fe45 	bl	8002a7c <HAL_Delay>
    
    // 5. Test basic communication after hardware reset
    printf("5. Testing communication after hardware reset...\n\r");
 8000df2:	482e      	ldr	r0, [pc, #184]	@ (8000eac <cc1201_power_up_sequence+0x100>)
 8000df4:	f007 fd88 	bl	8008908 <iprintf>
    uint8_t post_hw_reset_status = 0xFF;
 8000df8:	23ff      	movs	r3, #255	@ 0xff
 8000dfa:	713b      	strb	r3, [r7, #4]
    HAL_StatusTypeDef post_hw_reset_result = CC1201_Nop(&post_hw_reset_status);
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fcbe 	bl	8000780 <CC1201_Nop>
 8000e04:	4603      	mov	r3, r0
 8000e06:	71fb      	strb	r3, [r7, #7]
    printf("  Post-HW-reset NOP: HAL=%d, Status=0x%02X\n\r", post_hw_reset_result, post_hw_reset_status);
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	793a      	ldrb	r2, [r7, #4]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4828      	ldr	r0, [pc, #160]	@ (8000eb0 <cc1201_power_up_sequence+0x104>)
 8000e10:	f007 fd7a 	bl	8008908 <iprintf>
    
    // 6. Try software reset sequence (if hardware reset helped)
    if (post_hw_reset_status != 0xFF) {
 8000e14:	793b      	ldrb	r3, [r7, #4]
 8000e16:	2bff      	cmp	r3, #255	@ 0xff
 8000e18:	d02f      	beq.n	8000e7a <cc1201_power_up_sequence+0xce>
        printf("6. Attempting software reset...\n\r");
 8000e1a:	4826      	ldr	r0, [pc, #152]	@ (8000eb4 <cc1201_power_up_sequence+0x108>)
 8000e1c:	f007 fd74 	bl	8008908 <iprintf>
        uint8_t reset_status = 0xFF;
 8000e20:	23ff      	movs	r3, #255	@ 0xff
 8000e22:	70fb      	strb	r3, [r7, #3]
        HAL_StatusTypeDef reset_result = CC1201_SoftReset(&reset_status);
 8000e24:	1cfb      	adds	r3, r7, #3
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fc40 	bl	80006ac <CC1201_SoftReset>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	71bb      	strb	r3, [r7, #6]
        printf("  Software reset: HAL=%d, Status=0x%02X\n\r", reset_result, reset_status);
 8000e30:	79bb      	ldrb	r3, [r7, #6]
 8000e32:	78fa      	ldrb	r2, [r7, #3]
 8000e34:	4619      	mov	r1, r3
 8000e36:	4820      	ldr	r0, [pc, #128]	@ (8000eb8 <cc1201_power_up_sequence+0x10c>)
 8000e38:	f007 fd66 	bl	8008908 <iprintf>
        
        // Wait for reset to complete
        HAL_Delay(50);
 8000e3c:	2032      	movs	r0, #50	@ 0x32
 8000e3e:	f001 fe1d 	bl	8002a7c <HAL_Delay>
        
        // Test again after software reset
        uint8_t post_reset_status = 0xFF;
 8000e42:	23ff      	movs	r3, #255	@ 0xff
 8000e44:	70bb      	strb	r3, [r7, #2]
        HAL_StatusTypeDef post_reset_result = CC1201_Nop(&post_reset_status);
 8000e46:	1cbb      	adds	r3, r7, #2
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fc99 	bl	8000780 <CC1201_Nop>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	717b      	strb	r3, [r7, #5]
        printf("  Post-SW-reset NOP: HAL=%d, Status=0x%02X\n\r", post_reset_result, post_reset_status);
 8000e52:	797b      	ldrb	r3, [r7, #5]
 8000e54:	78ba      	ldrb	r2, [r7, #2]
 8000e56:	4619      	mov	r1, r3
 8000e58:	4818      	ldr	r0, [pc, #96]	@ (8000ebc <cc1201_power_up_sequence+0x110>)
 8000e5a:	f007 fd55 	bl	8008908 <iprintf>
        
        if (post_reset_status != 0xFF && post_reset_status != 0x00) {
 8000e5e:	78bb      	ldrb	r3, [r7, #2]
 8000e60:	2bff      	cmp	r3, #255	@ 0xff
 8000e62:	d006      	beq.n	8000e72 <cc1201_power_up_sequence+0xc6>
 8000e64:	78bb      	ldrb	r3, [r7, #2]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d003      	beq.n	8000e72 <cc1201_power_up_sequence+0xc6>
            printf("  ✓ CC1201 responding after complete reset sequence!\n\r");
 8000e6a:	4815      	ldr	r0, [pc, #84]	@ (8000ec0 <cc1201_power_up_sequence+0x114>)
 8000e6c:	f007 fd4c 	bl	8008908 <iprintf>
 8000e70:	e009      	b.n	8000e86 <cc1201_power_up_sequence+0xda>
        } else {
            printf("  ✗ CC1201 still not responding after software reset\n\r");
 8000e72:	4814      	ldr	r0, [pc, #80]	@ (8000ec4 <cc1201_power_up_sequence+0x118>)
 8000e74:	f007 fd48 	bl	8008908 <iprintf>
 8000e78:	e005      	b.n	8000e86 <cc1201_power_up_sequence+0xda>
        }
    } else {
        printf("6. Skipping software reset - hardware reset didn't help\n\r");
 8000e7a:	4813      	ldr	r0, [pc, #76]	@ (8000ec8 <cc1201_power_up_sequence+0x11c>)
 8000e7c:	f007 fd44 	bl	8008908 <iprintf>
        printf("  ✗ CC1201 not responding - likely hardware issue\n\r");
 8000e80:	4812      	ldr	r0, [pc, #72]	@ (8000ecc <cc1201_power_up_sequence+0x120>)
 8000e82:	f007 fd41 	bl	8008908 <iprintf>
    }
    
    printf("=== POWER-UP SEQUENCE COMPLETE ===\n\r");
 8000e86:	4812      	ldr	r0, [pc, #72]	@ (8000ed0 <cc1201_power_up_sequence+0x124>)
 8000e88:	f007 fd3e 	bl	8008908 <iprintf>
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	080097bc 	.word	0x080097bc
 8000e98:	080097e0 	.word	0x080097e0
 8000e9c:	58021000 	.word	0x58021000
 8000ea0:	08009804 	.word	0x08009804
 8000ea4:	08009824 	.word	0x08009824
 8000ea8:	08009850 	.word	0x08009850
 8000eac:	08009880 	.word	0x08009880
 8000eb0:	080098b4 	.word	0x080098b4
 8000eb4:	080098e4 	.word	0x080098e4
 8000eb8:	08009908 	.word	0x08009908
 8000ebc:	08009934 	.word	0x08009934
 8000ec0:	08009964 	.word	0x08009964
 8000ec4:	080099a0 	.word	0x080099a0
 8000ec8:	080099dc 	.word	0x080099dc
 8000ecc:	08009a18 	.word	0x08009a18
 8000ed0:	08009a50 	.word	0x08009a50

08000ed4 <comprehensive_cc1201_diagnostic>:

// Comprehensive CC1201 Hardware Diagnostic
void comprehensive_cc1201_diagnostic(void) {
 8000ed4:	b5b0      	push	{r4, r5, r7, lr}
 8000ed6:	b08c      	sub	sp, #48	@ 0x30
 8000ed8:	af02      	add	r7, sp, #8
    printf("\n=== COMPREHENSIVE CC1201 HARDWARE DIAGNOSTIC ===\n\r");
 8000eda:	48ad      	ldr	r0, [pc, #692]	@ (8001190 <comprehensive_cc1201_diagnostic+0x2bc>)
 8000edc:	f007 fd14 	bl	8008908 <iprintf>
    
    // 1. Check pin states BEFORE any SPI communication
    printf("1. INITIAL PIN STATE CHECK:\n\r");
 8000ee0:	48ac      	ldr	r0, [pc, #688]	@ (8001194 <comprehensive_cc1201_diagnostic+0x2c0>)
 8000ee2:	f007 fd11 	bl	8008908 <iprintf>
    printf("  CS Pin (PE11): %s\n\r", HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11) ? "HIGH" : "LOW");
 8000ee6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000eea:	48ab      	ldr	r0, [pc, #684]	@ (8001198 <comprehensive_cc1201_diagnostic+0x2c4>)
 8000eec:	f002 fbd8 	bl	80036a0 <HAL_GPIO_ReadPin>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <comprehensive_cc1201_diagnostic+0x26>
 8000ef6:	4ba9      	ldr	r3, [pc, #676]	@ (800119c <comprehensive_cc1201_diagnostic+0x2c8>)
 8000ef8:	e000      	b.n	8000efc <comprehensive_cc1201_diagnostic+0x28>
 8000efa:	4ba9      	ldr	r3, [pc, #676]	@ (80011a0 <comprehensive_cc1201_diagnostic+0x2cc>)
 8000efc:	4619      	mov	r1, r3
 8000efe:	48a9      	ldr	r0, [pc, #676]	@ (80011a4 <comprehensive_cc1201_diagnostic+0x2d0>)
 8000f00:	f007 fd02 	bl	8008908 <iprintf>
    printf("  SCK Pin (PE12): %s\n\r", HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_12) ? "HIGH" : "LOW");
 8000f04:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f08:	48a3      	ldr	r0, [pc, #652]	@ (8001198 <comprehensive_cc1201_diagnostic+0x2c4>)
 8000f0a:	f002 fbc9 	bl	80036a0 <HAL_GPIO_ReadPin>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <comprehensive_cc1201_diagnostic+0x44>
 8000f14:	4ba1      	ldr	r3, [pc, #644]	@ (800119c <comprehensive_cc1201_diagnostic+0x2c8>)
 8000f16:	e000      	b.n	8000f1a <comprehensive_cc1201_diagnostic+0x46>
 8000f18:	4ba1      	ldr	r3, [pc, #644]	@ (80011a0 <comprehensive_cc1201_diagnostic+0x2cc>)
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	48a2      	ldr	r0, [pc, #648]	@ (80011a8 <comprehensive_cc1201_diagnostic+0x2d4>)
 8000f1e:	f007 fcf3 	bl	8008908 <iprintf>
    printf("  MISO Pin (PE13): %s\n\r", HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13) ? "HIGH" : "LOW");
 8000f22:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f26:	489c      	ldr	r0, [pc, #624]	@ (8001198 <comprehensive_cc1201_diagnostic+0x2c4>)
 8000f28:	f002 fbba 	bl	80036a0 <HAL_GPIO_ReadPin>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <comprehensive_cc1201_diagnostic+0x62>
 8000f32:	4b9a      	ldr	r3, [pc, #616]	@ (800119c <comprehensive_cc1201_diagnostic+0x2c8>)
 8000f34:	e000      	b.n	8000f38 <comprehensive_cc1201_diagnostic+0x64>
 8000f36:	4b9a      	ldr	r3, [pc, #616]	@ (80011a0 <comprehensive_cc1201_diagnostic+0x2cc>)
 8000f38:	4619      	mov	r1, r3
 8000f3a:	489c      	ldr	r0, [pc, #624]	@ (80011ac <comprehensive_cc1201_diagnostic+0x2d8>)
 8000f3c:	f007 fce4 	bl	8008908 <iprintf>
    printf("  MOSI Pin (PE14): %s\n\r", HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_14) ? "HIGH" : "LOW");
 8000f40:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f44:	4894      	ldr	r0, [pc, #592]	@ (8001198 <comprehensive_cc1201_diagnostic+0x2c4>)
 8000f46:	f002 fbab 	bl	80036a0 <HAL_GPIO_ReadPin>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <comprehensive_cc1201_diagnostic+0x80>
 8000f50:	4b92      	ldr	r3, [pc, #584]	@ (800119c <comprehensive_cc1201_diagnostic+0x2c8>)
 8000f52:	e000      	b.n	8000f56 <comprehensive_cc1201_diagnostic+0x82>
 8000f54:	4b92      	ldr	r3, [pc, #584]	@ (80011a0 <comprehensive_cc1201_diagnostic+0x2cc>)
 8000f56:	4619      	mov	r1, r3
 8000f58:	4895      	ldr	r0, [pc, #596]	@ (80011b0 <comprehensive_cc1201_diagnostic+0x2dc>)
 8000f5a:	f007 fcd5 	bl	8008908 <iprintf>
    printf("  RESET Pin (PD4): %s\n\r", HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4) ? "HIGH" : "LOW");
 8000f5e:	2110      	movs	r1, #16
 8000f60:	4894      	ldr	r0, [pc, #592]	@ (80011b4 <comprehensive_cc1201_diagnostic+0x2e0>)
 8000f62:	f002 fb9d 	bl	80036a0 <HAL_GPIO_ReadPin>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <comprehensive_cc1201_diagnostic+0x9c>
 8000f6c:	4b8b      	ldr	r3, [pc, #556]	@ (800119c <comprehensive_cc1201_diagnostic+0x2c8>)
 8000f6e:	e000      	b.n	8000f72 <comprehensive_cc1201_diagnostic+0x9e>
 8000f70:	4b8b      	ldr	r3, [pc, #556]	@ (80011a0 <comprehensive_cc1201_diagnostic+0x2cc>)
 8000f72:	4619      	mov	r1, r3
 8000f74:	4890      	ldr	r0, [pc, #576]	@ (80011b8 <comprehensive_cc1201_diagnostic+0x2e4>)
 8000f76:	f007 fcc7 	bl	8008908 <iprintf>
    printf("  INT Pin (PD5): %s\n\r", HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5) ? "HIGH" : "LOW");
 8000f7a:	2120      	movs	r1, #32
 8000f7c:	488d      	ldr	r0, [pc, #564]	@ (80011b4 <comprehensive_cc1201_diagnostic+0x2e0>)
 8000f7e:	f002 fb8f 	bl	80036a0 <HAL_GPIO_ReadPin>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <comprehensive_cc1201_diagnostic+0xb8>
 8000f88:	4b84      	ldr	r3, [pc, #528]	@ (800119c <comprehensive_cc1201_diagnostic+0x2c8>)
 8000f8a:	e000      	b.n	8000f8e <comprehensive_cc1201_diagnostic+0xba>
 8000f8c:	4b84      	ldr	r3, [pc, #528]	@ (80011a0 <comprehensive_cc1201_diagnostic+0x2cc>)
 8000f8e:	4619      	mov	r1, r3
 8000f90:	488a      	ldr	r0, [pc, #552]	@ (80011bc <comprehensive_cc1201_diagnostic+0x2e8>)
 8000f92:	f007 fcb9 	bl	8008908 <iprintf>
    
    // 2. Manual CS control test
    printf("\n2. MANUAL CS CONTROL TEST:\n\r");
 8000f96:	488a      	ldr	r0, [pc, #552]	@ (80011c0 <comprehensive_cc1201_diagnostic+0x2ec>)
 8000f98:	f007 fcb6 	bl	8008908 <iprintf>
    printf("  Setting CS LOW...\n\r");
 8000f9c:	4889      	ldr	r0, [pc, #548]	@ (80011c4 <comprehensive_cc1201_diagnostic+0x2f0>)
 8000f9e:	f007 fcb3 	bl	8008908 <iprintf>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fa8:	487b      	ldr	r0, [pc, #492]	@ (8001198 <comprehensive_cc1201_diagnostic+0x2c4>)
 8000faa:	f002 fb91 	bl	80036d0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000fae:	200a      	movs	r0, #10
 8000fb0:	f001 fd64 	bl	8002a7c <HAL_Delay>
    printf("  CS Pin: %s\n\r", HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11) ? "HIGH" : "LOW");
 8000fb4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fb8:	4877      	ldr	r0, [pc, #476]	@ (8001198 <comprehensive_cc1201_diagnostic+0x2c4>)
 8000fba:	f002 fb71 	bl	80036a0 <HAL_GPIO_ReadPin>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <comprehensive_cc1201_diagnostic+0xf4>
 8000fc4:	4b75      	ldr	r3, [pc, #468]	@ (800119c <comprehensive_cc1201_diagnostic+0x2c8>)
 8000fc6:	e000      	b.n	8000fca <comprehensive_cc1201_diagnostic+0xf6>
 8000fc8:	4b75      	ldr	r3, [pc, #468]	@ (80011a0 <comprehensive_cc1201_diagnostic+0x2cc>)
 8000fca:	4619      	mov	r1, r3
 8000fcc:	487e      	ldr	r0, [pc, #504]	@ (80011c8 <comprehensive_cc1201_diagnostic+0x2f4>)
 8000fce:	f007 fc9b 	bl	8008908 <iprintf>
    printf("  MISO Pin: %s\n\r", HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13) ? "HIGH" : "LOW");
 8000fd2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fd6:	4870      	ldr	r0, [pc, #448]	@ (8001198 <comprehensive_cc1201_diagnostic+0x2c4>)
 8000fd8:	f002 fb62 	bl	80036a0 <HAL_GPIO_ReadPin>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <comprehensive_cc1201_diagnostic+0x112>
 8000fe2:	4b6e      	ldr	r3, [pc, #440]	@ (800119c <comprehensive_cc1201_diagnostic+0x2c8>)
 8000fe4:	e000      	b.n	8000fe8 <comprehensive_cc1201_diagnostic+0x114>
 8000fe6:	4b6e      	ldr	r3, [pc, #440]	@ (80011a0 <comprehensive_cc1201_diagnostic+0x2cc>)
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4878      	ldr	r0, [pc, #480]	@ (80011cc <comprehensive_cc1201_diagnostic+0x2f8>)
 8000fec:	f007 fc8c 	bl	8008908 <iprintf>
    
    printf("  Setting CS HIGH...\n\r");
 8000ff0:	4877      	ldr	r0, [pc, #476]	@ (80011d0 <comprehensive_cc1201_diagnostic+0x2fc>)
 8000ff2:	f007 fc89 	bl	8008908 <iprintf>
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ffc:	4866      	ldr	r0, [pc, #408]	@ (8001198 <comprehensive_cc1201_diagnostic+0x2c4>)
 8000ffe:	f002 fb67 	bl	80036d0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001002:	200a      	movs	r0, #10
 8001004:	f001 fd3a 	bl	8002a7c <HAL_Delay>
    printf("  CS Pin: %s\n\r", HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11) ? "HIGH" : "LOW");
 8001008:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800100c:	4862      	ldr	r0, [pc, #392]	@ (8001198 <comprehensive_cc1201_diagnostic+0x2c4>)
 800100e:	f002 fb47 	bl	80036a0 <HAL_GPIO_ReadPin>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <comprehensive_cc1201_diagnostic+0x148>
 8001018:	4b60      	ldr	r3, [pc, #384]	@ (800119c <comprehensive_cc1201_diagnostic+0x2c8>)
 800101a:	e000      	b.n	800101e <comprehensive_cc1201_diagnostic+0x14a>
 800101c:	4b60      	ldr	r3, [pc, #384]	@ (80011a0 <comprehensive_cc1201_diagnostic+0x2cc>)
 800101e:	4619      	mov	r1, r3
 8001020:	4869      	ldr	r0, [pc, #420]	@ (80011c8 <comprehensive_cc1201_diagnostic+0x2f4>)
 8001022:	f007 fc71 	bl	8008908 <iprintf>
    printf("  MISO Pin: %s\n\r", HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13) ? "HIGH" : "LOW");
 8001026:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800102a:	485b      	ldr	r0, [pc, #364]	@ (8001198 <comprehensive_cc1201_diagnostic+0x2c4>)
 800102c:	f002 fb38 	bl	80036a0 <HAL_GPIO_ReadPin>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <comprehensive_cc1201_diagnostic+0x166>
 8001036:	4b59      	ldr	r3, [pc, #356]	@ (800119c <comprehensive_cc1201_diagnostic+0x2c8>)
 8001038:	e000      	b.n	800103c <comprehensive_cc1201_diagnostic+0x168>
 800103a:	4b59      	ldr	r3, [pc, #356]	@ (80011a0 <comprehensive_cc1201_diagnostic+0x2cc>)
 800103c:	4619      	mov	r1, r3
 800103e:	4863      	ldr	r0, [pc, #396]	@ (80011cc <comprehensive_cc1201_diagnostic+0x2f8>)
 8001040:	f007 fc62 	bl	8008908 <iprintf>
    
    // 3. Test different SPI byte patterns with CS control
    printf("\n3. RAW SPI BYTE PATTERN TEST:\n\r");
 8001044:	4863      	ldr	r0, [pc, #396]	@ (80011d4 <comprehensive_cc1201_diagnostic+0x300>)
 8001046:	f007 fc5f 	bl	8008908 <iprintf>
    uint8_t test_patterns[] = {0x00, 0xFF, 0x55, 0xAA, 0x3D}; // Last one is NOP command
 800104a:	4a63      	ldr	r2, [pc, #396]	@ (80011d8 <comprehensive_cc1201_diagnostic+0x304>)
 800104c:	f107 031c 	add.w	r3, r7, #28
 8001050:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001054:	6018      	str	r0, [r3, #0]
 8001056:	3304      	adds	r3, #4
 8001058:	7019      	strb	r1, [r3, #0]
    const char* pattern_names[] = {"0x00", "0xFF", "0x55", "0xAA", "NOP(0x3D)"};
 800105a:	4b60      	ldr	r3, [pc, #384]	@ (80011dc <comprehensive_cc1201_diagnostic+0x308>)
 800105c:	f107 0408 	add.w	r4, r7, #8
 8001060:	461d      	mov	r5, r3
 8001062:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001064:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001066:	682b      	ldr	r3, [r5, #0]
 8001068:	6023      	str	r3, [r4, #0]
    
    for (int i = 0; i < 5; i++) {
 800106a:	2300      	movs	r3, #0
 800106c:	627b      	str	r3, [r7, #36]	@ 0x24
 800106e:	e052      	b.n	8001116 <comprehensive_cc1201_diagnostic+0x242>
        uint8_t tx_data = test_patterns[i];
 8001070:	f107 021c 	add.w	r2, r7, #28
 8001074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001076:	4413      	add	r3, r2
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	717b      	strb	r3, [r7, #5]
        uint8_t rx_data = 0x00; // Initialize to 0 this time
 800107c:	2300      	movs	r3, #0
 800107e:	713b      	strb	r3, [r7, #4]
        
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET); // CS LOW
 8001080:	2200      	movs	r2, #0
 8001082:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001086:	4844      	ldr	r0, [pc, #272]	@ (8001198 <comprehensive_cc1201_diagnostic+0x2c4>)
 8001088:	f002 fb22 	bl	80036d0 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800108c:	2001      	movs	r0, #1
 800108e:	f001 fcf5 	bl	8002a7c <HAL_Delay>
        HAL_StatusTypeDef spi_status = HAL_SPI_TransmitReceive(&hspi4, &tx_data, &rx_data, 1, 1000);
 8001092:	1d3a      	adds	r2, r7, #4
 8001094:	1d79      	adds	r1, r7, #5
 8001096:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	2301      	movs	r3, #1
 800109e:	4850      	ldr	r0, [pc, #320]	@ (80011e0 <comprehensive_cc1201_diagnostic+0x30c>)
 80010a0:	f005 fcc2 	bl	8006a28 <HAL_SPI_TransmitReceive>
 80010a4:	4603      	mov	r3, r0
 80010a6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);   // CS HIGH
 80010aa:	2201      	movs	r2, #1
 80010ac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010b0:	4839      	ldr	r0, [pc, #228]	@ (8001198 <comprehensive_cc1201_diagnostic+0x2c4>)
 80010b2:	f002 fb0d 	bl	80036d0 <HAL_GPIO_WritePin>
        
        printf("  %s: TX=0x%02X -> RX=0x%02X (HAL=%d)\n\r", 
 80010b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	3328      	adds	r3, #40	@ 0x28
 80010bc:	443b      	add	r3, r7
 80010be:	f853 1c20 	ldr.w	r1, [r3, #-32]
 80010c2:	797b      	ldrb	r3, [r7, #5]
 80010c4:	461a      	mov	r2, r3
 80010c6:	793b      	ldrb	r3, [r7, #4]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	4603      	mov	r3, r0
 80010d2:	4844      	ldr	r0, [pc, #272]	@ (80011e4 <comprehensive_cc1201_diagnostic+0x310>)
 80010d4:	f007 fc18 	bl	8008908 <iprintf>
               pattern_names[i], tx_data, rx_data, spi_status);
        
        if (rx_data == tx_data) {
 80010d8:	793a      	ldrb	r2, [r7, #4]
 80010da:	797b      	ldrb	r3, [r7, #5]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d103      	bne.n	80010e8 <comprehensive_cc1201_diagnostic+0x214>
            printf("    ⚠ Echo detected - MISO may be shorted to MOSI\n\r");
 80010e0:	4841      	ldr	r0, [pc, #260]	@ (80011e8 <comprehensive_cc1201_diagnostic+0x314>)
 80010e2:	f007 fc11 	bl	8008908 <iprintf>
 80010e6:	e010      	b.n	800110a <comprehensive_cc1201_diagnostic+0x236>
        } else if (rx_data == 0xFF) {
 80010e8:	793b      	ldrb	r3, [r7, #4]
 80010ea:	2bff      	cmp	r3, #255	@ 0xff
 80010ec:	d103      	bne.n	80010f6 <comprehensive_cc1201_diagnostic+0x222>
            printf("    ⚠ MISO stuck HIGH - check power/connections\n\r");
 80010ee:	483f      	ldr	r0, [pc, #252]	@ (80011ec <comprehensive_cc1201_diagnostic+0x318>)
 80010f0:	f007 fc0a 	bl	8008908 <iprintf>
 80010f4:	e009      	b.n	800110a <comprehensive_cc1201_diagnostic+0x236>
        } else if (rx_data == 0x00) {
 80010f6:	793b      	ldrb	r3, [r7, #4]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d103      	bne.n	8001104 <comprehensive_cc1201_diagnostic+0x230>
            printf("    ⚠ MISO stuck LOW - check power/connections\n\r");
 80010fc:	483c      	ldr	r0, [pc, #240]	@ (80011f0 <comprehensive_cc1201_diagnostic+0x31c>)
 80010fe:	f007 fc03 	bl	8008908 <iprintf>
 8001102:	e002      	b.n	800110a <comprehensive_cc1201_diagnostic+0x236>
        } else {
            printf("    ✓ Different response - potential communication\n\r");
 8001104:	483b      	ldr	r0, [pc, #236]	@ (80011f4 <comprehensive_cc1201_diagnostic+0x320>)
 8001106:	f007 fbff 	bl	8008908 <iprintf>
        }
        HAL_Delay(10);
 800110a:	200a      	movs	r0, #10
 800110c:	f001 fcb6 	bl	8002a7c <HAL_Delay>
    for (int i = 0; i < 5; i++) {
 8001110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001112:	3301      	adds	r3, #1
 8001114:	627b      	str	r3, [r7, #36]	@ 0x24
 8001116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001118:	2b04      	cmp	r3, #4
 800111a:	dda9      	ble.n	8001070 <comprehensive_cc1201_diagnostic+0x19c>
    }
    
    // 4. Hardware reset test
    printf("\n4. HARDWARE RESET TEST:\n\r");
 800111c:	4836      	ldr	r0, [pc, #216]	@ (80011f8 <comprehensive_cc1201_diagnostic+0x324>)
 800111e:	f007 fbf3 	bl	8008908 <iprintf>
    printf("  ✓ Hardware RESET pin configured on PD4\n\r");
 8001122:	4836      	ldr	r0, [pc, #216]	@ (80011fc <comprehensive_cc1201_diagnostic+0x328>)
 8001124:	f007 fbf0 	bl	8008908 <iprintf>
    printf("  Testing hardware reset sequence...\n\r");
 8001128:	4835      	ldr	r0, [pc, #212]	@ (8001200 <comprehensive_cc1201_diagnostic+0x32c>)
 800112a:	f007 fbed 	bl	8008908 <iprintf>
    
    // Test reset pin control
    printf("  Current RESET pin state: %s\n\r", HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4) ? "HIGH" : "LOW");
 800112e:	2110      	movs	r1, #16
 8001130:	4820      	ldr	r0, [pc, #128]	@ (80011b4 <comprehensive_cc1201_diagnostic+0x2e0>)
 8001132:	f002 fab5 	bl	80036a0 <HAL_GPIO_ReadPin>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <comprehensive_cc1201_diagnostic+0x26c>
 800113c:	4b17      	ldr	r3, [pc, #92]	@ (800119c <comprehensive_cc1201_diagnostic+0x2c8>)
 800113e:	e000      	b.n	8001142 <comprehensive_cc1201_diagnostic+0x26e>
 8001140:	4b17      	ldr	r3, [pc, #92]	@ (80011a0 <comprehensive_cc1201_diagnostic+0x2cc>)
 8001142:	4619      	mov	r1, r3
 8001144:	482f      	ldr	r0, [pc, #188]	@ (8001204 <comprehensive_cc1201_diagnostic+0x330>)
 8001146:	f007 fbdf 	bl	8008908 <iprintf>
    printf("  Performing reset pulse...\n\r");
 800114a:	482f      	ldr	r0, [pc, #188]	@ (8001208 <comprehensive_cc1201_diagnostic+0x334>)
 800114c:	f007 fbdc 	bl	8008908 <iprintf>
    
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET); // Assert reset
 8001150:	2200      	movs	r2, #0
 8001152:	2110      	movs	r1, #16
 8001154:	4817      	ldr	r0, [pc, #92]	@ (80011b4 <comprehensive_cc1201_diagnostic+0x2e0>)
 8001156:	f002 fabb 	bl	80036d0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800115a:	200a      	movs	r0, #10
 800115c:	f001 fc8e 	bl	8002a7c <HAL_Delay>
    printf("  RESET pin during reset: %s\n\r", HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4) ? "HIGH" : "LOW");
 8001160:	2110      	movs	r1, #16
 8001162:	4814      	ldr	r0, [pc, #80]	@ (80011b4 <comprehensive_cc1201_diagnostic+0x2e0>)
 8001164:	f002 fa9c 	bl	80036a0 <HAL_GPIO_ReadPin>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <comprehensive_cc1201_diagnostic+0x29e>
 800116e:	4b0b      	ldr	r3, [pc, #44]	@ (800119c <comprehensive_cc1201_diagnostic+0x2c8>)
 8001170:	e000      	b.n	8001174 <comprehensive_cc1201_diagnostic+0x2a0>
 8001172:	4b0b      	ldr	r3, [pc, #44]	@ (80011a0 <comprehensive_cc1201_diagnostic+0x2cc>)
 8001174:	4619      	mov	r1, r3
 8001176:	4825      	ldr	r0, [pc, #148]	@ (800120c <comprehensive_cc1201_diagnostic+0x338>)
 8001178:	f007 fbc6 	bl	8008908 <iprintf>
    printf("  MISO pin during reset: %s\n\r", HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13) ? "HIGH" : "LOW");
 800117c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001180:	4805      	ldr	r0, [pc, #20]	@ (8001198 <comprehensive_cc1201_diagnostic+0x2c4>)
 8001182:	f002 fa8d 	bl	80036a0 <HAL_GPIO_ReadPin>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d041      	beq.n	8001210 <comprehensive_cc1201_diagnostic+0x33c>
 800118c:	4b03      	ldr	r3, [pc, #12]	@ (800119c <comprehensive_cc1201_diagnostic+0x2c8>)
 800118e:	e040      	b.n	8001212 <comprehensive_cc1201_diagnostic+0x33e>
 8001190:	08009a78 	.word	0x08009a78
 8001194:	08009aac 	.word	0x08009aac
 8001198:	58021000 	.word	0x58021000
 800119c:	08009acc 	.word	0x08009acc
 80011a0:	08009ad4 	.word	0x08009ad4
 80011a4:	08009ad8 	.word	0x08009ad8
 80011a8:	08009af0 	.word	0x08009af0
 80011ac:	08009b08 	.word	0x08009b08
 80011b0:	08009b20 	.word	0x08009b20
 80011b4:	58020c00 	.word	0x58020c00
 80011b8:	08009b38 	.word	0x08009b38
 80011bc:	08009b50 	.word	0x08009b50
 80011c0:	08009b68 	.word	0x08009b68
 80011c4:	08009b88 	.word	0x08009b88
 80011c8:	08009ba0 	.word	0x08009ba0
 80011cc:	08009bb0 	.word	0x08009bb0
 80011d0:	08009bc4 	.word	0x08009bc4
 80011d4:	08009bdc 	.word	0x08009bdc
 80011d8:	0800a17c 	.word	0x0800a17c
 80011dc:	0800a1b0 	.word	0x0800a1b0
 80011e0:	240000b8 	.word	0x240000b8
 80011e4:	08009c00 	.word	0x08009c00
 80011e8:	08009c28 	.word	0x08009c28
 80011ec:	08009c60 	.word	0x08009c60
 80011f0:	08009c94 	.word	0x08009c94
 80011f4:	08009cc8 	.word	0x08009cc8
 80011f8:	08009d00 	.word	0x08009d00
 80011fc:	08009d1c 	.word	0x08009d1c
 8001200:	08009d4c 	.word	0x08009d4c
 8001204:	08009d74 	.word	0x08009d74
 8001208:	08009d94 	.word	0x08009d94
 800120c:	08009db4 	.word	0x08009db4
 8001210:	4b76      	ldr	r3, [pc, #472]	@ (80013ec <comprehensive_cc1201_diagnostic+0x518>)
 8001212:	4619      	mov	r1, r3
 8001214:	4876      	ldr	r0, [pc, #472]	@ (80013f0 <comprehensive_cc1201_diagnostic+0x51c>)
 8001216:	f007 fb77 	bl	8008908 <iprintf>
    
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);   // Release reset
 800121a:	2201      	movs	r2, #1
 800121c:	2110      	movs	r1, #16
 800121e:	4875      	ldr	r0, [pc, #468]	@ (80013f4 <comprehensive_cc1201_diagnostic+0x520>)
 8001220:	f002 fa56 	bl	80036d0 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8001224:	2032      	movs	r0, #50	@ 0x32
 8001226:	f001 fc29 	bl	8002a7c <HAL_Delay>
    printf("  RESET pin after reset: %s\n\r", HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4) ? "HIGH" : "LOW");
 800122a:	2110      	movs	r1, #16
 800122c:	4871      	ldr	r0, [pc, #452]	@ (80013f4 <comprehensive_cc1201_diagnostic+0x520>)
 800122e:	f002 fa37 	bl	80036a0 <HAL_GPIO_ReadPin>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <comprehensive_cc1201_diagnostic+0x368>
 8001238:	4b6f      	ldr	r3, [pc, #444]	@ (80013f8 <comprehensive_cc1201_diagnostic+0x524>)
 800123a:	e000      	b.n	800123e <comprehensive_cc1201_diagnostic+0x36a>
 800123c:	4b6b      	ldr	r3, [pc, #428]	@ (80013ec <comprehensive_cc1201_diagnostic+0x518>)
 800123e:	4619      	mov	r1, r3
 8001240:	486e      	ldr	r0, [pc, #440]	@ (80013fc <comprehensive_cc1201_diagnostic+0x528>)
 8001242:	f007 fb61 	bl	8008908 <iprintf>
    printf("  MISO pin after reset: %s\n\r", HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13) ? "HIGH" : "LOW");
 8001246:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800124a:	486d      	ldr	r0, [pc, #436]	@ (8001400 <comprehensive_cc1201_diagnostic+0x52c>)
 800124c:	f002 fa28 	bl	80036a0 <HAL_GPIO_ReadPin>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <comprehensive_cc1201_diagnostic+0x386>
 8001256:	4b68      	ldr	r3, [pc, #416]	@ (80013f8 <comprehensive_cc1201_diagnostic+0x524>)
 8001258:	e000      	b.n	800125c <comprehensive_cc1201_diagnostic+0x388>
 800125a:	4b64      	ldr	r3, [pc, #400]	@ (80013ec <comprehensive_cc1201_diagnostic+0x518>)
 800125c:	4619      	mov	r1, r3
 800125e:	4869      	ldr	r0, [pc, #420]	@ (8001404 <comprehensive_cc1201_diagnostic+0x530>)
 8001260:	f007 fb52 	bl	8008908 <iprintf>
    
    // Test communication after reset
    uint8_t reset_test_tx = 0x3D, reset_test_rx = 0x00;
 8001264:	233d      	movs	r3, #61	@ 0x3d
 8001266:	71fb      	strb	r3, [r7, #7]
 8001268:	2300      	movs	r3, #0
 800126a:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 800126c:	2200      	movs	r2, #0
 800126e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001272:	4863      	ldr	r0, [pc, #396]	@ (8001400 <comprehensive_cc1201_diagnostic+0x52c>)
 8001274:	f002 fa2c 	bl	80036d0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001278:	2001      	movs	r0, #1
 800127a:	f001 fbff 	bl	8002a7c <HAL_Delay>
    HAL_StatusTypeDef reset_comm_status = HAL_SPI_TransmitReceive(&hspi4, &reset_test_tx, &reset_test_rx, 1, 1000);
 800127e:	1dba      	adds	r2, r7, #6
 8001280:	1df9      	adds	r1, r7, #7
 8001282:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	2301      	movs	r3, #1
 800128a:	485f      	ldr	r0, [pc, #380]	@ (8001408 <comprehensive_cc1201_diagnostic+0x534>)
 800128c:	f005 fbcc 	bl	8006a28 <HAL_SPI_TransmitReceive>
 8001290:	4603      	mov	r3, r0
 8001292:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8001296:	2201      	movs	r2, #1
 8001298:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800129c:	4858      	ldr	r0, [pc, #352]	@ (8001400 <comprehensive_cc1201_diagnostic+0x52c>)
 800129e:	f002 fa17 	bl	80036d0 <HAL_GPIO_WritePin>
    printf("  Post-reset communication: TX=0x%02X -> RX=0x%02X (HAL=%d)\n\r", 
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	4619      	mov	r1, r3
 80012a6:	79bb      	ldrb	r3, [r7, #6]
 80012a8:	461a      	mov	r2, r3
 80012aa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80012ae:	4857      	ldr	r0, [pc, #348]	@ (800140c <comprehensive_cc1201_diagnostic+0x538>)
 80012b0:	f007 fb2a 	bl	8008908 <iprintf>
           reset_test_tx, reset_test_rx, reset_comm_status);
    
    printf("\n5. POWER CONSIDERATIONS:\n\r");
 80012b4:	4856      	ldr	r0, [pc, #344]	@ (8001410 <comprehensive_cc1201_diagnostic+0x53c>)
 80012b6:	f007 fb27 	bl	8008908 <iprintf>
    printf("  ⚠ No power enable pin defined in current configuration\n\r");
 80012ba:	4856      	ldr	r0, [pc, #344]	@ (8001414 <comprehensive_cc1201_diagnostic+0x540>)
 80012bc:	f007 fb24 	bl	8008908 <iprintf>
    printf("  → Check if CC1201 has separate VDD supply\n\r");
 80012c0:	4855      	ldr	r0, [pc, #340]	@ (8001418 <comprehensive_cc1201_diagnostic+0x544>)
 80012c2:	f007 fb21 	bl	8008908 <iprintf>
    printf("  → Verify CC1201 crystal oscillator is working\n\r");
 80012c6:	4855      	ldr	r0, [pc, #340]	@ (800141c <comprehensive_cc1201_diagnostic+0x548>)
 80012c8:	f007 fb1e 	bl	8008908 <iprintf>
    
    // 6. Try different SPI clock speeds
    printf("\n6. SPI CLOCK SPEED TEST:\n\r");
 80012cc:	4854      	ldr	r0, [pc, #336]	@ (8001420 <comprehensive_cc1201_diagnostic+0x54c>)
 80012ce:	f007 fb1b 	bl	8008908 <iprintf>
    printf("  Current SPI prescaler: %lu\n\r", (unsigned long)hspi4.Init.BaudRatePrescaler);
 80012d2:	4b4d      	ldr	r3, [pc, #308]	@ (8001408 <comprehensive_cc1201_diagnostic+0x534>)
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	4619      	mov	r1, r3
 80012d8:	4852      	ldr	r0, [pc, #328]	@ (8001424 <comprehensive_cc1201_diagnostic+0x550>)
 80012da:	f007 fb15 	bl	8008908 <iprintf>
    
    // Test with slower clock
    printf("  Testing with slower clock (prescaler 32)...\n\r");
 80012de:	4852      	ldr	r0, [pc, #328]	@ (8001428 <comprehensive_cc1201_diagnostic+0x554>)
 80012e0:	f007 fb12 	bl	8008908 <iprintf>
    hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80012e4:	4b48      	ldr	r3, [pc, #288]	@ (8001408 <comprehensive_cc1201_diagnostic+0x534>)
 80012e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012ea:	61da      	str	r2, [r3, #28]
    if (HAL_SPI_Init(&hspi4) == HAL_OK) {
 80012ec:	4846      	ldr	r0, [pc, #280]	@ (8001408 <comprehensive_cc1201_diagnostic+0x534>)
 80012ee:	f005 f889 	bl	8006404 <HAL_SPI_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d12d      	bne.n	8001354 <comprehensive_cc1201_diagnostic+0x480>
        uint8_t tx_slow = 0x3D, rx_slow = 0;
 80012f8:	233d      	movs	r3, #61	@ 0x3d
 80012fa:	70fb      	strb	r3, [r7, #3]
 80012fc:	2300      	movs	r3, #0
 80012fe:	70bb      	strb	r3, [r7, #2]
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8001300:	2200      	movs	r2, #0
 8001302:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001306:	483e      	ldr	r0, [pc, #248]	@ (8001400 <comprehensive_cc1201_diagnostic+0x52c>)
 8001308:	f002 f9e2 	bl	80036d0 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800130c:	2001      	movs	r0, #1
 800130e:	f001 fbb5 	bl	8002a7c <HAL_Delay>
        HAL_StatusTypeDef slow_status = HAL_SPI_TransmitReceive(&hspi4, &tx_slow, &rx_slow, 1, 1000);
 8001312:	1cba      	adds	r2, r7, #2
 8001314:	1cf9      	adds	r1, r7, #3
 8001316:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	2301      	movs	r3, #1
 800131e:	483a      	ldr	r0, [pc, #232]	@ (8001408 <comprehensive_cc1201_diagnostic+0x534>)
 8001320:	f005 fb82 	bl	8006a28 <HAL_SPI_TransmitReceive>
 8001324:	4603      	mov	r3, r0
 8001326:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 800132a:	2201      	movs	r2, #1
 800132c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001330:	4833      	ldr	r0, [pc, #204]	@ (8001400 <comprehensive_cc1201_diagnostic+0x52c>)
 8001332:	f002 f9cd 	bl	80036d0 <HAL_GPIO_WritePin>
        printf("    Slow NOP: TX=0x%02X -> RX=0x%02X (HAL=%d)\n\r", tx_slow, rx_slow, slow_status);
 8001336:	78fb      	ldrb	r3, [r7, #3]
 8001338:	4619      	mov	r1, r3
 800133a:	78bb      	ldrb	r3, [r7, #2]
 800133c:	461a      	mov	r2, r3
 800133e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001342:	483a      	ldr	r0, [pc, #232]	@ (800142c <comprehensive_cc1201_diagnostic+0x558>)
 8001344:	f007 fae0 	bl	8008908 <iprintf>
        
        // Restore original speed
        hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001348:	4b2f      	ldr	r3, [pc, #188]	@ (8001408 <comprehensive_cc1201_diagnostic+0x534>)
 800134a:	2200      	movs	r2, #0
 800134c:	61da      	str	r2, [r3, #28]
        HAL_SPI_Init(&hspi4);
 800134e:	482e      	ldr	r0, [pc, #184]	@ (8001408 <comprehensive_cc1201_diagnostic+0x534>)
 8001350:	f005 f858 	bl	8006404 <HAL_SPI_Init>
    }
    
    // 7. Final pin state check
    printf("\n7. FINAL PIN STATE CHECK:\n\r");
 8001354:	4836      	ldr	r0, [pc, #216]	@ (8001430 <comprehensive_cc1201_diagnostic+0x55c>)
 8001356:	f007 fad7 	bl	8008908 <iprintf>
    printf("  CS Pin (PE11): %s\n\r", HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_11) ? "HIGH" : "LOW");
 800135a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800135e:	4828      	ldr	r0, [pc, #160]	@ (8001400 <comprehensive_cc1201_diagnostic+0x52c>)
 8001360:	f002 f99e 	bl	80036a0 <HAL_GPIO_ReadPin>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <comprehensive_cc1201_diagnostic+0x49a>
 800136a:	4b23      	ldr	r3, [pc, #140]	@ (80013f8 <comprehensive_cc1201_diagnostic+0x524>)
 800136c:	e000      	b.n	8001370 <comprehensive_cc1201_diagnostic+0x49c>
 800136e:	4b1f      	ldr	r3, [pc, #124]	@ (80013ec <comprehensive_cc1201_diagnostic+0x518>)
 8001370:	4619      	mov	r1, r3
 8001372:	4830      	ldr	r0, [pc, #192]	@ (8001434 <comprehensive_cc1201_diagnostic+0x560>)
 8001374:	f007 fac8 	bl	8008908 <iprintf>
    printf("  MISO Pin (PE13): %s\n\r", HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_13) ? "HIGH" : "LOW");
 8001378:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800137c:	4820      	ldr	r0, [pc, #128]	@ (8001400 <comprehensive_cc1201_diagnostic+0x52c>)
 800137e:	f002 f98f 	bl	80036a0 <HAL_GPIO_ReadPin>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <comprehensive_cc1201_diagnostic+0x4b8>
 8001388:	4b1b      	ldr	r3, [pc, #108]	@ (80013f8 <comprehensive_cc1201_diagnostic+0x524>)
 800138a:	e000      	b.n	800138e <comprehensive_cc1201_diagnostic+0x4ba>
 800138c:	4b17      	ldr	r3, [pc, #92]	@ (80013ec <comprehensive_cc1201_diagnostic+0x518>)
 800138e:	4619      	mov	r1, r3
 8001390:	4829      	ldr	r0, [pc, #164]	@ (8001438 <comprehensive_cc1201_diagnostic+0x564>)
 8001392:	f007 fab9 	bl	8008908 <iprintf>
    printf("  INT Pin (PD5): %s\n\r", HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5) ? "HIGH" : "LOW");
 8001396:	2120      	movs	r1, #32
 8001398:	4816      	ldr	r0, [pc, #88]	@ (80013f4 <comprehensive_cc1201_diagnostic+0x520>)
 800139a:	f002 f981 	bl	80036a0 <HAL_GPIO_ReadPin>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <comprehensive_cc1201_diagnostic+0x4d4>
 80013a4:	4b14      	ldr	r3, [pc, #80]	@ (80013f8 <comprehensive_cc1201_diagnostic+0x524>)
 80013a6:	e000      	b.n	80013aa <comprehensive_cc1201_diagnostic+0x4d6>
 80013a8:	4b10      	ldr	r3, [pc, #64]	@ (80013ec <comprehensive_cc1201_diagnostic+0x518>)
 80013aa:	4619      	mov	r1, r3
 80013ac:	4823      	ldr	r0, [pc, #140]	@ (800143c <comprehensive_cc1201_diagnostic+0x568>)
 80013ae:	f007 faab 	bl	8008908 <iprintf>
    
    printf("=== HARDWARE DIAGNOSTIC COMPLETE ===\n\r");
 80013b2:	4823      	ldr	r0, [pc, #140]	@ (8001440 <comprehensive_cc1201_diagnostic+0x56c>)
 80013b4:	f007 faa8 	bl	8008908 <iprintf>
    printf("\nRECOMMENDATIONS:\n\r");
 80013b8:	4822      	ldr	r0, [pc, #136]	@ (8001444 <comprehensive_cc1201_diagnostic+0x570>)
 80013ba:	f007 faa5 	bl	8008908 <iprintf>
    printf("→ If MISO is stuck HIGH: Check CC1201 power supply\n\r");
 80013be:	4822      	ldr	r0, [pc, #136]	@ (8001448 <comprehensive_cc1201_diagnostic+0x574>)
 80013c0:	f007 faa2 	bl	8008908 <iprintf>
    printf("→ If MISO is stuck LOW: Check ground connections\n\r");
 80013c4:	4821      	ldr	r0, [pc, #132]	@ (800144c <comprehensive_cc1201_diagnostic+0x578>)
 80013c6:	f007 fa9f 	bl	8008908 <iprintf>
    printf("→ If echoing MOSI: Check for short circuits\n\r");
 80013ca:	4821      	ldr	r0, [pc, #132]	@ (8001450 <comprehensive_cc1201_diagnostic+0x57c>)
 80013cc:	f007 fa9c 	bl	8008908 <iprintf>
    printf("→ Consider adding hardware reset pin control\n\r");
 80013d0:	4820      	ldr	r0, [pc, #128]	@ (8001454 <comprehensive_cc1201_diagnostic+0x580>)
 80013d2:	f007 fa99 	bl	8008908 <iprintf>
    printf("→ Verify CC1201 crystal oscillator is populated and working\n\r");
 80013d6:	4820      	ldr	r0, [pc, #128]	@ (8001458 <comprehensive_cc1201_diagnostic+0x584>)
 80013d8:	f007 fa96 	bl	8008908 <iprintf>
    printf("→ Check CC1201 datasheet for proper power-up sequence\n\r");
 80013dc:	481f      	ldr	r0, [pc, #124]	@ (800145c <comprehensive_cc1201_diagnostic+0x588>)
 80013de:	f007 fa93 	bl	8008908 <iprintf>
}
 80013e2:	bf00      	nop
 80013e4:	3728      	adds	r7, #40	@ 0x28
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bdb0      	pop	{r4, r5, r7, pc}
 80013ea:	bf00      	nop
 80013ec:	08009ad4 	.word	0x08009ad4
 80013f0:	08009dd4 	.word	0x08009dd4
 80013f4:	58020c00 	.word	0x58020c00
 80013f8:	08009acc 	.word	0x08009acc
 80013fc:	08009df4 	.word	0x08009df4
 8001400:	58021000 	.word	0x58021000
 8001404:	08009e14 	.word	0x08009e14
 8001408:	240000b8 	.word	0x240000b8
 800140c:	08009e34 	.word	0x08009e34
 8001410:	08009e74 	.word	0x08009e74
 8001414:	08009e90 	.word	0x08009e90
 8001418:	08009ed0 	.word	0x08009ed0
 800141c:	08009f00 	.word	0x08009f00
 8001420:	08009f34 	.word	0x08009f34
 8001424:	08009f50 	.word	0x08009f50
 8001428:	08009f70 	.word	0x08009f70
 800142c:	08009fa0 	.word	0x08009fa0
 8001430:	08009fd0 	.word	0x08009fd0
 8001434:	08009ad8 	.word	0x08009ad8
 8001438:	08009b08 	.word	0x08009b08
 800143c:	08009b50 	.word	0x08009b50
 8001440:	08009ff0 	.word	0x08009ff0
 8001444:	0800a018 	.word	0x0800a018
 8001448:	0800a02c 	.word	0x0800a02c
 800144c:	0800a064 	.word	0x0800a064
 8001450:	0800a09c 	.word	0x0800a09c
 8001454:	0800a0cc 	.word	0x0800a0cc
 8001458:	0800a100 	.word	0x0800a100
 800145c:	0800a140 	.word	0x0800a140

08001460 <test_buffer_operations>:

// Test 1: Buffer Read/Write Operations
void test_buffer_operations(void) {
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
    printf("\n=== TEST 1: BUFFER READ/WRITE OPERATIONS ===\n\r");
 8001466:	4864      	ldr	r0, [pc, #400]	@ (80015f8 <test_buffer_operations+0x198>)
 8001468:	f007 fa4e 	bl	8008908 <iprintf>
    
    HAL_StatusTypeDef status;
    uint8_t status_byte = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	75bb      	strb	r3, [r7, #22]
    
    // First, ensure we're in IDLE state and flush FIFOs
    printf("1. Preparing for buffer tests...\n\r");
 8001470:	4862      	ldr	r0, [pc, #392]	@ (80015fc <test_buffer_operations+0x19c>)
 8001472:	f007 fa49 	bl	8008908 <iprintf>
    status = CC1201_EnterIdleMode(&status_byte);
 8001476:	f107 0316 	add.w	r3, r7, #22
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f959 	bl	8000732 <CC1201_EnterIdleMode>
 8001480:	4603      	mov	r3, r0
 8001482:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK) {
 8001484:	7dfb      	ldrb	r3, [r7, #23]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d104      	bne.n	8001494 <test_buffer_operations+0x34>
        print_cc1201_status(status_byte, "IDLE_MODE");
 800148a:	7dbb      	ldrb	r3, [r7, #22]
 800148c:	495c      	ldr	r1, [pc, #368]	@ (8001600 <test_buffer_operations+0x1a0>)
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fbfe 	bl	8000c90 <print_cc1201_status>
    }
    
    // Flush both FIFOs
    CC1201_FlushTxFifo(&status_byte);
 8001494:	f107 0316 	add.w	r3, r7, #22
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff f964 	bl	8000766 <CC1201_FlushTxFifo>
    print_cc1201_status(status_byte, "FLUSH_TX");
 800149e:	7dbb      	ldrb	r3, [r7, #22]
 80014a0:	4958      	ldr	r1, [pc, #352]	@ (8001604 <test_buffer_operations+0x1a4>)
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fbf4 	bl	8000c90 <print_cc1201_status>
    CC1201_FlushRxFifo(&status_byte);
 80014a8:	f107 0316 	add.w	r3, r7, #22
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff f94d 	bl	800074c <CC1201_FlushRxFifo>
    print_cc1201_status(status_byte, "FLUSH_RX");
 80014b2:	7dbb      	ldrb	r3, [r7, #22]
 80014b4:	4954      	ldr	r1, [pc, #336]	@ (8001608 <test_buffer_operations+0x1a8>)
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fbea 	bl	8000c90 <print_cc1201_status>
    
    // Test TX FIFO write operations
    printf("\n2. Testing TX FIFO Write Operations:\n\r");
 80014bc:	4853      	ldr	r0, [pc, #332]	@ (800160c <test_buffer_operations+0x1ac>)
 80014be:	f007 fa23 	bl	8008908 <iprintf>
    
    // Test pattern 1: Sequential bytes
    uint8_t test_data_1[] = {0x01, 0x02, 0x03, 0x04, 0x05};
 80014c2:	4a53      	ldr	r2, [pc, #332]	@ (8001610 <test_buffer_operations+0x1b0>)
 80014c4:	f107 0310 	add.w	r3, r7, #16
 80014c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014cc:	6018      	str	r0, [r3, #0]
 80014ce:	3304      	adds	r3, #4
 80014d0:	7019      	strb	r1, [r3, #0]
    status = CC1201_WriteTxFifo(test_data_1, sizeof(test_data_1), &status_byte);
 80014d2:	f107 0216 	add.w	r2, r7, #22
 80014d6:	f107 0310 	add.w	r3, r7, #16
 80014da:	2105      	movs	r1, #5
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fa21 	bl	8000924 <CC1201_WriteTxFifo>
 80014e2:	4603      	mov	r3, r0
 80014e4:	75fb      	strb	r3, [r7, #23]
    printf("  Write 5 bytes [01,02,03,04,05]: HAL=%d ", status);
 80014e6:	7dfb      	ldrb	r3, [r7, #23]
 80014e8:	4619      	mov	r1, r3
 80014ea:	484a      	ldr	r0, [pc, #296]	@ (8001614 <test_buffer_operations+0x1b4>)
 80014ec:	f007 fa0c 	bl	8008908 <iprintf>
    if (status == HAL_OK) {
 80014f0:	7dfb      	ldrb	r3, [r7, #23]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d10f      	bne.n	8001516 <test_buffer_operations+0xb6>
        print_cc1201_status(status_byte, "TX_WRITE");
 80014f6:	7dbb      	ldrb	r3, [r7, #22]
 80014f8:	4947      	ldr	r1, [pc, #284]	@ (8001618 <test_buffer_operations+0x1b8>)
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fbc8 	bl	8000c90 <print_cc1201_status>
        
        // Check TX FIFO count
        uint8_t tx_count = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	70bb      	strb	r3, [r7, #2]
        CC1201_GetNumTXBytes(&tx_count);
 8001504:	1cbb      	adds	r3, r7, #2
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff f9fe 	bl	8000908 <CC1201_GetNumTXBytes>
        printf("  TX FIFO count: %d bytes\n\r", tx_count);
 800150c:	78bb      	ldrb	r3, [r7, #2]
 800150e:	4619      	mov	r1, r3
 8001510:	4842      	ldr	r0, [pc, #264]	@ (800161c <test_buffer_operations+0x1bc>)
 8001512:	f007 f9f9 	bl	8008908 <iprintf>
    }
    
    // Test single byte write
    printf("\n3. Testing Single Byte Write:\n\r");
 8001516:	4842      	ldr	r0, [pc, #264]	@ (8001620 <test_buffer_operations+0x1c0>)
 8001518:	f007 f9f6 	bl	8008908 <iprintf>
    status = CC1201_WriteSingleTxFifo(0xAA, &status_byte);
 800151c:	f107 0316 	add.w	r3, r7, #22
 8001520:	4619      	mov	r1, r3
 8001522:	20aa      	movs	r0, #170	@ 0xaa
 8001524:	f7ff fb66 	bl	8000bf4 <CC1201_WriteSingleTxFifo>
 8001528:	4603      	mov	r3, r0
 800152a:	75fb      	strb	r3, [r7, #23]
    printf("  Write single byte [AA]: HAL=%d ", status);
 800152c:	7dfb      	ldrb	r3, [r7, #23]
 800152e:	4619      	mov	r1, r3
 8001530:	483c      	ldr	r0, [pc, #240]	@ (8001624 <test_buffer_operations+0x1c4>)
 8001532:	f007 f9e9 	bl	8008908 <iprintf>
    if (status == HAL_OK) {
 8001536:	7dfb      	ldrb	r3, [r7, #23]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d10f      	bne.n	800155c <test_buffer_operations+0xfc>
        print_cc1201_status(status_byte, "SINGLE_WRITE");
 800153c:	7dbb      	ldrb	r3, [r7, #22]
 800153e:	493a      	ldr	r1, [pc, #232]	@ (8001628 <test_buffer_operations+0x1c8>)
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fba5 	bl	8000c90 <print_cc1201_status>
        
        uint8_t tx_count = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	707b      	strb	r3, [r7, #1]
        CC1201_GetNumTXBytes(&tx_count);
 800154a:	1c7b      	adds	r3, r7, #1
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff f9db 	bl	8000908 <CC1201_GetNumTXBytes>
        printf("  TX FIFO count after single write: %d bytes\n\r", tx_count);
 8001552:	787b      	ldrb	r3, [r7, #1]
 8001554:	4619      	mov	r1, r3
 8001556:	4835      	ldr	r0, [pc, #212]	@ (800162c <test_buffer_operations+0x1cc>)
 8001558:	f007 f9d6 	bl	8008908 <iprintf>
    }
    
    // Test RX FIFO read (should be empty)
    printf("\n4. Testing RX FIFO Read (should be empty):\n\r");
 800155c:	4834      	ldr	r0, [pc, #208]	@ (8001630 <test_buffer_operations+0x1d0>)
 800155e:	f007 f9d3 	bl	8008908 <iprintf>
    uint8_t rx_buffer[10] = {0};
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	811a      	strh	r2, [r3, #8]
    status = CC1201_ReadRxFifo(rx_buffer, 1, &status_byte);
 800156c:	f107 0216 	add.w	r2, r7, #22
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	2101      	movs	r1, #1
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fa7f 	bl	8000a78 <CC1201_ReadRxFifo>
 800157a:	4603      	mov	r3, r0
 800157c:	75fb      	strb	r3, [r7, #23]
    printf("  Read 1 byte from RX FIFO: HAL=%d ", status);
 800157e:	7dfb      	ldrb	r3, [r7, #23]
 8001580:	4619      	mov	r1, r3
 8001582:	482c      	ldr	r0, [pc, #176]	@ (8001634 <test_buffer_operations+0x1d4>)
 8001584:	f007 f9c0 	bl	8008908 <iprintf>
    if (status == HAL_OK) {
 8001588:	7dfb      	ldrb	r3, [r7, #23]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d114      	bne.n	80015b8 <test_buffer_operations+0x158>
        print_cc1201_status(status_byte, "RX_READ");
 800158e:	7dbb      	ldrb	r3, [r7, #22]
 8001590:	4929      	ldr	r1, [pc, #164]	@ (8001638 <test_buffer_operations+0x1d8>)
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fb7c 	bl	8000c90 <print_cc1201_status>
        printf("  Read data: 0x%02X\n\r", rx_buffer[0]);
 8001598:	793b      	ldrb	r3, [r7, #4]
 800159a:	4619      	mov	r1, r3
 800159c:	4827      	ldr	r0, [pc, #156]	@ (800163c <test_buffer_operations+0x1dc>)
 800159e:	f007 f9b3 	bl	8008908 <iprintf>
        
        uint8_t rx_count = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	703b      	strb	r3, [r7, #0]
        CC1201_GetNumRXBytes(&rx_count);
 80015a6:	463b      	mov	r3, r7
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff f99f 	bl	80008ec <CC1201_GetNumRXBytes>
        printf("  RX FIFO count: %d bytes\n\r", rx_count);
 80015ae:	783b      	ldrb	r3, [r7, #0]
 80015b0:	4619      	mov	r1, r3
 80015b2:	4823      	ldr	r0, [pc, #140]	@ (8001640 <test_buffer_operations+0x1e0>)
 80015b4:	f007 f9a8 	bl	8008908 <iprintf>
    }
    
    // Clean up - flush TX FIFO
    printf("\n5. Cleanup - Flushing TX FIFO:\n\r");
 80015b8:	4822      	ldr	r0, [pc, #136]	@ (8001644 <test_buffer_operations+0x1e4>)
 80015ba:	f007 f9a5 	bl	8008908 <iprintf>
    CC1201_FlushTxFifo(&status_byte);
 80015be:	f107 0316 	add.w	r3, r7, #22
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff f8cf 	bl	8000766 <CC1201_FlushTxFifo>
    print_cc1201_status(status_byte, "CLEANUP_FLUSH");
 80015c8:	7dbb      	ldrb	r3, [r7, #22]
 80015ca:	491f      	ldr	r1, [pc, #124]	@ (8001648 <test_buffer_operations+0x1e8>)
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fb5f 	bl	8000c90 <print_cc1201_status>
    
    uint8_t final_tx_count = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	70fb      	strb	r3, [r7, #3]
    CC1201_GetNumTXBytes(&final_tx_count);
 80015d6:	1cfb      	adds	r3, r7, #3
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff f995 	bl	8000908 <CC1201_GetNumTXBytes>
    printf("  Final TX FIFO count: %d bytes\n\r", final_tx_count);
 80015de:	78fb      	ldrb	r3, [r7, #3]
 80015e0:	4619      	mov	r1, r3
 80015e2:	481a      	ldr	r0, [pc, #104]	@ (800164c <test_buffer_operations+0x1ec>)
 80015e4:	f007 f990 	bl	8008908 <iprintf>
    
    printf("=== BUFFER TEST COMPLETE ===\n\r");
 80015e8:	4819      	ldr	r0, [pc, #100]	@ (8001650 <test_buffer_operations+0x1f0>)
 80015ea:	f007 f98d 	bl	8008908 <iprintf>
}
 80015ee:	bf00      	nop
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	0800a1c4 	.word	0x0800a1c4
 80015fc:	0800a1f4 	.word	0x0800a1f4
 8001600:	0800a218 	.word	0x0800a218
 8001604:	0800a224 	.word	0x0800a224
 8001608:	0800a230 	.word	0x0800a230
 800160c:	0800a23c 	.word	0x0800a23c
 8001610:	0800a448 	.word	0x0800a448
 8001614:	0800a264 	.word	0x0800a264
 8001618:	0800a290 	.word	0x0800a290
 800161c:	0800a29c 	.word	0x0800a29c
 8001620:	0800a2b8 	.word	0x0800a2b8
 8001624:	0800a2dc 	.word	0x0800a2dc
 8001628:	0800a300 	.word	0x0800a300
 800162c:	0800a310 	.word	0x0800a310
 8001630:	0800a340 	.word	0x0800a340
 8001634:	0800a370 	.word	0x0800a370
 8001638:	0800a394 	.word	0x0800a394
 800163c:	0800a39c 	.word	0x0800a39c
 8001640:	0800a3b4 	.word	0x0800a3b4
 8001644:	0800a3d0 	.word	0x0800a3d0
 8001648:	0800a3f4 	.word	0x0800a3f4
 800164c:	0800a404 	.word	0x0800a404
 8001650:	0800a428 	.word	0x0800a428

08001654 <test_state_changes>:

// Test 2: State Change Operations
void test_state_changes(void) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
    printf("\n=== TEST 2: STATE CHANGE OPERATIONS ===\n\r");
 800165a:	486c      	ldr	r0, [pc, #432]	@ (800180c <test_state_changes+0x1b8>)
 800165c:	f007 f954 	bl	8008908 <iprintf>
    
    HAL_StatusTypeDef status;
    uint8_t status_byte = 0;
 8001660:	2300      	movs	r3, #0
 8001662:	71bb      	strb	r3, [r7, #6]
    uint8_t marc_state = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	717b      	strb	r3, [r7, #5]
    
    // Test 1: IDLE State
    printf("1. Testing IDLE State:\n\r");
 8001668:	4869      	ldr	r0, [pc, #420]	@ (8001810 <test_state_changes+0x1bc>)
 800166a:	f007 f94d 	bl	8008908 <iprintf>
    status = CC1201_EnterIdleMode(&status_byte);
 800166e:	1dbb      	adds	r3, r7, #6
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff f85e 	bl	8000732 <CC1201_EnterIdleMode>
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
    printf("  Enter IDLE: HAL=%d ", status);
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	4619      	mov	r1, r3
 800167e:	4865      	ldr	r0, [pc, #404]	@ (8001814 <test_state_changes+0x1c0>)
 8001680:	f007 f942 	bl	8008908 <iprintf>
    if (status == HAL_OK) {
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10d      	bne.n	80016a6 <test_state_changes+0x52>
        print_cc1201_status(status_byte, "IDLE");
 800168a:	79bb      	ldrb	r3, [r7, #6]
 800168c:	4962      	ldr	r1, [pc, #392]	@ (8001818 <test_state_changes+0x1c4>)
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fafe 	bl	8000c90 <print_cc1201_status>
        CC1201_ReadMARCState(&marc_state);
 8001694:	1d7b      	adds	r3, r7, #5
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff f91a 	bl	80008d0 <CC1201_ReadMARCState>
        printf("  MARC State: 0x%02X\n\r", marc_state);
 800169c:	797b      	ldrb	r3, [r7, #5]
 800169e:	4619      	mov	r1, r3
 80016a0:	485e      	ldr	r0, [pc, #376]	@ (800181c <test_state_changes+0x1c8>)
 80016a2:	f007 f931 	bl	8008908 <iprintf>
    }
    HAL_Delay(50);
 80016a6:	2032      	movs	r0, #50	@ 0x32
 80016a8:	f001 f9e8 	bl	8002a7c <HAL_Delay>
    
    // Test 2: RX State
    printf("\n2. Testing RX State:\n\r");
 80016ac:	485c      	ldr	r0, [pc, #368]	@ (8001820 <test_state_changes+0x1cc>)
 80016ae:	f007 f92b 	bl	8008908 <iprintf>
    status = CC1201_EnterRxMode(&status_byte);
 80016b2:	1dbb      	adds	r3, r7, #6
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff f822 	bl	80006fe <CC1201_EnterRxMode>
 80016ba:	4603      	mov	r3, r0
 80016bc:	71fb      	strb	r3, [r7, #7]
    printf("  Enter RX: HAL=%d ", status);
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	4619      	mov	r1, r3
 80016c2:	4858      	ldr	r0, [pc, #352]	@ (8001824 <test_state_changes+0x1d0>)
 80016c4:	f007 f920 	bl	8008908 <iprintf>
    if (status == HAL_OK) {
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d110      	bne.n	80016f0 <test_state_changes+0x9c>
        print_cc1201_status(status_byte, "RX");
 80016ce:	79bb      	ldrb	r3, [r7, #6]
 80016d0:	4955      	ldr	r1, [pc, #340]	@ (8001828 <test_state_changes+0x1d4>)
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fadc 	bl	8000c90 <print_cc1201_status>
        HAL_Delay(100); // Stay in RX for a moment
 80016d8:	2064      	movs	r0, #100	@ 0x64
 80016da:	f001 f9cf 	bl	8002a7c <HAL_Delay>
        CC1201_ReadMARCState(&marc_state);
 80016de:	1d7b      	adds	r3, r7, #5
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff f8f5 	bl	80008d0 <CC1201_ReadMARCState>
        printf("  MARC State after delay: 0x%02X\n\r", marc_state);
 80016e6:	797b      	ldrb	r3, [r7, #5]
 80016e8:	4619      	mov	r1, r3
 80016ea:	4850      	ldr	r0, [pc, #320]	@ (800182c <test_state_changes+0x1d8>)
 80016ec:	f007 f90c 	bl	8008908 <iprintf>
    }
    
    // Test 3: Return to IDLE from RX
    printf("\n3. Testing IDLE from RX:\n\r");
 80016f0:	484f      	ldr	r0, [pc, #316]	@ (8001830 <test_state_changes+0x1dc>)
 80016f2:	f007 f909 	bl	8008908 <iprintf>
    status = CC1201_EnterIdleMode(&status_byte);
 80016f6:	1dbb      	adds	r3, r7, #6
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff f81a 	bl	8000732 <CC1201_EnterIdleMode>
 80016fe:	4603      	mov	r3, r0
 8001700:	71fb      	strb	r3, [r7, #7]
    printf("  RX->IDLE: HAL=%d ", status);
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	4619      	mov	r1, r3
 8001706:	484b      	ldr	r0, [pc, #300]	@ (8001834 <test_state_changes+0x1e0>)
 8001708:	f007 f8fe 	bl	8008908 <iprintf>
    if (status == HAL_OK) {
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d104      	bne.n	800171c <test_state_changes+0xc8>
        print_cc1201_status(status_byte, "RX_TO_IDLE");
 8001712:	79bb      	ldrb	r3, [r7, #6]
 8001714:	4948      	ldr	r1, [pc, #288]	@ (8001838 <test_state_changes+0x1e4>)
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff faba 	bl	8000c90 <print_cc1201_status>
    }
    HAL_Delay(50);
 800171c:	2032      	movs	r0, #50	@ 0x32
 800171e:	f001 f9ad 	bl	8002a7c <HAL_Delay>
    
    // Test 4: TX State
    printf("\n4. Testing TX State:\n\r");
 8001722:	4846      	ldr	r0, [pc, #280]	@ (800183c <test_state_changes+0x1e8>)
 8001724:	f007 f8f0 	bl	8008908 <iprintf>
    status = CC1201_EnterTxMode(&status_byte);
 8001728:	1dbb      	adds	r3, r7, #6
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe fff4 	bl	8000718 <CC1201_EnterTxMode>
 8001730:	4603      	mov	r3, r0
 8001732:	71fb      	strb	r3, [r7, #7]
    printf("  Enter TX: HAL=%d ", status);
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	4619      	mov	r1, r3
 8001738:	4841      	ldr	r0, [pc, #260]	@ (8001840 <test_state_changes+0x1ec>)
 800173a:	f007 f8e5 	bl	8008908 <iprintf>
    if (status == HAL_OK) {
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d110      	bne.n	8001766 <test_state_changes+0x112>
        print_cc1201_status(status_byte, "TX");
 8001744:	79bb      	ldrb	r3, [r7, #6]
 8001746:	493f      	ldr	r1, [pc, #252]	@ (8001844 <test_state_changes+0x1f0>)
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff faa1 	bl	8000c90 <print_cc1201_status>
        HAL_Delay(50); // Brief TX state
 800174e:	2032      	movs	r0, #50	@ 0x32
 8001750:	f001 f994 	bl	8002a7c <HAL_Delay>
        CC1201_ReadMARCState(&marc_state);
 8001754:	1d7b      	adds	r3, r7, #5
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff f8ba 	bl	80008d0 <CC1201_ReadMARCState>
        printf("  MARC State in TX: 0x%02X\n\r", marc_state);
 800175c:	797b      	ldrb	r3, [r7, #5]
 800175e:	4619      	mov	r1, r3
 8001760:	4839      	ldr	r0, [pc, #228]	@ (8001848 <test_state_changes+0x1f4>)
 8001762:	f007 f8d1 	bl	8008908 <iprintf>
    }
    
    // Test 5: Return to IDLE from TX
    printf("\n5. Testing IDLE from TX:\n\r");
 8001766:	4839      	ldr	r0, [pc, #228]	@ (800184c <test_state_changes+0x1f8>)
 8001768:	f007 f8ce 	bl	8008908 <iprintf>
    status = CC1201_EnterIdleMode(&status_byte);
 800176c:	1dbb      	adds	r3, r7, #6
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe ffdf 	bl	8000732 <CC1201_EnterIdleMode>
 8001774:	4603      	mov	r3, r0
 8001776:	71fb      	strb	r3, [r7, #7]
    printf("  TX->IDLE: HAL=%d ", status);
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	4619      	mov	r1, r3
 800177c:	4834      	ldr	r0, [pc, #208]	@ (8001850 <test_state_changes+0x1fc>)
 800177e:	f007 f8c3 	bl	8008908 <iprintf>
    if (status == HAL_OK) {
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d104      	bne.n	8001792 <test_state_changes+0x13e>
        print_cc1201_status(status_byte, "TX_TO_IDLE");
 8001788:	79bb      	ldrb	r3, [r7, #6]
 800178a:	4932      	ldr	r1, [pc, #200]	@ (8001854 <test_state_changes+0x200>)
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fa7f 	bl	8000c90 <print_cc1201_status>
    }
    
    // Test 6: Fast TX On (FSTXON state)
    printf("\n6. Testing Fast TX On (FSTXON):\n\r");
 8001792:	4831      	ldr	r0, [pc, #196]	@ (8001858 <test_state_changes+0x204>)
 8001794:	f007 f8b8 	bl	8008908 <iprintf>
    status = CC1201_FastTxOn(&status_byte);
 8001798:	1dbb      	adds	r3, r7, #6
 800179a:	4618      	mov	r0, r3
 800179c:	f7fe ffa2 	bl	80006e4 <CC1201_FastTxOn>
 80017a0:	4603      	mov	r3, r0
 80017a2:	71fb      	strb	r3, [r7, #7]
    printf("  Fast TX On: HAL=%d ", status);
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	4619      	mov	r1, r3
 80017a8:	482c      	ldr	r0, [pc, #176]	@ (800185c <test_state_changes+0x208>)
 80017aa:	f007 f8ad 	bl	8008908 <iprintf>
    if (status == HAL_OK) {
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d10d      	bne.n	80017d0 <test_state_changes+0x17c>
        print_cc1201_status(status_byte, "FSTXON");
 80017b4:	79bb      	ldrb	r3, [r7, #6]
 80017b6:	492a      	ldr	r1, [pc, #168]	@ (8001860 <test_state_changes+0x20c>)
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fa69 	bl	8000c90 <print_cc1201_status>
        CC1201_ReadMARCState(&marc_state);
 80017be:	1d7b      	adds	r3, r7, #5
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff f885 	bl	80008d0 <CC1201_ReadMARCState>
        printf("  MARC State in FSTXON: 0x%02X\n\r", marc_state);
 80017c6:	797b      	ldrb	r3, [r7, #5]
 80017c8:	4619      	mov	r1, r3
 80017ca:	4826      	ldr	r0, [pc, #152]	@ (8001864 <test_state_changes+0x210>)
 80017cc:	f007 f89c 	bl	8008908 <iprintf>
    }
    
    // Return to IDLE
    printf("\n7. Final return to IDLE:\n\r");
 80017d0:	4825      	ldr	r0, [pc, #148]	@ (8001868 <test_state_changes+0x214>)
 80017d2:	f007 f899 	bl	8008908 <iprintf>
    status = CC1201_EnterIdleMode(&status_byte);
 80017d6:	1dbb      	adds	r3, r7, #6
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe ffaa 	bl	8000732 <CC1201_EnterIdleMode>
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
    printf("  Final IDLE: HAL=%d ", status);
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	4619      	mov	r1, r3
 80017e6:	4821      	ldr	r0, [pc, #132]	@ (800186c <test_state_changes+0x218>)
 80017e8:	f007 f88e 	bl	8008908 <iprintf>
    if (status == HAL_OK) {
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d104      	bne.n	80017fc <test_state_changes+0x1a8>
        print_cc1201_status(status_byte, "FINAL_IDLE");
 80017f2:	79bb      	ldrb	r3, [r7, #6]
 80017f4:	491e      	ldr	r1, [pc, #120]	@ (8001870 <test_state_changes+0x21c>)
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fa4a 	bl	8000c90 <print_cc1201_status>
    }
    
    printf("=== STATE CHANGE TEST COMPLETE ===\n\r");
 80017fc:	481d      	ldr	r0, [pc, #116]	@ (8001874 <test_state_changes+0x220>)
 80017fe:	f007 f883 	bl	8008908 <iprintf>
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	0800a450 	.word	0x0800a450
 8001810:	0800a47c 	.word	0x0800a47c
 8001814:	0800a498 	.word	0x0800a498
 8001818:	0800a4b0 	.word	0x0800a4b0
 800181c:	0800a4b8 	.word	0x0800a4b8
 8001820:	0800a4d0 	.word	0x0800a4d0
 8001824:	0800a4e8 	.word	0x0800a4e8
 8001828:	0800a4fc 	.word	0x0800a4fc
 800182c:	0800a500 	.word	0x0800a500
 8001830:	0800a524 	.word	0x0800a524
 8001834:	0800a540 	.word	0x0800a540
 8001838:	0800a554 	.word	0x0800a554
 800183c:	0800a560 	.word	0x0800a560
 8001840:	0800a578 	.word	0x0800a578
 8001844:	0800a58c 	.word	0x0800a58c
 8001848:	0800a590 	.word	0x0800a590
 800184c:	0800a5b0 	.word	0x0800a5b0
 8001850:	0800a5cc 	.word	0x0800a5cc
 8001854:	0800a5e0 	.word	0x0800a5e0
 8001858:	0800a5ec 	.word	0x0800a5ec
 800185c:	0800a610 	.word	0x0800a610
 8001860:	0800a628 	.word	0x0800a628
 8001864:	0800a630 	.word	0x0800a630
 8001868:	0800a654 	.word	0x0800a654
 800186c:	0800a670 	.word	0x0800a670
 8001870:	0800a688 	.word	0x0800a688
 8001874:	0800a694 	.word	0x0800a694

08001878 <test_individual_functions>:

// Test 3: Individual Function Tests
void test_individual_functions(void) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
    printf("\n=== TEST 3: INDIVIDUAL FUNCTION TESTS ===\n\r");
 800187e:	486b      	ldr	r0, [pc, #428]	@ (8001a2c <test_individual_functions+0x1b4>)
 8001880:	f007 f842 	bl	8008908 <iprintf>
    
    HAL_StatusTypeDef status;
    uint8_t data = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	713b      	strb	r3, [r7, #4]
    uint8_t status_byte = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	70fb      	strb	r3, [r7, #3]
    
    // Test CC1201_ReadStatus (using a safe register like IOCFG2)
    printf("1. Testing CC1201_ReadStatus():\n\r");
 800188c:	4868      	ldr	r0, [pc, #416]	@ (8001a30 <test_individual_functions+0x1b8>)
 800188e:	f007 f83b 	bl	8008908 <iprintf>
    status = CC1201_ReadStatus(0x01, &data); // IOCFG2 register
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	4619      	mov	r1, r3
 8001896:	2001      	movs	r0, #1
 8001898:	f7fe ff8e 	bl	80007b8 <CC1201_ReadStatus>
 800189c:	4603      	mov	r3, r0
 800189e:	71fb      	strb	r3, [r7, #7]
    printf("  Read IOCFG2 (0x01): HAL=%d, Data=0x%02X\n\r", status, data);
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	793a      	ldrb	r2, [r7, #4]
 80018a4:	4619      	mov	r1, r3
 80018a6:	4863      	ldr	r0, [pc, #396]	@ (8001a34 <test_individual_functions+0x1bc>)
 80018a8:	f007 f82e 	bl	8008908 <iprintf>
    if (status == HAL_OK) {
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d103      	bne.n	80018ba <test_individual_functions+0x42>
        printf("  ✓ CC1201_ReadStatus() WORKING\n\r");
 80018b2:	4861      	ldr	r0, [pc, #388]	@ (8001a38 <test_individual_functions+0x1c0>)
 80018b4:	f007 f828 	bl	8008908 <iprintf>
 80018b8:	e002      	b.n	80018c0 <test_individual_functions+0x48>
    } else {
        printf("  ✗ CC1201_ReadStatus() FAILED\n\r");
 80018ba:	4860      	ldr	r0, [pc, #384]	@ (8001a3c <test_individual_functions+0x1c4>)
 80018bc:	f007 f824 	bl	8008908 <iprintf>
    }
    
    // Test CC1201_WriteRegister and verify with read
    printf("\n2. Testing CC1201_WriteRegister():\n\r");
 80018c0:	485f      	ldr	r0, [pc, #380]	@ (8001a40 <test_individual_functions+0x1c8>)
 80018c2:	f007 f821 	bl	8008908 <iprintf>
    uint8_t original_value = data; // Store original value
 80018c6:	793b      	ldrb	r3, [r7, #4]
 80018c8:	71bb      	strb	r3, [r7, #6]
    uint8_t test_value = 0x55; // Test pattern
 80018ca:	2355      	movs	r3, #85	@ 0x55
 80018cc:	717b      	strb	r3, [r7, #5]
    
    status = CC1201_WriteRegister(0x01, test_value);
 80018ce:	797b      	ldrb	r3, [r7, #5]
 80018d0:	4619      	mov	r1, r3
 80018d2:	2001      	movs	r0, #1
 80018d4:	f7fe ffc0 	bl	8000858 <CC1201_WriteRegister>
 80018d8:	4603      	mov	r3, r0
 80018da:	71fb      	strb	r3, [r7, #7]
    printf("  Write IOCFG2 (0x55): HAL=%d\n\r", status);
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	4619      	mov	r1, r3
 80018e0:	4858      	ldr	r0, [pc, #352]	@ (8001a44 <test_individual_functions+0x1cc>)
 80018e2:	f007 f811 	bl	8008908 <iprintf>
    
    if (status == HAL_OK) {
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d125      	bne.n	8001938 <test_individual_functions+0xc0>
        // Read back to verify
        status = CC1201_ReadStatus(0x01, &data);
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	4619      	mov	r1, r3
 80018f0:	2001      	movs	r0, #1
 80018f2:	f7fe ff61 	bl	80007b8 <CC1201_ReadStatus>
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
        printf("  Read back: HAL=%d, Data=0x%02X\n\r", status, data);
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	793a      	ldrb	r2, [r7, #4]
 80018fe:	4619      	mov	r1, r3
 8001900:	4851      	ldr	r0, [pc, #324]	@ (8001a48 <test_individual_functions+0x1d0>)
 8001902:	f007 f801 	bl	8008908 <iprintf>
        
        if (status == HAL_OK && data == test_value) {
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d107      	bne.n	800191c <test_individual_functions+0xa4>
 800190c:	793b      	ldrb	r3, [r7, #4]
 800190e:	797a      	ldrb	r2, [r7, #5]
 8001910:	429a      	cmp	r2, r3
 8001912:	d103      	bne.n	800191c <test_individual_functions+0xa4>
            printf("  ✓ CC1201_WriteRegister() WORKING (Write/Read verified)\n\r");
 8001914:	484d      	ldr	r0, [pc, #308]	@ (8001a4c <test_individual_functions+0x1d4>)
 8001916:	f006 fff7 	bl	8008908 <iprintf>
 800191a:	e002      	b.n	8001922 <test_individual_functions+0xaa>
        } else {
            printf("  ✗ CC1201_WriteRegister() FAILED (Data mismatch)\n\r");
 800191c:	484c      	ldr	r0, [pc, #304]	@ (8001a50 <test_individual_functions+0x1d8>)
 800191e:	f006 fff3 	bl	8008908 <iprintf>
        }
        
        // Restore original value
        CC1201_WriteRegister(0x01, original_value);
 8001922:	79bb      	ldrb	r3, [r7, #6]
 8001924:	4619      	mov	r1, r3
 8001926:	2001      	movs	r0, #1
 8001928:	f7fe ff96 	bl	8000858 <CC1201_WriteRegister>
        printf("  Restored original value: 0x%02X\n\r", original_value);
 800192c:	79bb      	ldrb	r3, [r7, #6]
 800192e:	4619      	mov	r1, r3
 8001930:	4848      	ldr	r0, [pc, #288]	@ (8001a54 <test_individual_functions+0x1dc>)
 8001932:	f006 ffe9 	bl	8008908 <iprintf>
 8001936:	e002      	b.n	800193e <test_individual_functions+0xc6>
    } else {
        printf("  ✗ CC1201_WriteRegister() FAILED\n\r");
 8001938:	4847      	ldr	r0, [pc, #284]	@ (8001a58 <test_individual_functions+0x1e0>)
 800193a:	f006 ffe5 	bl	8008908 <iprintf>
    }
    
    // Test CC1201_SendStrobe (using NOP)
    printf("\n3. Testing CC1201_SendStrobe():\n\r");
 800193e:	4847      	ldr	r0, [pc, #284]	@ (8001a5c <test_individual_functions+0x1e4>)
 8001940:	f006 ffe2 	bl	8008908 <iprintf>
    status = CC1201_SendStrobe(0x3D, &status_byte); // NOP strobe
 8001944:	1cfb      	adds	r3, r7, #3
 8001946:	4619      	mov	r1, r3
 8001948:	203d      	movs	r0, #61	@ 0x3d
 800194a:	f7ff f965 	bl	8000c18 <CC1201_SendStrobe>
 800194e:	4603      	mov	r3, r0
 8001950:	71fb      	strb	r3, [r7, #7]
    printf("  Send NOP strobe: HAL=%d ", status);
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	4619      	mov	r1, r3
 8001956:	4842      	ldr	r0, [pc, #264]	@ (8001a60 <test_individual_functions+0x1e8>)
 8001958:	f006 ffd6 	bl	8008908 <iprintf>
    if (status == HAL_OK) {
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d108      	bne.n	8001974 <test_individual_functions+0xfc>
        print_cc1201_status(status_byte, "STROBE_NOP");
 8001962:	78fb      	ldrb	r3, [r7, #3]
 8001964:	493f      	ldr	r1, [pc, #252]	@ (8001a64 <test_individual_functions+0x1ec>)
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff f992 	bl	8000c90 <print_cc1201_status>
        printf("  ✓ CC1201_SendStrobe() WORKING\n\r");
 800196c:	483e      	ldr	r0, [pc, #248]	@ (8001a68 <test_individual_functions+0x1f0>)
 800196e:	f006 ffcb 	bl	8008908 <iprintf>
 8001972:	e002      	b.n	800197a <test_individual_functions+0x102>
    } else {
        printf("  ✗ CC1201_SendStrobe() FAILED\n\r");
 8001974:	483d      	ldr	r0, [pc, #244]	@ (8001a6c <test_individual_functions+0x1f4>)
 8001976:	f006 ffc7 	bl	8008908 <iprintf>
    }
    
    // Test CC1201_ReadMARCState
    printf("\n4. Testing CC1201_ReadMARCState():\n\r");
 800197a:	483d      	ldr	r0, [pc, #244]	@ (8001a70 <test_individual_functions+0x1f8>)
 800197c:	f006 ffc4 	bl	8008908 <iprintf>
    uint8_t marc_state = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	70bb      	strb	r3, [r7, #2]
    status = CC1201_ReadMARCState(&marc_state);
 8001984:	1cbb      	adds	r3, r7, #2
 8001986:	4618      	mov	r0, r3
 8001988:	f7fe ffa2 	bl	80008d0 <CC1201_ReadMARCState>
 800198c:	4603      	mov	r3, r0
 800198e:	71fb      	strb	r3, [r7, #7]
    printf("  Read MARC State: HAL=%d, State=0x%02X\n\r", status, marc_state);
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	78ba      	ldrb	r2, [r7, #2]
 8001994:	4619      	mov	r1, r3
 8001996:	4837      	ldr	r0, [pc, #220]	@ (8001a74 <test_individual_functions+0x1fc>)
 8001998:	f006 ffb6 	bl	8008908 <iprintf>
    if (status == HAL_OK) {
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d103      	bne.n	80019aa <test_individual_functions+0x132>
        printf("  ✓ CC1201_ReadMARCState() WORKING\n\r");
 80019a2:	4835      	ldr	r0, [pc, #212]	@ (8001a78 <test_individual_functions+0x200>)
 80019a4:	f006 ffb0 	bl	8008908 <iprintf>
 80019a8:	e002      	b.n	80019b0 <test_individual_functions+0x138>
    } else {
        printf("  ✗ CC1201_ReadMARCState() FAILED\n\r");
 80019aa:	4834      	ldr	r0, [pc, #208]	@ (8001a7c <test_individual_functions+0x204>)
 80019ac:	f006 ffac 	bl	8008908 <iprintf>
    }
    
    // Test CC1201_GetNumRXBytes
    printf("\n5. Testing CC1201_GetNumRXBytes():\n\r");
 80019b0:	4833      	ldr	r0, [pc, #204]	@ (8001a80 <test_individual_functions+0x208>)
 80019b2:	f006 ffa9 	bl	8008908 <iprintf>
    uint8_t rx_bytes = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	707b      	strb	r3, [r7, #1]
    status = CC1201_GetNumRXBytes(&rx_bytes);
 80019ba:	1c7b      	adds	r3, r7, #1
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe ff95 	bl	80008ec <CC1201_GetNumRXBytes>
 80019c2:	4603      	mov	r3, r0
 80019c4:	71fb      	strb	r3, [r7, #7]
    printf("  Get RX Bytes: HAL=%d, Count=%d\n\r", status, rx_bytes);
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	787a      	ldrb	r2, [r7, #1]
 80019ca:	4619      	mov	r1, r3
 80019cc:	482d      	ldr	r0, [pc, #180]	@ (8001a84 <test_individual_functions+0x20c>)
 80019ce:	f006 ff9b 	bl	8008908 <iprintf>
    if (status == HAL_OK) {
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d103      	bne.n	80019e0 <test_individual_functions+0x168>
        printf("  ✓ CC1201_GetNumRXBytes() WORKING\n\r");
 80019d8:	482b      	ldr	r0, [pc, #172]	@ (8001a88 <test_individual_functions+0x210>)
 80019da:	f006 ff95 	bl	8008908 <iprintf>
 80019de:	e002      	b.n	80019e6 <test_individual_functions+0x16e>
    } else {
        printf("  ✗ CC1201_GetNumRXBytes() FAILED\n\r");
 80019e0:	482a      	ldr	r0, [pc, #168]	@ (8001a8c <test_individual_functions+0x214>)
 80019e2:	f006 ff91 	bl	8008908 <iprintf>
    }
    
    // Test CC1201_GetNumTXBytes
    printf("\n6. Testing CC1201_GetNumTXBytes():\n\r");
 80019e6:	482a      	ldr	r0, [pc, #168]	@ (8001a90 <test_individual_functions+0x218>)
 80019e8:	f006 ff8e 	bl	8008908 <iprintf>
    uint8_t tx_bytes = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	703b      	strb	r3, [r7, #0]
    status = CC1201_GetNumTXBytes(&tx_bytes);
 80019f0:	463b      	mov	r3, r7
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe ff88 	bl	8000908 <CC1201_GetNumTXBytes>
 80019f8:	4603      	mov	r3, r0
 80019fa:	71fb      	strb	r3, [r7, #7]
    printf("  Get TX Bytes: HAL=%d, Count=%d\n\r", status, tx_bytes);
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	783a      	ldrb	r2, [r7, #0]
 8001a00:	4619      	mov	r1, r3
 8001a02:	4824      	ldr	r0, [pc, #144]	@ (8001a94 <test_individual_functions+0x21c>)
 8001a04:	f006 ff80 	bl	8008908 <iprintf>
    if (status == HAL_OK) {
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d103      	bne.n	8001a16 <test_individual_functions+0x19e>
        printf("  ✓ CC1201_GetNumTXBytes() WORKING\n\r");
 8001a0e:	4822      	ldr	r0, [pc, #136]	@ (8001a98 <test_individual_functions+0x220>)
 8001a10:	f006 ff7a 	bl	8008908 <iprintf>
 8001a14:	e002      	b.n	8001a1c <test_individual_functions+0x1a4>
    } else {
        printf("  ✗ CC1201_GetNumTXBytes() FAILED\n\r");
 8001a16:	4821      	ldr	r0, [pc, #132]	@ (8001a9c <test_individual_functions+0x224>)
 8001a18:	f006 ff76 	bl	8008908 <iprintf>
    }
    
    printf("=== INDIVIDUAL FUNCTION TEST COMPLETE ===\n\r");
 8001a1c:	4820      	ldr	r0, [pc, #128]	@ (8001aa0 <test_individual_functions+0x228>)
 8001a1e:	f006 ff73 	bl	8008908 <iprintf>
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	0800a6bc 	.word	0x0800a6bc
 8001a30:	0800a6ec 	.word	0x0800a6ec
 8001a34:	0800a710 	.word	0x0800a710
 8001a38:	0800a73c 	.word	0x0800a73c
 8001a3c:	0800a760 	.word	0x0800a760
 8001a40:	0800a784 	.word	0x0800a784
 8001a44:	0800a7ac 	.word	0x0800a7ac
 8001a48:	0800a7cc 	.word	0x0800a7cc
 8001a4c:	0800a7f0 	.word	0x0800a7f0
 8001a50:	0800a830 	.word	0x0800a830
 8001a54:	0800a868 	.word	0x0800a868
 8001a58:	0800a88c 	.word	0x0800a88c
 8001a5c:	0800a8b4 	.word	0x0800a8b4
 8001a60:	0800a8d8 	.word	0x0800a8d8
 8001a64:	0800a8f4 	.word	0x0800a8f4
 8001a68:	0800a900 	.word	0x0800a900
 8001a6c:	0800a924 	.word	0x0800a924
 8001a70:	0800a948 	.word	0x0800a948
 8001a74:	0800a970 	.word	0x0800a970
 8001a78:	0800a99c 	.word	0x0800a99c
 8001a7c:	0800a9c4 	.word	0x0800a9c4
 8001a80:	0800a9ec 	.word	0x0800a9ec
 8001a84:	0800aa14 	.word	0x0800aa14
 8001a88:	0800aa38 	.word	0x0800aa38
 8001a8c:	0800aa60 	.word	0x0800aa60
 8001a90:	0800aa88 	.word	0x0800aa88
 8001a94:	0800aab0 	.word	0x0800aab0
 8001a98:	0800aad4 	.word	0x0800aad4
 8001a9c:	0800aafc 	.word	0x0800aafc
 8001aa0:	0800ab24 	.word	0x0800ab24

08001aa4 <run_comprehensive_cc1201_tests>:

// Main test runner
void run_comprehensive_cc1201_tests(void) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
    printf("\n STARTING COMPREHENSIVE CC1201 TEST SUITE \n\r");
 8001aaa:	4816      	ldr	r0, [pc, #88]	@ (8001b04 <run_comprehensive_cc1201_tests+0x60>)
 8001aac:	f006 ff2c 	bl	8008908 <iprintf>
    printf("================================================\n\r");
 8001ab0:	4815      	ldr	r0, [pc, #84]	@ (8001b08 <run_comprehensive_cc1201_tests+0x64>)
 8001ab2:	f006 ff29 	bl	8008908 <iprintf>
    
    // Run all tests
    test_buffer_operations();
 8001ab6:	f7ff fcd3 	bl	8001460 <test_buffer_operations>
    HAL_Delay(500);
 8001aba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001abe:	f000 ffdd 	bl	8002a7c <HAL_Delay>
    
    test_state_changes();
 8001ac2:	f7ff fdc7 	bl	8001654 <test_state_changes>
    HAL_Delay(500);
 8001ac6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001aca:	f000 ffd7 	bl	8002a7c <HAL_Delay>
    
    test_individual_functions();
 8001ace:	f7ff fed3 	bl	8001878 <test_individual_functions>
    HAL_Delay(500);
 8001ad2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ad6:	f000 ffd1 	bl	8002a7c <HAL_Delay>
    
    printf("\n COMPREHENSIVE TEST SUITE COMPLETE! \n\r");
 8001ada:	480c      	ldr	r0, [pc, #48]	@ (8001b0c <run_comprehensive_cc1201_tests+0x68>)
 8001adc:	f006 ff14 	bl	8008908 <iprintf>
    printf("=============================================\n\r");
 8001ae0:	480b      	ldr	r0, [pc, #44]	@ (8001b10 <run_comprehensive_cc1201_tests+0x6c>)
 8001ae2:	f006 ff11 	bl	8008908 <iprintf>
    
    // Final status check
    uint8_t final_status = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	71fb      	strb	r3, [r7, #7]
    CC1201_Nop(&final_status);
 8001aea:	1dfb      	adds	r3, r7, #7
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7fe fe47 	bl	8000780 <CC1201_Nop>
    print_cc1201_status(final_status, "FINAL_STATUS");
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	4907      	ldr	r1, [pc, #28]	@ (8001b14 <run_comprehensive_cc1201_tests+0x70>)
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff f8ca 	bl	8000c90 <print_cc1201_status>
}
 8001afc:	bf00      	nop
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	0800ab50 	.word	0x0800ab50
 8001b08:	0800ab80 	.word	0x0800ab80
 8001b0c:	0800abb4 	.word	0x0800abb4
 8001b10:	0800abdc 	.word	0x0800abdc
 8001b14:	0800ac0c 	.word	0x0800ac0c

08001b18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001b1e:	f000 fa0b 	bl	8001f38 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b22:	f000 ff19 	bl	8002958 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b26:	f000 f889 	bl	8001c3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b2a:	f000 f949 	bl	8001dc0 <MX_GPIO_Init>
  MX_SPI4_Init();
 8001b2e:	f000 f8f1 	bl	8001d14 <MX_SPI4_Init>
  // Basic hardware initialization completed

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8001b32:	2000      	movs	r0, #0
 8001b34:	f000 fcba 	bl	80024ac <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8001b38:	2001      	movs	r0, #1
 8001b3a:	f000 fcb7 	bl	80024ac <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8001b3e:	2002      	movs	r0, #2
 8001b40:	f000 fcb4 	bl	80024ac <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8001b44:	2101      	movs	r1, #1
 8001b46:	2000      	movs	r0, #0
 8001b48:	f000 fda4 	bl	8002694 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8001b4c:	4b33      	ldr	r3, [pc, #204]	@ (8001c1c <main+0x104>)
 8001b4e:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b52:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8001b54:	4b31      	ldr	r3, [pc, #196]	@ (8001c1c <main+0x104>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8001b5a:	4b30      	ldr	r3, [pc, #192]	@ (8001c1c <main+0x104>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8001b60:	4b2e      	ldr	r3, [pc, #184]	@ (8001c1c <main+0x104>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8001b66:	4b2d      	ldr	r3, [pc, #180]	@ (8001c1c <main+0x104>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8001b6c:	492b      	ldr	r1, [pc, #172]	@ (8001c1c <main+0x104>)
 8001b6e:	2000      	movs	r0, #0
 8001b70:	f000 fe14 	bl	800279c <BSP_COM_Init>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <main+0x66>
  {
    Error_Handler();
 8001b7a:	f000 fa1d 	bl	8001fb8 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8001b7e:	4828      	ldr	r0, [pc, #160]	@ (8001c20 <main+0x108>)
 8001b80:	f006 fec2 	bl	8008908 <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8001b84:	2000      	movs	r0, #0
 8001b86:	f000 fd07 	bl	8002598 <BSP_LED_On>
  
  // Now that UART is initialized, start CC1201 testing
  printf("\n=== CC1201 COMMUNICATION SYSTEM STARTUP ===\n\r");
 8001b8a:	4826      	ldr	r0, [pc, #152]	@ (8001c24 <main+0x10c>)
 8001b8c:	f006 febc 	bl	8008908 <iprintf>

  uint8_t test_status = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef nop_result = CC1201_Nop(&test_status);
 8001b94:	1dbb      	adds	r3, r7, #6
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe fdf2 	bl	8000780 <CC1201_Nop>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	71fb      	strb	r3, [r7, #7]
  
  printf("NOP returned - HAL: %d, Status: 0x%02X\n\r", nop_result, test_status);
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	79ba      	ldrb	r2, [r7, #6]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4820      	ldr	r0, [pc, #128]	@ (8001c28 <main+0x110>)
 8001ba8:	f006 feae 	bl	8008908 <iprintf>
  
  if (nop_result == HAL_OK) {
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d109      	bne.n	8001bc6 <main+0xae>
      printf("Basic CC1201 communication working!\n\r");
 8001bb2:	481e      	ldr	r0, [pc, #120]	@ (8001c2c <main+0x114>)
 8001bb4:	f006 fea8 	bl	8008908 <iprintf>
      BSP_LED_Off(LED_RED);
 8001bb8:	2002      	movs	r0, #2
 8001bba:	f000 fd17 	bl	80025ec <BSP_LED_Off>
      BSP_LED_On(LED_GREEN);
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f000 fcea 	bl	8002598 <BSP_LED_On>
 8001bc4:	e008      	b.n	8001bd8 <main+0xc0>
  } else {
      printf("CC1201 communication failed!\n\r");
 8001bc6:	481a      	ldr	r0, [pc, #104]	@ (8001c30 <main+0x118>)
 8001bc8:	f006 fe9e 	bl	8008908 <iprintf>
      BSP_LED_Off(LED_GREEN);
 8001bcc:	2000      	movs	r0, #0
 8001bce:	f000 fd0d 	bl	80025ec <BSP_LED_Off>
      BSP_LED_On(LED_RED);
 8001bd2:	2002      	movs	r0, #2
 8001bd4:	f000 fce0 	bl	8002598 <BSP_LED_On>
  }
  
  // Try proper power-up sequence first
  HAL_Delay(1000);
 8001bd8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bdc:	f000 ff4e 	bl	8002a7c <HAL_Delay>
  cc1201_power_up_sequence();
 8001be0:	f7ff f8e4 	bl	8000dac <cc1201_power_up_sequence>
  
  // Run comprehensive hardware diagnostic
  HAL_Delay(500);
 8001be4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001be8:	f000 ff48 	bl	8002a7c <HAL_Delay>
  comprehensive_cc1201_diagnostic();
 8001bec:	f7ff f972 	bl	8000ed4 <comprehensive_cc1201_diagnostic>
  
  // Only run functional tests if basic communication works
  if (nop_result == HAL_OK && test_status != 0xFF) {
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d109      	bne.n	8001c0a <main+0xf2>
 8001bf6:	79bb      	ldrb	r3, [r7, #6]
 8001bf8:	2bff      	cmp	r3, #255	@ 0xff
 8001bfa:	d006      	beq.n	8001c0a <main+0xf2>
      HAL_Delay(1000);
 8001bfc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c00:	f000 ff3c 	bl	8002a7c <HAL_Delay>
      run_comprehensive_cc1201_tests();
 8001c04:	f7ff ff4e 	bl	8001aa4 <run_comprehensive_cc1201_tests>
 8001c08:	e005      	b.n	8001c16 <main+0xfe>
  } else {
      printf("\nSkipping functional tests due to communication issues.\n\r");
 8001c0a:	480a      	ldr	r0, [pc, #40]	@ (8001c34 <main+0x11c>)
 8001c0c:	f006 fe7c 	bl	8008908 <iprintf>
      printf("Please resolve hardware issues first.\n\r");
 8001c10:	4809      	ldr	r0, [pc, #36]	@ (8001c38 <main+0x120>)
 8001c12:	f006 fe79 	bl	8008908 <iprintf>
  }

  /* USER CODE END BSP */
    /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c16:	bf00      	nop
 8001c18:	e7fd      	b.n	8001c16 <main+0xfe>
 8001c1a:	bf00      	nop
 8001c1c:	240000a4 	.word	0x240000a4
 8001c20:	0800ac1c 	.word	0x0800ac1c
 8001c24:	0800ac38 	.word	0x0800ac38
 8001c28:	0800ac68 	.word	0x0800ac68
 8001c2c:	0800ac94 	.word	0x0800ac94
 8001c30:	0800acbc 	.word	0x0800acbc
 8001c34:	0800acdc 	.word	0x0800acdc
 8001c38:	0800ad18 	.word	0x0800ad18

08001c3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b09c      	sub	sp, #112	@ 0x70
 8001c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c46:	224c      	movs	r2, #76	@ 0x4c
 8001c48:	2100      	movs	r1, #0
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f006 feb1 	bl	80089b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c50:	1d3b      	adds	r3, r7, #4
 8001c52:	2220      	movs	r2, #32
 8001c54:	2100      	movs	r1, #0
 8001c56:	4618      	mov	r0, r3
 8001c58:	f006 feab 	bl	80089b2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001c5c:	2002      	movs	r0, #2
 8001c5e:	f001 fd85 	bl	800376c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c62:	2300      	movs	r3, #0
 8001c64:	603b      	str	r3, [r7, #0]
 8001c66:	4b29      	ldr	r3, [pc, #164]	@ (8001d0c <SystemClock_Config+0xd0>)
 8001c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c6a:	4a28      	ldr	r2, [pc, #160]	@ (8001d0c <SystemClock_Config+0xd0>)
 8001c6c:	f023 0301 	bic.w	r3, r3, #1
 8001c70:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001c72:	4b26      	ldr	r3, [pc, #152]	@ (8001d0c <SystemClock_Config+0xd0>)
 8001c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	603b      	str	r3, [r7, #0]
 8001c7c:	4b24      	ldr	r3, [pc, #144]	@ (8001d10 <SystemClock_Config+0xd4>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001c84:	4a22      	ldr	r2, [pc, #136]	@ (8001d10 <SystemClock_Config+0xd4>)
 8001c86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c8a:	6193      	str	r3, [r2, #24]
 8001c8c:	4b20      	ldr	r3, [pc, #128]	@ (8001d10 <SystemClock_Config+0xd4>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c94:	603b      	str	r3, [r7, #0]
 8001c96:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001c98:	bf00      	nop
 8001c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8001d10 <SystemClock_Config+0xd4>)
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ca2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ca6:	d1f8      	bne.n	8001c9a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001cac:	2301      	movs	r3, #1
 8001cae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cb0:	2340      	movs	r3, #64	@ 0x40
 8001cb2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f001 fd8f 	bl	80037e0 <HAL_RCC_OscConfig>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001cc8:	f000 f976 	bl	8001fb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ccc:	233f      	movs	r3, #63	@ 0x3f
 8001cce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001ce4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ce8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001cea:	2300      	movs	r3, #0
 8001cec:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001cee:	1d3b      	adds	r3, r7, #4
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f002 f9ce 	bl	8004094 <HAL_RCC_ClockConfig>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001cfe:	f000 f95b 	bl	8001fb8 <Error_Handler>
  }
}
 8001d02:	bf00      	nop
 8001d04:	3770      	adds	r7, #112	@ 0x70
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	58000400 	.word	0x58000400
 8001d10:	58024800 	.word	0x58024800

08001d14 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001d18:	4b27      	ldr	r3, [pc, #156]	@ (8001db8 <MX_SPI4_Init+0xa4>)
 8001d1a:	4a28      	ldr	r2, [pc, #160]	@ (8001dbc <MX_SPI4_Init+0xa8>)
 8001d1c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001d1e:	4b26      	ldr	r3, [pc, #152]	@ (8001db8 <MX_SPI4_Init+0xa4>)
 8001d20:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001d24:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001d26:	4b24      	ldr	r3, [pc, #144]	@ (8001db8 <MX_SPI4_Init+0xa4>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d2c:	4b22      	ldr	r3, [pc, #136]	@ (8001db8 <MX_SPI4_Init+0xa4>)
 8001d2e:	2207      	movs	r2, #7
 8001d30:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d32:	4b21      	ldr	r3, [pc, #132]	@ (8001db8 <MX_SPI4_Init+0xa4>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d38:	4b1f      	ldr	r3, [pc, #124]	@ (8001db8 <MX_SPI4_Init+0xa4>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001d3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001db8 <MX_SPI4_Init+0xa4>)
 8001d40:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001d44:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d46:	4b1c      	ldr	r3, [pc, #112]	@ (8001db8 <MX_SPI4_Init+0xa4>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001db8 <MX_SPI4_Init+0xa4>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d52:	4b19      	ldr	r3, [pc, #100]	@ (8001db8 <MX_SPI4_Init+0xa4>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d58:	4b17      	ldr	r3, [pc, #92]	@ (8001db8 <MX_SPI4_Init+0xa4>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001d5e:	4b16      	ldr	r3, [pc, #88]	@ (8001db8 <MX_SPI4_Init+0xa4>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d64:	4b14      	ldr	r3, [pc, #80]	@ (8001db8 <MX_SPI4_Init+0xa4>)
 8001d66:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d6a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001d6c:	4b12      	ldr	r3, [pc, #72]	@ (8001db8 <MX_SPI4_Init+0xa4>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001d72:	4b11      	ldr	r3, [pc, #68]	@ (8001db8 <MX_SPI4_Init+0xa4>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d78:	4b0f      	ldr	r3, [pc, #60]	@ (8001db8 <MX_SPI4_Init+0xa4>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001db8 <MX_SPI4_Init+0xa4>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001d84:	4b0c      	ldr	r3, [pc, #48]	@ (8001db8 <MX_SPI4_Init+0xa4>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001db8 <MX_SPI4_Init+0xa4>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001d90:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <MX_SPI4_Init+0xa4>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001d96:	4b08      	ldr	r3, [pc, #32]	@ (8001db8 <MX_SPI4_Init+0xa4>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001d9c:	4b06      	ldr	r3, [pc, #24]	@ (8001db8 <MX_SPI4_Init+0xa4>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001da2:	4805      	ldr	r0, [pc, #20]	@ (8001db8 <MX_SPI4_Init+0xa4>)
 8001da4:	f004 fb2e 	bl	8006404 <HAL_SPI_Init>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8001dae:	f000 f903 	bl	8001fb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	240000b8 	.word	0x240000b8
 8001dbc:	40013400 	.word	0x40013400

08001dc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08a      	sub	sp, #40	@ 0x28
 8001dc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc6:	f107 0314 	add.w	r3, r7, #20
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]
 8001dd0:	609a      	str	r2, [r3, #8]
 8001dd2:	60da      	str	r2, [r3, #12]
 8001dd4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd6:	4b37      	ldr	r3, [pc, #220]	@ (8001eb4 <MX_GPIO_Init+0xf4>)
 8001dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ddc:	4a35      	ldr	r2, [pc, #212]	@ (8001eb4 <MX_GPIO_Init+0xf4>)
 8001dde:	f043 0304 	orr.w	r3, r3, #4
 8001de2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001de6:	4b33      	ldr	r3, [pc, #204]	@ (8001eb4 <MX_GPIO_Init+0xf4>)
 8001de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001df4:	4b2f      	ldr	r3, [pc, #188]	@ (8001eb4 <MX_GPIO_Init+0xf4>)
 8001df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dfa:	4a2e      	ldr	r2, [pc, #184]	@ (8001eb4 <MX_GPIO_Init+0xf4>)
 8001dfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e04:	4b2b      	ldr	r3, [pc, #172]	@ (8001eb4 <MX_GPIO_Init+0xf4>)
 8001e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e12:	4b28      	ldr	r3, [pc, #160]	@ (8001eb4 <MX_GPIO_Init+0xf4>)
 8001e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e18:	4a26      	ldr	r2, [pc, #152]	@ (8001eb4 <MX_GPIO_Init+0xf4>)
 8001e1a:	f043 0310 	orr.w	r3, r3, #16
 8001e1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e22:	4b24      	ldr	r3, [pc, #144]	@ (8001eb4 <MX_GPIO_Init+0xf4>)
 8001e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e28:	f003 0310 	and.w	r3, r3, #16
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e30:	4b20      	ldr	r3, [pc, #128]	@ (8001eb4 <MX_GPIO_Init+0xf4>)
 8001e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e36:	4a1f      	ldr	r2, [pc, #124]	@ (8001eb4 <MX_GPIO_Init+0xf4>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e40:	4b1c      	ldr	r3, [pc, #112]	@ (8001eb4 <MX_GPIO_Init+0xf4>)
 8001e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	607b      	str	r3, [r7, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e4e:	4b19      	ldr	r3, [pc, #100]	@ (8001eb4 <MX_GPIO_Init+0xf4>)
 8001e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e54:	4a17      	ldr	r2, [pc, #92]	@ (8001eb4 <MX_GPIO_Init+0xf4>)
 8001e56:	f043 0308 	orr.w	r3, r3, #8
 8001e5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e5e:	4b15      	ldr	r3, [pc, #84]	@ (8001eb4 <MX_GPIO_Init+0xf4>)
 8001e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e64:	f003 0308 	and.w	r3, r3, #8
 8001e68:	603b      	str	r3, [r7, #0]
 8001e6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PD5 (CC1201 Interrupt) */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e6c:	2320      	movs	r3, #32
 8001e6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e70:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001e74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e7a:	f107 0314 	add.w	r3, r7, #20
 8001e7e:	4619      	mov	r1, r3
 8001e80:	480d      	ldr	r0, [pc, #52]	@ (8001eb8 <MX_GPIO_Init+0xf8>)
 8001e82:	f001 fa5d 	bl	8003340 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 (CC1201 Reset) */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e86:	2310      	movs	r3, #16
 8001e88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e92:	2300      	movs	r3, #0
 8001e94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e96:	f107 0314 	add.w	r3, r7, #20
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4806      	ldr	r0, [pc, #24]	@ (8001eb8 <MX_GPIO_Init+0xf8>)
 8001e9e:	f001 fa4f 	bl	8003340 <HAL_GPIO_Init>
  
  // Set reset pin HIGH (inactive) by default
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	2110      	movs	r1, #16
 8001ea6:	4804      	ldr	r0, [pc, #16]	@ (8001eb8 <MX_GPIO_Init+0xf8>)
 8001ea8:	f001 fc12 	bl	80036d0 <HAL_GPIO_WritePin>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001eac:	bf00      	nop
 8001eae:	3728      	adds	r7, #40	@ 0x28
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	58024400 	.word	0x58024400
 8001eb8:	58020c00 	.word	0x58020c00

08001ebc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_5)
 8001ec6:	88fb      	ldrh	r3, [r7, #6]
 8001ec8:	2b20      	cmp	r3, #32
 8001eca:	d129      	bne.n	8001f20 <HAL_GPIO_EXTI_Callback+0x64>
    {
        // Handle CC1201 interrupt
        printf("CC1201 Interrupt Triggered!\n\r");
 8001ecc:	4816      	ldr	r0, [pc, #88]	@ (8001f28 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001ece:	f006 fd1b 	bl	8008908 <iprintf>
        
        // Read MARC state to see what caused the interrupt
        uint8_t marc_state = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	73fb      	strb	r3, [r7, #15]
        if (CC1201_ReadMARCState(&marc_state) == HAL_OK) {
 8001ed6:	f107 030f 	add.w	r3, r7, #15
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe fcf8 	bl	80008d0 <CC1201_ReadMARCState>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d104      	bne.n	8001ef0 <HAL_GPIO_EXTI_Callback+0x34>
            printf("MARC State during interrupt: 0x%02X\n\r", marc_state);
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4810      	ldr	r0, [pc, #64]	@ (8001f2c <HAL_GPIO_EXTI_Callback+0x70>)
 8001eec:	f006 fd0c 	bl	8008908 <iprintf>
        }
        
        // Check if there are bytes in RX FIFO
        uint8_t rx_bytes = 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	73bb      	strb	r3, [r7, #14]
        if (CC1201_GetNumRXBytes(&rx_bytes) == HAL_OK) {
 8001ef4:	f107 030e 	add.w	r3, r7, #14
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7fe fcf7 	bl	80008ec <CC1201_GetNumRXBytes>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d10a      	bne.n	8001f1a <HAL_GPIO_EXTI_Callback+0x5e>
            printf("RX Bytes available: %d\n\r", rx_bytes);
 8001f04:	7bbb      	ldrb	r3, [r7, #14]
 8001f06:	4619      	mov	r1, r3
 8001f08:	4809      	ldr	r0, [pc, #36]	@ (8001f30 <HAL_GPIO_EXTI_Callback+0x74>)
 8001f0a:	f006 fcfd 	bl	8008908 <iprintf>
            if (rx_bytes > 0) {
 8001f0e:	7bbb      	ldrb	r3, [r7, #14]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d002      	beq.n	8001f1a <HAL_GPIO_EXTI_Callback+0x5e>
                // Could read FIFO data here if needed
                printf("Data received in RX FIFO!\n\r");
 8001f14:	4807      	ldr	r0, [pc, #28]	@ (8001f34 <HAL_GPIO_EXTI_Callback+0x78>)
 8001f16:	f006 fcf7 	bl	8008908 <iprintf>
            }
        }
        
        // Toggle LED to indicate interrupt
        BSP_LED_Toggle(LED_GREEN);
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	f000 fb90 	bl	8002640 <BSP_LED_Toggle>
    }
}
 8001f20:	bf00      	nop
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	0800ad40 	.word	0x0800ad40
 8001f2c:	0800ad60 	.word	0x0800ad60
 8001f30:	0800ad88 	.word	0x0800ad88
 8001f34:	0800ada4 	.word	0x0800ada4

08001f38 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001f3e:	463b      	mov	r3, r7
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001f4a:	f000 fed7 	bl	8002cfc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001f5a:	231f      	movs	r3, #31
 8001f5c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001f5e:	2387      	movs	r3, #135	@ 0x87
 8001f60:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001f66:	2300      	movs	r3, #0
 8001f68:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001f72:	2300      	movs	r3, #0
 8001f74:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001f76:	2300      	movs	r3, #0
 8001f78:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001f7a:	463b      	mov	r3, r7
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f000 fef5 	bl	8002d6c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001f82:	2004      	movs	r0, #4
 8001f84:	f000 fed2 	bl	8002d2c <HAL_MPU_Enable>

}
 8001f88:	bf00      	nop
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d102      	bne.n	8001fa6 <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8001fa0:	4b04      	ldr	r3, [pc, #16]	@ (8001fb4 <BSP_PB_Callback+0x24>)
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	601a      	str	r2, [r3, #0]
  }
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	240000b4 	.word	0x240000b4

08001fb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fbc:	b672      	cpsid	i
}
 8001fbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fc0:	bf00      	nop
 8001fc2:	e7fd      	b.n	8001fc0 <Error_Handler+0x8>

08001fc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fca:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff4 <HAL_MspInit+0x30>)
 8001fcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001fd0:	4a08      	ldr	r2, [pc, #32]	@ (8001ff4 <HAL_MspInit+0x30>)
 8001fd2:	f043 0302 	orr.w	r3, r3, #2
 8001fd6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001fda:	4b06      	ldr	r3, [pc, #24]	@ (8001ff4 <HAL_MspInit+0x30>)
 8001fdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	607b      	str	r3, [r7, #4]
 8001fe6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	58024400 	.word	0x58024400

08001ff8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b0ba      	sub	sp, #232	@ 0xe8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002000:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002010:	f107 0310 	add.w	r3, r7, #16
 8002014:	22c0      	movs	r2, #192	@ 0xc0
 8002016:	2100      	movs	r1, #0
 8002018:	4618      	mov	r0, r3
 800201a:	f006 fcca 	bl	80089b2 <memset>
  if(hspi->Instance==SPI4)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a37      	ldr	r2, [pc, #220]	@ (8002100 <HAL_SPI_MspInit+0x108>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d166      	bne.n	80020f6 <HAL_SPI_MspInit+0xfe>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8002028:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800202c:	f04f 0300 	mov.w	r3, #0
 8002030:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8002034:	2300      	movs	r3, #0
 8002036:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002038:	f107 0310 	add.w	r3, r7, #16
 800203c:	4618      	mov	r0, r3
 800203e:	f002 fbb5 	bl	80047ac <HAL_RCCEx_PeriphCLKConfig>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002048:	f7ff ffb6 	bl	8001fb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800204c:	4b2d      	ldr	r3, [pc, #180]	@ (8002104 <HAL_SPI_MspInit+0x10c>)
 800204e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002052:	4a2c      	ldr	r2, [pc, #176]	@ (8002104 <HAL_SPI_MspInit+0x10c>)
 8002054:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002058:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800205c:	4b29      	ldr	r3, [pc, #164]	@ (8002104 <HAL_SPI_MspInit+0x10c>)
 800205e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002062:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800206a:	4b26      	ldr	r3, [pc, #152]	@ (8002104 <HAL_SPI_MspInit+0x10c>)
 800206c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002070:	4a24      	ldr	r2, [pc, #144]	@ (8002104 <HAL_SPI_MspInit+0x10c>)
 8002072:	f043 0310 	orr.w	r3, r3, #16
 8002076:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800207a:	4b22      	ldr	r3, [pc, #136]	@ (8002104 <HAL_SPI_MspInit+0x10c>)
 800207c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002080:	f003 0310 	and.w	r3, r3, #16
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	68bb      	ldr	r3, [r7, #8]
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    
    // Configure SPI pins (SCK, MISO, MOSI) 
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002088:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800208c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002090:	2302      	movs	r3, #2
 8002092:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;  // Increased speed
 800209c:	2302      	movs	r3, #2
 800209e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80020a2:	2305      	movs	r3, #5
 80020a4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020a8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80020ac:	4619      	mov	r1, r3
 80020ae:	4816      	ldr	r0, [pc, #88]	@ (8002108 <HAL_SPI_MspInit+0x110>)
 80020b0:	f001 f946 	bl	8003340 <HAL_GPIO_Init>
    
    // Configure PE11 as manual CS (GPIO output)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80020b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80020b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020bc:	2301      	movs	r3, #1
 80020be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020c8:	2302      	movs	r3, #2
 80020ca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020ce:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80020d2:	4619      	mov	r1, r3
 80020d4:	480c      	ldr	r0, [pc, #48]	@ (8002108 <HAL_SPI_MspInit+0x110>)
 80020d6:	f001 f933 	bl	8003340 <HAL_GPIO_Init>
    
    // Set CS high (inactive) by default
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 80020da:	2201      	movs	r2, #1
 80020dc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80020e0:	4809      	ldr	r0, [pc, #36]	@ (8002108 <HAL_SPI_MspInit+0x110>)
 80020e2:	f001 faf5 	bl	80036d0 <HAL_GPIO_WritePin>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 80020e6:	2200      	movs	r2, #0
 80020e8:	2100      	movs	r1, #0
 80020ea:	2054      	movs	r0, #84	@ 0x54
 80020ec:	f000 fdd1 	bl	8002c92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80020f0:	2054      	movs	r0, #84	@ 0x54
 80020f2:	f000 fde8 	bl	8002cc6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI4_MspInit 1 */

  }

}
 80020f6:	bf00      	nop
 80020f8:	37e8      	adds	r7, #232	@ 0xe8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40013400 	.word	0x40013400
 8002104:	58024400 	.word	0x58024400
 8002108:	58021000 	.word	0x58021000

0800210c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002110:	bf00      	nop
 8002112:	e7fd      	b.n	8002110 <NMI_Handler+0x4>

08002114 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002118:	bf00      	nop
 800211a:	e7fd      	b.n	8002118 <HardFault_Handler+0x4>

0800211c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002120:	bf00      	nop
 8002122:	e7fd      	b.n	8002120 <MemManage_Handler+0x4>

08002124 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002128:	bf00      	nop
 800212a:	e7fd      	b.n	8002128 <BusFault_Handler+0x4>

0800212c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002130:	bf00      	nop
 8002132:	e7fd      	b.n	8002130 <UsageFault_Handler+0x4>

08002134 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002162:	f000 fc6b 	bl	8002a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}

0800216a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800216e:	2000      	movs	r0, #0
 8002170:	f000 fb02 	bl	8002778 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002174:	bf00      	nop
 8002176:	bd80      	pop	{r7, pc}

08002178 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800217c:	2020      	movs	r0, #32
 800217e:	f001 fada 	bl	8003736 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 800218c:	4802      	ldr	r0, [pc, #8]	@ (8002198 <SPI4_IRQHandler+0x10>)
 800218e:	f004 ff85 	bl	800709c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	240000b8 	.word	0x240000b8

0800219c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	e00a      	b.n	80021c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021ae:	f3af 8000 	nop.w
 80021b2:	4601      	mov	r1, r0
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	1c5a      	adds	r2, r3, #1
 80021b8:	60ba      	str	r2, [r7, #8]
 80021ba:	b2ca      	uxtb	r2, r1
 80021bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	3301      	adds	r3, #1
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	dbf0      	blt.n	80021ae <_read+0x12>
  }

  return len;
 80021cc:	687b      	ldr	r3, [r7, #4]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b086      	sub	sp, #24
 80021da:	af00      	add	r7, sp, #0
 80021dc:	60f8      	str	r0, [r7, #12]
 80021de:	60b9      	str	r1, [r7, #8]
 80021e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e2:	2300      	movs	r3, #0
 80021e4:	617b      	str	r3, [r7, #20]
 80021e6:	e009      	b.n	80021fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	1c5a      	adds	r2, r3, #1
 80021ec:	60ba      	str	r2, [r7, #8]
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f000 fb35 	bl	8002860 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	3301      	adds	r3, #1
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	429a      	cmp	r2, r3
 8002202:	dbf1      	blt.n	80021e8 <_write+0x12>
  }
  return len;
 8002204:	687b      	ldr	r3, [r7, #4]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <_close>:

int _close(int file)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002216:	f04f 33ff 	mov.w	r3, #4294967295
}
 800221a:	4618      	mov	r0, r3
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002236:	605a      	str	r2, [r3, #4]
  return 0;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <_isatty>:

int _isatty(int file)
{
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800224e:	2301      	movs	r3, #1
}
 8002250:	4618      	mov	r0, r3
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
	...

08002278 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002280:	4a14      	ldr	r2, [pc, #80]	@ (80022d4 <_sbrk+0x5c>)
 8002282:	4b15      	ldr	r3, [pc, #84]	@ (80022d8 <_sbrk+0x60>)
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800228c:	4b13      	ldr	r3, [pc, #76]	@ (80022dc <_sbrk+0x64>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d102      	bne.n	800229a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002294:	4b11      	ldr	r3, [pc, #68]	@ (80022dc <_sbrk+0x64>)
 8002296:	4a12      	ldr	r2, [pc, #72]	@ (80022e0 <_sbrk+0x68>)
 8002298:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800229a:	4b10      	ldr	r3, [pc, #64]	@ (80022dc <_sbrk+0x64>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4413      	add	r3, r2
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d207      	bcs.n	80022b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022a8:	f006 fbd2 	bl	8008a50 <__errno>
 80022ac:	4603      	mov	r3, r0
 80022ae:	220c      	movs	r2, #12
 80022b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022b2:	f04f 33ff 	mov.w	r3, #4294967295
 80022b6:	e009      	b.n	80022cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022b8:	4b08      	ldr	r3, [pc, #32]	@ (80022dc <_sbrk+0x64>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022be:	4b07      	ldr	r3, [pc, #28]	@ (80022dc <_sbrk+0x64>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4413      	add	r3, r2
 80022c6:	4a05      	ldr	r2, [pc, #20]	@ (80022dc <_sbrk+0x64>)
 80022c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ca:	68fb      	ldr	r3, [r7, #12]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	24080000 	.word	0x24080000
 80022d8:	00000400 	.word	0x00000400
 80022dc:	24000140 	.word	0x24000140
 80022e0:	24000338 	.word	0x24000338

080022e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80022e8:	4b43      	ldr	r3, [pc, #268]	@ (80023f8 <SystemInit+0x114>)
 80022ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ee:	4a42      	ldr	r2, [pc, #264]	@ (80023f8 <SystemInit+0x114>)
 80022f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80022f8:	4b40      	ldr	r3, [pc, #256]	@ (80023fc <SystemInit+0x118>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 030f 	and.w	r3, r3, #15
 8002300:	2b06      	cmp	r3, #6
 8002302:	d807      	bhi.n	8002314 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002304:	4b3d      	ldr	r3, [pc, #244]	@ (80023fc <SystemInit+0x118>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f023 030f 	bic.w	r3, r3, #15
 800230c:	4a3b      	ldr	r2, [pc, #236]	@ (80023fc <SystemInit+0x118>)
 800230e:	f043 0307 	orr.w	r3, r3, #7
 8002312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002314:	4b3a      	ldr	r3, [pc, #232]	@ (8002400 <SystemInit+0x11c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a39      	ldr	r2, [pc, #228]	@ (8002400 <SystemInit+0x11c>)
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002320:	4b37      	ldr	r3, [pc, #220]	@ (8002400 <SystemInit+0x11c>)
 8002322:	2200      	movs	r2, #0
 8002324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002326:	4b36      	ldr	r3, [pc, #216]	@ (8002400 <SystemInit+0x11c>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	4935      	ldr	r1, [pc, #212]	@ (8002400 <SystemInit+0x11c>)
 800232c:	4b35      	ldr	r3, [pc, #212]	@ (8002404 <SystemInit+0x120>)
 800232e:	4013      	ands	r3, r2
 8002330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002332:	4b32      	ldr	r3, [pc, #200]	@ (80023fc <SystemInit+0x118>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	2b00      	cmp	r3, #0
 800233c:	d007      	beq.n	800234e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800233e:	4b2f      	ldr	r3, [pc, #188]	@ (80023fc <SystemInit+0x118>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f023 030f 	bic.w	r3, r3, #15
 8002346:	4a2d      	ldr	r2, [pc, #180]	@ (80023fc <SystemInit+0x118>)
 8002348:	f043 0307 	orr.w	r3, r3, #7
 800234c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800234e:	4b2c      	ldr	r3, [pc, #176]	@ (8002400 <SystemInit+0x11c>)
 8002350:	2200      	movs	r2, #0
 8002352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002354:	4b2a      	ldr	r3, [pc, #168]	@ (8002400 <SystemInit+0x11c>)
 8002356:	2200      	movs	r2, #0
 8002358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800235a:	4b29      	ldr	r3, [pc, #164]	@ (8002400 <SystemInit+0x11c>)
 800235c:	2200      	movs	r2, #0
 800235e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002360:	4b27      	ldr	r3, [pc, #156]	@ (8002400 <SystemInit+0x11c>)
 8002362:	4a29      	ldr	r2, [pc, #164]	@ (8002408 <SystemInit+0x124>)
 8002364:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002366:	4b26      	ldr	r3, [pc, #152]	@ (8002400 <SystemInit+0x11c>)
 8002368:	4a28      	ldr	r2, [pc, #160]	@ (800240c <SystemInit+0x128>)
 800236a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800236c:	4b24      	ldr	r3, [pc, #144]	@ (8002400 <SystemInit+0x11c>)
 800236e:	4a28      	ldr	r2, [pc, #160]	@ (8002410 <SystemInit+0x12c>)
 8002370:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002372:	4b23      	ldr	r3, [pc, #140]	@ (8002400 <SystemInit+0x11c>)
 8002374:	2200      	movs	r2, #0
 8002376:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002378:	4b21      	ldr	r3, [pc, #132]	@ (8002400 <SystemInit+0x11c>)
 800237a:	4a25      	ldr	r2, [pc, #148]	@ (8002410 <SystemInit+0x12c>)
 800237c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800237e:	4b20      	ldr	r3, [pc, #128]	@ (8002400 <SystemInit+0x11c>)
 8002380:	2200      	movs	r2, #0
 8002382:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002384:	4b1e      	ldr	r3, [pc, #120]	@ (8002400 <SystemInit+0x11c>)
 8002386:	4a22      	ldr	r2, [pc, #136]	@ (8002410 <SystemInit+0x12c>)
 8002388:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800238a:	4b1d      	ldr	r3, [pc, #116]	@ (8002400 <SystemInit+0x11c>)
 800238c:	2200      	movs	r2, #0
 800238e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002390:	4b1b      	ldr	r3, [pc, #108]	@ (8002400 <SystemInit+0x11c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a1a      	ldr	r2, [pc, #104]	@ (8002400 <SystemInit+0x11c>)
 8002396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800239a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800239c:	4b18      	ldr	r3, [pc, #96]	@ (8002400 <SystemInit+0x11c>)
 800239e:	2200      	movs	r2, #0
 80023a0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80023a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002414 <SystemInit+0x130>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002418 <SystemInit+0x134>)
 80023a8:	4013      	ands	r3, r2
 80023aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023ae:	d202      	bcs.n	80023b6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80023b0:	4b1a      	ldr	r3, [pc, #104]	@ (800241c <SystemInit+0x138>)
 80023b2:	2201      	movs	r2, #1
 80023b4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80023b6:	4b12      	ldr	r3, [pc, #72]	@ (8002400 <SystemInit+0x11c>)
 80023b8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80023bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d113      	bne.n	80023ec <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80023c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002400 <SystemInit+0x11c>)
 80023c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80023ca:	4a0d      	ldr	r2, [pc, #52]	@ (8002400 <SystemInit+0x11c>)
 80023cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80023d0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80023d4:	4b12      	ldr	r3, [pc, #72]	@ (8002420 <SystemInit+0x13c>)
 80023d6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80023da:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80023dc:	4b08      	ldr	r3, [pc, #32]	@ (8002400 <SystemInit+0x11c>)
 80023de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80023e2:	4a07      	ldr	r2, [pc, #28]	@ (8002400 <SystemInit+0x11c>)
 80023e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80023e8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	e000ed00 	.word	0xe000ed00
 80023fc:	52002000 	.word	0x52002000
 8002400:	58024400 	.word	0x58024400
 8002404:	eaf6ed7f 	.word	0xeaf6ed7f
 8002408:	02020200 	.word	0x02020200
 800240c:	01ff0000 	.word	0x01ff0000
 8002410:	01010280 	.word	0x01010280
 8002414:	5c001000 	.word	0x5c001000
 8002418:	ffff0000 	.word	0xffff0000
 800241c:	51008108 	.word	0x51008108
 8002420:	52004000 	.word	0x52004000

08002424 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002428:	4b09      	ldr	r3, [pc, #36]	@ (8002450 <ExitRun0Mode+0x2c>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	4a08      	ldr	r2, [pc, #32]	@ (8002450 <ExitRun0Mode+0x2c>)
 800242e:	f043 0302 	orr.w	r3, r3, #2
 8002432:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002434:	bf00      	nop
 8002436:	4b06      	ldr	r3, [pc, #24]	@ (8002450 <ExitRun0Mode+0x2c>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0f9      	beq.n	8002436 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002442:	bf00      	nop
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	58024800 	.word	0x58024800

08002454 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002454:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002490 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002458:	f7ff ffe4 	bl	8002424 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800245c:	f7ff ff42 	bl	80022e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002460:	480c      	ldr	r0, [pc, #48]	@ (8002494 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002462:	490d      	ldr	r1, [pc, #52]	@ (8002498 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002464:	4a0d      	ldr	r2, [pc, #52]	@ (800249c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002468:	e002      	b.n	8002470 <LoopCopyDataInit>

0800246a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800246a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800246c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800246e:	3304      	adds	r3, #4

08002470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002474:	d3f9      	bcc.n	800246a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002476:	4a0a      	ldr	r2, [pc, #40]	@ (80024a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002478:	4c0a      	ldr	r4, [pc, #40]	@ (80024a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800247a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800247c:	e001      	b.n	8002482 <LoopFillZerobss>

0800247e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800247e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002480:	3204      	adds	r2, #4

08002482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002484:	d3fb      	bcc.n	800247e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002486:	f006 fae9 	bl	8008a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800248a:	f7ff fb45 	bl	8001b18 <main>
  bx  lr
 800248e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002490:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002494:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002498:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 800249c:	0800ae38 	.word	0x0800ae38
  ldr r2, =_sbss
 80024a0:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 80024a4:	24000334 	.word	0x24000334

080024a8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024a8:	e7fe      	b.n	80024a8 <ADC3_IRQHandler>
	...

080024ac <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08c      	sub	sp, #48	@ 0x30
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80024b6:	2300      	movs	r3, #0
 80024b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80024ba:	79fb      	ldrb	r3, [r7, #7]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d009      	beq.n	80024d4 <BSP_LED_Init+0x28>
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d006      	beq.n	80024d4 <BSP_LED_Init+0x28>
 80024c6:	79fb      	ldrb	r3, [r7, #7]
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d003      	beq.n	80024d4 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80024cc:	f06f 0301 	mvn.w	r3, #1
 80024d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024d2:	e055      	b.n	8002580 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10f      	bne.n	80024fa <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80024da:	4b2c      	ldr	r3, [pc, #176]	@ (800258c <BSP_LED_Init+0xe0>)
 80024dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024e0:	4a2a      	ldr	r2, [pc, #168]	@ (800258c <BSP_LED_Init+0xe0>)
 80024e2:	f043 0302 	orr.w	r3, r3, #2
 80024e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024ea:	4b28      	ldr	r3, [pc, #160]	@ (800258c <BSP_LED_Init+0xe0>)
 80024ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	617b      	str	r3, [r7, #20]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	e021      	b.n	800253e <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d10f      	bne.n	8002520 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8002500:	4b22      	ldr	r3, [pc, #136]	@ (800258c <BSP_LED_Init+0xe0>)
 8002502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002506:	4a21      	ldr	r2, [pc, #132]	@ (800258c <BSP_LED_Init+0xe0>)
 8002508:	f043 0310 	orr.w	r3, r3, #16
 800250c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002510:	4b1e      	ldr	r3, [pc, #120]	@ (800258c <BSP_LED_Init+0xe0>)
 8002512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002516:	f003 0310 	and.w	r3, r3, #16
 800251a:	613b      	str	r3, [r7, #16]
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	e00e      	b.n	800253e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8002520:	4b1a      	ldr	r3, [pc, #104]	@ (800258c <BSP_LED_Init+0xe0>)
 8002522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002526:	4a19      	ldr	r2, [pc, #100]	@ (800258c <BSP_LED_Init+0xe0>)
 8002528:	f043 0302 	orr.w	r3, r3, #2
 800252c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002530:	4b16      	ldr	r3, [pc, #88]	@ (800258c <BSP_LED_Init+0xe0>)
 8002532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	4a13      	ldr	r2, [pc, #76]	@ (8002590 <BSP_LED_Init+0xe4>)
 8002542:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002546:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002548:	2301      	movs	r3, #1
 800254a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800254c:	2300      	movs	r3, #0
 800254e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002550:	2303      	movs	r3, #3
 8002552:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002554:	79fb      	ldrb	r3, [r7, #7]
 8002556:	4a0f      	ldr	r2, [pc, #60]	@ (8002594 <BSP_LED_Init+0xe8>)
 8002558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800255c:	f107 0218 	add.w	r2, r7, #24
 8002560:	4611      	mov	r1, r2
 8002562:	4618      	mov	r0, r3
 8002564:	f000 feec 	bl	8003340 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	4a0a      	ldr	r2, [pc, #40]	@ (8002594 <BSP_LED_Init+0xe8>)
 800256c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	4a07      	ldr	r2, [pc, #28]	@ (8002590 <BSP_LED_Init+0xe4>)
 8002574:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002578:	2200      	movs	r2, #0
 800257a:	4619      	mov	r1, r3
 800257c:	f001 f8a8 	bl	80036d0 <HAL_GPIO_WritePin>
  }

  return ret;
 8002580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002582:	4618      	mov	r0, r3
 8002584:	3730      	adds	r7, #48	@ 0x30
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	58024400 	.word	0x58024400
 8002590:	0800add0 	.word	0x0800add0
 8002594:	2400000c 	.word	0x2400000c

08002598 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d009      	beq.n	80025c0 <BSP_LED_On+0x28>
 80025ac:	79fb      	ldrb	r3, [r7, #7]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d006      	beq.n	80025c0 <BSP_LED_On+0x28>
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d003      	beq.n	80025c0 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80025b8:	f06f 0301 	mvn.w	r3, #1
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	e00b      	b.n	80025d8 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	4a08      	ldr	r2, [pc, #32]	@ (80025e4 <BSP_LED_On+0x4c>)
 80025c4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80025c8:	79fb      	ldrb	r3, [r7, #7]
 80025ca:	4a07      	ldr	r2, [pc, #28]	@ (80025e8 <BSP_LED_On+0x50>)
 80025cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025d0:	2201      	movs	r2, #1
 80025d2:	4619      	mov	r1, r3
 80025d4:	f001 f87c 	bl	80036d0 <HAL_GPIO_WritePin>
  }

  return ret;
 80025d8:	68fb      	ldr	r3, [r7, #12]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	2400000c 	.word	0x2400000c
 80025e8:	0800add0 	.word	0x0800add0

080025ec <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80025f6:	2300      	movs	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80025fa:	79fb      	ldrb	r3, [r7, #7]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d009      	beq.n	8002614 <BSP_LED_Off+0x28>
 8002600:	79fb      	ldrb	r3, [r7, #7]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d006      	beq.n	8002614 <BSP_LED_Off+0x28>
 8002606:	79fb      	ldrb	r3, [r7, #7]
 8002608:	2b02      	cmp	r3, #2
 800260a:	d003      	beq.n	8002614 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800260c:	f06f 0301 	mvn.w	r3, #1
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	e00b      	b.n	800262c <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	4a08      	ldr	r2, [pc, #32]	@ (8002638 <BSP_LED_Off+0x4c>)
 8002618:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	4a07      	ldr	r2, [pc, #28]	@ (800263c <BSP_LED_Off+0x50>)
 8002620:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002624:	2200      	movs	r2, #0
 8002626:	4619      	mov	r1, r3
 8002628:	f001 f852 	bl	80036d0 <HAL_GPIO_WritePin>
  }

  return ret;
 800262c:	68fb      	ldr	r3, [r7, #12]
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	2400000c 	.word	0x2400000c
 800263c:	0800add0 	.word	0x0800add0

08002640 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800264e:	79fb      	ldrb	r3, [r7, #7]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d009      	beq.n	8002668 <BSP_LED_Toggle+0x28>
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d006      	beq.n	8002668 <BSP_LED_Toggle+0x28>
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	2b02      	cmp	r3, #2
 800265e:	d003      	beq.n	8002668 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002660:	f06f 0301 	mvn.w	r3, #1
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	e00b      	b.n	8002680 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	4a08      	ldr	r2, [pc, #32]	@ (800268c <BSP_LED_Toggle+0x4c>)
 800266c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	4907      	ldr	r1, [pc, #28]	@ (8002690 <BSP_LED_Toggle+0x50>)
 8002674:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002678:	4619      	mov	r1, r3
 800267a:	4610      	mov	r0, r2
 800267c:	f001 f841 	bl	8003702 <HAL_GPIO_TogglePin>
  }

  return ret;
 8002680:	68fb      	ldr	r3, [r7, #12]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	2400000c 	.word	0x2400000c
 8002690:	0800add0 	.word	0x0800add0

08002694 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b088      	sub	sp, #32
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	460a      	mov	r2, r1
 800269e:	71fb      	strb	r3, [r7, #7]
 80026a0:	4613      	mov	r3, r2
 80026a2:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80026a4:	4b2e      	ldr	r3, [pc, #184]	@ (8002760 <BSP_PB_Init+0xcc>)
 80026a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026aa:	4a2d      	ldr	r2, [pc, #180]	@ (8002760 <BSP_PB_Init+0xcc>)
 80026ac:	f043 0304 	orr.w	r3, r3, #4
 80026b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002760 <BSP_PB_Init+0xcc>)
 80026b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026ba:	f003 0304 	and.w	r3, r3, #4
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80026c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026c6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80026c8:	2302      	movs	r3, #2
 80026ca:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80026cc:	2302      	movs	r3, #2
 80026ce:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80026d0:	79bb      	ldrb	r3, [r7, #6]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10c      	bne.n	80026f0 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80026d6:	2300      	movs	r3, #0
 80026d8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	4a21      	ldr	r2, [pc, #132]	@ (8002764 <BSP_PB_Init+0xd0>)
 80026de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e2:	f107 020c 	add.w	r2, r7, #12
 80026e6:	4611      	mov	r1, r2
 80026e8:	4618      	mov	r0, r3
 80026ea:	f000 fe29 	bl	8003340 <HAL_GPIO_Init>
 80026ee:	e031      	b.n	8002754 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80026f0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80026f4:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	4a1a      	ldr	r2, [pc, #104]	@ (8002764 <BSP_PB_Init+0xd0>)
 80026fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026fe:	f107 020c 	add.w	r2, r7, #12
 8002702:	4611      	mov	r1, r2
 8002704:	4618      	mov	r0, r3
 8002706:	f000 fe1b 	bl	8003340 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800270a:	79fb      	ldrb	r3, [r7, #7]
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	4a16      	ldr	r2, [pc, #88]	@ (8002768 <BSP_PB_Init+0xd4>)
 8002710:	441a      	add	r2, r3
 8002712:	79fb      	ldrb	r3, [r7, #7]
 8002714:	4915      	ldr	r1, [pc, #84]	@ (800276c <BSP_PB_Init+0xd8>)
 8002716:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800271a:	4619      	mov	r1, r3
 800271c:	4610      	mov	r0, r2
 800271e:	f000 fdca 	bl	80032b6 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8002722:	79fb      	ldrb	r3, [r7, #7]
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	4a10      	ldr	r2, [pc, #64]	@ (8002768 <BSP_PB_Init+0xd4>)
 8002728:	1898      	adds	r0, r3, r2
 800272a:	79fb      	ldrb	r3, [r7, #7]
 800272c:	4a10      	ldr	r2, [pc, #64]	@ (8002770 <BSP_PB_Init+0xdc>)
 800272e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002732:	461a      	mov	r2, r3
 8002734:	2100      	movs	r1, #0
 8002736:	f000 fd9f 	bl	8003278 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800273a:	2028      	movs	r0, #40	@ 0x28
 800273c:	79fb      	ldrb	r3, [r7, #7]
 800273e:	4a0d      	ldr	r2, [pc, #52]	@ (8002774 <BSP_PB_Init+0xe0>)
 8002740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002744:	2200      	movs	r2, #0
 8002746:	4619      	mov	r1, r3
 8002748:	f000 faa3 	bl	8002c92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800274c:	2328      	movs	r3, #40	@ 0x28
 800274e:	4618      	mov	r0, r3
 8002750:	f000 fab9 	bl	8002cc6 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3720      	adds	r7, #32
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	58024400 	.word	0x58024400
 8002764:	24000018 	.word	0x24000018
 8002768:	24000144 	.word	0x24000144
 800276c:	0800add8 	.word	0x0800add8
 8002770:	2400001c 	.word	0x2400001c
 8002774:	24000020 	.word	0x24000020

08002778 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8002782:	79fb      	ldrb	r3, [r7, #7]
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	4a04      	ldr	r2, [pc, #16]	@ (8002798 <BSP_PB_IRQHandler+0x20>)
 8002788:	4413      	add	r3, r2
 800278a:	4618      	mov	r0, r3
 800278c:	f000 fda8 	bl	80032e0 <HAL_EXTI_IRQHandler>
}
 8002790:	bf00      	nop
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	24000144 	.word	0x24000144

0800279c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	6039      	str	r1, [r7, #0]
 80027a6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80027a8:	2300      	movs	r3, #0
 80027aa:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80027b2:	f06f 0301 	mvn.w	r3, #1
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	e018      	b.n	80027ec <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	2294      	movs	r2, #148	@ 0x94
 80027be:	fb02 f303 	mul.w	r3, r2, r3
 80027c2:	4a0d      	ldr	r2, [pc, #52]	@ (80027f8 <BSP_COM_Init+0x5c>)
 80027c4:	4413      	add	r3, r2
 80027c6:	4618      	mov	r0, r3
 80027c8:	f000 f86e 	bl	80028a8 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	2294      	movs	r2, #148	@ 0x94
 80027d0:	fb02 f303 	mul.w	r3, r2, r3
 80027d4:	4a08      	ldr	r2, [pc, #32]	@ (80027f8 <BSP_COM_Init+0x5c>)
 80027d6:	4413      	add	r3, r2
 80027d8:	6839      	ldr	r1, [r7, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 f80e 	bl	80027fc <MX_USART3_Init>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d002      	beq.n	80027ec <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80027e6:	f06f 0303 	mvn.w	r3, #3
 80027ea:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80027ec:	68fb      	ldr	r3, [r7, #12]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	2400014c 	.word	0x2400014c

080027fc <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8002806:	4b15      	ldr	r3, [pc, #84]	@ (800285c <MX_USART3_Init+0x60>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	220c      	movs	r2, #12
 800281a:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	895b      	ldrh	r3, [r3, #10]
 8002820:	461a      	mov	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	891b      	ldrh	r3, [r3, #8]
 8002832:	461a      	mov	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	899b      	ldrh	r3, [r3, #12]
 800283c:	461a      	mov	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002848:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f004 ff29 	bl	80076a2 <HAL_UART_Init>
 8002850:	4603      	mov	r3, r0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	24000008 	.word	0x24000008

08002860 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8002868:	4b09      	ldr	r3, [pc, #36]	@ (8002890 <__io_putchar+0x30>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	461a      	mov	r2, r3
 800286e:	2394      	movs	r3, #148	@ 0x94
 8002870:	fb02 f303 	mul.w	r3, r2, r3
 8002874:	4a07      	ldr	r2, [pc, #28]	@ (8002894 <__io_putchar+0x34>)
 8002876:	1898      	adds	r0, r3, r2
 8002878:	1d39      	adds	r1, r7, #4
 800287a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800287e:	2201      	movs	r2, #1
 8002880:	f004 ff69 	bl	8007756 <HAL_UART_Transmit>
  return ch;
 8002884:	687b      	ldr	r3, [r7, #4]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	240001e0 	.word	0x240001e0
 8002894:	2400014c 	.word	0x2400014c

08002898 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800289c:	2000      	movs	r0, #0
 800289e:	f7ff fb77 	bl	8001f90 <BSP_PB_Callback>
}
 80028a2:	bf00      	nop
 80028a4:	bd80      	pop	{r7, pc}
	...

080028a8 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08a      	sub	sp, #40	@ 0x28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80028b0:	4b27      	ldr	r3, [pc, #156]	@ (8002950 <COM1_MspInit+0xa8>)
 80028b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028b6:	4a26      	ldr	r2, [pc, #152]	@ (8002950 <COM1_MspInit+0xa8>)
 80028b8:	f043 0308 	orr.w	r3, r3, #8
 80028bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028c0:	4b23      	ldr	r3, [pc, #140]	@ (8002950 <COM1_MspInit+0xa8>)
 80028c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028c6:	f003 0308 	and.w	r3, r3, #8
 80028ca:	613b      	str	r3, [r7, #16]
 80028cc:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80028ce:	4b20      	ldr	r3, [pc, #128]	@ (8002950 <COM1_MspInit+0xa8>)
 80028d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028d4:	4a1e      	ldr	r2, [pc, #120]	@ (8002950 <COM1_MspInit+0xa8>)
 80028d6:	f043 0308 	orr.w	r3, r3, #8
 80028da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028de:	4b1c      	ldr	r3, [pc, #112]	@ (8002950 <COM1_MspInit+0xa8>)
 80028e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028e4:	f003 0308 	and.w	r3, r3, #8
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80028ec:	4b18      	ldr	r3, [pc, #96]	@ (8002950 <COM1_MspInit+0xa8>)
 80028ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028f2:	4a17      	ldr	r2, [pc, #92]	@ (8002950 <COM1_MspInit+0xa8>)
 80028f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028f8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80028fc:	4b14      	ldr	r3, [pc, #80]	@ (8002950 <COM1_MspInit+0xa8>)
 80028fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002902:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002906:	60bb      	str	r3, [r7, #8]
 8002908:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 800290a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800290e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002910:	2302      	movs	r3, #2
 8002912:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002914:	2302      	movs	r3, #2
 8002916:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002918:	2301      	movs	r3, #1
 800291a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 800291c:	2307      	movs	r3, #7
 800291e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002920:	f107 0314 	add.w	r3, r7, #20
 8002924:	4619      	mov	r1, r3
 8002926:	480b      	ldr	r0, [pc, #44]	@ (8002954 <COM1_MspInit+0xac>)
 8002928:	f000 fd0a 	bl	8003340 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 800292c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002930:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002932:	2302      	movs	r3, #2
 8002934:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8002936:	2307      	movs	r3, #7
 8002938:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800293a:	f107 0314 	add.w	r3, r7, #20
 800293e:	4619      	mov	r1, r3
 8002940:	4804      	ldr	r0, [pc, #16]	@ (8002954 <COM1_MspInit+0xac>)
 8002942:	f000 fcfd 	bl	8003340 <HAL_GPIO_Init>
}
 8002946:	bf00      	nop
 8002948:	3728      	adds	r7, #40	@ 0x28
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	58024400 	.word	0x58024400
 8002954:	58020c00 	.word	0x58020c00

08002958 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800295e:	2003      	movs	r0, #3
 8002960:	f000 f98c 	bl	8002c7c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002964:	f001 fd4c 	bl	8004400 <HAL_RCC_GetSysClockFreq>
 8002968:	4602      	mov	r2, r0
 800296a:	4b15      	ldr	r3, [pc, #84]	@ (80029c0 <HAL_Init+0x68>)
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	0a1b      	lsrs	r3, r3, #8
 8002970:	f003 030f 	and.w	r3, r3, #15
 8002974:	4913      	ldr	r1, [pc, #76]	@ (80029c4 <HAL_Init+0x6c>)
 8002976:	5ccb      	ldrb	r3, [r1, r3]
 8002978:	f003 031f 	and.w	r3, r3, #31
 800297c:	fa22 f303 	lsr.w	r3, r2, r3
 8002980:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002982:	4b0f      	ldr	r3, [pc, #60]	@ (80029c0 <HAL_Init+0x68>)
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	4a0e      	ldr	r2, [pc, #56]	@ (80029c4 <HAL_Init+0x6c>)
 800298c:	5cd3      	ldrb	r3, [r2, r3]
 800298e:	f003 031f 	and.w	r3, r3, #31
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	fa22 f303 	lsr.w	r3, r2, r3
 8002998:	4a0b      	ldr	r2, [pc, #44]	@ (80029c8 <HAL_Init+0x70>)
 800299a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800299c:	4a0b      	ldr	r2, [pc, #44]	@ (80029cc <HAL_Init+0x74>)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029a2:	2000      	movs	r0, #0
 80029a4:	f000 f814 	bl	80029d0 <HAL_InitTick>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e002      	b.n	80029b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80029b2:	f7ff fb07 	bl	8001fc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	58024400 	.word	0x58024400
 80029c4:	0800adc0 	.word	0x0800adc0
 80029c8:	24000004 	.word	0x24000004
 80029cc:	24000000 	.word	0x24000000

080029d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80029d8:	4b15      	ldr	r3, [pc, #84]	@ (8002a30 <HAL_InitTick+0x60>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e021      	b.n	8002a28 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80029e4:	4b13      	ldr	r3, [pc, #76]	@ (8002a34 <HAL_InitTick+0x64>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	4b11      	ldr	r3, [pc, #68]	@ (8002a30 <HAL_InitTick+0x60>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	4619      	mov	r1, r3
 80029ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 f971 	bl	8002ce2 <HAL_SYSTICK_Config>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e00e      	b.n	8002a28 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b0f      	cmp	r3, #15
 8002a0e:	d80a      	bhi.n	8002a26 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a10:	2200      	movs	r2, #0
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	f04f 30ff 	mov.w	r0, #4294967295
 8002a18:	f000 f93b 	bl	8002c92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a1c:	4a06      	ldr	r2, [pc, #24]	@ (8002a38 <HAL_InitTick+0x68>)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	e000      	b.n	8002a28 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	24000028 	.word	0x24000028
 8002a34:	24000000 	.word	0x24000000
 8002a38:	24000024 	.word	0x24000024

08002a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a40:	4b06      	ldr	r3, [pc, #24]	@ (8002a5c <HAL_IncTick+0x20>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	461a      	mov	r2, r3
 8002a46:	4b06      	ldr	r3, [pc, #24]	@ (8002a60 <HAL_IncTick+0x24>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	4a04      	ldr	r2, [pc, #16]	@ (8002a60 <HAL_IncTick+0x24>)
 8002a4e:	6013      	str	r3, [r2, #0]
}
 8002a50:	bf00      	nop
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	24000028 	.word	0x24000028
 8002a60:	240001e4 	.word	0x240001e4

08002a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  return uwTick;
 8002a68:	4b03      	ldr	r3, [pc, #12]	@ (8002a78 <HAL_GetTick+0x14>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	240001e4 	.word	0x240001e4

08002a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a84:	f7ff ffee 	bl	8002a64 <HAL_GetTick>
 8002a88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a94:	d005      	beq.n	8002aa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a96:	4b0a      	ldr	r3, [pc, #40]	@ (8002ac0 <HAL_Delay+0x44>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002aa2:	bf00      	nop
 8002aa4:	f7ff ffde 	bl	8002a64 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d8f7      	bhi.n	8002aa4 <HAL_Delay+0x28>
  {
  }
}
 8002ab4:	bf00      	nop
 8002ab6:	bf00      	nop
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	24000028 	.word	0x24000028

08002ac4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002ac8:	4b03      	ldr	r3, [pc, #12]	@ (8002ad8 <HAL_GetREVID+0x14>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	0c1b      	lsrs	r3, r3, #16
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	5c001000 	.word	0x5c001000

08002adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aec:	4b0b      	ldr	r3, [pc, #44]	@ (8002b1c <__NVIC_SetPriorityGrouping+0x40>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002af8:	4013      	ands	r3, r2
 8002afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b04:	4b06      	ldr	r3, [pc, #24]	@ (8002b20 <__NVIC_SetPriorityGrouping+0x44>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b0a:	4a04      	ldr	r2, [pc, #16]	@ (8002b1c <__NVIC_SetPriorityGrouping+0x40>)
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	60d3      	str	r3, [r2, #12]
}
 8002b10:	bf00      	nop
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	e000ed00 	.word	0xe000ed00
 8002b20:	05fa0000 	.word	0x05fa0000

08002b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b28:	4b04      	ldr	r3, [pc, #16]	@ (8002b3c <__NVIC_GetPriorityGrouping+0x18>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	0a1b      	lsrs	r3, r3, #8
 8002b2e:	f003 0307 	and.w	r3, r3, #7
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	e000ed00 	.word	0xe000ed00

08002b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	db0b      	blt.n	8002b6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b52:	88fb      	ldrh	r3, [r7, #6]
 8002b54:	f003 021f 	and.w	r2, r3, #31
 8002b58:	4907      	ldr	r1, [pc, #28]	@ (8002b78 <__NVIC_EnableIRQ+0x38>)
 8002b5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b5e:	095b      	lsrs	r3, r3, #5
 8002b60:	2001      	movs	r0, #1
 8002b62:	fa00 f202 	lsl.w	r2, r0, r2
 8002b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	e000e100 	.word	0xe000e100

08002b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	6039      	str	r1, [r7, #0]
 8002b86:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	db0a      	blt.n	8002ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	b2da      	uxtb	r2, r3
 8002b94:	490c      	ldr	r1, [pc, #48]	@ (8002bc8 <__NVIC_SetPriority+0x4c>)
 8002b96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b9a:	0112      	lsls	r2, r2, #4
 8002b9c:	b2d2      	uxtb	r2, r2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ba4:	e00a      	b.n	8002bbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	4908      	ldr	r1, [pc, #32]	@ (8002bcc <__NVIC_SetPriority+0x50>)
 8002bac:	88fb      	ldrh	r3, [r7, #6]
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	3b04      	subs	r3, #4
 8002bb4:	0112      	lsls	r2, r2, #4
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	440b      	add	r3, r1
 8002bba:	761a      	strb	r2, [r3, #24]
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	e000e100 	.word	0xe000e100
 8002bcc:	e000ed00 	.word	0xe000ed00

08002bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b089      	sub	sp, #36	@ 0x24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f1c3 0307 	rsb	r3, r3, #7
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	bf28      	it	cs
 8002bee:	2304      	movcs	r3, #4
 8002bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	2b06      	cmp	r3, #6
 8002bf8:	d902      	bls.n	8002c00 <NVIC_EncodePriority+0x30>
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	3b03      	subs	r3, #3
 8002bfe:	e000      	b.n	8002c02 <NVIC_EncodePriority+0x32>
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c04:	f04f 32ff 	mov.w	r2, #4294967295
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	43da      	mvns	r2, r3
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	401a      	ands	r2, r3
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c18:	f04f 31ff 	mov.w	r1, #4294967295
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c22:	43d9      	mvns	r1, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c28:	4313      	orrs	r3, r2
         );
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3724      	adds	r7, #36	@ 0x24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
	...

08002c38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c48:	d301      	bcc.n	8002c4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e00f      	b.n	8002c6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c78 <SysTick_Config+0x40>)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c56:	210f      	movs	r1, #15
 8002c58:	f04f 30ff 	mov.w	r0, #4294967295
 8002c5c:	f7ff ff8e 	bl	8002b7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c60:	4b05      	ldr	r3, [pc, #20]	@ (8002c78 <SysTick_Config+0x40>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c66:	4b04      	ldr	r3, [pc, #16]	@ (8002c78 <SysTick_Config+0x40>)
 8002c68:	2207      	movs	r2, #7
 8002c6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	e000e010 	.word	0xe000e010

08002c7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7ff ff29 	bl	8002adc <__NVIC_SetPriorityGrouping>
}
 8002c8a:	bf00      	nop
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b086      	sub	sp, #24
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	4603      	mov	r3, r0
 8002c9a:	60b9      	str	r1, [r7, #8]
 8002c9c:	607a      	str	r2, [r7, #4]
 8002c9e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ca0:	f7ff ff40 	bl	8002b24 <__NVIC_GetPriorityGrouping>
 8002ca4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	68b9      	ldr	r1, [r7, #8]
 8002caa:	6978      	ldr	r0, [r7, #20]
 8002cac:	f7ff ff90 	bl	8002bd0 <NVIC_EncodePriority>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff ff5f 	bl	8002b7c <__NVIC_SetPriority>
}
 8002cbe:	bf00      	nop
 8002cc0:	3718      	adds	r7, #24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b082      	sub	sp, #8
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	4603      	mov	r3, r0
 8002cce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff ff33 	bl	8002b40 <__NVIC_EnableIRQ>
}
 8002cda:	bf00      	nop
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b082      	sub	sp, #8
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7ff ffa4 	bl	8002c38 <SysTick_Config>
 8002cf0:	4603      	mov	r3, r0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
	...

08002cfc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002d00:	f3bf 8f5f 	dmb	sy
}
 8002d04:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002d06:	4b07      	ldr	r3, [pc, #28]	@ (8002d24 <HAL_MPU_Disable+0x28>)
 8002d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0a:	4a06      	ldr	r2, [pc, #24]	@ (8002d24 <HAL_MPU_Disable+0x28>)
 8002d0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d10:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002d12:	4b05      	ldr	r3, [pc, #20]	@ (8002d28 <HAL_MPU_Disable+0x2c>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	605a      	str	r2, [r3, #4]
}
 8002d18:	bf00      	nop
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	e000ed00 	.word	0xe000ed00
 8002d28:	e000ed90 	.word	0xe000ed90

08002d2c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002d34:	4a0b      	ldr	r2, [pc, #44]	@ (8002d64 <HAL_MPU_Enable+0x38>)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f043 0301 	orr.w	r3, r3, #1
 8002d3c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d68 <HAL_MPU_Enable+0x3c>)
 8002d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d42:	4a09      	ldr	r2, [pc, #36]	@ (8002d68 <HAL_MPU_Enable+0x3c>)
 8002d44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d48:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002d4a:	f3bf 8f4f 	dsb	sy
}
 8002d4e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d50:	f3bf 8f6f 	isb	sy
}
 8002d54:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	e000ed90 	.word	0xe000ed90
 8002d68:	e000ed00 	.word	0xe000ed00

08002d6c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	785a      	ldrb	r2, [r3, #1]
 8002d78:	4b1b      	ldr	r3, [pc, #108]	@ (8002de8 <HAL_MPU_ConfigRegion+0x7c>)
 8002d7a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8002de8 <HAL_MPU_ConfigRegion+0x7c>)
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	4a19      	ldr	r2, [pc, #100]	@ (8002de8 <HAL_MPU_ConfigRegion+0x7c>)
 8002d82:	f023 0301 	bic.w	r3, r3, #1
 8002d86:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002d88:	4a17      	ldr	r2, [pc, #92]	@ (8002de8 <HAL_MPU_ConfigRegion+0x7c>)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	7b1b      	ldrb	r3, [r3, #12]
 8002d94:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	7adb      	ldrb	r3, [r3, #11]
 8002d9a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d9c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	7a9b      	ldrb	r3, [r3, #10]
 8002da2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002da4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	7b5b      	ldrb	r3, [r3, #13]
 8002daa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002dac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	7b9b      	ldrb	r3, [r3, #14]
 8002db2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002db4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	7bdb      	ldrb	r3, [r3, #15]
 8002dba:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002dbc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	7a5b      	ldrb	r3, [r3, #9]
 8002dc2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002dc4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	7a1b      	ldrb	r3, [r3, #8]
 8002dca:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002dcc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	7812      	ldrb	r2, [r2, #0]
 8002dd2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002dd4:	4a04      	ldr	r2, [pc, #16]	@ (8002de8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002dd6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002dd8:	6113      	str	r3, [r2, #16]
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	e000ed90 	.word	0xe000ed90

08002dec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e237      	b.n	800326e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d004      	beq.n	8002e14 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2280      	movs	r2, #128	@ 0x80
 8002e0e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e22c      	b.n	800326e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a5c      	ldr	r2, [pc, #368]	@ (8002f8c <HAL_DMA_Abort_IT+0x1a0>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d04a      	beq.n	8002eb4 <HAL_DMA_Abort_IT+0xc8>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a5b      	ldr	r2, [pc, #364]	@ (8002f90 <HAL_DMA_Abort_IT+0x1a4>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d045      	beq.n	8002eb4 <HAL_DMA_Abort_IT+0xc8>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a59      	ldr	r2, [pc, #356]	@ (8002f94 <HAL_DMA_Abort_IT+0x1a8>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d040      	beq.n	8002eb4 <HAL_DMA_Abort_IT+0xc8>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a58      	ldr	r2, [pc, #352]	@ (8002f98 <HAL_DMA_Abort_IT+0x1ac>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d03b      	beq.n	8002eb4 <HAL_DMA_Abort_IT+0xc8>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a56      	ldr	r2, [pc, #344]	@ (8002f9c <HAL_DMA_Abort_IT+0x1b0>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d036      	beq.n	8002eb4 <HAL_DMA_Abort_IT+0xc8>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a55      	ldr	r2, [pc, #340]	@ (8002fa0 <HAL_DMA_Abort_IT+0x1b4>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d031      	beq.n	8002eb4 <HAL_DMA_Abort_IT+0xc8>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a53      	ldr	r2, [pc, #332]	@ (8002fa4 <HAL_DMA_Abort_IT+0x1b8>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d02c      	beq.n	8002eb4 <HAL_DMA_Abort_IT+0xc8>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a52      	ldr	r2, [pc, #328]	@ (8002fa8 <HAL_DMA_Abort_IT+0x1bc>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d027      	beq.n	8002eb4 <HAL_DMA_Abort_IT+0xc8>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a50      	ldr	r2, [pc, #320]	@ (8002fac <HAL_DMA_Abort_IT+0x1c0>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d022      	beq.n	8002eb4 <HAL_DMA_Abort_IT+0xc8>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a4f      	ldr	r2, [pc, #316]	@ (8002fb0 <HAL_DMA_Abort_IT+0x1c4>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d01d      	beq.n	8002eb4 <HAL_DMA_Abort_IT+0xc8>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a4d      	ldr	r2, [pc, #308]	@ (8002fb4 <HAL_DMA_Abort_IT+0x1c8>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d018      	beq.n	8002eb4 <HAL_DMA_Abort_IT+0xc8>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a4c      	ldr	r2, [pc, #304]	@ (8002fb8 <HAL_DMA_Abort_IT+0x1cc>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d013      	beq.n	8002eb4 <HAL_DMA_Abort_IT+0xc8>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a4a      	ldr	r2, [pc, #296]	@ (8002fbc <HAL_DMA_Abort_IT+0x1d0>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d00e      	beq.n	8002eb4 <HAL_DMA_Abort_IT+0xc8>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a49      	ldr	r2, [pc, #292]	@ (8002fc0 <HAL_DMA_Abort_IT+0x1d4>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d009      	beq.n	8002eb4 <HAL_DMA_Abort_IT+0xc8>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a47      	ldr	r2, [pc, #284]	@ (8002fc4 <HAL_DMA_Abort_IT+0x1d8>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d004      	beq.n	8002eb4 <HAL_DMA_Abort_IT+0xc8>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a46      	ldr	r2, [pc, #280]	@ (8002fc8 <HAL_DMA_Abort_IT+0x1dc>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d101      	bne.n	8002eb8 <HAL_DMA_Abort_IT+0xcc>
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e000      	b.n	8002eba <HAL_DMA_Abort_IT+0xce>
 8002eb8:	2300      	movs	r3, #0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f000 8086 	beq.w	8002fcc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2204      	movs	r2, #4
 8002ec4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a2f      	ldr	r2, [pc, #188]	@ (8002f8c <HAL_DMA_Abort_IT+0x1a0>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d04a      	beq.n	8002f68 <HAL_DMA_Abort_IT+0x17c>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a2e      	ldr	r2, [pc, #184]	@ (8002f90 <HAL_DMA_Abort_IT+0x1a4>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d045      	beq.n	8002f68 <HAL_DMA_Abort_IT+0x17c>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a2c      	ldr	r2, [pc, #176]	@ (8002f94 <HAL_DMA_Abort_IT+0x1a8>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d040      	beq.n	8002f68 <HAL_DMA_Abort_IT+0x17c>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a2b      	ldr	r2, [pc, #172]	@ (8002f98 <HAL_DMA_Abort_IT+0x1ac>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d03b      	beq.n	8002f68 <HAL_DMA_Abort_IT+0x17c>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a29      	ldr	r2, [pc, #164]	@ (8002f9c <HAL_DMA_Abort_IT+0x1b0>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d036      	beq.n	8002f68 <HAL_DMA_Abort_IT+0x17c>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a28      	ldr	r2, [pc, #160]	@ (8002fa0 <HAL_DMA_Abort_IT+0x1b4>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d031      	beq.n	8002f68 <HAL_DMA_Abort_IT+0x17c>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a26      	ldr	r2, [pc, #152]	@ (8002fa4 <HAL_DMA_Abort_IT+0x1b8>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d02c      	beq.n	8002f68 <HAL_DMA_Abort_IT+0x17c>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a25      	ldr	r2, [pc, #148]	@ (8002fa8 <HAL_DMA_Abort_IT+0x1bc>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d027      	beq.n	8002f68 <HAL_DMA_Abort_IT+0x17c>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a23      	ldr	r2, [pc, #140]	@ (8002fac <HAL_DMA_Abort_IT+0x1c0>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d022      	beq.n	8002f68 <HAL_DMA_Abort_IT+0x17c>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a22      	ldr	r2, [pc, #136]	@ (8002fb0 <HAL_DMA_Abort_IT+0x1c4>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d01d      	beq.n	8002f68 <HAL_DMA_Abort_IT+0x17c>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a20      	ldr	r2, [pc, #128]	@ (8002fb4 <HAL_DMA_Abort_IT+0x1c8>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d018      	beq.n	8002f68 <HAL_DMA_Abort_IT+0x17c>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a1f      	ldr	r2, [pc, #124]	@ (8002fb8 <HAL_DMA_Abort_IT+0x1cc>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d013      	beq.n	8002f68 <HAL_DMA_Abort_IT+0x17c>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a1d      	ldr	r2, [pc, #116]	@ (8002fbc <HAL_DMA_Abort_IT+0x1d0>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d00e      	beq.n	8002f68 <HAL_DMA_Abort_IT+0x17c>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a1c      	ldr	r2, [pc, #112]	@ (8002fc0 <HAL_DMA_Abort_IT+0x1d4>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d009      	beq.n	8002f68 <HAL_DMA_Abort_IT+0x17c>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a1a      	ldr	r2, [pc, #104]	@ (8002fc4 <HAL_DMA_Abort_IT+0x1d8>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d004      	beq.n	8002f68 <HAL_DMA_Abort_IT+0x17c>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a19      	ldr	r2, [pc, #100]	@ (8002fc8 <HAL_DMA_Abort_IT+0x1dc>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d108      	bne.n	8002f7a <HAL_DMA_Abort_IT+0x18e>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0201 	bic.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	e178      	b.n	800326c <HAL_DMA_Abort_IT+0x480>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0201 	bic.w	r2, r2, #1
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	e16f      	b.n	800326c <HAL_DMA_Abort_IT+0x480>
 8002f8c:	40020010 	.word	0x40020010
 8002f90:	40020028 	.word	0x40020028
 8002f94:	40020040 	.word	0x40020040
 8002f98:	40020058 	.word	0x40020058
 8002f9c:	40020070 	.word	0x40020070
 8002fa0:	40020088 	.word	0x40020088
 8002fa4:	400200a0 	.word	0x400200a0
 8002fa8:	400200b8 	.word	0x400200b8
 8002fac:	40020410 	.word	0x40020410
 8002fb0:	40020428 	.word	0x40020428
 8002fb4:	40020440 	.word	0x40020440
 8002fb8:	40020458 	.word	0x40020458
 8002fbc:	40020470 	.word	0x40020470
 8002fc0:	40020488 	.word	0x40020488
 8002fc4:	400204a0 	.word	0x400204a0
 8002fc8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 020e 	bic.w	r2, r2, #14
 8002fda:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a6c      	ldr	r2, [pc, #432]	@ (8003194 <HAL_DMA_Abort_IT+0x3a8>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d04a      	beq.n	800307c <HAL_DMA_Abort_IT+0x290>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a6b      	ldr	r2, [pc, #428]	@ (8003198 <HAL_DMA_Abort_IT+0x3ac>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d045      	beq.n	800307c <HAL_DMA_Abort_IT+0x290>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a69      	ldr	r2, [pc, #420]	@ (800319c <HAL_DMA_Abort_IT+0x3b0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d040      	beq.n	800307c <HAL_DMA_Abort_IT+0x290>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a68      	ldr	r2, [pc, #416]	@ (80031a0 <HAL_DMA_Abort_IT+0x3b4>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d03b      	beq.n	800307c <HAL_DMA_Abort_IT+0x290>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a66      	ldr	r2, [pc, #408]	@ (80031a4 <HAL_DMA_Abort_IT+0x3b8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d036      	beq.n	800307c <HAL_DMA_Abort_IT+0x290>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a65      	ldr	r2, [pc, #404]	@ (80031a8 <HAL_DMA_Abort_IT+0x3bc>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d031      	beq.n	800307c <HAL_DMA_Abort_IT+0x290>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a63      	ldr	r2, [pc, #396]	@ (80031ac <HAL_DMA_Abort_IT+0x3c0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d02c      	beq.n	800307c <HAL_DMA_Abort_IT+0x290>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a62      	ldr	r2, [pc, #392]	@ (80031b0 <HAL_DMA_Abort_IT+0x3c4>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d027      	beq.n	800307c <HAL_DMA_Abort_IT+0x290>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a60      	ldr	r2, [pc, #384]	@ (80031b4 <HAL_DMA_Abort_IT+0x3c8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d022      	beq.n	800307c <HAL_DMA_Abort_IT+0x290>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a5f      	ldr	r2, [pc, #380]	@ (80031b8 <HAL_DMA_Abort_IT+0x3cc>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d01d      	beq.n	800307c <HAL_DMA_Abort_IT+0x290>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a5d      	ldr	r2, [pc, #372]	@ (80031bc <HAL_DMA_Abort_IT+0x3d0>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d018      	beq.n	800307c <HAL_DMA_Abort_IT+0x290>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a5c      	ldr	r2, [pc, #368]	@ (80031c0 <HAL_DMA_Abort_IT+0x3d4>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d013      	beq.n	800307c <HAL_DMA_Abort_IT+0x290>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a5a      	ldr	r2, [pc, #360]	@ (80031c4 <HAL_DMA_Abort_IT+0x3d8>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d00e      	beq.n	800307c <HAL_DMA_Abort_IT+0x290>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a59      	ldr	r2, [pc, #356]	@ (80031c8 <HAL_DMA_Abort_IT+0x3dc>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d009      	beq.n	800307c <HAL_DMA_Abort_IT+0x290>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a57      	ldr	r2, [pc, #348]	@ (80031cc <HAL_DMA_Abort_IT+0x3e0>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d004      	beq.n	800307c <HAL_DMA_Abort_IT+0x290>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a56      	ldr	r2, [pc, #344]	@ (80031d0 <HAL_DMA_Abort_IT+0x3e4>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d108      	bne.n	800308e <HAL_DMA_Abort_IT+0x2a2>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 0201 	bic.w	r2, r2, #1
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	e007      	b.n	800309e <HAL_DMA_Abort_IT+0x2b2>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0201 	bic.w	r2, r2, #1
 800309c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a3c      	ldr	r2, [pc, #240]	@ (8003194 <HAL_DMA_Abort_IT+0x3a8>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d072      	beq.n	800318e <HAL_DMA_Abort_IT+0x3a2>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a3a      	ldr	r2, [pc, #232]	@ (8003198 <HAL_DMA_Abort_IT+0x3ac>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d06d      	beq.n	800318e <HAL_DMA_Abort_IT+0x3a2>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a39      	ldr	r2, [pc, #228]	@ (800319c <HAL_DMA_Abort_IT+0x3b0>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d068      	beq.n	800318e <HAL_DMA_Abort_IT+0x3a2>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a37      	ldr	r2, [pc, #220]	@ (80031a0 <HAL_DMA_Abort_IT+0x3b4>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d063      	beq.n	800318e <HAL_DMA_Abort_IT+0x3a2>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a36      	ldr	r2, [pc, #216]	@ (80031a4 <HAL_DMA_Abort_IT+0x3b8>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d05e      	beq.n	800318e <HAL_DMA_Abort_IT+0x3a2>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a34      	ldr	r2, [pc, #208]	@ (80031a8 <HAL_DMA_Abort_IT+0x3bc>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d059      	beq.n	800318e <HAL_DMA_Abort_IT+0x3a2>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a33      	ldr	r2, [pc, #204]	@ (80031ac <HAL_DMA_Abort_IT+0x3c0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d054      	beq.n	800318e <HAL_DMA_Abort_IT+0x3a2>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a31      	ldr	r2, [pc, #196]	@ (80031b0 <HAL_DMA_Abort_IT+0x3c4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d04f      	beq.n	800318e <HAL_DMA_Abort_IT+0x3a2>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a30      	ldr	r2, [pc, #192]	@ (80031b4 <HAL_DMA_Abort_IT+0x3c8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d04a      	beq.n	800318e <HAL_DMA_Abort_IT+0x3a2>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a2e      	ldr	r2, [pc, #184]	@ (80031b8 <HAL_DMA_Abort_IT+0x3cc>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d045      	beq.n	800318e <HAL_DMA_Abort_IT+0x3a2>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a2d      	ldr	r2, [pc, #180]	@ (80031bc <HAL_DMA_Abort_IT+0x3d0>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d040      	beq.n	800318e <HAL_DMA_Abort_IT+0x3a2>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a2b      	ldr	r2, [pc, #172]	@ (80031c0 <HAL_DMA_Abort_IT+0x3d4>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d03b      	beq.n	800318e <HAL_DMA_Abort_IT+0x3a2>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a2a      	ldr	r2, [pc, #168]	@ (80031c4 <HAL_DMA_Abort_IT+0x3d8>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d036      	beq.n	800318e <HAL_DMA_Abort_IT+0x3a2>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a28      	ldr	r2, [pc, #160]	@ (80031c8 <HAL_DMA_Abort_IT+0x3dc>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d031      	beq.n	800318e <HAL_DMA_Abort_IT+0x3a2>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a27      	ldr	r2, [pc, #156]	@ (80031cc <HAL_DMA_Abort_IT+0x3e0>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d02c      	beq.n	800318e <HAL_DMA_Abort_IT+0x3a2>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a25      	ldr	r2, [pc, #148]	@ (80031d0 <HAL_DMA_Abort_IT+0x3e4>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d027      	beq.n	800318e <HAL_DMA_Abort_IT+0x3a2>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a24      	ldr	r2, [pc, #144]	@ (80031d4 <HAL_DMA_Abort_IT+0x3e8>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d022      	beq.n	800318e <HAL_DMA_Abort_IT+0x3a2>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a22      	ldr	r2, [pc, #136]	@ (80031d8 <HAL_DMA_Abort_IT+0x3ec>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d01d      	beq.n	800318e <HAL_DMA_Abort_IT+0x3a2>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a21      	ldr	r2, [pc, #132]	@ (80031dc <HAL_DMA_Abort_IT+0x3f0>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d018      	beq.n	800318e <HAL_DMA_Abort_IT+0x3a2>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a1f      	ldr	r2, [pc, #124]	@ (80031e0 <HAL_DMA_Abort_IT+0x3f4>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d013      	beq.n	800318e <HAL_DMA_Abort_IT+0x3a2>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a1e      	ldr	r2, [pc, #120]	@ (80031e4 <HAL_DMA_Abort_IT+0x3f8>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d00e      	beq.n	800318e <HAL_DMA_Abort_IT+0x3a2>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a1c      	ldr	r2, [pc, #112]	@ (80031e8 <HAL_DMA_Abort_IT+0x3fc>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d009      	beq.n	800318e <HAL_DMA_Abort_IT+0x3a2>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a1b      	ldr	r2, [pc, #108]	@ (80031ec <HAL_DMA_Abort_IT+0x400>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d004      	beq.n	800318e <HAL_DMA_Abort_IT+0x3a2>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a19      	ldr	r2, [pc, #100]	@ (80031f0 <HAL_DMA_Abort_IT+0x404>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d132      	bne.n	80031f4 <HAL_DMA_Abort_IT+0x408>
 800318e:	2301      	movs	r3, #1
 8003190:	e031      	b.n	80031f6 <HAL_DMA_Abort_IT+0x40a>
 8003192:	bf00      	nop
 8003194:	40020010 	.word	0x40020010
 8003198:	40020028 	.word	0x40020028
 800319c:	40020040 	.word	0x40020040
 80031a0:	40020058 	.word	0x40020058
 80031a4:	40020070 	.word	0x40020070
 80031a8:	40020088 	.word	0x40020088
 80031ac:	400200a0 	.word	0x400200a0
 80031b0:	400200b8 	.word	0x400200b8
 80031b4:	40020410 	.word	0x40020410
 80031b8:	40020428 	.word	0x40020428
 80031bc:	40020440 	.word	0x40020440
 80031c0:	40020458 	.word	0x40020458
 80031c4:	40020470 	.word	0x40020470
 80031c8:	40020488 	.word	0x40020488
 80031cc:	400204a0 	.word	0x400204a0
 80031d0:	400204b8 	.word	0x400204b8
 80031d4:	58025408 	.word	0x58025408
 80031d8:	5802541c 	.word	0x5802541c
 80031dc:	58025430 	.word	0x58025430
 80031e0:	58025444 	.word	0x58025444
 80031e4:	58025458 	.word	0x58025458
 80031e8:	5802546c 	.word	0x5802546c
 80031ec:	58025480 	.word	0x58025480
 80031f0:	58025494 	.word	0x58025494
 80031f4:	2300      	movs	r3, #0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d028      	beq.n	800324c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003204:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003208:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800320e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003214:	f003 031f 	and.w	r3, r3, #31
 8003218:	2201      	movs	r2, #1
 800321a:	409a      	lsls	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003228:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00c      	beq.n	800324c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800323c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003240:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800324a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003260:	2b00      	cmp	r3, #0
 8003262:	d003      	beq.n	800326c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop

08003278 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8003278:	b480      	push	{r7}
 800327a:	b087      	sub	sp, #28
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	460b      	mov	r3, r1
 8003282:	607a      	str	r2, [r7, #4]
 8003284:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003286:	2300      	movs	r3, #0
 8003288:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e00a      	b.n	80032aa <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8003294:	7afb      	ldrb	r3, [r7, #11]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d103      	bne.n	80032a2 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	605a      	str	r2, [r3, #4]
      break;
 80032a0:	e002      	b.n	80032a8 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	75fb      	strb	r3, [r7, #23]
      break;
 80032a6:	bf00      	nop
  }

  return status;
 80032a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	371c      	adds	r7, #28
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
 80032be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e003      	b.n	80032d2 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80032d0:	2300      	movs	r3, #0
  }
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
	...

080032e0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	0c1b      	lsrs	r3, r3, #16
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 031f 	and.w	r3, r3, #31
 80032fc:	2201      	movs	r2, #1
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	011a      	lsls	r2, r3, #4
 8003308:	4b0c      	ldr	r3, [pc, #48]	@ (800333c <HAL_EXTI_IRQHandler+0x5c>)
 800330a:	4413      	add	r3, r2
 800330c:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	4013      	ands	r3, r2
 8003316:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d009      	beq.n	8003332 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d002      	beq.n	8003332 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	4798      	blx	r3
    }
  }
}
 8003332:	bf00      	nop
 8003334:	3718      	adds	r7, #24
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	58000088 	.word	0x58000088

08003340 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003340:	b480      	push	{r7}
 8003342:	b089      	sub	sp, #36	@ 0x24
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800334a:	2300      	movs	r3, #0
 800334c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800334e:	4b89      	ldr	r3, [pc, #548]	@ (8003574 <HAL_GPIO_Init+0x234>)
 8003350:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003352:	e194      	b.n	800367e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	2101      	movs	r1, #1
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	fa01 f303 	lsl.w	r3, r1, r3
 8003360:	4013      	ands	r3, r2
 8003362:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 8186 	beq.w	8003678 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 0303 	and.w	r3, r3, #3
 8003374:	2b01      	cmp	r3, #1
 8003376:	d005      	beq.n	8003384 <HAL_GPIO_Init+0x44>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 0303 	and.w	r3, r3, #3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d130      	bne.n	80033e6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	2203      	movs	r2, #3
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	43db      	mvns	r3, r3
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	4013      	ands	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	68da      	ldr	r2, [r3, #12]
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033ba:	2201      	movs	r2, #1
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	43db      	mvns	r3, r3
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	4013      	ands	r3, r2
 80033c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	091b      	lsrs	r3, r3, #4
 80033d0:	f003 0201 	and.w	r2, r3, #1
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	4313      	orrs	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	2b03      	cmp	r3, #3
 80033f0:	d017      	beq.n	8003422 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	2203      	movs	r2, #3
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	43db      	mvns	r3, r3
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	4013      	ands	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	4313      	orrs	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d123      	bne.n	8003476 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	08da      	lsrs	r2, r3, #3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3208      	adds	r2, #8
 8003436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800343a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	220f      	movs	r2, #15
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	43db      	mvns	r3, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4013      	ands	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	691a      	ldr	r2, [r3, #16]
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	4313      	orrs	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	08da      	lsrs	r2, r3, #3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3208      	adds	r2, #8
 8003470:	69b9      	ldr	r1, [r7, #24]
 8003472:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	2203      	movs	r2, #3
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	43db      	mvns	r3, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4013      	ands	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f003 0203 	and.w	r2, r3, #3
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 80e0 	beq.w	8003678 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034b8:	4b2f      	ldr	r3, [pc, #188]	@ (8003578 <HAL_GPIO_Init+0x238>)
 80034ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80034be:	4a2e      	ldr	r2, [pc, #184]	@ (8003578 <HAL_GPIO_Init+0x238>)
 80034c0:	f043 0302 	orr.w	r3, r3, #2
 80034c4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80034c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003578 <HAL_GPIO_Init+0x238>)
 80034ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034d6:	4a29      	ldr	r2, [pc, #164]	@ (800357c <HAL_GPIO_Init+0x23c>)
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	089b      	lsrs	r3, r3, #2
 80034dc:	3302      	adds	r3, #2
 80034de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	220f      	movs	r2, #15
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	43db      	mvns	r3, r3
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4013      	ands	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a20      	ldr	r2, [pc, #128]	@ (8003580 <HAL_GPIO_Init+0x240>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d052      	beq.n	80035a8 <HAL_GPIO_Init+0x268>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a1f      	ldr	r2, [pc, #124]	@ (8003584 <HAL_GPIO_Init+0x244>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d031      	beq.n	800356e <HAL_GPIO_Init+0x22e>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a1e      	ldr	r2, [pc, #120]	@ (8003588 <HAL_GPIO_Init+0x248>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d02b      	beq.n	800356a <HAL_GPIO_Init+0x22a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a1d      	ldr	r2, [pc, #116]	@ (800358c <HAL_GPIO_Init+0x24c>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d025      	beq.n	8003566 <HAL_GPIO_Init+0x226>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a1c      	ldr	r2, [pc, #112]	@ (8003590 <HAL_GPIO_Init+0x250>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d01f      	beq.n	8003562 <HAL_GPIO_Init+0x222>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a1b      	ldr	r2, [pc, #108]	@ (8003594 <HAL_GPIO_Init+0x254>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d019      	beq.n	800355e <HAL_GPIO_Init+0x21e>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a1a      	ldr	r2, [pc, #104]	@ (8003598 <HAL_GPIO_Init+0x258>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d013      	beq.n	800355a <HAL_GPIO_Init+0x21a>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a19      	ldr	r2, [pc, #100]	@ (800359c <HAL_GPIO_Init+0x25c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d00d      	beq.n	8003556 <HAL_GPIO_Init+0x216>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a18      	ldr	r2, [pc, #96]	@ (80035a0 <HAL_GPIO_Init+0x260>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d007      	beq.n	8003552 <HAL_GPIO_Init+0x212>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a17      	ldr	r2, [pc, #92]	@ (80035a4 <HAL_GPIO_Init+0x264>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d101      	bne.n	800354e <HAL_GPIO_Init+0x20e>
 800354a:	2309      	movs	r3, #9
 800354c:	e02d      	b.n	80035aa <HAL_GPIO_Init+0x26a>
 800354e:	230a      	movs	r3, #10
 8003550:	e02b      	b.n	80035aa <HAL_GPIO_Init+0x26a>
 8003552:	2308      	movs	r3, #8
 8003554:	e029      	b.n	80035aa <HAL_GPIO_Init+0x26a>
 8003556:	2307      	movs	r3, #7
 8003558:	e027      	b.n	80035aa <HAL_GPIO_Init+0x26a>
 800355a:	2306      	movs	r3, #6
 800355c:	e025      	b.n	80035aa <HAL_GPIO_Init+0x26a>
 800355e:	2305      	movs	r3, #5
 8003560:	e023      	b.n	80035aa <HAL_GPIO_Init+0x26a>
 8003562:	2304      	movs	r3, #4
 8003564:	e021      	b.n	80035aa <HAL_GPIO_Init+0x26a>
 8003566:	2303      	movs	r3, #3
 8003568:	e01f      	b.n	80035aa <HAL_GPIO_Init+0x26a>
 800356a:	2302      	movs	r3, #2
 800356c:	e01d      	b.n	80035aa <HAL_GPIO_Init+0x26a>
 800356e:	2301      	movs	r3, #1
 8003570:	e01b      	b.n	80035aa <HAL_GPIO_Init+0x26a>
 8003572:	bf00      	nop
 8003574:	58000080 	.word	0x58000080
 8003578:	58024400 	.word	0x58024400
 800357c:	58000400 	.word	0x58000400
 8003580:	58020000 	.word	0x58020000
 8003584:	58020400 	.word	0x58020400
 8003588:	58020800 	.word	0x58020800
 800358c:	58020c00 	.word	0x58020c00
 8003590:	58021000 	.word	0x58021000
 8003594:	58021400 	.word	0x58021400
 8003598:	58021800 	.word	0x58021800
 800359c:	58021c00 	.word	0x58021c00
 80035a0:	58022000 	.word	0x58022000
 80035a4:	58022400 	.word	0x58022400
 80035a8:	2300      	movs	r3, #0
 80035aa:	69fa      	ldr	r2, [r7, #28]
 80035ac:	f002 0203 	and.w	r2, r2, #3
 80035b0:	0092      	lsls	r2, r2, #2
 80035b2:	4093      	lsls	r3, r2
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035ba:	4938      	ldr	r1, [pc, #224]	@ (800369c <HAL_GPIO_Init+0x35c>)
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	089b      	lsrs	r3, r3, #2
 80035c0:	3302      	adds	r3, #2
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	43db      	mvns	r3, r3
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	4013      	ands	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80035ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80035f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	43db      	mvns	r3, r3
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	4013      	ands	r3, r2
 8003606:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	4313      	orrs	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800361c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	43db      	mvns	r3, r3
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4013      	ands	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	4313      	orrs	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	43db      	mvns	r3, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4013      	ands	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	4313      	orrs	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	3301      	adds	r3, #1
 800367c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	fa22 f303 	lsr.w	r3, r2, r3
 8003688:	2b00      	cmp	r3, #0
 800368a:	f47f ae63 	bne.w	8003354 <HAL_GPIO_Init+0x14>
  }
}
 800368e:	bf00      	nop
 8003690:	bf00      	nop
 8003692:	3724      	adds	r7, #36	@ 0x24
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	58000400 	.word	0x58000400

080036a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	460b      	mov	r3, r1
 80036aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	691a      	ldr	r2, [r3, #16]
 80036b0:	887b      	ldrh	r3, [r7, #2]
 80036b2:	4013      	ands	r3, r2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d002      	beq.n	80036be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036b8:	2301      	movs	r3, #1
 80036ba:	73fb      	strb	r3, [r7, #15]
 80036bc:	e001      	b.n	80036c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036be:	2300      	movs	r3, #0
 80036c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	460b      	mov	r3, r1
 80036da:	807b      	strh	r3, [r7, #2]
 80036dc:	4613      	mov	r3, r2
 80036de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036e0:	787b      	ldrb	r3, [r7, #1]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036e6:	887a      	ldrh	r2, [r7, #2]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80036ec:	e003      	b.n	80036f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80036ee:	887b      	ldrh	r3, [r7, #2]
 80036f0:	041a      	lsls	r2, r3, #16
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	619a      	str	r2, [r3, #24]
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
 800370a:	460b      	mov	r3, r1
 800370c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003714:	887a      	ldrh	r2, [r7, #2]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	4013      	ands	r3, r2
 800371a:	041a      	lsls	r2, r3, #16
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	43d9      	mvns	r1, r3
 8003720:	887b      	ldrh	r3, [r7, #2]
 8003722:	400b      	ands	r3, r1
 8003724:	431a      	orrs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	619a      	str	r2, [r3, #24]
}
 800372a:	bf00      	nop
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b082      	sub	sp, #8
 800373a:	af00      	add	r7, sp, #0
 800373c:	4603      	mov	r3, r0
 800373e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003740:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003744:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003748:	88fb      	ldrh	r3, [r7, #6]
 800374a:	4013      	ands	r3, r2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d008      	beq.n	8003762 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003750:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003754:	88fb      	ldrh	r3, [r7, #6]
 8003756:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800375a:	88fb      	ldrh	r3, [r7, #6]
 800375c:	4618      	mov	r0, r3
 800375e:	f7fe fbad 	bl	8001ebc <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003762:	bf00      	nop
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
	...

0800376c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003774:	4b19      	ldr	r3, [pc, #100]	@ (80037dc <HAL_PWREx_ConfigSupply+0x70>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b04      	cmp	r3, #4
 800377e:	d00a      	beq.n	8003796 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003780:	4b16      	ldr	r3, [pc, #88]	@ (80037dc <HAL_PWREx_ConfigSupply+0x70>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	429a      	cmp	r2, r3
 800378c:	d001      	beq.n	8003792 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e01f      	b.n	80037d2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003792:	2300      	movs	r3, #0
 8003794:	e01d      	b.n	80037d2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003796:	4b11      	ldr	r3, [pc, #68]	@ (80037dc <HAL_PWREx_ConfigSupply+0x70>)
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	f023 0207 	bic.w	r2, r3, #7
 800379e:	490f      	ldr	r1, [pc, #60]	@ (80037dc <HAL_PWREx_ConfigSupply+0x70>)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80037a6:	f7ff f95d 	bl	8002a64 <HAL_GetTick>
 80037aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80037ac:	e009      	b.n	80037c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80037ae:	f7ff f959 	bl	8002a64 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80037bc:	d901      	bls.n	80037c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e007      	b.n	80037d2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80037c2:	4b06      	ldr	r3, [pc, #24]	@ (80037dc <HAL_PWREx_ConfigSupply+0x70>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037ce:	d1ee      	bne.n	80037ae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	58024800 	.word	0x58024800

080037e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08c      	sub	sp, #48	@ 0x30
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d102      	bne.n	80037f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	f000 bc48 	b.w	8004084 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 8088 	beq.w	8003912 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003802:	4b99      	ldr	r3, [pc, #612]	@ (8003a68 <HAL_RCC_OscConfig+0x288>)
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800380a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800380c:	4b96      	ldr	r3, [pc, #600]	@ (8003a68 <HAL_RCC_OscConfig+0x288>)
 800380e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003810:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003814:	2b10      	cmp	r3, #16
 8003816:	d007      	beq.n	8003828 <HAL_RCC_OscConfig+0x48>
 8003818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800381a:	2b18      	cmp	r3, #24
 800381c:	d111      	bne.n	8003842 <HAL_RCC_OscConfig+0x62>
 800381e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003820:	f003 0303 	and.w	r3, r3, #3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d10c      	bne.n	8003842 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003828:	4b8f      	ldr	r3, [pc, #572]	@ (8003a68 <HAL_RCC_OscConfig+0x288>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d06d      	beq.n	8003910 <HAL_RCC_OscConfig+0x130>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d169      	bne.n	8003910 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	f000 bc21 	b.w	8004084 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800384a:	d106      	bne.n	800385a <HAL_RCC_OscConfig+0x7a>
 800384c:	4b86      	ldr	r3, [pc, #536]	@ (8003a68 <HAL_RCC_OscConfig+0x288>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a85      	ldr	r2, [pc, #532]	@ (8003a68 <HAL_RCC_OscConfig+0x288>)
 8003852:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003856:	6013      	str	r3, [r2, #0]
 8003858:	e02e      	b.n	80038b8 <HAL_RCC_OscConfig+0xd8>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10c      	bne.n	800387c <HAL_RCC_OscConfig+0x9c>
 8003862:	4b81      	ldr	r3, [pc, #516]	@ (8003a68 <HAL_RCC_OscConfig+0x288>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a80      	ldr	r2, [pc, #512]	@ (8003a68 <HAL_RCC_OscConfig+0x288>)
 8003868:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800386c:	6013      	str	r3, [r2, #0]
 800386e:	4b7e      	ldr	r3, [pc, #504]	@ (8003a68 <HAL_RCC_OscConfig+0x288>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a7d      	ldr	r2, [pc, #500]	@ (8003a68 <HAL_RCC_OscConfig+0x288>)
 8003874:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003878:	6013      	str	r3, [r2, #0]
 800387a:	e01d      	b.n	80038b8 <HAL_RCC_OscConfig+0xd8>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003884:	d10c      	bne.n	80038a0 <HAL_RCC_OscConfig+0xc0>
 8003886:	4b78      	ldr	r3, [pc, #480]	@ (8003a68 <HAL_RCC_OscConfig+0x288>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a77      	ldr	r2, [pc, #476]	@ (8003a68 <HAL_RCC_OscConfig+0x288>)
 800388c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	4b75      	ldr	r3, [pc, #468]	@ (8003a68 <HAL_RCC_OscConfig+0x288>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a74      	ldr	r2, [pc, #464]	@ (8003a68 <HAL_RCC_OscConfig+0x288>)
 8003898:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	e00b      	b.n	80038b8 <HAL_RCC_OscConfig+0xd8>
 80038a0:	4b71      	ldr	r3, [pc, #452]	@ (8003a68 <HAL_RCC_OscConfig+0x288>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a70      	ldr	r2, [pc, #448]	@ (8003a68 <HAL_RCC_OscConfig+0x288>)
 80038a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	4b6e      	ldr	r3, [pc, #440]	@ (8003a68 <HAL_RCC_OscConfig+0x288>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a6d      	ldr	r2, [pc, #436]	@ (8003a68 <HAL_RCC_OscConfig+0x288>)
 80038b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d013      	beq.n	80038e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c0:	f7ff f8d0 	bl	8002a64 <HAL_GetTick>
 80038c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038c8:	f7ff f8cc 	bl	8002a64 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b64      	cmp	r3, #100	@ 0x64
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e3d4      	b.n	8004084 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80038da:	4b63      	ldr	r3, [pc, #396]	@ (8003a68 <HAL_RCC_OscConfig+0x288>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0f0      	beq.n	80038c8 <HAL_RCC_OscConfig+0xe8>
 80038e6:	e014      	b.n	8003912 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e8:	f7ff f8bc 	bl	8002a64 <HAL_GetTick>
 80038ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f0:	f7ff f8b8 	bl	8002a64 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b64      	cmp	r3, #100	@ 0x64
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e3c0      	b.n	8004084 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003902:	4b59      	ldr	r3, [pc, #356]	@ (8003a68 <HAL_RCC_OscConfig+0x288>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1f0      	bne.n	80038f0 <HAL_RCC_OscConfig+0x110>
 800390e:	e000      	b.n	8003912 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	f000 80ca 	beq.w	8003ab4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003920:	4b51      	ldr	r3, [pc, #324]	@ (8003a68 <HAL_RCC_OscConfig+0x288>)
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003928:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800392a:	4b4f      	ldr	r3, [pc, #316]	@ (8003a68 <HAL_RCC_OscConfig+0x288>)
 800392c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800392e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d007      	beq.n	8003946 <HAL_RCC_OscConfig+0x166>
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	2b18      	cmp	r3, #24
 800393a:	d156      	bne.n	80039ea <HAL_RCC_OscConfig+0x20a>
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d151      	bne.n	80039ea <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003946:	4b48      	ldr	r3, [pc, #288]	@ (8003a68 <HAL_RCC_OscConfig+0x288>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0304 	and.w	r3, r3, #4
 800394e:	2b00      	cmp	r3, #0
 8003950:	d005      	beq.n	800395e <HAL_RCC_OscConfig+0x17e>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e392      	b.n	8004084 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800395e:	4b42      	ldr	r3, [pc, #264]	@ (8003a68 <HAL_RCC_OscConfig+0x288>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f023 0219 	bic.w	r2, r3, #25
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	493f      	ldr	r1, [pc, #252]	@ (8003a68 <HAL_RCC_OscConfig+0x288>)
 800396c:	4313      	orrs	r3, r2
 800396e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003970:	f7ff f878 	bl	8002a64 <HAL_GetTick>
 8003974:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003978:	f7ff f874 	bl	8002a64 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e37c      	b.n	8004084 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800398a:	4b37      	ldr	r3, [pc, #220]	@ (8003a68 <HAL_RCC_OscConfig+0x288>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0304 	and.w	r3, r3, #4
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0f0      	beq.n	8003978 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003996:	f7ff f895 	bl	8002ac4 <HAL_GetREVID>
 800399a:	4603      	mov	r3, r0
 800399c:	f241 0203 	movw	r2, #4099	@ 0x1003
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d817      	bhi.n	80039d4 <HAL_RCC_OscConfig+0x1f4>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	2b40      	cmp	r3, #64	@ 0x40
 80039aa:	d108      	bne.n	80039be <HAL_RCC_OscConfig+0x1de>
 80039ac:	4b2e      	ldr	r3, [pc, #184]	@ (8003a68 <HAL_RCC_OscConfig+0x288>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80039b4:	4a2c      	ldr	r2, [pc, #176]	@ (8003a68 <HAL_RCC_OscConfig+0x288>)
 80039b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039ba:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039bc:	e07a      	b.n	8003ab4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039be:	4b2a      	ldr	r3, [pc, #168]	@ (8003a68 <HAL_RCC_OscConfig+0x288>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	031b      	lsls	r3, r3, #12
 80039cc:	4926      	ldr	r1, [pc, #152]	@ (8003a68 <HAL_RCC_OscConfig+0x288>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039d2:	e06f      	b.n	8003ab4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039d4:	4b24      	ldr	r3, [pc, #144]	@ (8003a68 <HAL_RCC_OscConfig+0x288>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	061b      	lsls	r3, r3, #24
 80039e2:	4921      	ldr	r1, [pc, #132]	@ (8003a68 <HAL_RCC_OscConfig+0x288>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039e8:	e064      	b.n	8003ab4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d047      	beq.n	8003a82 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80039f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003a68 <HAL_RCC_OscConfig+0x288>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f023 0219 	bic.w	r2, r3, #25
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	491a      	ldr	r1, [pc, #104]	@ (8003a68 <HAL_RCC_OscConfig+0x288>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a04:	f7ff f82e 	bl	8002a64 <HAL_GetTick>
 8003a08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a0c:	f7ff f82a 	bl	8002a64 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e332      	b.n	8004084 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a1e:	4b12      	ldr	r3, [pc, #72]	@ (8003a68 <HAL_RCC_OscConfig+0x288>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0304 	and.w	r3, r3, #4
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0f0      	beq.n	8003a0c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a2a:	f7ff f84b 	bl	8002ac4 <HAL_GetREVID>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d819      	bhi.n	8003a6c <HAL_RCC_OscConfig+0x28c>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	2b40      	cmp	r3, #64	@ 0x40
 8003a3e:	d108      	bne.n	8003a52 <HAL_RCC_OscConfig+0x272>
 8003a40:	4b09      	ldr	r3, [pc, #36]	@ (8003a68 <HAL_RCC_OscConfig+0x288>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003a48:	4a07      	ldr	r2, [pc, #28]	@ (8003a68 <HAL_RCC_OscConfig+0x288>)
 8003a4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a4e:	6053      	str	r3, [r2, #4]
 8003a50:	e030      	b.n	8003ab4 <HAL_RCC_OscConfig+0x2d4>
 8003a52:	4b05      	ldr	r3, [pc, #20]	@ (8003a68 <HAL_RCC_OscConfig+0x288>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	031b      	lsls	r3, r3, #12
 8003a60:	4901      	ldr	r1, [pc, #4]	@ (8003a68 <HAL_RCC_OscConfig+0x288>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	604b      	str	r3, [r1, #4]
 8003a66:	e025      	b.n	8003ab4 <HAL_RCC_OscConfig+0x2d4>
 8003a68:	58024400 	.word	0x58024400
 8003a6c:	4b9a      	ldr	r3, [pc, #616]	@ (8003cd8 <HAL_RCC_OscConfig+0x4f8>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	061b      	lsls	r3, r3, #24
 8003a7a:	4997      	ldr	r1, [pc, #604]	@ (8003cd8 <HAL_RCC_OscConfig+0x4f8>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	604b      	str	r3, [r1, #4]
 8003a80:	e018      	b.n	8003ab4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a82:	4b95      	ldr	r3, [pc, #596]	@ (8003cd8 <HAL_RCC_OscConfig+0x4f8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a94      	ldr	r2, [pc, #592]	@ (8003cd8 <HAL_RCC_OscConfig+0x4f8>)
 8003a88:	f023 0301 	bic.w	r3, r3, #1
 8003a8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8e:	f7fe ffe9 	bl	8002a64 <HAL_GetTick>
 8003a92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a94:	e008      	b.n	8003aa8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a96:	f7fe ffe5 	bl	8002a64 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e2ed      	b.n	8004084 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003aa8:	4b8b      	ldr	r3, [pc, #556]	@ (8003cd8 <HAL_RCC_OscConfig+0x4f8>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0304 	and.w	r3, r3, #4
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1f0      	bne.n	8003a96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0310 	and.w	r3, r3, #16
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 80a9 	beq.w	8003c14 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ac2:	4b85      	ldr	r3, [pc, #532]	@ (8003cd8 <HAL_RCC_OscConfig+0x4f8>)
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003aca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003acc:	4b82      	ldr	r3, [pc, #520]	@ (8003cd8 <HAL_RCC_OscConfig+0x4f8>)
 8003ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	2b08      	cmp	r3, #8
 8003ad6:	d007      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x308>
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	2b18      	cmp	r3, #24
 8003adc:	d13a      	bne.n	8003b54 <HAL_RCC_OscConfig+0x374>
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f003 0303 	and.w	r3, r3, #3
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d135      	bne.n	8003b54 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ae8:	4b7b      	ldr	r3, [pc, #492]	@ (8003cd8 <HAL_RCC_OscConfig+0x4f8>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d005      	beq.n	8003b00 <HAL_RCC_OscConfig+0x320>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	2b80      	cmp	r3, #128	@ 0x80
 8003afa:	d001      	beq.n	8003b00 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e2c1      	b.n	8004084 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b00:	f7fe ffe0 	bl	8002ac4 <HAL_GetREVID>
 8003b04:	4603      	mov	r3, r0
 8003b06:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d817      	bhi.n	8003b3e <HAL_RCC_OscConfig+0x35e>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	2b20      	cmp	r3, #32
 8003b14:	d108      	bne.n	8003b28 <HAL_RCC_OscConfig+0x348>
 8003b16:	4b70      	ldr	r3, [pc, #448]	@ (8003cd8 <HAL_RCC_OscConfig+0x4f8>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003b1e:	4a6e      	ldr	r2, [pc, #440]	@ (8003cd8 <HAL_RCC_OscConfig+0x4f8>)
 8003b20:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003b24:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b26:	e075      	b.n	8003c14 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b28:	4b6b      	ldr	r3, [pc, #428]	@ (8003cd8 <HAL_RCC_OscConfig+0x4f8>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	069b      	lsls	r3, r3, #26
 8003b36:	4968      	ldr	r1, [pc, #416]	@ (8003cd8 <HAL_RCC_OscConfig+0x4f8>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b3c:	e06a      	b.n	8003c14 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b3e:	4b66      	ldr	r3, [pc, #408]	@ (8003cd8 <HAL_RCC_OscConfig+0x4f8>)
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	061b      	lsls	r3, r3, #24
 8003b4c:	4962      	ldr	r1, [pc, #392]	@ (8003cd8 <HAL_RCC_OscConfig+0x4f8>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b52:	e05f      	b.n	8003c14 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	69db      	ldr	r3, [r3, #28]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d042      	beq.n	8003be2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003b5c:	4b5e      	ldr	r3, [pc, #376]	@ (8003cd8 <HAL_RCC_OscConfig+0x4f8>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a5d      	ldr	r2, [pc, #372]	@ (8003cd8 <HAL_RCC_OscConfig+0x4f8>)
 8003b62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b68:	f7fe ff7c 	bl	8002a64 <HAL_GetTick>
 8003b6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003b70:	f7fe ff78 	bl	8002a64 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e280      	b.n	8004084 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b82:	4b55      	ldr	r3, [pc, #340]	@ (8003cd8 <HAL_RCC_OscConfig+0x4f8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0f0      	beq.n	8003b70 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b8e:	f7fe ff99 	bl	8002ac4 <HAL_GetREVID>
 8003b92:	4603      	mov	r3, r0
 8003b94:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d817      	bhi.n	8003bcc <HAL_RCC_OscConfig+0x3ec>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	d108      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x3d6>
 8003ba4:	4b4c      	ldr	r3, [pc, #304]	@ (8003cd8 <HAL_RCC_OscConfig+0x4f8>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003bac:	4a4a      	ldr	r2, [pc, #296]	@ (8003cd8 <HAL_RCC_OscConfig+0x4f8>)
 8003bae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003bb2:	6053      	str	r3, [r2, #4]
 8003bb4:	e02e      	b.n	8003c14 <HAL_RCC_OscConfig+0x434>
 8003bb6:	4b48      	ldr	r3, [pc, #288]	@ (8003cd8 <HAL_RCC_OscConfig+0x4f8>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	069b      	lsls	r3, r3, #26
 8003bc4:	4944      	ldr	r1, [pc, #272]	@ (8003cd8 <HAL_RCC_OscConfig+0x4f8>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	604b      	str	r3, [r1, #4]
 8003bca:	e023      	b.n	8003c14 <HAL_RCC_OscConfig+0x434>
 8003bcc:	4b42      	ldr	r3, [pc, #264]	@ (8003cd8 <HAL_RCC_OscConfig+0x4f8>)
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	061b      	lsls	r3, r3, #24
 8003bda:	493f      	ldr	r1, [pc, #252]	@ (8003cd8 <HAL_RCC_OscConfig+0x4f8>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	60cb      	str	r3, [r1, #12]
 8003be0:	e018      	b.n	8003c14 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003be2:	4b3d      	ldr	r3, [pc, #244]	@ (8003cd8 <HAL_RCC_OscConfig+0x4f8>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a3c      	ldr	r2, [pc, #240]	@ (8003cd8 <HAL_RCC_OscConfig+0x4f8>)
 8003be8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bee:	f7fe ff39 	bl	8002a64 <HAL_GetTick>
 8003bf2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003bf4:	e008      	b.n	8003c08 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003bf6:	f7fe ff35 	bl	8002a64 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e23d      	b.n	8004084 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c08:	4b33      	ldr	r3, [pc, #204]	@ (8003cd8 <HAL_RCC_OscConfig+0x4f8>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1f0      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0308 	and.w	r3, r3, #8
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d036      	beq.n	8003c8e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d019      	beq.n	8003c5c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c28:	4b2b      	ldr	r3, [pc, #172]	@ (8003cd8 <HAL_RCC_OscConfig+0x4f8>)
 8003c2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c2c:	4a2a      	ldr	r2, [pc, #168]	@ (8003cd8 <HAL_RCC_OscConfig+0x4f8>)
 8003c2e:	f043 0301 	orr.w	r3, r3, #1
 8003c32:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c34:	f7fe ff16 	bl	8002a64 <HAL_GetTick>
 8003c38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c3c:	f7fe ff12 	bl	8002a64 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e21a      	b.n	8004084 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c4e:	4b22      	ldr	r3, [pc, #136]	@ (8003cd8 <HAL_RCC_OscConfig+0x4f8>)
 8003c50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0f0      	beq.n	8003c3c <HAL_RCC_OscConfig+0x45c>
 8003c5a:	e018      	b.n	8003c8e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c5c:	4b1e      	ldr	r3, [pc, #120]	@ (8003cd8 <HAL_RCC_OscConfig+0x4f8>)
 8003c5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c60:	4a1d      	ldr	r2, [pc, #116]	@ (8003cd8 <HAL_RCC_OscConfig+0x4f8>)
 8003c62:	f023 0301 	bic.w	r3, r3, #1
 8003c66:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c68:	f7fe fefc 	bl	8002a64 <HAL_GetTick>
 8003c6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c70:	f7fe fef8 	bl	8002a64 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e200      	b.n	8004084 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c82:	4b15      	ldr	r3, [pc, #84]	@ (8003cd8 <HAL_RCC_OscConfig+0x4f8>)
 8003c84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f0      	bne.n	8003c70 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0320 	and.w	r3, r3, #32
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d039      	beq.n	8003d0e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d01c      	beq.n	8003cdc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd8 <HAL_RCC_OscConfig+0x4f8>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a0c      	ldr	r2, [pc, #48]	@ (8003cd8 <HAL_RCC_OscConfig+0x4f8>)
 8003ca8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003cac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003cae:	f7fe fed9 	bl	8002a64 <HAL_GetTick>
 8003cb2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003cb4:	e008      	b.n	8003cc8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cb6:	f7fe fed5 	bl	8002a64 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d901      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e1dd      	b.n	8004084 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003cc8:	4b03      	ldr	r3, [pc, #12]	@ (8003cd8 <HAL_RCC_OscConfig+0x4f8>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0f0      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x4d6>
 8003cd4:	e01b      	b.n	8003d0e <HAL_RCC_OscConfig+0x52e>
 8003cd6:	bf00      	nop
 8003cd8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003cdc:	4b9b      	ldr	r3, [pc, #620]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a9a      	ldr	r2, [pc, #616]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003ce2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ce6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003ce8:	f7fe febc 	bl	8002a64 <HAL_GetTick>
 8003cec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cf0:	f7fe feb8 	bl	8002a64 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e1c0      	b.n	8004084 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d02:	4b92      	ldr	r3, [pc, #584]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1f0      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 8081 	beq.w	8003e1e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d1c:	4b8c      	ldr	r3, [pc, #560]	@ (8003f50 <HAL_RCC_OscConfig+0x770>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a8b      	ldr	r2, [pc, #556]	@ (8003f50 <HAL_RCC_OscConfig+0x770>)
 8003d22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d28:	f7fe fe9c 	bl	8002a64 <HAL_GetTick>
 8003d2c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d30:	f7fe fe98 	bl	8002a64 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b64      	cmp	r3, #100	@ 0x64
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e1a0      	b.n	8004084 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d42:	4b83      	ldr	r3, [pc, #524]	@ (8003f50 <HAL_RCC_OscConfig+0x770>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0f0      	beq.n	8003d30 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d106      	bne.n	8003d64 <HAL_RCC_OscConfig+0x584>
 8003d56:	4b7d      	ldr	r3, [pc, #500]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d5a:	4a7c      	ldr	r2, [pc, #496]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003d5c:	f043 0301 	orr.w	r3, r3, #1
 8003d60:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d62:	e02d      	b.n	8003dc0 <HAL_RCC_OscConfig+0x5e0>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10c      	bne.n	8003d86 <HAL_RCC_OscConfig+0x5a6>
 8003d6c:	4b77      	ldr	r3, [pc, #476]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003d6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d70:	4a76      	ldr	r2, [pc, #472]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003d72:	f023 0301 	bic.w	r3, r3, #1
 8003d76:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d78:	4b74      	ldr	r3, [pc, #464]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003d7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d7c:	4a73      	ldr	r2, [pc, #460]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003d7e:	f023 0304 	bic.w	r3, r3, #4
 8003d82:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d84:	e01c      	b.n	8003dc0 <HAL_RCC_OscConfig+0x5e0>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	2b05      	cmp	r3, #5
 8003d8c:	d10c      	bne.n	8003da8 <HAL_RCC_OscConfig+0x5c8>
 8003d8e:	4b6f      	ldr	r3, [pc, #444]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d92:	4a6e      	ldr	r2, [pc, #440]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003d94:	f043 0304 	orr.w	r3, r3, #4
 8003d98:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d9a:	4b6c      	ldr	r3, [pc, #432]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d9e:	4a6b      	ldr	r2, [pc, #428]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003da0:	f043 0301 	orr.w	r3, r3, #1
 8003da4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003da6:	e00b      	b.n	8003dc0 <HAL_RCC_OscConfig+0x5e0>
 8003da8:	4b68      	ldr	r3, [pc, #416]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dac:	4a67      	ldr	r2, [pc, #412]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003dae:	f023 0301 	bic.w	r3, r3, #1
 8003db2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003db4:	4b65      	ldr	r3, [pc, #404]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db8:	4a64      	ldr	r2, [pc, #400]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003dba:	f023 0304 	bic.w	r3, r3, #4
 8003dbe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d015      	beq.n	8003df4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc8:	f7fe fe4c 	bl	8002a64 <HAL_GetTick>
 8003dcc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dce:	e00a      	b.n	8003de6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dd0:	f7fe fe48 	bl	8002a64 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e14e      	b.n	8004084 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003de6:	4b59      	ldr	r3, [pc, #356]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d0ee      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x5f0>
 8003df2:	e014      	b.n	8003e1e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df4:	f7fe fe36 	bl	8002a64 <HAL_GetTick>
 8003df8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003dfa:	e00a      	b.n	8003e12 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dfc:	f7fe fe32 	bl	8002a64 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e138      	b.n	8004084 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e12:	4b4e      	ldr	r3, [pc, #312]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1ee      	bne.n	8003dfc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 812d 	beq.w	8004082 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003e28:	4b48      	ldr	r3, [pc, #288]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e30:	2b18      	cmp	r3, #24
 8003e32:	f000 80bd 	beq.w	8003fb0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	f040 809e 	bne.w	8003f7c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e40:	4b42      	ldr	r3, [pc, #264]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a41      	ldr	r2, [pc, #260]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003e46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4c:	f7fe fe0a 	bl	8002a64 <HAL_GetTick>
 8003e50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e54:	f7fe fe06 	bl	8002a64 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e10e      	b.n	8004084 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e66:	4b39      	ldr	r3, [pc, #228]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1f0      	bne.n	8003e54 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e72:	4b36      	ldr	r3, [pc, #216]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003e74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e76:	4b37      	ldr	r3, [pc, #220]	@ (8003f54 <HAL_RCC_OscConfig+0x774>)
 8003e78:	4013      	ands	r3, r2
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003e82:	0112      	lsls	r2, r2, #4
 8003e84:	430a      	orrs	r2, r1
 8003e86:	4931      	ldr	r1, [pc, #196]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	628b      	str	r3, [r1, #40]	@ 0x28
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e90:	3b01      	subs	r3, #1
 8003e92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	025b      	lsls	r3, r3, #9
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	041b      	lsls	r3, r3, #16
 8003eaa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	061b      	lsls	r3, r3, #24
 8003eb8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003ebc:	4923      	ldr	r1, [pc, #140]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003ec2:	4b22      	ldr	r3, [pc, #136]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec6:	4a21      	ldr	r2, [pc, #132]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003ec8:	f023 0301 	bic.w	r3, r3, #1
 8003ecc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003ece:	4b1f      	ldr	r3, [pc, #124]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003ed0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ed2:	4b21      	ldr	r3, [pc, #132]	@ (8003f58 <HAL_RCC_OscConfig+0x778>)
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003eda:	00d2      	lsls	r2, r2, #3
 8003edc:	491b      	ldr	r1, [pc, #108]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee6:	f023 020c 	bic.w	r2, r3, #12
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eee:	4917      	ldr	r1, [pc, #92]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003ef4:	4b15      	ldr	r3, [pc, #84]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef8:	f023 0202 	bic.w	r2, r3, #2
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f00:	4912      	ldr	r1, [pc, #72]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f06:	4b11      	ldr	r3, [pc, #68]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f0a:	4a10      	ldr	r2, [pc, #64]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003f0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f12:	4b0e      	ldr	r3, [pc, #56]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f16:	4a0d      	ldr	r2, [pc, #52]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003f18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f22:	4a0a      	ldr	r2, [pc, #40]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003f24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003f2a:	4b08      	ldr	r3, [pc, #32]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f2e:	4a07      	ldr	r2, [pc, #28]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003f30:	f043 0301 	orr.w	r3, r3, #1
 8003f34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f36:	4b05      	ldr	r3, [pc, #20]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a04      	ldr	r2, [pc, #16]	@ (8003f4c <HAL_RCC_OscConfig+0x76c>)
 8003f3c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f42:	f7fe fd8f 	bl	8002a64 <HAL_GetTick>
 8003f46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f48:	e011      	b.n	8003f6e <HAL_RCC_OscConfig+0x78e>
 8003f4a:	bf00      	nop
 8003f4c:	58024400 	.word	0x58024400
 8003f50:	58024800 	.word	0x58024800
 8003f54:	fffffc0c 	.word	0xfffffc0c
 8003f58:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f5c:	f7fe fd82 	bl	8002a64 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e08a      	b.n	8004084 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f6e:	4b47      	ldr	r3, [pc, #284]	@ (800408c <HAL_RCC_OscConfig+0x8ac>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d0f0      	beq.n	8003f5c <HAL_RCC_OscConfig+0x77c>
 8003f7a:	e082      	b.n	8004082 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f7c:	4b43      	ldr	r3, [pc, #268]	@ (800408c <HAL_RCC_OscConfig+0x8ac>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a42      	ldr	r2, [pc, #264]	@ (800408c <HAL_RCC_OscConfig+0x8ac>)
 8003f82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f88:	f7fe fd6c 	bl	8002a64 <HAL_GetTick>
 8003f8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f90:	f7fe fd68 	bl	8002a64 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e070      	b.n	8004084 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fa2:	4b3a      	ldr	r3, [pc, #232]	@ (800408c <HAL_RCC_OscConfig+0x8ac>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1f0      	bne.n	8003f90 <HAL_RCC_OscConfig+0x7b0>
 8003fae:	e068      	b.n	8004082 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003fb0:	4b36      	ldr	r3, [pc, #216]	@ (800408c <HAL_RCC_OscConfig+0x8ac>)
 8003fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003fb6:	4b35      	ldr	r3, [pc, #212]	@ (800408c <HAL_RCC_OscConfig+0x8ac>)
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d031      	beq.n	8004028 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	f003 0203 	and.w	r2, r3, #3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d12a      	bne.n	8004028 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	091b      	lsrs	r3, r3, #4
 8003fd6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d122      	bne.n	8004028 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d11a      	bne.n	8004028 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	0a5b      	lsrs	r3, r3, #9
 8003ff6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ffe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004000:	429a      	cmp	r2, r3
 8004002:	d111      	bne.n	8004028 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	0c1b      	lsrs	r3, r3, #16
 8004008:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004010:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004012:	429a      	cmp	r2, r3
 8004014:	d108      	bne.n	8004028 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	0e1b      	lsrs	r3, r3, #24
 800401a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004022:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004024:	429a      	cmp	r2, r3
 8004026:	d001      	beq.n	800402c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e02b      	b.n	8004084 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800402c:	4b17      	ldr	r3, [pc, #92]	@ (800408c <HAL_RCC_OscConfig+0x8ac>)
 800402e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004030:	08db      	lsrs	r3, r3, #3
 8004032:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004036:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	429a      	cmp	r2, r3
 8004040:	d01f      	beq.n	8004082 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004042:	4b12      	ldr	r3, [pc, #72]	@ (800408c <HAL_RCC_OscConfig+0x8ac>)
 8004044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004046:	4a11      	ldr	r2, [pc, #68]	@ (800408c <HAL_RCC_OscConfig+0x8ac>)
 8004048:	f023 0301 	bic.w	r3, r3, #1
 800404c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800404e:	f7fe fd09 	bl	8002a64 <HAL_GetTick>
 8004052:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004054:	bf00      	nop
 8004056:	f7fe fd05 	bl	8002a64 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405e:	4293      	cmp	r3, r2
 8004060:	d0f9      	beq.n	8004056 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004062:	4b0a      	ldr	r3, [pc, #40]	@ (800408c <HAL_RCC_OscConfig+0x8ac>)
 8004064:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004066:	4b0a      	ldr	r3, [pc, #40]	@ (8004090 <HAL_RCC_OscConfig+0x8b0>)
 8004068:	4013      	ands	r3, r2
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800406e:	00d2      	lsls	r2, r2, #3
 8004070:	4906      	ldr	r1, [pc, #24]	@ (800408c <HAL_RCC_OscConfig+0x8ac>)
 8004072:	4313      	orrs	r3, r2
 8004074:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004076:	4b05      	ldr	r3, [pc, #20]	@ (800408c <HAL_RCC_OscConfig+0x8ac>)
 8004078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800407a:	4a04      	ldr	r2, [pc, #16]	@ (800408c <HAL_RCC_OscConfig+0x8ac>)
 800407c:	f043 0301 	orr.w	r3, r3, #1
 8004080:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3730      	adds	r7, #48	@ 0x30
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	58024400 	.word	0x58024400
 8004090:	ffff0007 	.word	0xffff0007

08004094 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d101      	bne.n	80040a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e19c      	b.n	80043e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040a8:	4b8a      	ldr	r3, [pc, #552]	@ (80042d4 <HAL_RCC_ClockConfig+0x240>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 030f 	and.w	r3, r3, #15
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d910      	bls.n	80040d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b6:	4b87      	ldr	r3, [pc, #540]	@ (80042d4 <HAL_RCC_ClockConfig+0x240>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f023 020f 	bic.w	r2, r3, #15
 80040be:	4985      	ldr	r1, [pc, #532]	@ (80042d4 <HAL_RCC_ClockConfig+0x240>)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040c6:	4b83      	ldr	r3, [pc, #524]	@ (80042d4 <HAL_RCC_ClockConfig+0x240>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 030f 	and.w	r3, r3, #15
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d001      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e184      	b.n	80043e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d010      	beq.n	8004106 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	4b7b      	ldr	r3, [pc, #492]	@ (80042d8 <HAL_RCC_ClockConfig+0x244>)
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d908      	bls.n	8004106 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80040f4:	4b78      	ldr	r3, [pc, #480]	@ (80042d8 <HAL_RCC_ClockConfig+0x244>)
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	4975      	ldr	r1, [pc, #468]	@ (80042d8 <HAL_RCC_ClockConfig+0x244>)
 8004102:	4313      	orrs	r3, r2
 8004104:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0308 	and.w	r3, r3, #8
 800410e:	2b00      	cmp	r3, #0
 8004110:	d010      	beq.n	8004134 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	695a      	ldr	r2, [r3, #20]
 8004116:	4b70      	ldr	r3, [pc, #448]	@ (80042d8 <HAL_RCC_ClockConfig+0x244>)
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800411e:	429a      	cmp	r2, r3
 8004120:	d908      	bls.n	8004134 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004122:	4b6d      	ldr	r3, [pc, #436]	@ (80042d8 <HAL_RCC_ClockConfig+0x244>)
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	496a      	ldr	r1, [pc, #424]	@ (80042d8 <HAL_RCC_ClockConfig+0x244>)
 8004130:	4313      	orrs	r3, r2
 8004132:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0310 	and.w	r3, r3, #16
 800413c:	2b00      	cmp	r3, #0
 800413e:	d010      	beq.n	8004162 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	699a      	ldr	r2, [r3, #24]
 8004144:	4b64      	ldr	r3, [pc, #400]	@ (80042d8 <HAL_RCC_ClockConfig+0x244>)
 8004146:	69db      	ldr	r3, [r3, #28]
 8004148:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800414c:	429a      	cmp	r2, r3
 800414e:	d908      	bls.n	8004162 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004150:	4b61      	ldr	r3, [pc, #388]	@ (80042d8 <HAL_RCC_ClockConfig+0x244>)
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	495e      	ldr	r1, [pc, #376]	@ (80042d8 <HAL_RCC_ClockConfig+0x244>)
 800415e:	4313      	orrs	r3, r2
 8004160:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0320 	and.w	r3, r3, #32
 800416a:	2b00      	cmp	r3, #0
 800416c:	d010      	beq.n	8004190 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	69da      	ldr	r2, [r3, #28]
 8004172:	4b59      	ldr	r3, [pc, #356]	@ (80042d8 <HAL_RCC_ClockConfig+0x244>)
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800417a:	429a      	cmp	r2, r3
 800417c:	d908      	bls.n	8004190 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800417e:	4b56      	ldr	r3, [pc, #344]	@ (80042d8 <HAL_RCC_ClockConfig+0x244>)
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	4953      	ldr	r1, [pc, #332]	@ (80042d8 <HAL_RCC_ClockConfig+0x244>)
 800418c:	4313      	orrs	r3, r2
 800418e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0302 	and.w	r3, r3, #2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d010      	beq.n	80041be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68da      	ldr	r2, [r3, #12]
 80041a0:	4b4d      	ldr	r3, [pc, #308]	@ (80042d8 <HAL_RCC_ClockConfig+0x244>)
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	f003 030f 	and.w	r3, r3, #15
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d908      	bls.n	80041be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041ac:	4b4a      	ldr	r3, [pc, #296]	@ (80042d8 <HAL_RCC_ClockConfig+0x244>)
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	f023 020f 	bic.w	r2, r3, #15
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	4947      	ldr	r1, [pc, #284]	@ (80042d8 <HAL_RCC_ClockConfig+0x244>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d055      	beq.n	8004276 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80041ca:	4b43      	ldr	r3, [pc, #268]	@ (80042d8 <HAL_RCC_ClockConfig+0x244>)
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	4940      	ldr	r1, [pc, #256]	@ (80042d8 <HAL_RCC_ClockConfig+0x244>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d107      	bne.n	80041f4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041e4:	4b3c      	ldr	r3, [pc, #240]	@ (80042d8 <HAL_RCC_ClockConfig+0x244>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d121      	bne.n	8004234 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e0f6      	b.n	80043e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	2b03      	cmp	r3, #3
 80041fa:	d107      	bne.n	800420c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041fc:	4b36      	ldr	r3, [pc, #216]	@ (80042d8 <HAL_RCC_ClockConfig+0x244>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d115      	bne.n	8004234 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e0ea      	b.n	80043e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d107      	bne.n	8004224 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004214:	4b30      	ldr	r3, [pc, #192]	@ (80042d8 <HAL_RCC_ClockConfig+0x244>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800421c:	2b00      	cmp	r3, #0
 800421e:	d109      	bne.n	8004234 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e0de      	b.n	80043e2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004224:	4b2c      	ldr	r3, [pc, #176]	@ (80042d8 <HAL_RCC_ClockConfig+0x244>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0304 	and.w	r3, r3, #4
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e0d6      	b.n	80043e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004234:	4b28      	ldr	r3, [pc, #160]	@ (80042d8 <HAL_RCC_ClockConfig+0x244>)
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	f023 0207 	bic.w	r2, r3, #7
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	4925      	ldr	r1, [pc, #148]	@ (80042d8 <HAL_RCC_ClockConfig+0x244>)
 8004242:	4313      	orrs	r3, r2
 8004244:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004246:	f7fe fc0d 	bl	8002a64 <HAL_GetTick>
 800424a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800424c:	e00a      	b.n	8004264 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800424e:	f7fe fc09 	bl	8002a64 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	f241 3288 	movw	r2, #5000	@ 0x1388
 800425c:	4293      	cmp	r3, r2
 800425e:	d901      	bls.n	8004264 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e0be      	b.n	80043e2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004264:	4b1c      	ldr	r3, [pc, #112]	@ (80042d8 <HAL_RCC_ClockConfig+0x244>)
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	429a      	cmp	r2, r3
 8004274:	d1eb      	bne.n	800424e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d010      	beq.n	80042a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	4b14      	ldr	r3, [pc, #80]	@ (80042d8 <HAL_RCC_ClockConfig+0x244>)
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	f003 030f 	and.w	r3, r3, #15
 800428e:	429a      	cmp	r2, r3
 8004290:	d208      	bcs.n	80042a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004292:	4b11      	ldr	r3, [pc, #68]	@ (80042d8 <HAL_RCC_ClockConfig+0x244>)
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	f023 020f 	bic.w	r2, r3, #15
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	490e      	ldr	r1, [pc, #56]	@ (80042d8 <HAL_RCC_ClockConfig+0x244>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042a4:	4b0b      	ldr	r3, [pc, #44]	@ (80042d4 <HAL_RCC_ClockConfig+0x240>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 030f 	and.w	r3, r3, #15
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d214      	bcs.n	80042dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b2:	4b08      	ldr	r3, [pc, #32]	@ (80042d4 <HAL_RCC_ClockConfig+0x240>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f023 020f 	bic.w	r2, r3, #15
 80042ba:	4906      	ldr	r1, [pc, #24]	@ (80042d4 <HAL_RCC_ClockConfig+0x240>)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	4313      	orrs	r3, r2
 80042c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042c2:	4b04      	ldr	r3, [pc, #16]	@ (80042d4 <HAL_RCC_ClockConfig+0x240>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 030f 	and.w	r3, r3, #15
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d005      	beq.n	80042dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e086      	b.n	80043e2 <HAL_RCC_ClockConfig+0x34e>
 80042d4:	52002000 	.word	0x52002000
 80042d8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d010      	beq.n	800430a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	691a      	ldr	r2, [r3, #16]
 80042ec:	4b3f      	ldr	r3, [pc, #252]	@ (80043ec <HAL_RCC_ClockConfig+0x358>)
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d208      	bcs.n	800430a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80042f8:	4b3c      	ldr	r3, [pc, #240]	@ (80043ec <HAL_RCC_ClockConfig+0x358>)
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	4939      	ldr	r1, [pc, #228]	@ (80043ec <HAL_RCC_ClockConfig+0x358>)
 8004306:	4313      	orrs	r3, r2
 8004308:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0308 	and.w	r3, r3, #8
 8004312:	2b00      	cmp	r3, #0
 8004314:	d010      	beq.n	8004338 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	695a      	ldr	r2, [r3, #20]
 800431a:	4b34      	ldr	r3, [pc, #208]	@ (80043ec <HAL_RCC_ClockConfig+0x358>)
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004322:	429a      	cmp	r2, r3
 8004324:	d208      	bcs.n	8004338 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004326:	4b31      	ldr	r3, [pc, #196]	@ (80043ec <HAL_RCC_ClockConfig+0x358>)
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	492e      	ldr	r1, [pc, #184]	@ (80043ec <HAL_RCC_ClockConfig+0x358>)
 8004334:	4313      	orrs	r3, r2
 8004336:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0310 	and.w	r3, r3, #16
 8004340:	2b00      	cmp	r3, #0
 8004342:	d010      	beq.n	8004366 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	699a      	ldr	r2, [r3, #24]
 8004348:	4b28      	ldr	r3, [pc, #160]	@ (80043ec <HAL_RCC_ClockConfig+0x358>)
 800434a:	69db      	ldr	r3, [r3, #28]
 800434c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004350:	429a      	cmp	r2, r3
 8004352:	d208      	bcs.n	8004366 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004354:	4b25      	ldr	r3, [pc, #148]	@ (80043ec <HAL_RCC_ClockConfig+0x358>)
 8004356:	69db      	ldr	r3, [r3, #28]
 8004358:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	4922      	ldr	r1, [pc, #136]	@ (80043ec <HAL_RCC_ClockConfig+0x358>)
 8004362:	4313      	orrs	r3, r2
 8004364:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0320 	and.w	r3, r3, #32
 800436e:	2b00      	cmp	r3, #0
 8004370:	d010      	beq.n	8004394 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	69da      	ldr	r2, [r3, #28]
 8004376:	4b1d      	ldr	r3, [pc, #116]	@ (80043ec <HAL_RCC_ClockConfig+0x358>)
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800437e:	429a      	cmp	r2, r3
 8004380:	d208      	bcs.n	8004394 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004382:	4b1a      	ldr	r3, [pc, #104]	@ (80043ec <HAL_RCC_ClockConfig+0x358>)
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	4917      	ldr	r1, [pc, #92]	@ (80043ec <HAL_RCC_ClockConfig+0x358>)
 8004390:	4313      	orrs	r3, r2
 8004392:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004394:	f000 f834 	bl	8004400 <HAL_RCC_GetSysClockFreq>
 8004398:	4602      	mov	r2, r0
 800439a:	4b14      	ldr	r3, [pc, #80]	@ (80043ec <HAL_RCC_ClockConfig+0x358>)
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	0a1b      	lsrs	r3, r3, #8
 80043a0:	f003 030f 	and.w	r3, r3, #15
 80043a4:	4912      	ldr	r1, [pc, #72]	@ (80043f0 <HAL_RCC_ClockConfig+0x35c>)
 80043a6:	5ccb      	ldrb	r3, [r1, r3]
 80043a8:	f003 031f 	and.w	r3, r3, #31
 80043ac:	fa22 f303 	lsr.w	r3, r2, r3
 80043b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043b2:	4b0e      	ldr	r3, [pc, #56]	@ (80043ec <HAL_RCC_ClockConfig+0x358>)
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	f003 030f 	and.w	r3, r3, #15
 80043ba:	4a0d      	ldr	r2, [pc, #52]	@ (80043f0 <HAL_RCC_ClockConfig+0x35c>)
 80043bc:	5cd3      	ldrb	r3, [r2, r3]
 80043be:	f003 031f 	and.w	r3, r3, #31
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	fa22 f303 	lsr.w	r3, r2, r3
 80043c8:	4a0a      	ldr	r2, [pc, #40]	@ (80043f4 <HAL_RCC_ClockConfig+0x360>)
 80043ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80043cc:	4a0a      	ldr	r2, [pc, #40]	@ (80043f8 <HAL_RCC_ClockConfig+0x364>)
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80043d2:	4b0a      	ldr	r3, [pc, #40]	@ (80043fc <HAL_RCC_ClockConfig+0x368>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7fe fafa 	bl	80029d0 <HAL_InitTick>
 80043dc:	4603      	mov	r3, r0
 80043de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80043e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3718      	adds	r7, #24
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	58024400 	.word	0x58024400
 80043f0:	0800adc0 	.word	0x0800adc0
 80043f4:	24000004 	.word	0x24000004
 80043f8:	24000000 	.word	0x24000000
 80043fc:	24000024 	.word	0x24000024

08004400 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004400:	b480      	push	{r7}
 8004402:	b089      	sub	sp, #36	@ 0x24
 8004404:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004406:	4bb3      	ldr	r3, [pc, #716]	@ (80046d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800440e:	2b18      	cmp	r3, #24
 8004410:	f200 8155 	bhi.w	80046be <HAL_RCC_GetSysClockFreq+0x2be>
 8004414:	a201      	add	r2, pc, #4	@ (adr r2, 800441c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441a:	bf00      	nop
 800441c:	08004481 	.word	0x08004481
 8004420:	080046bf 	.word	0x080046bf
 8004424:	080046bf 	.word	0x080046bf
 8004428:	080046bf 	.word	0x080046bf
 800442c:	080046bf 	.word	0x080046bf
 8004430:	080046bf 	.word	0x080046bf
 8004434:	080046bf 	.word	0x080046bf
 8004438:	080046bf 	.word	0x080046bf
 800443c:	080044a7 	.word	0x080044a7
 8004440:	080046bf 	.word	0x080046bf
 8004444:	080046bf 	.word	0x080046bf
 8004448:	080046bf 	.word	0x080046bf
 800444c:	080046bf 	.word	0x080046bf
 8004450:	080046bf 	.word	0x080046bf
 8004454:	080046bf 	.word	0x080046bf
 8004458:	080046bf 	.word	0x080046bf
 800445c:	080044ad 	.word	0x080044ad
 8004460:	080046bf 	.word	0x080046bf
 8004464:	080046bf 	.word	0x080046bf
 8004468:	080046bf 	.word	0x080046bf
 800446c:	080046bf 	.word	0x080046bf
 8004470:	080046bf 	.word	0x080046bf
 8004474:	080046bf 	.word	0x080046bf
 8004478:	080046bf 	.word	0x080046bf
 800447c:	080044b3 	.word	0x080044b3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004480:	4b94      	ldr	r3, [pc, #592]	@ (80046d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0320 	and.w	r3, r3, #32
 8004488:	2b00      	cmp	r3, #0
 800448a:	d009      	beq.n	80044a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800448c:	4b91      	ldr	r3, [pc, #580]	@ (80046d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	08db      	lsrs	r3, r3, #3
 8004492:	f003 0303 	and.w	r3, r3, #3
 8004496:	4a90      	ldr	r2, [pc, #576]	@ (80046d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004498:	fa22 f303 	lsr.w	r3, r2, r3
 800449c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800449e:	e111      	b.n	80046c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80044a0:	4b8d      	ldr	r3, [pc, #564]	@ (80046d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044a2:	61bb      	str	r3, [r7, #24]
      break;
 80044a4:	e10e      	b.n	80046c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80044a6:	4b8d      	ldr	r3, [pc, #564]	@ (80046dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80044a8:	61bb      	str	r3, [r7, #24]
      break;
 80044aa:	e10b      	b.n	80046c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80044ac:	4b8c      	ldr	r3, [pc, #560]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80044ae:	61bb      	str	r3, [r7, #24]
      break;
 80044b0:	e108      	b.n	80046c4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044b2:	4b88      	ldr	r3, [pc, #544]	@ (80046d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b6:	f003 0303 	and.w	r3, r3, #3
 80044ba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80044bc:	4b85      	ldr	r3, [pc, #532]	@ (80046d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c0:	091b      	lsrs	r3, r3, #4
 80044c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044c6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80044c8:	4b82      	ldr	r3, [pc, #520]	@ (80046d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80044d2:	4b80      	ldr	r3, [pc, #512]	@ (80046d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044d6:	08db      	lsrs	r3, r3, #3
 80044d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	fb02 f303 	mul.w	r3, r2, r3
 80044e2:	ee07 3a90 	vmov	s15, r3
 80044e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 80e1 	beq.w	80046b8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	f000 8083 	beq.w	8004604 <HAL_RCC_GetSysClockFreq+0x204>
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2b02      	cmp	r3, #2
 8004502:	f200 80a1 	bhi.w	8004648 <HAL_RCC_GetSysClockFreq+0x248>
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d003      	beq.n	8004514 <HAL_RCC_GetSysClockFreq+0x114>
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d056      	beq.n	80045c0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004512:	e099      	b.n	8004648 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004514:	4b6f      	ldr	r3, [pc, #444]	@ (80046d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0320 	and.w	r3, r3, #32
 800451c:	2b00      	cmp	r3, #0
 800451e:	d02d      	beq.n	800457c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004520:	4b6c      	ldr	r3, [pc, #432]	@ (80046d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	08db      	lsrs	r3, r3, #3
 8004526:	f003 0303 	and.w	r3, r3, #3
 800452a:	4a6b      	ldr	r2, [pc, #428]	@ (80046d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800452c:	fa22 f303 	lsr.w	r3, r2, r3
 8004530:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	ee07 3a90 	vmov	s15, r3
 8004538:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	ee07 3a90 	vmov	s15, r3
 8004542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800454a:	4b62      	ldr	r3, [pc, #392]	@ (80046d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800454c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004552:	ee07 3a90 	vmov	s15, r3
 8004556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800455a:	ed97 6a02 	vldr	s12, [r7, #8]
 800455e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80046e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800456a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800456e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004576:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800457a:	e087      	b.n	800468c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	ee07 3a90 	vmov	s15, r3
 8004582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004586:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80046e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800458a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800458e:	4b51      	ldr	r3, [pc, #324]	@ (80046d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004596:	ee07 3a90 	vmov	s15, r3
 800459a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800459e:	ed97 6a02 	vldr	s12, [r7, #8]
 80045a2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80046e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80045be:	e065      	b.n	800468c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	ee07 3a90 	vmov	s15, r3
 80045c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ca:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80046ec <HAL_RCC_GetSysClockFreq+0x2ec>
 80045ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045d2:	4b40      	ldr	r3, [pc, #256]	@ (80046d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045da:	ee07 3a90 	vmov	s15, r3
 80045de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80045e6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80046e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004602:	e043      	b.n	800468c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	ee07 3a90 	vmov	s15, r3
 800460a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800460e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80046f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004616:	4b2f      	ldr	r3, [pc, #188]	@ (80046d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800461a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800461e:	ee07 3a90 	vmov	s15, r3
 8004622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004626:	ed97 6a02 	vldr	s12, [r7, #8]
 800462a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80046e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800462e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004636:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800463a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800463e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004642:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004646:	e021      	b.n	800468c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	ee07 3a90 	vmov	s15, r3
 800464e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004652:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80046ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8004656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800465a:	4b1e      	ldr	r3, [pc, #120]	@ (80046d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800465c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800465e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004662:	ee07 3a90 	vmov	s15, r3
 8004666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800466a:	ed97 6a02 	vldr	s12, [r7, #8]
 800466e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80046e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800467a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800467e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004686:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800468a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800468c:	4b11      	ldr	r3, [pc, #68]	@ (80046d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800468e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004690:	0a5b      	lsrs	r3, r3, #9
 8004692:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004696:	3301      	adds	r3, #1
 8004698:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	ee07 3a90 	vmov	s15, r3
 80046a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80046a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046b0:	ee17 3a90 	vmov	r3, s15
 80046b4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80046b6:	e005      	b.n	80046c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	61bb      	str	r3, [r7, #24]
      break;
 80046bc:	e002      	b.n	80046c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80046be:	4b07      	ldr	r3, [pc, #28]	@ (80046dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80046c0:	61bb      	str	r3, [r7, #24]
      break;
 80046c2:	bf00      	nop
  }

  return sysclockfreq;
 80046c4:	69bb      	ldr	r3, [r7, #24]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3724      	adds	r7, #36	@ 0x24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	58024400 	.word	0x58024400
 80046d8:	03d09000 	.word	0x03d09000
 80046dc:	003d0900 	.word	0x003d0900
 80046e0:	017d7840 	.word	0x017d7840
 80046e4:	46000000 	.word	0x46000000
 80046e8:	4c742400 	.word	0x4c742400
 80046ec:	4a742400 	.word	0x4a742400
 80046f0:	4bbebc20 	.word	0x4bbebc20

080046f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80046fa:	f7ff fe81 	bl	8004400 <HAL_RCC_GetSysClockFreq>
 80046fe:	4602      	mov	r2, r0
 8004700:	4b10      	ldr	r3, [pc, #64]	@ (8004744 <HAL_RCC_GetHCLKFreq+0x50>)
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	0a1b      	lsrs	r3, r3, #8
 8004706:	f003 030f 	and.w	r3, r3, #15
 800470a:	490f      	ldr	r1, [pc, #60]	@ (8004748 <HAL_RCC_GetHCLKFreq+0x54>)
 800470c:	5ccb      	ldrb	r3, [r1, r3]
 800470e:	f003 031f 	and.w	r3, r3, #31
 8004712:	fa22 f303 	lsr.w	r3, r2, r3
 8004716:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004718:	4b0a      	ldr	r3, [pc, #40]	@ (8004744 <HAL_RCC_GetHCLKFreq+0x50>)
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	f003 030f 	and.w	r3, r3, #15
 8004720:	4a09      	ldr	r2, [pc, #36]	@ (8004748 <HAL_RCC_GetHCLKFreq+0x54>)
 8004722:	5cd3      	ldrb	r3, [r2, r3]
 8004724:	f003 031f 	and.w	r3, r3, #31
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	fa22 f303 	lsr.w	r3, r2, r3
 800472e:	4a07      	ldr	r2, [pc, #28]	@ (800474c <HAL_RCC_GetHCLKFreq+0x58>)
 8004730:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004732:	4a07      	ldr	r2, [pc, #28]	@ (8004750 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004738:	4b04      	ldr	r3, [pc, #16]	@ (800474c <HAL_RCC_GetHCLKFreq+0x58>)
 800473a:	681b      	ldr	r3, [r3, #0]
}
 800473c:	4618      	mov	r0, r3
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	58024400 	.word	0x58024400
 8004748:	0800adc0 	.word	0x0800adc0
 800474c:	24000004 	.word	0x24000004
 8004750:	24000000 	.word	0x24000000

08004754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004758:	f7ff ffcc 	bl	80046f4 <HAL_RCC_GetHCLKFreq>
 800475c:	4602      	mov	r2, r0
 800475e:	4b06      	ldr	r3, [pc, #24]	@ (8004778 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	091b      	lsrs	r3, r3, #4
 8004764:	f003 0307 	and.w	r3, r3, #7
 8004768:	4904      	ldr	r1, [pc, #16]	@ (800477c <HAL_RCC_GetPCLK1Freq+0x28>)
 800476a:	5ccb      	ldrb	r3, [r1, r3]
 800476c:	f003 031f 	and.w	r3, r3, #31
 8004770:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004774:	4618      	mov	r0, r3
 8004776:	bd80      	pop	{r7, pc}
 8004778:	58024400 	.word	0x58024400
 800477c:	0800adc0 	.word	0x0800adc0

08004780 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004784:	f7ff ffb6 	bl	80046f4 <HAL_RCC_GetHCLKFreq>
 8004788:	4602      	mov	r2, r0
 800478a:	4b06      	ldr	r3, [pc, #24]	@ (80047a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	0a1b      	lsrs	r3, r3, #8
 8004790:	f003 0307 	and.w	r3, r3, #7
 8004794:	4904      	ldr	r1, [pc, #16]	@ (80047a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004796:	5ccb      	ldrb	r3, [r1, r3]
 8004798:	f003 031f 	and.w	r3, r3, #31
 800479c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	58024400 	.word	0x58024400
 80047a8:	0800adc0 	.word	0x0800adc0

080047ac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047b0:	b0ca      	sub	sp, #296	@ 0x128
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047b8:	2300      	movs	r3, #0
 80047ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047be:	2300      	movs	r3, #0
 80047c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047cc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80047d0:	2500      	movs	r5, #0
 80047d2:	ea54 0305 	orrs.w	r3, r4, r5
 80047d6:	d049      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80047d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80047e2:	d02f      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80047e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80047e8:	d828      	bhi.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80047ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047ee:	d01a      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80047f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047f4:	d822      	bhi.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d003      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80047fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047fe:	d007      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004800:	e01c      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004802:	4bb8      	ldr	r3, [pc, #736]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004806:	4ab7      	ldr	r2, [pc, #732]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800480c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800480e:	e01a      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004814:	3308      	adds	r3, #8
 8004816:	2102      	movs	r1, #2
 8004818:	4618      	mov	r0, r3
 800481a:	f001 fc8f 	bl	800613c <RCCEx_PLL2_Config>
 800481e:	4603      	mov	r3, r0
 8004820:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004824:	e00f      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800482a:	3328      	adds	r3, #40	@ 0x28
 800482c:	2102      	movs	r1, #2
 800482e:	4618      	mov	r0, r3
 8004830:	f001 fd36 	bl	80062a0 <RCCEx_PLL3_Config>
 8004834:	4603      	mov	r3, r0
 8004836:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800483a:	e004      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004842:	e000      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004844:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10a      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800484e:	4ba5      	ldr	r3, [pc, #660]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004850:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004852:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800485c:	4aa1      	ldr	r2, [pc, #644]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800485e:	430b      	orrs	r3, r1
 8004860:	6513      	str	r3, [r2, #80]	@ 0x50
 8004862:	e003      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004864:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004868:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800486c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004874:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004878:	f04f 0900 	mov.w	r9, #0
 800487c:	ea58 0309 	orrs.w	r3, r8, r9
 8004880:	d047      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004888:	2b04      	cmp	r3, #4
 800488a:	d82a      	bhi.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800488c:	a201      	add	r2, pc, #4	@ (adr r2, 8004894 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800488e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004892:	bf00      	nop
 8004894:	080048a9 	.word	0x080048a9
 8004898:	080048b7 	.word	0x080048b7
 800489c:	080048cd 	.word	0x080048cd
 80048a0:	080048eb 	.word	0x080048eb
 80048a4:	080048eb 	.word	0x080048eb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048a8:	4b8e      	ldr	r3, [pc, #568]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ac:	4a8d      	ldr	r2, [pc, #564]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048b4:	e01a      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ba:	3308      	adds	r3, #8
 80048bc:	2100      	movs	r1, #0
 80048be:	4618      	mov	r0, r3
 80048c0:	f001 fc3c 	bl	800613c <RCCEx_PLL2_Config>
 80048c4:	4603      	mov	r3, r0
 80048c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048ca:	e00f      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048d0:	3328      	adds	r3, #40	@ 0x28
 80048d2:	2100      	movs	r1, #0
 80048d4:	4618      	mov	r0, r3
 80048d6:	f001 fce3 	bl	80062a0 <RCCEx_PLL3_Config>
 80048da:	4603      	mov	r3, r0
 80048dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048e0:	e004      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048e8:	e000      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80048ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10a      	bne.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048f4:	4b7b      	ldr	r3, [pc, #492]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048f8:	f023 0107 	bic.w	r1, r3, #7
 80048fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004902:	4a78      	ldr	r2, [pc, #480]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004904:	430b      	orrs	r3, r1
 8004906:	6513      	str	r3, [r2, #80]	@ 0x50
 8004908:	e003      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800490a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800490e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800491e:	f04f 0b00 	mov.w	fp, #0
 8004922:	ea5a 030b 	orrs.w	r3, sl, fp
 8004926:	d04c      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800492c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800492e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004932:	d030      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004934:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004938:	d829      	bhi.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800493a:	2bc0      	cmp	r3, #192	@ 0xc0
 800493c:	d02d      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800493e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004940:	d825      	bhi.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004942:	2b80      	cmp	r3, #128	@ 0x80
 8004944:	d018      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004946:	2b80      	cmp	r3, #128	@ 0x80
 8004948:	d821      	bhi.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800494a:	2b00      	cmp	r3, #0
 800494c:	d002      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800494e:	2b40      	cmp	r3, #64	@ 0x40
 8004950:	d007      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004952:	e01c      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004954:	4b63      	ldr	r3, [pc, #396]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004958:	4a62      	ldr	r2, [pc, #392]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800495a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800495e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004960:	e01c      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004966:	3308      	adds	r3, #8
 8004968:	2100      	movs	r1, #0
 800496a:	4618      	mov	r0, r3
 800496c:	f001 fbe6 	bl	800613c <RCCEx_PLL2_Config>
 8004970:	4603      	mov	r3, r0
 8004972:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004976:	e011      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800497c:	3328      	adds	r3, #40	@ 0x28
 800497e:	2100      	movs	r1, #0
 8004980:	4618      	mov	r0, r3
 8004982:	f001 fc8d 	bl	80062a0 <RCCEx_PLL3_Config>
 8004986:	4603      	mov	r3, r0
 8004988:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800498c:	e006      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004994:	e002      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004996:	bf00      	nop
 8004998:	e000      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800499a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800499c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10a      	bne.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80049a4:	4b4f      	ldr	r3, [pc, #316]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049a8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80049ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049b2:	4a4c      	ldr	r2, [pc, #304]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049b4:	430b      	orrs	r3, r1
 80049b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80049b8:	e003      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80049c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ca:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80049ce:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80049d2:	2300      	movs	r3, #0
 80049d4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80049d8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80049dc:	460b      	mov	r3, r1
 80049de:	4313      	orrs	r3, r2
 80049e0:	d053      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80049e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80049ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80049ee:	d035      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80049f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80049f4:	d82e      	bhi.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80049f6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80049fa:	d031      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80049fc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004a00:	d828      	bhi.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004a02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a06:	d01a      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004a08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a0c:	d822      	bhi.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004a12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a16:	d007      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004a18:	e01c      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a1a:	4b32      	ldr	r3, [pc, #200]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a1e:	4a31      	ldr	r2, [pc, #196]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a26:	e01c      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a2c:	3308      	adds	r3, #8
 8004a2e:	2100      	movs	r1, #0
 8004a30:	4618      	mov	r0, r3
 8004a32:	f001 fb83 	bl	800613c <RCCEx_PLL2_Config>
 8004a36:	4603      	mov	r3, r0
 8004a38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004a3c:	e011      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a42:	3328      	adds	r3, #40	@ 0x28
 8004a44:	2100      	movs	r1, #0
 8004a46:	4618      	mov	r0, r3
 8004a48:	f001 fc2a 	bl	80062a0 <RCCEx_PLL3_Config>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a52:	e006      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a5a:	e002      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004a5c:	bf00      	nop
 8004a5e:	e000      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004a60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10b      	bne.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a6e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004a7a:	4a1a      	ldr	r2, [pc, #104]	@ (8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a7c:	430b      	orrs	r3, r1
 8004a7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a80:	e003      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a92:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004a96:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004aa0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	d056      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004ab2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ab6:	d038      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004ab8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004abc:	d831      	bhi.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004abe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004ac2:	d034      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004ac4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004ac8:	d82b      	bhi.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004aca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ace:	d01d      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004ad0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ad4:	d825      	bhi.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d006      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004ada:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ade:	d00a      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004ae0:	e01f      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004ae2:	bf00      	nop
 8004ae4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ae8:	4ba2      	ldr	r3, [pc, #648]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aec:	4aa1      	ldr	r2, [pc, #644]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004aee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004af2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004af4:	e01c      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004afa:	3308      	adds	r3, #8
 8004afc:	2100      	movs	r1, #0
 8004afe:	4618      	mov	r0, r3
 8004b00:	f001 fb1c 	bl	800613c <RCCEx_PLL2_Config>
 8004b04:	4603      	mov	r3, r0
 8004b06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004b0a:	e011      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b10:	3328      	adds	r3, #40	@ 0x28
 8004b12:	2100      	movs	r1, #0
 8004b14:	4618      	mov	r0, r3
 8004b16:	f001 fbc3 	bl	80062a0 <RCCEx_PLL3_Config>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b20:	e006      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b28:	e002      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004b2a:	bf00      	nop
 8004b2c:	e000      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004b2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10b      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004b38:	4b8e      	ldr	r3, [pc, #568]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b3c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004b48:	4a8a      	ldr	r2, [pc, #552]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b4a:	430b      	orrs	r3, r1
 8004b4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b4e:	e003      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b60:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004b64:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004b68:	2300      	movs	r3, #0
 8004b6a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004b6e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004b72:	460b      	mov	r3, r1
 8004b74:	4313      	orrs	r3, r2
 8004b76:	d03a      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b7e:	2b30      	cmp	r3, #48	@ 0x30
 8004b80:	d01f      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004b82:	2b30      	cmp	r3, #48	@ 0x30
 8004b84:	d819      	bhi.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004b86:	2b20      	cmp	r3, #32
 8004b88:	d00c      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004b8a:	2b20      	cmp	r3, #32
 8004b8c:	d815      	bhi.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d019      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004b92:	2b10      	cmp	r3, #16
 8004b94:	d111      	bne.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b96:	4b77      	ldr	r3, [pc, #476]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b9a:	4a76      	ldr	r2, [pc, #472]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ba0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004ba2:	e011      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ba8:	3308      	adds	r3, #8
 8004baa:	2102      	movs	r1, #2
 8004bac:	4618      	mov	r0, r3
 8004bae:	f001 fac5 	bl	800613c <RCCEx_PLL2_Config>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004bb8:	e006      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004bc0:	e002      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004bc2:	bf00      	nop
 8004bc4:	e000      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004bc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10a      	bne.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004bd0:	4b68      	ldr	r3, [pc, #416]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bd4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bde:	4a65      	ldr	r2, [pc, #404]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004be0:	430b      	orrs	r3, r1
 8004be2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004be4:	e003      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004bfa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004bfe:	2300      	movs	r3, #0
 8004c00:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004c04:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004c08:	460b      	mov	r3, r1
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	d051      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c18:	d035      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004c1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c1e:	d82e      	bhi.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004c20:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c24:	d031      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004c26:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c2a:	d828      	bhi.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004c2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c30:	d01a      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004c32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c36:	d822      	bhi.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004c3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c40:	d007      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004c42:	e01c      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c44:	4b4b      	ldr	r3, [pc, #300]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c48:	4a4a      	ldr	r2, [pc, #296]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c50:	e01c      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c56:	3308      	adds	r3, #8
 8004c58:	2100      	movs	r1, #0
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f001 fa6e 	bl	800613c <RCCEx_PLL2_Config>
 8004c60:	4603      	mov	r3, r0
 8004c62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c66:	e011      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c6c:	3328      	adds	r3, #40	@ 0x28
 8004c6e:	2100      	movs	r1, #0
 8004c70:	4618      	mov	r0, r3
 8004c72:	f001 fb15 	bl	80062a0 <RCCEx_PLL3_Config>
 8004c76:	4603      	mov	r3, r0
 8004c78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c7c:	e006      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c84:	e002      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004c86:	bf00      	nop
 8004c88:	e000      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004c8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10a      	bne.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004c94:	4b37      	ldr	r3, [pc, #220]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c98:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ca0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ca2:	4a34      	ldr	r2, [pc, #208]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ca4:	430b      	orrs	r3, r1
 8004ca6:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ca8:	e003      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004caa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cba:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004cbe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004cc8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004ccc:	460b      	mov	r3, r1
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	d056      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cdc:	d033      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004cde:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ce2:	d82c      	bhi.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004ce4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ce8:	d02f      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004cea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004cee:	d826      	bhi.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004cf0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004cf4:	d02b      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004cf6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004cfa:	d820      	bhi.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004cfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d00:	d012      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004d02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d06:	d81a      	bhi.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d022      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004d0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d10:	d115      	bne.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d16:	3308      	adds	r3, #8
 8004d18:	2101      	movs	r1, #1
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f001 fa0e 	bl	800613c <RCCEx_PLL2_Config>
 8004d20:	4603      	mov	r3, r0
 8004d22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004d26:	e015      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d2c:	3328      	adds	r3, #40	@ 0x28
 8004d2e:	2101      	movs	r1, #1
 8004d30:	4618      	mov	r0, r3
 8004d32:	f001 fab5 	bl	80062a0 <RCCEx_PLL3_Config>
 8004d36:	4603      	mov	r3, r0
 8004d38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004d3c:	e00a      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d44:	e006      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004d46:	bf00      	nop
 8004d48:	e004      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004d4a:	bf00      	nop
 8004d4c:	e002      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004d4e:	bf00      	nop
 8004d50:	e000      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004d52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10d      	bne.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004d5c:	4b05      	ldr	r3, [pc, #20]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d60:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d6a:	4a02      	ldr	r2, [pc, #8]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d6c:	430b      	orrs	r3, r1
 8004d6e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d70:	e006      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004d72:	bf00      	nop
 8004d74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d88:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004d8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d90:	2300      	movs	r3, #0
 8004d92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d96:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	d055      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004da4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004da8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004dac:	d033      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004dae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004db2:	d82c      	bhi.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004db4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004db8:	d02f      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004dba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dbe:	d826      	bhi.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004dc0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004dc4:	d02b      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004dc6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004dca:	d820      	bhi.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004dcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004dd0:	d012      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004dd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004dd6:	d81a      	bhi.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d022      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004ddc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004de0:	d115      	bne.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de6:	3308      	adds	r3, #8
 8004de8:	2101      	movs	r1, #1
 8004dea:	4618      	mov	r0, r3
 8004dec:	f001 f9a6 	bl	800613c <RCCEx_PLL2_Config>
 8004df0:	4603      	mov	r3, r0
 8004df2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004df6:	e015      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dfc:	3328      	adds	r3, #40	@ 0x28
 8004dfe:	2101      	movs	r1, #1
 8004e00:	4618      	mov	r0, r3
 8004e02:	f001 fa4d 	bl	80062a0 <RCCEx_PLL3_Config>
 8004e06:	4603      	mov	r3, r0
 8004e08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004e0c:	e00a      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e14:	e006      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004e16:	bf00      	nop
 8004e18:	e004      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004e1a:	bf00      	nop
 8004e1c:	e002      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004e1e:	bf00      	nop
 8004e20:	e000      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004e22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10b      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004e2c:	4ba3      	ldr	r3, [pc, #652]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e30:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004e3c:	4a9f      	ldr	r2, [pc, #636]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e3e:	430b      	orrs	r3, r1
 8004e40:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e42:	e003      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e54:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004e58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004e62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004e66:	460b      	mov	r3, r1
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	d037      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e76:	d00e      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004e78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e7c:	d816      	bhi.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d018      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004e82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e86:	d111      	bne.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e88:	4b8c      	ldr	r3, [pc, #560]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e8c:	4a8b      	ldr	r2, [pc, #556]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004e94:	e00f      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e9a:	3308      	adds	r3, #8
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f001 f94c 	bl	800613c <RCCEx_PLL2_Config>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004eaa:	e004      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004eb2:	e000      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004eb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10a      	bne.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ebe:	4b7f      	ldr	r3, [pc, #508]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ec0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ec2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ecc:	4a7b      	ldr	r2, [pc, #492]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ece:	430b      	orrs	r3, r1
 8004ed0:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ed2:	e003      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ed4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ed8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004ee8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004eec:	2300      	movs	r3, #0
 8004eee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004ef2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	d039      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f02:	2b03      	cmp	r3, #3
 8004f04:	d81c      	bhi.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004f06:	a201      	add	r2, pc, #4	@ (adr r2, 8004f0c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0c:	08004f49 	.word	0x08004f49
 8004f10:	08004f1d 	.word	0x08004f1d
 8004f14:	08004f2b 	.word	0x08004f2b
 8004f18:	08004f49 	.word	0x08004f49
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f1c:	4b67      	ldr	r3, [pc, #412]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f20:	4a66      	ldr	r2, [pc, #408]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004f28:	e00f      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f2e:	3308      	adds	r3, #8
 8004f30:	2102      	movs	r1, #2
 8004f32:	4618      	mov	r0, r3
 8004f34:	f001 f902 	bl	800613c <RCCEx_PLL2_Config>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004f3e:	e004      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f46:	e000      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004f48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d10a      	bne.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004f52:	4b5a      	ldr	r3, [pc, #360]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f56:	f023 0103 	bic.w	r1, r3, #3
 8004f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f60:	4a56      	ldr	r2, [pc, #344]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f62:	430b      	orrs	r3, r1
 8004f64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f66:	e003      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f78:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004f7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f80:	2300      	movs	r3, #0
 8004f82:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f86:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	f000 809f 	beq.w	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f92:	4b4b      	ldr	r3, [pc, #300]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a4a      	ldr	r2, [pc, #296]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004f98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f9e:	f7fd fd61 	bl	8002a64 <HAL_GetTick>
 8004fa2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fa6:	e00b      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fa8:	f7fd fd5c 	bl	8002a64 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b64      	cmp	r3, #100	@ 0x64
 8004fb6:	d903      	bls.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fbe:	e005      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fc0:	4b3f      	ldr	r3, [pc, #252]	@ (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d0ed      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004fcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d179      	bne.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004fd4:	4b39      	ldr	r3, [pc, #228]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fd6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fdc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004fe0:	4053      	eors	r3, r2
 8004fe2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d015      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fea:	4b34      	ldr	r3, [pc, #208]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ff2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ff6:	4b31      	ldr	r3, [pc, #196]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ffa:	4a30      	ldr	r2, [pc, #192]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ffc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005000:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005002:	4b2e      	ldr	r3, [pc, #184]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005006:	4a2d      	ldr	r2, [pc, #180]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005008:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800500c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800500e:	4a2b      	ldr	r2, [pc, #172]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005010:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005014:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800501a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800501e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005022:	d118      	bne.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005024:	f7fd fd1e 	bl	8002a64 <HAL_GetTick>
 8005028:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800502c:	e00d      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800502e:	f7fd fd19 	bl	8002a64 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005038:	1ad2      	subs	r2, r2, r3
 800503a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800503e:	429a      	cmp	r2, r3
 8005040:	d903      	bls.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005048:	e005      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800504a:	4b1c      	ldr	r3, [pc, #112]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800504c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d0eb      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005056:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800505a:	2b00      	cmp	r3, #0
 800505c:	d129      	bne.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800505e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005062:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005066:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800506a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800506e:	d10e      	bne.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005070:	4b12      	ldr	r3, [pc, #72]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800507c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005080:	091a      	lsrs	r2, r3, #4
 8005082:	4b10      	ldr	r3, [pc, #64]	@ (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005084:	4013      	ands	r3, r2
 8005086:	4a0d      	ldr	r2, [pc, #52]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005088:	430b      	orrs	r3, r1
 800508a:	6113      	str	r3, [r2, #16]
 800508c:	e005      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800508e:	4b0b      	ldr	r3, [pc, #44]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	4a0a      	ldr	r2, [pc, #40]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005094:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005098:	6113      	str	r3, [r2, #16]
 800509a:	4b08      	ldr	r3, [pc, #32]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800509c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800509e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80050a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050aa:	4a04      	ldr	r2, [pc, #16]	@ (80050bc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050ac:	430b      	orrs	r3, r1
 80050ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80050b0:	e00e      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80050ba:	e009      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80050bc:	58024400 	.word	0x58024400
 80050c0:	58024800 	.word	0x58024800
 80050c4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80050d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d8:	f002 0301 	and.w	r3, r2, #1
 80050dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80050e0:	2300      	movs	r3, #0
 80050e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80050e6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80050ea:	460b      	mov	r3, r1
 80050ec:	4313      	orrs	r3, r2
 80050ee:	f000 8089 	beq.w	8005204 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80050f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050f8:	2b28      	cmp	r3, #40	@ 0x28
 80050fa:	d86b      	bhi.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80050fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005104 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80050fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005102:	bf00      	nop
 8005104:	080051dd 	.word	0x080051dd
 8005108:	080051d5 	.word	0x080051d5
 800510c:	080051d5 	.word	0x080051d5
 8005110:	080051d5 	.word	0x080051d5
 8005114:	080051d5 	.word	0x080051d5
 8005118:	080051d5 	.word	0x080051d5
 800511c:	080051d5 	.word	0x080051d5
 8005120:	080051d5 	.word	0x080051d5
 8005124:	080051a9 	.word	0x080051a9
 8005128:	080051d5 	.word	0x080051d5
 800512c:	080051d5 	.word	0x080051d5
 8005130:	080051d5 	.word	0x080051d5
 8005134:	080051d5 	.word	0x080051d5
 8005138:	080051d5 	.word	0x080051d5
 800513c:	080051d5 	.word	0x080051d5
 8005140:	080051d5 	.word	0x080051d5
 8005144:	080051bf 	.word	0x080051bf
 8005148:	080051d5 	.word	0x080051d5
 800514c:	080051d5 	.word	0x080051d5
 8005150:	080051d5 	.word	0x080051d5
 8005154:	080051d5 	.word	0x080051d5
 8005158:	080051d5 	.word	0x080051d5
 800515c:	080051d5 	.word	0x080051d5
 8005160:	080051d5 	.word	0x080051d5
 8005164:	080051dd 	.word	0x080051dd
 8005168:	080051d5 	.word	0x080051d5
 800516c:	080051d5 	.word	0x080051d5
 8005170:	080051d5 	.word	0x080051d5
 8005174:	080051d5 	.word	0x080051d5
 8005178:	080051d5 	.word	0x080051d5
 800517c:	080051d5 	.word	0x080051d5
 8005180:	080051d5 	.word	0x080051d5
 8005184:	080051dd 	.word	0x080051dd
 8005188:	080051d5 	.word	0x080051d5
 800518c:	080051d5 	.word	0x080051d5
 8005190:	080051d5 	.word	0x080051d5
 8005194:	080051d5 	.word	0x080051d5
 8005198:	080051d5 	.word	0x080051d5
 800519c:	080051d5 	.word	0x080051d5
 80051a0:	080051d5 	.word	0x080051d5
 80051a4:	080051dd 	.word	0x080051dd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ac:	3308      	adds	r3, #8
 80051ae:	2101      	movs	r1, #1
 80051b0:	4618      	mov	r0, r3
 80051b2:	f000 ffc3 	bl	800613c <RCCEx_PLL2_Config>
 80051b6:	4603      	mov	r3, r0
 80051b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80051bc:	e00f      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051c2:	3328      	adds	r3, #40	@ 0x28
 80051c4:	2101      	movs	r1, #1
 80051c6:	4618      	mov	r0, r3
 80051c8:	f001 f86a 	bl	80062a0 <RCCEx_PLL3_Config>
 80051cc:	4603      	mov	r3, r0
 80051ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80051d2:	e004      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80051da:	e000      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80051dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10a      	bne.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80051e6:	4bbf      	ldr	r3, [pc, #764]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80051e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ea:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80051ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051f4:	4abb      	ldr	r2, [pc, #748]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80051f6:	430b      	orrs	r3, r1
 80051f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80051fa:	e003      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005200:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520c:	f002 0302 	and.w	r3, r2, #2
 8005210:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005214:	2300      	movs	r3, #0
 8005216:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800521a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800521e:	460b      	mov	r3, r1
 8005220:	4313      	orrs	r3, r2
 8005222:	d041      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005228:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800522a:	2b05      	cmp	r3, #5
 800522c:	d824      	bhi.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800522e:	a201      	add	r2, pc, #4	@ (adr r2, 8005234 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005234:	08005281 	.word	0x08005281
 8005238:	0800524d 	.word	0x0800524d
 800523c:	08005263 	.word	0x08005263
 8005240:	08005281 	.word	0x08005281
 8005244:	08005281 	.word	0x08005281
 8005248:	08005281 	.word	0x08005281
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800524c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005250:	3308      	adds	r3, #8
 8005252:	2101      	movs	r1, #1
 8005254:	4618      	mov	r0, r3
 8005256:	f000 ff71 	bl	800613c <RCCEx_PLL2_Config>
 800525a:	4603      	mov	r3, r0
 800525c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005260:	e00f      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005266:	3328      	adds	r3, #40	@ 0x28
 8005268:	2101      	movs	r1, #1
 800526a:	4618      	mov	r0, r3
 800526c:	f001 f818 	bl	80062a0 <RCCEx_PLL3_Config>
 8005270:	4603      	mov	r3, r0
 8005272:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005276:	e004      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800527e:	e000      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005280:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005282:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10a      	bne.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800528a:	4b96      	ldr	r3, [pc, #600]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800528c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800528e:	f023 0107 	bic.w	r1, r3, #7
 8005292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005296:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005298:	4a92      	ldr	r2, [pc, #584]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800529a:	430b      	orrs	r3, r1
 800529c:	6553      	str	r3, [r2, #84]	@ 0x54
 800529e:	e003      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b0:	f002 0304 	and.w	r3, r2, #4
 80052b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052b8:	2300      	movs	r3, #0
 80052ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052be:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80052c2:	460b      	mov	r3, r1
 80052c4:	4313      	orrs	r3, r2
 80052c6:	d044      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80052c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052d0:	2b05      	cmp	r3, #5
 80052d2:	d825      	bhi.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80052d4:	a201      	add	r2, pc, #4	@ (adr r2, 80052dc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80052d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052da:	bf00      	nop
 80052dc:	08005329 	.word	0x08005329
 80052e0:	080052f5 	.word	0x080052f5
 80052e4:	0800530b 	.word	0x0800530b
 80052e8:	08005329 	.word	0x08005329
 80052ec:	08005329 	.word	0x08005329
 80052f0:	08005329 	.word	0x08005329
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052f8:	3308      	adds	r3, #8
 80052fa:	2101      	movs	r1, #1
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 ff1d 	bl	800613c <RCCEx_PLL2_Config>
 8005302:	4603      	mov	r3, r0
 8005304:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005308:	e00f      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800530a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800530e:	3328      	adds	r3, #40	@ 0x28
 8005310:	2101      	movs	r1, #1
 8005312:	4618      	mov	r0, r3
 8005314:	f000 ffc4 	bl	80062a0 <RCCEx_PLL3_Config>
 8005318:	4603      	mov	r3, r0
 800531a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800531e:	e004      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005326:	e000      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005328:	bf00      	nop
    }

    if (ret == HAL_OK)
 800532a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800532e:	2b00      	cmp	r3, #0
 8005330:	d10b      	bne.n	800534a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005332:	4b6c      	ldr	r3, [pc, #432]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005336:	f023 0107 	bic.w	r1, r3, #7
 800533a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800533e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005342:	4a68      	ldr	r2, [pc, #416]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005344:	430b      	orrs	r3, r1
 8005346:	6593      	str	r3, [r2, #88]	@ 0x58
 8005348:	e003      	b.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800534a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800534e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535a:	f002 0320 	and.w	r3, r2, #32
 800535e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005362:	2300      	movs	r3, #0
 8005364:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005368:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800536c:	460b      	mov	r3, r1
 800536e:	4313      	orrs	r3, r2
 8005370:	d055      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800537a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800537e:	d033      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005380:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005384:	d82c      	bhi.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005386:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800538a:	d02f      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800538c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005390:	d826      	bhi.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005392:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005396:	d02b      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005398:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800539c:	d820      	bhi.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800539e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053a2:	d012      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80053a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053a8:	d81a      	bhi.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d022      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80053ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053b2:	d115      	bne.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053b8:	3308      	adds	r3, #8
 80053ba:	2100      	movs	r1, #0
 80053bc:	4618      	mov	r0, r3
 80053be:	f000 febd 	bl	800613c <RCCEx_PLL2_Config>
 80053c2:	4603      	mov	r3, r0
 80053c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80053c8:	e015      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80053ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ce:	3328      	adds	r3, #40	@ 0x28
 80053d0:	2102      	movs	r1, #2
 80053d2:	4618      	mov	r0, r3
 80053d4:	f000 ff64 	bl	80062a0 <RCCEx_PLL3_Config>
 80053d8:	4603      	mov	r3, r0
 80053da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80053de:	e00a      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053e6:	e006      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80053e8:	bf00      	nop
 80053ea:	e004      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80053ec:	bf00      	nop
 80053ee:	e002      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80053f0:	bf00      	nop
 80053f2:	e000      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80053f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10b      	bne.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053fe:	4b39      	ldr	r3, [pc, #228]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005402:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800540a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800540e:	4a35      	ldr	r2, [pc, #212]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005410:	430b      	orrs	r3, r1
 8005412:	6553      	str	r3, [r2, #84]	@ 0x54
 8005414:	e003      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800541a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800541e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005426:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800542a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800542e:	2300      	movs	r3, #0
 8005430:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005434:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005438:	460b      	mov	r3, r1
 800543a:	4313      	orrs	r3, r2
 800543c:	d058      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800543e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005442:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005446:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800544a:	d033      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800544c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005450:	d82c      	bhi.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005452:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005456:	d02f      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005458:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800545c:	d826      	bhi.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800545e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005462:	d02b      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005464:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005468:	d820      	bhi.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800546a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800546e:	d012      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005470:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005474:	d81a      	bhi.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005476:	2b00      	cmp	r3, #0
 8005478:	d022      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800547a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800547e:	d115      	bne.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005484:	3308      	adds	r3, #8
 8005486:	2100      	movs	r1, #0
 8005488:	4618      	mov	r0, r3
 800548a:	f000 fe57 	bl	800613c <RCCEx_PLL2_Config>
 800548e:	4603      	mov	r3, r0
 8005490:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005494:	e015      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800549a:	3328      	adds	r3, #40	@ 0x28
 800549c:	2102      	movs	r1, #2
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 fefe 	bl	80062a0 <RCCEx_PLL3_Config>
 80054a4:	4603      	mov	r3, r0
 80054a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80054aa:	e00a      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054b2:	e006      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80054b4:	bf00      	nop
 80054b6:	e004      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80054b8:	bf00      	nop
 80054ba:	e002      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80054bc:	bf00      	nop
 80054be:	e000      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80054c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10e      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054ca:	4b06      	ldr	r3, [pc, #24]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054ce:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80054d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054da:	4a02      	ldr	r2, [pc, #8]	@ (80054e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054dc:	430b      	orrs	r3, r1
 80054de:	6593      	str	r3, [r2, #88]	@ 0x58
 80054e0:	e006      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80054e2:	bf00      	nop
 80054e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80054f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80054fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005500:	2300      	movs	r3, #0
 8005502:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005506:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800550a:	460b      	mov	r3, r1
 800550c:	4313      	orrs	r3, r2
 800550e:	d055      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005514:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005518:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800551c:	d033      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800551e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005522:	d82c      	bhi.n	800557e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005524:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005528:	d02f      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800552a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800552e:	d826      	bhi.n	800557e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005530:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005534:	d02b      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005536:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800553a:	d820      	bhi.n	800557e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800553c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005540:	d012      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005542:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005546:	d81a      	bhi.n	800557e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005548:	2b00      	cmp	r3, #0
 800554a:	d022      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800554c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005550:	d115      	bne.n	800557e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005556:	3308      	adds	r3, #8
 8005558:	2100      	movs	r1, #0
 800555a:	4618      	mov	r0, r3
 800555c:	f000 fdee 	bl	800613c <RCCEx_PLL2_Config>
 8005560:	4603      	mov	r3, r0
 8005562:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005566:	e015      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800556c:	3328      	adds	r3, #40	@ 0x28
 800556e:	2102      	movs	r1, #2
 8005570:	4618      	mov	r0, r3
 8005572:	f000 fe95 	bl	80062a0 <RCCEx_PLL3_Config>
 8005576:	4603      	mov	r3, r0
 8005578:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800557c:	e00a      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005584:	e006      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005586:	bf00      	nop
 8005588:	e004      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800558a:	bf00      	nop
 800558c:	e002      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800558e:	bf00      	nop
 8005590:	e000      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005592:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005594:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005598:	2b00      	cmp	r3, #0
 800559a:	d10b      	bne.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800559c:	4ba1      	ldr	r3, [pc, #644]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800559e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055a0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80055a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80055ac:	4a9d      	ldr	r2, [pc, #628]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055ae:	430b      	orrs	r3, r1
 80055b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80055b2:	e003      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80055bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c4:	f002 0308 	and.w	r3, r2, #8
 80055c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055cc:	2300      	movs	r3, #0
 80055ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80055d2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80055d6:	460b      	mov	r3, r1
 80055d8:	4313      	orrs	r3, r2
 80055da:	d01e      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80055dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055e8:	d10c      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80055ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ee:	3328      	adds	r3, #40	@ 0x28
 80055f0:	2102      	movs	r1, #2
 80055f2:	4618      	mov	r0, r3
 80055f4:	f000 fe54 	bl	80062a0 <RCCEx_PLL3_Config>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d002      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005604:	4b87      	ldr	r3, [pc, #540]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005608:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800560c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005610:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005614:	4a83      	ldr	r2, [pc, #524]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005616:	430b      	orrs	r3, r1
 8005618:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800561a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800561e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005622:	f002 0310 	and.w	r3, r2, #16
 8005626:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800562a:	2300      	movs	r3, #0
 800562c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005630:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005634:	460b      	mov	r3, r1
 8005636:	4313      	orrs	r3, r2
 8005638:	d01e      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800563a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800563e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005642:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005646:	d10c      	bne.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800564c:	3328      	adds	r3, #40	@ 0x28
 800564e:	2102      	movs	r1, #2
 8005650:	4618      	mov	r0, r3
 8005652:	f000 fe25 	bl	80062a0 <RCCEx_PLL3_Config>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d002      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005662:	4b70      	ldr	r3, [pc, #448]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005666:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800566a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800566e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005672:	4a6c      	ldr	r2, [pc, #432]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005674:	430b      	orrs	r3, r1
 8005676:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800567c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005680:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005684:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005688:	2300      	movs	r3, #0
 800568a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800568e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005692:	460b      	mov	r3, r1
 8005694:	4313      	orrs	r3, r2
 8005696:	d03e      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800569c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80056a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056a4:	d022      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80056a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056aa:	d81b      	bhi.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d003      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80056b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056b4:	d00b      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80056b6:	e015      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056bc:	3308      	adds	r3, #8
 80056be:	2100      	movs	r1, #0
 80056c0:	4618      	mov	r0, r3
 80056c2:	f000 fd3b 	bl	800613c <RCCEx_PLL2_Config>
 80056c6:	4603      	mov	r3, r0
 80056c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80056cc:	e00f      	b.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80056ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056d2:	3328      	adds	r3, #40	@ 0x28
 80056d4:	2102      	movs	r1, #2
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 fde2 	bl	80062a0 <RCCEx_PLL3_Config>
 80056dc:	4603      	mov	r3, r0
 80056de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80056e2:	e004      	b.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056ea:	e000      	b.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80056ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10b      	bne.n	800570e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056f6:	4b4b      	ldr	r3, [pc, #300]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056fa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80056fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005702:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005706:	4a47      	ldr	r2, [pc, #284]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005708:	430b      	orrs	r3, r1
 800570a:	6593      	str	r3, [r2, #88]	@ 0x58
 800570c:	e003      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800570e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005712:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800571a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005722:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005724:	2300      	movs	r3, #0
 8005726:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005728:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800572c:	460b      	mov	r3, r1
 800572e:	4313      	orrs	r3, r2
 8005730:	d03b      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005736:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800573a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800573e:	d01f      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005740:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005744:	d818      	bhi.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005746:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800574a:	d003      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800574c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005750:	d007      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005752:	e011      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005754:	4b33      	ldr	r3, [pc, #204]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005758:	4a32      	ldr	r2, [pc, #200]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800575a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800575e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005760:	e00f      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005766:	3328      	adds	r3, #40	@ 0x28
 8005768:	2101      	movs	r1, #1
 800576a:	4618      	mov	r0, r3
 800576c:	f000 fd98 	bl	80062a0 <RCCEx_PLL3_Config>
 8005770:	4603      	mov	r3, r0
 8005772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005776:	e004      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800577e:	e000      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005780:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005782:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10b      	bne.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800578a:	4b26      	ldr	r3, [pc, #152]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800578c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800578e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800579a:	4a22      	ldr	r2, [pc, #136]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800579c:	430b      	orrs	r3, r1
 800579e:	6553      	str	r3, [r2, #84]	@ 0x54
 80057a0:	e003      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80057aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80057b6:	673b      	str	r3, [r7, #112]	@ 0x70
 80057b8:	2300      	movs	r3, #0
 80057ba:	677b      	str	r3, [r7, #116]	@ 0x74
 80057bc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80057c0:	460b      	mov	r3, r1
 80057c2:	4313      	orrs	r3, r2
 80057c4:	d034      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80057c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d003      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80057d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057d4:	d007      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80057d6:	e011      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057d8:	4b12      	ldr	r3, [pc, #72]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057dc:	4a11      	ldr	r2, [pc, #68]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80057e4:	e00e      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80057e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ea:	3308      	adds	r3, #8
 80057ec:	2102      	movs	r1, #2
 80057ee:	4618      	mov	r0, r3
 80057f0:	f000 fca4 	bl	800613c <RCCEx_PLL2_Config>
 80057f4:	4603      	mov	r3, r0
 80057f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80057fa:	e003      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005802:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005804:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005808:	2b00      	cmp	r3, #0
 800580a:	d10d      	bne.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800580c:	4b05      	ldr	r3, [pc, #20]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800580e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005810:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800581a:	4a02      	ldr	r2, [pc, #8]	@ (8005824 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800581c:	430b      	orrs	r3, r1
 800581e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005820:	e006      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005822:	bf00      	nop
 8005824:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005828:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800582c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005838:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800583c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800583e:	2300      	movs	r3, #0
 8005840:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005842:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005846:	460b      	mov	r3, r1
 8005848:	4313      	orrs	r3, r2
 800584a:	d00c      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800584c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005850:	3328      	adds	r3, #40	@ 0x28
 8005852:	2102      	movs	r1, #2
 8005854:	4618      	mov	r0, r3
 8005856:	f000 fd23 	bl	80062a0 <RCCEx_PLL3_Config>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d002      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800586a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005872:	663b      	str	r3, [r7, #96]	@ 0x60
 8005874:	2300      	movs	r3, #0
 8005876:	667b      	str	r3, [r7, #100]	@ 0x64
 8005878:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800587c:	460b      	mov	r3, r1
 800587e:	4313      	orrs	r3, r2
 8005880:	d038      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005886:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800588a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800588e:	d018      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005890:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005894:	d811      	bhi.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005896:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800589a:	d014      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800589c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058a0:	d80b      	bhi.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d011      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80058a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058aa:	d106      	bne.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058ac:	4bc3      	ldr	r3, [pc, #780]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b0:	4ac2      	ldr	r2, [pc, #776]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80058b8:	e008      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058c0:	e004      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80058c2:	bf00      	nop
 80058c4:	e002      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80058c6:	bf00      	nop
 80058c8:	e000      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80058ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d10b      	bne.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80058d4:	4bb9      	ldr	r3, [pc, #740]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058d8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80058dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058e4:	4ab5      	ldr	r2, [pc, #724]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058e6:	430b      	orrs	r3, r1
 80058e8:	6553      	str	r3, [r2, #84]	@ 0x54
 80058ea:	e003      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80058f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005900:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005902:	2300      	movs	r3, #0
 8005904:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005906:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800590a:	460b      	mov	r3, r1
 800590c:	4313      	orrs	r3, r2
 800590e:	d009      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005910:	4baa      	ldr	r3, [pc, #680]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005912:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005914:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800591c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800591e:	4aa7      	ldr	r2, [pc, #668]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005920:	430b      	orrs	r3, r1
 8005922:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005930:	653b      	str	r3, [r7, #80]	@ 0x50
 8005932:	2300      	movs	r3, #0
 8005934:	657b      	str	r3, [r7, #84]	@ 0x54
 8005936:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800593a:	460b      	mov	r3, r1
 800593c:	4313      	orrs	r3, r2
 800593e:	d00a      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005940:	4b9e      	ldr	r3, [pc, #632]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800594c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005950:	4a9a      	ldr	r2, [pc, #616]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005952:	430b      	orrs	r3, r1
 8005954:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800595a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005962:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005964:	2300      	movs	r3, #0
 8005966:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005968:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800596c:	460b      	mov	r3, r1
 800596e:	4313      	orrs	r3, r2
 8005970:	d009      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005972:	4b92      	ldr	r3, [pc, #584]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005974:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005976:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800597a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800597e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005980:	4a8e      	ldr	r2, [pc, #568]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005982:	430b      	orrs	r3, r1
 8005984:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800598a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005992:	643b      	str	r3, [r7, #64]	@ 0x40
 8005994:	2300      	movs	r3, #0
 8005996:	647b      	str	r3, [r7, #68]	@ 0x44
 8005998:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800599c:	460b      	mov	r3, r1
 800599e:	4313      	orrs	r3, r2
 80059a0:	d00e      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059a2:	4b86      	ldr	r3, [pc, #536]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	4a85      	ldr	r2, [pc, #532]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059a8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80059ac:	6113      	str	r3, [r2, #16]
 80059ae:	4b83      	ldr	r3, [pc, #524]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059b0:	6919      	ldr	r1, [r3, #16]
 80059b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80059ba:	4a80      	ldr	r2, [pc, #512]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059bc:	430b      	orrs	r3, r1
 80059be:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80059c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80059cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059ce:	2300      	movs	r3, #0
 80059d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059d2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80059d6:	460b      	mov	r3, r1
 80059d8:	4313      	orrs	r3, r2
 80059da:	d009      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80059dc:	4b77      	ldr	r3, [pc, #476]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059e0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80059e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ea:	4a74      	ldr	r2, [pc, #464]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059ec:	430b      	orrs	r3, r1
 80059ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80059f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80059fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80059fe:	2300      	movs	r3, #0
 8005a00:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a02:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005a06:	460b      	mov	r3, r1
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	d00a      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005a0c:	4b6b      	ldr	r3, [pc, #428]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a10:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a1c:	4a67      	ldr	r2, [pc, #412]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a1e:	430b      	orrs	r3, r1
 8005a20:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a34:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005a38:	460b      	mov	r3, r1
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	d011      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a42:	3308      	adds	r3, #8
 8005a44:	2100      	movs	r1, #0
 8005a46:	4618      	mov	r0, r3
 8005a48:	f000 fb78 	bl	800613c <RCCEx_PLL2_Config>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005a52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d003      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	6239      	str	r1, [r7, #32]
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a74:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005a78:	460b      	mov	r3, r1
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	d011      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a82:	3308      	adds	r3, #8
 8005a84:	2101      	movs	r1, #1
 8005a86:	4618      	mov	r0, r3
 8005a88:	f000 fb58 	bl	800613c <RCCEx_PLL2_Config>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005a92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aaa:	2100      	movs	r1, #0
 8005aac:	61b9      	str	r1, [r7, #24]
 8005aae:	f003 0304 	and.w	r3, r3, #4
 8005ab2:	61fb      	str	r3, [r7, #28]
 8005ab4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005ab8:	460b      	mov	r3, r1
 8005aba:	4313      	orrs	r3, r2
 8005abc:	d011      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ac2:	3308      	adds	r3, #8
 8005ac4:	2102      	movs	r1, #2
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f000 fb38 	bl	800613c <RCCEx_PLL2_Config>
 8005acc:	4603      	mov	r3, r0
 8005ace:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ada:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ade:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aea:	2100      	movs	r1, #0
 8005aec:	6139      	str	r1, [r7, #16]
 8005aee:	f003 0308 	and.w	r3, r3, #8
 8005af2:	617b      	str	r3, [r7, #20]
 8005af4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005af8:	460b      	mov	r3, r1
 8005afa:	4313      	orrs	r3, r2
 8005afc:	d011      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b02:	3328      	adds	r3, #40	@ 0x28
 8005b04:	2100      	movs	r1, #0
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 fbca 	bl	80062a0 <RCCEx_PLL3_Config>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005b12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	f003 0310 	and.w	r3, r3, #16
 8005b32:	60fb      	str	r3, [r7, #12]
 8005b34:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	d011      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b42:	3328      	adds	r3, #40	@ 0x28
 8005b44:	2101      	movs	r1, #1
 8005b46:	4618      	mov	r0, r3
 8005b48:	f000 fbaa 	bl	80062a0 <RCCEx_PLL3_Config>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005b52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d003      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	6039      	str	r1, [r7, #0]
 8005b6e:	f003 0320 	and.w	r3, r3, #32
 8005b72:	607b      	str	r3, [r7, #4]
 8005b74:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005b78:	460b      	mov	r3, r1
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	d011      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b82:	3328      	adds	r3, #40	@ 0x28
 8005b84:	2102      	movs	r1, #2
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 fb8a 	bl	80062a0 <RCCEx_PLL3_Config>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005b92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005ba2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005baa:	2300      	movs	r3, #0
 8005bac:	e000      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bbc:	58024400 	.word	0x58024400

08005bc0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005bc4:	f7fe fd96 	bl	80046f4 <HAL_RCC_GetHCLKFreq>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	4b06      	ldr	r3, [pc, #24]	@ (8005be4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	091b      	lsrs	r3, r3, #4
 8005bd0:	f003 0307 	and.w	r3, r3, #7
 8005bd4:	4904      	ldr	r1, [pc, #16]	@ (8005be8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005bd6:	5ccb      	ldrb	r3, [r1, r3]
 8005bd8:	f003 031f 	and.w	r3, r3, #31
 8005bdc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	58024400 	.word	0x58024400
 8005be8:	0800adc0 	.word	0x0800adc0

08005bec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b089      	sub	sp, #36	@ 0x24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005bf4:	4ba1      	ldr	r3, [pc, #644]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf8:	f003 0303 	and.w	r3, r3, #3
 8005bfc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005bfe:	4b9f      	ldr	r3, [pc, #636]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c02:	0b1b      	lsrs	r3, r3, #12
 8005c04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c08:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005c0a:	4b9c      	ldr	r3, [pc, #624]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c0e:	091b      	lsrs	r3, r3, #4
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005c16:	4b99      	ldr	r3, [pc, #612]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c1a:	08db      	lsrs	r3, r3, #3
 8005c1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	fb02 f303 	mul.w	r3, r2, r3
 8005c26:	ee07 3a90 	vmov	s15, r3
 8005c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 8111 	beq.w	8005e5c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	f000 8083 	beq.w	8005d48 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	f200 80a1 	bhi.w	8005d8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d003      	beq.n	8005c58 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d056      	beq.n	8005d04 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005c56:	e099      	b.n	8005d8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c58:	4b88      	ldr	r3, [pc, #544]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0320 	and.w	r3, r3, #32
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d02d      	beq.n	8005cc0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c64:	4b85      	ldr	r3, [pc, #532]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	08db      	lsrs	r3, r3, #3
 8005c6a:	f003 0303 	and.w	r3, r3, #3
 8005c6e:	4a84      	ldr	r2, [pc, #528]	@ (8005e80 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005c70:	fa22 f303 	lsr.w	r3, r2, r3
 8005c74:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	ee07 3a90 	vmov	s15, r3
 8005c7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	ee07 3a90 	vmov	s15, r3
 8005c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c8e:	4b7b      	ldr	r3, [pc, #492]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c96:	ee07 3a90 	vmov	s15, r3
 8005c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ca2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005e84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005cbe:	e087      	b.n	8005dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	ee07 3a90 	vmov	s15, r3
 8005cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005e88 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cd2:	4b6a      	ldr	r3, [pc, #424]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cda:	ee07 3a90 	vmov	s15, r3
 8005cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ce2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ce6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005e84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d02:	e065      	b.n	8005dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	ee07 3a90 	vmov	s15, r3
 8005d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d0e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005e8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d16:	4b59      	ldr	r3, [pc, #356]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d1e:	ee07 3a90 	vmov	s15, r3
 8005d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d26:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d2a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005e84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d46:	e043      	b.n	8005dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	ee07 3a90 	vmov	s15, r3
 8005d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d52:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005e90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d5a:	4b48      	ldr	r3, [pc, #288]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d62:	ee07 3a90 	vmov	s15, r3
 8005d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d6e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005e84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d8a:	e021      	b.n	8005dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	ee07 3a90 	vmov	s15, r3
 8005d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d96:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005e8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d9e:	4b37      	ldr	r3, [pc, #220]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005da6:	ee07 3a90 	vmov	s15, r3
 8005daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dae:	ed97 6a03 	vldr	s12, [r7, #12]
 8005db2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005e84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005dce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005dd0:	4b2a      	ldr	r3, [pc, #168]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd4:	0a5b      	lsrs	r3, r3, #9
 8005dd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005dda:	ee07 3a90 	vmov	s15, r3
 8005dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005de2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005de6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dea:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005df2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005df6:	ee17 2a90 	vmov	r2, s15
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005dfe:	4b1f      	ldr	r3, [pc, #124]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e02:	0c1b      	lsrs	r3, r3, #16
 8005e04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e08:	ee07 3a90 	vmov	s15, r3
 8005e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e18:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e24:	ee17 2a90 	vmov	r2, s15
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005e2c:	4b13      	ldr	r3, [pc, #76]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e30:	0e1b      	lsrs	r3, r3, #24
 8005e32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e36:	ee07 3a90 	vmov	s15, r3
 8005e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e46:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e52:	ee17 2a90 	vmov	r2, s15
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005e5a:	e008      	b.n	8005e6e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	609a      	str	r2, [r3, #8]
}
 8005e6e:	bf00      	nop
 8005e70:	3724      	adds	r7, #36	@ 0x24
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	58024400 	.word	0x58024400
 8005e80:	03d09000 	.word	0x03d09000
 8005e84:	46000000 	.word	0x46000000
 8005e88:	4c742400 	.word	0x4c742400
 8005e8c:	4a742400 	.word	0x4a742400
 8005e90:	4bbebc20 	.word	0x4bbebc20

08005e94 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b089      	sub	sp, #36	@ 0x24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e9c:	4ba1      	ldr	r3, [pc, #644]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea0:	f003 0303 	and.w	r3, r3, #3
 8005ea4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005ea6:	4b9f      	ldr	r3, [pc, #636]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eaa:	0d1b      	lsrs	r3, r3, #20
 8005eac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005eb0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005eb2:	4b9c      	ldr	r3, [pc, #624]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb6:	0a1b      	lsrs	r3, r3, #8
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005ebe:	4b99      	ldr	r3, [pc, #612]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ec2:	08db      	lsrs	r3, r3, #3
 8005ec4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	fb02 f303 	mul.w	r3, r2, r3
 8005ece:	ee07 3a90 	vmov	s15, r3
 8005ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ed6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 8111 	beq.w	8006104 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	f000 8083 	beq.w	8005ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	f200 80a1 	bhi.w	8006034 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d003      	beq.n	8005f00 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d056      	beq.n	8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005efe:	e099      	b.n	8006034 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f00:	4b88      	ldr	r3, [pc, #544]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0320 	and.w	r3, r3, #32
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d02d      	beq.n	8005f68 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f0c:	4b85      	ldr	r3, [pc, #532]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	08db      	lsrs	r3, r3, #3
 8005f12:	f003 0303 	and.w	r3, r3, #3
 8005f16:	4a84      	ldr	r2, [pc, #528]	@ (8006128 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005f18:	fa22 f303 	lsr.w	r3, r2, r3
 8005f1c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	ee07 3a90 	vmov	s15, r3
 8005f24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	ee07 3a90 	vmov	s15, r3
 8005f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f36:	4b7b      	ldr	r3, [pc, #492]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f3e:	ee07 3a90 	vmov	s15, r3
 8005f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f46:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f4a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800612c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f62:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005f66:	e087      	b.n	8006078 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	ee07 3a90 	vmov	s15, r3
 8005f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f72:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006130 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f7a:	4b6a      	ldr	r3, [pc, #424]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f82:	ee07 3a90 	vmov	s15, r3
 8005f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f8e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800612c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005faa:	e065      	b.n	8006078 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	ee07 3a90 	vmov	s15, r3
 8005fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006134 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fbe:	4b59      	ldr	r3, [pc, #356]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fc6:	ee07 3a90 	vmov	s15, r3
 8005fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fce:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fd2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800612c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fee:	e043      	b.n	8006078 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	ee07 3a90 	vmov	s15, r3
 8005ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ffa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006002:	4b48      	ldr	r3, [pc, #288]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800600a:	ee07 3a90 	vmov	s15, r3
 800600e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006012:	ed97 6a03 	vldr	s12, [r7, #12]
 8006016:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800612c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800601a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800601e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006022:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800602a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800602e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006032:	e021      	b.n	8006078 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	ee07 3a90 	vmov	s15, r3
 800603a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800603e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006134 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006046:	4b37      	ldr	r3, [pc, #220]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800604a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800604e:	ee07 3a90 	vmov	s15, r3
 8006052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006056:	ed97 6a03 	vldr	s12, [r7, #12]
 800605a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800612c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800605e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006066:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800606a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800606e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006072:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006076:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006078:	4b2a      	ldr	r3, [pc, #168]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800607a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800607c:	0a5b      	lsrs	r3, r3, #9
 800607e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006082:	ee07 3a90 	vmov	s15, r3
 8006086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800608a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800608e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006092:	edd7 6a07 	vldr	s13, [r7, #28]
 8006096:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800609a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800609e:	ee17 2a90 	vmov	r2, s15
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80060a6:	4b1f      	ldr	r3, [pc, #124]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060aa:	0c1b      	lsrs	r3, r3, #16
 80060ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060b0:	ee07 3a90 	vmov	s15, r3
 80060b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80060c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060cc:	ee17 2a90 	vmov	r2, s15
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80060d4:	4b13      	ldr	r3, [pc, #76]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060d8:	0e1b      	lsrs	r3, r3, #24
 80060da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060de:	ee07 3a90 	vmov	s15, r3
 80060e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80060f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060fa:	ee17 2a90 	vmov	r2, s15
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006102:	e008      	b.n	8006116 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	609a      	str	r2, [r3, #8]
}
 8006116:	bf00      	nop
 8006118:	3724      	adds	r7, #36	@ 0x24
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	58024400 	.word	0x58024400
 8006128:	03d09000 	.word	0x03d09000
 800612c:	46000000 	.word	0x46000000
 8006130:	4c742400 	.word	0x4c742400
 8006134:	4a742400 	.word	0x4a742400
 8006138:	4bbebc20 	.word	0x4bbebc20

0800613c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006146:	2300      	movs	r3, #0
 8006148:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800614a:	4b53      	ldr	r3, [pc, #332]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 800614c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800614e:	f003 0303 	and.w	r3, r3, #3
 8006152:	2b03      	cmp	r3, #3
 8006154:	d101      	bne.n	800615a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e099      	b.n	800628e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800615a:	4b4f      	ldr	r3, [pc, #316]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a4e      	ldr	r2, [pc, #312]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006160:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006164:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006166:	f7fc fc7d 	bl	8002a64 <HAL_GetTick>
 800616a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800616c:	e008      	b.n	8006180 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800616e:	f7fc fc79 	bl	8002a64 <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	2b02      	cmp	r3, #2
 800617a:	d901      	bls.n	8006180 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e086      	b.n	800628e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006180:	4b45      	ldr	r3, [pc, #276]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1f0      	bne.n	800616e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800618c:	4b42      	ldr	r3, [pc, #264]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 800618e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006190:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	031b      	lsls	r3, r3, #12
 800619a:	493f      	ldr	r1, [pc, #252]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 800619c:	4313      	orrs	r3, r2
 800619e:	628b      	str	r3, [r1, #40]	@ 0x28
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	3b01      	subs	r3, #1
 80061a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	3b01      	subs	r3, #1
 80061b0:	025b      	lsls	r3, r3, #9
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	431a      	orrs	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	3b01      	subs	r3, #1
 80061bc:	041b      	lsls	r3, r3, #16
 80061be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80061c2:	431a      	orrs	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	3b01      	subs	r3, #1
 80061ca:	061b      	lsls	r3, r3, #24
 80061cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80061d0:	4931      	ldr	r1, [pc, #196]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80061d6:	4b30      	ldr	r3, [pc, #192]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 80061d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	492d      	ldr	r1, [pc, #180]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80061e8:	4b2b      	ldr	r3, [pc, #172]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 80061ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ec:	f023 0220 	bic.w	r2, r3, #32
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	4928      	ldr	r1, [pc, #160]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 80061f6:	4313      	orrs	r3, r2
 80061f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80061fa:	4b27      	ldr	r3, [pc, #156]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 80061fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061fe:	4a26      	ldr	r2, [pc, #152]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006200:	f023 0310 	bic.w	r3, r3, #16
 8006204:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006206:	4b24      	ldr	r3, [pc, #144]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006208:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800620a:	4b24      	ldr	r3, [pc, #144]	@ (800629c <RCCEx_PLL2_Config+0x160>)
 800620c:	4013      	ands	r3, r2
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	69d2      	ldr	r2, [r2, #28]
 8006212:	00d2      	lsls	r2, r2, #3
 8006214:	4920      	ldr	r1, [pc, #128]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006216:	4313      	orrs	r3, r2
 8006218:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800621a:	4b1f      	ldr	r3, [pc, #124]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 800621c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800621e:	4a1e      	ldr	r2, [pc, #120]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006220:	f043 0310 	orr.w	r3, r3, #16
 8006224:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d106      	bne.n	800623a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800622c:	4b1a      	ldr	r3, [pc, #104]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 800622e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006230:	4a19      	ldr	r2, [pc, #100]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006232:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006236:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006238:	e00f      	b.n	800625a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d106      	bne.n	800624e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006240:	4b15      	ldr	r3, [pc, #84]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006244:	4a14      	ldr	r2, [pc, #80]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006246:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800624a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800624c:	e005      	b.n	800625a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800624e:	4b12      	ldr	r3, [pc, #72]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006252:	4a11      	ldr	r2, [pc, #68]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006254:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006258:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800625a:	4b0f      	ldr	r3, [pc, #60]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a0e      	ldr	r2, [pc, #56]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006260:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006264:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006266:	f7fc fbfd 	bl	8002a64 <HAL_GetTick>
 800626a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800626c:	e008      	b.n	8006280 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800626e:	f7fc fbf9 	bl	8002a64 <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	2b02      	cmp	r3, #2
 800627a:	d901      	bls.n	8006280 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e006      	b.n	800628e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006280:	4b05      	ldr	r3, [pc, #20]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006288:	2b00      	cmp	r3, #0
 800628a:	d0f0      	beq.n	800626e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800628c:	7bfb      	ldrb	r3, [r7, #15]
}
 800628e:	4618      	mov	r0, r3
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	58024400 	.word	0x58024400
 800629c:	ffff0007 	.word	0xffff0007

080062a0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062aa:	2300      	movs	r3, #0
 80062ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80062ae:	4b53      	ldr	r3, [pc, #332]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 80062b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b2:	f003 0303 	and.w	r3, r3, #3
 80062b6:	2b03      	cmp	r3, #3
 80062b8:	d101      	bne.n	80062be <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e099      	b.n	80063f2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80062be:	4b4f      	ldr	r3, [pc, #316]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a4e      	ldr	r2, [pc, #312]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 80062c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062ca:	f7fc fbcb 	bl	8002a64 <HAL_GetTick>
 80062ce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80062d0:	e008      	b.n	80062e4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80062d2:	f7fc fbc7 	bl	8002a64 <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d901      	bls.n	80062e4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e086      	b.n	80063f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80062e4:	4b45      	ldr	r3, [pc, #276]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1f0      	bne.n	80062d2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80062f0:	4b42      	ldr	r3, [pc, #264]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 80062f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	051b      	lsls	r3, r3, #20
 80062fe:	493f      	ldr	r1, [pc, #252]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 8006300:	4313      	orrs	r3, r2
 8006302:	628b      	str	r3, [r1, #40]	@ 0x28
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	3b01      	subs	r3, #1
 800630a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	3b01      	subs	r3, #1
 8006314:	025b      	lsls	r3, r3, #9
 8006316:	b29b      	uxth	r3, r3
 8006318:	431a      	orrs	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	3b01      	subs	r3, #1
 8006320:	041b      	lsls	r3, r3, #16
 8006322:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006326:	431a      	orrs	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	3b01      	subs	r3, #1
 800632e:	061b      	lsls	r3, r3, #24
 8006330:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006334:	4931      	ldr	r1, [pc, #196]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 8006336:	4313      	orrs	r3, r2
 8006338:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800633a:	4b30      	ldr	r3, [pc, #192]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 800633c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800633e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	492d      	ldr	r1, [pc, #180]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 8006348:	4313      	orrs	r3, r2
 800634a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800634c:	4b2b      	ldr	r3, [pc, #172]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 800634e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006350:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	4928      	ldr	r1, [pc, #160]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 800635a:	4313      	orrs	r3, r2
 800635c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800635e:	4b27      	ldr	r3, [pc, #156]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 8006360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006362:	4a26      	ldr	r2, [pc, #152]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 8006364:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006368:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800636a:	4b24      	ldr	r3, [pc, #144]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 800636c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800636e:	4b24      	ldr	r3, [pc, #144]	@ (8006400 <RCCEx_PLL3_Config+0x160>)
 8006370:	4013      	ands	r3, r2
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	69d2      	ldr	r2, [r2, #28]
 8006376:	00d2      	lsls	r2, r2, #3
 8006378:	4920      	ldr	r1, [pc, #128]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 800637a:	4313      	orrs	r3, r2
 800637c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800637e:	4b1f      	ldr	r3, [pc, #124]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 8006380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006382:	4a1e      	ldr	r2, [pc, #120]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 8006384:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006388:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d106      	bne.n	800639e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006390:	4b1a      	ldr	r3, [pc, #104]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 8006392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006394:	4a19      	ldr	r2, [pc, #100]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 8006396:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800639a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800639c:	e00f      	b.n	80063be <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d106      	bne.n	80063b2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80063a4:	4b15      	ldr	r3, [pc, #84]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 80063a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a8:	4a14      	ldr	r2, [pc, #80]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 80063aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80063ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80063b0:	e005      	b.n	80063be <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80063b2:	4b12      	ldr	r3, [pc, #72]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 80063b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063b6:	4a11      	ldr	r2, [pc, #68]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 80063b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80063be:	4b0f      	ldr	r3, [pc, #60]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a0e      	ldr	r2, [pc, #56]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 80063c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063ca:	f7fc fb4b 	bl	8002a64 <HAL_GetTick>
 80063ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80063d0:	e008      	b.n	80063e4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80063d2:	f7fc fb47 	bl	8002a64 <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d901      	bls.n	80063e4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e006      	b.n	80063f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80063e4:	4b05      	ldr	r3, [pc, #20]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d0f0      	beq.n	80063d2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80063f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	58024400 	.word	0x58024400
 8006400:	ffff0007 	.word	0xffff0007

08006404 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d101      	bne.n	8006416 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e10f      	b.n	8006636 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a87      	ldr	r2, [pc, #540]	@ (8006640 <HAL_SPI_Init+0x23c>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d00f      	beq.n	8006446 <HAL_SPI_Init+0x42>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a86      	ldr	r2, [pc, #536]	@ (8006644 <HAL_SPI_Init+0x240>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d00a      	beq.n	8006446 <HAL_SPI_Init+0x42>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a84      	ldr	r2, [pc, #528]	@ (8006648 <HAL_SPI_Init+0x244>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d005      	beq.n	8006446 <HAL_SPI_Init+0x42>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	2b0f      	cmp	r3, #15
 8006440:	d901      	bls.n	8006446 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e0f7      	b.n	8006636 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f001 f910 	bl	800766c <SPI_GetPacketSize>
 800644c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a7b      	ldr	r2, [pc, #492]	@ (8006640 <HAL_SPI_Init+0x23c>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d00c      	beq.n	8006472 <HAL_SPI_Init+0x6e>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a79      	ldr	r2, [pc, #484]	@ (8006644 <HAL_SPI_Init+0x240>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d007      	beq.n	8006472 <HAL_SPI_Init+0x6e>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a78      	ldr	r2, [pc, #480]	@ (8006648 <HAL_SPI_Init+0x244>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d002      	beq.n	8006472 <HAL_SPI_Init+0x6e>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2b08      	cmp	r3, #8
 8006470:	d811      	bhi.n	8006496 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006476:	4a72      	ldr	r2, [pc, #456]	@ (8006640 <HAL_SPI_Init+0x23c>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d009      	beq.n	8006490 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a70      	ldr	r2, [pc, #448]	@ (8006644 <HAL_SPI_Init+0x240>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d004      	beq.n	8006490 <HAL_SPI_Init+0x8c>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a6f      	ldr	r2, [pc, #444]	@ (8006648 <HAL_SPI_Init+0x244>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d104      	bne.n	800649a <HAL_SPI_Init+0x96>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2b10      	cmp	r3, #16
 8006494:	d901      	bls.n	800649a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e0cd      	b.n	8006636 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d106      	bne.n	80064b4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f7fb fda2 	bl	8001ff8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2202      	movs	r2, #2
 80064b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f022 0201 	bic.w	r2, r2, #1
 80064ca:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80064d6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80064e0:	d119      	bne.n	8006516 <HAL_SPI_Init+0x112>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064ea:	d103      	bne.n	80064f4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d008      	beq.n	8006506 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d10c      	bne.n	8006516 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006500:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006504:	d107      	bne.n	8006516 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006514:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00f      	beq.n	8006542 <HAL_SPI_Init+0x13e>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	2b06      	cmp	r3, #6
 8006528:	d90b      	bls.n	8006542 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	430a      	orrs	r2, r1
 800653e:	601a      	str	r2, [r3, #0]
 8006540:	e007      	b.n	8006552 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006550:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	69da      	ldr	r2, [r3, #28]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800655a:	431a      	orrs	r2, r3
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	431a      	orrs	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006564:	ea42 0103 	orr.w	r1, r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	68da      	ldr	r2, [r3, #12]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	430a      	orrs	r2, r1
 8006572:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800657c:	431a      	orrs	r2, r3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006582:	431a      	orrs	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	431a      	orrs	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	431a      	orrs	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	695b      	ldr	r3, [r3, #20]
 8006594:	431a      	orrs	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a1b      	ldr	r3, [r3, #32]
 800659a:	431a      	orrs	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	431a      	orrs	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065a6:	431a      	orrs	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	431a      	orrs	r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065b2:	ea42 0103 	orr.w	r1, r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	430a      	orrs	r2, r1
 80065c0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d113      	bne.n	80065f2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065dc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80065f0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f022 0201 	bic.w	r2, r2, #1
 8006600:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00a      	beq.n	8006624 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	430a      	orrs	r2, r1
 8006622:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	40013000 	.word	0x40013000
 8006644:	40003800 	.word	0x40003800
 8006648:	40003c00 	.word	0x40003c00

0800664c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b088      	sub	sp, #32
 8006650:	af02      	add	r7, sp, #8
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	603b      	str	r3, [r7, #0]
 8006658:	4613      	mov	r3, r2
 800665a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	3320      	adds	r3, #32
 8006662:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006664:	f7fc f9fe 	bl	8002a64 <HAL_GetTick>
 8006668:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006670:	b2db      	uxtb	r3, r3
 8006672:	2b01      	cmp	r3, #1
 8006674:	d001      	beq.n	800667a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8006676:	2302      	movs	r3, #2
 8006678:	e1d1      	b.n	8006a1e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d002      	beq.n	8006686 <HAL_SPI_Transmit+0x3a>
 8006680:	88fb      	ldrh	r3, [r7, #6]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d101      	bne.n	800668a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e1c9      	b.n	8006a1e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006690:	2b01      	cmp	r3, #1
 8006692:	d101      	bne.n	8006698 <HAL_SPI_Transmit+0x4c>
 8006694:	2302      	movs	r3, #2
 8006696:	e1c2      	b.n	8006a1e <HAL_SPI_Transmit+0x3d2>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2203      	movs	r2, #3
 80066a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	88fa      	ldrh	r2, [r7, #6]
 80066ba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	88fa      	ldrh	r2, [r7, #6]
 80066c2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80066f0:	d108      	bne.n	8006704 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006700:	601a      	str	r2, [r3, #0]
 8006702:	e009      	b.n	8006718 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006716:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	685a      	ldr	r2, [r3, #4]
 800671e:	4b96      	ldr	r3, [pc, #600]	@ (8006978 <HAL_SPI_Transmit+0x32c>)
 8006720:	4013      	ands	r3, r2
 8006722:	88f9      	ldrh	r1, [r7, #6]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	6812      	ldr	r2, [r2, #0]
 8006728:	430b      	orrs	r3, r1
 800672a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f042 0201 	orr.w	r2, r2, #1
 800673a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006744:	d107      	bne.n	8006756 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006754:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	2b0f      	cmp	r3, #15
 800675c:	d947      	bls.n	80067ee <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800675e:	e03f      	b.n	80067e0 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	f003 0302 	and.w	r3, r3, #2
 800676a:	2b02      	cmp	r3, #2
 800676c:	d114      	bne.n	8006798 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	6812      	ldr	r2, [r2, #0]
 8006778:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800677e:	1d1a      	adds	r2, r3, #4
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800678a:	b29b      	uxth	r3, r3
 800678c:	3b01      	subs	r3, #1
 800678e:	b29a      	uxth	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006796:	e023      	b.n	80067e0 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006798:	f7fc f964 	bl	8002a64 <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	683a      	ldr	r2, [r7, #0]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d803      	bhi.n	80067b0 <HAL_SPI_Transmit+0x164>
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ae:	d102      	bne.n	80067b6 <HAL_SPI_Transmit+0x16a>
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d114      	bne.n	80067e0 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f000 fe8a 	bl	80074d0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e11e      	b.n	8006a1e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1b9      	bne.n	8006760 <HAL_SPI_Transmit+0x114>
 80067ec:	e0f1      	b.n	80069d2 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	2b07      	cmp	r3, #7
 80067f4:	f240 80e6 	bls.w	80069c4 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80067f8:	e05d      	b.n	80068b6 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	695b      	ldr	r3, [r3, #20]
 8006800:	f003 0302 	and.w	r3, r3, #2
 8006804:	2b02      	cmp	r3, #2
 8006806:	d132      	bne.n	800686e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800680e:	b29b      	uxth	r3, r3
 8006810:	2b01      	cmp	r3, #1
 8006812:	d918      	bls.n	8006846 <HAL_SPI_Transmit+0x1fa>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006818:	2b00      	cmp	r3, #0
 800681a:	d014      	beq.n	8006846 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	6812      	ldr	r2, [r2, #0]
 8006826:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800682c:	1d1a      	adds	r2, r3, #4
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006838:	b29b      	uxth	r3, r3
 800683a:	3b02      	subs	r3, #2
 800683c:	b29a      	uxth	r2, r3
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006844:	e037      	b.n	80068b6 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800684a:	881a      	ldrh	r2, [r3, #0]
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006854:	1c9a      	adds	r2, r3, #2
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006860:	b29b      	uxth	r3, r3
 8006862:	3b01      	subs	r3, #1
 8006864:	b29a      	uxth	r2, r3
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800686c:	e023      	b.n	80068b6 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800686e:	f7fc f8f9 	bl	8002a64 <HAL_GetTick>
 8006872:	4602      	mov	r2, r0
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	683a      	ldr	r2, [r7, #0]
 800687a:	429a      	cmp	r2, r3
 800687c:	d803      	bhi.n	8006886 <HAL_SPI_Transmit+0x23a>
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006884:	d102      	bne.n	800688c <HAL_SPI_Transmit+0x240>
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d114      	bne.n	80068b6 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f000 fe1f 	bl	80074d0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006898:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e0b3      	b.n	8006a1e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80068bc:	b29b      	uxth	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d19b      	bne.n	80067fa <HAL_SPI_Transmit+0x1ae>
 80068c2:	e086      	b.n	80069d2 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	f003 0302 	and.w	r3, r3, #2
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d154      	bne.n	800697c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80068d8:	b29b      	uxth	r3, r3
 80068da:	2b03      	cmp	r3, #3
 80068dc:	d918      	bls.n	8006910 <HAL_SPI_Transmit+0x2c4>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068e2:	2b40      	cmp	r3, #64	@ 0x40
 80068e4:	d914      	bls.n	8006910 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	6812      	ldr	r2, [r2, #0]
 80068f0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068f6:	1d1a      	adds	r2, r3, #4
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006902:	b29b      	uxth	r3, r3
 8006904:	3b04      	subs	r3, #4
 8006906:	b29a      	uxth	r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800690e:	e059      	b.n	80069c4 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006916:	b29b      	uxth	r3, r3
 8006918:	2b01      	cmp	r3, #1
 800691a:	d917      	bls.n	800694c <HAL_SPI_Transmit+0x300>
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006920:	2b00      	cmp	r3, #0
 8006922:	d013      	beq.n	800694c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006928:	881a      	ldrh	r2, [r3, #0]
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006932:	1c9a      	adds	r2, r3, #2
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800693e:	b29b      	uxth	r3, r3
 8006940:	3b02      	subs	r3, #2
 8006942:	b29a      	uxth	r2, r3
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800694a:	e03b      	b.n	80069c4 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	3320      	adds	r3, #32
 8006956:	7812      	ldrb	r2, [r2, #0]
 8006958:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800695e:	1c5a      	adds	r2, r3, #1
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800696a:	b29b      	uxth	r3, r3
 800696c:	3b01      	subs	r3, #1
 800696e:	b29a      	uxth	r2, r3
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006976:	e025      	b.n	80069c4 <HAL_SPI_Transmit+0x378>
 8006978:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800697c:	f7fc f872 	bl	8002a64 <HAL_GetTick>
 8006980:	4602      	mov	r2, r0
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	683a      	ldr	r2, [r7, #0]
 8006988:	429a      	cmp	r2, r3
 800698a:	d803      	bhi.n	8006994 <HAL_SPI_Transmit+0x348>
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006992:	d102      	bne.n	800699a <HAL_SPI_Transmit+0x34e>
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d114      	bne.n	80069c4 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f000 fd98 	bl	80074d0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e02c      	b.n	8006a1e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f47f af79 	bne.w	80068c4 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	9300      	str	r3, [sp, #0]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	2200      	movs	r2, #0
 80069da:	2108      	movs	r1, #8
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f000 fe17 	bl	8007610 <SPI_WaitOnFlagUntilTimeout>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d007      	beq.n	80069f8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069ee:	f043 0220 	orr.w	r2, r3, #32
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f000 fd69 	bl	80074d0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2201      	movs	r2, #1
 8006a02:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d001      	beq.n	8006a1c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e000      	b.n	8006a1e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
  }
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3718      	adds	r7, #24
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop

08006a28 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b08e      	sub	sp, #56	@ 0x38
 8006a2c:	af02      	add	r7, sp, #8
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
 8006a34:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	3320      	adds	r3, #32
 8006a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	3330      	adds	r3, #48	@ 0x30
 8006a44:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a4a:	095b      	lsrs	r3, r3, #5
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	3301      	adds	r3, #1
 8006a50:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a52:	f7fc f807 	bl	8002a64 <HAL_GetTick>
 8006a56:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8006a58:	887b      	ldrh	r3, [r7, #2]
 8006a5a:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8006a5c:	887b      	ldrh	r3, [r7, #2]
 8006a5e:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d001      	beq.n	8006a70 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	e310      	b.n	8007092 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d005      	beq.n	8006a82 <HAL_SPI_TransmitReceive+0x5a>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d002      	beq.n	8006a82 <HAL_SPI_TransmitReceive+0x5a>
 8006a7c:	887b      	ldrh	r3, [r7, #2]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d101      	bne.n	8006a86 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e305      	b.n	8007092 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d101      	bne.n	8006a94 <HAL_SPI_TransmitReceive+0x6c>
 8006a90:	2302      	movs	r3, #2
 8006a92:	e2fe      	b.n	8007092 <HAL_SPI_TransmitReceive+0x66a>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2205      	movs	r2, #5
 8006aa0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	887a      	ldrh	r2, [r7, #2]
 8006ab6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	887a      	ldrh	r2, [r7, #2]
 8006abe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	887a      	ldrh	r2, [r7, #2]
 8006acc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	887a      	ldrh	r2, [r7, #2]
 8006ad4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68da      	ldr	r2, [r3, #12]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8006af2:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a70      	ldr	r2, [pc, #448]	@ (8006cbc <HAL_SPI_TransmitReceive+0x294>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d009      	beq.n	8006b12 <HAL_SPI_TransmitReceive+0xea>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a6f      	ldr	r2, [pc, #444]	@ (8006cc0 <HAL_SPI_TransmitReceive+0x298>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d004      	beq.n	8006b12 <HAL_SPI_TransmitReceive+0xea>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a6d      	ldr	r2, [pc, #436]	@ (8006cc4 <HAL_SPI_TransmitReceive+0x29c>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d102      	bne.n	8006b18 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8006b12:	2310      	movs	r3, #16
 8006b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b16:	e001      	b.n	8006b1c <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8006b18:	2308      	movs	r3, #8
 8006b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	685a      	ldr	r2, [r3, #4]
 8006b22:	4b69      	ldr	r3, [pc, #420]	@ (8006cc8 <HAL_SPI_TransmitReceive+0x2a0>)
 8006b24:	4013      	ands	r3, r2
 8006b26:	8879      	ldrh	r1, [r7, #2]
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	6812      	ldr	r2, [r2, #0]
 8006b2c:	430b      	orrs	r3, r1
 8006b2e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f042 0201 	orr.w	r2, r2, #1
 8006b3e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b48:	d107      	bne.n	8006b5a <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	2b0f      	cmp	r3, #15
 8006b60:	f240 80a2 	bls.w	8006ca8 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8006b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b66:	089b      	lsrs	r3, r3, #2
 8006b68:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006b6a:	e094      	b.n	8006c96 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	f003 0302 	and.w	r3, r3, #2
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d120      	bne.n	8006bbc <HAL_SPI_TransmitReceive+0x194>
 8006b7a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d01d      	beq.n	8006bbc <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006b80:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006b82:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b86:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d217      	bcs.n	8006bbc <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	6812      	ldr	r2, [r2, #0]
 8006b96:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b9c:	1d1a      	adds	r2, r3, #4
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	3b01      	subs	r3, #1
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006bba:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8006bc4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d065      	beq.n	8006c96 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	695b      	ldr	r3, [r3, #20]
 8006bd0:	f003 0301 	and.w	r3, r3, #1
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d118      	bne.n	8006c0a <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006be0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006be2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006be8:	1d1a      	adds	r2, r3, #4
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c06:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006c08:	e045      	b.n	8006c96 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006c0a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006c0c:	8bfb      	ldrh	r3, [r7, #30]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d21d      	bcs.n	8006c4e <HAL_SPI_TransmitReceive+0x226>
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d018      	beq.n	8006c4e <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c24:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006c26:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c2c:	1d1a      	adds	r2, r3, #4
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006c4a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006c4c:	e023      	b.n	8006c96 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c4e:	f7fb ff09 	bl	8002a64 <HAL_GetTick>
 8006c52:	4602      	mov	r2, r0
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d803      	bhi.n	8006c66 <HAL_SPI_TransmitReceive+0x23e>
 8006c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c64:	d102      	bne.n	8006c6c <HAL_SPI_TransmitReceive+0x244>
 8006c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d114      	bne.n	8006c96 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f000 fc2f 	bl	80074d0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c78:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e1fd      	b.n	8007092 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006c96:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f47f af67 	bne.w	8006b6c <HAL_SPI_TransmitReceive+0x144>
 8006c9e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f47f af63 	bne.w	8006b6c <HAL_SPI_TransmitReceive+0x144>
 8006ca6:	e1ce      	b.n	8007046 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	2b07      	cmp	r3, #7
 8006cae:	f240 81c2 	bls.w	8007036 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8006cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cb4:	085b      	lsrs	r3, r3, #1
 8006cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006cb8:	e0c9      	b.n	8006e4e <HAL_SPI_TransmitReceive+0x426>
 8006cba:	bf00      	nop
 8006cbc:	40013000 	.word	0x40013000
 8006cc0:	40003800 	.word	0x40003800
 8006cc4:	40003c00 	.word	0x40003c00
 8006cc8:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	f003 0302 	and.w	r3, r3, #2
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d11f      	bne.n	8006d1a <HAL_SPI_TransmitReceive+0x2f2>
 8006cda:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d01c      	beq.n	8006d1a <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006ce0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006ce2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ce6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d216      	bcs.n	8006d1a <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cf0:	881a      	ldrh	r2, [r3, #0]
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf4:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cfa:	1c9a      	adds	r2, r3, #2
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006d18:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	695b      	ldr	r3, [r3, #20]
 8006d20:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8006d22:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f000 8092 	beq.w	8006e4e <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	695b      	ldr	r3, [r3, #20]
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d118      	bne.n	8006d6a <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d3c:	6a3a      	ldr	r2, [r7, #32]
 8006d3e:	8812      	ldrh	r2, [r2, #0]
 8006d40:	b292      	uxth	r2, r2
 8006d42:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d48:	1c9a      	adds	r2, r3, #2
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	3b01      	subs	r3, #1
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006d66:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006d68:	e071      	b.n	8006e4e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006d6a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006d6c:	8bfb      	ldrh	r3, [r7, #30]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d228      	bcs.n	8006dc4 <HAL_SPI_TransmitReceive+0x39c>
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d023      	beq.n	8006dc4 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d80:	6a3a      	ldr	r2, [r7, #32]
 8006d82:	8812      	ldrh	r2, [r2, #0]
 8006d84:	b292      	uxth	r2, r2
 8006d86:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d8c:	1c9a      	adds	r2, r3, #2
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d96:	6a3a      	ldr	r2, [r7, #32]
 8006d98:	8812      	ldrh	r2, [r2, #0]
 8006d9a:	b292      	uxth	r2, r2
 8006d9c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006da2:	1c9a      	adds	r2, r3, #2
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	3b02      	subs	r3, #2
 8006db2:	b29a      	uxth	r2, r3
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006dc0:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006dc2:	e044      	b.n	8006e4e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8006dc4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d11d      	bne.n	8006e06 <HAL_SPI_TransmitReceive+0x3de>
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d018      	beq.n	8006e06 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006dd8:	6a3a      	ldr	r2, [r7, #32]
 8006dda:	8812      	ldrh	r2, [r2, #0]
 8006ddc:	b292      	uxth	r2, r2
 8006dde:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006de4:	1c9a      	adds	r2, r3, #2
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	3b01      	subs	r3, #1
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006e02:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006e04:	e023      	b.n	8006e4e <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e06:	f7fb fe2d 	bl	8002a64 <HAL_GetTick>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d803      	bhi.n	8006e1e <HAL_SPI_TransmitReceive+0x3f6>
 8006e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e1c:	d102      	bne.n	8006e24 <HAL_SPI_TransmitReceive+0x3fc>
 8006e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d114      	bne.n	8006e4e <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f000 fb53 	bl	80074d0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e30:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e121      	b.n	8007092 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006e4e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f47f af3b 	bne.w	8006ccc <HAL_SPI_TransmitReceive+0x2a4>
 8006e56:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f47f af37 	bne.w	8006ccc <HAL_SPI_TransmitReceive+0x2a4>
 8006e5e:	e0f2      	b.n	8007046 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	695b      	ldr	r3, [r3, #20]
 8006e66:	f003 0302 	and.w	r3, r3, #2
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d121      	bne.n	8006eb2 <HAL_SPI_TransmitReceive+0x48a>
 8006e6e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d01e      	beq.n	8006eb2 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006e74:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006e76:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e7a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d218      	bcs.n	8006eb2 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	3320      	adds	r3, #32
 8006e8a:	7812      	ldrb	r2, [r2, #0]
 8006e8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e92:	1c5a      	adds	r2, r3, #1
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006eb0:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	695b      	ldr	r3, [r3, #20]
 8006eb8:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8006eba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	f000 80ba 	beq.w	8007036 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	695b      	ldr	r3, [r3, #20]
 8006ec8:	f003 0301 	and.w	r3, r3, #1
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d11b      	bne.n	8006f08 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006edc:	7812      	ldrb	r2, [r2, #0]
 8006ede:	b2d2      	uxtb	r2, r2
 8006ee0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ee6:	1c5a      	adds	r2, r3, #1
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006f04:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006f06:	e096      	b.n	8007036 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006f08:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006f0a:	8bfb      	ldrh	r3, [r7, #30]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d24a      	bcs.n	8006fa6 <HAL_SPI_TransmitReceive+0x57e>
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d045      	beq.n	8006fa6 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f26:	7812      	ldrb	r2, [r2, #0]
 8006f28:	b2d2      	uxtb	r2, r2
 8006f2a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f30:	1c5a      	adds	r2, r3, #1
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f42:	7812      	ldrb	r2, [r2, #0]
 8006f44:	b2d2      	uxtb	r2, r2
 8006f46:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f4c:	1c5a      	adds	r2, r3, #1
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f5e:	7812      	ldrb	r2, [r2, #0]
 8006f60:	b2d2      	uxtb	r2, r2
 8006f62:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f68:	1c5a      	adds	r2, r3, #1
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f7a:	7812      	ldrb	r2, [r2, #0]
 8006f7c:	b2d2      	uxtb	r2, r2
 8006f7e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f84:	1c5a      	adds	r2, r3, #1
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	3b04      	subs	r3, #4
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006fa2:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006fa4:	e047      	b.n	8007036 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8006fa6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006fa8:	2b03      	cmp	r3, #3
 8006faa:	d820      	bhi.n	8006fee <HAL_SPI_TransmitReceive+0x5c6>
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d01b      	beq.n	8006fee <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fc2:	7812      	ldrb	r2, [r2, #0]
 8006fc4:	b2d2      	uxtb	r2, r2
 8006fc6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fcc:	1c5a      	adds	r2, r3, #1
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006fea:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006fec:	e023      	b.n	8007036 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fee:	f7fb fd39 	bl	8002a64 <HAL_GetTick>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d803      	bhi.n	8007006 <HAL_SPI_TransmitReceive+0x5de>
 8006ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007004:	d102      	bne.n	800700c <HAL_SPI_TransmitReceive+0x5e4>
 8007006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007008:	2b00      	cmp	r3, #0
 800700a:	d114      	bne.n	8007036 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f000 fa5f 	bl	80074d0 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007018:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2201      	movs	r2, #1
 8007026:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e02d      	b.n	8007092 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007036:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007038:	2b00      	cmp	r3, #0
 800703a:	f47f af11 	bne.w	8006e60 <HAL_SPI_TransmitReceive+0x438>
 800703e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007040:	2b00      	cmp	r3, #0
 8007042:	f47f af0d 	bne.w	8006e60 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	9300      	str	r3, [sp, #0]
 800704a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800704c:	2200      	movs	r2, #0
 800704e:	2108      	movs	r1, #8
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f000 fadd 	bl	8007610 <SPI_WaitOnFlagUntilTimeout>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d007      	beq.n	800706c <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007062:	f043 0220 	orr.w	r2, r3, #32
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f000 fa2f 	bl	80074d0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2201      	movs	r2, #1
 8007076:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007088:	2b00      	cmp	r3, #0
 800708a:	d001      	beq.n	8007090 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	e000      	b.n	8007092 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8007090:	2300      	movs	r3, #0
  }
}
 8007092:	4618      	mov	r0, r3
 8007094:	3730      	adds	r7, #48	@ 0x30
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop

0800709c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b08a      	sub	sp, #40	@ 0x28
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80070b4:	6a3a      	ldr	r2, [r7, #32]
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	4013      	ands	r3, r2
 80070ba:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80070c4:	2300      	movs	r3, #0
 80070c6:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80070ce:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	3330      	adds	r3, #48	@ 0x30
 80070d6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d010      	beq.n	8007104 <HAL_SPI_IRQHandler+0x68>
 80070e2:	6a3b      	ldr	r3, [r7, #32]
 80070e4:	f003 0308 	and.w	r3, r3, #8
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00b      	beq.n	8007104 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	699a      	ldr	r2, [r3, #24]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80070fa:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 f9c3 	bl	8007488 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8007102:	e192      	b.n	800742a <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800710a:	2b00      	cmp	r3, #0
 800710c:	d113      	bne.n	8007136 <HAL_SPI_IRQHandler+0x9a>
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	f003 0320 	and.w	r3, r3, #32
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10e      	bne.n	8007136 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800711e:	2b00      	cmp	r3, #0
 8007120:	d009      	beq.n	8007136 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	4798      	blx	r3
    hspi->RxISR(hspi);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	4798      	blx	r3
    handled = 1UL;
 8007132:	2301      	movs	r3, #1
 8007134:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10f      	bne.n	8007160 <HAL_SPI_IRQHandler+0xc4>
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	f003 0301 	and.w	r3, r3, #1
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00a      	beq.n	8007160 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007150:	2b00      	cmp	r3, #0
 8007152:	d105      	bne.n	8007160 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	4798      	blx	r3
    handled = 1UL;
 800715c:	2301      	movs	r3, #1
 800715e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	f003 0320 	and.w	r3, r3, #32
 8007166:	2b00      	cmp	r3, #0
 8007168:	d10f      	bne.n	800718a <HAL_SPI_IRQHandler+0xee>
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	f003 0302 	and.w	r3, r3, #2
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00a      	beq.n	800718a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800717a:	2b00      	cmp	r3, #0
 800717c:	d105      	bne.n	800718a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	4798      	blx	r3
    handled = 1UL;
 8007186:	2301      	movs	r3, #1
 8007188:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800718a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718c:	2b00      	cmp	r3, #0
 800718e:	f040 8147 	bne.w	8007420 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	f003 0308 	and.w	r3, r3, #8
 8007198:	2b00      	cmp	r3, #0
 800719a:	f000 808b 	beq.w	80072b4 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	699a      	ldr	r2, [r3, #24]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f042 0208 	orr.w	r2, r2, #8
 80071ac:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	699a      	ldr	r2, [r3, #24]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f042 0210 	orr.w	r2, r2, #16
 80071bc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	699a      	ldr	r2, [r3, #24]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80071cc:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	691a      	ldr	r2, [r3, #16]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f022 0208 	bic.w	r2, r2, #8
 80071dc:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d13d      	bne.n	8007268 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80071ec:	e036      	b.n	800725c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	2b0f      	cmp	r3, #15
 80071f4:	d90b      	bls.n	800720e <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071fe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007200:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007206:	1d1a      	adds	r2, r3, #4
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	665a      	str	r2, [r3, #100]	@ 0x64
 800720c:	e01d      	b.n	800724a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	2b07      	cmp	r3, #7
 8007214:	d90b      	bls.n	800722e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	8812      	ldrh	r2, [r2, #0]
 800721e:	b292      	uxth	r2, r2
 8007220:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007226:	1c9a      	adds	r2, r3, #2
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	665a      	str	r2, [r3, #100]	@ 0x64
 800722c:	e00d      	b.n	800724a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800723a:	7812      	ldrb	r2, [r2, #0]
 800723c:	b2d2      	uxtb	r2, r2
 800723e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007244:	1c5a      	adds	r2, r3, #1
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007250:	b29b      	uxth	r3, r3
 8007252:	3b01      	subs	r3, #1
 8007254:	b29a      	uxth	r2, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007262:	b29b      	uxth	r3, r3
 8007264:	2b00      	cmp	r3, #0
 8007266:	d1c2      	bne.n	80071ee <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 f931 	bl	80074d0 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2201      	movs	r2, #1
 8007272:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800727c:	2b00      	cmp	r3, #0
 800727e:	d003      	beq.n	8007288 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 f8f7 	bl	8007474 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007286:	e0d0      	b.n	800742a <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007288:	7cfb      	ldrb	r3, [r7, #19]
 800728a:	2b05      	cmp	r3, #5
 800728c:	d103      	bne.n	8007296 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f8e6 	bl	8007460 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8007294:	e0c6      	b.n	8007424 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007296:	7cfb      	ldrb	r3, [r7, #19]
 8007298:	2b04      	cmp	r3, #4
 800729a:	d103      	bne.n	80072a4 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 f8d5 	bl	800744c <HAL_SPI_RxCpltCallback>
    return;
 80072a2:	e0bf      	b.n	8007424 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80072a4:	7cfb      	ldrb	r3, [r7, #19]
 80072a6:	2b03      	cmp	r3, #3
 80072a8:	f040 80bc 	bne.w	8007424 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 f8c3 	bl	8007438 <HAL_SPI_TxCpltCallback>
    return;
 80072b2:	e0b7      	b.n	8007424 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	f000 80b5 	beq.w	800742a <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00f      	beq.n	80072ea <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072d0:	f043 0204 	orr.w	r2, r3, #4
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	699a      	ldr	r2, [r3, #24]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80072e8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d00f      	beq.n	8007314 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072fa:	f043 0201 	orr.w	r2, r3, #1
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	699a      	ldr	r2, [r3, #24]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007312:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00f      	beq.n	800733e <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007324:	f043 0208 	orr.w	r2, r3, #8
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	699a      	ldr	r2, [r3, #24]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800733c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	f003 0320 	and.w	r3, r3, #32
 8007344:	2b00      	cmp	r3, #0
 8007346:	d00f      	beq.n	8007368 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800734e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	699a      	ldr	r2, [r3, #24]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f042 0220 	orr.w	r2, r2, #32
 8007366:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800736e:	2b00      	cmp	r3, #0
 8007370:	d05a      	beq.n	8007428 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f022 0201 	bic.w	r2, r2, #1
 8007380:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	6919      	ldr	r1, [r3, #16]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	4b28      	ldr	r3, [pc, #160]	@ (8007430 <HAL_SPI_IRQHandler+0x394>)
 800738e:	400b      	ands	r3, r1
 8007390:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007398:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800739c:	d138      	bne.n	8007410 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	689a      	ldr	r2, [r3, #8]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80073ac:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d013      	beq.n	80073de <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80073ba:	4a1e      	ldr	r2, [pc, #120]	@ (8007434 <HAL_SPI_IRQHandler+0x398>)
 80073bc:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7fb fd12 	bl	8002dec <HAL_DMA_Abort_IT>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d007      	beq.n	80073de <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073d4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d020      	beq.n	8007428 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80073ea:	4a12      	ldr	r2, [pc, #72]	@ (8007434 <HAL_SPI_IRQHandler+0x398>)
 80073ec:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80073f2:	4618      	mov	r0, r3
 80073f4:	f7fb fcfa 	bl	8002dec <HAL_DMA_Abort_IT>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d014      	beq.n	8007428 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007404:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800740e:	e00b      	b.n	8007428 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 f82b 	bl	8007474 <HAL_SPI_ErrorCallback>
    return;
 800741e:	e003      	b.n	8007428 <HAL_SPI_IRQHandler+0x38c>
    return;
 8007420:	bf00      	nop
 8007422:	e002      	b.n	800742a <HAL_SPI_IRQHandler+0x38e>
    return;
 8007424:	bf00      	nop
 8007426:	e000      	b.n	800742a <HAL_SPI_IRQHandler+0x38e>
    return;
 8007428:	bf00      	nop
  }
}
 800742a:	3728      	adds	r7, #40	@ 0x28
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}
 8007430:	fffffc94 	.word	0xfffffc94
 8007434:	0800749d 	.word	0x0800749d

08007438 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007440:	bf00      	nop
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007468:	bf00      	nop
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800747c:	bf00      	nop
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8007490:	bf00      	nop
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074a8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2201      	movs	r2, #1
 80074be:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f7ff ffd6 	bl	8007474 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80074c8:	bf00      	nop
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	695b      	ldr	r3, [r3, #20]
 80074de:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	699a      	ldr	r2, [r3, #24]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f042 0208 	orr.w	r2, r2, #8
 80074ee:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	699a      	ldr	r2, [r3, #24]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f042 0210 	orr.w	r2, r2, #16
 80074fe:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f022 0201 	bic.w	r2, r2, #1
 800750e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6919      	ldr	r1, [r3, #16]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	4b3c      	ldr	r3, [pc, #240]	@ (800760c <SPI_CloseTransfer+0x13c>)
 800751c:	400b      	ands	r3, r1
 800751e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	689a      	ldr	r2, [r3, #8]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800752e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007536:	b2db      	uxtb	r3, r3
 8007538:	2b04      	cmp	r3, #4
 800753a:	d014      	beq.n	8007566 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f003 0320 	and.w	r3, r3, #32
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00f      	beq.n	8007566 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800754c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	699a      	ldr	r2, [r3, #24]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f042 0220 	orr.w	r2, r2, #32
 8007564:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b03      	cmp	r3, #3
 8007570:	d014      	beq.n	800759c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007578:	2b00      	cmp	r3, #0
 800757a:	d00f      	beq.n	800759c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007582:	f043 0204 	orr.w	r2, r3, #4
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	699a      	ldr	r2, [r3, #24]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800759a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00f      	beq.n	80075c6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075ac:	f043 0201 	orr.w	r2, r3, #1
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	699a      	ldr	r2, [r3, #24]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075c4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00f      	beq.n	80075f0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075d6:	f043 0208 	orr.w	r2, r3, #8
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	699a      	ldr	r2, [r3, #24]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80075ee:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8007600:	bf00      	nop
 8007602:	3714      	adds	r7, #20
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr
 800760c:	fffffc90 	.word	0xfffffc90

08007610 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	603b      	str	r3, [r7, #0]
 800761c:	4613      	mov	r3, r2
 800761e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007620:	e010      	b.n	8007644 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007622:	f7fb fa1f 	bl	8002a64 <HAL_GetTick>
 8007626:	4602      	mov	r2, r0
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	1ad3      	subs	r3, r2, r3
 800762c:	683a      	ldr	r2, [r7, #0]
 800762e:	429a      	cmp	r2, r3
 8007630:	d803      	bhi.n	800763a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007638:	d102      	bne.n	8007640 <SPI_WaitOnFlagUntilTimeout+0x30>
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d101      	bne.n	8007644 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007640:	2303      	movs	r3, #3
 8007642:	e00f      	b.n	8007664 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	695a      	ldr	r2, [r3, #20]
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	4013      	ands	r3, r2
 800764e:	68ba      	ldr	r2, [r7, #8]
 8007650:	429a      	cmp	r2, r3
 8007652:	bf0c      	ite	eq
 8007654:	2301      	moveq	r3, #1
 8007656:	2300      	movne	r3, #0
 8007658:	b2db      	uxtb	r3, r3
 800765a:	461a      	mov	r2, r3
 800765c:	79fb      	ldrb	r3, [r7, #7]
 800765e:	429a      	cmp	r2, r3
 8007660:	d0df      	beq.n	8007622 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	3710      	adds	r7, #16
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007678:	095b      	lsrs	r3, r3, #5
 800767a:	3301      	adds	r3, #1
 800767c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	3301      	adds	r3, #1
 8007684:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	3307      	adds	r3, #7
 800768a:	08db      	lsrs	r3, r3, #3
 800768c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	fb02 f303 	mul.w	r3, r2, r3
}
 8007696:	4618      	mov	r0, r3
 8007698:	3714      	adds	r7, #20
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b082      	sub	sp, #8
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d101      	bne.n	80076b4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	e042      	b.n	800773a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d106      	bne.n	80076cc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 f83b 	bl	8007742 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2224      	movs	r2, #36	@ 0x24
 80076d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f022 0201 	bic.w	r2, r2, #1
 80076e2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d002      	beq.n	80076f2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 fe29 	bl	8008344 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 f8be 	bl	8007874 <UART_SetConfig>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d101      	bne.n	8007702 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	e01b      	b.n	800773a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	685a      	ldr	r2, [r3, #4]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007710:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	689a      	ldr	r2, [r3, #8]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007720:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f042 0201 	orr.w	r2, r2, #1
 8007730:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 fea8 	bl	8008488 <UART_CheckIdleState>
 8007738:	4603      	mov	r3, r0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3708      	adds	r7, #8
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8007742:	b480      	push	{r7}
 8007744:	b083      	sub	sp, #12
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800774a:	bf00      	nop
 800774c:	370c      	adds	r7, #12
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b08a      	sub	sp, #40	@ 0x28
 800775a:	af02      	add	r7, sp, #8
 800775c:	60f8      	str	r0, [r7, #12]
 800775e:	60b9      	str	r1, [r7, #8]
 8007760:	603b      	str	r3, [r7, #0]
 8007762:	4613      	mov	r3, r2
 8007764:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800776c:	2b20      	cmp	r3, #32
 800776e:	d17b      	bne.n	8007868 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d002      	beq.n	800777c <HAL_UART_Transmit+0x26>
 8007776:	88fb      	ldrh	r3, [r7, #6]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d101      	bne.n	8007780 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	e074      	b.n	800786a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2221      	movs	r2, #33	@ 0x21
 800778c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007790:	f7fb f968 	bl	8002a64 <HAL_GetTick>
 8007794:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	88fa      	ldrh	r2, [r7, #6]
 800779a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	88fa      	ldrh	r2, [r7, #6]
 80077a2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077ae:	d108      	bne.n	80077c2 <HAL_UART_Transmit+0x6c>
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	691b      	ldr	r3, [r3, #16]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d104      	bne.n	80077c2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80077b8:	2300      	movs	r3, #0
 80077ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	61bb      	str	r3, [r7, #24]
 80077c0:	e003      	b.n	80077ca <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077c6:	2300      	movs	r3, #0
 80077c8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80077ca:	e030      	b.n	800782e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	9300      	str	r3, [sp, #0]
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	2200      	movs	r2, #0
 80077d4:	2180      	movs	r1, #128	@ 0x80
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f000 ff00 	bl	80085dc <UART_WaitOnFlagUntilTimeout>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d005      	beq.n	80077ee <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2220      	movs	r2, #32
 80077e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80077ea:	2303      	movs	r3, #3
 80077ec:	e03d      	b.n	800786a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d10b      	bne.n	800780c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	881b      	ldrh	r3, [r3, #0]
 80077f8:	461a      	mov	r2, r3
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007802:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007804:	69bb      	ldr	r3, [r7, #24]
 8007806:	3302      	adds	r3, #2
 8007808:	61bb      	str	r3, [r7, #24]
 800780a:	e007      	b.n	800781c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	781a      	ldrb	r2, [r3, #0]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	3301      	adds	r3, #1
 800781a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007822:	b29b      	uxth	r3, r3
 8007824:	3b01      	subs	r3, #1
 8007826:	b29a      	uxth	r2, r3
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007834:	b29b      	uxth	r3, r3
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1c8      	bne.n	80077cc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	2200      	movs	r2, #0
 8007842:	2140      	movs	r1, #64	@ 0x40
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	f000 fec9 	bl	80085dc <UART_WaitOnFlagUntilTimeout>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d005      	beq.n	800785c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2220      	movs	r2, #32
 8007854:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007858:	2303      	movs	r3, #3
 800785a:	e006      	b.n	800786a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2220      	movs	r2, #32
 8007860:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007864:	2300      	movs	r3, #0
 8007866:	e000      	b.n	800786a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007868:	2302      	movs	r3, #2
  }
}
 800786a:	4618      	mov	r0, r3
 800786c:	3720      	adds	r7, #32
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
	...

08007874 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007878:	b092      	sub	sp, #72	@ 0x48
 800787a:	af00      	add	r7, sp, #0
 800787c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800787e:	2300      	movs	r3, #0
 8007880:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	689a      	ldr	r2, [r3, #8]
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	431a      	orrs	r2, r3
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	695b      	ldr	r3, [r3, #20]
 8007892:	431a      	orrs	r2, r3
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	69db      	ldr	r3, [r3, #28]
 8007898:	4313      	orrs	r3, r2
 800789a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	4bbe      	ldr	r3, [pc, #760]	@ (8007b9c <UART_SetConfig+0x328>)
 80078a4:	4013      	ands	r3, r2
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	6812      	ldr	r2, [r2, #0]
 80078aa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80078ac:	430b      	orrs	r3, r1
 80078ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	68da      	ldr	r2, [r3, #12]
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	430a      	orrs	r2, r1
 80078c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	699b      	ldr	r3, [r3, #24]
 80078ca:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4ab3      	ldr	r2, [pc, #716]	@ (8007ba0 <UART_SetConfig+0x32c>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d004      	beq.n	80078e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	6a1b      	ldr	r3, [r3, #32]
 80078da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078dc:	4313      	orrs	r3, r2
 80078de:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	689a      	ldr	r2, [r3, #8]
 80078e6:	4baf      	ldr	r3, [pc, #700]	@ (8007ba4 <UART_SetConfig+0x330>)
 80078e8:	4013      	ands	r3, r2
 80078ea:	697a      	ldr	r2, [r7, #20]
 80078ec:	6812      	ldr	r2, [r2, #0]
 80078ee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80078f0:	430b      	orrs	r3, r1
 80078f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078fa:	f023 010f 	bic.w	r1, r3, #15
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	430a      	orrs	r2, r1
 8007908:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4aa6      	ldr	r2, [pc, #664]	@ (8007ba8 <UART_SetConfig+0x334>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d177      	bne.n	8007a04 <UART_SetConfig+0x190>
 8007914:	4ba5      	ldr	r3, [pc, #660]	@ (8007bac <UART_SetConfig+0x338>)
 8007916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007918:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800791c:	2b28      	cmp	r3, #40	@ 0x28
 800791e:	d86d      	bhi.n	80079fc <UART_SetConfig+0x188>
 8007920:	a201      	add	r2, pc, #4	@ (adr r2, 8007928 <UART_SetConfig+0xb4>)
 8007922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007926:	bf00      	nop
 8007928:	080079cd 	.word	0x080079cd
 800792c:	080079fd 	.word	0x080079fd
 8007930:	080079fd 	.word	0x080079fd
 8007934:	080079fd 	.word	0x080079fd
 8007938:	080079fd 	.word	0x080079fd
 800793c:	080079fd 	.word	0x080079fd
 8007940:	080079fd 	.word	0x080079fd
 8007944:	080079fd 	.word	0x080079fd
 8007948:	080079d5 	.word	0x080079d5
 800794c:	080079fd 	.word	0x080079fd
 8007950:	080079fd 	.word	0x080079fd
 8007954:	080079fd 	.word	0x080079fd
 8007958:	080079fd 	.word	0x080079fd
 800795c:	080079fd 	.word	0x080079fd
 8007960:	080079fd 	.word	0x080079fd
 8007964:	080079fd 	.word	0x080079fd
 8007968:	080079dd 	.word	0x080079dd
 800796c:	080079fd 	.word	0x080079fd
 8007970:	080079fd 	.word	0x080079fd
 8007974:	080079fd 	.word	0x080079fd
 8007978:	080079fd 	.word	0x080079fd
 800797c:	080079fd 	.word	0x080079fd
 8007980:	080079fd 	.word	0x080079fd
 8007984:	080079fd 	.word	0x080079fd
 8007988:	080079e5 	.word	0x080079e5
 800798c:	080079fd 	.word	0x080079fd
 8007990:	080079fd 	.word	0x080079fd
 8007994:	080079fd 	.word	0x080079fd
 8007998:	080079fd 	.word	0x080079fd
 800799c:	080079fd 	.word	0x080079fd
 80079a0:	080079fd 	.word	0x080079fd
 80079a4:	080079fd 	.word	0x080079fd
 80079a8:	080079ed 	.word	0x080079ed
 80079ac:	080079fd 	.word	0x080079fd
 80079b0:	080079fd 	.word	0x080079fd
 80079b4:	080079fd 	.word	0x080079fd
 80079b8:	080079fd 	.word	0x080079fd
 80079bc:	080079fd 	.word	0x080079fd
 80079c0:	080079fd 	.word	0x080079fd
 80079c4:	080079fd 	.word	0x080079fd
 80079c8:	080079f5 	.word	0x080079f5
 80079cc:	2301      	movs	r3, #1
 80079ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079d2:	e222      	b.n	8007e1a <UART_SetConfig+0x5a6>
 80079d4:	2304      	movs	r3, #4
 80079d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079da:	e21e      	b.n	8007e1a <UART_SetConfig+0x5a6>
 80079dc:	2308      	movs	r3, #8
 80079de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079e2:	e21a      	b.n	8007e1a <UART_SetConfig+0x5a6>
 80079e4:	2310      	movs	r3, #16
 80079e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ea:	e216      	b.n	8007e1a <UART_SetConfig+0x5a6>
 80079ec:	2320      	movs	r3, #32
 80079ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079f2:	e212      	b.n	8007e1a <UART_SetConfig+0x5a6>
 80079f4:	2340      	movs	r3, #64	@ 0x40
 80079f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079fa:	e20e      	b.n	8007e1a <UART_SetConfig+0x5a6>
 80079fc:	2380      	movs	r3, #128	@ 0x80
 80079fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a02:	e20a      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a69      	ldr	r2, [pc, #420]	@ (8007bb0 <UART_SetConfig+0x33c>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d130      	bne.n	8007a70 <UART_SetConfig+0x1fc>
 8007a0e:	4b67      	ldr	r3, [pc, #412]	@ (8007bac <UART_SetConfig+0x338>)
 8007a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a12:	f003 0307 	and.w	r3, r3, #7
 8007a16:	2b05      	cmp	r3, #5
 8007a18:	d826      	bhi.n	8007a68 <UART_SetConfig+0x1f4>
 8007a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a20 <UART_SetConfig+0x1ac>)
 8007a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a20:	08007a39 	.word	0x08007a39
 8007a24:	08007a41 	.word	0x08007a41
 8007a28:	08007a49 	.word	0x08007a49
 8007a2c:	08007a51 	.word	0x08007a51
 8007a30:	08007a59 	.word	0x08007a59
 8007a34:	08007a61 	.word	0x08007a61
 8007a38:	2300      	movs	r3, #0
 8007a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a3e:	e1ec      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007a40:	2304      	movs	r3, #4
 8007a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a46:	e1e8      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007a48:	2308      	movs	r3, #8
 8007a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a4e:	e1e4      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007a50:	2310      	movs	r3, #16
 8007a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a56:	e1e0      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007a58:	2320      	movs	r3, #32
 8007a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a5e:	e1dc      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007a60:	2340      	movs	r3, #64	@ 0x40
 8007a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a66:	e1d8      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007a68:	2380      	movs	r3, #128	@ 0x80
 8007a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a6e:	e1d4      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a4f      	ldr	r2, [pc, #316]	@ (8007bb4 <UART_SetConfig+0x340>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d130      	bne.n	8007adc <UART_SetConfig+0x268>
 8007a7a:	4b4c      	ldr	r3, [pc, #304]	@ (8007bac <UART_SetConfig+0x338>)
 8007a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a7e:	f003 0307 	and.w	r3, r3, #7
 8007a82:	2b05      	cmp	r3, #5
 8007a84:	d826      	bhi.n	8007ad4 <UART_SetConfig+0x260>
 8007a86:	a201      	add	r2, pc, #4	@ (adr r2, 8007a8c <UART_SetConfig+0x218>)
 8007a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8c:	08007aa5 	.word	0x08007aa5
 8007a90:	08007aad 	.word	0x08007aad
 8007a94:	08007ab5 	.word	0x08007ab5
 8007a98:	08007abd 	.word	0x08007abd
 8007a9c:	08007ac5 	.word	0x08007ac5
 8007aa0:	08007acd 	.word	0x08007acd
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aaa:	e1b6      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007aac:	2304      	movs	r3, #4
 8007aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ab2:	e1b2      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007ab4:	2308      	movs	r3, #8
 8007ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aba:	e1ae      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007abc:	2310      	movs	r3, #16
 8007abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ac2:	e1aa      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007ac4:	2320      	movs	r3, #32
 8007ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aca:	e1a6      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007acc:	2340      	movs	r3, #64	@ 0x40
 8007ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ad2:	e1a2      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007ad4:	2380      	movs	r3, #128	@ 0x80
 8007ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ada:	e19e      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a35      	ldr	r2, [pc, #212]	@ (8007bb8 <UART_SetConfig+0x344>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d130      	bne.n	8007b48 <UART_SetConfig+0x2d4>
 8007ae6:	4b31      	ldr	r3, [pc, #196]	@ (8007bac <UART_SetConfig+0x338>)
 8007ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aea:	f003 0307 	and.w	r3, r3, #7
 8007aee:	2b05      	cmp	r3, #5
 8007af0:	d826      	bhi.n	8007b40 <UART_SetConfig+0x2cc>
 8007af2:	a201      	add	r2, pc, #4	@ (adr r2, 8007af8 <UART_SetConfig+0x284>)
 8007af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af8:	08007b11 	.word	0x08007b11
 8007afc:	08007b19 	.word	0x08007b19
 8007b00:	08007b21 	.word	0x08007b21
 8007b04:	08007b29 	.word	0x08007b29
 8007b08:	08007b31 	.word	0x08007b31
 8007b0c:	08007b39 	.word	0x08007b39
 8007b10:	2300      	movs	r3, #0
 8007b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b16:	e180      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007b18:	2304      	movs	r3, #4
 8007b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b1e:	e17c      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007b20:	2308      	movs	r3, #8
 8007b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b26:	e178      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007b28:	2310      	movs	r3, #16
 8007b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b2e:	e174      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007b30:	2320      	movs	r3, #32
 8007b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b36:	e170      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007b38:	2340      	movs	r3, #64	@ 0x40
 8007b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b3e:	e16c      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007b40:	2380      	movs	r3, #128	@ 0x80
 8007b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b46:	e168      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a1b      	ldr	r2, [pc, #108]	@ (8007bbc <UART_SetConfig+0x348>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d142      	bne.n	8007bd8 <UART_SetConfig+0x364>
 8007b52:	4b16      	ldr	r3, [pc, #88]	@ (8007bac <UART_SetConfig+0x338>)
 8007b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b56:	f003 0307 	and.w	r3, r3, #7
 8007b5a:	2b05      	cmp	r3, #5
 8007b5c:	d838      	bhi.n	8007bd0 <UART_SetConfig+0x35c>
 8007b5e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b64 <UART_SetConfig+0x2f0>)
 8007b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b64:	08007b7d 	.word	0x08007b7d
 8007b68:	08007b85 	.word	0x08007b85
 8007b6c:	08007b8d 	.word	0x08007b8d
 8007b70:	08007b95 	.word	0x08007b95
 8007b74:	08007bc1 	.word	0x08007bc1
 8007b78:	08007bc9 	.word	0x08007bc9
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b82:	e14a      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007b84:	2304      	movs	r3, #4
 8007b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b8a:	e146      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007b8c:	2308      	movs	r3, #8
 8007b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b92:	e142      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007b94:	2310      	movs	r3, #16
 8007b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b9a:	e13e      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007b9c:	cfff69f3 	.word	0xcfff69f3
 8007ba0:	58000c00 	.word	0x58000c00
 8007ba4:	11fff4ff 	.word	0x11fff4ff
 8007ba8:	40011000 	.word	0x40011000
 8007bac:	58024400 	.word	0x58024400
 8007bb0:	40004400 	.word	0x40004400
 8007bb4:	40004800 	.word	0x40004800
 8007bb8:	40004c00 	.word	0x40004c00
 8007bbc:	40005000 	.word	0x40005000
 8007bc0:	2320      	movs	r3, #32
 8007bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bc6:	e128      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007bc8:	2340      	movs	r3, #64	@ 0x40
 8007bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bce:	e124      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007bd0:	2380      	movs	r3, #128	@ 0x80
 8007bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bd6:	e120      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4acb      	ldr	r2, [pc, #812]	@ (8007f0c <UART_SetConfig+0x698>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d176      	bne.n	8007cd0 <UART_SetConfig+0x45c>
 8007be2:	4bcb      	ldr	r3, [pc, #812]	@ (8007f10 <UART_SetConfig+0x69c>)
 8007be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007be6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007bea:	2b28      	cmp	r3, #40	@ 0x28
 8007bec:	d86c      	bhi.n	8007cc8 <UART_SetConfig+0x454>
 8007bee:	a201      	add	r2, pc, #4	@ (adr r2, 8007bf4 <UART_SetConfig+0x380>)
 8007bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf4:	08007c99 	.word	0x08007c99
 8007bf8:	08007cc9 	.word	0x08007cc9
 8007bfc:	08007cc9 	.word	0x08007cc9
 8007c00:	08007cc9 	.word	0x08007cc9
 8007c04:	08007cc9 	.word	0x08007cc9
 8007c08:	08007cc9 	.word	0x08007cc9
 8007c0c:	08007cc9 	.word	0x08007cc9
 8007c10:	08007cc9 	.word	0x08007cc9
 8007c14:	08007ca1 	.word	0x08007ca1
 8007c18:	08007cc9 	.word	0x08007cc9
 8007c1c:	08007cc9 	.word	0x08007cc9
 8007c20:	08007cc9 	.word	0x08007cc9
 8007c24:	08007cc9 	.word	0x08007cc9
 8007c28:	08007cc9 	.word	0x08007cc9
 8007c2c:	08007cc9 	.word	0x08007cc9
 8007c30:	08007cc9 	.word	0x08007cc9
 8007c34:	08007ca9 	.word	0x08007ca9
 8007c38:	08007cc9 	.word	0x08007cc9
 8007c3c:	08007cc9 	.word	0x08007cc9
 8007c40:	08007cc9 	.word	0x08007cc9
 8007c44:	08007cc9 	.word	0x08007cc9
 8007c48:	08007cc9 	.word	0x08007cc9
 8007c4c:	08007cc9 	.word	0x08007cc9
 8007c50:	08007cc9 	.word	0x08007cc9
 8007c54:	08007cb1 	.word	0x08007cb1
 8007c58:	08007cc9 	.word	0x08007cc9
 8007c5c:	08007cc9 	.word	0x08007cc9
 8007c60:	08007cc9 	.word	0x08007cc9
 8007c64:	08007cc9 	.word	0x08007cc9
 8007c68:	08007cc9 	.word	0x08007cc9
 8007c6c:	08007cc9 	.word	0x08007cc9
 8007c70:	08007cc9 	.word	0x08007cc9
 8007c74:	08007cb9 	.word	0x08007cb9
 8007c78:	08007cc9 	.word	0x08007cc9
 8007c7c:	08007cc9 	.word	0x08007cc9
 8007c80:	08007cc9 	.word	0x08007cc9
 8007c84:	08007cc9 	.word	0x08007cc9
 8007c88:	08007cc9 	.word	0x08007cc9
 8007c8c:	08007cc9 	.word	0x08007cc9
 8007c90:	08007cc9 	.word	0x08007cc9
 8007c94:	08007cc1 	.word	0x08007cc1
 8007c98:	2301      	movs	r3, #1
 8007c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c9e:	e0bc      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007ca0:	2304      	movs	r3, #4
 8007ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ca6:	e0b8      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007ca8:	2308      	movs	r3, #8
 8007caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cae:	e0b4      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007cb0:	2310      	movs	r3, #16
 8007cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cb6:	e0b0      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007cb8:	2320      	movs	r3, #32
 8007cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cbe:	e0ac      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007cc0:	2340      	movs	r3, #64	@ 0x40
 8007cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cc6:	e0a8      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007cc8:	2380      	movs	r3, #128	@ 0x80
 8007cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cce:	e0a4      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a8f      	ldr	r2, [pc, #572]	@ (8007f14 <UART_SetConfig+0x6a0>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d130      	bne.n	8007d3c <UART_SetConfig+0x4c8>
 8007cda:	4b8d      	ldr	r3, [pc, #564]	@ (8007f10 <UART_SetConfig+0x69c>)
 8007cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cde:	f003 0307 	and.w	r3, r3, #7
 8007ce2:	2b05      	cmp	r3, #5
 8007ce4:	d826      	bhi.n	8007d34 <UART_SetConfig+0x4c0>
 8007ce6:	a201      	add	r2, pc, #4	@ (adr r2, 8007cec <UART_SetConfig+0x478>)
 8007ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cec:	08007d05 	.word	0x08007d05
 8007cf0:	08007d0d 	.word	0x08007d0d
 8007cf4:	08007d15 	.word	0x08007d15
 8007cf8:	08007d1d 	.word	0x08007d1d
 8007cfc:	08007d25 	.word	0x08007d25
 8007d00:	08007d2d 	.word	0x08007d2d
 8007d04:	2300      	movs	r3, #0
 8007d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d0a:	e086      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007d0c:	2304      	movs	r3, #4
 8007d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d12:	e082      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007d14:	2308      	movs	r3, #8
 8007d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d1a:	e07e      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007d1c:	2310      	movs	r3, #16
 8007d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d22:	e07a      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007d24:	2320      	movs	r3, #32
 8007d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d2a:	e076      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007d2c:	2340      	movs	r3, #64	@ 0x40
 8007d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d32:	e072      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007d34:	2380      	movs	r3, #128	@ 0x80
 8007d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d3a:	e06e      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a75      	ldr	r2, [pc, #468]	@ (8007f18 <UART_SetConfig+0x6a4>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d130      	bne.n	8007da8 <UART_SetConfig+0x534>
 8007d46:	4b72      	ldr	r3, [pc, #456]	@ (8007f10 <UART_SetConfig+0x69c>)
 8007d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d4a:	f003 0307 	and.w	r3, r3, #7
 8007d4e:	2b05      	cmp	r3, #5
 8007d50:	d826      	bhi.n	8007da0 <UART_SetConfig+0x52c>
 8007d52:	a201      	add	r2, pc, #4	@ (adr r2, 8007d58 <UART_SetConfig+0x4e4>)
 8007d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d58:	08007d71 	.word	0x08007d71
 8007d5c:	08007d79 	.word	0x08007d79
 8007d60:	08007d81 	.word	0x08007d81
 8007d64:	08007d89 	.word	0x08007d89
 8007d68:	08007d91 	.word	0x08007d91
 8007d6c:	08007d99 	.word	0x08007d99
 8007d70:	2300      	movs	r3, #0
 8007d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d76:	e050      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007d78:	2304      	movs	r3, #4
 8007d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d7e:	e04c      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007d80:	2308      	movs	r3, #8
 8007d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d86:	e048      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007d88:	2310      	movs	r3, #16
 8007d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d8e:	e044      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007d90:	2320      	movs	r3, #32
 8007d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d96:	e040      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007d98:	2340      	movs	r3, #64	@ 0x40
 8007d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d9e:	e03c      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007da0:	2380      	movs	r3, #128	@ 0x80
 8007da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007da6:	e038      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a5b      	ldr	r2, [pc, #364]	@ (8007f1c <UART_SetConfig+0x6a8>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d130      	bne.n	8007e14 <UART_SetConfig+0x5a0>
 8007db2:	4b57      	ldr	r3, [pc, #348]	@ (8007f10 <UART_SetConfig+0x69c>)
 8007db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007db6:	f003 0307 	and.w	r3, r3, #7
 8007dba:	2b05      	cmp	r3, #5
 8007dbc:	d826      	bhi.n	8007e0c <UART_SetConfig+0x598>
 8007dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8007dc4 <UART_SetConfig+0x550>)
 8007dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc4:	08007ddd 	.word	0x08007ddd
 8007dc8:	08007de5 	.word	0x08007de5
 8007dcc:	08007ded 	.word	0x08007ded
 8007dd0:	08007df5 	.word	0x08007df5
 8007dd4:	08007dfd 	.word	0x08007dfd
 8007dd8:	08007e05 	.word	0x08007e05
 8007ddc:	2302      	movs	r3, #2
 8007dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007de2:	e01a      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007de4:	2304      	movs	r3, #4
 8007de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dea:	e016      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007dec:	2308      	movs	r3, #8
 8007dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007df2:	e012      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007df4:	2310      	movs	r3, #16
 8007df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dfa:	e00e      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007dfc:	2320      	movs	r3, #32
 8007dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e02:	e00a      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007e04:	2340      	movs	r3, #64	@ 0x40
 8007e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e0a:	e006      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007e0c:	2380      	movs	r3, #128	@ 0x80
 8007e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e12:	e002      	b.n	8007e1a <UART_SetConfig+0x5a6>
 8007e14:	2380      	movs	r3, #128	@ 0x80
 8007e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a3f      	ldr	r2, [pc, #252]	@ (8007f1c <UART_SetConfig+0x6a8>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	f040 80f8 	bne.w	8008016 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e26:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007e2a:	2b20      	cmp	r3, #32
 8007e2c:	dc46      	bgt.n	8007ebc <UART_SetConfig+0x648>
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	f2c0 8082 	blt.w	8007f38 <UART_SetConfig+0x6c4>
 8007e34:	3b02      	subs	r3, #2
 8007e36:	2b1e      	cmp	r3, #30
 8007e38:	d87e      	bhi.n	8007f38 <UART_SetConfig+0x6c4>
 8007e3a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e40 <UART_SetConfig+0x5cc>)
 8007e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e40:	08007ec3 	.word	0x08007ec3
 8007e44:	08007f39 	.word	0x08007f39
 8007e48:	08007ecb 	.word	0x08007ecb
 8007e4c:	08007f39 	.word	0x08007f39
 8007e50:	08007f39 	.word	0x08007f39
 8007e54:	08007f39 	.word	0x08007f39
 8007e58:	08007edb 	.word	0x08007edb
 8007e5c:	08007f39 	.word	0x08007f39
 8007e60:	08007f39 	.word	0x08007f39
 8007e64:	08007f39 	.word	0x08007f39
 8007e68:	08007f39 	.word	0x08007f39
 8007e6c:	08007f39 	.word	0x08007f39
 8007e70:	08007f39 	.word	0x08007f39
 8007e74:	08007f39 	.word	0x08007f39
 8007e78:	08007eeb 	.word	0x08007eeb
 8007e7c:	08007f39 	.word	0x08007f39
 8007e80:	08007f39 	.word	0x08007f39
 8007e84:	08007f39 	.word	0x08007f39
 8007e88:	08007f39 	.word	0x08007f39
 8007e8c:	08007f39 	.word	0x08007f39
 8007e90:	08007f39 	.word	0x08007f39
 8007e94:	08007f39 	.word	0x08007f39
 8007e98:	08007f39 	.word	0x08007f39
 8007e9c:	08007f39 	.word	0x08007f39
 8007ea0:	08007f39 	.word	0x08007f39
 8007ea4:	08007f39 	.word	0x08007f39
 8007ea8:	08007f39 	.word	0x08007f39
 8007eac:	08007f39 	.word	0x08007f39
 8007eb0:	08007f39 	.word	0x08007f39
 8007eb4:	08007f39 	.word	0x08007f39
 8007eb8:	08007f2b 	.word	0x08007f2b
 8007ebc:	2b40      	cmp	r3, #64	@ 0x40
 8007ebe:	d037      	beq.n	8007f30 <UART_SetConfig+0x6bc>
 8007ec0:	e03a      	b.n	8007f38 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007ec2:	f7fd fe7d 	bl	8005bc0 <HAL_RCCEx_GetD3PCLK1Freq>
 8007ec6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ec8:	e03c      	b.n	8007f44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007eca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7fd fe8c 	bl	8005bec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ed8:	e034      	b.n	8007f44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007eda:	f107 0318 	add.w	r3, r7, #24
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fd ffd8 	bl	8005e94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ee8:	e02c      	b.n	8007f44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007eea:	4b09      	ldr	r3, [pc, #36]	@ (8007f10 <UART_SetConfig+0x69c>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f003 0320 	and.w	r3, r3, #32
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d016      	beq.n	8007f24 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007ef6:	4b06      	ldr	r3, [pc, #24]	@ (8007f10 <UART_SetConfig+0x69c>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	08db      	lsrs	r3, r3, #3
 8007efc:	f003 0303 	and.w	r3, r3, #3
 8007f00:	4a07      	ldr	r2, [pc, #28]	@ (8007f20 <UART_SetConfig+0x6ac>)
 8007f02:	fa22 f303 	lsr.w	r3, r2, r3
 8007f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007f08:	e01c      	b.n	8007f44 <UART_SetConfig+0x6d0>
 8007f0a:	bf00      	nop
 8007f0c:	40011400 	.word	0x40011400
 8007f10:	58024400 	.word	0x58024400
 8007f14:	40007800 	.word	0x40007800
 8007f18:	40007c00 	.word	0x40007c00
 8007f1c:	58000c00 	.word	0x58000c00
 8007f20:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007f24:	4b9d      	ldr	r3, [pc, #628]	@ (800819c <UART_SetConfig+0x928>)
 8007f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f28:	e00c      	b.n	8007f44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007f2a:	4b9d      	ldr	r3, [pc, #628]	@ (80081a0 <UART_SetConfig+0x92c>)
 8007f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f2e:	e009      	b.n	8007f44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f36:	e005      	b.n	8007f44 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007f42:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007f44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f000 81de 	beq.w	8008308 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f50:	4a94      	ldr	r2, [pc, #592]	@ (80081a4 <UART_SetConfig+0x930>)
 8007f52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f56:	461a      	mov	r2, r3
 8007f58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f5e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	685a      	ldr	r2, [r3, #4]
 8007f64:	4613      	mov	r3, r2
 8007f66:	005b      	lsls	r3, r3, #1
 8007f68:	4413      	add	r3, r2
 8007f6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d305      	bcc.n	8007f7c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d903      	bls.n	8007f84 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007f82:	e1c1      	b.n	8008308 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f86:	2200      	movs	r2, #0
 8007f88:	60bb      	str	r3, [r7, #8]
 8007f8a:	60fa      	str	r2, [r7, #12]
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f90:	4a84      	ldr	r2, [pc, #528]	@ (80081a4 <UART_SetConfig+0x930>)
 8007f92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	2200      	movs	r2, #0
 8007f9a:	603b      	str	r3, [r7, #0]
 8007f9c:	607a      	str	r2, [r7, #4]
 8007f9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fa2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007fa6:	f7f8 f9eb 	bl	8000380 <__aeabi_uldivmod>
 8007faa:	4602      	mov	r2, r0
 8007fac:	460b      	mov	r3, r1
 8007fae:	4610      	mov	r0, r2
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	f04f 0200 	mov.w	r2, #0
 8007fb6:	f04f 0300 	mov.w	r3, #0
 8007fba:	020b      	lsls	r3, r1, #8
 8007fbc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007fc0:	0202      	lsls	r2, r0, #8
 8007fc2:	6979      	ldr	r1, [r7, #20]
 8007fc4:	6849      	ldr	r1, [r1, #4]
 8007fc6:	0849      	lsrs	r1, r1, #1
 8007fc8:	2000      	movs	r0, #0
 8007fca:	460c      	mov	r4, r1
 8007fcc:	4605      	mov	r5, r0
 8007fce:	eb12 0804 	adds.w	r8, r2, r4
 8007fd2:	eb43 0905 	adc.w	r9, r3, r5
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	469a      	mov	sl, r3
 8007fde:	4693      	mov	fp, r2
 8007fe0:	4652      	mov	r2, sl
 8007fe2:	465b      	mov	r3, fp
 8007fe4:	4640      	mov	r0, r8
 8007fe6:	4649      	mov	r1, r9
 8007fe8:	f7f8 f9ca 	bl	8000380 <__aeabi_uldivmod>
 8007fec:	4602      	mov	r2, r0
 8007fee:	460b      	mov	r3, r1
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ffa:	d308      	bcc.n	800800e <UART_SetConfig+0x79a>
 8007ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ffe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008002:	d204      	bcs.n	800800e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800800a:	60da      	str	r2, [r3, #12]
 800800c:	e17c      	b.n	8008308 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008014:	e178      	b.n	8008308 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	69db      	ldr	r3, [r3, #28]
 800801a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800801e:	f040 80c5 	bne.w	80081ac <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008022:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008026:	2b20      	cmp	r3, #32
 8008028:	dc48      	bgt.n	80080bc <UART_SetConfig+0x848>
 800802a:	2b00      	cmp	r3, #0
 800802c:	db7b      	blt.n	8008126 <UART_SetConfig+0x8b2>
 800802e:	2b20      	cmp	r3, #32
 8008030:	d879      	bhi.n	8008126 <UART_SetConfig+0x8b2>
 8008032:	a201      	add	r2, pc, #4	@ (adr r2, 8008038 <UART_SetConfig+0x7c4>)
 8008034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008038:	080080c3 	.word	0x080080c3
 800803c:	080080cb 	.word	0x080080cb
 8008040:	08008127 	.word	0x08008127
 8008044:	08008127 	.word	0x08008127
 8008048:	080080d3 	.word	0x080080d3
 800804c:	08008127 	.word	0x08008127
 8008050:	08008127 	.word	0x08008127
 8008054:	08008127 	.word	0x08008127
 8008058:	080080e3 	.word	0x080080e3
 800805c:	08008127 	.word	0x08008127
 8008060:	08008127 	.word	0x08008127
 8008064:	08008127 	.word	0x08008127
 8008068:	08008127 	.word	0x08008127
 800806c:	08008127 	.word	0x08008127
 8008070:	08008127 	.word	0x08008127
 8008074:	08008127 	.word	0x08008127
 8008078:	080080f3 	.word	0x080080f3
 800807c:	08008127 	.word	0x08008127
 8008080:	08008127 	.word	0x08008127
 8008084:	08008127 	.word	0x08008127
 8008088:	08008127 	.word	0x08008127
 800808c:	08008127 	.word	0x08008127
 8008090:	08008127 	.word	0x08008127
 8008094:	08008127 	.word	0x08008127
 8008098:	08008127 	.word	0x08008127
 800809c:	08008127 	.word	0x08008127
 80080a0:	08008127 	.word	0x08008127
 80080a4:	08008127 	.word	0x08008127
 80080a8:	08008127 	.word	0x08008127
 80080ac:	08008127 	.word	0x08008127
 80080b0:	08008127 	.word	0x08008127
 80080b4:	08008127 	.word	0x08008127
 80080b8:	08008119 	.word	0x08008119
 80080bc:	2b40      	cmp	r3, #64	@ 0x40
 80080be:	d02e      	beq.n	800811e <UART_SetConfig+0x8aa>
 80080c0:	e031      	b.n	8008126 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080c2:	f7fc fb47 	bl	8004754 <HAL_RCC_GetPCLK1Freq>
 80080c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80080c8:	e033      	b.n	8008132 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080ca:	f7fc fb59 	bl	8004780 <HAL_RCC_GetPCLK2Freq>
 80080ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80080d0:	e02f      	b.n	8008132 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7fd fd88 	bl	8005bec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80080dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080e0:	e027      	b.n	8008132 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080e2:	f107 0318 	add.w	r3, r7, #24
 80080e6:	4618      	mov	r0, r3
 80080e8:	f7fd fed4 	bl	8005e94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080f0:	e01f      	b.n	8008132 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080f2:	4b2d      	ldr	r3, [pc, #180]	@ (80081a8 <UART_SetConfig+0x934>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 0320 	and.w	r3, r3, #32
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d009      	beq.n	8008112 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80080fe:	4b2a      	ldr	r3, [pc, #168]	@ (80081a8 <UART_SetConfig+0x934>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	08db      	lsrs	r3, r3, #3
 8008104:	f003 0303 	and.w	r3, r3, #3
 8008108:	4a24      	ldr	r2, [pc, #144]	@ (800819c <UART_SetConfig+0x928>)
 800810a:	fa22 f303 	lsr.w	r3, r2, r3
 800810e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008110:	e00f      	b.n	8008132 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008112:	4b22      	ldr	r3, [pc, #136]	@ (800819c <UART_SetConfig+0x928>)
 8008114:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008116:	e00c      	b.n	8008132 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008118:	4b21      	ldr	r3, [pc, #132]	@ (80081a0 <UART_SetConfig+0x92c>)
 800811a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800811c:	e009      	b.n	8008132 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800811e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008122:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008124:	e005      	b.n	8008132 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008126:	2300      	movs	r3, #0
 8008128:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008130:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008132:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008134:	2b00      	cmp	r3, #0
 8008136:	f000 80e7 	beq.w	8008308 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800813e:	4a19      	ldr	r2, [pc, #100]	@ (80081a4 <UART_SetConfig+0x930>)
 8008140:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008144:	461a      	mov	r2, r3
 8008146:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008148:	fbb3 f3f2 	udiv	r3, r3, r2
 800814c:	005a      	lsls	r2, r3, #1
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	085b      	lsrs	r3, r3, #1
 8008154:	441a      	add	r2, r3
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	fbb2 f3f3 	udiv	r3, r2, r3
 800815e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008162:	2b0f      	cmp	r3, #15
 8008164:	d916      	bls.n	8008194 <UART_SetConfig+0x920>
 8008166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008168:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800816c:	d212      	bcs.n	8008194 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800816e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008170:	b29b      	uxth	r3, r3
 8008172:	f023 030f 	bic.w	r3, r3, #15
 8008176:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800817a:	085b      	lsrs	r3, r3, #1
 800817c:	b29b      	uxth	r3, r3
 800817e:	f003 0307 	and.w	r3, r3, #7
 8008182:	b29a      	uxth	r2, r3
 8008184:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008186:	4313      	orrs	r3, r2
 8008188:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008190:	60da      	str	r2, [r3, #12]
 8008192:	e0b9      	b.n	8008308 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800819a:	e0b5      	b.n	8008308 <UART_SetConfig+0xa94>
 800819c:	03d09000 	.word	0x03d09000
 80081a0:	003d0900 	.word	0x003d0900
 80081a4:	0800addc 	.word	0x0800addc
 80081a8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80081ac:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80081b0:	2b20      	cmp	r3, #32
 80081b2:	dc49      	bgt.n	8008248 <UART_SetConfig+0x9d4>
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	db7c      	blt.n	80082b2 <UART_SetConfig+0xa3e>
 80081b8:	2b20      	cmp	r3, #32
 80081ba:	d87a      	bhi.n	80082b2 <UART_SetConfig+0xa3e>
 80081bc:	a201      	add	r2, pc, #4	@ (adr r2, 80081c4 <UART_SetConfig+0x950>)
 80081be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c2:	bf00      	nop
 80081c4:	0800824f 	.word	0x0800824f
 80081c8:	08008257 	.word	0x08008257
 80081cc:	080082b3 	.word	0x080082b3
 80081d0:	080082b3 	.word	0x080082b3
 80081d4:	0800825f 	.word	0x0800825f
 80081d8:	080082b3 	.word	0x080082b3
 80081dc:	080082b3 	.word	0x080082b3
 80081e0:	080082b3 	.word	0x080082b3
 80081e4:	0800826f 	.word	0x0800826f
 80081e8:	080082b3 	.word	0x080082b3
 80081ec:	080082b3 	.word	0x080082b3
 80081f0:	080082b3 	.word	0x080082b3
 80081f4:	080082b3 	.word	0x080082b3
 80081f8:	080082b3 	.word	0x080082b3
 80081fc:	080082b3 	.word	0x080082b3
 8008200:	080082b3 	.word	0x080082b3
 8008204:	0800827f 	.word	0x0800827f
 8008208:	080082b3 	.word	0x080082b3
 800820c:	080082b3 	.word	0x080082b3
 8008210:	080082b3 	.word	0x080082b3
 8008214:	080082b3 	.word	0x080082b3
 8008218:	080082b3 	.word	0x080082b3
 800821c:	080082b3 	.word	0x080082b3
 8008220:	080082b3 	.word	0x080082b3
 8008224:	080082b3 	.word	0x080082b3
 8008228:	080082b3 	.word	0x080082b3
 800822c:	080082b3 	.word	0x080082b3
 8008230:	080082b3 	.word	0x080082b3
 8008234:	080082b3 	.word	0x080082b3
 8008238:	080082b3 	.word	0x080082b3
 800823c:	080082b3 	.word	0x080082b3
 8008240:	080082b3 	.word	0x080082b3
 8008244:	080082a5 	.word	0x080082a5
 8008248:	2b40      	cmp	r3, #64	@ 0x40
 800824a:	d02e      	beq.n	80082aa <UART_SetConfig+0xa36>
 800824c:	e031      	b.n	80082b2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800824e:	f7fc fa81 	bl	8004754 <HAL_RCC_GetPCLK1Freq>
 8008252:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008254:	e033      	b.n	80082be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008256:	f7fc fa93 	bl	8004780 <HAL_RCC_GetPCLK2Freq>
 800825a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800825c:	e02f      	b.n	80082be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800825e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008262:	4618      	mov	r0, r3
 8008264:	f7fd fcc2 	bl	8005bec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800826a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800826c:	e027      	b.n	80082be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800826e:	f107 0318 	add.w	r3, r7, #24
 8008272:	4618      	mov	r0, r3
 8008274:	f7fd fe0e 	bl	8005e94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800827c:	e01f      	b.n	80082be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800827e:	4b2d      	ldr	r3, [pc, #180]	@ (8008334 <UART_SetConfig+0xac0>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 0320 	and.w	r3, r3, #32
 8008286:	2b00      	cmp	r3, #0
 8008288:	d009      	beq.n	800829e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800828a:	4b2a      	ldr	r3, [pc, #168]	@ (8008334 <UART_SetConfig+0xac0>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	08db      	lsrs	r3, r3, #3
 8008290:	f003 0303 	and.w	r3, r3, #3
 8008294:	4a28      	ldr	r2, [pc, #160]	@ (8008338 <UART_SetConfig+0xac4>)
 8008296:	fa22 f303 	lsr.w	r3, r2, r3
 800829a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800829c:	e00f      	b.n	80082be <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800829e:	4b26      	ldr	r3, [pc, #152]	@ (8008338 <UART_SetConfig+0xac4>)
 80082a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082a2:	e00c      	b.n	80082be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80082a4:	4b25      	ldr	r3, [pc, #148]	@ (800833c <UART_SetConfig+0xac8>)
 80082a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082a8:	e009      	b.n	80082be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082b0:	e005      	b.n	80082be <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80082b2:	2300      	movs	r3, #0
 80082b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80082bc:	bf00      	nop
    }

    if (pclk != 0U)
 80082be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d021      	beq.n	8008308 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082c8:	4a1d      	ldr	r2, [pc, #116]	@ (8008340 <UART_SetConfig+0xacc>)
 80082ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082ce:	461a      	mov	r2, r3
 80082d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	085b      	lsrs	r3, r3, #1
 80082dc:	441a      	add	r2, r3
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80082e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ea:	2b0f      	cmp	r3, #15
 80082ec:	d909      	bls.n	8008302 <UART_SetConfig+0xa8e>
 80082ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082f4:	d205      	bcs.n	8008302 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80082f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f8:	b29a      	uxth	r2, r3
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	60da      	str	r2, [r3, #12]
 8008300:	e002      	b.n	8008308 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	2201      	movs	r2, #1
 800830c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	2201      	movs	r2, #1
 8008314:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	2200      	movs	r2, #0
 800831c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	2200      	movs	r2, #0
 8008322:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008324:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008328:	4618      	mov	r0, r3
 800832a:	3748      	adds	r7, #72	@ 0x48
 800832c:	46bd      	mov	sp, r7
 800832e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008332:	bf00      	nop
 8008334:	58024400 	.word	0x58024400
 8008338:	03d09000 	.word	0x03d09000
 800833c:	003d0900 	.word	0x003d0900
 8008340:	0800addc 	.word	0x0800addc

08008344 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008350:	f003 0308 	and.w	r3, r3, #8
 8008354:	2b00      	cmp	r3, #0
 8008356:	d00a      	beq.n	800836e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	430a      	orrs	r2, r1
 800836c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008372:	f003 0301 	and.w	r3, r3, #1
 8008376:	2b00      	cmp	r3, #0
 8008378:	d00a      	beq.n	8008390 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	430a      	orrs	r2, r1
 800838e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008394:	f003 0302 	and.w	r3, r3, #2
 8008398:	2b00      	cmp	r3, #0
 800839a:	d00a      	beq.n	80083b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	430a      	orrs	r2, r1
 80083b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083b6:	f003 0304 	and.w	r3, r3, #4
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00a      	beq.n	80083d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	430a      	orrs	r2, r1
 80083d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083d8:	f003 0310 	and.w	r3, r3, #16
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d00a      	beq.n	80083f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	430a      	orrs	r2, r1
 80083f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083fa:	f003 0320 	and.w	r3, r3, #32
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00a      	beq.n	8008418 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	430a      	orrs	r2, r1
 8008416:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800841c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008420:	2b00      	cmp	r3, #0
 8008422:	d01a      	beq.n	800845a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	430a      	orrs	r2, r1
 8008438:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800843e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008442:	d10a      	bne.n	800845a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	430a      	orrs	r2, r1
 8008458:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800845e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00a      	beq.n	800847c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	430a      	orrs	r2, r1
 800847a:	605a      	str	r2, [r3, #4]
  }
}
 800847c:	bf00      	nop
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b098      	sub	sp, #96	@ 0x60
 800848c:	af02      	add	r7, sp, #8
 800848e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008498:	f7fa fae4 	bl	8002a64 <HAL_GetTick>
 800849c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 0308 	and.w	r3, r3, #8
 80084a8:	2b08      	cmp	r3, #8
 80084aa:	d12f      	bne.n	800850c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80084b0:	9300      	str	r3, [sp, #0]
 80084b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084b4:	2200      	movs	r2, #0
 80084b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 f88e 	bl	80085dc <UART_WaitOnFlagUntilTimeout>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d022      	beq.n	800850c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ce:	e853 3f00 	ldrex	r3, [r3]
 80084d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80084d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084da:	653b      	str	r3, [r7, #80]	@ 0x50
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	461a      	mov	r2, r3
 80084e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80084e6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80084ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084ec:	e841 2300 	strex	r3, r2, [r1]
 80084f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80084f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1e6      	bne.n	80084c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2220      	movs	r2, #32
 80084fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008508:	2303      	movs	r3, #3
 800850a:	e063      	b.n	80085d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f003 0304 	and.w	r3, r3, #4
 8008516:	2b04      	cmp	r3, #4
 8008518:	d149      	bne.n	80085ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800851a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800851e:	9300      	str	r3, [sp, #0]
 8008520:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008522:	2200      	movs	r2, #0
 8008524:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 f857 	bl	80085dc <UART_WaitOnFlagUntilTimeout>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d03c      	beq.n	80085ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800853c:	e853 3f00 	ldrex	r3, [r3]
 8008540:	623b      	str	r3, [r7, #32]
   return(result);
 8008542:	6a3b      	ldr	r3, [r7, #32]
 8008544:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008548:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	461a      	mov	r2, r3
 8008550:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008552:	633b      	str	r3, [r7, #48]	@ 0x30
 8008554:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008556:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008558:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800855a:	e841 2300 	strex	r3, r2, [r1]
 800855e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008562:	2b00      	cmp	r3, #0
 8008564:	d1e6      	bne.n	8008534 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	3308      	adds	r3, #8
 800856c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	e853 3f00 	ldrex	r3, [r3]
 8008574:	60fb      	str	r3, [r7, #12]
   return(result);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f023 0301 	bic.w	r3, r3, #1
 800857c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	3308      	adds	r3, #8
 8008584:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008586:	61fa      	str	r2, [r7, #28]
 8008588:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858a:	69b9      	ldr	r1, [r7, #24]
 800858c:	69fa      	ldr	r2, [r7, #28]
 800858e:	e841 2300 	strex	r3, r2, [r1]
 8008592:	617b      	str	r3, [r7, #20]
   return(result);
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d1e5      	bne.n	8008566 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2220      	movs	r2, #32
 800859e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085aa:	2303      	movs	r3, #3
 80085ac:	e012      	b.n	80085d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2220      	movs	r2, #32
 80085b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2220      	movs	r2, #32
 80085ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3758      	adds	r7, #88	@ 0x58
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	603b      	str	r3, [r7, #0]
 80085e8:	4613      	mov	r3, r2
 80085ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085ec:	e04f      	b.n	800868e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f4:	d04b      	beq.n	800868e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085f6:	f7fa fa35 	bl	8002a64 <HAL_GetTick>
 80085fa:	4602      	mov	r2, r0
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	69ba      	ldr	r2, [r7, #24]
 8008602:	429a      	cmp	r2, r3
 8008604:	d302      	bcc.n	800860c <UART_WaitOnFlagUntilTimeout+0x30>
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d101      	bne.n	8008610 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800860c:	2303      	movs	r3, #3
 800860e:	e04e      	b.n	80086ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f003 0304 	and.w	r3, r3, #4
 800861a:	2b00      	cmp	r3, #0
 800861c:	d037      	beq.n	800868e <UART_WaitOnFlagUntilTimeout+0xb2>
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	2b80      	cmp	r3, #128	@ 0x80
 8008622:	d034      	beq.n	800868e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	2b40      	cmp	r3, #64	@ 0x40
 8008628:	d031      	beq.n	800868e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	69db      	ldr	r3, [r3, #28]
 8008630:	f003 0308 	and.w	r3, r3, #8
 8008634:	2b08      	cmp	r3, #8
 8008636:	d110      	bne.n	800865a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2208      	movs	r2, #8
 800863e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008640:	68f8      	ldr	r0, [r7, #12]
 8008642:	f000 f839 	bl	80086b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2208      	movs	r2, #8
 800864a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2200      	movs	r2, #0
 8008652:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	e029      	b.n	80086ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	69db      	ldr	r3, [r3, #28]
 8008660:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008664:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008668:	d111      	bne.n	800868e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008672:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	f000 f81f 	bl	80086b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2220      	movs	r2, #32
 800867e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2200      	movs	r2, #0
 8008686:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800868a:	2303      	movs	r3, #3
 800868c:	e00f      	b.n	80086ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	69da      	ldr	r2, [r3, #28]
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	4013      	ands	r3, r2
 8008698:	68ba      	ldr	r2, [r7, #8]
 800869a:	429a      	cmp	r2, r3
 800869c:	bf0c      	ite	eq
 800869e:	2301      	moveq	r3, #1
 80086a0:	2300      	movne	r3, #0
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	461a      	mov	r2, r3
 80086a6:	79fb      	ldrb	r3, [r7, #7]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d0a0      	beq.n	80085ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
	...

080086b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b095      	sub	sp, #84	@ 0x54
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086c8:	e853 3f00 	ldrex	r3, [r3]
 80086cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80086ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	461a      	mov	r2, r3
 80086dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086de:	643b      	str	r3, [r7, #64]	@ 0x40
 80086e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80086e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80086e6:	e841 2300 	strex	r3, r2, [r1]
 80086ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80086ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d1e6      	bne.n	80086c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	3308      	adds	r3, #8
 80086f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086fa:	6a3b      	ldr	r3, [r7, #32]
 80086fc:	e853 3f00 	ldrex	r3, [r3]
 8008700:	61fb      	str	r3, [r7, #28]
   return(result);
 8008702:	69fa      	ldr	r2, [r7, #28]
 8008704:	4b1e      	ldr	r3, [pc, #120]	@ (8008780 <UART_EndRxTransfer+0xc8>)
 8008706:	4013      	ands	r3, r2
 8008708:	64bb      	str	r3, [r7, #72]	@ 0x48
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	3308      	adds	r3, #8
 8008710:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008712:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008714:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008716:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008718:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800871a:	e841 2300 	strex	r3, r2, [r1]
 800871e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008722:	2b00      	cmp	r3, #0
 8008724:	d1e5      	bne.n	80086f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800872a:	2b01      	cmp	r3, #1
 800872c:	d118      	bne.n	8008760 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	e853 3f00 	ldrex	r3, [r3]
 800873a:	60bb      	str	r3, [r7, #8]
   return(result);
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	f023 0310 	bic.w	r3, r3, #16
 8008742:	647b      	str	r3, [r7, #68]	@ 0x44
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	461a      	mov	r2, r3
 800874a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800874c:	61bb      	str	r3, [r7, #24]
 800874e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008750:	6979      	ldr	r1, [r7, #20]
 8008752:	69ba      	ldr	r2, [r7, #24]
 8008754:	e841 2300 	strex	r3, r2, [r1]
 8008758:	613b      	str	r3, [r7, #16]
   return(result);
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d1e6      	bne.n	800872e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2220      	movs	r2, #32
 8008764:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008774:	bf00      	nop
 8008776:	3754      	adds	r7, #84	@ 0x54
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr
 8008780:	effffffe 	.word	0xeffffffe

08008784 <std>:
 8008784:	2300      	movs	r3, #0
 8008786:	b510      	push	{r4, lr}
 8008788:	4604      	mov	r4, r0
 800878a:	e9c0 3300 	strd	r3, r3, [r0]
 800878e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008792:	6083      	str	r3, [r0, #8]
 8008794:	8181      	strh	r1, [r0, #12]
 8008796:	6643      	str	r3, [r0, #100]	@ 0x64
 8008798:	81c2      	strh	r2, [r0, #14]
 800879a:	6183      	str	r3, [r0, #24]
 800879c:	4619      	mov	r1, r3
 800879e:	2208      	movs	r2, #8
 80087a0:	305c      	adds	r0, #92	@ 0x5c
 80087a2:	f000 f906 	bl	80089b2 <memset>
 80087a6:	4b0d      	ldr	r3, [pc, #52]	@ (80087dc <std+0x58>)
 80087a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80087aa:	4b0d      	ldr	r3, [pc, #52]	@ (80087e0 <std+0x5c>)
 80087ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80087ae:	4b0d      	ldr	r3, [pc, #52]	@ (80087e4 <std+0x60>)
 80087b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80087b2:	4b0d      	ldr	r3, [pc, #52]	@ (80087e8 <std+0x64>)
 80087b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80087b6:	4b0d      	ldr	r3, [pc, #52]	@ (80087ec <std+0x68>)
 80087b8:	6224      	str	r4, [r4, #32]
 80087ba:	429c      	cmp	r4, r3
 80087bc:	d006      	beq.n	80087cc <std+0x48>
 80087be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80087c2:	4294      	cmp	r4, r2
 80087c4:	d002      	beq.n	80087cc <std+0x48>
 80087c6:	33d0      	adds	r3, #208	@ 0xd0
 80087c8:	429c      	cmp	r4, r3
 80087ca:	d105      	bne.n	80087d8 <std+0x54>
 80087cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80087d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087d4:	f000 b966 	b.w	8008aa4 <__retarget_lock_init_recursive>
 80087d8:	bd10      	pop	{r4, pc}
 80087da:	bf00      	nop
 80087dc:	0800892d 	.word	0x0800892d
 80087e0:	0800894f 	.word	0x0800894f
 80087e4:	08008987 	.word	0x08008987
 80087e8:	080089ab 	.word	0x080089ab
 80087ec:	240001e8 	.word	0x240001e8

080087f0 <stdio_exit_handler>:
 80087f0:	4a02      	ldr	r2, [pc, #8]	@ (80087fc <stdio_exit_handler+0xc>)
 80087f2:	4903      	ldr	r1, [pc, #12]	@ (8008800 <stdio_exit_handler+0x10>)
 80087f4:	4803      	ldr	r0, [pc, #12]	@ (8008804 <stdio_exit_handler+0x14>)
 80087f6:	f000 b869 	b.w	80088cc <_fwalk_sglue>
 80087fa:	bf00      	nop
 80087fc:	2400002c 	.word	0x2400002c
 8008800:	08009341 	.word	0x08009341
 8008804:	2400003c 	.word	0x2400003c

08008808 <cleanup_stdio>:
 8008808:	6841      	ldr	r1, [r0, #4]
 800880a:	4b0c      	ldr	r3, [pc, #48]	@ (800883c <cleanup_stdio+0x34>)
 800880c:	4299      	cmp	r1, r3
 800880e:	b510      	push	{r4, lr}
 8008810:	4604      	mov	r4, r0
 8008812:	d001      	beq.n	8008818 <cleanup_stdio+0x10>
 8008814:	f000 fd94 	bl	8009340 <_fflush_r>
 8008818:	68a1      	ldr	r1, [r4, #8]
 800881a:	4b09      	ldr	r3, [pc, #36]	@ (8008840 <cleanup_stdio+0x38>)
 800881c:	4299      	cmp	r1, r3
 800881e:	d002      	beq.n	8008826 <cleanup_stdio+0x1e>
 8008820:	4620      	mov	r0, r4
 8008822:	f000 fd8d 	bl	8009340 <_fflush_r>
 8008826:	68e1      	ldr	r1, [r4, #12]
 8008828:	4b06      	ldr	r3, [pc, #24]	@ (8008844 <cleanup_stdio+0x3c>)
 800882a:	4299      	cmp	r1, r3
 800882c:	d004      	beq.n	8008838 <cleanup_stdio+0x30>
 800882e:	4620      	mov	r0, r4
 8008830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008834:	f000 bd84 	b.w	8009340 <_fflush_r>
 8008838:	bd10      	pop	{r4, pc}
 800883a:	bf00      	nop
 800883c:	240001e8 	.word	0x240001e8
 8008840:	24000250 	.word	0x24000250
 8008844:	240002b8 	.word	0x240002b8

08008848 <global_stdio_init.part.0>:
 8008848:	b510      	push	{r4, lr}
 800884a:	4b0b      	ldr	r3, [pc, #44]	@ (8008878 <global_stdio_init.part.0+0x30>)
 800884c:	4c0b      	ldr	r4, [pc, #44]	@ (800887c <global_stdio_init.part.0+0x34>)
 800884e:	4a0c      	ldr	r2, [pc, #48]	@ (8008880 <global_stdio_init.part.0+0x38>)
 8008850:	601a      	str	r2, [r3, #0]
 8008852:	4620      	mov	r0, r4
 8008854:	2200      	movs	r2, #0
 8008856:	2104      	movs	r1, #4
 8008858:	f7ff ff94 	bl	8008784 <std>
 800885c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008860:	2201      	movs	r2, #1
 8008862:	2109      	movs	r1, #9
 8008864:	f7ff ff8e 	bl	8008784 <std>
 8008868:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800886c:	2202      	movs	r2, #2
 800886e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008872:	2112      	movs	r1, #18
 8008874:	f7ff bf86 	b.w	8008784 <std>
 8008878:	24000320 	.word	0x24000320
 800887c:	240001e8 	.word	0x240001e8
 8008880:	080087f1 	.word	0x080087f1

08008884 <__sfp_lock_acquire>:
 8008884:	4801      	ldr	r0, [pc, #4]	@ (800888c <__sfp_lock_acquire+0x8>)
 8008886:	f000 b90e 	b.w	8008aa6 <__retarget_lock_acquire_recursive>
 800888a:	bf00      	nop
 800888c:	24000329 	.word	0x24000329

08008890 <__sfp_lock_release>:
 8008890:	4801      	ldr	r0, [pc, #4]	@ (8008898 <__sfp_lock_release+0x8>)
 8008892:	f000 b909 	b.w	8008aa8 <__retarget_lock_release_recursive>
 8008896:	bf00      	nop
 8008898:	24000329 	.word	0x24000329

0800889c <__sinit>:
 800889c:	b510      	push	{r4, lr}
 800889e:	4604      	mov	r4, r0
 80088a0:	f7ff fff0 	bl	8008884 <__sfp_lock_acquire>
 80088a4:	6a23      	ldr	r3, [r4, #32]
 80088a6:	b11b      	cbz	r3, 80088b0 <__sinit+0x14>
 80088a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088ac:	f7ff bff0 	b.w	8008890 <__sfp_lock_release>
 80088b0:	4b04      	ldr	r3, [pc, #16]	@ (80088c4 <__sinit+0x28>)
 80088b2:	6223      	str	r3, [r4, #32]
 80088b4:	4b04      	ldr	r3, [pc, #16]	@ (80088c8 <__sinit+0x2c>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d1f5      	bne.n	80088a8 <__sinit+0xc>
 80088bc:	f7ff ffc4 	bl	8008848 <global_stdio_init.part.0>
 80088c0:	e7f2      	b.n	80088a8 <__sinit+0xc>
 80088c2:	bf00      	nop
 80088c4:	08008809 	.word	0x08008809
 80088c8:	24000320 	.word	0x24000320

080088cc <_fwalk_sglue>:
 80088cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088d0:	4607      	mov	r7, r0
 80088d2:	4688      	mov	r8, r1
 80088d4:	4614      	mov	r4, r2
 80088d6:	2600      	movs	r6, #0
 80088d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088dc:	f1b9 0901 	subs.w	r9, r9, #1
 80088e0:	d505      	bpl.n	80088ee <_fwalk_sglue+0x22>
 80088e2:	6824      	ldr	r4, [r4, #0]
 80088e4:	2c00      	cmp	r4, #0
 80088e6:	d1f7      	bne.n	80088d8 <_fwalk_sglue+0xc>
 80088e8:	4630      	mov	r0, r6
 80088ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088ee:	89ab      	ldrh	r3, [r5, #12]
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d907      	bls.n	8008904 <_fwalk_sglue+0x38>
 80088f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088f8:	3301      	adds	r3, #1
 80088fa:	d003      	beq.n	8008904 <_fwalk_sglue+0x38>
 80088fc:	4629      	mov	r1, r5
 80088fe:	4638      	mov	r0, r7
 8008900:	47c0      	blx	r8
 8008902:	4306      	orrs	r6, r0
 8008904:	3568      	adds	r5, #104	@ 0x68
 8008906:	e7e9      	b.n	80088dc <_fwalk_sglue+0x10>

08008908 <iprintf>:
 8008908:	b40f      	push	{r0, r1, r2, r3}
 800890a:	b507      	push	{r0, r1, r2, lr}
 800890c:	4906      	ldr	r1, [pc, #24]	@ (8008928 <iprintf+0x20>)
 800890e:	ab04      	add	r3, sp, #16
 8008910:	6808      	ldr	r0, [r1, #0]
 8008912:	f853 2b04 	ldr.w	r2, [r3], #4
 8008916:	6881      	ldr	r1, [r0, #8]
 8008918:	9301      	str	r3, [sp, #4]
 800891a:	f000 f9e9 	bl	8008cf0 <_vfiprintf_r>
 800891e:	b003      	add	sp, #12
 8008920:	f85d eb04 	ldr.w	lr, [sp], #4
 8008924:	b004      	add	sp, #16
 8008926:	4770      	bx	lr
 8008928:	24000038 	.word	0x24000038

0800892c <__sread>:
 800892c:	b510      	push	{r4, lr}
 800892e:	460c      	mov	r4, r1
 8008930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008934:	f000 f868 	bl	8008a08 <_read_r>
 8008938:	2800      	cmp	r0, #0
 800893a:	bfab      	itete	ge
 800893c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800893e:	89a3      	ldrhlt	r3, [r4, #12]
 8008940:	181b      	addge	r3, r3, r0
 8008942:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008946:	bfac      	ite	ge
 8008948:	6563      	strge	r3, [r4, #84]	@ 0x54
 800894a:	81a3      	strhlt	r3, [r4, #12]
 800894c:	bd10      	pop	{r4, pc}

0800894e <__swrite>:
 800894e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008952:	461f      	mov	r7, r3
 8008954:	898b      	ldrh	r3, [r1, #12]
 8008956:	05db      	lsls	r3, r3, #23
 8008958:	4605      	mov	r5, r0
 800895a:	460c      	mov	r4, r1
 800895c:	4616      	mov	r6, r2
 800895e:	d505      	bpl.n	800896c <__swrite+0x1e>
 8008960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008964:	2302      	movs	r3, #2
 8008966:	2200      	movs	r2, #0
 8008968:	f000 f83c 	bl	80089e4 <_lseek_r>
 800896c:	89a3      	ldrh	r3, [r4, #12]
 800896e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008972:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008976:	81a3      	strh	r3, [r4, #12]
 8008978:	4632      	mov	r2, r6
 800897a:	463b      	mov	r3, r7
 800897c:	4628      	mov	r0, r5
 800897e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008982:	f000 b853 	b.w	8008a2c <_write_r>

08008986 <__sseek>:
 8008986:	b510      	push	{r4, lr}
 8008988:	460c      	mov	r4, r1
 800898a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800898e:	f000 f829 	bl	80089e4 <_lseek_r>
 8008992:	1c43      	adds	r3, r0, #1
 8008994:	89a3      	ldrh	r3, [r4, #12]
 8008996:	bf15      	itete	ne
 8008998:	6560      	strne	r0, [r4, #84]	@ 0x54
 800899a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800899e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80089a2:	81a3      	strheq	r3, [r4, #12]
 80089a4:	bf18      	it	ne
 80089a6:	81a3      	strhne	r3, [r4, #12]
 80089a8:	bd10      	pop	{r4, pc}

080089aa <__sclose>:
 80089aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089ae:	f000 b809 	b.w	80089c4 <_close_r>

080089b2 <memset>:
 80089b2:	4402      	add	r2, r0
 80089b4:	4603      	mov	r3, r0
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d100      	bne.n	80089bc <memset+0xa>
 80089ba:	4770      	bx	lr
 80089bc:	f803 1b01 	strb.w	r1, [r3], #1
 80089c0:	e7f9      	b.n	80089b6 <memset+0x4>
	...

080089c4 <_close_r>:
 80089c4:	b538      	push	{r3, r4, r5, lr}
 80089c6:	4d06      	ldr	r5, [pc, #24]	@ (80089e0 <_close_r+0x1c>)
 80089c8:	2300      	movs	r3, #0
 80089ca:	4604      	mov	r4, r0
 80089cc:	4608      	mov	r0, r1
 80089ce:	602b      	str	r3, [r5, #0]
 80089d0:	f7f9 fc1d 	bl	800220e <_close>
 80089d4:	1c43      	adds	r3, r0, #1
 80089d6:	d102      	bne.n	80089de <_close_r+0x1a>
 80089d8:	682b      	ldr	r3, [r5, #0]
 80089da:	b103      	cbz	r3, 80089de <_close_r+0x1a>
 80089dc:	6023      	str	r3, [r4, #0]
 80089de:	bd38      	pop	{r3, r4, r5, pc}
 80089e0:	24000324 	.word	0x24000324

080089e4 <_lseek_r>:
 80089e4:	b538      	push	{r3, r4, r5, lr}
 80089e6:	4d07      	ldr	r5, [pc, #28]	@ (8008a04 <_lseek_r+0x20>)
 80089e8:	4604      	mov	r4, r0
 80089ea:	4608      	mov	r0, r1
 80089ec:	4611      	mov	r1, r2
 80089ee:	2200      	movs	r2, #0
 80089f0:	602a      	str	r2, [r5, #0]
 80089f2:	461a      	mov	r2, r3
 80089f4:	f7f9 fc32 	bl	800225c <_lseek>
 80089f8:	1c43      	adds	r3, r0, #1
 80089fa:	d102      	bne.n	8008a02 <_lseek_r+0x1e>
 80089fc:	682b      	ldr	r3, [r5, #0]
 80089fe:	b103      	cbz	r3, 8008a02 <_lseek_r+0x1e>
 8008a00:	6023      	str	r3, [r4, #0]
 8008a02:	bd38      	pop	{r3, r4, r5, pc}
 8008a04:	24000324 	.word	0x24000324

08008a08 <_read_r>:
 8008a08:	b538      	push	{r3, r4, r5, lr}
 8008a0a:	4d07      	ldr	r5, [pc, #28]	@ (8008a28 <_read_r+0x20>)
 8008a0c:	4604      	mov	r4, r0
 8008a0e:	4608      	mov	r0, r1
 8008a10:	4611      	mov	r1, r2
 8008a12:	2200      	movs	r2, #0
 8008a14:	602a      	str	r2, [r5, #0]
 8008a16:	461a      	mov	r2, r3
 8008a18:	f7f9 fbc0 	bl	800219c <_read>
 8008a1c:	1c43      	adds	r3, r0, #1
 8008a1e:	d102      	bne.n	8008a26 <_read_r+0x1e>
 8008a20:	682b      	ldr	r3, [r5, #0]
 8008a22:	b103      	cbz	r3, 8008a26 <_read_r+0x1e>
 8008a24:	6023      	str	r3, [r4, #0]
 8008a26:	bd38      	pop	{r3, r4, r5, pc}
 8008a28:	24000324 	.word	0x24000324

08008a2c <_write_r>:
 8008a2c:	b538      	push	{r3, r4, r5, lr}
 8008a2e:	4d07      	ldr	r5, [pc, #28]	@ (8008a4c <_write_r+0x20>)
 8008a30:	4604      	mov	r4, r0
 8008a32:	4608      	mov	r0, r1
 8008a34:	4611      	mov	r1, r2
 8008a36:	2200      	movs	r2, #0
 8008a38:	602a      	str	r2, [r5, #0]
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	f7f9 fbcb 	bl	80021d6 <_write>
 8008a40:	1c43      	adds	r3, r0, #1
 8008a42:	d102      	bne.n	8008a4a <_write_r+0x1e>
 8008a44:	682b      	ldr	r3, [r5, #0]
 8008a46:	b103      	cbz	r3, 8008a4a <_write_r+0x1e>
 8008a48:	6023      	str	r3, [r4, #0]
 8008a4a:	bd38      	pop	{r3, r4, r5, pc}
 8008a4c:	24000324 	.word	0x24000324

08008a50 <__errno>:
 8008a50:	4b01      	ldr	r3, [pc, #4]	@ (8008a58 <__errno+0x8>)
 8008a52:	6818      	ldr	r0, [r3, #0]
 8008a54:	4770      	bx	lr
 8008a56:	bf00      	nop
 8008a58:	24000038 	.word	0x24000038

08008a5c <__libc_init_array>:
 8008a5c:	b570      	push	{r4, r5, r6, lr}
 8008a5e:	4d0d      	ldr	r5, [pc, #52]	@ (8008a94 <__libc_init_array+0x38>)
 8008a60:	4c0d      	ldr	r4, [pc, #52]	@ (8008a98 <__libc_init_array+0x3c>)
 8008a62:	1b64      	subs	r4, r4, r5
 8008a64:	10a4      	asrs	r4, r4, #2
 8008a66:	2600      	movs	r6, #0
 8008a68:	42a6      	cmp	r6, r4
 8008a6a:	d109      	bne.n	8008a80 <__libc_init_array+0x24>
 8008a6c:	4d0b      	ldr	r5, [pc, #44]	@ (8008a9c <__libc_init_array+0x40>)
 8008a6e:	4c0c      	ldr	r4, [pc, #48]	@ (8008aa0 <__libc_init_array+0x44>)
 8008a70:	f000 fdb6 	bl	80095e0 <_init>
 8008a74:	1b64      	subs	r4, r4, r5
 8008a76:	10a4      	asrs	r4, r4, #2
 8008a78:	2600      	movs	r6, #0
 8008a7a:	42a6      	cmp	r6, r4
 8008a7c:	d105      	bne.n	8008a8a <__libc_init_array+0x2e>
 8008a7e:	bd70      	pop	{r4, r5, r6, pc}
 8008a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a84:	4798      	blx	r3
 8008a86:	3601      	adds	r6, #1
 8008a88:	e7ee      	b.n	8008a68 <__libc_init_array+0xc>
 8008a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a8e:	4798      	blx	r3
 8008a90:	3601      	adds	r6, #1
 8008a92:	e7f2      	b.n	8008a7a <__libc_init_array+0x1e>
 8008a94:	0800ae30 	.word	0x0800ae30
 8008a98:	0800ae30 	.word	0x0800ae30
 8008a9c:	0800ae30 	.word	0x0800ae30
 8008aa0:	0800ae34 	.word	0x0800ae34

08008aa4 <__retarget_lock_init_recursive>:
 8008aa4:	4770      	bx	lr

08008aa6 <__retarget_lock_acquire_recursive>:
 8008aa6:	4770      	bx	lr

08008aa8 <__retarget_lock_release_recursive>:
 8008aa8:	4770      	bx	lr
	...

08008aac <_free_r>:
 8008aac:	b538      	push	{r3, r4, r5, lr}
 8008aae:	4605      	mov	r5, r0
 8008ab0:	2900      	cmp	r1, #0
 8008ab2:	d041      	beq.n	8008b38 <_free_r+0x8c>
 8008ab4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ab8:	1f0c      	subs	r4, r1, #4
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	bfb8      	it	lt
 8008abe:	18e4      	addlt	r4, r4, r3
 8008ac0:	f000 f8e0 	bl	8008c84 <__malloc_lock>
 8008ac4:	4a1d      	ldr	r2, [pc, #116]	@ (8008b3c <_free_r+0x90>)
 8008ac6:	6813      	ldr	r3, [r2, #0]
 8008ac8:	b933      	cbnz	r3, 8008ad8 <_free_r+0x2c>
 8008aca:	6063      	str	r3, [r4, #4]
 8008acc:	6014      	str	r4, [r2, #0]
 8008ace:	4628      	mov	r0, r5
 8008ad0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ad4:	f000 b8dc 	b.w	8008c90 <__malloc_unlock>
 8008ad8:	42a3      	cmp	r3, r4
 8008ada:	d908      	bls.n	8008aee <_free_r+0x42>
 8008adc:	6820      	ldr	r0, [r4, #0]
 8008ade:	1821      	adds	r1, r4, r0
 8008ae0:	428b      	cmp	r3, r1
 8008ae2:	bf01      	itttt	eq
 8008ae4:	6819      	ldreq	r1, [r3, #0]
 8008ae6:	685b      	ldreq	r3, [r3, #4]
 8008ae8:	1809      	addeq	r1, r1, r0
 8008aea:	6021      	streq	r1, [r4, #0]
 8008aec:	e7ed      	b.n	8008aca <_free_r+0x1e>
 8008aee:	461a      	mov	r2, r3
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	b10b      	cbz	r3, 8008af8 <_free_r+0x4c>
 8008af4:	42a3      	cmp	r3, r4
 8008af6:	d9fa      	bls.n	8008aee <_free_r+0x42>
 8008af8:	6811      	ldr	r1, [r2, #0]
 8008afa:	1850      	adds	r0, r2, r1
 8008afc:	42a0      	cmp	r0, r4
 8008afe:	d10b      	bne.n	8008b18 <_free_r+0x6c>
 8008b00:	6820      	ldr	r0, [r4, #0]
 8008b02:	4401      	add	r1, r0
 8008b04:	1850      	adds	r0, r2, r1
 8008b06:	4283      	cmp	r3, r0
 8008b08:	6011      	str	r1, [r2, #0]
 8008b0a:	d1e0      	bne.n	8008ace <_free_r+0x22>
 8008b0c:	6818      	ldr	r0, [r3, #0]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	6053      	str	r3, [r2, #4]
 8008b12:	4408      	add	r0, r1
 8008b14:	6010      	str	r0, [r2, #0]
 8008b16:	e7da      	b.n	8008ace <_free_r+0x22>
 8008b18:	d902      	bls.n	8008b20 <_free_r+0x74>
 8008b1a:	230c      	movs	r3, #12
 8008b1c:	602b      	str	r3, [r5, #0]
 8008b1e:	e7d6      	b.n	8008ace <_free_r+0x22>
 8008b20:	6820      	ldr	r0, [r4, #0]
 8008b22:	1821      	adds	r1, r4, r0
 8008b24:	428b      	cmp	r3, r1
 8008b26:	bf04      	itt	eq
 8008b28:	6819      	ldreq	r1, [r3, #0]
 8008b2a:	685b      	ldreq	r3, [r3, #4]
 8008b2c:	6063      	str	r3, [r4, #4]
 8008b2e:	bf04      	itt	eq
 8008b30:	1809      	addeq	r1, r1, r0
 8008b32:	6021      	streq	r1, [r4, #0]
 8008b34:	6054      	str	r4, [r2, #4]
 8008b36:	e7ca      	b.n	8008ace <_free_r+0x22>
 8008b38:	bd38      	pop	{r3, r4, r5, pc}
 8008b3a:	bf00      	nop
 8008b3c:	24000330 	.word	0x24000330

08008b40 <sbrk_aligned>:
 8008b40:	b570      	push	{r4, r5, r6, lr}
 8008b42:	4e0f      	ldr	r6, [pc, #60]	@ (8008b80 <sbrk_aligned+0x40>)
 8008b44:	460c      	mov	r4, r1
 8008b46:	6831      	ldr	r1, [r6, #0]
 8008b48:	4605      	mov	r5, r0
 8008b4a:	b911      	cbnz	r1, 8008b52 <sbrk_aligned+0x12>
 8008b4c:	f000 fcb4 	bl	80094b8 <_sbrk_r>
 8008b50:	6030      	str	r0, [r6, #0]
 8008b52:	4621      	mov	r1, r4
 8008b54:	4628      	mov	r0, r5
 8008b56:	f000 fcaf 	bl	80094b8 <_sbrk_r>
 8008b5a:	1c43      	adds	r3, r0, #1
 8008b5c:	d103      	bne.n	8008b66 <sbrk_aligned+0x26>
 8008b5e:	f04f 34ff 	mov.w	r4, #4294967295
 8008b62:	4620      	mov	r0, r4
 8008b64:	bd70      	pop	{r4, r5, r6, pc}
 8008b66:	1cc4      	adds	r4, r0, #3
 8008b68:	f024 0403 	bic.w	r4, r4, #3
 8008b6c:	42a0      	cmp	r0, r4
 8008b6e:	d0f8      	beq.n	8008b62 <sbrk_aligned+0x22>
 8008b70:	1a21      	subs	r1, r4, r0
 8008b72:	4628      	mov	r0, r5
 8008b74:	f000 fca0 	bl	80094b8 <_sbrk_r>
 8008b78:	3001      	adds	r0, #1
 8008b7a:	d1f2      	bne.n	8008b62 <sbrk_aligned+0x22>
 8008b7c:	e7ef      	b.n	8008b5e <sbrk_aligned+0x1e>
 8008b7e:	bf00      	nop
 8008b80:	2400032c 	.word	0x2400032c

08008b84 <_malloc_r>:
 8008b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b88:	1ccd      	adds	r5, r1, #3
 8008b8a:	f025 0503 	bic.w	r5, r5, #3
 8008b8e:	3508      	adds	r5, #8
 8008b90:	2d0c      	cmp	r5, #12
 8008b92:	bf38      	it	cc
 8008b94:	250c      	movcc	r5, #12
 8008b96:	2d00      	cmp	r5, #0
 8008b98:	4606      	mov	r6, r0
 8008b9a:	db01      	blt.n	8008ba0 <_malloc_r+0x1c>
 8008b9c:	42a9      	cmp	r1, r5
 8008b9e:	d904      	bls.n	8008baa <_malloc_r+0x26>
 8008ba0:	230c      	movs	r3, #12
 8008ba2:	6033      	str	r3, [r6, #0]
 8008ba4:	2000      	movs	r0, #0
 8008ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008baa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008c80 <_malloc_r+0xfc>
 8008bae:	f000 f869 	bl	8008c84 <__malloc_lock>
 8008bb2:	f8d8 3000 	ldr.w	r3, [r8]
 8008bb6:	461c      	mov	r4, r3
 8008bb8:	bb44      	cbnz	r4, 8008c0c <_malloc_r+0x88>
 8008bba:	4629      	mov	r1, r5
 8008bbc:	4630      	mov	r0, r6
 8008bbe:	f7ff ffbf 	bl	8008b40 <sbrk_aligned>
 8008bc2:	1c43      	adds	r3, r0, #1
 8008bc4:	4604      	mov	r4, r0
 8008bc6:	d158      	bne.n	8008c7a <_malloc_r+0xf6>
 8008bc8:	f8d8 4000 	ldr.w	r4, [r8]
 8008bcc:	4627      	mov	r7, r4
 8008bce:	2f00      	cmp	r7, #0
 8008bd0:	d143      	bne.n	8008c5a <_malloc_r+0xd6>
 8008bd2:	2c00      	cmp	r4, #0
 8008bd4:	d04b      	beq.n	8008c6e <_malloc_r+0xea>
 8008bd6:	6823      	ldr	r3, [r4, #0]
 8008bd8:	4639      	mov	r1, r7
 8008bda:	4630      	mov	r0, r6
 8008bdc:	eb04 0903 	add.w	r9, r4, r3
 8008be0:	f000 fc6a 	bl	80094b8 <_sbrk_r>
 8008be4:	4581      	cmp	r9, r0
 8008be6:	d142      	bne.n	8008c6e <_malloc_r+0xea>
 8008be8:	6821      	ldr	r1, [r4, #0]
 8008bea:	1a6d      	subs	r5, r5, r1
 8008bec:	4629      	mov	r1, r5
 8008bee:	4630      	mov	r0, r6
 8008bf0:	f7ff ffa6 	bl	8008b40 <sbrk_aligned>
 8008bf4:	3001      	adds	r0, #1
 8008bf6:	d03a      	beq.n	8008c6e <_malloc_r+0xea>
 8008bf8:	6823      	ldr	r3, [r4, #0]
 8008bfa:	442b      	add	r3, r5
 8008bfc:	6023      	str	r3, [r4, #0]
 8008bfe:	f8d8 3000 	ldr.w	r3, [r8]
 8008c02:	685a      	ldr	r2, [r3, #4]
 8008c04:	bb62      	cbnz	r2, 8008c60 <_malloc_r+0xdc>
 8008c06:	f8c8 7000 	str.w	r7, [r8]
 8008c0a:	e00f      	b.n	8008c2c <_malloc_r+0xa8>
 8008c0c:	6822      	ldr	r2, [r4, #0]
 8008c0e:	1b52      	subs	r2, r2, r5
 8008c10:	d420      	bmi.n	8008c54 <_malloc_r+0xd0>
 8008c12:	2a0b      	cmp	r2, #11
 8008c14:	d917      	bls.n	8008c46 <_malloc_r+0xc2>
 8008c16:	1961      	adds	r1, r4, r5
 8008c18:	42a3      	cmp	r3, r4
 8008c1a:	6025      	str	r5, [r4, #0]
 8008c1c:	bf18      	it	ne
 8008c1e:	6059      	strne	r1, [r3, #4]
 8008c20:	6863      	ldr	r3, [r4, #4]
 8008c22:	bf08      	it	eq
 8008c24:	f8c8 1000 	streq.w	r1, [r8]
 8008c28:	5162      	str	r2, [r4, r5]
 8008c2a:	604b      	str	r3, [r1, #4]
 8008c2c:	4630      	mov	r0, r6
 8008c2e:	f000 f82f 	bl	8008c90 <__malloc_unlock>
 8008c32:	f104 000b 	add.w	r0, r4, #11
 8008c36:	1d23      	adds	r3, r4, #4
 8008c38:	f020 0007 	bic.w	r0, r0, #7
 8008c3c:	1ac2      	subs	r2, r0, r3
 8008c3e:	bf1c      	itt	ne
 8008c40:	1a1b      	subne	r3, r3, r0
 8008c42:	50a3      	strne	r3, [r4, r2]
 8008c44:	e7af      	b.n	8008ba6 <_malloc_r+0x22>
 8008c46:	6862      	ldr	r2, [r4, #4]
 8008c48:	42a3      	cmp	r3, r4
 8008c4a:	bf0c      	ite	eq
 8008c4c:	f8c8 2000 	streq.w	r2, [r8]
 8008c50:	605a      	strne	r2, [r3, #4]
 8008c52:	e7eb      	b.n	8008c2c <_malloc_r+0xa8>
 8008c54:	4623      	mov	r3, r4
 8008c56:	6864      	ldr	r4, [r4, #4]
 8008c58:	e7ae      	b.n	8008bb8 <_malloc_r+0x34>
 8008c5a:	463c      	mov	r4, r7
 8008c5c:	687f      	ldr	r7, [r7, #4]
 8008c5e:	e7b6      	b.n	8008bce <_malloc_r+0x4a>
 8008c60:	461a      	mov	r2, r3
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	42a3      	cmp	r3, r4
 8008c66:	d1fb      	bne.n	8008c60 <_malloc_r+0xdc>
 8008c68:	2300      	movs	r3, #0
 8008c6a:	6053      	str	r3, [r2, #4]
 8008c6c:	e7de      	b.n	8008c2c <_malloc_r+0xa8>
 8008c6e:	230c      	movs	r3, #12
 8008c70:	6033      	str	r3, [r6, #0]
 8008c72:	4630      	mov	r0, r6
 8008c74:	f000 f80c 	bl	8008c90 <__malloc_unlock>
 8008c78:	e794      	b.n	8008ba4 <_malloc_r+0x20>
 8008c7a:	6005      	str	r5, [r0, #0]
 8008c7c:	e7d6      	b.n	8008c2c <_malloc_r+0xa8>
 8008c7e:	bf00      	nop
 8008c80:	24000330 	.word	0x24000330

08008c84 <__malloc_lock>:
 8008c84:	4801      	ldr	r0, [pc, #4]	@ (8008c8c <__malloc_lock+0x8>)
 8008c86:	f7ff bf0e 	b.w	8008aa6 <__retarget_lock_acquire_recursive>
 8008c8a:	bf00      	nop
 8008c8c:	24000328 	.word	0x24000328

08008c90 <__malloc_unlock>:
 8008c90:	4801      	ldr	r0, [pc, #4]	@ (8008c98 <__malloc_unlock+0x8>)
 8008c92:	f7ff bf09 	b.w	8008aa8 <__retarget_lock_release_recursive>
 8008c96:	bf00      	nop
 8008c98:	24000328 	.word	0x24000328

08008c9c <__sfputc_r>:
 8008c9c:	6893      	ldr	r3, [r2, #8]
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	b410      	push	{r4}
 8008ca4:	6093      	str	r3, [r2, #8]
 8008ca6:	da08      	bge.n	8008cba <__sfputc_r+0x1e>
 8008ca8:	6994      	ldr	r4, [r2, #24]
 8008caa:	42a3      	cmp	r3, r4
 8008cac:	db01      	blt.n	8008cb2 <__sfputc_r+0x16>
 8008cae:	290a      	cmp	r1, #10
 8008cb0:	d103      	bne.n	8008cba <__sfputc_r+0x1e>
 8008cb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cb6:	f000 bb6b 	b.w	8009390 <__swbuf_r>
 8008cba:	6813      	ldr	r3, [r2, #0]
 8008cbc:	1c58      	adds	r0, r3, #1
 8008cbe:	6010      	str	r0, [r2, #0]
 8008cc0:	7019      	strb	r1, [r3, #0]
 8008cc2:	4608      	mov	r0, r1
 8008cc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cc8:	4770      	bx	lr

08008cca <__sfputs_r>:
 8008cca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ccc:	4606      	mov	r6, r0
 8008cce:	460f      	mov	r7, r1
 8008cd0:	4614      	mov	r4, r2
 8008cd2:	18d5      	adds	r5, r2, r3
 8008cd4:	42ac      	cmp	r4, r5
 8008cd6:	d101      	bne.n	8008cdc <__sfputs_r+0x12>
 8008cd8:	2000      	movs	r0, #0
 8008cda:	e007      	b.n	8008cec <__sfputs_r+0x22>
 8008cdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ce0:	463a      	mov	r2, r7
 8008ce2:	4630      	mov	r0, r6
 8008ce4:	f7ff ffda 	bl	8008c9c <__sfputc_r>
 8008ce8:	1c43      	adds	r3, r0, #1
 8008cea:	d1f3      	bne.n	8008cd4 <__sfputs_r+0xa>
 8008cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008cf0 <_vfiprintf_r>:
 8008cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf4:	460d      	mov	r5, r1
 8008cf6:	b09d      	sub	sp, #116	@ 0x74
 8008cf8:	4614      	mov	r4, r2
 8008cfa:	4698      	mov	r8, r3
 8008cfc:	4606      	mov	r6, r0
 8008cfe:	b118      	cbz	r0, 8008d08 <_vfiprintf_r+0x18>
 8008d00:	6a03      	ldr	r3, [r0, #32]
 8008d02:	b90b      	cbnz	r3, 8008d08 <_vfiprintf_r+0x18>
 8008d04:	f7ff fdca 	bl	800889c <__sinit>
 8008d08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d0a:	07d9      	lsls	r1, r3, #31
 8008d0c:	d405      	bmi.n	8008d1a <_vfiprintf_r+0x2a>
 8008d0e:	89ab      	ldrh	r3, [r5, #12]
 8008d10:	059a      	lsls	r2, r3, #22
 8008d12:	d402      	bmi.n	8008d1a <_vfiprintf_r+0x2a>
 8008d14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d16:	f7ff fec6 	bl	8008aa6 <__retarget_lock_acquire_recursive>
 8008d1a:	89ab      	ldrh	r3, [r5, #12]
 8008d1c:	071b      	lsls	r3, r3, #28
 8008d1e:	d501      	bpl.n	8008d24 <_vfiprintf_r+0x34>
 8008d20:	692b      	ldr	r3, [r5, #16]
 8008d22:	b99b      	cbnz	r3, 8008d4c <_vfiprintf_r+0x5c>
 8008d24:	4629      	mov	r1, r5
 8008d26:	4630      	mov	r0, r6
 8008d28:	f000 fb70 	bl	800940c <__swsetup_r>
 8008d2c:	b170      	cbz	r0, 8008d4c <_vfiprintf_r+0x5c>
 8008d2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d30:	07dc      	lsls	r4, r3, #31
 8008d32:	d504      	bpl.n	8008d3e <_vfiprintf_r+0x4e>
 8008d34:	f04f 30ff 	mov.w	r0, #4294967295
 8008d38:	b01d      	add	sp, #116	@ 0x74
 8008d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d3e:	89ab      	ldrh	r3, [r5, #12]
 8008d40:	0598      	lsls	r0, r3, #22
 8008d42:	d4f7      	bmi.n	8008d34 <_vfiprintf_r+0x44>
 8008d44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d46:	f7ff feaf 	bl	8008aa8 <__retarget_lock_release_recursive>
 8008d4a:	e7f3      	b.n	8008d34 <_vfiprintf_r+0x44>
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d50:	2320      	movs	r3, #32
 8008d52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d56:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d5a:	2330      	movs	r3, #48	@ 0x30
 8008d5c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008f0c <_vfiprintf_r+0x21c>
 8008d60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d64:	f04f 0901 	mov.w	r9, #1
 8008d68:	4623      	mov	r3, r4
 8008d6a:	469a      	mov	sl, r3
 8008d6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d70:	b10a      	cbz	r2, 8008d76 <_vfiprintf_r+0x86>
 8008d72:	2a25      	cmp	r2, #37	@ 0x25
 8008d74:	d1f9      	bne.n	8008d6a <_vfiprintf_r+0x7a>
 8008d76:	ebba 0b04 	subs.w	fp, sl, r4
 8008d7a:	d00b      	beq.n	8008d94 <_vfiprintf_r+0xa4>
 8008d7c:	465b      	mov	r3, fp
 8008d7e:	4622      	mov	r2, r4
 8008d80:	4629      	mov	r1, r5
 8008d82:	4630      	mov	r0, r6
 8008d84:	f7ff ffa1 	bl	8008cca <__sfputs_r>
 8008d88:	3001      	adds	r0, #1
 8008d8a:	f000 80a7 	beq.w	8008edc <_vfiprintf_r+0x1ec>
 8008d8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d90:	445a      	add	r2, fp
 8008d92:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d94:	f89a 3000 	ldrb.w	r3, [sl]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	f000 809f 	beq.w	8008edc <_vfiprintf_r+0x1ec>
 8008d9e:	2300      	movs	r3, #0
 8008da0:	f04f 32ff 	mov.w	r2, #4294967295
 8008da4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008da8:	f10a 0a01 	add.w	sl, sl, #1
 8008dac:	9304      	str	r3, [sp, #16]
 8008dae:	9307      	str	r3, [sp, #28]
 8008db0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008db4:	931a      	str	r3, [sp, #104]	@ 0x68
 8008db6:	4654      	mov	r4, sl
 8008db8:	2205      	movs	r2, #5
 8008dba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dbe:	4853      	ldr	r0, [pc, #332]	@ (8008f0c <_vfiprintf_r+0x21c>)
 8008dc0:	f7f7 fa8e 	bl	80002e0 <memchr>
 8008dc4:	9a04      	ldr	r2, [sp, #16]
 8008dc6:	b9d8      	cbnz	r0, 8008e00 <_vfiprintf_r+0x110>
 8008dc8:	06d1      	lsls	r1, r2, #27
 8008dca:	bf44      	itt	mi
 8008dcc:	2320      	movmi	r3, #32
 8008dce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dd2:	0713      	lsls	r3, r2, #28
 8008dd4:	bf44      	itt	mi
 8008dd6:	232b      	movmi	r3, #43	@ 0x2b
 8008dd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ddc:	f89a 3000 	ldrb.w	r3, [sl]
 8008de0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008de2:	d015      	beq.n	8008e10 <_vfiprintf_r+0x120>
 8008de4:	9a07      	ldr	r2, [sp, #28]
 8008de6:	4654      	mov	r4, sl
 8008de8:	2000      	movs	r0, #0
 8008dea:	f04f 0c0a 	mov.w	ip, #10
 8008dee:	4621      	mov	r1, r4
 8008df0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008df4:	3b30      	subs	r3, #48	@ 0x30
 8008df6:	2b09      	cmp	r3, #9
 8008df8:	d94b      	bls.n	8008e92 <_vfiprintf_r+0x1a2>
 8008dfa:	b1b0      	cbz	r0, 8008e2a <_vfiprintf_r+0x13a>
 8008dfc:	9207      	str	r2, [sp, #28]
 8008dfe:	e014      	b.n	8008e2a <_vfiprintf_r+0x13a>
 8008e00:	eba0 0308 	sub.w	r3, r0, r8
 8008e04:	fa09 f303 	lsl.w	r3, r9, r3
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	9304      	str	r3, [sp, #16]
 8008e0c:	46a2      	mov	sl, r4
 8008e0e:	e7d2      	b.n	8008db6 <_vfiprintf_r+0xc6>
 8008e10:	9b03      	ldr	r3, [sp, #12]
 8008e12:	1d19      	adds	r1, r3, #4
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	9103      	str	r1, [sp, #12]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	bfbb      	ittet	lt
 8008e1c:	425b      	neglt	r3, r3
 8008e1e:	f042 0202 	orrlt.w	r2, r2, #2
 8008e22:	9307      	strge	r3, [sp, #28]
 8008e24:	9307      	strlt	r3, [sp, #28]
 8008e26:	bfb8      	it	lt
 8008e28:	9204      	strlt	r2, [sp, #16]
 8008e2a:	7823      	ldrb	r3, [r4, #0]
 8008e2c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e2e:	d10a      	bne.n	8008e46 <_vfiprintf_r+0x156>
 8008e30:	7863      	ldrb	r3, [r4, #1]
 8008e32:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e34:	d132      	bne.n	8008e9c <_vfiprintf_r+0x1ac>
 8008e36:	9b03      	ldr	r3, [sp, #12]
 8008e38:	1d1a      	adds	r2, r3, #4
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	9203      	str	r2, [sp, #12]
 8008e3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e42:	3402      	adds	r4, #2
 8008e44:	9305      	str	r3, [sp, #20]
 8008e46:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008f1c <_vfiprintf_r+0x22c>
 8008e4a:	7821      	ldrb	r1, [r4, #0]
 8008e4c:	2203      	movs	r2, #3
 8008e4e:	4650      	mov	r0, sl
 8008e50:	f7f7 fa46 	bl	80002e0 <memchr>
 8008e54:	b138      	cbz	r0, 8008e66 <_vfiprintf_r+0x176>
 8008e56:	9b04      	ldr	r3, [sp, #16]
 8008e58:	eba0 000a 	sub.w	r0, r0, sl
 8008e5c:	2240      	movs	r2, #64	@ 0x40
 8008e5e:	4082      	lsls	r2, r0
 8008e60:	4313      	orrs	r3, r2
 8008e62:	3401      	adds	r4, #1
 8008e64:	9304      	str	r3, [sp, #16]
 8008e66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e6a:	4829      	ldr	r0, [pc, #164]	@ (8008f10 <_vfiprintf_r+0x220>)
 8008e6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e70:	2206      	movs	r2, #6
 8008e72:	f7f7 fa35 	bl	80002e0 <memchr>
 8008e76:	2800      	cmp	r0, #0
 8008e78:	d03f      	beq.n	8008efa <_vfiprintf_r+0x20a>
 8008e7a:	4b26      	ldr	r3, [pc, #152]	@ (8008f14 <_vfiprintf_r+0x224>)
 8008e7c:	bb1b      	cbnz	r3, 8008ec6 <_vfiprintf_r+0x1d6>
 8008e7e:	9b03      	ldr	r3, [sp, #12]
 8008e80:	3307      	adds	r3, #7
 8008e82:	f023 0307 	bic.w	r3, r3, #7
 8008e86:	3308      	adds	r3, #8
 8008e88:	9303      	str	r3, [sp, #12]
 8008e8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e8c:	443b      	add	r3, r7
 8008e8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e90:	e76a      	b.n	8008d68 <_vfiprintf_r+0x78>
 8008e92:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e96:	460c      	mov	r4, r1
 8008e98:	2001      	movs	r0, #1
 8008e9a:	e7a8      	b.n	8008dee <_vfiprintf_r+0xfe>
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	3401      	adds	r4, #1
 8008ea0:	9305      	str	r3, [sp, #20]
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	f04f 0c0a 	mov.w	ip, #10
 8008ea8:	4620      	mov	r0, r4
 8008eaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008eae:	3a30      	subs	r2, #48	@ 0x30
 8008eb0:	2a09      	cmp	r2, #9
 8008eb2:	d903      	bls.n	8008ebc <_vfiprintf_r+0x1cc>
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d0c6      	beq.n	8008e46 <_vfiprintf_r+0x156>
 8008eb8:	9105      	str	r1, [sp, #20]
 8008eba:	e7c4      	b.n	8008e46 <_vfiprintf_r+0x156>
 8008ebc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ec0:	4604      	mov	r4, r0
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e7f0      	b.n	8008ea8 <_vfiprintf_r+0x1b8>
 8008ec6:	ab03      	add	r3, sp, #12
 8008ec8:	9300      	str	r3, [sp, #0]
 8008eca:	462a      	mov	r2, r5
 8008ecc:	4b12      	ldr	r3, [pc, #72]	@ (8008f18 <_vfiprintf_r+0x228>)
 8008ece:	a904      	add	r1, sp, #16
 8008ed0:	4630      	mov	r0, r6
 8008ed2:	f3af 8000 	nop.w
 8008ed6:	4607      	mov	r7, r0
 8008ed8:	1c78      	adds	r0, r7, #1
 8008eda:	d1d6      	bne.n	8008e8a <_vfiprintf_r+0x19a>
 8008edc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ede:	07d9      	lsls	r1, r3, #31
 8008ee0:	d405      	bmi.n	8008eee <_vfiprintf_r+0x1fe>
 8008ee2:	89ab      	ldrh	r3, [r5, #12]
 8008ee4:	059a      	lsls	r2, r3, #22
 8008ee6:	d402      	bmi.n	8008eee <_vfiprintf_r+0x1fe>
 8008ee8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008eea:	f7ff fddd 	bl	8008aa8 <__retarget_lock_release_recursive>
 8008eee:	89ab      	ldrh	r3, [r5, #12]
 8008ef0:	065b      	lsls	r3, r3, #25
 8008ef2:	f53f af1f 	bmi.w	8008d34 <_vfiprintf_r+0x44>
 8008ef6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ef8:	e71e      	b.n	8008d38 <_vfiprintf_r+0x48>
 8008efa:	ab03      	add	r3, sp, #12
 8008efc:	9300      	str	r3, [sp, #0]
 8008efe:	462a      	mov	r2, r5
 8008f00:	4b05      	ldr	r3, [pc, #20]	@ (8008f18 <_vfiprintf_r+0x228>)
 8008f02:	a904      	add	r1, sp, #16
 8008f04:	4630      	mov	r0, r6
 8008f06:	f000 f879 	bl	8008ffc <_printf_i>
 8008f0a:	e7e4      	b.n	8008ed6 <_vfiprintf_r+0x1e6>
 8008f0c:	0800adf4 	.word	0x0800adf4
 8008f10:	0800adfe 	.word	0x0800adfe
 8008f14:	00000000 	.word	0x00000000
 8008f18:	08008ccb 	.word	0x08008ccb
 8008f1c:	0800adfa 	.word	0x0800adfa

08008f20 <_printf_common>:
 8008f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f24:	4616      	mov	r6, r2
 8008f26:	4698      	mov	r8, r3
 8008f28:	688a      	ldr	r2, [r1, #8]
 8008f2a:	690b      	ldr	r3, [r1, #16]
 8008f2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008f30:	4293      	cmp	r3, r2
 8008f32:	bfb8      	it	lt
 8008f34:	4613      	movlt	r3, r2
 8008f36:	6033      	str	r3, [r6, #0]
 8008f38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008f3c:	4607      	mov	r7, r0
 8008f3e:	460c      	mov	r4, r1
 8008f40:	b10a      	cbz	r2, 8008f46 <_printf_common+0x26>
 8008f42:	3301      	adds	r3, #1
 8008f44:	6033      	str	r3, [r6, #0]
 8008f46:	6823      	ldr	r3, [r4, #0]
 8008f48:	0699      	lsls	r1, r3, #26
 8008f4a:	bf42      	ittt	mi
 8008f4c:	6833      	ldrmi	r3, [r6, #0]
 8008f4e:	3302      	addmi	r3, #2
 8008f50:	6033      	strmi	r3, [r6, #0]
 8008f52:	6825      	ldr	r5, [r4, #0]
 8008f54:	f015 0506 	ands.w	r5, r5, #6
 8008f58:	d106      	bne.n	8008f68 <_printf_common+0x48>
 8008f5a:	f104 0a19 	add.w	sl, r4, #25
 8008f5e:	68e3      	ldr	r3, [r4, #12]
 8008f60:	6832      	ldr	r2, [r6, #0]
 8008f62:	1a9b      	subs	r3, r3, r2
 8008f64:	42ab      	cmp	r3, r5
 8008f66:	dc26      	bgt.n	8008fb6 <_printf_common+0x96>
 8008f68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008f6c:	6822      	ldr	r2, [r4, #0]
 8008f6e:	3b00      	subs	r3, #0
 8008f70:	bf18      	it	ne
 8008f72:	2301      	movne	r3, #1
 8008f74:	0692      	lsls	r2, r2, #26
 8008f76:	d42b      	bmi.n	8008fd0 <_printf_common+0xb0>
 8008f78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008f7c:	4641      	mov	r1, r8
 8008f7e:	4638      	mov	r0, r7
 8008f80:	47c8      	blx	r9
 8008f82:	3001      	adds	r0, #1
 8008f84:	d01e      	beq.n	8008fc4 <_printf_common+0xa4>
 8008f86:	6823      	ldr	r3, [r4, #0]
 8008f88:	6922      	ldr	r2, [r4, #16]
 8008f8a:	f003 0306 	and.w	r3, r3, #6
 8008f8e:	2b04      	cmp	r3, #4
 8008f90:	bf02      	ittt	eq
 8008f92:	68e5      	ldreq	r5, [r4, #12]
 8008f94:	6833      	ldreq	r3, [r6, #0]
 8008f96:	1aed      	subeq	r5, r5, r3
 8008f98:	68a3      	ldr	r3, [r4, #8]
 8008f9a:	bf0c      	ite	eq
 8008f9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fa0:	2500      	movne	r5, #0
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	bfc4      	itt	gt
 8008fa6:	1a9b      	subgt	r3, r3, r2
 8008fa8:	18ed      	addgt	r5, r5, r3
 8008faa:	2600      	movs	r6, #0
 8008fac:	341a      	adds	r4, #26
 8008fae:	42b5      	cmp	r5, r6
 8008fb0:	d11a      	bne.n	8008fe8 <_printf_common+0xc8>
 8008fb2:	2000      	movs	r0, #0
 8008fb4:	e008      	b.n	8008fc8 <_printf_common+0xa8>
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	4652      	mov	r2, sl
 8008fba:	4641      	mov	r1, r8
 8008fbc:	4638      	mov	r0, r7
 8008fbe:	47c8      	blx	r9
 8008fc0:	3001      	adds	r0, #1
 8008fc2:	d103      	bne.n	8008fcc <_printf_common+0xac>
 8008fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fcc:	3501      	adds	r5, #1
 8008fce:	e7c6      	b.n	8008f5e <_printf_common+0x3e>
 8008fd0:	18e1      	adds	r1, r4, r3
 8008fd2:	1c5a      	adds	r2, r3, #1
 8008fd4:	2030      	movs	r0, #48	@ 0x30
 8008fd6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008fda:	4422      	add	r2, r4
 8008fdc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008fe0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008fe4:	3302      	adds	r3, #2
 8008fe6:	e7c7      	b.n	8008f78 <_printf_common+0x58>
 8008fe8:	2301      	movs	r3, #1
 8008fea:	4622      	mov	r2, r4
 8008fec:	4641      	mov	r1, r8
 8008fee:	4638      	mov	r0, r7
 8008ff0:	47c8      	blx	r9
 8008ff2:	3001      	adds	r0, #1
 8008ff4:	d0e6      	beq.n	8008fc4 <_printf_common+0xa4>
 8008ff6:	3601      	adds	r6, #1
 8008ff8:	e7d9      	b.n	8008fae <_printf_common+0x8e>
	...

08008ffc <_printf_i>:
 8008ffc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009000:	7e0f      	ldrb	r7, [r1, #24]
 8009002:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009004:	2f78      	cmp	r7, #120	@ 0x78
 8009006:	4691      	mov	r9, r2
 8009008:	4680      	mov	r8, r0
 800900a:	460c      	mov	r4, r1
 800900c:	469a      	mov	sl, r3
 800900e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009012:	d807      	bhi.n	8009024 <_printf_i+0x28>
 8009014:	2f62      	cmp	r7, #98	@ 0x62
 8009016:	d80a      	bhi.n	800902e <_printf_i+0x32>
 8009018:	2f00      	cmp	r7, #0
 800901a:	f000 80d1 	beq.w	80091c0 <_printf_i+0x1c4>
 800901e:	2f58      	cmp	r7, #88	@ 0x58
 8009020:	f000 80b8 	beq.w	8009194 <_printf_i+0x198>
 8009024:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009028:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800902c:	e03a      	b.n	80090a4 <_printf_i+0xa8>
 800902e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009032:	2b15      	cmp	r3, #21
 8009034:	d8f6      	bhi.n	8009024 <_printf_i+0x28>
 8009036:	a101      	add	r1, pc, #4	@ (adr r1, 800903c <_printf_i+0x40>)
 8009038:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800903c:	08009095 	.word	0x08009095
 8009040:	080090a9 	.word	0x080090a9
 8009044:	08009025 	.word	0x08009025
 8009048:	08009025 	.word	0x08009025
 800904c:	08009025 	.word	0x08009025
 8009050:	08009025 	.word	0x08009025
 8009054:	080090a9 	.word	0x080090a9
 8009058:	08009025 	.word	0x08009025
 800905c:	08009025 	.word	0x08009025
 8009060:	08009025 	.word	0x08009025
 8009064:	08009025 	.word	0x08009025
 8009068:	080091a7 	.word	0x080091a7
 800906c:	080090d3 	.word	0x080090d3
 8009070:	08009161 	.word	0x08009161
 8009074:	08009025 	.word	0x08009025
 8009078:	08009025 	.word	0x08009025
 800907c:	080091c9 	.word	0x080091c9
 8009080:	08009025 	.word	0x08009025
 8009084:	080090d3 	.word	0x080090d3
 8009088:	08009025 	.word	0x08009025
 800908c:	08009025 	.word	0x08009025
 8009090:	08009169 	.word	0x08009169
 8009094:	6833      	ldr	r3, [r6, #0]
 8009096:	1d1a      	adds	r2, r3, #4
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	6032      	str	r2, [r6, #0]
 800909c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80090a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80090a4:	2301      	movs	r3, #1
 80090a6:	e09c      	b.n	80091e2 <_printf_i+0x1e6>
 80090a8:	6833      	ldr	r3, [r6, #0]
 80090aa:	6820      	ldr	r0, [r4, #0]
 80090ac:	1d19      	adds	r1, r3, #4
 80090ae:	6031      	str	r1, [r6, #0]
 80090b0:	0606      	lsls	r6, r0, #24
 80090b2:	d501      	bpl.n	80090b8 <_printf_i+0xbc>
 80090b4:	681d      	ldr	r5, [r3, #0]
 80090b6:	e003      	b.n	80090c0 <_printf_i+0xc4>
 80090b8:	0645      	lsls	r5, r0, #25
 80090ba:	d5fb      	bpl.n	80090b4 <_printf_i+0xb8>
 80090bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80090c0:	2d00      	cmp	r5, #0
 80090c2:	da03      	bge.n	80090cc <_printf_i+0xd0>
 80090c4:	232d      	movs	r3, #45	@ 0x2d
 80090c6:	426d      	negs	r5, r5
 80090c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090cc:	4858      	ldr	r0, [pc, #352]	@ (8009230 <_printf_i+0x234>)
 80090ce:	230a      	movs	r3, #10
 80090d0:	e011      	b.n	80090f6 <_printf_i+0xfa>
 80090d2:	6821      	ldr	r1, [r4, #0]
 80090d4:	6833      	ldr	r3, [r6, #0]
 80090d6:	0608      	lsls	r0, r1, #24
 80090d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80090dc:	d402      	bmi.n	80090e4 <_printf_i+0xe8>
 80090de:	0649      	lsls	r1, r1, #25
 80090e0:	bf48      	it	mi
 80090e2:	b2ad      	uxthmi	r5, r5
 80090e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80090e6:	4852      	ldr	r0, [pc, #328]	@ (8009230 <_printf_i+0x234>)
 80090e8:	6033      	str	r3, [r6, #0]
 80090ea:	bf14      	ite	ne
 80090ec:	230a      	movne	r3, #10
 80090ee:	2308      	moveq	r3, #8
 80090f0:	2100      	movs	r1, #0
 80090f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80090f6:	6866      	ldr	r6, [r4, #4]
 80090f8:	60a6      	str	r6, [r4, #8]
 80090fa:	2e00      	cmp	r6, #0
 80090fc:	db05      	blt.n	800910a <_printf_i+0x10e>
 80090fe:	6821      	ldr	r1, [r4, #0]
 8009100:	432e      	orrs	r6, r5
 8009102:	f021 0104 	bic.w	r1, r1, #4
 8009106:	6021      	str	r1, [r4, #0]
 8009108:	d04b      	beq.n	80091a2 <_printf_i+0x1a6>
 800910a:	4616      	mov	r6, r2
 800910c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009110:	fb03 5711 	mls	r7, r3, r1, r5
 8009114:	5dc7      	ldrb	r7, [r0, r7]
 8009116:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800911a:	462f      	mov	r7, r5
 800911c:	42bb      	cmp	r3, r7
 800911e:	460d      	mov	r5, r1
 8009120:	d9f4      	bls.n	800910c <_printf_i+0x110>
 8009122:	2b08      	cmp	r3, #8
 8009124:	d10b      	bne.n	800913e <_printf_i+0x142>
 8009126:	6823      	ldr	r3, [r4, #0]
 8009128:	07df      	lsls	r7, r3, #31
 800912a:	d508      	bpl.n	800913e <_printf_i+0x142>
 800912c:	6923      	ldr	r3, [r4, #16]
 800912e:	6861      	ldr	r1, [r4, #4]
 8009130:	4299      	cmp	r1, r3
 8009132:	bfde      	ittt	le
 8009134:	2330      	movle	r3, #48	@ 0x30
 8009136:	f806 3c01 	strble.w	r3, [r6, #-1]
 800913a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800913e:	1b92      	subs	r2, r2, r6
 8009140:	6122      	str	r2, [r4, #16]
 8009142:	f8cd a000 	str.w	sl, [sp]
 8009146:	464b      	mov	r3, r9
 8009148:	aa03      	add	r2, sp, #12
 800914a:	4621      	mov	r1, r4
 800914c:	4640      	mov	r0, r8
 800914e:	f7ff fee7 	bl	8008f20 <_printf_common>
 8009152:	3001      	adds	r0, #1
 8009154:	d14a      	bne.n	80091ec <_printf_i+0x1f0>
 8009156:	f04f 30ff 	mov.w	r0, #4294967295
 800915a:	b004      	add	sp, #16
 800915c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009160:	6823      	ldr	r3, [r4, #0]
 8009162:	f043 0320 	orr.w	r3, r3, #32
 8009166:	6023      	str	r3, [r4, #0]
 8009168:	4832      	ldr	r0, [pc, #200]	@ (8009234 <_printf_i+0x238>)
 800916a:	2778      	movs	r7, #120	@ 0x78
 800916c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009170:	6823      	ldr	r3, [r4, #0]
 8009172:	6831      	ldr	r1, [r6, #0]
 8009174:	061f      	lsls	r7, r3, #24
 8009176:	f851 5b04 	ldr.w	r5, [r1], #4
 800917a:	d402      	bmi.n	8009182 <_printf_i+0x186>
 800917c:	065f      	lsls	r7, r3, #25
 800917e:	bf48      	it	mi
 8009180:	b2ad      	uxthmi	r5, r5
 8009182:	6031      	str	r1, [r6, #0]
 8009184:	07d9      	lsls	r1, r3, #31
 8009186:	bf44      	itt	mi
 8009188:	f043 0320 	orrmi.w	r3, r3, #32
 800918c:	6023      	strmi	r3, [r4, #0]
 800918e:	b11d      	cbz	r5, 8009198 <_printf_i+0x19c>
 8009190:	2310      	movs	r3, #16
 8009192:	e7ad      	b.n	80090f0 <_printf_i+0xf4>
 8009194:	4826      	ldr	r0, [pc, #152]	@ (8009230 <_printf_i+0x234>)
 8009196:	e7e9      	b.n	800916c <_printf_i+0x170>
 8009198:	6823      	ldr	r3, [r4, #0]
 800919a:	f023 0320 	bic.w	r3, r3, #32
 800919e:	6023      	str	r3, [r4, #0]
 80091a0:	e7f6      	b.n	8009190 <_printf_i+0x194>
 80091a2:	4616      	mov	r6, r2
 80091a4:	e7bd      	b.n	8009122 <_printf_i+0x126>
 80091a6:	6833      	ldr	r3, [r6, #0]
 80091a8:	6825      	ldr	r5, [r4, #0]
 80091aa:	6961      	ldr	r1, [r4, #20]
 80091ac:	1d18      	adds	r0, r3, #4
 80091ae:	6030      	str	r0, [r6, #0]
 80091b0:	062e      	lsls	r6, r5, #24
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	d501      	bpl.n	80091ba <_printf_i+0x1be>
 80091b6:	6019      	str	r1, [r3, #0]
 80091b8:	e002      	b.n	80091c0 <_printf_i+0x1c4>
 80091ba:	0668      	lsls	r0, r5, #25
 80091bc:	d5fb      	bpl.n	80091b6 <_printf_i+0x1ba>
 80091be:	8019      	strh	r1, [r3, #0]
 80091c0:	2300      	movs	r3, #0
 80091c2:	6123      	str	r3, [r4, #16]
 80091c4:	4616      	mov	r6, r2
 80091c6:	e7bc      	b.n	8009142 <_printf_i+0x146>
 80091c8:	6833      	ldr	r3, [r6, #0]
 80091ca:	1d1a      	adds	r2, r3, #4
 80091cc:	6032      	str	r2, [r6, #0]
 80091ce:	681e      	ldr	r6, [r3, #0]
 80091d0:	6862      	ldr	r2, [r4, #4]
 80091d2:	2100      	movs	r1, #0
 80091d4:	4630      	mov	r0, r6
 80091d6:	f7f7 f883 	bl	80002e0 <memchr>
 80091da:	b108      	cbz	r0, 80091e0 <_printf_i+0x1e4>
 80091dc:	1b80      	subs	r0, r0, r6
 80091de:	6060      	str	r0, [r4, #4]
 80091e0:	6863      	ldr	r3, [r4, #4]
 80091e2:	6123      	str	r3, [r4, #16]
 80091e4:	2300      	movs	r3, #0
 80091e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091ea:	e7aa      	b.n	8009142 <_printf_i+0x146>
 80091ec:	6923      	ldr	r3, [r4, #16]
 80091ee:	4632      	mov	r2, r6
 80091f0:	4649      	mov	r1, r9
 80091f2:	4640      	mov	r0, r8
 80091f4:	47d0      	blx	sl
 80091f6:	3001      	adds	r0, #1
 80091f8:	d0ad      	beq.n	8009156 <_printf_i+0x15a>
 80091fa:	6823      	ldr	r3, [r4, #0]
 80091fc:	079b      	lsls	r3, r3, #30
 80091fe:	d413      	bmi.n	8009228 <_printf_i+0x22c>
 8009200:	68e0      	ldr	r0, [r4, #12]
 8009202:	9b03      	ldr	r3, [sp, #12]
 8009204:	4298      	cmp	r0, r3
 8009206:	bfb8      	it	lt
 8009208:	4618      	movlt	r0, r3
 800920a:	e7a6      	b.n	800915a <_printf_i+0x15e>
 800920c:	2301      	movs	r3, #1
 800920e:	4632      	mov	r2, r6
 8009210:	4649      	mov	r1, r9
 8009212:	4640      	mov	r0, r8
 8009214:	47d0      	blx	sl
 8009216:	3001      	adds	r0, #1
 8009218:	d09d      	beq.n	8009156 <_printf_i+0x15a>
 800921a:	3501      	adds	r5, #1
 800921c:	68e3      	ldr	r3, [r4, #12]
 800921e:	9903      	ldr	r1, [sp, #12]
 8009220:	1a5b      	subs	r3, r3, r1
 8009222:	42ab      	cmp	r3, r5
 8009224:	dcf2      	bgt.n	800920c <_printf_i+0x210>
 8009226:	e7eb      	b.n	8009200 <_printf_i+0x204>
 8009228:	2500      	movs	r5, #0
 800922a:	f104 0619 	add.w	r6, r4, #25
 800922e:	e7f5      	b.n	800921c <_printf_i+0x220>
 8009230:	0800ae05 	.word	0x0800ae05
 8009234:	0800ae16 	.word	0x0800ae16

08009238 <__sflush_r>:
 8009238:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800923c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009240:	0716      	lsls	r6, r2, #28
 8009242:	4605      	mov	r5, r0
 8009244:	460c      	mov	r4, r1
 8009246:	d454      	bmi.n	80092f2 <__sflush_r+0xba>
 8009248:	684b      	ldr	r3, [r1, #4]
 800924a:	2b00      	cmp	r3, #0
 800924c:	dc02      	bgt.n	8009254 <__sflush_r+0x1c>
 800924e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009250:	2b00      	cmp	r3, #0
 8009252:	dd48      	ble.n	80092e6 <__sflush_r+0xae>
 8009254:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009256:	2e00      	cmp	r6, #0
 8009258:	d045      	beq.n	80092e6 <__sflush_r+0xae>
 800925a:	2300      	movs	r3, #0
 800925c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009260:	682f      	ldr	r7, [r5, #0]
 8009262:	6a21      	ldr	r1, [r4, #32]
 8009264:	602b      	str	r3, [r5, #0]
 8009266:	d030      	beq.n	80092ca <__sflush_r+0x92>
 8009268:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800926a:	89a3      	ldrh	r3, [r4, #12]
 800926c:	0759      	lsls	r1, r3, #29
 800926e:	d505      	bpl.n	800927c <__sflush_r+0x44>
 8009270:	6863      	ldr	r3, [r4, #4]
 8009272:	1ad2      	subs	r2, r2, r3
 8009274:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009276:	b10b      	cbz	r3, 800927c <__sflush_r+0x44>
 8009278:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800927a:	1ad2      	subs	r2, r2, r3
 800927c:	2300      	movs	r3, #0
 800927e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009280:	6a21      	ldr	r1, [r4, #32]
 8009282:	4628      	mov	r0, r5
 8009284:	47b0      	blx	r6
 8009286:	1c43      	adds	r3, r0, #1
 8009288:	89a3      	ldrh	r3, [r4, #12]
 800928a:	d106      	bne.n	800929a <__sflush_r+0x62>
 800928c:	6829      	ldr	r1, [r5, #0]
 800928e:	291d      	cmp	r1, #29
 8009290:	d82b      	bhi.n	80092ea <__sflush_r+0xb2>
 8009292:	4a2a      	ldr	r2, [pc, #168]	@ (800933c <__sflush_r+0x104>)
 8009294:	40ca      	lsrs	r2, r1
 8009296:	07d6      	lsls	r6, r2, #31
 8009298:	d527      	bpl.n	80092ea <__sflush_r+0xb2>
 800929a:	2200      	movs	r2, #0
 800929c:	6062      	str	r2, [r4, #4]
 800929e:	04d9      	lsls	r1, r3, #19
 80092a0:	6922      	ldr	r2, [r4, #16]
 80092a2:	6022      	str	r2, [r4, #0]
 80092a4:	d504      	bpl.n	80092b0 <__sflush_r+0x78>
 80092a6:	1c42      	adds	r2, r0, #1
 80092a8:	d101      	bne.n	80092ae <__sflush_r+0x76>
 80092aa:	682b      	ldr	r3, [r5, #0]
 80092ac:	b903      	cbnz	r3, 80092b0 <__sflush_r+0x78>
 80092ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80092b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80092b2:	602f      	str	r7, [r5, #0]
 80092b4:	b1b9      	cbz	r1, 80092e6 <__sflush_r+0xae>
 80092b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80092ba:	4299      	cmp	r1, r3
 80092bc:	d002      	beq.n	80092c4 <__sflush_r+0x8c>
 80092be:	4628      	mov	r0, r5
 80092c0:	f7ff fbf4 	bl	8008aac <_free_r>
 80092c4:	2300      	movs	r3, #0
 80092c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80092c8:	e00d      	b.n	80092e6 <__sflush_r+0xae>
 80092ca:	2301      	movs	r3, #1
 80092cc:	4628      	mov	r0, r5
 80092ce:	47b0      	blx	r6
 80092d0:	4602      	mov	r2, r0
 80092d2:	1c50      	adds	r0, r2, #1
 80092d4:	d1c9      	bne.n	800926a <__sflush_r+0x32>
 80092d6:	682b      	ldr	r3, [r5, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d0c6      	beq.n	800926a <__sflush_r+0x32>
 80092dc:	2b1d      	cmp	r3, #29
 80092de:	d001      	beq.n	80092e4 <__sflush_r+0xac>
 80092e0:	2b16      	cmp	r3, #22
 80092e2:	d11e      	bne.n	8009322 <__sflush_r+0xea>
 80092e4:	602f      	str	r7, [r5, #0]
 80092e6:	2000      	movs	r0, #0
 80092e8:	e022      	b.n	8009330 <__sflush_r+0xf8>
 80092ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092ee:	b21b      	sxth	r3, r3
 80092f0:	e01b      	b.n	800932a <__sflush_r+0xf2>
 80092f2:	690f      	ldr	r7, [r1, #16]
 80092f4:	2f00      	cmp	r7, #0
 80092f6:	d0f6      	beq.n	80092e6 <__sflush_r+0xae>
 80092f8:	0793      	lsls	r3, r2, #30
 80092fa:	680e      	ldr	r6, [r1, #0]
 80092fc:	bf08      	it	eq
 80092fe:	694b      	ldreq	r3, [r1, #20]
 8009300:	600f      	str	r7, [r1, #0]
 8009302:	bf18      	it	ne
 8009304:	2300      	movne	r3, #0
 8009306:	eba6 0807 	sub.w	r8, r6, r7
 800930a:	608b      	str	r3, [r1, #8]
 800930c:	f1b8 0f00 	cmp.w	r8, #0
 8009310:	dde9      	ble.n	80092e6 <__sflush_r+0xae>
 8009312:	6a21      	ldr	r1, [r4, #32]
 8009314:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009316:	4643      	mov	r3, r8
 8009318:	463a      	mov	r2, r7
 800931a:	4628      	mov	r0, r5
 800931c:	47b0      	blx	r6
 800931e:	2800      	cmp	r0, #0
 8009320:	dc08      	bgt.n	8009334 <__sflush_r+0xfc>
 8009322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009326:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800932a:	81a3      	strh	r3, [r4, #12]
 800932c:	f04f 30ff 	mov.w	r0, #4294967295
 8009330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009334:	4407      	add	r7, r0
 8009336:	eba8 0800 	sub.w	r8, r8, r0
 800933a:	e7e7      	b.n	800930c <__sflush_r+0xd4>
 800933c:	20400001 	.word	0x20400001

08009340 <_fflush_r>:
 8009340:	b538      	push	{r3, r4, r5, lr}
 8009342:	690b      	ldr	r3, [r1, #16]
 8009344:	4605      	mov	r5, r0
 8009346:	460c      	mov	r4, r1
 8009348:	b913      	cbnz	r3, 8009350 <_fflush_r+0x10>
 800934a:	2500      	movs	r5, #0
 800934c:	4628      	mov	r0, r5
 800934e:	bd38      	pop	{r3, r4, r5, pc}
 8009350:	b118      	cbz	r0, 800935a <_fflush_r+0x1a>
 8009352:	6a03      	ldr	r3, [r0, #32]
 8009354:	b90b      	cbnz	r3, 800935a <_fflush_r+0x1a>
 8009356:	f7ff faa1 	bl	800889c <__sinit>
 800935a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d0f3      	beq.n	800934a <_fflush_r+0xa>
 8009362:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009364:	07d0      	lsls	r0, r2, #31
 8009366:	d404      	bmi.n	8009372 <_fflush_r+0x32>
 8009368:	0599      	lsls	r1, r3, #22
 800936a:	d402      	bmi.n	8009372 <_fflush_r+0x32>
 800936c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800936e:	f7ff fb9a 	bl	8008aa6 <__retarget_lock_acquire_recursive>
 8009372:	4628      	mov	r0, r5
 8009374:	4621      	mov	r1, r4
 8009376:	f7ff ff5f 	bl	8009238 <__sflush_r>
 800937a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800937c:	07da      	lsls	r2, r3, #31
 800937e:	4605      	mov	r5, r0
 8009380:	d4e4      	bmi.n	800934c <_fflush_r+0xc>
 8009382:	89a3      	ldrh	r3, [r4, #12]
 8009384:	059b      	lsls	r3, r3, #22
 8009386:	d4e1      	bmi.n	800934c <_fflush_r+0xc>
 8009388:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800938a:	f7ff fb8d 	bl	8008aa8 <__retarget_lock_release_recursive>
 800938e:	e7dd      	b.n	800934c <_fflush_r+0xc>

08009390 <__swbuf_r>:
 8009390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009392:	460e      	mov	r6, r1
 8009394:	4614      	mov	r4, r2
 8009396:	4605      	mov	r5, r0
 8009398:	b118      	cbz	r0, 80093a2 <__swbuf_r+0x12>
 800939a:	6a03      	ldr	r3, [r0, #32]
 800939c:	b90b      	cbnz	r3, 80093a2 <__swbuf_r+0x12>
 800939e:	f7ff fa7d 	bl	800889c <__sinit>
 80093a2:	69a3      	ldr	r3, [r4, #24]
 80093a4:	60a3      	str	r3, [r4, #8]
 80093a6:	89a3      	ldrh	r3, [r4, #12]
 80093a8:	071a      	lsls	r2, r3, #28
 80093aa:	d501      	bpl.n	80093b0 <__swbuf_r+0x20>
 80093ac:	6923      	ldr	r3, [r4, #16]
 80093ae:	b943      	cbnz	r3, 80093c2 <__swbuf_r+0x32>
 80093b0:	4621      	mov	r1, r4
 80093b2:	4628      	mov	r0, r5
 80093b4:	f000 f82a 	bl	800940c <__swsetup_r>
 80093b8:	b118      	cbz	r0, 80093c2 <__swbuf_r+0x32>
 80093ba:	f04f 37ff 	mov.w	r7, #4294967295
 80093be:	4638      	mov	r0, r7
 80093c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093c2:	6823      	ldr	r3, [r4, #0]
 80093c4:	6922      	ldr	r2, [r4, #16]
 80093c6:	1a98      	subs	r0, r3, r2
 80093c8:	6963      	ldr	r3, [r4, #20]
 80093ca:	b2f6      	uxtb	r6, r6
 80093cc:	4283      	cmp	r3, r0
 80093ce:	4637      	mov	r7, r6
 80093d0:	dc05      	bgt.n	80093de <__swbuf_r+0x4e>
 80093d2:	4621      	mov	r1, r4
 80093d4:	4628      	mov	r0, r5
 80093d6:	f7ff ffb3 	bl	8009340 <_fflush_r>
 80093da:	2800      	cmp	r0, #0
 80093dc:	d1ed      	bne.n	80093ba <__swbuf_r+0x2a>
 80093de:	68a3      	ldr	r3, [r4, #8]
 80093e0:	3b01      	subs	r3, #1
 80093e2:	60a3      	str	r3, [r4, #8]
 80093e4:	6823      	ldr	r3, [r4, #0]
 80093e6:	1c5a      	adds	r2, r3, #1
 80093e8:	6022      	str	r2, [r4, #0]
 80093ea:	701e      	strb	r6, [r3, #0]
 80093ec:	6962      	ldr	r2, [r4, #20]
 80093ee:	1c43      	adds	r3, r0, #1
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d004      	beq.n	80093fe <__swbuf_r+0x6e>
 80093f4:	89a3      	ldrh	r3, [r4, #12]
 80093f6:	07db      	lsls	r3, r3, #31
 80093f8:	d5e1      	bpl.n	80093be <__swbuf_r+0x2e>
 80093fa:	2e0a      	cmp	r6, #10
 80093fc:	d1df      	bne.n	80093be <__swbuf_r+0x2e>
 80093fe:	4621      	mov	r1, r4
 8009400:	4628      	mov	r0, r5
 8009402:	f7ff ff9d 	bl	8009340 <_fflush_r>
 8009406:	2800      	cmp	r0, #0
 8009408:	d0d9      	beq.n	80093be <__swbuf_r+0x2e>
 800940a:	e7d6      	b.n	80093ba <__swbuf_r+0x2a>

0800940c <__swsetup_r>:
 800940c:	b538      	push	{r3, r4, r5, lr}
 800940e:	4b29      	ldr	r3, [pc, #164]	@ (80094b4 <__swsetup_r+0xa8>)
 8009410:	4605      	mov	r5, r0
 8009412:	6818      	ldr	r0, [r3, #0]
 8009414:	460c      	mov	r4, r1
 8009416:	b118      	cbz	r0, 8009420 <__swsetup_r+0x14>
 8009418:	6a03      	ldr	r3, [r0, #32]
 800941a:	b90b      	cbnz	r3, 8009420 <__swsetup_r+0x14>
 800941c:	f7ff fa3e 	bl	800889c <__sinit>
 8009420:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009424:	0719      	lsls	r1, r3, #28
 8009426:	d422      	bmi.n	800946e <__swsetup_r+0x62>
 8009428:	06da      	lsls	r2, r3, #27
 800942a:	d407      	bmi.n	800943c <__swsetup_r+0x30>
 800942c:	2209      	movs	r2, #9
 800942e:	602a      	str	r2, [r5, #0]
 8009430:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009434:	81a3      	strh	r3, [r4, #12]
 8009436:	f04f 30ff 	mov.w	r0, #4294967295
 800943a:	e033      	b.n	80094a4 <__swsetup_r+0x98>
 800943c:	0758      	lsls	r0, r3, #29
 800943e:	d512      	bpl.n	8009466 <__swsetup_r+0x5a>
 8009440:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009442:	b141      	cbz	r1, 8009456 <__swsetup_r+0x4a>
 8009444:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009448:	4299      	cmp	r1, r3
 800944a:	d002      	beq.n	8009452 <__swsetup_r+0x46>
 800944c:	4628      	mov	r0, r5
 800944e:	f7ff fb2d 	bl	8008aac <_free_r>
 8009452:	2300      	movs	r3, #0
 8009454:	6363      	str	r3, [r4, #52]	@ 0x34
 8009456:	89a3      	ldrh	r3, [r4, #12]
 8009458:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800945c:	81a3      	strh	r3, [r4, #12]
 800945e:	2300      	movs	r3, #0
 8009460:	6063      	str	r3, [r4, #4]
 8009462:	6923      	ldr	r3, [r4, #16]
 8009464:	6023      	str	r3, [r4, #0]
 8009466:	89a3      	ldrh	r3, [r4, #12]
 8009468:	f043 0308 	orr.w	r3, r3, #8
 800946c:	81a3      	strh	r3, [r4, #12]
 800946e:	6923      	ldr	r3, [r4, #16]
 8009470:	b94b      	cbnz	r3, 8009486 <__swsetup_r+0x7a>
 8009472:	89a3      	ldrh	r3, [r4, #12]
 8009474:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009478:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800947c:	d003      	beq.n	8009486 <__swsetup_r+0x7a>
 800947e:	4621      	mov	r1, r4
 8009480:	4628      	mov	r0, r5
 8009482:	f000 f84f 	bl	8009524 <__smakebuf_r>
 8009486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800948a:	f013 0201 	ands.w	r2, r3, #1
 800948e:	d00a      	beq.n	80094a6 <__swsetup_r+0x9a>
 8009490:	2200      	movs	r2, #0
 8009492:	60a2      	str	r2, [r4, #8]
 8009494:	6962      	ldr	r2, [r4, #20]
 8009496:	4252      	negs	r2, r2
 8009498:	61a2      	str	r2, [r4, #24]
 800949a:	6922      	ldr	r2, [r4, #16]
 800949c:	b942      	cbnz	r2, 80094b0 <__swsetup_r+0xa4>
 800949e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80094a2:	d1c5      	bne.n	8009430 <__swsetup_r+0x24>
 80094a4:	bd38      	pop	{r3, r4, r5, pc}
 80094a6:	0799      	lsls	r1, r3, #30
 80094a8:	bf58      	it	pl
 80094aa:	6962      	ldrpl	r2, [r4, #20]
 80094ac:	60a2      	str	r2, [r4, #8]
 80094ae:	e7f4      	b.n	800949a <__swsetup_r+0x8e>
 80094b0:	2000      	movs	r0, #0
 80094b2:	e7f7      	b.n	80094a4 <__swsetup_r+0x98>
 80094b4:	24000038 	.word	0x24000038

080094b8 <_sbrk_r>:
 80094b8:	b538      	push	{r3, r4, r5, lr}
 80094ba:	4d06      	ldr	r5, [pc, #24]	@ (80094d4 <_sbrk_r+0x1c>)
 80094bc:	2300      	movs	r3, #0
 80094be:	4604      	mov	r4, r0
 80094c0:	4608      	mov	r0, r1
 80094c2:	602b      	str	r3, [r5, #0]
 80094c4:	f7f8 fed8 	bl	8002278 <_sbrk>
 80094c8:	1c43      	adds	r3, r0, #1
 80094ca:	d102      	bne.n	80094d2 <_sbrk_r+0x1a>
 80094cc:	682b      	ldr	r3, [r5, #0]
 80094ce:	b103      	cbz	r3, 80094d2 <_sbrk_r+0x1a>
 80094d0:	6023      	str	r3, [r4, #0]
 80094d2:	bd38      	pop	{r3, r4, r5, pc}
 80094d4:	24000324 	.word	0x24000324

080094d8 <__swhatbuf_r>:
 80094d8:	b570      	push	{r4, r5, r6, lr}
 80094da:	460c      	mov	r4, r1
 80094dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094e0:	2900      	cmp	r1, #0
 80094e2:	b096      	sub	sp, #88	@ 0x58
 80094e4:	4615      	mov	r5, r2
 80094e6:	461e      	mov	r6, r3
 80094e8:	da0d      	bge.n	8009506 <__swhatbuf_r+0x2e>
 80094ea:	89a3      	ldrh	r3, [r4, #12]
 80094ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80094f0:	f04f 0100 	mov.w	r1, #0
 80094f4:	bf14      	ite	ne
 80094f6:	2340      	movne	r3, #64	@ 0x40
 80094f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80094fc:	2000      	movs	r0, #0
 80094fe:	6031      	str	r1, [r6, #0]
 8009500:	602b      	str	r3, [r5, #0]
 8009502:	b016      	add	sp, #88	@ 0x58
 8009504:	bd70      	pop	{r4, r5, r6, pc}
 8009506:	466a      	mov	r2, sp
 8009508:	f000 f848 	bl	800959c <_fstat_r>
 800950c:	2800      	cmp	r0, #0
 800950e:	dbec      	blt.n	80094ea <__swhatbuf_r+0x12>
 8009510:	9901      	ldr	r1, [sp, #4]
 8009512:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009516:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800951a:	4259      	negs	r1, r3
 800951c:	4159      	adcs	r1, r3
 800951e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009522:	e7eb      	b.n	80094fc <__swhatbuf_r+0x24>

08009524 <__smakebuf_r>:
 8009524:	898b      	ldrh	r3, [r1, #12]
 8009526:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009528:	079d      	lsls	r5, r3, #30
 800952a:	4606      	mov	r6, r0
 800952c:	460c      	mov	r4, r1
 800952e:	d507      	bpl.n	8009540 <__smakebuf_r+0x1c>
 8009530:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009534:	6023      	str	r3, [r4, #0]
 8009536:	6123      	str	r3, [r4, #16]
 8009538:	2301      	movs	r3, #1
 800953a:	6163      	str	r3, [r4, #20]
 800953c:	b003      	add	sp, #12
 800953e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009540:	ab01      	add	r3, sp, #4
 8009542:	466a      	mov	r2, sp
 8009544:	f7ff ffc8 	bl	80094d8 <__swhatbuf_r>
 8009548:	9f00      	ldr	r7, [sp, #0]
 800954a:	4605      	mov	r5, r0
 800954c:	4639      	mov	r1, r7
 800954e:	4630      	mov	r0, r6
 8009550:	f7ff fb18 	bl	8008b84 <_malloc_r>
 8009554:	b948      	cbnz	r0, 800956a <__smakebuf_r+0x46>
 8009556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800955a:	059a      	lsls	r2, r3, #22
 800955c:	d4ee      	bmi.n	800953c <__smakebuf_r+0x18>
 800955e:	f023 0303 	bic.w	r3, r3, #3
 8009562:	f043 0302 	orr.w	r3, r3, #2
 8009566:	81a3      	strh	r3, [r4, #12]
 8009568:	e7e2      	b.n	8009530 <__smakebuf_r+0xc>
 800956a:	89a3      	ldrh	r3, [r4, #12]
 800956c:	6020      	str	r0, [r4, #0]
 800956e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009572:	81a3      	strh	r3, [r4, #12]
 8009574:	9b01      	ldr	r3, [sp, #4]
 8009576:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800957a:	b15b      	cbz	r3, 8009594 <__smakebuf_r+0x70>
 800957c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009580:	4630      	mov	r0, r6
 8009582:	f000 f81d 	bl	80095c0 <_isatty_r>
 8009586:	b128      	cbz	r0, 8009594 <__smakebuf_r+0x70>
 8009588:	89a3      	ldrh	r3, [r4, #12]
 800958a:	f023 0303 	bic.w	r3, r3, #3
 800958e:	f043 0301 	orr.w	r3, r3, #1
 8009592:	81a3      	strh	r3, [r4, #12]
 8009594:	89a3      	ldrh	r3, [r4, #12]
 8009596:	431d      	orrs	r5, r3
 8009598:	81a5      	strh	r5, [r4, #12]
 800959a:	e7cf      	b.n	800953c <__smakebuf_r+0x18>

0800959c <_fstat_r>:
 800959c:	b538      	push	{r3, r4, r5, lr}
 800959e:	4d07      	ldr	r5, [pc, #28]	@ (80095bc <_fstat_r+0x20>)
 80095a0:	2300      	movs	r3, #0
 80095a2:	4604      	mov	r4, r0
 80095a4:	4608      	mov	r0, r1
 80095a6:	4611      	mov	r1, r2
 80095a8:	602b      	str	r3, [r5, #0]
 80095aa:	f7f8 fe3c 	bl	8002226 <_fstat>
 80095ae:	1c43      	adds	r3, r0, #1
 80095b0:	d102      	bne.n	80095b8 <_fstat_r+0x1c>
 80095b2:	682b      	ldr	r3, [r5, #0]
 80095b4:	b103      	cbz	r3, 80095b8 <_fstat_r+0x1c>
 80095b6:	6023      	str	r3, [r4, #0]
 80095b8:	bd38      	pop	{r3, r4, r5, pc}
 80095ba:	bf00      	nop
 80095bc:	24000324 	.word	0x24000324

080095c0 <_isatty_r>:
 80095c0:	b538      	push	{r3, r4, r5, lr}
 80095c2:	4d06      	ldr	r5, [pc, #24]	@ (80095dc <_isatty_r+0x1c>)
 80095c4:	2300      	movs	r3, #0
 80095c6:	4604      	mov	r4, r0
 80095c8:	4608      	mov	r0, r1
 80095ca:	602b      	str	r3, [r5, #0]
 80095cc:	f7f8 fe3b 	bl	8002246 <_isatty>
 80095d0:	1c43      	adds	r3, r0, #1
 80095d2:	d102      	bne.n	80095da <_isatty_r+0x1a>
 80095d4:	682b      	ldr	r3, [r5, #0]
 80095d6:	b103      	cbz	r3, 80095da <_isatty_r+0x1a>
 80095d8:	6023      	str	r3, [r4, #0]
 80095da:	bd38      	pop	{r3, r4, r5, pc}
 80095dc:	24000324 	.word	0x24000324

080095e0 <_init>:
 80095e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095e2:	bf00      	nop
 80095e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095e6:	bc08      	pop	{r3}
 80095e8:	469e      	mov	lr, r3
 80095ea:	4770      	bx	lr

080095ec <_fini>:
 80095ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ee:	bf00      	nop
 80095f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095f2:	bc08      	pop	{r3}
 80095f4:	469e      	mov	lr, r3
 80095f6:	4770      	bx	lr
