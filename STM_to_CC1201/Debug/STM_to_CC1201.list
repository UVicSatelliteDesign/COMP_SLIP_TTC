
STM_to_CC1201.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009134  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000263c  080093d4  080093d4  0000a3d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ba10  0800ba10  0000ca10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ba18  0800ba18  0000ca18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ba1c  0800ba1c  0000ca1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  24000000  0800ba20  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002ac  24000088  0800baa8  0000d088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000334  0800baa8  0000d334  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d088  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015ced  00000000  00000000  0000d0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002ca3  00000000  00000000  00022da3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f28  00000000  00000000  00025a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ba9  00000000  00000000  00026970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000384e5  00000000  00000000  00027519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000165be  00000000  00000000  0005f9fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015ef5e  00000000  00000000  00075fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d4f1a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000045fc  00000000  00000000  001d4f60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000051  00000000  00000000  001d955c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080093bc 	.word	0x080093bc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	080093bc 	.word	0x080093bc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <CC1201_SoftReset>:

// Read bit for register addresses
#define CC1201_READ_BIT                 0x80

HAL_StatusTypeDef CC1201_SoftReset(uint8_t *status_byte)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    printf("[DEBUG] Entered CC1201_SoftReset function\n\r");
 80006b4:	4809      	ldr	r0, [pc, #36]	@ (80006dc <CC1201_SoftReset+0x30>)
 80006b6:	f008 f815 	bl	80086e4 <iprintf>
    HAL_StatusTypeDef result = CC1201_SendStrobe(CC1201_STROBE_SOFT_RESET, status_byte);
 80006ba:	6879      	ldr	r1, [r7, #4]
 80006bc:	2030      	movs	r0, #48	@ 0x30
 80006be:	f000 fa69 	bl	8000b94 <CC1201_SendStrobe>
 80006c2:	4603      	mov	r3, r0
 80006c4:	73fb      	strb	r3, [r7, #15]
    printf("[DEBUG] CC1201_SoftReset about to return: %d\n\r", result);
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	4619      	mov	r1, r3
 80006ca:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <CC1201_SoftReset+0x34>)
 80006cc:	f008 f80a 	bl	80086e4 <iprintf>
    return result;
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	080093d4 	.word	0x080093d4
 80006e0:	08009400 	.word	0x08009400

080006e4 <CC1201_FastTxOn>:

HAL_StatusTypeDef CC1201_FastTxOn(uint8_t *status_byte)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_FAST_TX_ON, status_byte);
 80006ec:	6879      	ldr	r1, [r7, #4]
 80006ee:	2031      	movs	r0, #49	@ 0x31
 80006f0:	f000 fa50 	bl	8000b94 <CC1201_SendStrobe>
 80006f4:	4603      	mov	r3, r0
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <CC1201_CalFreqSynth>:
{
    return CC1201_SendStrobe(CC1201_STROBE_OSC_OFF, status_byte);
}

HAL_StatusTypeDef CC1201_CalFreqSynth(uint8_t *status_byte)
{
 80006fe:	b580      	push	{r7, lr}
 8000700:	b082      	sub	sp, #8
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_CAL_FREQ_SYNTH, status_byte);
 8000706:	6879      	ldr	r1, [r7, #4]
 8000708:	2033      	movs	r0, #51	@ 0x33
 800070a:	f000 fa43 	bl	8000b94 <CC1201_SendStrobe>
 800070e:	4603      	mov	r3, r0
}
 8000710:	4618      	mov	r0, r3
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <CC1201_EnterTxMode>:
{
    return CC1201_SendStrobe(CC1201_STROBE_RX, status_byte);
}

HAL_StatusTypeDef CC1201_EnterTxMode(uint8_t *status_byte)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_TX, status_byte);
 8000720:	6879      	ldr	r1, [r7, #4]
 8000722:	2035      	movs	r0, #53	@ 0x35
 8000724:	f000 fa36 	bl	8000b94 <CC1201_SendStrobe>
 8000728:	4603      	mov	r3, r0
}
 800072a:	4618      	mov	r0, r3
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <CC1201_EnterIdleMode>:

HAL_StatusTypeDef CC1201_EnterIdleMode(uint8_t *status_byte)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	b082      	sub	sp, #8
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_IDLE, status_byte);
 800073a:	6879      	ldr	r1, [r7, #4]
 800073c:	2036      	movs	r0, #54	@ 0x36
 800073e:	f000 fa29 	bl	8000b94 <CC1201_SendStrobe>
 8000742:	4603      	mov	r3, r0
}
 8000744:	4618      	mov	r0, r3
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <CC1201_FlushRxFifo>:
{
    return CC1201_SendStrobe(CC1201_STROBE_SLEEP, status_byte);
}

HAL_StatusTypeDef CC1201_FlushRxFifo(uint8_t *status_byte)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_FLUSH_RX, status_byte);
 8000754:	6879      	ldr	r1, [r7, #4]
 8000756:	203a      	movs	r0, #58	@ 0x3a
 8000758:	f000 fa1c 	bl	8000b94 <CC1201_SendStrobe>
 800075c:	4603      	mov	r3, r0
}
 800075e:	4618      	mov	r0, r3
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <CC1201_FlushTxFifo>:

HAL_StatusTypeDef CC1201_FlushTxFifo(uint8_t *status_byte)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b082      	sub	sp, #8
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_FLUSH_TX, status_byte);
 800076e:	6879      	ldr	r1, [r7, #4]
 8000770:	203b      	movs	r0, #59	@ 0x3b
 8000772:	f000 fa0f 	bl	8000b94 <CC1201_SendStrobe>
 8000776:	4603      	mov	r3, r0
}
 8000778:	4618      	mov	r0, r3
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <CC1201_Nop>:
{
    return CC1201_SendStrobe(CC1201_STROBE_WOR_RESET, status_byte);
}

HAL_StatusTypeDef CC1201_Nop(uint8_t *status_byte)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
    printf("[DEBUG] Entered CC1201_Nop function\n\r");
 8000788:	4809      	ldr	r0, [pc, #36]	@ (80007b0 <CC1201_Nop+0x30>)
 800078a:	f007 ffab 	bl	80086e4 <iprintf>
    HAL_StatusTypeDef result = CC1201_SendStrobe(CC1201_STROBE_NOP, status_byte);
 800078e:	6879      	ldr	r1, [r7, #4]
 8000790:	203d      	movs	r0, #61	@ 0x3d
 8000792:	f000 f9ff 	bl	8000b94 <CC1201_SendStrobe>
 8000796:	4603      	mov	r3, r0
 8000798:	73fb      	strb	r3, [r7, #15]
    printf("[DEBUG] CC1201_Nop about to return: %d\n\r", result);
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	4619      	mov	r1, r3
 800079e:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <CC1201_Nop+0x34>)
 80007a0:	f007 ffa0 	bl	80086e4 <iprintf>
    return result;
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	08009430 	.word	0x08009430
 80007b4:	08009458 	.word	0x08009458

080007b8 <CC1201_ReadStatus>:
 * @param reg_addr The address of the register to read. The read bit (MSB) will be set internally.
 * @param read_data Pointer to a uint8_t where the read data will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadStatus(uint16_t reg_addr, uint8_t *read_data)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b088      	sub	sp, #32
 80007bc:	af02      	add	r7, sp, #8
 80007be:	4603      	mov	r3, r0
 80007c0:	6039      	str	r1, [r7, #0]
 80007c2:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[4];
    uint8_t rx_buffer[4];
    uint8_t buffer_size;

    if (reg_addr > 0xFF) {
 80007c4:	88fb      	ldrh	r3, [r7, #6]
 80007c6:	2bff      	cmp	r3, #255	@ 0xff
 80007c8:	d909      	bls.n	80007de <CC1201_ReadStatus+0x26>
        // Extended register (burst access)
        tx_buffer[0] = 0x2F; // Extended register access command
 80007ca:	232f      	movs	r3, #47	@ 0x2f
 80007cc:	743b      	strb	r3, [r7, #16]
        tx_buffer[1] = (uint8_t)(reg_addr & 0xFF); // Low byte of address
 80007ce:	88fb      	ldrh	r3, [r7, #6]
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	747b      	strb	r3, [r7, #17]
        tx_buffer[2] = 0x00; // Dummy byte for reading
 80007d4:	2300      	movs	r3, #0
 80007d6:	74bb      	strb	r3, [r7, #18]
        buffer_size = 3;
 80007d8:	2303      	movs	r3, #3
 80007da:	75fb      	strb	r3, [r7, #23]
 80007dc:	e009      	b.n	80007f2 <CC1201_ReadStatus+0x3a>
    } else {
        // Standard register
        tx_buffer[0] = (uint8_t)reg_addr | CC1201_READ_BIT;
 80007de:	88fb      	ldrh	r3, [r7, #6]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	743b      	strb	r3, [r7, #16]
        tx_buffer[1] = 0x00; // Dummy byte for reading
 80007ea:	2300      	movs	r3, #0
 80007ec:	747b      	strb	r3, [r7, #17]
        buffer_size = 2;
 80007ee:	2302      	movs	r3, #2
 80007f0:	75fb      	strb	r3, [r7, #23]
    }

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 80007f2:	2200      	movs	r2, #0
 80007f4:	2110      	movs	r1, #16
 80007f6:	4815      	ldr	r0, [pc, #84]	@ (800084c <CC1201_ReadStatus+0x94>)
 80007f8:	f003 f836 	bl	8003868 <HAL_GPIO_WritePin>

    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, tx_buffer, rx_buffer, buffer_size, HAL_MAX_DELAY);
 80007fc:	7dfb      	ldrb	r3, [r7, #23]
 80007fe:	b29b      	uxth	r3, r3
 8000800:	f107 020c 	add.w	r2, r7, #12
 8000804:	f107 0110 	add.w	r1, r7, #16
 8000808:	f04f 30ff 	mov.w	r0, #4294967295
 800080c:	9000      	str	r0, [sp, #0]
 800080e:	4810      	ldr	r0, [pc, #64]	@ (8000850 <CC1201_ReadStatus+0x98>)
 8000810:	f005 fff8 	bl	8006804 <HAL_SPI_TransmitReceive>
 8000814:	4603      	mov	r3, r0
 8000816:	75bb      	strb	r3, [r7, #22]

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 8000818:	2201      	movs	r2, #1
 800081a:	2110      	movs	r1, #16
 800081c:	480b      	ldr	r0, [pc, #44]	@ (800084c <CC1201_ReadStatus+0x94>)
 800081e:	f003 f823 	bl	8003868 <HAL_GPIO_WritePin>

    if (status == HAL_OK) {
 8000822:	7dbb      	ldrb	r3, [r7, #22]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d10c      	bne.n	8000842 <CC1201_ReadStatus+0x8a>
        if (read_data != NULL) {
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d009      	beq.n	8000842 <CC1201_ReadStatus+0x8a>
            if (reg_addr > 0xFF) {
 800082e:	88fb      	ldrh	r3, [r7, #6]
 8000830:	2bff      	cmp	r3, #255	@ 0xff
 8000832:	d903      	bls.n	800083c <CC1201_ReadStatus+0x84>
                *read_data = rx_buffer[2]; // Extended register data
 8000834:	7bba      	ldrb	r2, [r7, #14]
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	701a      	strb	r2, [r3, #0]
 800083a:	e002      	b.n	8000842 <CC1201_ReadStatus+0x8a>
            } else {
                *read_data = rx_buffer[1]; // Standard register data
 800083c:	7b7a      	ldrb	r2, [r7, #13]
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return status;
 8000842:	7dbb      	ldrb	r3, [r7, #22]
}
 8000844:	4618      	mov	r0, r3
 8000846:	3718      	adds	r7, #24
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	58021000 	.word	0x58021000
 8000850:	240000b8 	.word	0x240000b8

08000854 <CC1201_ReadMARCState>:
 *
 * @param marc_state Pointer to a uint8_t where the MARCSTATE value will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadMARCState(uint8_t *marc_state)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_MARCSTATE, marc_state);
 800085c:	6879      	ldr	r1, [r7, #4]
 800085e:	f642 7073 	movw	r0, #12147	@ 0x2f73
 8000862:	f7ff ffa9 	bl	80007b8 <CC1201_ReadStatus>
 8000866:	4603      	mov	r3, r0
}
 8000868:	4618      	mov	r0, r3
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <CC1201_GetNumRXBytes>:
 *
 * @param num_bytes Pointer to a uint8_t where the number of RX bytes will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_GetNumRXBytes(uint8_t *num_bytes)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_NUM_RXBYTES, num_bytes);
 8000878:	6879      	ldr	r1, [r7, #4]
 800087a:	f642 707a 	movw	r0, #12154	@ 0x2f7a
 800087e:	f7ff ff9b 	bl	80007b8 <CC1201_ReadStatus>
 8000882:	4603      	mov	r3, r0
}
 8000884:	4618      	mov	r0, r3
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <CC1201_GetNumTXBytes>:
 *
 * @param num_bytes Pointer to a uint8_t where the number of TX bytes will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_GetNumTXBytes(uint8_t *num_bytes)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_NUM_TXBYTES, num_bytes);
 8000894:	6879      	ldr	r1, [r7, #4]
 8000896:	f642 707b 	movw	r0, #12155	@ 0x2f7b
 800089a:	f7ff ff8d 	bl	80007b8 <CC1201_ReadStatus>
 800089e:	4603      	mov	r3, r0
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <CC1201_WriteTxFifo>:
 * @param length Number of bytes to write.
 * @param status_byte Pointer to store the status byte returned.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteTxFifo(uint8_t *data, uint8_t length, uint8_t *status_byte)
{
 80008a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008ac:	b08f      	sub	sp, #60	@ 0x3c
 80008ae:	af02      	add	r7, sp, #8
 80008b0:	6178      	str	r0, [r7, #20]
 80008b2:	460b      	mov	r3, r1
 80008b4:	60fa      	str	r2, [r7, #12]
 80008b6:	74fb      	strb	r3, [r7, #19]
 80008b8:	466b      	mov	r3, sp
 80008ba:	461e      	mov	r6, r3
    if (data == NULL || status_byte == NULL || length == 0) {
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d005      	beq.n	80008ce <CC1201_WriteTxFifo+0x26>
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d002      	beq.n	80008ce <CC1201_WriteTxFifo+0x26>
 80008c8:	7cfb      	ldrb	r3, [r7, #19]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d101      	bne.n	80008d2 <CC1201_WriteTxFifo+0x2a>
        return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
 80008d0:	e088      	b.n	80009e4 <CC1201_WriteTxFifo+0x13c>
    }
    
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[2 + length]; // Command + address + data
 80008d2:	7cfb      	ldrb	r3, [r7, #19]
 80008d4:	1c99      	adds	r1, r3, #2
 80008d6:	1e4b      	subs	r3, r1, #1
 80008d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80008da:	460a      	mov	r2, r1
 80008dc:	2300      	movs	r3, #0
 80008de:	603a      	str	r2, [r7, #0]
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	f04f 0200 	mov.w	r2, #0
 80008e6:	f04f 0300 	mov.w	r3, #0
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	00c3      	lsls	r3, r0, #3
 80008ee:	6838      	ldr	r0, [r7, #0]
 80008f0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80008f4:	6838      	ldr	r0, [r7, #0]
 80008f6:	00c2      	lsls	r2, r0, #3
 80008f8:	460a      	mov	r2, r1
 80008fa:	2300      	movs	r3, #0
 80008fc:	4692      	mov	sl, r2
 80008fe:	469b      	mov	fp, r3
 8000900:	f04f 0200 	mov.w	r2, #0
 8000904:	f04f 0300 	mov.w	r3, #0
 8000908:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800090c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000910:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000914:	460b      	mov	r3, r1
 8000916:	3307      	adds	r3, #7
 8000918:	08db      	lsrs	r3, r3, #3
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	ebad 0d03 	sub.w	sp, sp, r3
 8000920:	ab02      	add	r3, sp, #8
 8000922:	3300      	adds	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t rx_buffer[2 + length];
 8000926:	7cfb      	ldrb	r3, [r7, #19]
 8000928:	1c99      	adds	r1, r3, #2
 800092a:	1e4b      	subs	r3, r1, #1
 800092c:	623b      	str	r3, [r7, #32]
 800092e:	460a      	mov	r2, r1
 8000930:	2300      	movs	r3, #0
 8000932:	4690      	mov	r8, r2
 8000934:	4699      	mov	r9, r3
 8000936:	f04f 0200 	mov.w	r2, #0
 800093a:	f04f 0300 	mov.w	r3, #0
 800093e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000942:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000946:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800094a:	460a      	mov	r2, r1
 800094c:	2300      	movs	r3, #0
 800094e:	4614      	mov	r4, r2
 8000950:	461d      	mov	r5, r3
 8000952:	f04f 0200 	mov.w	r2, #0
 8000956:	f04f 0300 	mov.w	r3, #0
 800095a:	00eb      	lsls	r3, r5, #3
 800095c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000960:	00e2      	lsls	r2, r4, #3
 8000962:	460b      	mov	r3, r1
 8000964:	3307      	adds	r3, #7
 8000966:	08db      	lsrs	r3, r3, #3
 8000968:	00db      	lsls	r3, r3, #3
 800096a:	ebad 0d03 	sub.w	sp, sp, r3
 800096e:	ab02      	add	r3, sp, #8
 8000970:	3300      	adds	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
    
    // Build command: burst write to TX FIFO (0x3F | 0x40)
    tx_buffer[0] = 0x7F; // TX FIFO burst write
 8000974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000976:	227f      	movs	r2, #127	@ 0x7f
 8000978:	701a      	strb	r2, [r3, #0]
    
    // Copy data to transmit buffer
    for (uint8_t i = 0; i < length; i++) {
 800097a:	2300      	movs	r3, #0
 800097c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000980:	e00e      	b.n	80009a0 <CC1201_WriteTxFifo+0xf8>
        tx_buffer[1 + i] = data[i];
 8000982:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000986:	697a      	ldr	r2, [r7, #20]
 8000988:	441a      	add	r2, r3
 800098a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800098e:	3301      	adds	r3, #1
 8000990:	7811      	ldrb	r1, [r2, #0]
 8000992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000994:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < length; i++) {
 8000996:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800099a:	3301      	adds	r3, #1
 800099c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80009a0:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80009a4:	7cfb      	ldrb	r3, [r7, #19]
 80009a6:	429a      	cmp	r2, r3
 80009a8:	d3eb      	bcc.n	8000982 <CC1201_WriteTxFifo+0xda>
    }
    
    // Pull CS low to start SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2110      	movs	r1, #16
 80009ae:	4810      	ldr	r0, [pc, #64]	@ (80009f0 <CC1201_WriteTxFifo+0x148>)
 80009b0:	f002 ff5a 	bl	8003868 <HAL_GPIO_WritePin>
    
    // Perform SPI transaction
    status = HAL_SPI_TransmitReceive(&hspi2, tx_buffer, rx_buffer, length + 1, HAL_MAX_DELAY);
 80009b4:	7cfb      	ldrb	r3, [r7, #19]
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	3301      	adds	r3, #1
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	f04f 32ff 	mov.w	r2, #4294967295
 80009c0:	9200      	str	r2, [sp, #0]
 80009c2:	69fa      	ldr	r2, [r7, #28]
 80009c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80009c6:	480b      	ldr	r0, [pc, #44]	@ (80009f4 <CC1201_WriteTxFifo+0x14c>)
 80009c8:	f005 ff1c 	bl	8006804 <HAL_SPI_TransmitReceive>
 80009cc:	4603      	mov	r3, r0
 80009ce:	76fb      	strb	r3, [r7, #27]
    
    // Pull CS high to end SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 80009d0:	2201      	movs	r2, #1
 80009d2:	2110      	movs	r1, #16
 80009d4:	4806      	ldr	r0, [pc, #24]	@ (80009f0 <CC1201_WriteTxFifo+0x148>)
 80009d6:	f002 ff47 	bl	8003868 <HAL_GPIO_WritePin>
    
    // Store status byte (first received byte)
    *status_byte = rx_buffer[0];
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	781a      	ldrb	r2, [r3, #0]
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	701a      	strb	r2, [r3, #0]
    
    return status;
 80009e2:	7efb      	ldrb	r3, [r7, #27]
 80009e4:	46b5      	mov	sp, r6
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3734      	adds	r7, #52	@ 0x34
 80009ea:	46bd      	mov	sp, r7
 80009ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009f0:	58021000 	.word	0x58021000
 80009f4:	240000b8 	.word	0x240000b8

080009f8 <CC1201_ReadRxFifo>:
 * @param length Number of bytes to read.
 * @param status_byte Pointer to store the status byte returned.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadRxFifo(uint8_t *data, uint8_t length, uint8_t *status_byte)
{
 80009f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009fc:	b08f      	sub	sp, #60	@ 0x3c
 80009fe:	af02      	add	r7, sp, #8
 8000a00:	6178      	str	r0, [r7, #20]
 8000a02:	460b      	mov	r3, r1
 8000a04:	60fa      	str	r2, [r7, #12]
 8000a06:	74fb      	strb	r3, [r7, #19]
 8000a08:	466b      	mov	r3, sp
 8000a0a:	461e      	mov	r6, r3
    if (data == NULL || status_byte == NULL || length == 0) {
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d005      	beq.n	8000a1e <CC1201_ReadRxFifo+0x26>
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d002      	beq.n	8000a1e <CC1201_ReadRxFifo+0x26>
 8000a18:	7cfb      	ldrb	r3, [r7, #19]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d101      	bne.n	8000a22 <CC1201_ReadRxFifo+0x2a>
        return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e09b      	b.n	8000b5a <CC1201_ReadRxFifo+0x162>
    }
    
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[1 + length]; // Command + dummy bytes
 8000a22:	7cfb      	ldrb	r3, [r7, #19]
 8000a24:	1c59      	adds	r1, r3, #1
 8000a26:	1e4b      	subs	r3, r1, #1
 8000a28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000a2a:	460a      	mov	r2, r1
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	603a      	str	r2, [r7, #0]
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	f04f 0200 	mov.w	r2, #0
 8000a36:	f04f 0300 	mov.w	r3, #0
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	00c3      	lsls	r3, r0, #3
 8000a3e:	6838      	ldr	r0, [r7, #0]
 8000a40:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000a44:	6838      	ldr	r0, [r7, #0]
 8000a46:	00c2      	lsls	r2, r0, #3
 8000a48:	460a      	mov	r2, r1
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	4692      	mov	sl, r2
 8000a4e:	469b      	mov	fp, r3
 8000a50:	f04f 0200 	mov.w	r2, #0
 8000a54:	f04f 0300 	mov.w	r3, #0
 8000a58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000a5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000a60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000a64:	460b      	mov	r3, r1
 8000a66:	3307      	adds	r3, #7
 8000a68:	08db      	lsrs	r3, r3, #3
 8000a6a:	00db      	lsls	r3, r3, #3
 8000a6c:	ebad 0d03 	sub.w	sp, sp, r3
 8000a70:	ab02      	add	r3, sp, #8
 8000a72:	3300      	adds	r3, #0
 8000a74:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t rx_buffer[1 + length];
 8000a76:	7cfb      	ldrb	r3, [r7, #19]
 8000a78:	1c59      	adds	r1, r3, #1
 8000a7a:	1e4b      	subs	r3, r1, #1
 8000a7c:	623b      	str	r3, [r7, #32]
 8000a7e:	460a      	mov	r2, r1
 8000a80:	2300      	movs	r3, #0
 8000a82:	4690      	mov	r8, r2
 8000a84:	4699      	mov	r9, r3
 8000a86:	f04f 0200 	mov.w	r2, #0
 8000a8a:	f04f 0300 	mov.w	r3, #0
 8000a8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000a92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000a96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000a9a:	460a      	mov	r2, r1
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	4614      	mov	r4, r2
 8000aa0:	461d      	mov	r5, r3
 8000aa2:	f04f 0200 	mov.w	r2, #0
 8000aa6:	f04f 0300 	mov.w	r3, #0
 8000aaa:	00eb      	lsls	r3, r5, #3
 8000aac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000ab0:	00e2      	lsls	r2, r4, #3
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	3307      	adds	r3, #7
 8000ab6:	08db      	lsrs	r3, r3, #3
 8000ab8:	00db      	lsls	r3, r3, #3
 8000aba:	ebad 0d03 	sub.w	sp, sp, r3
 8000abe:	ab02      	add	r3, sp, #8
 8000ac0:	3300      	adds	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
    
    // Build command: burst read from RX FIFO (0x3F | 0x80 | 0x40)
    tx_buffer[0] = 0xFF; // RX FIFO burst read
 8000ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac6:	22ff      	movs	r2, #255	@ 0xff
 8000ac8:	701a      	strb	r2, [r3, #0]
    
    // Fill with dummy bytes for reading
    for (uint8_t i = 1; i <= length; i++) {
 8000aca:	2301      	movs	r3, #1
 8000acc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000ad0:	e009      	b.n	8000ae6 <CC1201_ReadRxFifo+0xee>
        tx_buffer[i] = 0x00;
 8000ad2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ad6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ad8:	2100      	movs	r1, #0
 8000ada:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 1; i <= length; i++) {
 8000adc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000ae6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000aea:	7cfb      	ldrb	r3, [r7, #19]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d9f0      	bls.n	8000ad2 <CC1201_ReadRxFifo+0xda>
    }
    
    // Pull CS low to start SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2110      	movs	r1, #16
 8000af4:	481c      	ldr	r0, [pc, #112]	@ (8000b68 <CC1201_ReadRxFifo+0x170>)
 8000af6:	f002 feb7 	bl	8003868 <HAL_GPIO_WritePin>
    
    // Perform SPI transaction
    status = HAL_SPI_TransmitReceive(&hspi2, tx_buffer, rx_buffer, length + 1, HAL_MAX_DELAY);
 8000afa:	7cfb      	ldrb	r3, [r7, #19]
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	3301      	adds	r3, #1
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	f04f 32ff 	mov.w	r2, #4294967295
 8000b06:	9200      	str	r2, [sp, #0]
 8000b08:	69fa      	ldr	r2, [r7, #28]
 8000b0a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000b0c:	4817      	ldr	r0, [pc, #92]	@ (8000b6c <CC1201_ReadRxFifo+0x174>)
 8000b0e:	f005 fe79 	bl	8006804 <HAL_SPI_TransmitReceive>
 8000b12:	4603      	mov	r3, r0
 8000b14:	76fb      	strb	r3, [r7, #27]
    
    // Pull CS high to end SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 8000b16:	2201      	movs	r2, #1
 8000b18:	2110      	movs	r1, #16
 8000b1a:	4813      	ldr	r0, [pc, #76]	@ (8000b68 <CC1201_ReadRxFifo+0x170>)
 8000b1c:	f002 fea4 	bl	8003868 <HAL_GPIO_WritePin>
    
    // Store status byte (first received byte)
    *status_byte = rx_buffer[0];
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	781a      	ldrb	r2, [r3, #0]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	701a      	strb	r2, [r3, #0]
    
    // Copy received data
    for (uint8_t i = 0; i < length; i++) {
 8000b28:	2300      	movs	r3, #0
 8000b2a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000b2e:	e00e      	b.n	8000b4e <CC1201_ReadRxFifo+0x156>
        data[i] = rx_buffer[1 + i];
 8000b30:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000b34:	1c5a      	adds	r2, r3, #1
 8000b36:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000b3a:	6979      	ldr	r1, [r7, #20]
 8000b3c:	440b      	add	r3, r1
 8000b3e:	69f9      	ldr	r1, [r7, #28]
 8000b40:	5c8a      	ldrb	r2, [r1, r2]
 8000b42:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < length; i++) {
 8000b44:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000b48:	3301      	adds	r3, #1
 8000b4a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000b4e:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000b52:	7cfb      	ldrb	r3, [r7, #19]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d3eb      	bcc.n	8000b30 <CC1201_ReadRxFifo+0x138>
    }
    
    return status;
 8000b58:	7efb      	ldrb	r3, [r7, #27]
 8000b5a:	46b5      	mov	sp, r6
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3734      	adds	r7, #52	@ 0x34
 8000b60:	46bd      	mov	sp, r7
 8000b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b66:	bf00      	nop
 8000b68:	58021000 	.word	0x58021000
 8000b6c:	240000b8 	.word	0x240000b8

08000b70 <CC1201_WriteSingleTxFifo>:
 * @param data Single byte to write to TX FIFO.
 * @param status_byte Pointer to store the status byte returned.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteSingleTxFifo(uint8_t data, uint8_t *status_byte)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	6039      	str	r1, [r7, #0]
 8000b7a:	71fb      	strb	r3, [r7, #7]
    return CC1201_WriteTxFifo(&data, 1, status_byte);
 8000b7c:	1dfb      	adds	r3, r7, #7
 8000b7e:	683a      	ldr	r2, [r7, #0]
 8000b80:	2101      	movs	r1, #1
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff fe90 	bl	80008a8 <CC1201_WriteTxFifo>
 8000b88:	4603      	mov	r3, r0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <CC1201_SendStrobe>:
 * @param status_byte Pointer to a uint8_t where the status byte received from the CC1201 will be stored.
 *                    Can be NULL if the status byte is not needed.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_SendStrobe(uint8_t strobe_command, uint8_t *status_byte)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af02      	add	r7, sp, #8
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	6039      	str	r1, [r7, #0]
 8000b9e:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;
    uint8_t rx_data;

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2110      	movs	r1, #16
 8000ba4:	4812      	ldr	r0, [pc, #72]	@ (8000bf0 <CC1201_SendStrobe+0x5c>)
 8000ba6:	f002 fe5f 	bl	8003868 <HAL_GPIO_WritePin>
    
    // Small delay to ensure CS is stable
    HAL_Delay(1);
 8000baa:	2001      	movs	r0, #1
 8000bac:	f001 fef6 	bl	800299c <HAL_Delay>

    // Perform SPI transaction
    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, &strobe_command, &rx_data, 1, 1000);
 8000bb0:	f107 020e 	add.w	r2, r7, #14
 8000bb4:	1df9      	adds	r1, r7, #7
 8000bb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bba:	9300      	str	r3, [sp, #0]
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	480d      	ldr	r0, [pc, #52]	@ (8000bf4 <CC1201_SendStrobe+0x60>)
 8000bc0:	f005 fe20 	bl	8006804 <HAL_SPI_TransmitReceive>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	73fb      	strb	r3, [r7, #15]
    
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2110      	movs	r1, #16
 8000bcc:	4808      	ldr	r0, [pc, #32]	@ (8000bf0 <CC1201_SendStrobe+0x5c>)
 8000bce:	f002 fe4b 	bl	8003868 <HAL_GPIO_WritePin>
    
    if (status == HAL_OK) {
 8000bd2:	7bfb      	ldrb	r3, [r7, #15]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d105      	bne.n	8000be4 <CC1201_SendStrobe+0x50>
        if (status_byte != NULL) {
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d002      	beq.n	8000be4 <CC1201_SendStrobe+0x50>
            *status_byte = rx_data;
 8000bde:	7bba      	ldrb	r2, [r7, #14]
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	701a      	strb	r2, [r3, #0]
        }
    }
    return status;
 8000be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	58021000 	.word	0x58021000
 8000bf4:	240000b8 	.word	0x240000b8

08000bf8 <print_cc1201_status>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Function to decode and print CC1201 status
void print_cc1201_status(uint8_t status_byte, const char* context) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	6039      	str	r1, [r7, #0]
 8000c02:	71fb      	strb	r3, [r7, #7]
    uint8_t radio_state = (status_byte >> 4) & 0x0F;
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	091b      	lsrs	r3, r3, #4
 8000c08:	73fb      	strb	r3, [r7, #15]
    uint8_t fifo_bytes = status_byte & 0x0F;
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	f003 030f 	and.w	r3, r3, #15
 8000c10:	73bb      	strb	r3, [r7, #14]
    
    printf("  %s: Status=0x%02X, State=0x%X", context, status_byte, radio_state);
 8000c12:	79fa      	ldrb	r2, [r7, #7]
 8000c14:	7bfb      	ldrb	r3, [r7, #15]
 8000c16:	6839      	ldr	r1, [r7, #0]
 8000c18:	4823      	ldr	r0, [pc, #140]	@ (8000ca8 <print_cc1201_status+0xb0>)
 8000c1a:	f007 fd63 	bl	80086e4 <iprintf>
    switch(radio_state) {
 8000c1e:	7bfb      	ldrb	r3, [r7, #15]
 8000c20:	2b07      	cmp	r3, #7
 8000c22:	d833      	bhi.n	8000c8c <print_cc1201_status+0x94>
 8000c24:	a201      	add	r2, pc, #4	@ (adr r2, 8000c2c <print_cc1201_status+0x34>)
 8000c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c2a:	bf00      	nop
 8000c2c:	08000c4d 	.word	0x08000c4d
 8000c30:	08000c55 	.word	0x08000c55
 8000c34:	08000c5d 	.word	0x08000c5d
 8000c38:	08000c65 	.word	0x08000c65
 8000c3c:	08000c6d 	.word	0x08000c6d
 8000c40:	08000c75 	.word	0x08000c75
 8000c44:	08000c7d 	.word	0x08000c7d
 8000c48:	08000c85 	.word	0x08000c85
        case 0x0: printf("(IDLE)"); break;
 8000c4c:	4817      	ldr	r0, [pc, #92]	@ (8000cac <print_cc1201_status+0xb4>)
 8000c4e:	f007 fd49 	bl	80086e4 <iprintf>
 8000c52:	e01f      	b.n	8000c94 <print_cc1201_status+0x9c>
        case 0x1: printf("(RX)"); break;
 8000c54:	4816      	ldr	r0, [pc, #88]	@ (8000cb0 <print_cc1201_status+0xb8>)
 8000c56:	f007 fd45 	bl	80086e4 <iprintf>
 8000c5a:	e01b      	b.n	8000c94 <print_cc1201_status+0x9c>
        case 0x2: printf("(TX)"); break;
 8000c5c:	4815      	ldr	r0, [pc, #84]	@ (8000cb4 <print_cc1201_status+0xbc>)
 8000c5e:	f007 fd41 	bl	80086e4 <iprintf>
 8000c62:	e017      	b.n	8000c94 <print_cc1201_status+0x9c>
        case 0x3: printf("(FSTXON)"); break;
 8000c64:	4814      	ldr	r0, [pc, #80]	@ (8000cb8 <print_cc1201_status+0xc0>)
 8000c66:	f007 fd3d 	bl	80086e4 <iprintf>
 8000c6a:	e013      	b.n	8000c94 <print_cc1201_status+0x9c>
        case 0x4: printf("(CALIBRATE)"); break;
 8000c6c:	4813      	ldr	r0, [pc, #76]	@ (8000cbc <print_cc1201_status+0xc4>)
 8000c6e:	f007 fd39 	bl	80086e4 <iprintf>
 8000c72:	e00f      	b.n	8000c94 <print_cc1201_status+0x9c>
        case 0x5: printf("(SETTLING)"); break;
 8000c74:	4812      	ldr	r0, [pc, #72]	@ (8000cc0 <print_cc1201_status+0xc8>)
 8000c76:	f007 fd35 	bl	80086e4 <iprintf>
 8000c7a:	e00b      	b.n	8000c94 <print_cc1201_status+0x9c>
        case 0x6: printf("(RX_FIFO_ERR)"); break;
 8000c7c:	4811      	ldr	r0, [pc, #68]	@ (8000cc4 <print_cc1201_status+0xcc>)
 8000c7e:	f007 fd31 	bl	80086e4 <iprintf>
 8000c82:	e007      	b.n	8000c94 <print_cc1201_status+0x9c>
        case 0x7: printf("(TX_FIFO_ERR)"); break;
 8000c84:	4810      	ldr	r0, [pc, #64]	@ (8000cc8 <print_cc1201_status+0xd0>)
 8000c86:	f007 fd2d 	bl	80086e4 <iprintf>
 8000c8a:	e003      	b.n	8000c94 <print_cc1201_status+0x9c>
        default: printf("(UNKNOWN)"); break;
 8000c8c:	480f      	ldr	r0, [pc, #60]	@ (8000ccc <print_cc1201_status+0xd4>)
 8000c8e:	f007 fd29 	bl	80086e4 <iprintf>
 8000c92:	bf00      	nop
    }
    printf(", FIFO=%d\n\r", fifo_bytes);
 8000c94:	7bbb      	ldrb	r3, [r7, #14]
 8000c96:	4619      	mov	r1, r3
 8000c98:	480d      	ldr	r0, [pc, #52]	@ (8000cd0 <print_cc1201_status+0xd8>)
 8000c9a:	f007 fd23 	bl	80086e4 <iprintf>
}
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	08009484 	.word	0x08009484
 8000cac:	080094a4 	.word	0x080094a4
 8000cb0:	080094ac 	.word	0x080094ac
 8000cb4:	080094b4 	.word	0x080094b4
 8000cb8:	080094bc 	.word	0x080094bc
 8000cbc:	080094c8 	.word	0x080094c8
 8000cc0:	080094d4 	.word	0x080094d4
 8000cc4:	080094e0 	.word	0x080094e0
 8000cc8:	080094f0 	.word	0x080094f0
 8000ccc:	08009500 	.word	0x08009500
 8000cd0:	0800950c 	.word	0x0800950c

08000cd4 <test_fifo_operations>:
    
    printf("=== CONFIGURATION TEST COMPLETE ===\n\r");
}

// Test FIFO operations (read/write buffer tests)
void test_fifo_operations(void) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b088      	sub	sp, #32
 8000cd8:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef hal_status;
    uint8_t status_byte = 0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	777b      	strb	r3, [r7, #29]
    
    printf("\n=== FIFO OPERATIONS TEST ===\n\r");
 8000cde:	489b      	ldr	r0, [pc, #620]	@ (8000f4c <test_fifo_operations+0x278>)
 8000ce0:	f007 fd00 	bl	80086e4 <iprintf>
    
    // First ensure we're in IDLE state
    hal_status = CC1201_EnterIdleMode(&status_byte);
 8000ce4:	f107 031d 	add.w	r3, r7, #29
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fd22 	bl	8000732 <CC1201_EnterIdleMode>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	77fb      	strb	r3, [r7, #31]
    if (hal_status != HAL_OK) {
 8000cf2:	7ffb      	ldrb	r3, [r7, #31]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d003      	beq.n	8000d00 <test_fifo_operations+0x2c>
        printf("  ✗ Failed to enter IDLE mode\n\r");
 8000cf8:	4895      	ldr	r0, [pc, #596]	@ (8000f50 <test_fifo_operations+0x27c>)
 8000cfa:	f007 fcf3 	bl	80086e4 <iprintf>
 8000cfe:	e121      	b.n	8000f44 <test_fifo_operations+0x270>
        return;
    }
    print_cc1201_status(status_byte, "IDLE_FOR_FIFO");
 8000d00:	7f7b      	ldrb	r3, [r7, #29]
 8000d02:	4994      	ldr	r1, [pc, #592]	@ (8000f54 <test_fifo_operations+0x280>)
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ff77 	bl	8000bf8 <print_cc1201_status>
    
    // Test 1: Flush both FIFOs to start clean
    printf("1. Flushing FIFOs\n\r");
 8000d0a:	4893      	ldr	r0, [pc, #588]	@ (8000f58 <test_fifo_operations+0x284>)
 8000d0c:	f007 fcea 	bl	80086e4 <iprintf>
    hal_status = CC1201_FlushTxFifo(&status_byte);
 8000d10:	f107 031d 	add.w	r3, r7, #29
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fd26 	bl	8000766 <CC1201_FlushTxFifo>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 8000d1e:	7ffb      	ldrb	r3, [r7, #31]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d104      	bne.n	8000d2e <test_fifo_operations+0x5a>
        print_cc1201_status(status_byte, "FLUSH_TX");
 8000d24:	7f7b      	ldrb	r3, [r7, #29]
 8000d26:	498d      	ldr	r1, [pc, #564]	@ (8000f5c <test_fifo_operations+0x288>)
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff65 	bl	8000bf8 <print_cc1201_status>
    }
    
    hal_status = CC1201_FlushRxFifo(&status_byte);
 8000d2e:	f107 031d 	add.w	r3, r7, #29
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fd0a 	bl	800074c <CC1201_FlushRxFifo>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 8000d3c:	7ffb      	ldrb	r3, [r7, #31]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d104      	bne.n	8000d4c <test_fifo_operations+0x78>
        print_cc1201_status(status_byte, "FLUSH_RX");
 8000d42:	7f7b      	ldrb	r3, [r7, #29]
 8000d44:	4986      	ldr	r1, [pc, #536]	@ (8000f60 <test_fifo_operations+0x28c>)
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff ff56 	bl	8000bf8 <print_cc1201_status>
    }
    
    // Test 2: Check initial FIFO byte counts
    printf("2. Initial FIFO status\n\r");
 8000d4c:	4885      	ldr	r0, [pc, #532]	@ (8000f64 <test_fifo_operations+0x290>)
 8000d4e:	f007 fcc9 	bl	80086e4 <iprintf>
    uint8_t tx_bytes = 0, rx_bytes = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	773b      	strb	r3, [r7, #28]
 8000d56:	2300      	movs	r3, #0
 8000d58:	76fb      	strb	r3, [r7, #27]
    
    hal_status = CC1201_GetNumTXBytes(&tx_bytes);
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fd94 	bl	800088c <CC1201_GetNumTXBytes>
 8000d64:	4603      	mov	r3, r0
 8000d66:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 8000d68:	7ffb      	ldrb	r3, [r7, #31]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d104      	bne.n	8000d78 <test_fifo_operations+0xa4>
        printf("  TX FIFO bytes: %d\n\r", tx_bytes);
 8000d6e:	7f3b      	ldrb	r3, [r7, #28]
 8000d70:	4619      	mov	r1, r3
 8000d72:	487d      	ldr	r0, [pc, #500]	@ (8000f68 <test_fifo_operations+0x294>)
 8000d74:	f007 fcb6 	bl	80086e4 <iprintf>
    }
    
    hal_status = CC1201_GetNumRXBytes(&rx_bytes);
 8000d78:	f107 031b 	add.w	r3, r7, #27
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fd77 	bl	8000870 <CC1201_GetNumRXBytes>
 8000d82:	4603      	mov	r3, r0
 8000d84:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 8000d86:	7ffb      	ldrb	r3, [r7, #31]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d104      	bne.n	8000d96 <test_fifo_operations+0xc2>
        printf("  RX FIFO bytes: %d\n\r", rx_bytes);
 8000d8c:	7efb      	ldrb	r3, [r7, #27]
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4876      	ldr	r0, [pc, #472]	@ (8000f6c <test_fifo_operations+0x298>)
 8000d92:	f007 fca7 	bl	80086e4 <iprintf>
    }
    
    // Test 3: Write test data to TX FIFO
    printf("3. Writing test data to TX FIFO\n\r");
 8000d96:	4876      	ldr	r0, [pc, #472]	@ (8000f70 <test_fifo_operations+0x29c>)
 8000d98:	f007 fca4 	bl	80086e4 <iprintf>
    uint8_t test_data[] = {0xAA, 0x55, 0xCC, 0x33, 0xFF, 0x00, 0x11, 0x22};
 8000d9c:	4a75      	ldr	r2, [pc, #468]	@ (8000f74 <test_fifo_operations+0x2a0>)
 8000d9e:	f107 0310 	add.w	r3, r7, #16
 8000da2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000da6:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t test_data_length = sizeof(test_data);
 8000daa:	2308      	movs	r3, #8
 8000dac:	77bb      	strb	r3, [r7, #30]
    
    hal_status = CC1201_WriteTxFifo(test_data, test_data_length, &status_byte);
 8000dae:	f107 021d 	add.w	r2, r7, #29
 8000db2:	7fb9      	ldrb	r1, [r7, #30]
 8000db4:	f107 0310 	add.w	r3, r7, #16
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff fd75 	bl	80008a8 <CC1201_WriteTxFifo>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 8000dc2:	7ffb      	ldrb	r3, [r7, #31]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d126      	bne.n	8000e16 <test_fifo_operations+0x142>
        printf("  ✓ Wrote %d bytes to TX FIFO\n\r", test_data_length);
 8000dc8:	7fbb      	ldrb	r3, [r7, #30]
 8000dca:	4619      	mov	r1, r3
 8000dcc:	486a      	ldr	r0, [pc, #424]	@ (8000f78 <test_fifo_operations+0x2a4>)
 8000dce:	f007 fc89 	bl	80086e4 <iprintf>
        print_cc1201_status(status_byte, "TX_WRITE");
 8000dd2:	7f7b      	ldrb	r3, [r7, #29]
 8000dd4:	4969      	ldr	r1, [pc, #420]	@ (8000f7c <test_fifo_operations+0x2a8>)
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff ff0e 	bl	8000bf8 <print_cc1201_status>
        
        // Check TX FIFO count after write
        hal_status = CC1201_GetNumTXBytes(&tx_bytes);
 8000ddc:	f107 031c 	add.w	r3, r7, #28
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff fd53 	bl	800088c <CC1201_GetNumTXBytes>
 8000de6:	4603      	mov	r3, r0
 8000de8:	77fb      	strb	r3, [r7, #31]
        if (hal_status == HAL_OK) {
 8000dea:	7ffb      	ldrb	r3, [r7, #31]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d117      	bne.n	8000e20 <test_fifo_operations+0x14c>
            printf("  TX FIFO bytes after write: %d (expected: %d)\n\r", tx_bytes, test_data_length);
 8000df0:	7f3b      	ldrb	r3, [r7, #28]
 8000df2:	4619      	mov	r1, r3
 8000df4:	7fbb      	ldrb	r3, [r7, #30]
 8000df6:	461a      	mov	r2, r3
 8000df8:	4861      	ldr	r0, [pc, #388]	@ (8000f80 <test_fifo_operations+0x2ac>)
 8000dfa:	f007 fc73 	bl	80086e4 <iprintf>
            if (tx_bytes == test_data_length) {
 8000dfe:	7f3b      	ldrb	r3, [r7, #28]
 8000e00:	7fba      	ldrb	r2, [r7, #30]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d103      	bne.n	8000e0e <test_fifo_operations+0x13a>
                printf("  ✓ TX FIFO count matches written data\n\r");
 8000e06:	485f      	ldr	r0, [pc, #380]	@ (8000f84 <test_fifo_operations+0x2b0>)
 8000e08:	f007 fc6c 	bl	80086e4 <iprintf>
 8000e0c:	e008      	b.n	8000e20 <test_fifo_operations+0x14c>
            } else {
                printf("  ✗ TX FIFO count mismatch\n\r");
 8000e0e:	485e      	ldr	r0, [pc, #376]	@ (8000f88 <test_fifo_operations+0x2b4>)
 8000e10:	f007 fc68 	bl	80086e4 <iprintf>
 8000e14:	e004      	b.n	8000e20 <test_fifo_operations+0x14c>
            }
        }
    } else {
        printf("  ✗ TX FIFO write FAILED - HAL Error: %d\n\r", hal_status);
 8000e16:	7ffb      	ldrb	r3, [r7, #31]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	485c      	ldr	r0, [pc, #368]	@ (8000f8c <test_fifo_operations+0x2b8>)
 8000e1c:	f007 fc62 	bl	80086e4 <iprintf>
    }
    
    // Test 4: Write single byte to TX FIFO
    printf("4. Writing single byte to TX FIFO\n\r");
 8000e20:	485b      	ldr	r0, [pc, #364]	@ (8000f90 <test_fifo_operations+0x2bc>)
 8000e22:	f007 fc5f 	bl	80086e4 <iprintf>
    hal_status = CC1201_WriteSingleTxFifo(0x42, &status_byte);
 8000e26:	f107 031d 	add.w	r3, r7, #29
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	2042      	movs	r0, #66	@ 0x42
 8000e2e:	f7ff fe9f 	bl	8000b70 <CC1201_WriteSingleTxFifo>
 8000e32:	4603      	mov	r3, r0
 8000e34:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 8000e36:	7ffb      	ldrb	r3, [r7, #31]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d117      	bne.n	8000e6c <test_fifo_operations+0x198>
        printf("  ✓ Wrote single byte (0x42) to TX FIFO\n\r");
 8000e3c:	4855      	ldr	r0, [pc, #340]	@ (8000f94 <test_fifo_operations+0x2c0>)
 8000e3e:	f007 fc51 	bl	80086e4 <iprintf>
        print_cc1201_status(status_byte, "TX_SINGLE");
 8000e42:	7f7b      	ldrb	r3, [r7, #29]
 8000e44:	4954      	ldr	r1, [pc, #336]	@ (8000f98 <test_fifo_operations+0x2c4>)
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fed6 	bl	8000bf8 <print_cc1201_status>
        
        // Check updated count
        hal_status = CC1201_GetNumTXBytes(&tx_bytes);
 8000e4c:	f107 031c 	add.w	r3, r7, #28
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fd1b 	bl	800088c <CC1201_GetNumTXBytes>
 8000e56:	4603      	mov	r3, r0
 8000e58:	77fb      	strb	r3, [r7, #31]
        if (hal_status == HAL_OK) {
 8000e5a:	7ffb      	ldrb	r3, [r7, #31]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d10a      	bne.n	8000e76 <test_fifo_operations+0x1a2>
            printf("  TX FIFO bytes after single write: %d\n\r", tx_bytes);
 8000e60:	7f3b      	ldrb	r3, [r7, #28]
 8000e62:	4619      	mov	r1, r3
 8000e64:	484d      	ldr	r0, [pc, #308]	@ (8000f9c <test_fifo_operations+0x2c8>)
 8000e66:	f007 fc3d 	bl	80086e4 <iprintf>
 8000e6a:	e004      	b.n	8000e76 <test_fifo_operations+0x1a2>
        }
    } else {
        printf("  ✗ Single TX write FAILED - HAL Error: %d\n\r", hal_status);
 8000e6c:	7ffb      	ldrb	r3, [r7, #31]
 8000e6e:	4619      	mov	r1, r3
 8000e70:	484b      	ldr	r0, [pc, #300]	@ (8000fa0 <test_fifo_operations+0x2cc>)
 8000e72:	f007 fc37 	bl	80086e4 <iprintf>
    }
    
    // Test 5: Attempt to read from RX FIFO (should be empty)
    printf("5. Reading from empty RX FIFO\n\r");
 8000e76:	484b      	ldr	r0, [pc, #300]	@ (8000fa4 <test_fifo_operations+0x2d0>)
 8000e78:	f007 fc34 	bl	80086e4 <iprintf>
    uint8_t read_buffer[10] = {0};
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	811a      	strh	r2, [r3, #8]
    hal_status = CC1201_ReadRxFifo(read_buffer, 1, &status_byte);
 8000e86:	f107 021d 	add.w	r2, r7, #29
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fdb2 	bl	80009f8 <CC1201_ReadRxFifo>
 8000e94:	4603      	mov	r3, r0
 8000e96:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 8000e98:	7ffb      	ldrb	r3, [r7, #31]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d119      	bne.n	8000ed2 <test_fifo_operations+0x1fe>
        printf("  Read from RX FIFO: 0x%02X\n\r", read_buffer[0]);
 8000e9e:	793b      	ldrb	r3, [r7, #4]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4841      	ldr	r0, [pc, #260]	@ (8000fa8 <test_fifo_operations+0x2d4>)
 8000ea4:	f007 fc1e 	bl	80086e4 <iprintf>
        print_cc1201_status(status_byte, "RX_READ_EMPTY");
 8000ea8:	7f7b      	ldrb	r3, [r7, #29]
 8000eaa:	4940      	ldr	r1, [pc, #256]	@ (8000fac <test_fifo_operations+0x2d8>)
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fea3 	bl	8000bf8 <print_cc1201_status>
        
        hal_status = CC1201_GetNumRXBytes(&rx_bytes);
 8000eb2:	f107 031b 	add.w	r3, r7, #27
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff fcda 	bl	8000870 <CC1201_GetNumRXBytes>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	77fb      	strb	r3, [r7, #31]
        if (hal_status == HAL_OK) {
 8000ec0:	7ffb      	ldrb	r3, [r7, #31]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d10a      	bne.n	8000edc <test_fifo_operations+0x208>
            printf("  RX FIFO bytes after read: %d\n\r", rx_bytes);
 8000ec6:	7efb      	ldrb	r3, [r7, #27]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4839      	ldr	r0, [pc, #228]	@ (8000fb0 <test_fifo_operations+0x2dc>)
 8000ecc:	f007 fc0a 	bl	80086e4 <iprintf>
 8000ed0:	e004      	b.n	8000edc <test_fifo_operations+0x208>
        }
    } else {
        printf("  ✗ RX FIFO read FAILED - HAL Error: %d\n\r", hal_status);
 8000ed2:	7ffb      	ldrb	r3, [r7, #31]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4837      	ldr	r0, [pc, #220]	@ (8000fb4 <test_fifo_operations+0x2e0>)
 8000ed8:	f007 fc04 	bl	80086e4 <iprintf>
    }
    
    // Test 6: Flush TX FIFO and verify
    printf("6. Flushing TX FIFO and verifying\n\r");
 8000edc:	4836      	ldr	r0, [pc, #216]	@ (8000fb8 <test_fifo_operations+0x2e4>)
 8000ede:	f007 fc01 	bl	80086e4 <iprintf>
    hal_status = CC1201_FlushTxFifo(&status_byte);
 8000ee2:	f107 031d 	add.w	r3, r7, #29
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff fc3d 	bl	8000766 <CC1201_FlushTxFifo>
 8000eec:	4603      	mov	r3, r0
 8000eee:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 8000ef0:	7ffb      	ldrb	r3, [r7, #31]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d11e      	bne.n	8000f34 <test_fifo_operations+0x260>
        print_cc1201_status(status_byte, "FINAL_FLUSH_TX");
 8000ef6:	7f7b      	ldrb	r3, [r7, #29]
 8000ef8:	4930      	ldr	r1, [pc, #192]	@ (8000fbc <test_fifo_operations+0x2e8>)
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fe7c 	bl	8000bf8 <print_cc1201_status>
        
        hal_status = CC1201_GetNumTXBytes(&tx_bytes);
 8000f00:	f107 031c 	add.w	r3, r7, #28
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fcc1 	bl	800088c <CC1201_GetNumTXBytes>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	77fb      	strb	r3, [r7, #31]
        if (hal_status == HAL_OK) {
 8000f0e:	7ffb      	ldrb	r3, [r7, #31]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d114      	bne.n	8000f3e <test_fifo_operations+0x26a>
            printf("  TX FIFO bytes after flush: %d (expected: 0)\n\r", tx_bytes);
 8000f14:	7f3b      	ldrb	r3, [r7, #28]
 8000f16:	4619      	mov	r1, r3
 8000f18:	4829      	ldr	r0, [pc, #164]	@ (8000fc0 <test_fifo_operations+0x2ec>)
 8000f1a:	f007 fbe3 	bl	80086e4 <iprintf>
            if (tx_bytes == 0) {
 8000f1e:	7f3b      	ldrb	r3, [r7, #28]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d103      	bne.n	8000f2c <test_fifo_operations+0x258>
                printf("  ✓ TX FIFO successfully flushed\n\r");
 8000f24:	4827      	ldr	r0, [pc, #156]	@ (8000fc4 <test_fifo_operations+0x2f0>)
 8000f26:	f007 fbdd 	bl	80086e4 <iprintf>
 8000f2a:	e008      	b.n	8000f3e <test_fifo_operations+0x26a>
            } else {
                printf("  ✗ TX FIFO flush incomplete\n\r");
 8000f2c:	4826      	ldr	r0, [pc, #152]	@ (8000fc8 <test_fifo_operations+0x2f4>)
 8000f2e:	f007 fbd9 	bl	80086e4 <iprintf>
 8000f32:	e004      	b.n	8000f3e <test_fifo_operations+0x26a>
            }
        }
    } else {
        printf("  ✗ TX FIFO flush FAILED - HAL Error: %d\n\r", hal_status);
 8000f34:	7ffb      	ldrb	r3, [r7, #31]
 8000f36:	4619      	mov	r1, r3
 8000f38:	4824      	ldr	r0, [pc, #144]	@ (8000fcc <test_fifo_operations+0x2f8>)
 8000f3a:	f007 fbd3 	bl	80086e4 <iprintf>
    }
    
    printf("=== FIFO OPERATIONS TEST COMPLETE ===\n\r");
 8000f3e:	4824      	ldr	r0, [pc, #144]	@ (8000fd0 <test_fifo_operations+0x2fc>)
 8000f40:	f007 fbd0 	bl	80086e4 <iprintf>
}
 8000f44:	3720      	adds	r7, #32
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	08009db0 	.word	0x08009db0
 8000f50:	08009dd0 	.word	0x08009dd0
 8000f54:	08009df4 	.word	0x08009df4
 8000f58:	08009e04 	.word	0x08009e04
 8000f5c:	0800978c 	.word	0x0800978c
 8000f60:	08009748 	.word	0x08009748
 8000f64:	08009e18 	.word	0x08009e18
 8000f68:	08009e34 	.word	0x08009e34
 8000f6c:	08009e4c 	.word	0x08009e4c
 8000f70:	08009e64 	.word	0x08009e64
 8000f74:	0800a1c8 	.word	0x0800a1c8
 8000f78:	08009e88 	.word	0x08009e88
 8000f7c:	08009eac 	.word	0x08009eac
 8000f80:	08009eb8 	.word	0x08009eb8
 8000f84:	08009eec 	.word	0x08009eec
 8000f88:	08009f18 	.word	0x08009f18
 8000f8c:	08009f38 	.word	0x08009f38
 8000f90:	08009f68 	.word	0x08009f68
 8000f94:	08009f8c 	.word	0x08009f8c
 8000f98:	08009fb8 	.word	0x08009fb8
 8000f9c:	08009fc4 	.word	0x08009fc4
 8000fa0:	08009ff0 	.word	0x08009ff0
 8000fa4:	0800a020 	.word	0x0800a020
 8000fa8:	0800a040 	.word	0x0800a040
 8000fac:	0800a060 	.word	0x0800a060
 8000fb0:	0800a070 	.word	0x0800a070
 8000fb4:	0800a094 	.word	0x0800a094
 8000fb8:	0800a0c0 	.word	0x0800a0c0
 8000fbc:	0800a0e4 	.word	0x0800a0e4
 8000fc0:	0800a0f4 	.word	0x0800a0f4
 8000fc4:	0800a124 	.word	0x0800a124
 8000fc8:	0800a14c 	.word	0x0800a14c
 8000fcc:	0800a170 	.word	0x0800a170
 8000fd0:	0800a1a0 	.word	0x0800a1a0

08000fd4 <test_buffer_readwrite_verification>:

// New comprehensive buffer read/write with verification test
void test_buffer_readwrite_verification(void) {
 8000fd4:	b5b0      	push	{r4, r5, r7, lr}
 8000fd6:	b094      	sub	sp, #80	@ 0x50
 8000fd8:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef hal_status;
    uint8_t status_byte = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
    
    printf("\n=== BUFFER READ/WRITE VERIFICATION TEST ===\n\r");
 8000fe0:	48aa      	ldr	r0, [pc, #680]	@ (800128c <test_buffer_readwrite_verification+0x2b8>)
 8000fe2:	f007 fb7f 	bl	80086e4 <iprintf>
    
    // This test demonstrates comprehensive buffer operations with full transparency
    
    // 1. Enter IDLE and clear FIFOs
    printf("1. INITIALIZING TEST STATE\n\r");
 8000fe6:	48aa      	ldr	r0, [pc, #680]	@ (8001290 <test_buffer_readwrite_verification+0x2bc>)
 8000fe8:	f007 fb7c 	bl	80086e4 <iprintf>
    hal_status = CC1201_EnterIdleMode(&status_byte);
 8000fec:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fb9e 	bl	8000732 <CC1201_EnterIdleMode>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    if (hal_status == HAL_OK) {
 8000ffc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001000:	2b00      	cmp	r3, #0
 8001002:	d131      	bne.n	8001068 <test_buffer_readwrite_verification+0x94>
        print_cc1201_status(status_byte, "ENTER_IDLE");
 8001004:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001008:	49a2      	ldr	r1, [pc, #648]	@ (8001294 <test_buffer_readwrite_verification+0x2c0>)
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fdf4 	bl	8000bf8 <print_cc1201_status>
        printf("  ✗ Failed to enter IDLE - HAL: %d\n\r", hal_status);
        return;
    }
    
    // Clear FIFOs
    CC1201_FlushTxFifo(&status_byte);
 8001010:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fba6 	bl	8000766 <CC1201_FlushTxFifo>
    print_cc1201_status(status_byte, "FLUSH_TX");
 800101a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800101e:	499e      	ldr	r1, [pc, #632]	@ (8001298 <test_buffer_readwrite_verification+0x2c4>)
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fde9 	bl	8000bf8 <print_cc1201_status>
    CC1201_FlushRxFifo(&status_byte);
 8001026:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fb8e 	bl	800074c <CC1201_FlushRxFifo>
    print_cc1201_status(status_byte, "FLUSH_RX");
 8001030:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001034:	4999      	ldr	r1, [pc, #612]	@ (800129c <test_buffer_readwrite_verification+0x2c8>)
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fdde 	bl	8000bf8 <print_cc1201_status>
    
    // 2. Test different data patterns
    printf("\n2. TESTING MULTIPLE DATA PATTERNS\n\r");
 800103c:	4898      	ldr	r0, [pc, #608]	@ (80012a0 <test_buffer_readwrite_verification+0x2cc>)
 800103e:	f007 fb51 	bl	80086e4 <iprintf>
    
    uint8_t patterns[][8] = {
 8001042:	4b98      	ldr	r3, [pc, #608]	@ (80012a4 <test_buffer_readwrite_verification+0x2d0>)
 8001044:	f107 0420 	add.w	r4, r7, #32
 8001048:	461d      	mov	r5, r3
 800104a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800104c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800104e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001052:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        {0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55},  // Alternating
        {0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00},  // High/Low
        {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80}   // Bit shifts
    };
    
    const char* pattern_names[] = {"SEQUENTIAL", "ALTERNATING", "HIGH_LOW", "BIT_SHIFT"};
 8001056:	4b94      	ldr	r3, [pc, #592]	@ (80012a8 <test_buffer_readwrite_verification+0x2d4>)
 8001058:	f107 0410 	add.w	r4, r7, #16
 800105c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800105e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    for (int p = 0; p < 4; p++) {
 8001062:	2300      	movs	r3, #0
 8001064:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001066:	e065      	b.n	8001134 <test_buffer_readwrite_verification+0x160>
        printf("  ✗ Failed to enter IDLE - HAL: %d\n\r", hal_status);
 8001068:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800106c:	4619      	mov	r1, r3
 800106e:	488f      	ldr	r0, [pc, #572]	@ (80012ac <test_buffer_readwrite_verification+0x2d8>)
 8001070:	f007 fb38 	bl	80086e4 <iprintf>
 8001074:	e106      	b.n	8001284 <test_buffer_readwrite_verification+0x2b0>
        printf("\n  Pattern %d: %s\n\r", p+1, pattern_names[p]);
 8001076:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001078:	1c59      	adds	r1, r3, #1
 800107a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	3350      	adds	r3, #80	@ 0x50
 8001080:	443b      	add	r3, r7
 8001082:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8001086:	461a      	mov	r2, r3
 8001088:	4889      	ldr	r0, [pc, #548]	@ (80012b0 <test_buffer_readwrite_verification+0x2dc>)
 800108a:	f007 fb2b 	bl	80086e4 <iprintf>
        printf("  Data: ");
 800108e:	4889      	ldr	r0, [pc, #548]	@ (80012b4 <test_buffer_readwrite_verification+0x2e0>)
 8001090:	f007 fb28 	bl	80086e4 <iprintf>
        for (int i = 0; i < 8; i++) {
 8001094:	2300      	movs	r3, #0
 8001096:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001098:	e00e      	b.n	80010b8 <test_buffer_readwrite_verification+0xe4>
            printf("0x%02X ", patterns[p][i]);
 800109a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	3350      	adds	r3, #80	@ 0x50
 80010a0:	19da      	adds	r2, r3, r7
 80010a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80010a4:	4413      	add	r3, r2
 80010a6:	3b30      	subs	r3, #48	@ 0x30
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	4619      	mov	r1, r3
 80010ac:	4882      	ldr	r0, [pc, #520]	@ (80012b8 <test_buffer_readwrite_verification+0x2e4>)
 80010ae:	f007 fb19 	bl	80086e4 <iprintf>
        for (int i = 0; i < 8; i++) {
 80010b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80010b4:	3301      	adds	r3, #1
 80010b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80010b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80010ba:	2b07      	cmp	r3, #7
 80010bc:	dded      	ble.n	800109a <test_buffer_readwrite_verification+0xc6>
        }
        printf("\n\r");
 80010be:	487f      	ldr	r0, [pc, #508]	@ (80012bc <test_buffer_readwrite_verification+0x2e8>)
 80010c0:	f007 fb10 	bl	80086e4 <iprintf>
        
        // Write pattern to TX FIFO
        hal_status = CC1201_WriteTxFifo(patterns[p], 8, &status_byte);
 80010c4:	f107 0220 	add.w	r2, r7, #32
 80010c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	4413      	add	r3, r2
 80010ce:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80010d2:	2108      	movs	r1, #8
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fbe7 	bl	80008a8 <CC1201_WriteTxFifo>
 80010da:	4603      	mov	r3, r0
 80010dc:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
        if (hal_status == HAL_OK) {
 80010e0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d11c      	bne.n	8001122 <test_buffer_readwrite_verification+0x14e>
            printf("  ✓ Write SUCCESS ");
 80010e8:	4875      	ldr	r0, [pc, #468]	@ (80012c0 <test_buffer_readwrite_verification+0x2ec>)
 80010ea:	f007 fafb 	bl	80086e4 <iprintf>
            print_cc1201_status(status_byte, "PATTERN_WRITE");
 80010ee:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80010f2:	4974      	ldr	r1, [pc, #464]	@ (80012c4 <test_buffer_readwrite_verification+0x2f0>)
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fd7f 	bl	8000bf8 <print_cc1201_status>
            
            // Check FIFO count
            uint8_t fifo_count = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	717b      	strb	r3, [r7, #5]
            CC1201_GetNumTXBytes(&fifo_count);
 80010fe:	1d7b      	adds	r3, r7, #5
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fbc3 	bl	800088c <CC1201_GetNumTXBytes>
            printf("  FIFO count: %d bytes\n\r", fifo_count);
 8001106:	797b      	ldrb	r3, [r7, #5]
 8001108:	4619      	mov	r1, r3
 800110a:	486f      	ldr	r0, [pc, #444]	@ (80012c8 <test_buffer_readwrite_verification+0x2f4>)
 800110c:	f007 faea 	bl	80086e4 <iprintf>
            
            // Clear FIFO for next test
            CC1201_FlushTxFifo(&status_byte);
 8001110:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fb26 	bl	8000766 <CC1201_FlushTxFifo>
            printf("  Flushed for next test\n\r");
 800111a:	486c      	ldr	r0, [pc, #432]	@ (80012cc <test_buffer_readwrite_verification+0x2f8>)
 800111c:	f007 fae2 	bl	80086e4 <iprintf>
 8001120:	e005      	b.n	800112e <test_buffer_readwrite_verification+0x15a>
        } else {
            printf("  ✗ Write FAILED - HAL: %d\n\r", hal_status);
 8001122:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001126:	4619      	mov	r1, r3
 8001128:	4869      	ldr	r0, [pc, #420]	@ (80012d0 <test_buffer_readwrite_verification+0x2fc>)
 800112a:	f007 fadb 	bl	80086e4 <iprintf>
    for (int p = 0; p < 4; p++) {
 800112e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001130:	3301      	adds	r3, #1
 8001132:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001134:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001136:	2b03      	cmp	r3, #3
 8001138:	dd9d      	ble.n	8001076 <test_buffer_readwrite_verification+0xa2>
        }
    }
    
    // 3. Test single byte operations with verification
    printf("\n3. SINGLE BYTE OPERATIONS TEST\n\r");
 800113a:	4866      	ldr	r0, [pc, #408]	@ (80012d4 <test_buffer_readwrite_verification+0x300>)
 800113c:	f007 fad2 	bl	80086e4 <iprintf>
    uint8_t test_bytes[] = {0x42, 0x69, 0xA5, 0x3C, 0xF0};
 8001140:	4a65      	ldr	r2, [pc, #404]	@ (80012d8 <test_buffer_readwrite_verification+0x304>)
 8001142:	f107 0308 	add.w	r3, r7, #8
 8001146:	e892 0003 	ldmia.w	r2, {r0, r1}
 800114a:	6018      	str	r0, [r3, #0]
 800114c:	3304      	adds	r3, #4
 800114e:	7019      	strb	r1, [r3, #0]
    
    for (int i = 0; i < 5; i++) {
 8001150:	2300      	movs	r3, #0
 8001152:	647b      	str	r3, [r7, #68]	@ 0x44
 8001154:	e02f      	b.n	80011b6 <test_buffer_readwrite_verification+0x1e2>
        printf("  Writing byte %d: 0x%02X\n\r", i+1, test_bytes[i]);
 8001156:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001158:	1c59      	adds	r1, r3, #1
 800115a:	f107 0208 	add.w	r2, r7, #8
 800115e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001160:	4413      	add	r3, r2
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	485d      	ldr	r0, [pc, #372]	@ (80012dc <test_buffer_readwrite_verification+0x308>)
 8001168:	f007 fabc 	bl	80086e4 <iprintf>
        hal_status = CC1201_WriteSingleTxFifo(test_bytes[i], &status_byte);
 800116c:	f107 0208 	add.w	r2, r7, #8
 8001170:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001172:	4413      	add	r3, r2
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 800117a:	4611      	mov	r1, r2
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff fcf7 	bl	8000b70 <CC1201_WriteSingleTxFifo>
 8001182:	4603      	mov	r3, r0
 8001184:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
        if (hal_status == HAL_OK) {
 8001188:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800118c:	2b00      	cmp	r3, #0
 800118e:	d109      	bne.n	80011a4 <test_buffer_readwrite_verification+0x1d0>
            printf("    ✓ Single write SUCCESS ");
 8001190:	4853      	ldr	r0, [pc, #332]	@ (80012e0 <test_buffer_readwrite_verification+0x30c>)
 8001192:	f007 faa7 	bl	80086e4 <iprintf>
            print_cc1201_status(status_byte, "SINGLE_BYTE");
 8001196:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800119a:	4952      	ldr	r1, [pc, #328]	@ (80012e4 <test_buffer_readwrite_verification+0x310>)
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fd2b 	bl	8000bf8 <print_cc1201_status>
 80011a2:	e005      	b.n	80011b0 <test_buffer_readwrite_verification+0x1dc>
        } else {
            printf("    ✗ Single write FAILED - HAL: %d\n\r", hal_status);
 80011a4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80011a8:	4619      	mov	r1, r3
 80011aa:	484f      	ldr	r0, [pc, #316]	@ (80012e8 <test_buffer_readwrite_verification+0x314>)
 80011ac:	f007 fa9a 	bl	80086e4 <iprintf>
    for (int i = 0; i < 5; i++) {
 80011b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011b2:	3301      	adds	r3, #1
 80011b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80011b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011b8:	2b04      	cmp	r3, #4
 80011ba:	ddcc      	ble.n	8001156 <test_buffer_readwrite_verification+0x182>
        }
    }
    
    // Check final FIFO count
    uint8_t final_count = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	71fb      	strb	r3, [r7, #7]
    CC1201_GetNumTXBytes(&final_count);
 80011c0:	1dfb      	adds	r3, r7, #7
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff fb62 	bl	800088c <CC1201_GetNumTXBytes>
    printf("  Final TX FIFO: %d bytes (expected: 5)\n\r", final_count);
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	4619      	mov	r1, r3
 80011cc:	4847      	ldr	r0, [pc, #284]	@ (80012ec <test_buffer_readwrite_verification+0x318>)
 80011ce:	f007 fa89 	bl	80086e4 <iprintf>
    
    // 4. Test state transitions with data
    printf("\n4. STATE TRANSITION WITH BUFFER DATA\n\r");
 80011d2:	4847      	ldr	r0, [pc, #284]	@ (80012f0 <test_buffer_readwrite_verification+0x31c>)
 80011d4:	f007 fa86 	bl	80086e4 <iprintf>
    hal_status = CC1201_EnterTxMode(&status_byte);
 80011d8:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fa9b 	bl	8000718 <CC1201_EnterTxMode>
 80011e2:	4603      	mov	r3, r0
 80011e4:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    if (hal_status == HAL_OK) {
 80011e8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d123      	bne.n	8001238 <test_buffer_readwrite_verification+0x264>
        printf("  ✓ Entered TX mode with %d bytes in FIFO\n\r", final_count);
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	4619      	mov	r1, r3
 80011f4:	483f      	ldr	r0, [pc, #252]	@ (80012f4 <test_buffer_readwrite_verification+0x320>)
 80011f6:	f007 fa75 	bl	80086e4 <iprintf>
        print_cc1201_status(status_byte, "TX_MODE_WITH_DATA");
 80011fa:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80011fe:	493e      	ldr	r1, [pc, #248]	@ (80012f8 <test_buffer_readwrite_verification+0x324>)
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff fcf9 	bl	8000bf8 <print_cc1201_status>
        
        HAL_Delay(50); // Allow some time for potential transmission
 8001206:	2032      	movs	r0, #50	@ 0x32
 8001208:	f001 fbc8 	bl	800299c <HAL_Delay>
        
        // Check status after time in TX mode
        CC1201_Nop(&status_byte);
 800120c:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fab5 	bl	8000780 <CC1201_Nop>
        print_cc1201_status(status_byte, "TX_AFTER_DELAY");
 8001216:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800121a:	4938      	ldr	r1, [pc, #224]	@ (80012fc <test_buffer_readwrite_verification+0x328>)
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff fceb 	bl	8000bf8 <print_cc1201_status>
        
        // Return to IDLE
        CC1201_EnterIdleMode(&status_byte);
 8001222:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff fa83 	bl	8000732 <CC1201_EnterIdleMode>
        print_cc1201_status(status_byte, "RETURN_TO_IDLE");
 800122c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001230:	4933      	ldr	r1, [pc, #204]	@ (8001300 <test_buffer_readwrite_verification+0x32c>)
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff fce0 	bl	8000bf8 <print_cc1201_status>
    }
    
    // 5. Final cleanup
    printf("\n5. FINAL CLEANUP AND VERIFICATION\n\r");
 8001238:	4832      	ldr	r0, [pc, #200]	@ (8001304 <test_buffer_readwrite_verification+0x330>)
 800123a:	f007 fa53 	bl	80086e4 <iprintf>
    CC1201_FlushTxFifo(&status_byte);
 800123e:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff fa8f 	bl	8000766 <CC1201_FlushTxFifo>
    print_cc1201_status(status_byte, "FINAL_CLEANUP");
 8001248:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800124c:	492e      	ldr	r1, [pc, #184]	@ (8001308 <test_buffer_readwrite_verification+0x334>)
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fcd2 	bl	8000bf8 <print_cc1201_status>
    
    uint8_t cleanup_count = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	71bb      	strb	r3, [r7, #6]
    CC1201_GetNumTXBytes(&cleanup_count);
 8001258:	1dbb      	adds	r3, r7, #6
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fb16 	bl	800088c <CC1201_GetNumTXBytes>
    printf("  Final FIFO count: %d (should be 0)\n\r", cleanup_count);
 8001260:	79bb      	ldrb	r3, [r7, #6]
 8001262:	4619      	mov	r1, r3
 8001264:	4829      	ldr	r0, [pc, #164]	@ (800130c <test_buffer_readwrite_verification+0x338>)
 8001266:	f007 fa3d 	bl	80086e4 <iprintf>
    
    if (cleanup_count == 0) {
 800126a:	79bb      	ldrb	r3, [r7, #6]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d103      	bne.n	8001278 <test_buffer_readwrite_verification+0x2a4>
        printf("  ✓ BUFFER TEST COMPLETED SUCCESSFULLY\n\r");
 8001270:	4827      	ldr	r0, [pc, #156]	@ (8001310 <test_buffer_readwrite_verification+0x33c>)
 8001272:	f007 fa37 	bl	80086e4 <iprintf>
 8001276:	e002      	b.n	800127e <test_buffer_readwrite_verification+0x2aa>
    } else {
        printf("  ⚠ FIFO not completely empty after cleanup\n\r");
 8001278:	4826      	ldr	r0, [pc, #152]	@ (8001314 <test_buffer_readwrite_verification+0x340>)
 800127a:	f007 fa33 	bl	80086e4 <iprintf>
    }
    
    printf("=== BUFFER VERIFICATION TEST COMPLETE ===\n\r");
 800127e:	4826      	ldr	r0, [pc, #152]	@ (8001318 <test_buffer_readwrite_verification+0x344>)
 8001280:	f007 fa30 	bl	80086e4 <iprintf>
}
 8001284:	3750      	adds	r7, #80	@ 0x50
 8001286:	46bd      	mov	sp, r7
 8001288:	bdb0      	pop	{r4, r5, r7, pc}
 800128a:	bf00      	nop
 800128c:	0800a1d0 	.word	0x0800a1d0
 8001290:	0800a200 	.word	0x0800a200
 8001294:	0800a220 	.word	0x0800a220
 8001298:	0800978c 	.word	0x0800978c
 800129c:	08009748 	.word	0x08009748
 80012a0:	0800a254 	.word	0x0800a254
 80012a4:	0800a55c 	.word	0x0800a55c
 80012a8:	0800a5ac 	.word	0x0800a5ac
 80012ac:	0800a22c 	.word	0x0800a22c
 80012b0:	0800a27c 	.word	0x0800a27c
 80012b4:	0800a290 	.word	0x0800a290
 80012b8:	0800a29c 	.word	0x0800a29c
 80012bc:	0800a2a4 	.word	0x0800a2a4
 80012c0:	0800a2a8 	.word	0x0800a2a8
 80012c4:	0800a2c0 	.word	0x0800a2c0
 80012c8:	0800a2d0 	.word	0x0800a2d0
 80012cc:	0800a2ec 	.word	0x0800a2ec
 80012d0:	0800a308 	.word	0x0800a308
 80012d4:	0800a328 	.word	0x0800a328
 80012d8:	0800a5bc 	.word	0x0800a5bc
 80012dc:	0800a34c 	.word	0x0800a34c
 80012e0:	0800a368 	.word	0x0800a368
 80012e4:	0800a388 	.word	0x0800a388
 80012e8:	0800a394 	.word	0x0800a394
 80012ec:	0800a3bc 	.word	0x0800a3bc
 80012f0:	0800a3e8 	.word	0x0800a3e8
 80012f4:	0800a410 	.word	0x0800a410
 80012f8:	0800a440 	.word	0x0800a440
 80012fc:	0800a454 	.word	0x0800a454
 8001300:	0800a464 	.word	0x0800a464
 8001304:	0800a474 	.word	0x0800a474
 8001308:	0800a49c 	.word	0x0800a49c
 800130c:	0800a4ac 	.word	0x0800a4ac
 8001310:	0800a4d4 	.word	0x0800a4d4
 8001314:	0800a500 	.word	0x0800a500
 8001318:	0800a530 	.word	0x0800a530

0800131c <test_cc1201_communication_verification>:

// CC1201 Communication Verification Test
void test_cc1201_communication_verification(void) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef hal_status;
    uint8_t status_byte = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	70bb      	strb	r3, [r7, #2]
    
    printf("\n=== CC1201 COMMUNICATION VERIFICATION TEST ===\n\r");
 8001326:	487b      	ldr	r0, [pc, #492]	@ (8001514 <test_cc1201_communication_verification+0x1f8>)
 8001328:	f007 f9dc 	bl	80086e4 <iprintf>
    
    // 1. Test basic communication with different strobe commands
    printf("1. TESTING BASIC STROBE RESPONSES\n\r");
 800132c:	487a      	ldr	r0, [pc, #488]	@ (8001518 <test_cc1201_communication_verification+0x1fc>)
 800132e:	f007 f9d9 	bl	80086e4 <iprintf>
    
    // Test NOP command multiple times to see if we get consistent responses
    for (int i = 0; i < 5; i++) {
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	e01b      	b.n	8001370 <test_cc1201_communication_verification+0x54>
        hal_status = CC1201_Nop(&status_byte);
 8001338:	1cbb      	adds	r3, r7, #2
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fa20 	bl	8000780 <CC1201_Nop>
 8001340:	4603      	mov	r3, r0
 8001342:	70fb      	strb	r3, [r7, #3]
        printf("  NOP %d: HAL=%d, Status=0x%02X ", i+1, hal_status, status_byte);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	1c59      	adds	r1, r3, #1
 8001348:	78fa      	ldrb	r2, [r7, #3]
 800134a:	78bb      	ldrb	r3, [r7, #2]
 800134c:	4873      	ldr	r0, [pc, #460]	@ (800151c <test_cc1201_communication_verification+0x200>)
 800134e:	f007 f9c9 	bl	80086e4 <iprintf>
        if (hal_status == HAL_OK) {
 8001352:	78fb      	ldrb	r3, [r7, #3]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d105      	bne.n	8001364 <test_cc1201_communication_verification+0x48>
            print_cc1201_status(status_byte, "NOP_TEST");
 8001358:	78bb      	ldrb	r3, [r7, #2]
 800135a:	4971      	ldr	r1, [pc, #452]	@ (8001520 <test_cc1201_communication_verification+0x204>)
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fc4b 	bl	8000bf8 <print_cc1201_status>
 8001362:	e002      	b.n	800136a <test_cc1201_communication_verification+0x4e>
        } else {
            printf(" - COMMUNICATION FAILED\n\r");
 8001364:	486f      	ldr	r0, [pc, #444]	@ (8001524 <test_cc1201_communication_verification+0x208>)
 8001366:	f007 f9bd 	bl	80086e4 <iprintf>
    for (int i = 0; i < 5; i++) {
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3301      	adds	r3, #1
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b04      	cmp	r3, #4
 8001374:	dde0      	ble.n	8001338 <test_cc1201_communication_verification+0x1c>
        }
    }
    
    // 2. Test soft reset to see if status changes
    printf("\n2. TESTING SOFT RESET RESPONSE\n\r");
 8001376:	486c      	ldr	r0, [pc, #432]	@ (8001528 <test_cc1201_communication_verification+0x20c>)
 8001378:	f007 f9b4 	bl	80086e4 <iprintf>
    hal_status = CC1201_SoftReset(&status_byte);
 800137c:	1cbb      	adds	r3, r7, #2
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff f994 	bl	80006ac <CC1201_SoftReset>
 8001384:	4603      	mov	r3, r0
 8001386:	70fb      	strb	r3, [r7, #3]
    if (hal_status == HAL_OK) {
 8001388:	78fb      	ldrb	r3, [r7, #3]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d11c      	bne.n	80013c8 <test_cc1201_communication_verification+0xac>
        printf("  Soft Reset: ");
 800138e:	4867      	ldr	r0, [pc, #412]	@ (800152c <test_cc1201_communication_verification+0x210>)
 8001390:	f007 f9a8 	bl	80086e4 <iprintf>
        print_cc1201_status(status_byte, "RESET");
 8001394:	78bb      	ldrb	r3, [r7, #2]
 8001396:	4966      	ldr	r1, [pc, #408]	@ (8001530 <test_cc1201_communication_verification+0x214>)
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fc2d 	bl	8000bf8 <print_cc1201_status>
        
        // Wait for reset to complete and test again
        HAL_Delay(100);
 800139e:	2064      	movs	r0, #100	@ 0x64
 80013a0:	f001 fafc 	bl	800299c <HAL_Delay>
        hal_status = CC1201_Nop(&status_byte);
 80013a4:	1cbb      	adds	r3, r7, #2
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f9ea 	bl	8000780 <CC1201_Nop>
 80013ac:	4603      	mov	r3, r0
 80013ae:	70fb      	strb	r3, [r7, #3]
        if (hal_status == HAL_OK) {
 80013b0:	78fb      	ldrb	r3, [r7, #3]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d10d      	bne.n	80013d2 <test_cc1201_communication_verification+0xb6>
            printf("  After Reset: ");
 80013b6:	485f      	ldr	r0, [pc, #380]	@ (8001534 <test_cc1201_communication_verification+0x218>)
 80013b8:	f007 f994 	bl	80086e4 <iprintf>
            print_cc1201_status(status_byte, "POST_RESET");
 80013bc:	78bb      	ldrb	r3, [r7, #2]
 80013be:	495e      	ldr	r1, [pc, #376]	@ (8001538 <test_cc1201_communication_verification+0x21c>)
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff fc19 	bl	8000bf8 <print_cc1201_status>
 80013c6:	e004      	b.n	80013d2 <test_cc1201_communication_verification+0xb6>
        }
    } else {
        printf("  ✗ Soft Reset FAILED - HAL: %d\n\r", hal_status);
 80013c8:	78fb      	ldrb	r3, [r7, #3]
 80013ca:	4619      	mov	r1, r3
 80013cc:	485b      	ldr	r0, [pc, #364]	@ (800153c <test_cc1201_communication_verification+0x220>)
 80013ce:	f007 f989 	bl	80086e4 <iprintf>
    }
    
    // 3. Test different states to see if we get different status responses
    printf("\n3. TESTING STATE TRANSITIONS\n\r");
 80013d2:	485b      	ldr	r0, [pc, #364]	@ (8001540 <test_cc1201_communication_verification+0x224>)
 80013d4:	f007 f986 	bl	80086e4 <iprintf>
    
    // Try to enter IDLE
    hal_status = CC1201_EnterIdleMode(&status_byte);
 80013d8:	1cbb      	adds	r3, r7, #2
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff f9a9 	bl	8000732 <CC1201_EnterIdleMode>
 80013e0:	4603      	mov	r3, r0
 80013e2:	70fb      	strb	r3, [r7, #3]
    if (hal_status == HAL_OK) {
 80013e4:	78fb      	ldrb	r3, [r7, #3]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d107      	bne.n	80013fa <test_cc1201_communication_verification+0xde>
        printf("  IDLE Mode: ");
 80013ea:	4856      	ldr	r0, [pc, #344]	@ (8001544 <test_cc1201_communication_verification+0x228>)
 80013ec:	f007 f97a 	bl	80086e4 <iprintf>
        print_cc1201_status(status_byte, "IDLE_ENTRY");
 80013f0:	78bb      	ldrb	r3, [r7, #2]
 80013f2:	4955      	ldr	r1, [pc, #340]	@ (8001548 <test_cc1201_communication_verification+0x22c>)
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff fbff 	bl	8000bf8 <print_cc1201_status>
    }
    
    // Try calibration
    hal_status = CC1201_CalFreqSynth(&status_byte);
 80013fa:	1cbb      	adds	r3, r7, #2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff f97e 	bl	80006fe <CC1201_CalFreqSynth>
 8001402:	4603      	mov	r3, r0
 8001404:	70fb      	strb	r3, [r7, #3]
    if (hal_status == HAL_OK) {
 8001406:	78fb      	ldrb	r3, [r7, #3]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d10a      	bne.n	8001422 <test_cc1201_communication_verification+0x106>
        printf("  Calibrate: ");
 800140c:	484f      	ldr	r0, [pc, #316]	@ (800154c <test_cc1201_communication_verification+0x230>)
 800140e:	f007 f969 	bl	80086e4 <iprintf>
        print_cc1201_status(status_byte, "CALIBRATE");
 8001412:	78bb      	ldrb	r3, [r7, #2]
 8001414:	494e      	ldr	r1, [pc, #312]	@ (8001550 <test_cc1201_communication_verification+0x234>)
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff fbee 	bl	8000bf8 <print_cc1201_status>
        HAL_Delay(50); // Wait for calibration
 800141c:	2032      	movs	r0, #50	@ 0x32
 800141e:	f001 fabd 	bl	800299c <HAL_Delay>
    }
    
    // Try fast TX on
    hal_status = CC1201_FastTxOn(&status_byte);
 8001422:	1cbb      	adds	r3, r7, #2
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff f95d 	bl	80006e4 <CC1201_FastTxOn>
 800142a:	4603      	mov	r3, r0
 800142c:	70fb      	strb	r3, [r7, #3]
    if (hal_status == HAL_OK) {
 800142e:	78fb      	ldrb	r3, [r7, #3]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d107      	bne.n	8001444 <test_cc1201_communication_verification+0x128>
        printf("  Fast TX On: ");
 8001434:	4847      	ldr	r0, [pc, #284]	@ (8001554 <test_cc1201_communication_verification+0x238>)
 8001436:	f007 f955 	bl	80086e4 <iprintf>
        print_cc1201_status(status_byte, "FAST_TX_ON");
 800143a:	78bb      	ldrb	r3, [r7, #2]
 800143c:	4946      	ldr	r1, [pc, #280]	@ (8001558 <test_cc1201_communication_verification+0x23c>)
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fbda 	bl	8000bf8 <print_cc1201_status>
    }
    
    // Return to IDLE
    hal_status = CC1201_EnterIdleMode(&status_byte);
 8001444:	1cbb      	adds	r3, r7, #2
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff f973 	bl	8000732 <CC1201_EnterIdleMode>
 800144c:	4603      	mov	r3, r0
 800144e:	70fb      	strb	r3, [r7, #3]
    if (hal_status == HAL_OK) {
 8001450:	78fb      	ldrb	r3, [r7, #3]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d107      	bne.n	8001466 <test_cc1201_communication_verification+0x14a>
        printf("  Return IDLE: ");
 8001456:	4841      	ldr	r0, [pc, #260]	@ (800155c <test_cc1201_communication_verification+0x240>)
 8001458:	f007 f944 	bl	80086e4 <iprintf>
        print_cc1201_status(status_byte, "RETURN_IDLE");
 800145c:	78bb      	ldrb	r3, [r7, #2]
 800145e:	4940      	ldr	r1, [pc, #256]	@ (8001560 <test_cc1201_communication_verification+0x244>)
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff fbc9 	bl	8000bf8 <print_cc1201_status>
    }
    
    // 4. Test register read to verify communication
    printf("\n4. TESTING REGISTER READ OPERATIONS\n\r");
 8001466:	483f      	ldr	r0, [pc, #252]	@ (8001564 <test_cc1201_communication_verification+0x248>)
 8001468:	f007 f93c 	bl	80086e4 <iprintf>
    
    uint8_t chip_id = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	707b      	strb	r3, [r7, #1]
    hal_status = CC1201_ReadStatus(CC1201_MARCSTATE, &chip_id);
 8001470:	1c7b      	adds	r3, r7, #1
 8001472:	4619      	mov	r1, r3
 8001474:	f642 7073 	movw	r0, #12147	@ 0x2f73
 8001478:	f7ff f99e 	bl	80007b8 <CC1201_ReadStatus>
 800147c:	4603      	mov	r3, r0
 800147e:	70fb      	strb	r3, [r7, #3]
    if (hal_status == HAL_OK) {
 8001480:	78fb      	ldrb	r3, [r7, #3]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d105      	bne.n	8001492 <test_cc1201_communication_verification+0x176>
        printf("  MARCSTATE: 0x%02X\n\r", chip_id);
 8001486:	787b      	ldrb	r3, [r7, #1]
 8001488:	4619      	mov	r1, r3
 800148a:	4837      	ldr	r0, [pc, #220]	@ (8001568 <test_cc1201_communication_verification+0x24c>)
 800148c:	f007 f92a 	bl	80086e4 <iprintf>
 8001490:	e004      	b.n	800149c <test_cc1201_communication_verification+0x180>
    } else {
        printf("  ✗ MARCSTATE read failed - HAL: %d\n\r", hal_status);
 8001492:	78fb      	ldrb	r3, [r7, #3]
 8001494:	4619      	mov	r1, r3
 8001496:	4835      	ldr	r0, [pc, #212]	@ (800156c <test_cc1201_communication_verification+0x250>)
 8001498:	f007 f924 	bl	80086e4 <iprintf>
    }
    
    uint8_t marc_state = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	703b      	strb	r3, [r7, #0]
    hal_status = CC1201_ReadMARCState(&marc_state);
 80014a0:	463b      	mov	r3, r7
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff f9d6 	bl	8000854 <CC1201_ReadMARCState>
 80014a8:	4603      	mov	r3, r0
 80014aa:	70fb      	strb	r3, [r7, #3]
    if (hal_status == HAL_OK) {
 80014ac:	78fb      	ldrb	r3, [r7, #3]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d105      	bne.n	80014be <test_cc1201_communication_verification+0x1a2>
        printf("  MARC_STATE: 0x%02X\n\r", marc_state);
 80014b2:	783b      	ldrb	r3, [r7, #0]
 80014b4:	4619      	mov	r1, r3
 80014b6:	482e      	ldr	r0, [pc, #184]	@ (8001570 <test_cc1201_communication_verification+0x254>)
 80014b8:	f007 f914 	bl	80086e4 <iprintf>
 80014bc:	e004      	b.n	80014c8 <test_cc1201_communication_verification+0x1ac>
    } else {
        printf("  ✗ MARC_STATE read failed - HAL: %d\n\r", hal_status);
 80014be:	78fb      	ldrb	r3, [r7, #3]
 80014c0:	4619      	mov	r1, r3
 80014c2:	482c      	ldr	r0, [pc, #176]	@ (8001574 <test_cc1201_communication_verification+0x258>)
 80014c4:	f007 f90e 	bl	80086e4 <iprintf>
    }
    
    // 5. Analyze status byte patterns
    printf("\n5. STATUS BYTE ANALYSIS\n\r");
 80014c8:	482b      	ldr	r0, [pc, #172]	@ (8001578 <test_cc1201_communication_verification+0x25c>)
 80014ca:	f007 f90b 	bl	80086e4 <iprintf>
    printf("  If all status bytes are 0x00, this suggests:\n\r");
 80014ce:	482b      	ldr	r0, [pc, #172]	@ (800157c <test_cc1201_communication_verification+0x260>)
 80014d0:	f007 f908 	bl	80086e4 <iprintf>
    printf("  - CC1201 may not be responding (check power/connections)\n\r");
 80014d4:	482a      	ldr	r0, [pc, #168]	@ (8001580 <test_cc1201_communication_verification+0x264>)
 80014d6:	f007 f905 	bl	80086e4 <iprintf>
    printf("  - SPI communication issue (check MISO line)\n\r");
 80014da:	482a      	ldr	r0, [pc, #168]	@ (8001584 <test_cc1201_communication_verification+0x268>)
 80014dc:	f007 f902 	bl	80086e4 <iprintf>
    printf("  - CC1201 may be in reset or powered down\n\r");
 80014e0:	4829      	ldr	r0, [pc, #164]	@ (8001588 <test_cc1201_communication_verification+0x26c>)
 80014e2:	f007 f8ff 	bl	80086e4 <iprintf>
    printf("  \n\r");
 80014e6:	4829      	ldr	r0, [pc, #164]	@ (800158c <test_cc1201_communication_verification+0x270>)
 80014e8:	f007 f8fc 	bl	80086e4 <iprintf>
    printf("  Normal CC1201 status should show:\n\r");
 80014ec:	4828      	ldr	r0, [pc, #160]	@ (8001590 <test_cc1201_communication_verification+0x274>)
 80014ee:	f007 f8f9 	bl	80086e4 <iprintf>
    printf("  - Bits [7:4]: Current state (0=IDLE, 1=RX, 2=TX, etc.)\n\r");
 80014f2:	4828      	ldr	r0, [pc, #160]	@ (8001594 <test_cc1201_communication_verification+0x278>)
 80014f4:	f007 f8f6 	bl	80086e4 <iprintf>
    printf("  - Bits [3:0]: FIFO bytes or chip status info\n\r");
 80014f8:	4827      	ldr	r0, [pc, #156]	@ (8001598 <test_cc1201_communication_verification+0x27c>)
 80014fa:	f007 f8f3 	bl	80086e4 <iprintf>
    printf("  - A functioning CC1201 should rarely return exactly 0x00\n\r");
 80014fe:	4827      	ldr	r0, [pc, #156]	@ (800159c <test_cc1201_communication_verification+0x280>)
 8001500:	f007 f8f0 	bl	80086e4 <iprintf>
    
    printf("=== COMMUNICATION VERIFICATION COMPLETE ===\n\r");
 8001504:	4826      	ldr	r0, [pc, #152]	@ (80015a0 <test_cc1201_communication_verification+0x284>)
 8001506:	f007 f8ed 	bl	80086e4 <iprintf>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	0800a5c4 	.word	0x0800a5c4
 8001518:	0800a5f8 	.word	0x0800a5f8
 800151c:	0800a61c 	.word	0x0800a61c
 8001520:	0800a640 	.word	0x0800a640
 8001524:	0800a64c 	.word	0x0800a64c
 8001528:	0800a668 	.word	0x0800a668
 800152c:	0800a68c 	.word	0x0800a68c
 8001530:	080095a4 	.word	0x080095a4
 8001534:	0800a69c 	.word	0x0800a69c
 8001538:	0800a6ac 	.word	0x0800a6ac
 800153c:	0800a6b8 	.word	0x0800a6b8
 8001540:	0800a6dc 	.word	0x0800a6dc
 8001544:	0800a6fc 	.word	0x0800a6fc
 8001548:	0800a70c 	.word	0x0800a70c
 800154c:	0800a718 	.word	0x0800a718
 8001550:	08009638 	.word	0x08009638
 8001554:	0800a728 	.word	0x0800a728
 8001558:	08009680 	.word	0x08009680
 800155c:	0800a738 	.word	0x0800a738
 8001560:	0800a748 	.word	0x0800a748
 8001564:	0800a754 	.word	0x0800a754
 8001568:	0800a77c 	.word	0x0800a77c
 800156c:	0800a794 	.word	0x0800a794
 8001570:	0800a7bc 	.word	0x0800a7bc
 8001574:	0800a7d4 	.word	0x0800a7d4
 8001578:	0800a800 	.word	0x0800a800
 800157c:	0800a81c 	.word	0x0800a81c
 8001580:	0800a850 	.word	0x0800a850
 8001584:	0800a890 	.word	0x0800a890
 8001588:	0800a8c0 	.word	0x0800a8c0
 800158c:	0800a8f0 	.word	0x0800a8f0
 8001590:	0800a8f8 	.word	0x0800a8f8
 8001594:	0800a920 	.word	0x0800a920
 8001598:	0800a95c 	.word	0x0800a95c
 800159c:	0800a990 	.word	0x0800a990
 80015a0:	0800a9d0 	.word	0x0800a9d0

080015a4 <test_GPIO_pins>:
    printf("\n🎉 COMPREHENSIVE TEST SEQUENCE COMPLETE! 🎉\n\r");
    printf("==============================================\n\r");
}

// Function to test GPIO pin states
void test_GPIO_pins(void) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
    printf("=== GPIO Pin Test ===\n\r");
 80015aa:	485c      	ldr	r0, [pc, #368]	@ (800171c <test_GPIO_pins+0x178>)
 80015ac:	f007 f89a 	bl	80086e4 <iprintf>
    
    // Test CS pin more thoroughly
    printf("CS Pin (PE4) Detailed Test:\n\r");
 80015b0:	485b      	ldr	r0, [pc, #364]	@ (8001720 <test_GPIO_pins+0x17c>)
 80015b2:	f007 f897 	bl	80086e4 <iprintf>
    GPIO_PinState cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 80015b6:	2110      	movs	r1, #16
 80015b8:	485a      	ldr	r0, [pc, #360]	@ (8001724 <test_GPIO_pins+0x180>)
 80015ba:	f002 f93d 	bl	8003838 <HAL_GPIO_ReadPin>
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
    printf("  Initial state: %s\n\r", cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d101      	bne.n	80015cc <test_GPIO_pins+0x28>
 80015c8:	4b57      	ldr	r3, [pc, #348]	@ (8001728 <test_GPIO_pins+0x184>)
 80015ca:	e000      	b.n	80015ce <test_GPIO_pins+0x2a>
 80015cc:	4b57      	ldr	r3, [pc, #348]	@ (800172c <test_GPIO_pins+0x188>)
 80015ce:	4619      	mov	r1, r3
 80015d0:	4857      	ldr	r0, [pc, #348]	@ (8001730 <test_GPIO_pins+0x18c>)
 80015d2:	f007 f887 	bl	80086e4 <iprintf>
    
    // Force CS LOW and check multiple times
    printf("  Forcing CS LOW...\n\r");
 80015d6:	4857      	ldr	r0, [pc, #348]	@ (8001734 <test_GPIO_pins+0x190>)
 80015d8:	f007 f884 	bl	80086e4 <iprintf>
    for (int i = 0; i < 5; i++) {
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	e01c      	b.n	800161c <test_GPIO_pins+0x78>
        HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2110      	movs	r1, #16
 80015e6:	484f      	ldr	r0, [pc, #316]	@ (8001724 <test_GPIO_pins+0x180>)
 80015e8:	f002 f93e 	bl	8003868 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80015ec:	200a      	movs	r0, #10
 80015ee:	f001 f9d5 	bl	800299c <HAL_Delay>
        cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 80015f2:	2110      	movs	r1, #16
 80015f4:	484b      	ldr	r0, [pc, #300]	@ (8001724 <test_GPIO_pins+0x180>)
 80015f6:	f002 f91f 	bl	8003838 <HAL_GPIO_ReadPin>
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
        printf("    Attempt %d: %s\n\r", i+1, cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	1c59      	adds	r1, r3, #1
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d101      	bne.n	800160c <test_GPIO_pins+0x68>
 8001608:	4b47      	ldr	r3, [pc, #284]	@ (8001728 <test_GPIO_pins+0x184>)
 800160a:	e000      	b.n	800160e <test_GPIO_pins+0x6a>
 800160c:	4b47      	ldr	r3, [pc, #284]	@ (800172c <test_GPIO_pins+0x188>)
 800160e:	461a      	mov	r2, r3
 8001610:	4849      	ldr	r0, [pc, #292]	@ (8001738 <test_GPIO_pins+0x194>)
 8001612:	f007 f867 	bl	80086e4 <iprintf>
    for (int i = 0; i < 5; i++) {
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	3301      	adds	r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2b04      	cmp	r3, #4
 8001620:	dddf      	ble.n	80015e2 <test_GPIO_pins+0x3e>
    }
    
    // Force CS HIGH and check multiple times
    printf("  Forcing CS HIGH...\n\r");
 8001622:	4846      	ldr	r0, [pc, #280]	@ (800173c <test_GPIO_pins+0x198>)
 8001624:	f007 f85e 	bl	80086e4 <iprintf>
    for (int i = 0; i < 5; i++) {
 8001628:	2300      	movs	r3, #0
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	e01c      	b.n	8001668 <test_GPIO_pins+0xc4>
        HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 800162e:	2201      	movs	r2, #1
 8001630:	2110      	movs	r1, #16
 8001632:	483c      	ldr	r0, [pc, #240]	@ (8001724 <test_GPIO_pins+0x180>)
 8001634:	f002 f918 	bl	8003868 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8001638:	200a      	movs	r0, #10
 800163a:	f001 f9af 	bl	800299c <HAL_Delay>
        cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 800163e:	2110      	movs	r1, #16
 8001640:	4838      	ldr	r0, [pc, #224]	@ (8001724 <test_GPIO_pins+0x180>)
 8001642:	f002 f8f9 	bl	8003838 <HAL_GPIO_ReadPin>
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]
        printf("    Attempt %d: %s\n\r", i+1, cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	1c59      	adds	r1, r3, #1
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d101      	bne.n	8001658 <test_GPIO_pins+0xb4>
 8001654:	4b34      	ldr	r3, [pc, #208]	@ (8001728 <test_GPIO_pins+0x184>)
 8001656:	e000      	b.n	800165a <test_GPIO_pins+0xb6>
 8001658:	4b34      	ldr	r3, [pc, #208]	@ (800172c <test_GPIO_pins+0x188>)
 800165a:	461a      	mov	r2, r3
 800165c:	4836      	ldr	r0, [pc, #216]	@ (8001738 <test_GPIO_pins+0x194>)
 800165e:	f007 f841 	bl	80086e4 <iprintf>
    for (int i = 0; i < 5; i++) {
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	3301      	adds	r3, #1
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	2b04      	cmp	r3, #4
 800166c:	dddf      	ble.n	800162e <test_GPIO_pins+0x8a>
    }
    
    // Test INT pin
    printf("INT Pin (PD4): ");
 800166e:	4834      	ldr	r0, [pc, #208]	@ (8001740 <test_GPIO_pins+0x19c>)
 8001670:	f007 f838 	bl	80086e4 <iprintf>
    GPIO_PinState int_state = HAL_GPIO_ReadPin(CC1201_INT_PORT, CC1201_INT_PIN);
 8001674:	2110      	movs	r1, #16
 8001676:	4833      	ldr	r0, [pc, #204]	@ (8001744 <test_GPIO_pins+0x1a0>)
 8001678:	f002 f8de 	bl	8003838 <HAL_GPIO_ReadPin>
 800167c:	4603      	mov	r3, r0
 800167e:	71bb      	strb	r3, [r7, #6]
    printf("%s\n\r", int_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 8001680:	79bb      	ldrb	r3, [r7, #6]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d101      	bne.n	800168a <test_GPIO_pins+0xe6>
 8001686:	4b28      	ldr	r3, [pc, #160]	@ (8001728 <test_GPIO_pins+0x184>)
 8001688:	e000      	b.n	800168c <test_GPIO_pins+0xe8>
 800168a:	4b28      	ldr	r3, [pc, #160]	@ (800172c <test_GPIO_pins+0x188>)
 800168c:	4619      	mov	r1, r3
 800168e:	482e      	ldr	r0, [pc, #184]	@ (8001748 <test_GPIO_pins+0x1a4>)
 8001690:	f007 f828 	bl	80086e4 <iprintf>
    
    // Check SPI state
    printf("SPI2 State: ");
 8001694:	482d      	ldr	r0, [pc, #180]	@ (800174c <test_GPIO_pins+0x1a8>)
 8001696:	f007 f825 	bl	80086e4 <iprintf>
    if (CC1201_SPI_HANDLE.State == HAL_SPI_STATE_READY) {
 800169a:	4b2d      	ldr	r3, [pc, #180]	@ (8001750 <test_GPIO_pins+0x1ac>)
 800169c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d103      	bne.n	80016ae <test_GPIO_pins+0x10a>
        printf("READY\n\r");
 80016a6:	482b      	ldr	r0, [pc, #172]	@ (8001754 <test_GPIO_pins+0x1b0>)
 80016a8:	f007 f81c 	bl	80086e4 <iprintf>
 80016ac:	e02f      	b.n	800170e <test_GPIO_pins+0x16a>
    } else if (CC1201_SPI_HANDLE.State == HAL_SPI_STATE_BUSY) {
 80016ae:	4b28      	ldr	r3, [pc, #160]	@ (8001750 <test_GPIO_pins+0x1ac>)
 80016b0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d103      	bne.n	80016c2 <test_GPIO_pins+0x11e>
        printf("BUSY\n\r");
 80016ba:	4827      	ldr	r0, [pc, #156]	@ (8001758 <test_GPIO_pins+0x1b4>)
 80016bc:	f007 f812 	bl	80086e4 <iprintf>
 80016c0:	e025      	b.n	800170e <test_GPIO_pins+0x16a>
    } else if (CC1201_SPI_HANDLE.State == HAL_SPI_STATE_BUSY_TX) {
 80016c2:	4b23      	ldr	r3, [pc, #140]	@ (8001750 <test_GPIO_pins+0x1ac>)
 80016c4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b03      	cmp	r3, #3
 80016cc:	d103      	bne.n	80016d6 <test_GPIO_pins+0x132>
        printf("BUSY_TX\n\r");
 80016ce:	4823      	ldr	r0, [pc, #140]	@ (800175c <test_GPIO_pins+0x1b8>)
 80016d0:	f007 f808 	bl	80086e4 <iprintf>
 80016d4:	e01b      	b.n	800170e <test_GPIO_pins+0x16a>
    } else if (CC1201_SPI_HANDLE.State == HAL_SPI_STATE_BUSY_RX) {
 80016d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001750 <test_GPIO_pins+0x1ac>)
 80016d8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b04      	cmp	r3, #4
 80016e0:	d103      	bne.n	80016ea <test_GPIO_pins+0x146>
        printf("BUSY_RX\n\r");
 80016e2:	481f      	ldr	r0, [pc, #124]	@ (8001760 <test_GPIO_pins+0x1bc>)
 80016e4:	f006 fffe 	bl	80086e4 <iprintf>
 80016e8:	e011      	b.n	800170e <test_GPIO_pins+0x16a>
    } else if (CC1201_SPI_HANDLE.State == HAL_SPI_STATE_BUSY_TX_RX) {
 80016ea:	4b19      	ldr	r3, [pc, #100]	@ (8001750 <test_GPIO_pins+0x1ac>)
 80016ec:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b05      	cmp	r3, #5
 80016f4:	d103      	bne.n	80016fe <test_GPIO_pins+0x15a>
        printf("BUSY_TX_RX\n\r");
 80016f6:	481b      	ldr	r0, [pc, #108]	@ (8001764 <test_GPIO_pins+0x1c0>)
 80016f8:	f006 fff4 	bl	80086e4 <iprintf>
 80016fc:	e007      	b.n	800170e <test_GPIO_pins+0x16a>
    } else {
        printf("ERROR/RESET (%d)\n\r", CC1201_SPI_HANDLE.State);
 80016fe:	4b14      	ldr	r3, [pc, #80]	@ (8001750 <test_GPIO_pins+0x1ac>)
 8001700:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8001704:	b2db      	uxtb	r3, r3
 8001706:	4619      	mov	r1, r3
 8001708:	4817      	ldr	r0, [pc, #92]	@ (8001768 <test_GPIO_pins+0x1c4>)
 800170a:	f006 ffeb 	bl	80086e4 <iprintf>
    }
    
    printf("===================\n\r");
 800170e:	4817      	ldr	r0, [pc, #92]	@ (800176c <test_GPIO_pins+0x1c8>)
 8001710:	f006 ffe8 	bl	80086e4 <iprintf>
}
 8001714:	bf00      	nop
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	0800ac9c 	.word	0x0800ac9c
 8001720:	0800acb4 	.word	0x0800acb4
 8001724:	58021000 	.word	0x58021000
 8001728:	0800acd4 	.word	0x0800acd4
 800172c:	0800acdc 	.word	0x0800acdc
 8001730:	0800ace0 	.word	0x0800ace0
 8001734:	0800acf8 	.word	0x0800acf8
 8001738:	0800ad10 	.word	0x0800ad10
 800173c:	0800ad28 	.word	0x0800ad28
 8001740:	0800ad40 	.word	0x0800ad40
 8001744:	58020c00 	.word	0x58020c00
 8001748:	0800ad50 	.word	0x0800ad50
 800174c:	0800ad58 	.word	0x0800ad58
 8001750:	240000b8 	.word	0x240000b8
 8001754:	0800ad68 	.word	0x0800ad68
 8001758:	0800ad70 	.word	0x0800ad70
 800175c:	0800ad78 	.word	0x0800ad78
 8001760:	0800ad84 	.word	0x0800ad84
 8001764:	0800ad90 	.word	0x0800ad90
 8001768:	0800ada0 	.word	0x0800ada0
 800176c:	0800adb4 	.word	0x0800adb4

08001770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001776:	f000 fb57 	bl	8001e28 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800177a:	f001 f87d 	bl	8002878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800177e:	f000 f9ef 	bl	8001b60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001782:	f000 fac1 	bl	8001d08 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001786:	f000 fa69 	bl	8001c5c <MX_SPI2_Init>
  // CC1201 testing will be done after UART is initialized

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800178a:	2000      	movs	r0, #0
 800178c:	f000 fe1e 	bl	80023cc <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8001790:	2001      	movs	r0, #1
 8001792:	f000 fe1b 	bl	80023cc <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8001796:	2002      	movs	r0, #2
 8001798:	f000 fe18 	bl	80023cc <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800179c:	2101      	movs	r1, #1
 800179e:	2000      	movs	r0, #0
 80017a0:	f000 ff08 	bl	80025b4 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80017a4:	4b87      	ldr	r3, [pc, #540]	@ (80019c4 <main+0x254>)
 80017a6:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017aa:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80017ac:	4b85      	ldr	r3, [pc, #532]	@ (80019c4 <main+0x254>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80017b2:	4b84      	ldr	r3, [pc, #528]	@ (80019c4 <main+0x254>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80017b8:	4b82      	ldr	r3, [pc, #520]	@ (80019c4 <main+0x254>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80017be:	4b81      	ldr	r3, [pc, #516]	@ (80019c4 <main+0x254>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80017c4:	497f      	ldr	r1, [pc, #508]	@ (80019c4 <main+0x254>)
 80017c6:	2000      	movs	r0, #0
 80017c8:	f000 ff78 	bl	80026bc <BSP_COM_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <main+0x66>
  {
    Error_Handler();
 80017d2:	f000 fb69 	bl	8001ea8 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 80017d6:	487c      	ldr	r0, [pc, #496]	@ (80019c8 <main+0x258>)
 80017d8:	f006 ff84 	bl	80086e4 <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 80017dc:	2000      	movs	r0, #0
 80017de:	f000 fe6b 	bl	80024b8 <BSP_LED_On>
  BSP_LED_On(LED_YELLOW);
 80017e2:	2001      	movs	r0, #1
 80017e4:	f000 fe68 	bl	80024b8 <BSP_LED_On>
  BSP_LED_On(LED_RED);
 80017e8:	2002      	movs	r0, #2
 80017ea:	f000 fe65 	bl	80024b8 <BSP_LED_On>
  
  // Now that UART is initialized, start CC1201 testing
  printf("\n=== CC1201 COMMUNICATION SYSTEM STARTUP ===\n\r");
 80017ee:	4877      	ldr	r0, [pc, #476]	@ (80019cc <main+0x25c>)
 80017f0:	f006 ff78 	bl	80086e4 <iprintf>
  
  // Test GPIO pins first
  test_GPIO_pins();
 80017f4:	f7ff fed6 	bl	80015a4 <test_GPIO_pins>
  
  // Simple test instead of full initialization
  printf("Starting simple CC1201 test...\n\r");
 80017f8:	4875      	ldr	r0, [pc, #468]	@ (80019d0 <main+0x260>)
 80017fa:	f006 ff73 	bl	80086e4 <iprintf>
  HAL_Delay(100);
 80017fe:	2064      	movs	r0, #100	@ 0x64
 8001800:	f001 f8cc 	bl	800299c <HAL_Delay>
  
  // First, test SPI2 peripheral directly
  printf("Testing SPI2 peripheral directly...\n\r");
 8001804:	4873      	ldr	r0, [pc, #460]	@ (80019d4 <main+0x264>)
 8001806:	f006 ff6d 	bl	80086e4 <iprintf>
  printf("SPI2 Initial Config: State=%d, Mode=%lu, DataSize=%lu, BaudRate=%lu\n\r",
         CC1201_SPI_HANDLE.State, 
 800180a:	4b73      	ldr	r3, [pc, #460]	@ (80019d8 <main+0x268>)
 800180c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8001810:	b2db      	uxtb	r3, r3
  printf("SPI2 Initial Config: State=%d, Mode=%lu, DataSize=%lu, BaudRate=%lu\n\r",
 8001812:	4618      	mov	r0, r3
 8001814:	4b70      	ldr	r3, [pc, #448]	@ (80019d8 <main+0x268>)
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	4b6f      	ldr	r3, [pc, #444]	@ (80019d8 <main+0x268>)
 800181a:	68d9      	ldr	r1, [r3, #12]
 800181c:	4b6e      	ldr	r3, [pc, #440]	@ (80019d8 <main+0x268>)
 800181e:	69db      	ldr	r3, [r3, #28]
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	460b      	mov	r3, r1
 8001824:	4601      	mov	r1, r0
 8001826:	486d      	ldr	r0, [pc, #436]	@ (80019dc <main+0x26c>)
 8001828:	f006 ff5c 	bl	80086e4 <iprintf>
         CC1201_SPI_HANDLE.Init.Mode,
         CC1201_SPI_HANDLE.Init.DataSize,
         CC1201_SPI_HANDLE.Init.BaudRatePrescaler);
  
  // Try to fix SPI2 configuration
  printf("Attempting to reconfigure SPI2...\n\r");
 800182c:	486c      	ldr	r0, [pc, #432]	@ (80019e0 <main+0x270>)
 800182e:	f006 ff59 	bl	80086e4 <iprintf>
  
  // Deinitialize SPI2
  HAL_SPI_DeInit(&CC1201_SPI_HANDLE);
 8001832:	4869      	ldr	r0, [pc, #420]	@ (80019d8 <main+0x268>)
 8001834:	f004 ffbc 	bl	80067b0 <HAL_SPI_DeInit>
  
  // Reconfigure SPI2 manually
  CC1201_SPI_HANDLE.Instance = SPI2;
 8001838:	4b67      	ldr	r3, [pc, #412]	@ (80019d8 <main+0x268>)
 800183a:	4a6a      	ldr	r2, [pc, #424]	@ (80019e4 <main+0x274>)
 800183c:	601a      	str	r2, [r3, #0]
  CC1201_SPI_HANDLE.Init.Mode = SPI_MODE_MASTER;
 800183e:	4b66      	ldr	r3, [pc, #408]	@ (80019d8 <main+0x268>)
 8001840:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001844:	605a      	str	r2, [r3, #4]
  CC1201_SPI_HANDLE.Init.Direction = SPI_DIRECTION_2LINES;
 8001846:	4b64      	ldr	r3, [pc, #400]	@ (80019d8 <main+0x268>)
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
  CC1201_SPI_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 800184c:	4b62      	ldr	r3, [pc, #392]	@ (80019d8 <main+0x268>)
 800184e:	2207      	movs	r2, #7
 8001850:	60da      	str	r2, [r3, #12]
  CC1201_SPI_HANDLE.Init.CLKPolarity = SPI_POLARITY_LOW;    // CPOL = 0
 8001852:	4b61      	ldr	r3, [pc, #388]	@ (80019d8 <main+0x268>)
 8001854:	2200      	movs	r2, #0
 8001856:	611a      	str	r2, [r3, #16]
  CC1201_SPI_HANDLE.Init.CLKPhase = SPI_PHASE_1EDGE;       // CPHA = 0
 8001858:	4b5f      	ldr	r3, [pc, #380]	@ (80019d8 <main+0x268>)
 800185a:	2200      	movs	r2, #0
 800185c:	615a      	str	r2, [r3, #20]
  CC1201_SPI_HANDLE.Init.NSS = SPI_NSS_SOFT;
 800185e:	4b5e      	ldr	r3, [pc, #376]	@ (80019d8 <main+0x268>)
 8001860:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001864:	619a      	str	r2, [r3, #24]
  CC1201_SPI_HANDLE.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32; // Slower speed
 8001866:	4b5c      	ldr	r3, [pc, #368]	@ (80019d8 <main+0x268>)
 8001868:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800186c:	61da      	str	r2, [r3, #28]
  CC1201_SPI_HANDLE.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800186e:	4b5a      	ldr	r3, [pc, #360]	@ (80019d8 <main+0x268>)
 8001870:	2200      	movs	r2, #0
 8001872:	621a      	str	r2, [r3, #32]
  CC1201_SPI_HANDLE.Init.TIMode = SPI_TIMODE_DISABLE;
 8001874:	4b58      	ldr	r3, [pc, #352]	@ (80019d8 <main+0x268>)
 8001876:	2200      	movs	r2, #0
 8001878:	625a      	str	r2, [r3, #36]	@ 0x24
  CC1201_SPI_HANDLE.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800187a:	4b57      	ldr	r3, [pc, #348]	@ (80019d8 <main+0x268>)
 800187c:	2200      	movs	r2, #0
 800187e:	629a      	str	r2, [r3, #40]	@ 0x28
  CC1201_SPI_HANDLE.Init.CRCPolynomial = 0x0;
 8001880:	4b55      	ldr	r3, [pc, #340]	@ (80019d8 <main+0x268>)
 8001882:	2200      	movs	r2, #0
 8001884:	62da      	str	r2, [r3, #44]	@ 0x2c
  CC1201_SPI_HANDLE.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001886:	4b54      	ldr	r3, [pc, #336]	@ (80019d8 <main+0x268>)
 8001888:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800188c:	635a      	str	r2, [r3, #52]	@ 0x34
  CC1201_SPI_HANDLE.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800188e:	4b52      	ldr	r3, [pc, #328]	@ (80019d8 <main+0x268>)
 8001890:	2200      	movs	r2, #0
 8001892:	639a      	str	r2, [r3, #56]	@ 0x38
  CC1201_SPI_HANDLE.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001894:	4b50      	ldr	r3, [pc, #320]	@ (80019d8 <main+0x268>)
 8001896:	2200      	movs	r2, #0
 8001898:	63da      	str	r2, [r3, #60]	@ 0x3c
  CC1201_SPI_HANDLE.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800189a:	4b4f      	ldr	r3, [pc, #316]	@ (80019d8 <main+0x268>)
 800189c:	2200      	movs	r2, #0
 800189e:	641a      	str	r2, [r3, #64]	@ 0x40
  CC1201_SPI_HANDLE.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018a0:	4b4d      	ldr	r3, [pc, #308]	@ (80019d8 <main+0x268>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	645a      	str	r2, [r3, #68]	@ 0x44
  CC1201_SPI_HANDLE.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80018a6:	4b4c      	ldr	r3, [pc, #304]	@ (80019d8 <main+0x268>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	649a      	str	r2, [r3, #72]	@ 0x48
  CC1201_SPI_HANDLE.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80018ac:	4b4a      	ldr	r3, [pc, #296]	@ (80019d8 <main+0x268>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	64da      	str	r2, [r3, #76]	@ 0x4c
  CC1201_SPI_HANDLE.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80018b2:	4b49      	ldr	r3, [pc, #292]	@ (80019d8 <main+0x268>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	651a      	str	r2, [r3, #80]	@ 0x50
  CC1201_SPI_HANDLE.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80018b8:	4b47      	ldr	r3, [pc, #284]	@ (80019d8 <main+0x268>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	655a      	str	r2, [r3, #84]	@ 0x54
  CC1201_SPI_HANDLE.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80018be:	4b46      	ldr	r3, [pc, #280]	@ (80019d8 <main+0x268>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	659a      	str	r2, [r3, #88]	@ 0x58
  
  HAL_StatusTypeDef spi_init_result = HAL_SPI_Init(&CC1201_SPI_HANDLE);
 80018c4:	4844      	ldr	r0, [pc, #272]	@ (80019d8 <main+0x268>)
 80018c6:	f004 fe4f 	bl	8006568 <HAL_SPI_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
  printf("SPI2 reinitialization result: %d\n\r", spi_init_result);
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	4619      	mov	r1, r3
 80018d2:	4845      	ldr	r0, [pc, #276]	@ (80019e8 <main+0x278>)
 80018d4:	f006 ff06 	bl	80086e4 <iprintf>
  
  if (spi_init_result == HAL_OK) {
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d111      	bne.n	8001902 <main+0x192>
      printf("SPI2 Reconfigured - State=%d, Mode=%lu, DataSize=%lu, BaudRate=%lu\n\r",
             CC1201_SPI_HANDLE.State, 
 80018de:	4b3e      	ldr	r3, [pc, #248]	@ (80019d8 <main+0x268>)
 80018e0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80018e4:	b2db      	uxtb	r3, r3
      printf("SPI2 Reconfigured - State=%d, Mode=%lu, DataSize=%lu, BaudRate=%lu\n\r",
 80018e6:	4618      	mov	r0, r3
 80018e8:	4b3b      	ldr	r3, [pc, #236]	@ (80019d8 <main+0x268>)
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	4b3a      	ldr	r3, [pc, #232]	@ (80019d8 <main+0x268>)
 80018ee:	68d9      	ldr	r1, [r3, #12]
 80018f0:	4b39      	ldr	r3, [pc, #228]	@ (80019d8 <main+0x268>)
 80018f2:	69db      	ldr	r3, [r3, #28]
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	460b      	mov	r3, r1
 80018f8:	4601      	mov	r1, r0
 80018fa:	483c      	ldr	r0, [pc, #240]	@ (80019ec <main+0x27c>)
 80018fc:	f006 fef2 	bl	80086e4 <iprintf>
 8001900:	e002      	b.n	8001908 <main+0x198>
             CC1201_SPI_HANDLE.Init.Mode,
             CC1201_SPI_HANDLE.Init.DataSize,
             CC1201_SPI_HANDLE.Init.BaudRatePrescaler);
  } else {
      printf("SPI2 reconfiguration failed!\n\r");
 8001902:	483b      	ldr	r0, [pc, #236]	@ (80019f0 <main+0x280>)
 8001904:	f006 feee 	bl	80086e4 <iprintf>
  }
  
  uint8_t spi_test_tx = 0xAA;
 8001908:	23aa      	movs	r3, #170	@ 0xaa
 800190a:	70fb      	strb	r3, [r7, #3]
  uint8_t spi_test_rx = 0x00;
 800190c:	2300      	movs	r3, #0
 800190e:	70bb      	strb	r3, [r7, #2]
  
  HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // CS Low
 8001910:	2200      	movs	r2, #0
 8001912:	2110      	movs	r1, #16
 8001914:	4837      	ldr	r0, [pc, #220]	@ (80019f4 <main+0x284>)
 8001916:	f001 ffa7 	bl	8003868 <HAL_GPIO_WritePin>
  HAL_StatusTypeDef spi_test_result = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, &spi_test_tx, &spi_test_rx, 1, 100);
 800191a:	1cba      	adds	r2, r7, #2
 800191c:	1cf9      	adds	r1, r7, #3
 800191e:	2364      	movs	r3, #100	@ 0x64
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	2301      	movs	r3, #1
 8001924:	482c      	ldr	r0, [pc, #176]	@ (80019d8 <main+0x268>)
 8001926:	f004 ff6d 	bl	8006804 <HAL_SPI_TransmitReceive>
 800192a:	4603      	mov	r3, r0
 800192c:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // CS High
 800192e:	2201      	movs	r2, #1
 8001930:	2110      	movs	r1, #16
 8001932:	4830      	ldr	r0, [pc, #192]	@ (80019f4 <main+0x284>)
 8001934:	f001 ff98 	bl	8003868 <HAL_GPIO_WritePin>
  
  printf("Direct SPI test - HAL: %d, TX: 0x%02X, RX: 0x%02X\n\r", spi_test_result, spi_test_tx, spi_test_rx);
 8001938:	79b9      	ldrb	r1, [r7, #6]
 800193a:	78fb      	ldrb	r3, [r7, #3]
 800193c:	461a      	mov	r2, r3
 800193e:	78bb      	ldrb	r3, [r7, #2]
 8001940:	482d      	ldr	r0, [pc, #180]	@ (80019f8 <main+0x288>)
 8001942:	f006 fecf 	bl	80086e4 <iprintf>
  
  if (spi_test_result == HAL_OK) {
 8001946:	79bb      	ldrb	r3, [r7, #6]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d103      	bne.n	8001954 <main+0x1e4>
      printf("SPI2 peripheral working!\n\r");
 800194c:	482b      	ldr	r0, [pc, #172]	@ (80019fc <main+0x28c>)
 800194e:	f006 fec9 	bl	80086e4 <iprintf>
 8001952:	e016      	b.n	8001982 <main+0x212>
  } else {
      printf("SPI2 peripheral failed! Error: %d\n\r", spi_test_result);
 8001954:	79bb      	ldrb	r3, [r7, #6]
 8001956:	4619      	mov	r1, r3
 8001958:	4829      	ldr	r0, [pc, #164]	@ (8001a00 <main+0x290>)
 800195a:	f006 fec3 	bl	80086e4 <iprintf>
      if (spi_test_result == HAL_TIMEOUT) printf("  -> SPI TIMEOUT\n\r");
 800195e:	79bb      	ldrb	r3, [r7, #6]
 8001960:	2b03      	cmp	r3, #3
 8001962:	d102      	bne.n	800196a <main+0x1fa>
 8001964:	4827      	ldr	r0, [pc, #156]	@ (8001a04 <main+0x294>)
 8001966:	f006 febd 	bl	80086e4 <iprintf>
      if (spi_test_result == HAL_ERROR) printf("  -> SPI ERROR\n\r");
 800196a:	79bb      	ldrb	r3, [r7, #6]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d102      	bne.n	8001976 <main+0x206>
 8001970:	4825      	ldr	r0, [pc, #148]	@ (8001a08 <main+0x298>)
 8001972:	f006 feb7 	bl	80086e4 <iprintf>
      if (spi_test_result == HAL_BUSY) printf("  -> SPI BUSY\n\r");
 8001976:	79bb      	ldrb	r3, [r7, #6]
 8001978:	2b02      	cmp	r3, #2
 800197a:	d102      	bne.n	8001982 <main+0x212>
 800197c:	4823      	ldr	r0, [pc, #140]	@ (8001a0c <main+0x29c>)
 800197e:	f006 feb1 	bl	80086e4 <iprintf>
  }
  
  printf("Test 1: Creating status byte variable...\n\r");
 8001982:	4823      	ldr	r0, [pc, #140]	@ (8001a10 <main+0x2a0>)
 8001984:	f006 feae 	bl	80086e4 <iprintf>
  uint8_t test_status = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	707b      	strb	r3, [r7, #1]
  
  printf("Test 2: About to call CC1201_Nop...\n\r");
 800198c:	4821      	ldr	r0, [pc, #132]	@ (8001a14 <main+0x2a4>)
 800198e:	f006 fea9 	bl	80086e4 <iprintf>
  HAL_StatusTypeDef nop_result = CC1201_Nop(&test_status);
 8001992:	1c7b      	adds	r3, r7, #1
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe fef3 	bl	8000780 <CC1201_Nop>
 800199a:	4603      	mov	r3, r0
 800199c:	717b      	strb	r3, [r7, #5]
  
  printf("Test 3: NOP returned - HAL: %d, Status: 0x%02X\n\r", nop_result, test_status);
 800199e:	797b      	ldrb	r3, [r7, #5]
 80019a0:	787a      	ldrb	r2, [r7, #1]
 80019a2:	4619      	mov	r1, r3
 80019a4:	481c      	ldr	r0, [pc, #112]	@ (8001a18 <main+0x2a8>)
 80019a6:	f006 fe9d 	bl	80086e4 <iprintf>
  
  if (nop_result == HAL_OK) {
 80019aa:	797b      	ldrb	r3, [r7, #5]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d137      	bne.n	8001a20 <main+0x2b0>
      printf("Basic CC1201 communication working!\n\r");
 80019b0:	481a      	ldr	r0, [pc, #104]	@ (8001a1c <main+0x2ac>)
 80019b2:	f006 fe97 	bl	80086e4 <iprintf>
      BSP_LED_Off(LED_RED);
 80019b6:	2002      	movs	r0, #2
 80019b8:	f000 fda8 	bl	800250c <BSP_LED_Off>
      BSP_LED_On(LED_GREEN);
 80019bc:	2000      	movs	r0, #0
 80019be:	f000 fd7b 	bl	80024b8 <BSP_LED_On>
 80019c2:	e036      	b.n	8001a32 <main+0x2c2>
 80019c4:	240000a4 	.word	0x240000a4
 80019c8:	0800b518 	.word	0x0800b518
 80019cc:	0800b534 	.word	0x0800b534
 80019d0:	0800b564 	.word	0x0800b564
 80019d4:	0800b588 	.word	0x0800b588
 80019d8:	240000b8 	.word	0x240000b8
 80019dc:	0800b5b0 	.word	0x0800b5b0
 80019e0:	0800b5f8 	.word	0x0800b5f8
 80019e4:	40003800 	.word	0x40003800
 80019e8:	0800b61c 	.word	0x0800b61c
 80019ec:	0800b640 	.word	0x0800b640
 80019f0:	0800b688 	.word	0x0800b688
 80019f4:	58021000 	.word	0x58021000
 80019f8:	0800b6a8 	.word	0x0800b6a8
 80019fc:	0800b6dc 	.word	0x0800b6dc
 8001a00:	0800b6f8 	.word	0x0800b6f8
 8001a04:	0800b71c 	.word	0x0800b71c
 8001a08:	0800b730 	.word	0x0800b730
 8001a0c:	0800b744 	.word	0x0800b744
 8001a10:	0800b754 	.word	0x0800b754
 8001a14:	0800b780 	.word	0x0800b780
 8001a18:	0800b7a8 	.word	0x0800b7a8
 8001a1c:	0800b7dc 	.word	0x0800b7dc
  } else {
      printf("CC1201 communication failed!\n\r");
 8001a20:	4844      	ldr	r0, [pc, #272]	@ (8001b34 <main+0x3c4>)
 8001a22:	f006 fe5f 	bl	80086e4 <iprintf>
      BSP_LED_Off(LED_GREEN);
 8001a26:	2000      	movs	r0, #0
 8001a28:	f000 fd70 	bl	800250c <BSP_LED_Off>
      BSP_LED_On(LED_RED);
 8001a2c:	2002      	movs	r0, #2
 8001a2e:	f000 fd43 	bl	80024b8 <BSP_LED_On>

  /* USER CODE END BSP */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t last_test = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
  uint32_t test_counter = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60bb      	str	r3, [r7, #8]
  
  printf("\n🚀 STARTING SIMPLE CC1201 TEST MODE 🚀\n\r");
 8001a3a:	483f      	ldr	r0, [pc, #252]	@ (8001b38 <main+0x3c8>)
 8001a3c:	f006 fe52 	bl	80086e4 <iprintf>
  
  while (1)
  {

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 8001a40:	4b3e      	ldr	r3, [pc, #248]	@ (8001b3c <main+0x3cc>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d114      	bne.n	8001a72 <main+0x302>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 8001a48:	4b3c      	ldr	r3, [pc, #240]	@ (8001b3c <main+0x3cc>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle leds ---- */
      BSP_LED_Toggle(LED_GREEN);
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f000 fd86 	bl	8002560 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_YELLOW);
 8001a54:	2001      	movs	r0, #1
 8001a56:	f000 fd83 	bl	8002560 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_RED);
 8001a5a:	2002      	movs	r0, #2
 8001a5c:	f000 fd80 	bl	8002560 <BSP_LED_Toggle>

      /* ..... Perform your action ..... */
      printf("\n[BUTTON] Manual comprehensive test triggered...\n\r");
 8001a60:	4837      	ldr	r0, [pc, #220]	@ (8001b40 <main+0x3d0>)
 8001a62:	f006 fe3f 	bl	80086e4 <iprintf>
      test_cc1201_communication_verification();
 8001a66:	f7ff fc59 	bl	800131c <test_cc1201_communication_verification>
      test_fifo_operations();
 8001a6a:	f7ff f933 	bl	8000cd4 <test_fifo_operations>
      test_buffer_readwrite_verification();
 8001a6e:	f7ff fab1 	bl	8000fd4 <test_buffer_readwrite_verification>
    }
    
    // Simple periodic test every 5 seconds  
    if (HAL_GetTick() - last_test > 5000) {
 8001a72:	f000 ff87 	bl	8002984 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d953      	bls.n	8001b2c <main+0x3bc>
      printf("[%lu] Test %lu: ", HAL_GetTick(), ++test_counter);
 8001a84:	f000 ff7e 	bl	8002984 <HAL_GetTick>
 8001a88:	4601      	mov	r1, r0
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	60bb      	str	r3, [r7, #8]
 8001a90:	68ba      	ldr	r2, [r7, #8]
 8001a92:	482c      	ldr	r0, [pc, #176]	@ (8001b44 <main+0x3d4>)
 8001a94:	f006 fe26 	bl	80086e4 <iprintf>
      
      uint8_t status_byte = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	703b      	strb	r3, [r7, #0]
      HAL_StatusTypeDef hal_status = CC1201_Nop(&status_byte);
 8001a9c:	463b      	mov	r3, r7
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe fe6e 	bl	8000780 <CC1201_Nop>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	713b      	strb	r3, [r7, #4]
      
      if (hal_status == HAL_OK) {
 8001aa8:	793b      	ldrb	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d130      	bne.n	8001b10 <main+0x3a0>
        printf("OK ");
 8001aae:	4826      	ldr	r0, [pc, #152]	@ (8001b48 <main+0x3d8>)
 8001ab0:	f006 fe18 	bl	80086e4 <iprintf>
        print_cc1201_status(status_byte, "NOP_STATUS");
 8001ab4:	783b      	ldrb	r3, [r7, #0]
 8001ab6:	4925      	ldr	r1, [pc, #148]	@ (8001b4c <main+0x3dc>)
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff f89d 	bl	8000bf8 <print_cc1201_status>
        BSP_LED_On(LED_GREEN);
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f000 fcfa 	bl	80024b8 <BSP_LED_On>
        BSP_LED_Off(LED_RED);
 8001ac4:	2002      	movs	r0, #2
 8001ac6:	f000 fd21 	bl	800250c <BSP_LED_Off>
        
        // Every 10th test, run comprehensive buffer test
        if (test_counter % 10 == 0) {
 8001aca:	68b9      	ldr	r1, [r7, #8]
 8001acc:	4b20      	ldr	r3, [pc, #128]	@ (8001b50 <main+0x3e0>)
 8001ace:	fba3 2301 	umull	r2, r3, r3, r1
 8001ad2:	08da      	lsrs	r2, r3, #3
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	1aca      	subs	r2, r1, r3
 8001ade:	2a00      	cmp	r2, #0
 8001ae0:	d104      	bne.n	8001aec <main+0x37c>
          printf("\n[PERIODIC] Running comprehensive buffer test...\n\r");
 8001ae2:	481c      	ldr	r0, [pc, #112]	@ (8001b54 <main+0x3e4>)
 8001ae4:	f006 fdfe 	bl	80086e4 <iprintf>
          test_fifo_operations();
 8001ae8:	f7ff f8f4 	bl	8000cd4 <test_fifo_operations>
        }
        
        // Every 20th test, run communication verification
        if (test_counter % 20 == 0) {
 8001aec:	68b9      	ldr	r1, [r7, #8]
 8001aee:	4b18      	ldr	r3, [pc, #96]	@ (8001b50 <main+0x3e0>)
 8001af0:	fba3 2301 	umull	r2, r3, r3, r1
 8001af4:	091a      	lsrs	r2, r3, #4
 8001af6:	4613      	mov	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	1aca      	subs	r2, r1, r3
 8001b00:	2a00      	cmp	r2, #0
 8001b02:	d110      	bne.n	8001b26 <main+0x3b6>
          printf("\n[PERIODIC] Running communication verification...\n\r");
 8001b04:	4814      	ldr	r0, [pc, #80]	@ (8001b58 <main+0x3e8>)
 8001b06:	f006 fded 	bl	80086e4 <iprintf>
          test_cc1201_communication_verification();
 8001b0a:	f7ff fc07 	bl	800131c <test_cc1201_communication_verification>
 8001b0e:	e00a      	b.n	8001b26 <main+0x3b6>
        }
      } else {
        printf("FAILED - HAL: %d\n\r", hal_status);
 8001b10:	793b      	ldrb	r3, [r7, #4]
 8001b12:	4619      	mov	r1, r3
 8001b14:	4811      	ldr	r0, [pc, #68]	@ (8001b5c <main+0x3ec>)
 8001b16:	f006 fde5 	bl	80086e4 <iprintf>
        BSP_LED_Off(LED_GREEN);
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f000 fcf6 	bl	800250c <BSP_LED_Off>
        BSP_LED_On(LED_RED);
 8001b20:	2002      	movs	r0, #2
 8001b22:	f000 fcc9 	bl	80024b8 <BSP_LED_On>
      }
      
      last_test = HAL_GetTick();
 8001b26:	f000 ff2d 	bl	8002984 <HAL_GetTick>
 8001b2a:	60f8      	str	r0, [r7, #12]
    }
    
    HAL_Delay(100);
 8001b2c:	2064      	movs	r0, #100	@ 0x64
 8001b2e:	f000 ff35 	bl	800299c <HAL_Delay>
    if (BspButtonState == BUTTON_PRESSED)
 8001b32:	e785      	b.n	8001a40 <main+0x2d0>
 8001b34:	0800b804 	.word	0x0800b804
 8001b38:	0800b824 	.word	0x0800b824
 8001b3c:	240000b4 	.word	0x240000b4
 8001b40:	0800b854 	.word	0x0800b854
 8001b44:	0800b888 	.word	0x0800b888
 8001b48:	0800b89c 	.word	0x0800b89c
 8001b4c:	0800b8a0 	.word	0x0800b8a0
 8001b50:	cccccccd 	.word	0xcccccccd
 8001b54:	0800b8ac 	.word	0x0800b8ac
 8001b58:	0800b8e0 	.word	0x0800b8e0
 8001b5c:	0800b914 	.word	0x0800b914

08001b60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b09c      	sub	sp, #112	@ 0x70
 8001b64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b6a:	224c      	movs	r2, #76	@ 0x4c
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f006 fe0d 	bl	800878e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	2220      	movs	r2, #32
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f006 fe07 	bl	800878e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001b80:	2002      	movs	r0, #2
 8001b82:	f001 fea5 	bl	80038d0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001b86:	2300      	movs	r3, #0
 8001b88:	603b      	str	r3, [r7, #0]
 8001b8a:	4b32      	ldr	r3, [pc, #200]	@ (8001c54 <SystemClock_Config+0xf4>)
 8001b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b8e:	4a31      	ldr	r2, [pc, #196]	@ (8001c54 <SystemClock_Config+0xf4>)
 8001b90:	f023 0301 	bic.w	r3, r3, #1
 8001b94:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001b96:	4b2f      	ldr	r3, [pc, #188]	@ (8001c54 <SystemClock_Config+0xf4>)
 8001b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	603b      	str	r3, [r7, #0]
 8001ba0:	4b2d      	ldr	r3, [pc, #180]	@ (8001c58 <SystemClock_Config+0xf8>)
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001ba8:	4a2b      	ldr	r2, [pc, #172]	@ (8001c58 <SystemClock_Config+0xf8>)
 8001baa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bae:	6193      	str	r3, [r2, #24]
 8001bb0:	4b29      	ldr	r3, [pc, #164]	@ (8001c58 <SystemClock_Config+0xf8>)
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001bb8:	603b      	str	r3, [r7, #0]
 8001bba:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001bbc:	bf00      	nop
 8001bbe:	4b26      	ldr	r3, [pc, #152]	@ (8001c58 <SystemClock_Config+0xf8>)
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001bca:	d1f8      	bne.n	8001bbe <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bd4:	2340      	movs	r3, #64	@ 0x40
 8001bd6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001be0:	2304      	movs	r3, #4
 8001be2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001be4:	230a      	movs	r3, #10
 8001be6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001be8:	2302      	movs	r3, #2
 8001bea:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001bec:	2302      	movs	r3, #2
 8001bee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001bf4:	230c      	movs	r3, #12
 8001bf6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c04:	4618      	mov	r0, r3
 8001c06:	f001 fe9d 	bl	8003944 <HAL_RCC_OscConfig>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001c10:	f000 f94a 	bl	8001ea8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c14:	233f      	movs	r3, #63	@ 0x3f
 8001c16:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001c20:	2300      	movs	r3, #0
 8001c22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001c2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c30:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001c32:	2300      	movs	r3, #0
 8001c34:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c36:	1d3b      	adds	r3, r7, #4
 8001c38:	2101      	movs	r1, #1
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f002 fadc 	bl	80041f8 <HAL_RCC_ClockConfig>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8001c46:	f000 f92f 	bl	8001ea8 <Error_Handler>
  }
}
 8001c4a:	bf00      	nop
 8001c4c:	3770      	adds	r7, #112	@ 0x70
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	58000400 	.word	0x58000400
 8001c58:	58024800 	.word	0x58024800

08001c5c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001c60:	4b27      	ldr	r3, [pc, #156]	@ (8001d00 <MX_SPI2_Init+0xa4>)
 8001c62:	4a28      	ldr	r2, [pc, #160]	@ (8001d04 <MX_SPI2_Init+0xa8>)
 8001c64:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c66:	4b26      	ldr	r3, [pc, #152]	@ (8001d00 <MX_SPI2_Init+0xa4>)
 8001c68:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001c6c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c6e:	4b24      	ldr	r3, [pc, #144]	@ (8001d00 <MX_SPI2_Init+0xa4>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001c74:	4b22      	ldr	r3, [pc, #136]	@ (8001d00 <MX_SPI2_Init+0xa4>)
 8001c76:	2203      	movs	r2, #3
 8001c78:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c7a:	4b21      	ldr	r3, [pc, #132]	@ (8001d00 <MX_SPI2_Init+0xa4>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c80:	4b1f      	ldr	r3, [pc, #124]	@ (8001d00 <MX_SPI2_Init+0xa4>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001c86:	4b1e      	ldr	r3, [pc, #120]	@ (8001d00 <MX_SPI2_Init+0xa4>)
 8001c88:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001c8c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d00 <MX_SPI2_Init+0xa4>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c94:	4b1a      	ldr	r3, [pc, #104]	@ (8001d00 <MX_SPI2_Init+0xa4>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c9a:	4b19      	ldr	r3, [pc, #100]	@ (8001d00 <MX_SPI2_Init+0xa4>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ca0:	4b17      	ldr	r3, [pc, #92]	@ (8001d00 <MX_SPI2_Init+0xa4>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001ca6:	4b16      	ldr	r3, [pc, #88]	@ (8001d00 <MX_SPI2_Init+0xa4>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001cac:	4b14      	ldr	r3, [pc, #80]	@ (8001d00 <MX_SPI2_Init+0xa4>)
 8001cae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cb2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001cb4:	4b12      	ldr	r3, [pc, #72]	@ (8001d00 <MX_SPI2_Init+0xa4>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001cba:	4b11      	ldr	r3, [pc, #68]	@ (8001d00 <MX_SPI2_Init+0xa4>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8001d00 <MX_SPI2_Init+0xa4>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d00 <MX_SPI2_Init+0xa4>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d00 <MX_SPI2_Init+0xa4>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d00 <MX_SPI2_Init+0xa4>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001cd8:	4b09      	ldr	r3, [pc, #36]	@ (8001d00 <MX_SPI2_Init+0xa4>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001cde:	4b08      	ldr	r3, [pc, #32]	@ (8001d00 <MX_SPI2_Init+0xa4>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001ce4:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <MX_SPI2_Init+0xa4>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001cea:	4805      	ldr	r0, [pc, #20]	@ (8001d00 <MX_SPI2_Init+0xa4>)
 8001cec:	f004 fc3c 	bl	8006568 <HAL_SPI_Init>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8001cf6:	f000 f8d7 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	240000b8 	.word	0x240000b8
 8001d04:	40003800 	.word	0x40003800

08001d08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08c      	sub	sp, #48	@ 0x30
 8001d0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0e:	f107 031c 	add.w	r3, r7, #28
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	605a      	str	r2, [r3, #4]
 8001d18:	609a      	str	r2, [r3, #8]
 8001d1a:	60da      	str	r2, [r3, #12]
 8001d1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d1e:	4b3f      	ldr	r3, [pc, #252]	@ (8001e1c <MX_GPIO_Init+0x114>)
 8001d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d24:	4a3d      	ldr	r2, [pc, #244]	@ (8001e1c <MX_GPIO_Init+0x114>)
 8001d26:	f043 0310 	orr.w	r3, r3, #16
 8001d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d2e:	4b3b      	ldr	r3, [pc, #236]	@ (8001e1c <MX_GPIO_Init+0x114>)
 8001d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d34:	f003 0310 	and.w	r3, r3, #16
 8001d38:	61bb      	str	r3, [r7, #24]
 8001d3a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d3c:	4b37      	ldr	r3, [pc, #220]	@ (8001e1c <MX_GPIO_Init+0x114>)
 8001d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d42:	4a36      	ldr	r2, [pc, #216]	@ (8001e1c <MX_GPIO_Init+0x114>)
 8001d44:	f043 0304 	orr.w	r3, r3, #4
 8001d48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d4c:	4b33      	ldr	r3, [pc, #204]	@ (8001e1c <MX_GPIO_Init+0x114>)
 8001d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d5a:	4b30      	ldr	r3, [pc, #192]	@ (8001e1c <MX_GPIO_Init+0x114>)
 8001d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d60:	4a2e      	ldr	r2, [pc, #184]	@ (8001e1c <MX_GPIO_Init+0x114>)
 8001d62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d6a:	4b2c      	ldr	r3, [pc, #176]	@ (8001e1c <MX_GPIO_Init+0x114>)
 8001d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d78:	4b28      	ldr	r3, [pc, #160]	@ (8001e1c <MX_GPIO_Init+0x114>)
 8001d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d7e:	4a27      	ldr	r2, [pc, #156]	@ (8001e1c <MX_GPIO_Init+0x114>)
 8001d80:	f043 0302 	orr.w	r3, r3, #2
 8001d84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d88:	4b24      	ldr	r3, [pc, #144]	@ (8001e1c <MX_GPIO_Init+0x114>)
 8001d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d96:	4b21      	ldr	r3, [pc, #132]	@ (8001e1c <MX_GPIO_Init+0x114>)
 8001d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d9c:	4a1f      	ldr	r2, [pc, #124]	@ (8001e1c <MX_GPIO_Init+0x114>)
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001da6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e1c <MX_GPIO_Init+0x114>)
 8001da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001db4:	4b19      	ldr	r3, [pc, #100]	@ (8001e1c <MX_GPIO_Init+0x114>)
 8001db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dba:	4a18      	ldr	r2, [pc, #96]	@ (8001e1c <MX_GPIO_Init+0x114>)
 8001dbc:	f043 0308 	orr.w	r3, r3, #8
 8001dc0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dc4:	4b15      	ldr	r3, [pc, #84]	@ (8001e1c <MX_GPIO_Init+0x114>)
 8001dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dca:	f003 0308 	and.w	r3, r3, #8
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2110      	movs	r1, #16
 8001dd6:	4812      	ldr	r0, [pc, #72]	@ (8001e20 <MX_GPIO_Init+0x118>)
 8001dd8:	f001 fd46 	bl	8003868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ddc:	2310      	movs	r3, #16
 8001dde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de0:	2301      	movs	r3, #1
 8001de2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de8:	2300      	movs	r3, #0
 8001dea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dec:	f107 031c 	add.w	r3, r7, #28
 8001df0:	4619      	mov	r1, r3
 8001df2:	480b      	ldr	r0, [pc, #44]	@ (8001e20 <MX_GPIO_Init+0x118>)
 8001df4:	f001 fa66 	bl	80032c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001df8:	2310      	movs	r3, #16
 8001dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dfc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001e00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e06:	f107 031c 	add.w	r3, r7, #28
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4805      	ldr	r0, [pc, #20]	@ (8001e24 <MX_GPIO_Init+0x11c>)
 8001e0e:	f001 fa59 	bl	80032c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e12:	bf00      	nop
 8001e14:	3730      	adds	r7, #48	@ 0x30
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	58024400 	.word	0x58024400
 8001e20:	58021000 	.word	0x58021000
 8001e24:	58020c00 	.word	0x58020c00

08001e28 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001e2e:	463b      	mov	r3, r7
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001e3a:	f000 ff21 	bl	8002c80 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001e4a:	231f      	movs	r3, #31
 8001e4c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001e4e:	2387      	movs	r3, #135	@ 0x87
 8001e50:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001e56:	2300      	movs	r3, #0
 8001e58:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001e62:	2300      	movs	r3, #0
 8001e64:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001e6a:	463b      	mov	r3, r7
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f000 ff3f 	bl	8002cf0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001e72:	2004      	movs	r0, #4
 8001e74:	f000 ff1c 	bl	8002cb0 <HAL_MPU_Enable>

}
 8001e78:	bf00      	nop
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d102      	bne.n	8001e96 <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8001e90:	4b04      	ldr	r3, [pc, #16]	@ (8001ea4 <BSP_PB_Callback+0x24>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	601a      	str	r2, [r3, #0]
  }
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	240000b4 	.word	0x240000b4

08001ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eac:	b672      	cpsid	i
}
 8001eae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eb0:	bf00      	nop
 8001eb2:	e7fd      	b.n	8001eb0 <Error_Handler+0x8>

08001eb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee4 <HAL_MspInit+0x30>)
 8001ebc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ec0:	4a08      	ldr	r2, [pc, #32]	@ (8001ee4 <HAL_MspInit+0x30>)
 8001ec2:	f043 0302 	orr.w	r3, r3, #2
 8001ec6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001eca:	4b06      	ldr	r3, [pc, #24]	@ (8001ee4 <HAL_MspInit+0x30>)
 8001ecc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	607b      	str	r3, [r7, #4]
 8001ed6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	58024400 	.word	0x58024400

08001ee8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b0ba      	sub	sp, #232	@ 0xe8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f00:	f107 0310 	add.w	r3, r7, #16
 8001f04:	22c0      	movs	r2, #192	@ 0xc0
 8001f06:	2100      	movs	r1, #0
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f006 fc40 	bl	800878e <memset>
  if(hspi->Instance==SPI2)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a35      	ldr	r2, [pc, #212]	@ (8001fe8 <HAL_SPI_MspInit+0x100>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d163      	bne.n	8001fe0 <HAL_SPI_MspInit+0xf8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001f18:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f1c:	f04f 0300 	mov.w	r3, #0
 8001f20:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f28:	f107 0310 	add.w	r3, r7, #16
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f002 fcef 	bl	8004910 <HAL_RCCEx_PeriphCLKConfig>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001f38:	f7ff ffb6 	bl	8001ea8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f3c:	4b2b      	ldr	r3, [pc, #172]	@ (8001fec <HAL_SPI_MspInit+0x104>)
 8001f3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f42:	4a2a      	ldr	r2, [pc, #168]	@ (8001fec <HAL_SPI_MspInit+0x104>)
 8001f44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f48:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f4c:	4b27      	ldr	r3, [pc, #156]	@ (8001fec <HAL_SPI_MspInit+0x104>)
 8001f4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f5a:	4b24      	ldr	r3, [pc, #144]	@ (8001fec <HAL_SPI_MspInit+0x104>)
 8001f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f60:	4a22      	ldr	r2, [pc, #136]	@ (8001fec <HAL_SPI_MspInit+0x104>)
 8001f62:	f043 0302 	orr.w	r3, r3, #2
 8001f66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f6a:	4b20      	ldr	r3, [pc, #128]	@ (8001fec <HAL_SPI_MspInit+0x104>)
 8001f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f7c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f80:	2302      	movs	r3, #2
 8001f82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f86:	2301      	movs	r3, #1
 8001f88:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f92:	2305      	movs	r3, #5
 8001f94:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f98:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4814      	ldr	r0, [pc, #80]	@ (8001ff0 <HAL_SPI_MspInit+0x108>)
 8001fa0:	f001 f990 	bl	80032c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001fa4:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001fa8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fac:	2302      	movs	r3, #2
 8001fae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fbe:	2305      	movs	r3, #5
 8001fc0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4809      	ldr	r0, [pc, #36]	@ (8001ff0 <HAL_SPI_MspInit+0x108>)
 8001fcc:	f001 f97a 	bl	80032c4 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	2024      	movs	r0, #36	@ 0x24
 8001fd6:	f000 fe10 	bl	8002bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001fda:	2024      	movs	r0, #36	@ 0x24
 8001fdc:	f000 fe27 	bl	8002c2e <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001fe0:	bf00      	nop
 8001fe2:	37e8      	adds	r7, #232	@ 0xe8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40003800 	.word	0x40003800
 8001fec:	58024400 	.word	0x58024400
 8001ff0:	58020400 	.word	0x58020400

08001ff4 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI2)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a0b      	ldr	r2, [pc, #44]	@ (8002030 <HAL_SPI_MspDeInit+0x3c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d10f      	bne.n	8002026 <HAL_SPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 8002006:	4b0b      	ldr	r3, [pc, #44]	@ (8002034 <HAL_SPI_MspDeInit+0x40>)
 8002008:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800200c:	4a09      	ldr	r2, [pc, #36]	@ (8002034 <HAL_SPI_MspDeInit+0x40>)
 800200e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002012:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 8002016:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800201a:	4807      	ldr	r0, [pc, #28]	@ (8002038 <HAL_SPI_MspDeInit+0x44>)
 800201c:	f001 fb02 	bl	8003624 <HAL_GPIO_DeInit>

    /* SPI2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 8002020:	2024      	movs	r0, #36	@ 0x24
 8002022:	f000 fe12 	bl	8002c4a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40003800 	.word	0x40003800
 8002034:	58024400 	.word	0x58024400
 8002038:	58020400 	.word	0x58020400

0800203c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002040:	bf00      	nop
 8002042:	e7fd      	b.n	8002040 <NMI_Handler+0x4>

08002044 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002048:	bf00      	nop
 800204a:	e7fd      	b.n	8002048 <HardFault_Handler+0x4>

0800204c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002050:	bf00      	nop
 8002052:	e7fd      	b.n	8002050 <MemManage_Handler+0x4>

08002054 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002058:	bf00      	nop
 800205a:	e7fd      	b.n	8002058 <BusFault_Handler+0x4>

0800205c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002060:	bf00      	nop
 8002062:	e7fd      	b.n	8002060 <UsageFault_Handler+0x4>

08002064 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002092:	f000 fc63 	bl	800295c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80020a0:	4802      	ldr	r0, [pc, #8]	@ (80020ac <SPI2_IRQHandler+0x10>)
 80020a2:	f004 fee9 	bl	8006e78 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	240000b8 	.word	0x240000b8

080020b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80020b4:	2000      	movs	r0, #0
 80020b6:	f000 faef 	bl	8002698 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}

080020be <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b086      	sub	sp, #24
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	60f8      	str	r0, [r7, #12]
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
 80020ce:	e00a      	b.n	80020e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020d0:	f3af 8000 	nop.w
 80020d4:	4601      	mov	r1, r0
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	1c5a      	adds	r2, r3, #1
 80020da:	60ba      	str	r2, [r7, #8]
 80020dc:	b2ca      	uxtb	r2, r1
 80020de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	3301      	adds	r3, #1
 80020e4:	617b      	str	r3, [r7, #20]
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	dbf0      	blt.n	80020d0 <_read+0x12>
  }

  return len;
 80020ee:	687b      	ldr	r3, [r7, #4]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]
 8002108:	e009      	b.n	800211e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	1c5a      	adds	r2, r3, #1
 800210e:	60ba      	str	r2, [r7, #8]
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f000 fb34 	bl	8002780 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	3301      	adds	r3, #1
 800211c:	617b      	str	r3, [r7, #20]
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	429a      	cmp	r2, r3
 8002124:	dbf1      	blt.n	800210a <_write+0x12>
  }
  return len;
 8002126:	687b      	ldr	r3, [r7, #4]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3718      	adds	r7, #24
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <_close>:

int _close(int file)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002138:	f04f 33ff 	mov.w	r3, #4294967295
}
 800213c:	4618      	mov	r0, r3
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002158:	605a      	str	r2, [r3, #4]
  return 0;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <_isatty>:

int _isatty(int file)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002170:	2301      	movs	r3, #1
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800217e:	b480      	push	{r7}
 8002180:	b085      	sub	sp, #20
 8002182:	af00      	add	r7, sp, #0
 8002184:	60f8      	str	r0, [r7, #12]
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021a0:	4a14      	ldr	r2, [pc, #80]	@ (80021f4 <_sbrk+0x5c>)
 80021a2:	4b15      	ldr	r3, [pc, #84]	@ (80021f8 <_sbrk+0x60>)
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021ac:	4b13      	ldr	r3, [pc, #76]	@ (80021fc <_sbrk+0x64>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d102      	bne.n	80021ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021b4:	4b11      	ldr	r3, [pc, #68]	@ (80021fc <_sbrk+0x64>)
 80021b6:	4a12      	ldr	r2, [pc, #72]	@ (8002200 <_sbrk+0x68>)
 80021b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ba:	4b10      	ldr	r3, [pc, #64]	@ (80021fc <_sbrk+0x64>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4413      	add	r3, r2
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d207      	bcs.n	80021d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021c8:	f006 fb30 	bl	800882c <__errno>
 80021cc:	4603      	mov	r3, r0
 80021ce:	220c      	movs	r2, #12
 80021d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021d2:	f04f 33ff 	mov.w	r3, #4294967295
 80021d6:	e009      	b.n	80021ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021d8:	4b08      	ldr	r3, [pc, #32]	@ (80021fc <_sbrk+0x64>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021de:	4b07      	ldr	r3, [pc, #28]	@ (80021fc <_sbrk+0x64>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4413      	add	r3, r2
 80021e6:	4a05      	ldr	r2, [pc, #20]	@ (80021fc <_sbrk+0x64>)
 80021e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ea:	68fb      	ldr	r3, [r7, #12]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	24080000 	.word	0x24080000
 80021f8:	00000400 	.word	0x00000400
 80021fc:	24000140 	.word	0x24000140
 8002200:	24000338 	.word	0x24000338

08002204 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002208:	4b43      	ldr	r3, [pc, #268]	@ (8002318 <SystemInit+0x114>)
 800220a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800220e:	4a42      	ldr	r2, [pc, #264]	@ (8002318 <SystemInit+0x114>)
 8002210:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002214:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002218:	4b40      	ldr	r3, [pc, #256]	@ (800231c <SystemInit+0x118>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 030f 	and.w	r3, r3, #15
 8002220:	2b06      	cmp	r3, #6
 8002222:	d807      	bhi.n	8002234 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002224:	4b3d      	ldr	r3, [pc, #244]	@ (800231c <SystemInit+0x118>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f023 030f 	bic.w	r3, r3, #15
 800222c:	4a3b      	ldr	r2, [pc, #236]	@ (800231c <SystemInit+0x118>)
 800222e:	f043 0307 	orr.w	r3, r3, #7
 8002232:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002234:	4b3a      	ldr	r3, [pc, #232]	@ (8002320 <SystemInit+0x11c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a39      	ldr	r2, [pc, #228]	@ (8002320 <SystemInit+0x11c>)
 800223a:	f043 0301 	orr.w	r3, r3, #1
 800223e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002240:	4b37      	ldr	r3, [pc, #220]	@ (8002320 <SystemInit+0x11c>)
 8002242:	2200      	movs	r2, #0
 8002244:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002246:	4b36      	ldr	r3, [pc, #216]	@ (8002320 <SystemInit+0x11c>)
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	4935      	ldr	r1, [pc, #212]	@ (8002320 <SystemInit+0x11c>)
 800224c:	4b35      	ldr	r3, [pc, #212]	@ (8002324 <SystemInit+0x120>)
 800224e:	4013      	ands	r3, r2
 8002250:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002252:	4b32      	ldr	r3, [pc, #200]	@ (800231c <SystemInit+0x118>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	2b00      	cmp	r3, #0
 800225c:	d007      	beq.n	800226e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800225e:	4b2f      	ldr	r3, [pc, #188]	@ (800231c <SystemInit+0x118>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f023 030f 	bic.w	r3, r3, #15
 8002266:	4a2d      	ldr	r2, [pc, #180]	@ (800231c <SystemInit+0x118>)
 8002268:	f043 0307 	orr.w	r3, r3, #7
 800226c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800226e:	4b2c      	ldr	r3, [pc, #176]	@ (8002320 <SystemInit+0x11c>)
 8002270:	2200      	movs	r2, #0
 8002272:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002274:	4b2a      	ldr	r3, [pc, #168]	@ (8002320 <SystemInit+0x11c>)
 8002276:	2200      	movs	r2, #0
 8002278:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800227a:	4b29      	ldr	r3, [pc, #164]	@ (8002320 <SystemInit+0x11c>)
 800227c:	2200      	movs	r2, #0
 800227e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002280:	4b27      	ldr	r3, [pc, #156]	@ (8002320 <SystemInit+0x11c>)
 8002282:	4a29      	ldr	r2, [pc, #164]	@ (8002328 <SystemInit+0x124>)
 8002284:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002286:	4b26      	ldr	r3, [pc, #152]	@ (8002320 <SystemInit+0x11c>)
 8002288:	4a28      	ldr	r2, [pc, #160]	@ (800232c <SystemInit+0x128>)
 800228a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800228c:	4b24      	ldr	r3, [pc, #144]	@ (8002320 <SystemInit+0x11c>)
 800228e:	4a28      	ldr	r2, [pc, #160]	@ (8002330 <SystemInit+0x12c>)
 8002290:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002292:	4b23      	ldr	r3, [pc, #140]	@ (8002320 <SystemInit+0x11c>)
 8002294:	2200      	movs	r2, #0
 8002296:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002298:	4b21      	ldr	r3, [pc, #132]	@ (8002320 <SystemInit+0x11c>)
 800229a:	4a25      	ldr	r2, [pc, #148]	@ (8002330 <SystemInit+0x12c>)
 800229c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800229e:	4b20      	ldr	r3, [pc, #128]	@ (8002320 <SystemInit+0x11c>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80022a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002320 <SystemInit+0x11c>)
 80022a6:	4a22      	ldr	r2, [pc, #136]	@ (8002330 <SystemInit+0x12c>)
 80022a8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80022aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002320 <SystemInit+0x11c>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002320 <SystemInit+0x11c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a1a      	ldr	r2, [pc, #104]	@ (8002320 <SystemInit+0x11c>)
 80022b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80022bc:	4b18      	ldr	r3, [pc, #96]	@ (8002320 <SystemInit+0x11c>)
 80022be:	2200      	movs	r2, #0
 80022c0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80022c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002334 <SystemInit+0x130>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002338 <SystemInit+0x134>)
 80022c8:	4013      	ands	r3, r2
 80022ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80022ce:	d202      	bcs.n	80022d6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80022d0:	4b1a      	ldr	r3, [pc, #104]	@ (800233c <SystemInit+0x138>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80022d6:	4b12      	ldr	r3, [pc, #72]	@ (8002320 <SystemInit+0x11c>)
 80022d8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80022dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d113      	bne.n	800230c <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80022e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002320 <SystemInit+0x11c>)
 80022e6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80022ea:	4a0d      	ldr	r2, [pc, #52]	@ (8002320 <SystemInit+0x11c>)
 80022ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80022f0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80022f4:	4b12      	ldr	r3, [pc, #72]	@ (8002340 <SystemInit+0x13c>)
 80022f6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80022fa:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80022fc:	4b08      	ldr	r3, [pc, #32]	@ (8002320 <SystemInit+0x11c>)
 80022fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002302:	4a07      	ldr	r2, [pc, #28]	@ (8002320 <SystemInit+0x11c>)
 8002304:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002308:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800230c:	bf00      	nop
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	e000ed00 	.word	0xe000ed00
 800231c:	52002000 	.word	0x52002000
 8002320:	58024400 	.word	0x58024400
 8002324:	eaf6ed7f 	.word	0xeaf6ed7f
 8002328:	02020200 	.word	0x02020200
 800232c:	01ff0000 	.word	0x01ff0000
 8002330:	01010280 	.word	0x01010280
 8002334:	5c001000 	.word	0x5c001000
 8002338:	ffff0000 	.word	0xffff0000
 800233c:	51008108 	.word	0x51008108
 8002340:	52004000 	.word	0x52004000

08002344 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002348:	4b09      	ldr	r3, [pc, #36]	@ (8002370 <ExitRun0Mode+0x2c>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	4a08      	ldr	r2, [pc, #32]	@ (8002370 <ExitRun0Mode+0x2c>)
 800234e:	f043 0302 	orr.w	r3, r3, #2
 8002352:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002354:	bf00      	nop
 8002356:	4b06      	ldr	r3, [pc, #24]	@ (8002370 <ExitRun0Mode+0x2c>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d0f9      	beq.n	8002356 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002362:	bf00      	nop
 8002364:	bf00      	nop
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	58024800 	.word	0x58024800

08002374 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002374:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80023b0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002378:	f7ff ffe4 	bl	8002344 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800237c:	f7ff ff42 	bl	8002204 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002380:	480c      	ldr	r0, [pc, #48]	@ (80023b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002382:	490d      	ldr	r1, [pc, #52]	@ (80023b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002384:	4a0d      	ldr	r2, [pc, #52]	@ (80023bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002388:	e002      	b.n	8002390 <LoopCopyDataInit>

0800238a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800238a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800238c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800238e:	3304      	adds	r3, #4

08002390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002394:	d3f9      	bcc.n	800238a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002396:	4a0a      	ldr	r2, [pc, #40]	@ (80023c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002398:	4c0a      	ldr	r4, [pc, #40]	@ (80023c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800239a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800239c:	e001      	b.n	80023a2 <LoopFillZerobss>

0800239e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800239e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023a0:	3204      	adds	r2, #4

080023a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023a4:	d3fb      	bcc.n	800239e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023a6:	f006 fa47 	bl	8008838 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023aa:	f7ff f9e1 	bl	8001770 <main>
  bx  lr
 80023ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023b0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80023b4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80023b8:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 80023bc:	0800ba20 	.word	0x0800ba20
  ldr r2, =_sbss
 80023c0:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 80023c4:	24000334 	.word	0x24000334

080023c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023c8:	e7fe      	b.n	80023c8 <ADC3_IRQHandler>
	...

080023cc <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08c      	sub	sp, #48	@ 0x30
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80023d6:	2300      	movs	r3, #0
 80023d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d009      	beq.n	80023f4 <BSP_LED_Init+0x28>
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d006      	beq.n	80023f4 <BSP_LED_Init+0x28>
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d003      	beq.n	80023f4 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80023ec:	f06f 0301 	mvn.w	r3, #1
 80023f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023f2:	e055      	b.n	80024a0 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80023f4:	79fb      	ldrb	r3, [r7, #7]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10f      	bne.n	800241a <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80023fa:	4b2c      	ldr	r3, [pc, #176]	@ (80024ac <BSP_LED_Init+0xe0>)
 80023fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002400:	4a2a      	ldr	r2, [pc, #168]	@ (80024ac <BSP_LED_Init+0xe0>)
 8002402:	f043 0302 	orr.w	r3, r3, #2
 8002406:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800240a:	4b28      	ldr	r3, [pc, #160]	@ (80024ac <BSP_LED_Init+0xe0>)
 800240c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	e021      	b.n	800245e <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d10f      	bne.n	8002440 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8002420:	4b22      	ldr	r3, [pc, #136]	@ (80024ac <BSP_LED_Init+0xe0>)
 8002422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002426:	4a21      	ldr	r2, [pc, #132]	@ (80024ac <BSP_LED_Init+0xe0>)
 8002428:	f043 0310 	orr.w	r3, r3, #16
 800242c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002430:	4b1e      	ldr	r3, [pc, #120]	@ (80024ac <BSP_LED_Init+0xe0>)
 8002432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002436:	f003 0310 	and.w	r3, r3, #16
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	e00e      	b.n	800245e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8002440:	4b1a      	ldr	r3, [pc, #104]	@ (80024ac <BSP_LED_Init+0xe0>)
 8002442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002446:	4a19      	ldr	r2, [pc, #100]	@ (80024ac <BSP_LED_Init+0xe0>)
 8002448:	f043 0302 	orr.w	r3, r3, #2
 800244c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002450:	4b16      	ldr	r3, [pc, #88]	@ (80024ac <BSP_LED_Init+0xe0>)
 8002452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	4a13      	ldr	r2, [pc, #76]	@ (80024b0 <BSP_LED_Init+0xe4>)
 8002462:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002466:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002468:	2301      	movs	r3, #1
 800246a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800246c:	2300      	movs	r3, #0
 800246e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002470:	2303      	movs	r3, #3
 8002472:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002474:	79fb      	ldrb	r3, [r7, #7]
 8002476:	4a0f      	ldr	r2, [pc, #60]	@ (80024b4 <BSP_LED_Init+0xe8>)
 8002478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247c:	f107 0218 	add.w	r2, r7, #24
 8002480:	4611      	mov	r1, r2
 8002482:	4618      	mov	r0, r3
 8002484:	f000 ff1e 	bl	80032c4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	4a0a      	ldr	r2, [pc, #40]	@ (80024b4 <BSP_LED_Init+0xe8>)
 800248c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	4a07      	ldr	r2, [pc, #28]	@ (80024b0 <BSP_LED_Init+0xe4>)
 8002494:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002498:	2200      	movs	r2, #0
 800249a:	4619      	mov	r1, r3
 800249c:	f001 f9e4 	bl	8003868 <HAL_GPIO_WritePin>
  }

  return ret;
 80024a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3730      	adds	r7, #48	@ 0x30
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	58024400 	.word	0x58024400
 80024b0:	0800b9b8 	.word	0x0800b9b8
 80024b4:	2400000c 	.word	0x2400000c

080024b8 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80024c6:	79fb      	ldrb	r3, [r7, #7]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d009      	beq.n	80024e0 <BSP_LED_On+0x28>
 80024cc:	79fb      	ldrb	r3, [r7, #7]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d006      	beq.n	80024e0 <BSP_LED_On+0x28>
 80024d2:	79fb      	ldrb	r3, [r7, #7]
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d003      	beq.n	80024e0 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80024d8:	f06f 0301 	mvn.w	r3, #1
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	e00b      	b.n	80024f8 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80024e0:	79fb      	ldrb	r3, [r7, #7]
 80024e2:	4a08      	ldr	r2, [pc, #32]	@ (8002504 <BSP_LED_On+0x4c>)
 80024e4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80024e8:	79fb      	ldrb	r3, [r7, #7]
 80024ea:	4a07      	ldr	r2, [pc, #28]	@ (8002508 <BSP_LED_On+0x50>)
 80024ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024f0:	2201      	movs	r2, #1
 80024f2:	4619      	mov	r1, r3
 80024f4:	f001 f9b8 	bl	8003868 <HAL_GPIO_WritePin>
  }

  return ret;
 80024f8:	68fb      	ldr	r3, [r7, #12]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	2400000c 	.word	0x2400000c
 8002508:	0800b9b8 	.word	0x0800b9b8

0800250c <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002516:	2300      	movs	r3, #0
 8002518:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800251a:	79fb      	ldrb	r3, [r7, #7]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d009      	beq.n	8002534 <BSP_LED_Off+0x28>
 8002520:	79fb      	ldrb	r3, [r7, #7]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d006      	beq.n	8002534 <BSP_LED_Off+0x28>
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	2b02      	cmp	r3, #2
 800252a:	d003      	beq.n	8002534 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800252c:	f06f 0301 	mvn.w	r3, #1
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	e00b      	b.n	800254c <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002534:	79fb      	ldrb	r3, [r7, #7]
 8002536:	4a08      	ldr	r2, [pc, #32]	@ (8002558 <BSP_LED_Off+0x4c>)
 8002538:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800253c:	79fb      	ldrb	r3, [r7, #7]
 800253e:	4a07      	ldr	r2, [pc, #28]	@ (800255c <BSP_LED_Off+0x50>)
 8002540:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002544:	2200      	movs	r2, #0
 8002546:	4619      	mov	r1, r3
 8002548:	f001 f98e 	bl	8003868 <HAL_GPIO_WritePin>
  }

  return ret;
 800254c:	68fb      	ldr	r3, [r7, #12]
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	2400000c 	.word	0x2400000c
 800255c:	0800b9b8 	.word	0x0800b9b8

08002560 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800256e:	79fb      	ldrb	r3, [r7, #7]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d009      	beq.n	8002588 <BSP_LED_Toggle+0x28>
 8002574:	79fb      	ldrb	r3, [r7, #7]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d006      	beq.n	8002588 <BSP_LED_Toggle+0x28>
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	2b02      	cmp	r3, #2
 800257e:	d003      	beq.n	8002588 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002580:	f06f 0301 	mvn.w	r3, #1
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	e00b      	b.n	80025a0 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002588:	79fb      	ldrb	r3, [r7, #7]
 800258a:	4a08      	ldr	r2, [pc, #32]	@ (80025ac <BSP_LED_Toggle+0x4c>)
 800258c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	4907      	ldr	r1, [pc, #28]	@ (80025b0 <BSP_LED_Toggle+0x50>)
 8002594:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002598:	4619      	mov	r1, r3
 800259a:	4610      	mov	r0, r2
 800259c:	f001 f97d 	bl	800389a <HAL_GPIO_TogglePin>
  }

  return ret;
 80025a0:	68fb      	ldr	r3, [r7, #12]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	2400000c 	.word	0x2400000c
 80025b0:	0800b9b8 	.word	0x0800b9b8

080025b4 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b088      	sub	sp, #32
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	460a      	mov	r2, r1
 80025be:	71fb      	strb	r3, [r7, #7]
 80025c0:	4613      	mov	r3, r2
 80025c2:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80025c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002680 <BSP_PB_Init+0xcc>)
 80025c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025ca:	4a2d      	ldr	r2, [pc, #180]	@ (8002680 <BSP_PB_Init+0xcc>)
 80025cc:	f043 0304 	orr.w	r3, r3, #4
 80025d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002680 <BSP_PB_Init+0xcc>)
 80025d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025da:	f003 0304 	and.w	r3, r3, #4
 80025de:	60bb      	str	r3, [r7, #8]
 80025e0:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80025e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025e6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80025e8:	2302      	movs	r3, #2
 80025ea:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80025ec:	2302      	movs	r3, #2
 80025ee:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80025f0:	79bb      	ldrb	r3, [r7, #6]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10c      	bne.n	8002610 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80025f6:	2300      	movs	r3, #0
 80025f8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80025fa:	79fb      	ldrb	r3, [r7, #7]
 80025fc:	4a21      	ldr	r2, [pc, #132]	@ (8002684 <BSP_PB_Init+0xd0>)
 80025fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002602:	f107 020c 	add.w	r2, r7, #12
 8002606:	4611      	mov	r1, r2
 8002608:	4618      	mov	r0, r3
 800260a:	f000 fe5b 	bl	80032c4 <HAL_GPIO_Init>
 800260e:	e031      	b.n	8002674 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002610:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002614:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	4a1a      	ldr	r2, [pc, #104]	@ (8002684 <BSP_PB_Init+0xd0>)
 800261a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800261e:	f107 020c 	add.w	r2, r7, #12
 8002622:	4611      	mov	r1, r2
 8002624:	4618      	mov	r0, r3
 8002626:	f000 fe4d 	bl	80032c4 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	4a16      	ldr	r2, [pc, #88]	@ (8002688 <BSP_PB_Init+0xd4>)
 8002630:	441a      	add	r2, r3
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	4915      	ldr	r1, [pc, #84]	@ (800268c <BSP_PB_Init+0xd8>)
 8002636:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800263a:	4619      	mov	r1, r3
 800263c:	4610      	mov	r0, r2
 800263e:	f000 fdfc 	bl	800323a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8002642:	79fb      	ldrb	r3, [r7, #7]
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4a10      	ldr	r2, [pc, #64]	@ (8002688 <BSP_PB_Init+0xd4>)
 8002648:	1898      	adds	r0, r3, r2
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	4a10      	ldr	r2, [pc, #64]	@ (8002690 <BSP_PB_Init+0xdc>)
 800264e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002652:	461a      	mov	r2, r3
 8002654:	2100      	movs	r1, #0
 8002656:	f000 fdd1 	bl	80031fc <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800265a:	2028      	movs	r0, #40	@ 0x28
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	4a0d      	ldr	r2, [pc, #52]	@ (8002694 <BSP_PB_Init+0xe0>)
 8002660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002664:	2200      	movs	r2, #0
 8002666:	4619      	mov	r1, r3
 8002668:	f000 fac7 	bl	8002bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800266c:	2328      	movs	r3, #40	@ 0x28
 800266e:	4618      	mov	r0, r3
 8002670:	f000 fadd 	bl	8002c2e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3720      	adds	r7, #32
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	58024400 	.word	0x58024400
 8002684:	24000018 	.word	0x24000018
 8002688:	24000144 	.word	0x24000144
 800268c:	0800b9c0 	.word	0x0800b9c0
 8002690:	2400001c 	.word	0x2400001c
 8002694:	24000020 	.word	0x24000020

08002698 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80026a2:	79fb      	ldrb	r3, [r7, #7]
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	4a04      	ldr	r2, [pc, #16]	@ (80026b8 <BSP_PB_IRQHandler+0x20>)
 80026a8:	4413      	add	r3, r2
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 fdda 	bl	8003264 <HAL_EXTI_IRQHandler>
}
 80026b0:	bf00      	nop
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	24000144 	.word	0x24000144

080026bc <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	6039      	str	r1, [r7, #0]
 80026c6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80026d2:	f06f 0301 	mvn.w	r3, #1
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	e018      	b.n	800270c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	2294      	movs	r2, #148	@ 0x94
 80026de:	fb02 f303 	mul.w	r3, r2, r3
 80026e2:	4a0d      	ldr	r2, [pc, #52]	@ (8002718 <BSP_COM_Init+0x5c>)
 80026e4:	4413      	add	r3, r2
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 f86e 	bl	80027c8 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80026ec:	79fb      	ldrb	r3, [r7, #7]
 80026ee:	2294      	movs	r2, #148	@ 0x94
 80026f0:	fb02 f303 	mul.w	r3, r2, r3
 80026f4:	4a08      	ldr	r2, [pc, #32]	@ (8002718 <BSP_COM_Init+0x5c>)
 80026f6:	4413      	add	r3, r2
 80026f8:	6839      	ldr	r1, [r7, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 f80e 	bl	800271c <MX_USART3_Init>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002706:	f06f 0303 	mvn.w	r3, #3
 800270a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800270c:	68fb      	ldr	r3, [r7, #12]
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	2400014c 	.word	0x2400014c

0800271c <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8002726:	4b15      	ldr	r3, [pc, #84]	@ (800277c <MX_USART3_Init+0x60>)
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	220c      	movs	r2, #12
 800273a:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	895b      	ldrh	r3, [r3, #10]
 8002740:	461a      	mov	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	891b      	ldrh	r3, [r3, #8]
 8002752:	461a      	mov	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	899b      	ldrh	r3, [r3, #12]
 800275c:	461a      	mov	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002768:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f004 fe87 	bl	800747e <HAL_UART_Init>
 8002770:	4603      	mov	r3, r0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	24000008 	.word	0x24000008

08002780 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8002788:	4b09      	ldr	r3, [pc, #36]	@ (80027b0 <__io_putchar+0x30>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	461a      	mov	r2, r3
 800278e:	2394      	movs	r3, #148	@ 0x94
 8002790:	fb02 f303 	mul.w	r3, r2, r3
 8002794:	4a07      	ldr	r2, [pc, #28]	@ (80027b4 <__io_putchar+0x34>)
 8002796:	1898      	adds	r0, r3, r2
 8002798:	1d39      	adds	r1, r7, #4
 800279a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800279e:	2201      	movs	r2, #1
 80027a0:	f004 fec7 	bl	8007532 <HAL_UART_Transmit>
  return ch;
 80027a4:	687b      	ldr	r3, [r7, #4]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	240001e0 	.word	0x240001e0
 80027b4:	2400014c 	.word	0x2400014c

080027b8 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80027bc:	2000      	movs	r0, #0
 80027be:	f7ff fb5f 	bl	8001e80 <BSP_PB_Callback>
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08a      	sub	sp, #40	@ 0x28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80027d0:	4b27      	ldr	r3, [pc, #156]	@ (8002870 <COM1_MspInit+0xa8>)
 80027d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027d6:	4a26      	ldr	r2, [pc, #152]	@ (8002870 <COM1_MspInit+0xa8>)
 80027d8:	f043 0308 	orr.w	r3, r3, #8
 80027dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027e0:	4b23      	ldr	r3, [pc, #140]	@ (8002870 <COM1_MspInit+0xa8>)
 80027e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	613b      	str	r3, [r7, #16]
 80027ec:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80027ee:	4b20      	ldr	r3, [pc, #128]	@ (8002870 <COM1_MspInit+0xa8>)
 80027f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027f4:	4a1e      	ldr	r2, [pc, #120]	@ (8002870 <COM1_MspInit+0xa8>)
 80027f6:	f043 0308 	orr.w	r3, r3, #8
 80027fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002870 <COM1_MspInit+0xa8>)
 8002800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002804:	f003 0308 	and.w	r3, r3, #8
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 800280c:	4b18      	ldr	r3, [pc, #96]	@ (8002870 <COM1_MspInit+0xa8>)
 800280e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002812:	4a17      	ldr	r2, [pc, #92]	@ (8002870 <COM1_MspInit+0xa8>)
 8002814:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002818:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800281c:	4b14      	ldr	r3, [pc, #80]	@ (8002870 <COM1_MspInit+0xa8>)
 800281e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002822:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002826:	60bb      	str	r3, [r7, #8]
 8002828:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 800282a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800282e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002830:	2302      	movs	r3, #2
 8002832:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002834:	2302      	movs	r3, #2
 8002836:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002838:	2301      	movs	r3, #1
 800283a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 800283c:	2307      	movs	r3, #7
 800283e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002840:	f107 0314 	add.w	r3, r7, #20
 8002844:	4619      	mov	r1, r3
 8002846:	480b      	ldr	r0, [pc, #44]	@ (8002874 <COM1_MspInit+0xac>)
 8002848:	f000 fd3c 	bl	80032c4 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 800284c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002850:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002852:	2302      	movs	r3, #2
 8002854:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8002856:	2307      	movs	r3, #7
 8002858:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800285a:	f107 0314 	add.w	r3, r7, #20
 800285e:	4619      	mov	r1, r3
 8002860:	4804      	ldr	r0, [pc, #16]	@ (8002874 <COM1_MspInit+0xac>)
 8002862:	f000 fd2f 	bl	80032c4 <HAL_GPIO_Init>
}
 8002866:	bf00      	nop
 8002868:	3728      	adds	r7, #40	@ 0x28
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	58024400 	.word	0x58024400
 8002874:	58020c00 	.word	0x58020c00

08002878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800287e:	2003      	movs	r0, #3
 8002880:	f000 f9b0 	bl	8002be4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002884:	f001 fe6e 	bl	8004564 <HAL_RCC_GetSysClockFreq>
 8002888:	4602      	mov	r2, r0
 800288a:	4b15      	ldr	r3, [pc, #84]	@ (80028e0 <HAL_Init+0x68>)
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	0a1b      	lsrs	r3, r3, #8
 8002890:	f003 030f 	and.w	r3, r3, #15
 8002894:	4913      	ldr	r1, [pc, #76]	@ (80028e4 <HAL_Init+0x6c>)
 8002896:	5ccb      	ldrb	r3, [r1, r3]
 8002898:	f003 031f 	and.w	r3, r3, #31
 800289c:	fa22 f303 	lsr.w	r3, r2, r3
 80028a0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028a2:	4b0f      	ldr	r3, [pc, #60]	@ (80028e0 <HAL_Init+0x68>)
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	4a0e      	ldr	r2, [pc, #56]	@ (80028e4 <HAL_Init+0x6c>)
 80028ac:	5cd3      	ldrb	r3, [r2, r3]
 80028ae:	f003 031f 	and.w	r3, r3, #31
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	fa22 f303 	lsr.w	r3, r2, r3
 80028b8:	4a0b      	ldr	r2, [pc, #44]	@ (80028e8 <HAL_Init+0x70>)
 80028ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028bc:	4a0b      	ldr	r2, [pc, #44]	@ (80028ec <HAL_Init+0x74>)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028c2:	2000      	movs	r0, #0
 80028c4:	f000 f814 	bl	80028f0 <HAL_InitTick>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e002      	b.n	80028d8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80028d2:	f7ff faef 	bl	8001eb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	58024400 	.word	0x58024400
 80028e4:	0800b9a8 	.word	0x0800b9a8
 80028e8:	24000004 	.word	0x24000004
 80028ec:	24000000 	.word	0x24000000

080028f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80028f8:	4b15      	ldr	r3, [pc, #84]	@ (8002950 <HAL_InitTick+0x60>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e021      	b.n	8002948 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002904:	4b13      	ldr	r3, [pc, #76]	@ (8002954 <HAL_InitTick+0x64>)
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	4b11      	ldr	r3, [pc, #68]	@ (8002950 <HAL_InitTick+0x60>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	4619      	mov	r1, r3
 800290e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002912:	fbb3 f3f1 	udiv	r3, r3, r1
 8002916:	fbb2 f3f3 	udiv	r3, r2, r3
 800291a:	4618      	mov	r0, r3
 800291c:	f000 f9a3 	bl	8002c66 <HAL_SYSTICK_Config>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e00e      	b.n	8002948 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b0f      	cmp	r3, #15
 800292e:	d80a      	bhi.n	8002946 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002930:	2200      	movs	r2, #0
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	f04f 30ff 	mov.w	r0, #4294967295
 8002938:	f000 f95f 	bl	8002bfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800293c:	4a06      	ldr	r2, [pc, #24]	@ (8002958 <HAL_InitTick+0x68>)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	e000      	b.n	8002948 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
}
 8002948:	4618      	mov	r0, r3
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	24000028 	.word	0x24000028
 8002954:	24000000 	.word	0x24000000
 8002958:	24000024 	.word	0x24000024

0800295c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002960:	4b06      	ldr	r3, [pc, #24]	@ (800297c <HAL_IncTick+0x20>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	461a      	mov	r2, r3
 8002966:	4b06      	ldr	r3, [pc, #24]	@ (8002980 <HAL_IncTick+0x24>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4413      	add	r3, r2
 800296c:	4a04      	ldr	r2, [pc, #16]	@ (8002980 <HAL_IncTick+0x24>)
 800296e:	6013      	str	r3, [r2, #0]
}
 8002970:	bf00      	nop
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	24000028 	.word	0x24000028
 8002980:	240001e4 	.word	0x240001e4

08002984 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  return uwTick;
 8002988:	4b03      	ldr	r3, [pc, #12]	@ (8002998 <HAL_GetTick+0x14>)
 800298a:	681b      	ldr	r3, [r3, #0]
}
 800298c:	4618      	mov	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	240001e4 	.word	0x240001e4

0800299c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029a4:	f7ff ffee 	bl	8002984 <HAL_GetTick>
 80029a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b4:	d005      	beq.n	80029c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029b6:	4b0a      	ldr	r3, [pc, #40]	@ (80029e0 <HAL_Delay+0x44>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	461a      	mov	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4413      	add	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029c2:	bf00      	nop
 80029c4:	f7ff ffde 	bl	8002984 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d8f7      	bhi.n	80029c4 <HAL_Delay+0x28>
  {
  }
}
 80029d4:	bf00      	nop
 80029d6:	bf00      	nop
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	24000028 	.word	0x24000028

080029e4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80029e8:	4b03      	ldr	r3, [pc, #12]	@ (80029f8 <HAL_GetREVID+0x14>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	0c1b      	lsrs	r3, r3, #16
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	5c001000 	.word	0x5c001000

080029fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a3c <__NVIC_SetPriorityGrouping+0x40>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a18:	4013      	ands	r3, r2
 8002a1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a24:	4b06      	ldr	r3, [pc, #24]	@ (8002a40 <__NVIC_SetPriorityGrouping+0x44>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a2a:	4a04      	ldr	r2, [pc, #16]	@ (8002a3c <__NVIC_SetPriorityGrouping+0x40>)
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	60d3      	str	r3, [r2, #12]
}
 8002a30:	bf00      	nop
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	e000ed00 	.word	0xe000ed00
 8002a40:	05fa0000 	.word	0x05fa0000

08002a44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a48:	4b04      	ldr	r3, [pc, #16]	@ (8002a5c <__NVIC_GetPriorityGrouping+0x18>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	0a1b      	lsrs	r3, r3, #8
 8002a4e:	f003 0307 	and.w	r3, r3, #7
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	e000ed00 	.word	0xe000ed00

08002a60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	db0b      	blt.n	8002a8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a72:	88fb      	ldrh	r3, [r7, #6]
 8002a74:	f003 021f 	and.w	r2, r3, #31
 8002a78:	4907      	ldr	r1, [pc, #28]	@ (8002a98 <__NVIC_EnableIRQ+0x38>)
 8002a7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a7e:	095b      	lsrs	r3, r3, #5
 8002a80:	2001      	movs	r0, #1
 8002a82:	fa00 f202 	lsl.w	r2, r0, r2
 8002a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	e000e100 	.word	0xe000e100

08002a9c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002aa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	db12      	blt.n	8002ad4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aae:	88fb      	ldrh	r3, [r7, #6]
 8002ab0:	f003 021f 	and.w	r2, r3, #31
 8002ab4:	490a      	ldr	r1, [pc, #40]	@ (8002ae0 <__NVIC_DisableIRQ+0x44>)
 8002ab6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aba:	095b      	lsrs	r3, r3, #5
 8002abc:	2001      	movs	r0, #1
 8002abe:	fa00 f202 	lsl.w	r2, r0, r2
 8002ac2:	3320      	adds	r3, #32
 8002ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002ac8:	f3bf 8f4f 	dsb	sy
}
 8002acc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002ace:	f3bf 8f6f 	isb	sy
}
 8002ad2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	e000e100 	.word	0xe000e100

08002ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	6039      	str	r1, [r7, #0]
 8002aee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002af0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	db0a      	blt.n	8002b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	490c      	ldr	r1, [pc, #48]	@ (8002b30 <__NVIC_SetPriority+0x4c>)
 8002afe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b02:	0112      	lsls	r2, r2, #4
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	440b      	add	r3, r1
 8002b08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b0c:	e00a      	b.n	8002b24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	4908      	ldr	r1, [pc, #32]	@ (8002b34 <__NVIC_SetPriority+0x50>)
 8002b14:	88fb      	ldrh	r3, [r7, #6]
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	3b04      	subs	r3, #4
 8002b1c:	0112      	lsls	r2, r2, #4
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	440b      	add	r3, r1
 8002b22:	761a      	strb	r2, [r3, #24]
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	e000e100 	.word	0xe000e100
 8002b34:	e000ed00 	.word	0xe000ed00

08002b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b089      	sub	sp, #36	@ 0x24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	f1c3 0307 	rsb	r3, r3, #7
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	bf28      	it	cs
 8002b56:	2304      	movcs	r3, #4
 8002b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	2b06      	cmp	r3, #6
 8002b60:	d902      	bls.n	8002b68 <NVIC_EncodePriority+0x30>
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	3b03      	subs	r3, #3
 8002b66:	e000      	b.n	8002b6a <NVIC_EncodePriority+0x32>
 8002b68:	2300      	movs	r3, #0
 8002b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	43da      	mvns	r2, r3
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	401a      	ands	r2, r3
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b80:	f04f 31ff 	mov.w	r1, #4294967295
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8a:	43d9      	mvns	r1, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b90:	4313      	orrs	r3, r2
         );
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3724      	adds	r7, #36	@ 0x24
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
	...

08002ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bb0:	d301      	bcc.n	8002bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e00f      	b.n	8002bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8002be0 <SysTick_Config+0x40>)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bbe:	210f      	movs	r1, #15
 8002bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc4:	f7ff ff8e 	bl	8002ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bc8:	4b05      	ldr	r3, [pc, #20]	@ (8002be0 <SysTick_Config+0x40>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bce:	4b04      	ldr	r3, [pc, #16]	@ (8002be0 <SysTick_Config+0x40>)
 8002bd0:	2207      	movs	r2, #7
 8002bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	e000e010 	.word	0xe000e010

08002be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7ff ff05 	bl	80029fc <__NVIC_SetPriorityGrouping>
}
 8002bf2:	bf00      	nop
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b086      	sub	sp, #24
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	4603      	mov	r3, r0
 8002c02:	60b9      	str	r1, [r7, #8]
 8002c04:	607a      	str	r2, [r7, #4]
 8002c06:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c08:	f7ff ff1c 	bl	8002a44 <__NVIC_GetPriorityGrouping>
 8002c0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	68b9      	ldr	r1, [r7, #8]
 8002c12:	6978      	ldr	r0, [r7, #20]
 8002c14:	f7ff ff90 	bl	8002b38 <NVIC_EncodePriority>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c1e:	4611      	mov	r1, r2
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff ff5f 	bl	8002ae4 <__NVIC_SetPriority>
}
 8002c26:	bf00      	nop
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b082      	sub	sp, #8
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	4603      	mov	r3, r0
 8002c36:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff ff0f 	bl	8002a60 <__NVIC_EnableIRQ>
}
 8002c42:	bf00      	nop
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b082      	sub	sp, #8
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	4603      	mov	r3, r0
 8002c52:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002c54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff ff1f 	bl	8002a9c <__NVIC_DisableIRQ>
}
 8002c5e:	bf00      	nop
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b082      	sub	sp, #8
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7ff ff96 	bl	8002ba0 <SysTick_Config>
 8002c74:	4603      	mov	r3, r0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
	...

08002c80 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002c84:	f3bf 8f5f 	dmb	sy
}
 8002c88:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002c8a:	4b07      	ldr	r3, [pc, #28]	@ (8002ca8 <HAL_MPU_Disable+0x28>)
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8e:	4a06      	ldr	r2, [pc, #24]	@ (8002ca8 <HAL_MPU_Disable+0x28>)
 8002c90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c94:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002c96:	4b05      	ldr	r3, [pc, #20]	@ (8002cac <HAL_MPU_Disable+0x2c>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	605a      	str	r2, [r3, #4]
}
 8002c9c:	bf00      	nop
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	e000ed00 	.word	0xe000ed00
 8002cac:	e000ed90 	.word	0xe000ed90

08002cb0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002cb8:	4a0b      	ldr	r2, [pc, #44]	@ (8002ce8 <HAL_MPU_Enable+0x38>)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8002cec <HAL_MPU_Enable+0x3c>)
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc6:	4a09      	ldr	r2, [pc, #36]	@ (8002cec <HAL_MPU_Enable+0x3c>)
 8002cc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ccc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002cce:	f3bf 8f4f 	dsb	sy
}
 8002cd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002cd4:	f3bf 8f6f 	isb	sy
}
 8002cd8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	e000ed90 	.word	0xe000ed90
 8002cec:	e000ed00 	.word	0xe000ed00

08002cf0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	785a      	ldrb	r2, [r3, #1]
 8002cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8002d6c <HAL_MPU_ConfigRegion+0x7c>)
 8002cfe:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002d00:	4b1a      	ldr	r3, [pc, #104]	@ (8002d6c <HAL_MPU_ConfigRegion+0x7c>)
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	4a19      	ldr	r2, [pc, #100]	@ (8002d6c <HAL_MPU_ConfigRegion+0x7c>)
 8002d06:	f023 0301 	bic.w	r3, r3, #1
 8002d0a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002d0c:	4a17      	ldr	r2, [pc, #92]	@ (8002d6c <HAL_MPU_ConfigRegion+0x7c>)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	7b1b      	ldrb	r3, [r3, #12]
 8002d18:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	7adb      	ldrb	r3, [r3, #11]
 8002d1e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d20:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	7a9b      	ldrb	r3, [r3, #10]
 8002d26:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002d28:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	7b5b      	ldrb	r3, [r3, #13]
 8002d2e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002d30:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	7b9b      	ldrb	r3, [r3, #14]
 8002d36:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002d38:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	7bdb      	ldrb	r3, [r3, #15]
 8002d3e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002d40:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	7a5b      	ldrb	r3, [r3, #9]
 8002d46:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002d48:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	7a1b      	ldrb	r3, [r3, #8]
 8002d4e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002d50:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	7812      	ldrb	r2, [r2, #0]
 8002d56:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d58:	4a04      	ldr	r2, [pc, #16]	@ (8002d6c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002d5a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d5c:	6113      	str	r3, [r2, #16]
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	e000ed90 	.word	0xe000ed90

08002d70 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e237      	b.n	80031f2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d004      	beq.n	8002d98 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2280      	movs	r2, #128	@ 0x80
 8002d92:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e22c      	b.n	80031f2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a5c      	ldr	r2, [pc, #368]	@ (8002f10 <HAL_DMA_Abort_IT+0x1a0>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d04a      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a5b      	ldr	r2, [pc, #364]	@ (8002f14 <HAL_DMA_Abort_IT+0x1a4>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d045      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a59      	ldr	r2, [pc, #356]	@ (8002f18 <HAL_DMA_Abort_IT+0x1a8>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d040      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a58      	ldr	r2, [pc, #352]	@ (8002f1c <HAL_DMA_Abort_IT+0x1ac>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d03b      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a56      	ldr	r2, [pc, #344]	@ (8002f20 <HAL_DMA_Abort_IT+0x1b0>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d036      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a55      	ldr	r2, [pc, #340]	@ (8002f24 <HAL_DMA_Abort_IT+0x1b4>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d031      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a53      	ldr	r2, [pc, #332]	@ (8002f28 <HAL_DMA_Abort_IT+0x1b8>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d02c      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a52      	ldr	r2, [pc, #328]	@ (8002f2c <HAL_DMA_Abort_IT+0x1bc>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d027      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a50      	ldr	r2, [pc, #320]	@ (8002f30 <HAL_DMA_Abort_IT+0x1c0>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d022      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a4f      	ldr	r2, [pc, #316]	@ (8002f34 <HAL_DMA_Abort_IT+0x1c4>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d01d      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a4d      	ldr	r2, [pc, #308]	@ (8002f38 <HAL_DMA_Abort_IT+0x1c8>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d018      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a4c      	ldr	r2, [pc, #304]	@ (8002f3c <HAL_DMA_Abort_IT+0x1cc>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d013      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a4a      	ldr	r2, [pc, #296]	@ (8002f40 <HAL_DMA_Abort_IT+0x1d0>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d00e      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a49      	ldr	r2, [pc, #292]	@ (8002f44 <HAL_DMA_Abort_IT+0x1d4>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d009      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a47      	ldr	r2, [pc, #284]	@ (8002f48 <HAL_DMA_Abort_IT+0x1d8>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d004      	beq.n	8002e38 <HAL_DMA_Abort_IT+0xc8>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a46      	ldr	r2, [pc, #280]	@ (8002f4c <HAL_DMA_Abort_IT+0x1dc>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d101      	bne.n	8002e3c <HAL_DMA_Abort_IT+0xcc>
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e000      	b.n	8002e3e <HAL_DMA_Abort_IT+0xce>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 8086 	beq.w	8002f50 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2204      	movs	r2, #4
 8002e48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a2f      	ldr	r2, [pc, #188]	@ (8002f10 <HAL_DMA_Abort_IT+0x1a0>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d04a      	beq.n	8002eec <HAL_DMA_Abort_IT+0x17c>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a2e      	ldr	r2, [pc, #184]	@ (8002f14 <HAL_DMA_Abort_IT+0x1a4>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d045      	beq.n	8002eec <HAL_DMA_Abort_IT+0x17c>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a2c      	ldr	r2, [pc, #176]	@ (8002f18 <HAL_DMA_Abort_IT+0x1a8>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d040      	beq.n	8002eec <HAL_DMA_Abort_IT+0x17c>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a2b      	ldr	r2, [pc, #172]	@ (8002f1c <HAL_DMA_Abort_IT+0x1ac>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d03b      	beq.n	8002eec <HAL_DMA_Abort_IT+0x17c>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a29      	ldr	r2, [pc, #164]	@ (8002f20 <HAL_DMA_Abort_IT+0x1b0>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d036      	beq.n	8002eec <HAL_DMA_Abort_IT+0x17c>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a28      	ldr	r2, [pc, #160]	@ (8002f24 <HAL_DMA_Abort_IT+0x1b4>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d031      	beq.n	8002eec <HAL_DMA_Abort_IT+0x17c>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a26      	ldr	r2, [pc, #152]	@ (8002f28 <HAL_DMA_Abort_IT+0x1b8>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d02c      	beq.n	8002eec <HAL_DMA_Abort_IT+0x17c>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a25      	ldr	r2, [pc, #148]	@ (8002f2c <HAL_DMA_Abort_IT+0x1bc>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d027      	beq.n	8002eec <HAL_DMA_Abort_IT+0x17c>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a23      	ldr	r2, [pc, #140]	@ (8002f30 <HAL_DMA_Abort_IT+0x1c0>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d022      	beq.n	8002eec <HAL_DMA_Abort_IT+0x17c>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a22      	ldr	r2, [pc, #136]	@ (8002f34 <HAL_DMA_Abort_IT+0x1c4>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d01d      	beq.n	8002eec <HAL_DMA_Abort_IT+0x17c>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a20      	ldr	r2, [pc, #128]	@ (8002f38 <HAL_DMA_Abort_IT+0x1c8>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d018      	beq.n	8002eec <HAL_DMA_Abort_IT+0x17c>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a1f      	ldr	r2, [pc, #124]	@ (8002f3c <HAL_DMA_Abort_IT+0x1cc>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d013      	beq.n	8002eec <HAL_DMA_Abort_IT+0x17c>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a1d      	ldr	r2, [pc, #116]	@ (8002f40 <HAL_DMA_Abort_IT+0x1d0>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d00e      	beq.n	8002eec <HAL_DMA_Abort_IT+0x17c>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a1c      	ldr	r2, [pc, #112]	@ (8002f44 <HAL_DMA_Abort_IT+0x1d4>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d009      	beq.n	8002eec <HAL_DMA_Abort_IT+0x17c>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a1a      	ldr	r2, [pc, #104]	@ (8002f48 <HAL_DMA_Abort_IT+0x1d8>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d004      	beq.n	8002eec <HAL_DMA_Abort_IT+0x17c>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a19      	ldr	r2, [pc, #100]	@ (8002f4c <HAL_DMA_Abort_IT+0x1dc>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d108      	bne.n	8002efe <HAL_DMA_Abort_IT+0x18e>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0201 	bic.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	e178      	b.n	80031f0 <HAL_DMA_Abort_IT+0x480>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0201 	bic.w	r2, r2, #1
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	e16f      	b.n	80031f0 <HAL_DMA_Abort_IT+0x480>
 8002f10:	40020010 	.word	0x40020010
 8002f14:	40020028 	.word	0x40020028
 8002f18:	40020040 	.word	0x40020040
 8002f1c:	40020058 	.word	0x40020058
 8002f20:	40020070 	.word	0x40020070
 8002f24:	40020088 	.word	0x40020088
 8002f28:	400200a0 	.word	0x400200a0
 8002f2c:	400200b8 	.word	0x400200b8
 8002f30:	40020410 	.word	0x40020410
 8002f34:	40020428 	.word	0x40020428
 8002f38:	40020440 	.word	0x40020440
 8002f3c:	40020458 	.word	0x40020458
 8002f40:	40020470 	.word	0x40020470
 8002f44:	40020488 	.word	0x40020488
 8002f48:	400204a0 	.word	0x400204a0
 8002f4c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 020e 	bic.w	r2, r2, #14
 8002f5e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a6c      	ldr	r2, [pc, #432]	@ (8003118 <HAL_DMA_Abort_IT+0x3a8>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d04a      	beq.n	8003000 <HAL_DMA_Abort_IT+0x290>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a6b      	ldr	r2, [pc, #428]	@ (800311c <HAL_DMA_Abort_IT+0x3ac>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d045      	beq.n	8003000 <HAL_DMA_Abort_IT+0x290>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a69      	ldr	r2, [pc, #420]	@ (8003120 <HAL_DMA_Abort_IT+0x3b0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d040      	beq.n	8003000 <HAL_DMA_Abort_IT+0x290>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a68      	ldr	r2, [pc, #416]	@ (8003124 <HAL_DMA_Abort_IT+0x3b4>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d03b      	beq.n	8003000 <HAL_DMA_Abort_IT+0x290>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a66      	ldr	r2, [pc, #408]	@ (8003128 <HAL_DMA_Abort_IT+0x3b8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d036      	beq.n	8003000 <HAL_DMA_Abort_IT+0x290>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a65      	ldr	r2, [pc, #404]	@ (800312c <HAL_DMA_Abort_IT+0x3bc>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d031      	beq.n	8003000 <HAL_DMA_Abort_IT+0x290>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a63      	ldr	r2, [pc, #396]	@ (8003130 <HAL_DMA_Abort_IT+0x3c0>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d02c      	beq.n	8003000 <HAL_DMA_Abort_IT+0x290>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a62      	ldr	r2, [pc, #392]	@ (8003134 <HAL_DMA_Abort_IT+0x3c4>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d027      	beq.n	8003000 <HAL_DMA_Abort_IT+0x290>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a60      	ldr	r2, [pc, #384]	@ (8003138 <HAL_DMA_Abort_IT+0x3c8>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d022      	beq.n	8003000 <HAL_DMA_Abort_IT+0x290>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a5f      	ldr	r2, [pc, #380]	@ (800313c <HAL_DMA_Abort_IT+0x3cc>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d01d      	beq.n	8003000 <HAL_DMA_Abort_IT+0x290>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a5d      	ldr	r2, [pc, #372]	@ (8003140 <HAL_DMA_Abort_IT+0x3d0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d018      	beq.n	8003000 <HAL_DMA_Abort_IT+0x290>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a5c      	ldr	r2, [pc, #368]	@ (8003144 <HAL_DMA_Abort_IT+0x3d4>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d013      	beq.n	8003000 <HAL_DMA_Abort_IT+0x290>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a5a      	ldr	r2, [pc, #360]	@ (8003148 <HAL_DMA_Abort_IT+0x3d8>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d00e      	beq.n	8003000 <HAL_DMA_Abort_IT+0x290>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a59      	ldr	r2, [pc, #356]	@ (800314c <HAL_DMA_Abort_IT+0x3dc>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d009      	beq.n	8003000 <HAL_DMA_Abort_IT+0x290>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a57      	ldr	r2, [pc, #348]	@ (8003150 <HAL_DMA_Abort_IT+0x3e0>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d004      	beq.n	8003000 <HAL_DMA_Abort_IT+0x290>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a56      	ldr	r2, [pc, #344]	@ (8003154 <HAL_DMA_Abort_IT+0x3e4>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d108      	bne.n	8003012 <HAL_DMA_Abort_IT+0x2a2>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0201 	bic.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	e007      	b.n	8003022 <HAL_DMA_Abort_IT+0x2b2>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0201 	bic.w	r2, r2, #1
 8003020:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a3c      	ldr	r2, [pc, #240]	@ (8003118 <HAL_DMA_Abort_IT+0x3a8>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d072      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a3a      	ldr	r2, [pc, #232]	@ (800311c <HAL_DMA_Abort_IT+0x3ac>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d06d      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a39      	ldr	r2, [pc, #228]	@ (8003120 <HAL_DMA_Abort_IT+0x3b0>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d068      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a37      	ldr	r2, [pc, #220]	@ (8003124 <HAL_DMA_Abort_IT+0x3b4>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d063      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a36      	ldr	r2, [pc, #216]	@ (8003128 <HAL_DMA_Abort_IT+0x3b8>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d05e      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a34      	ldr	r2, [pc, #208]	@ (800312c <HAL_DMA_Abort_IT+0x3bc>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d059      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a33      	ldr	r2, [pc, #204]	@ (8003130 <HAL_DMA_Abort_IT+0x3c0>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d054      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a31      	ldr	r2, [pc, #196]	@ (8003134 <HAL_DMA_Abort_IT+0x3c4>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d04f      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a30      	ldr	r2, [pc, #192]	@ (8003138 <HAL_DMA_Abort_IT+0x3c8>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d04a      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a2e      	ldr	r2, [pc, #184]	@ (800313c <HAL_DMA_Abort_IT+0x3cc>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d045      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a2d      	ldr	r2, [pc, #180]	@ (8003140 <HAL_DMA_Abort_IT+0x3d0>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d040      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a2b      	ldr	r2, [pc, #172]	@ (8003144 <HAL_DMA_Abort_IT+0x3d4>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d03b      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a2a      	ldr	r2, [pc, #168]	@ (8003148 <HAL_DMA_Abort_IT+0x3d8>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d036      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a28      	ldr	r2, [pc, #160]	@ (800314c <HAL_DMA_Abort_IT+0x3dc>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d031      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a27      	ldr	r2, [pc, #156]	@ (8003150 <HAL_DMA_Abort_IT+0x3e0>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d02c      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a25      	ldr	r2, [pc, #148]	@ (8003154 <HAL_DMA_Abort_IT+0x3e4>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d027      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a24      	ldr	r2, [pc, #144]	@ (8003158 <HAL_DMA_Abort_IT+0x3e8>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d022      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a22      	ldr	r2, [pc, #136]	@ (800315c <HAL_DMA_Abort_IT+0x3ec>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d01d      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a21      	ldr	r2, [pc, #132]	@ (8003160 <HAL_DMA_Abort_IT+0x3f0>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d018      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a1f      	ldr	r2, [pc, #124]	@ (8003164 <HAL_DMA_Abort_IT+0x3f4>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d013      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a1e      	ldr	r2, [pc, #120]	@ (8003168 <HAL_DMA_Abort_IT+0x3f8>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d00e      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a1c      	ldr	r2, [pc, #112]	@ (800316c <HAL_DMA_Abort_IT+0x3fc>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d009      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a1b      	ldr	r2, [pc, #108]	@ (8003170 <HAL_DMA_Abort_IT+0x400>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d004      	beq.n	8003112 <HAL_DMA_Abort_IT+0x3a2>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a19      	ldr	r2, [pc, #100]	@ (8003174 <HAL_DMA_Abort_IT+0x404>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d132      	bne.n	8003178 <HAL_DMA_Abort_IT+0x408>
 8003112:	2301      	movs	r3, #1
 8003114:	e031      	b.n	800317a <HAL_DMA_Abort_IT+0x40a>
 8003116:	bf00      	nop
 8003118:	40020010 	.word	0x40020010
 800311c:	40020028 	.word	0x40020028
 8003120:	40020040 	.word	0x40020040
 8003124:	40020058 	.word	0x40020058
 8003128:	40020070 	.word	0x40020070
 800312c:	40020088 	.word	0x40020088
 8003130:	400200a0 	.word	0x400200a0
 8003134:	400200b8 	.word	0x400200b8
 8003138:	40020410 	.word	0x40020410
 800313c:	40020428 	.word	0x40020428
 8003140:	40020440 	.word	0x40020440
 8003144:	40020458 	.word	0x40020458
 8003148:	40020470 	.word	0x40020470
 800314c:	40020488 	.word	0x40020488
 8003150:	400204a0 	.word	0x400204a0
 8003154:	400204b8 	.word	0x400204b8
 8003158:	58025408 	.word	0x58025408
 800315c:	5802541c 	.word	0x5802541c
 8003160:	58025430 	.word	0x58025430
 8003164:	58025444 	.word	0x58025444
 8003168:	58025458 	.word	0x58025458
 800316c:	5802546c 	.word	0x5802546c
 8003170:	58025480 	.word	0x58025480
 8003174:	58025494 	.word	0x58025494
 8003178:	2300      	movs	r3, #0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d028      	beq.n	80031d0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003188:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800318c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003192:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003198:	f003 031f 	and.w	r3, r3, #31
 800319c:	2201      	movs	r2, #1
 800319e:	409a      	lsls	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80031ac:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00c      	beq.n	80031d0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031c4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80031ce:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop

080031fc <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80031fc:	b480      	push	{r7}
 80031fe:	b087      	sub	sp, #28
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	460b      	mov	r3, r1
 8003206:	607a      	str	r2, [r7, #4]
 8003208:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e00a      	b.n	800322e <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8003218:	7afb      	ldrb	r3, [r7, #11]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d103      	bne.n	8003226 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	605a      	str	r2, [r3, #4]
      break;
 8003224:	e002      	b.n	800322c <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	75fb      	strb	r3, [r7, #23]
      break;
 800322a:	bf00      	nop
  }

  return status;
 800322c:	7dfb      	ldrb	r3, [r7, #23]
}
 800322e:	4618      	mov	r0, r3
 8003230:	371c      	adds	r7, #28
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
 8003242:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e003      	b.n	8003256 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003254:	2300      	movs	r3, #0
  }
}
 8003256:	4618      	mov	r0, r3
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
	...

08003264 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	0c1b      	lsrs	r3, r3, #16
 8003272:	f003 0303 	and.w	r3, r3, #3
 8003276:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 031f 	and.w	r3, r3, #31
 8003280:	2201      	movs	r2, #1
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	011a      	lsls	r2, r3, #4
 800328c:	4b0c      	ldr	r3, [pc, #48]	@ (80032c0 <HAL_EXTI_IRQHandler+0x5c>)
 800328e:	4413      	add	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	4013      	ands	r3, r2
 800329a:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d009      	beq.n	80032b6 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d002      	beq.n	80032b6 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	4798      	blx	r3
    }
  }
}
 80032b6:	bf00      	nop
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	58000088 	.word	0x58000088

080032c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b089      	sub	sp, #36	@ 0x24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80032d2:	4b89      	ldr	r3, [pc, #548]	@ (80034f8 <HAL_GPIO_Init+0x234>)
 80032d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80032d6:	e194      	b.n	8003602 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	2101      	movs	r1, #1
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	fa01 f303 	lsl.w	r3, r1, r3
 80032e4:	4013      	ands	r3, r2
 80032e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 8186 	beq.w	80035fc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f003 0303 	and.w	r3, r3, #3
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d005      	beq.n	8003308 <HAL_GPIO_Init+0x44>
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 0303 	and.w	r3, r3, #3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d130      	bne.n	800336a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	2203      	movs	r2, #3
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	43db      	mvns	r3, r3
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4013      	ands	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	68da      	ldr	r2, [r3, #12]
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	4313      	orrs	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800333e:	2201      	movs	r2, #1
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	43db      	mvns	r3, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4013      	ands	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	091b      	lsrs	r3, r3, #4
 8003354:	f003 0201 	and.w	r2, r3, #1
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	4313      	orrs	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	2b03      	cmp	r3, #3
 8003374:	d017      	beq.n	80033a6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	2203      	movs	r2, #3
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	43db      	mvns	r3, r3
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	4013      	ands	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	689a      	ldr	r2, [r3, #8]
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	4313      	orrs	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d123      	bne.n	80033fa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	08da      	lsrs	r2, r3, #3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	3208      	adds	r2, #8
 80033ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	220f      	movs	r2, #15
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43db      	mvns	r3, r3
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4013      	ands	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	691a      	ldr	r2, [r3, #16]
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	08da      	lsrs	r2, r3, #3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3208      	adds	r2, #8
 80033f4:	69b9      	ldr	r1, [r7, #24]
 80033f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	2203      	movs	r2, #3
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	43db      	mvns	r3, r3
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	4013      	ands	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f003 0203 	and.w	r2, r3, #3
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4313      	orrs	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 80e0 	beq.w	80035fc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800343c:	4b2f      	ldr	r3, [pc, #188]	@ (80034fc <HAL_GPIO_Init+0x238>)
 800343e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003442:	4a2e      	ldr	r2, [pc, #184]	@ (80034fc <HAL_GPIO_Init+0x238>)
 8003444:	f043 0302 	orr.w	r3, r3, #2
 8003448:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800344c:	4b2b      	ldr	r3, [pc, #172]	@ (80034fc <HAL_GPIO_Init+0x238>)
 800344e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800345a:	4a29      	ldr	r2, [pc, #164]	@ (8003500 <HAL_GPIO_Init+0x23c>)
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	089b      	lsrs	r3, r3, #2
 8003460:	3302      	adds	r3, #2
 8003462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003466:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	f003 0303 	and.w	r3, r3, #3
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	220f      	movs	r2, #15
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	43db      	mvns	r3, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4013      	ands	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a20      	ldr	r2, [pc, #128]	@ (8003504 <HAL_GPIO_Init+0x240>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d052      	beq.n	800352c <HAL_GPIO_Init+0x268>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a1f      	ldr	r2, [pc, #124]	@ (8003508 <HAL_GPIO_Init+0x244>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d031      	beq.n	80034f2 <HAL_GPIO_Init+0x22e>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a1e      	ldr	r2, [pc, #120]	@ (800350c <HAL_GPIO_Init+0x248>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d02b      	beq.n	80034ee <HAL_GPIO_Init+0x22a>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a1d      	ldr	r2, [pc, #116]	@ (8003510 <HAL_GPIO_Init+0x24c>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d025      	beq.n	80034ea <HAL_GPIO_Init+0x226>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a1c      	ldr	r2, [pc, #112]	@ (8003514 <HAL_GPIO_Init+0x250>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d01f      	beq.n	80034e6 <HAL_GPIO_Init+0x222>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a1b      	ldr	r2, [pc, #108]	@ (8003518 <HAL_GPIO_Init+0x254>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d019      	beq.n	80034e2 <HAL_GPIO_Init+0x21e>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a1a      	ldr	r2, [pc, #104]	@ (800351c <HAL_GPIO_Init+0x258>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d013      	beq.n	80034de <HAL_GPIO_Init+0x21a>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a19      	ldr	r2, [pc, #100]	@ (8003520 <HAL_GPIO_Init+0x25c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d00d      	beq.n	80034da <HAL_GPIO_Init+0x216>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a18      	ldr	r2, [pc, #96]	@ (8003524 <HAL_GPIO_Init+0x260>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d007      	beq.n	80034d6 <HAL_GPIO_Init+0x212>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a17      	ldr	r2, [pc, #92]	@ (8003528 <HAL_GPIO_Init+0x264>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d101      	bne.n	80034d2 <HAL_GPIO_Init+0x20e>
 80034ce:	2309      	movs	r3, #9
 80034d0:	e02d      	b.n	800352e <HAL_GPIO_Init+0x26a>
 80034d2:	230a      	movs	r3, #10
 80034d4:	e02b      	b.n	800352e <HAL_GPIO_Init+0x26a>
 80034d6:	2308      	movs	r3, #8
 80034d8:	e029      	b.n	800352e <HAL_GPIO_Init+0x26a>
 80034da:	2307      	movs	r3, #7
 80034dc:	e027      	b.n	800352e <HAL_GPIO_Init+0x26a>
 80034de:	2306      	movs	r3, #6
 80034e0:	e025      	b.n	800352e <HAL_GPIO_Init+0x26a>
 80034e2:	2305      	movs	r3, #5
 80034e4:	e023      	b.n	800352e <HAL_GPIO_Init+0x26a>
 80034e6:	2304      	movs	r3, #4
 80034e8:	e021      	b.n	800352e <HAL_GPIO_Init+0x26a>
 80034ea:	2303      	movs	r3, #3
 80034ec:	e01f      	b.n	800352e <HAL_GPIO_Init+0x26a>
 80034ee:	2302      	movs	r3, #2
 80034f0:	e01d      	b.n	800352e <HAL_GPIO_Init+0x26a>
 80034f2:	2301      	movs	r3, #1
 80034f4:	e01b      	b.n	800352e <HAL_GPIO_Init+0x26a>
 80034f6:	bf00      	nop
 80034f8:	58000080 	.word	0x58000080
 80034fc:	58024400 	.word	0x58024400
 8003500:	58000400 	.word	0x58000400
 8003504:	58020000 	.word	0x58020000
 8003508:	58020400 	.word	0x58020400
 800350c:	58020800 	.word	0x58020800
 8003510:	58020c00 	.word	0x58020c00
 8003514:	58021000 	.word	0x58021000
 8003518:	58021400 	.word	0x58021400
 800351c:	58021800 	.word	0x58021800
 8003520:	58021c00 	.word	0x58021c00
 8003524:	58022000 	.word	0x58022000
 8003528:	58022400 	.word	0x58022400
 800352c:	2300      	movs	r3, #0
 800352e:	69fa      	ldr	r2, [r7, #28]
 8003530:	f002 0203 	and.w	r2, r2, #3
 8003534:	0092      	lsls	r2, r2, #2
 8003536:	4093      	lsls	r3, r2
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4313      	orrs	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800353e:	4938      	ldr	r1, [pc, #224]	@ (8003620 <HAL_GPIO_Init+0x35c>)
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	089b      	lsrs	r3, r3, #2
 8003544:	3302      	adds	r3, #2
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800354c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	43db      	mvns	r3, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4013      	ands	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	4313      	orrs	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003572:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800357a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	43db      	mvns	r3, r3
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	4013      	ands	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	4313      	orrs	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80035a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	43db      	mvns	r3, r3
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	4013      	ands	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	43db      	mvns	r3, r3
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4013      	ands	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	3301      	adds	r3, #1
 8003600:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	fa22 f303 	lsr.w	r3, r2, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	f47f ae63 	bne.w	80032d8 <HAL_GPIO_Init+0x14>
  }
}
 8003612:	bf00      	nop
 8003614:	bf00      	nop
 8003616:	3724      	adds	r7, #36	@ 0x24
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	58000400 	.word	0x58000400

08003624 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003624:	b480      	push	{r7}
 8003626:	b087      	sub	sp, #28
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800362e:	2300      	movs	r3, #0
 8003630:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003632:	4b75      	ldr	r3, [pc, #468]	@ (8003808 <HAL_GPIO_DeInit+0x1e4>)
 8003634:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8003636:	e0d9      	b.n	80037ec <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8003638:	2201      	movs	r2, #1
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	4013      	ands	r3, r2
 8003644:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 80cc 	beq.w	80037e6 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800364e:	4a6f      	ldr	r2, [pc, #444]	@ (800380c <HAL_GPIO_DeInit+0x1e8>)
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	089b      	lsrs	r3, r3, #2
 8003654:	3302      	adds	r3, #2
 8003656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800365a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	220f      	movs	r2, #15
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	4013      	ands	r3, r2
 800366e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a67      	ldr	r2, [pc, #412]	@ (8003810 <HAL_GPIO_DeInit+0x1ec>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d037      	beq.n	80036e8 <HAL_GPIO_DeInit+0xc4>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a66      	ldr	r2, [pc, #408]	@ (8003814 <HAL_GPIO_DeInit+0x1f0>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d031      	beq.n	80036e4 <HAL_GPIO_DeInit+0xc0>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a65      	ldr	r2, [pc, #404]	@ (8003818 <HAL_GPIO_DeInit+0x1f4>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d02b      	beq.n	80036e0 <HAL_GPIO_DeInit+0xbc>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a64      	ldr	r2, [pc, #400]	@ (800381c <HAL_GPIO_DeInit+0x1f8>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d025      	beq.n	80036dc <HAL_GPIO_DeInit+0xb8>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a63      	ldr	r2, [pc, #396]	@ (8003820 <HAL_GPIO_DeInit+0x1fc>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d01f      	beq.n	80036d8 <HAL_GPIO_DeInit+0xb4>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a62      	ldr	r2, [pc, #392]	@ (8003824 <HAL_GPIO_DeInit+0x200>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d019      	beq.n	80036d4 <HAL_GPIO_DeInit+0xb0>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a61      	ldr	r2, [pc, #388]	@ (8003828 <HAL_GPIO_DeInit+0x204>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d013      	beq.n	80036d0 <HAL_GPIO_DeInit+0xac>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a60      	ldr	r2, [pc, #384]	@ (800382c <HAL_GPIO_DeInit+0x208>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d00d      	beq.n	80036cc <HAL_GPIO_DeInit+0xa8>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a5f      	ldr	r2, [pc, #380]	@ (8003830 <HAL_GPIO_DeInit+0x20c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d007      	beq.n	80036c8 <HAL_GPIO_DeInit+0xa4>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a5e      	ldr	r2, [pc, #376]	@ (8003834 <HAL_GPIO_DeInit+0x210>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d101      	bne.n	80036c4 <HAL_GPIO_DeInit+0xa0>
 80036c0:	2309      	movs	r3, #9
 80036c2:	e012      	b.n	80036ea <HAL_GPIO_DeInit+0xc6>
 80036c4:	230a      	movs	r3, #10
 80036c6:	e010      	b.n	80036ea <HAL_GPIO_DeInit+0xc6>
 80036c8:	2308      	movs	r3, #8
 80036ca:	e00e      	b.n	80036ea <HAL_GPIO_DeInit+0xc6>
 80036cc:	2307      	movs	r3, #7
 80036ce:	e00c      	b.n	80036ea <HAL_GPIO_DeInit+0xc6>
 80036d0:	2306      	movs	r3, #6
 80036d2:	e00a      	b.n	80036ea <HAL_GPIO_DeInit+0xc6>
 80036d4:	2305      	movs	r3, #5
 80036d6:	e008      	b.n	80036ea <HAL_GPIO_DeInit+0xc6>
 80036d8:	2304      	movs	r3, #4
 80036da:	e006      	b.n	80036ea <HAL_GPIO_DeInit+0xc6>
 80036dc:	2303      	movs	r3, #3
 80036de:	e004      	b.n	80036ea <HAL_GPIO_DeInit+0xc6>
 80036e0:	2302      	movs	r3, #2
 80036e2:	e002      	b.n	80036ea <HAL_GPIO_DeInit+0xc6>
 80036e4:	2301      	movs	r3, #1
 80036e6:	e000      	b.n	80036ea <HAL_GPIO_DeInit+0xc6>
 80036e8:	2300      	movs	r3, #0
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	f002 0203 	and.w	r2, r2, #3
 80036f0:	0092      	lsls	r2, r2, #2
 80036f2:	4093      	lsls	r3, r2
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d136      	bne.n	8003768 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	43db      	mvns	r3, r3
 8003702:	401a      	ands	r2, r3
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	43db      	mvns	r3, r3
 8003710:	401a      	ands	r2, r3
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003716:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	43db      	mvns	r3, r3
 8003720:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003724:	4013      	ands	r3, r2
 8003726:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8003728:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	43db      	mvns	r3, r3
 8003732:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003736:	4013      	ands	r3, r2
 8003738:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f003 0303 	and.w	r3, r3, #3
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	220f      	movs	r2, #15
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800374a:	4a30      	ldr	r2, [pc, #192]	@ (800380c <HAL_GPIO_DeInit+0x1e8>)
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	089b      	lsrs	r3, r3, #2
 8003750:	3302      	adds	r3, #2
 8003752:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	43da      	mvns	r2, r3
 800375a:	482c      	ldr	r0, [pc, #176]	@ (800380c <HAL_GPIO_DeInit+0x1e8>)
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	089b      	lsrs	r3, r3, #2
 8003760:	400a      	ands	r2, r1
 8003762:	3302      	adds	r3, #2
 8003764:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	2103      	movs	r1, #3
 8003772:	fa01 f303 	lsl.w	r3, r1, r3
 8003776:	431a      	orrs	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	08da      	lsrs	r2, r3, #3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3208      	adds	r2, #8
 8003784:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	220f      	movs	r2, #15
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	43db      	mvns	r3, r3
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	08d2      	lsrs	r2, r2, #3
 800379c:	4019      	ands	r1, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	3208      	adds	r2, #8
 80037a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68da      	ldr	r2, [r3, #12]
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	2103      	movs	r1, #3
 80037b0:	fa01 f303 	lsl.w	r3, r1, r3
 80037b4:	43db      	mvns	r3, r3
 80037b6:	401a      	ands	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	2101      	movs	r1, #1
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	fa01 f303 	lsl.w	r3, r1, r3
 80037c8:	43db      	mvns	r3, r3
 80037ca:	401a      	ands	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	2103      	movs	r1, #3
 80037da:	fa01 f303 	lsl.w	r3, r1, r3
 80037de:	43db      	mvns	r3, r3
 80037e0:	401a      	ands	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	609a      	str	r2, [r3, #8]
    }

    position++;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	3301      	adds	r3, #1
 80037ea:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	fa22 f303 	lsr.w	r3, r2, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f47f af1f 	bne.w	8003638 <HAL_GPIO_DeInit+0x14>
  }
}
 80037fa:	bf00      	nop
 80037fc:	bf00      	nop
 80037fe:	371c      	adds	r7, #28
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	58000080 	.word	0x58000080
 800380c:	58000400 	.word	0x58000400
 8003810:	58020000 	.word	0x58020000
 8003814:	58020400 	.word	0x58020400
 8003818:	58020800 	.word	0x58020800
 800381c:	58020c00 	.word	0x58020c00
 8003820:	58021000 	.word	0x58021000
 8003824:	58021400 	.word	0x58021400
 8003828:	58021800 	.word	0x58021800
 800382c:	58021c00 	.word	0x58021c00
 8003830:	58022000 	.word	0x58022000
 8003834:	58022400 	.word	0x58022400

08003838 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	460b      	mov	r3, r1
 8003842:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691a      	ldr	r2, [r3, #16]
 8003848:	887b      	ldrh	r3, [r7, #2]
 800384a:	4013      	ands	r3, r2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d002      	beq.n	8003856 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003850:	2301      	movs	r3, #1
 8003852:	73fb      	strb	r3, [r7, #15]
 8003854:	e001      	b.n	800385a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003856:	2300      	movs	r3, #0
 8003858:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800385a:	7bfb      	ldrb	r3, [r7, #15]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3714      	adds	r7, #20
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	460b      	mov	r3, r1
 8003872:	807b      	strh	r3, [r7, #2]
 8003874:	4613      	mov	r3, r2
 8003876:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003878:	787b      	ldrb	r3, [r7, #1]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800387e:	887a      	ldrh	r2, [r7, #2]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003884:	e003      	b.n	800388e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003886:	887b      	ldrh	r3, [r7, #2]
 8003888:	041a      	lsls	r2, r3, #16
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	619a      	str	r2, [r3, #24]
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800389a:	b480      	push	{r7}
 800389c:	b085      	sub	sp, #20
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	460b      	mov	r3, r1
 80038a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038ac:	887a      	ldrh	r2, [r7, #2]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	4013      	ands	r3, r2
 80038b2:	041a      	lsls	r2, r3, #16
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	43d9      	mvns	r1, r3
 80038b8:	887b      	ldrh	r3, [r7, #2]
 80038ba:	400b      	ands	r3, r1
 80038bc:	431a      	orrs	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	619a      	str	r2, [r3, #24]
}
 80038c2:	bf00      	nop
 80038c4:	3714      	adds	r7, #20
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
	...

080038d0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80038d8:	4b19      	ldr	r3, [pc, #100]	@ (8003940 <HAL_PWREx_ConfigSupply+0x70>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	d00a      	beq.n	80038fa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80038e4:	4b16      	ldr	r3, [pc, #88]	@ (8003940 <HAL_PWREx_ConfigSupply+0x70>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d001      	beq.n	80038f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e01f      	b.n	8003936 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80038f6:	2300      	movs	r3, #0
 80038f8:	e01d      	b.n	8003936 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80038fa:	4b11      	ldr	r3, [pc, #68]	@ (8003940 <HAL_PWREx_ConfigSupply+0x70>)
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	f023 0207 	bic.w	r2, r3, #7
 8003902:	490f      	ldr	r1, [pc, #60]	@ (8003940 <HAL_PWREx_ConfigSupply+0x70>)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4313      	orrs	r3, r2
 8003908:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800390a:	f7ff f83b 	bl	8002984 <HAL_GetTick>
 800390e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003910:	e009      	b.n	8003926 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003912:	f7ff f837 	bl	8002984 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003920:	d901      	bls.n	8003926 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e007      	b.n	8003936 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003926:	4b06      	ldr	r3, [pc, #24]	@ (8003940 <HAL_PWREx_ConfigSupply+0x70>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800392e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003932:	d1ee      	bne.n	8003912 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	58024800 	.word	0x58024800

08003944 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b08c      	sub	sp, #48	@ 0x30
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d102      	bne.n	8003958 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	f000 bc48 	b.w	80041e8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 8088 	beq.w	8003a76 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003966:	4b99      	ldr	r3, [pc, #612]	@ (8003bcc <HAL_RCC_OscConfig+0x288>)
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800396e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003970:	4b96      	ldr	r3, [pc, #600]	@ (8003bcc <HAL_RCC_OscConfig+0x288>)
 8003972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003974:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003978:	2b10      	cmp	r3, #16
 800397a:	d007      	beq.n	800398c <HAL_RCC_OscConfig+0x48>
 800397c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800397e:	2b18      	cmp	r3, #24
 8003980:	d111      	bne.n	80039a6 <HAL_RCC_OscConfig+0x62>
 8003982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003984:	f003 0303 	and.w	r3, r3, #3
 8003988:	2b02      	cmp	r3, #2
 800398a:	d10c      	bne.n	80039a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800398c:	4b8f      	ldr	r3, [pc, #572]	@ (8003bcc <HAL_RCC_OscConfig+0x288>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d06d      	beq.n	8003a74 <HAL_RCC_OscConfig+0x130>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d169      	bne.n	8003a74 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	f000 bc21 	b.w	80041e8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039ae:	d106      	bne.n	80039be <HAL_RCC_OscConfig+0x7a>
 80039b0:	4b86      	ldr	r3, [pc, #536]	@ (8003bcc <HAL_RCC_OscConfig+0x288>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a85      	ldr	r2, [pc, #532]	@ (8003bcc <HAL_RCC_OscConfig+0x288>)
 80039b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039ba:	6013      	str	r3, [r2, #0]
 80039bc:	e02e      	b.n	8003a1c <HAL_RCC_OscConfig+0xd8>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10c      	bne.n	80039e0 <HAL_RCC_OscConfig+0x9c>
 80039c6:	4b81      	ldr	r3, [pc, #516]	@ (8003bcc <HAL_RCC_OscConfig+0x288>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a80      	ldr	r2, [pc, #512]	@ (8003bcc <HAL_RCC_OscConfig+0x288>)
 80039cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	4b7e      	ldr	r3, [pc, #504]	@ (8003bcc <HAL_RCC_OscConfig+0x288>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a7d      	ldr	r2, [pc, #500]	@ (8003bcc <HAL_RCC_OscConfig+0x288>)
 80039d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	e01d      	b.n	8003a1c <HAL_RCC_OscConfig+0xd8>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039e8:	d10c      	bne.n	8003a04 <HAL_RCC_OscConfig+0xc0>
 80039ea:	4b78      	ldr	r3, [pc, #480]	@ (8003bcc <HAL_RCC_OscConfig+0x288>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a77      	ldr	r2, [pc, #476]	@ (8003bcc <HAL_RCC_OscConfig+0x288>)
 80039f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	4b75      	ldr	r3, [pc, #468]	@ (8003bcc <HAL_RCC_OscConfig+0x288>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a74      	ldr	r2, [pc, #464]	@ (8003bcc <HAL_RCC_OscConfig+0x288>)
 80039fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	e00b      	b.n	8003a1c <HAL_RCC_OscConfig+0xd8>
 8003a04:	4b71      	ldr	r3, [pc, #452]	@ (8003bcc <HAL_RCC_OscConfig+0x288>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a70      	ldr	r2, [pc, #448]	@ (8003bcc <HAL_RCC_OscConfig+0x288>)
 8003a0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a0e:	6013      	str	r3, [r2, #0]
 8003a10:	4b6e      	ldr	r3, [pc, #440]	@ (8003bcc <HAL_RCC_OscConfig+0x288>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a6d      	ldr	r2, [pc, #436]	@ (8003bcc <HAL_RCC_OscConfig+0x288>)
 8003a16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d013      	beq.n	8003a4c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a24:	f7fe ffae 	bl	8002984 <HAL_GetTick>
 8003a28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a2c:	f7fe ffaa 	bl	8002984 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b64      	cmp	r3, #100	@ 0x64
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e3d4      	b.n	80041e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a3e:	4b63      	ldr	r3, [pc, #396]	@ (8003bcc <HAL_RCC_OscConfig+0x288>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0f0      	beq.n	8003a2c <HAL_RCC_OscConfig+0xe8>
 8003a4a:	e014      	b.n	8003a76 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4c:	f7fe ff9a 	bl	8002984 <HAL_GetTick>
 8003a50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a54:	f7fe ff96 	bl	8002984 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b64      	cmp	r3, #100	@ 0x64
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e3c0      	b.n	80041e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a66:	4b59      	ldr	r3, [pc, #356]	@ (8003bcc <HAL_RCC_OscConfig+0x288>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1f0      	bne.n	8003a54 <HAL_RCC_OscConfig+0x110>
 8003a72:	e000      	b.n	8003a76 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 80ca 	beq.w	8003c18 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a84:	4b51      	ldr	r3, [pc, #324]	@ (8003bcc <HAL_RCC_OscConfig+0x288>)
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a8c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a8e:	4b4f      	ldr	r3, [pc, #316]	@ (8003bcc <HAL_RCC_OscConfig+0x288>)
 8003a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a92:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003a94:	6a3b      	ldr	r3, [r7, #32]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d007      	beq.n	8003aaa <HAL_RCC_OscConfig+0x166>
 8003a9a:	6a3b      	ldr	r3, [r7, #32]
 8003a9c:	2b18      	cmp	r3, #24
 8003a9e:	d156      	bne.n	8003b4e <HAL_RCC_OscConfig+0x20a>
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	f003 0303 	and.w	r3, r3, #3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d151      	bne.n	8003b4e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aaa:	4b48      	ldr	r3, [pc, #288]	@ (8003bcc <HAL_RCC_OscConfig+0x288>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d005      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x17e>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e392      	b.n	80041e8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003ac2:	4b42      	ldr	r3, [pc, #264]	@ (8003bcc <HAL_RCC_OscConfig+0x288>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f023 0219 	bic.w	r2, r3, #25
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	493f      	ldr	r1, [pc, #252]	@ (8003bcc <HAL_RCC_OscConfig+0x288>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad4:	f7fe ff56 	bl	8002984 <HAL_GetTick>
 8003ad8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003adc:	f7fe ff52 	bl	8002984 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e37c      	b.n	80041e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003aee:	4b37      	ldr	r3, [pc, #220]	@ (8003bcc <HAL_RCC_OscConfig+0x288>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0304 	and.w	r3, r3, #4
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d0f0      	beq.n	8003adc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003afa:	f7fe ff73 	bl	80029e4 <HAL_GetREVID>
 8003afe:	4603      	mov	r3, r0
 8003b00:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d817      	bhi.n	8003b38 <HAL_RCC_OscConfig+0x1f4>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	2b40      	cmp	r3, #64	@ 0x40
 8003b0e:	d108      	bne.n	8003b22 <HAL_RCC_OscConfig+0x1de>
 8003b10:	4b2e      	ldr	r3, [pc, #184]	@ (8003bcc <HAL_RCC_OscConfig+0x288>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003b18:	4a2c      	ldr	r2, [pc, #176]	@ (8003bcc <HAL_RCC_OscConfig+0x288>)
 8003b1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b1e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b20:	e07a      	b.n	8003c18 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b22:	4b2a      	ldr	r3, [pc, #168]	@ (8003bcc <HAL_RCC_OscConfig+0x288>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	031b      	lsls	r3, r3, #12
 8003b30:	4926      	ldr	r1, [pc, #152]	@ (8003bcc <HAL_RCC_OscConfig+0x288>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b36:	e06f      	b.n	8003c18 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b38:	4b24      	ldr	r3, [pc, #144]	@ (8003bcc <HAL_RCC_OscConfig+0x288>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	061b      	lsls	r3, r3, #24
 8003b46:	4921      	ldr	r1, [pc, #132]	@ (8003bcc <HAL_RCC_OscConfig+0x288>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b4c:	e064      	b.n	8003c18 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d047      	beq.n	8003be6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b56:	4b1d      	ldr	r3, [pc, #116]	@ (8003bcc <HAL_RCC_OscConfig+0x288>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f023 0219 	bic.w	r2, r3, #25
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	491a      	ldr	r1, [pc, #104]	@ (8003bcc <HAL_RCC_OscConfig+0x288>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b68:	f7fe ff0c 	bl	8002984 <HAL_GetTick>
 8003b6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b70:	f7fe ff08 	bl	8002984 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e332      	b.n	80041e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b82:	4b12      	ldr	r3, [pc, #72]	@ (8003bcc <HAL_RCC_OscConfig+0x288>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0304 	and.w	r3, r3, #4
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0f0      	beq.n	8003b70 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b8e:	f7fe ff29 	bl	80029e4 <HAL_GetREVID>
 8003b92:	4603      	mov	r3, r0
 8003b94:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d819      	bhi.n	8003bd0 <HAL_RCC_OscConfig+0x28c>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	2b40      	cmp	r3, #64	@ 0x40
 8003ba2:	d108      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x272>
 8003ba4:	4b09      	ldr	r3, [pc, #36]	@ (8003bcc <HAL_RCC_OscConfig+0x288>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003bac:	4a07      	ldr	r2, [pc, #28]	@ (8003bcc <HAL_RCC_OscConfig+0x288>)
 8003bae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bb2:	6053      	str	r3, [r2, #4]
 8003bb4:	e030      	b.n	8003c18 <HAL_RCC_OscConfig+0x2d4>
 8003bb6:	4b05      	ldr	r3, [pc, #20]	@ (8003bcc <HAL_RCC_OscConfig+0x288>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	031b      	lsls	r3, r3, #12
 8003bc4:	4901      	ldr	r1, [pc, #4]	@ (8003bcc <HAL_RCC_OscConfig+0x288>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	604b      	str	r3, [r1, #4]
 8003bca:	e025      	b.n	8003c18 <HAL_RCC_OscConfig+0x2d4>
 8003bcc:	58024400 	.word	0x58024400
 8003bd0:	4b9a      	ldr	r3, [pc, #616]	@ (8003e3c <HAL_RCC_OscConfig+0x4f8>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	061b      	lsls	r3, r3, #24
 8003bde:	4997      	ldr	r1, [pc, #604]	@ (8003e3c <HAL_RCC_OscConfig+0x4f8>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	604b      	str	r3, [r1, #4]
 8003be4:	e018      	b.n	8003c18 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003be6:	4b95      	ldr	r3, [pc, #596]	@ (8003e3c <HAL_RCC_OscConfig+0x4f8>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a94      	ldr	r2, [pc, #592]	@ (8003e3c <HAL_RCC_OscConfig+0x4f8>)
 8003bec:	f023 0301 	bic.w	r3, r3, #1
 8003bf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf2:	f7fe fec7 	bl	8002984 <HAL_GetTick>
 8003bf6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bf8:	e008      	b.n	8003c0c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bfa:	f7fe fec3 	bl	8002984 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e2ed      	b.n	80041e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c0c:	4b8b      	ldr	r3, [pc, #556]	@ (8003e3c <HAL_RCC_OscConfig+0x4f8>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1f0      	bne.n	8003bfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0310 	and.w	r3, r3, #16
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 80a9 	beq.w	8003d78 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c26:	4b85      	ldr	r3, [pc, #532]	@ (8003e3c <HAL_RCC_OscConfig+0x4f8>)
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c2e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c30:	4b82      	ldr	r3, [pc, #520]	@ (8003e3c <HAL_RCC_OscConfig+0x4f8>)
 8003c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c34:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	2b08      	cmp	r3, #8
 8003c3a:	d007      	beq.n	8003c4c <HAL_RCC_OscConfig+0x308>
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	2b18      	cmp	r3, #24
 8003c40:	d13a      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x374>
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f003 0303 	and.w	r3, r3, #3
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d135      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c4c:	4b7b      	ldr	r3, [pc, #492]	@ (8003e3c <HAL_RCC_OscConfig+0x4f8>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d005      	beq.n	8003c64 <HAL_RCC_OscConfig+0x320>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	2b80      	cmp	r3, #128	@ 0x80
 8003c5e:	d001      	beq.n	8003c64 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e2c1      	b.n	80041e8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c64:	f7fe febe 	bl	80029e4 <HAL_GetREVID>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d817      	bhi.n	8003ca2 <HAL_RCC_OscConfig+0x35e>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	2b20      	cmp	r3, #32
 8003c78:	d108      	bne.n	8003c8c <HAL_RCC_OscConfig+0x348>
 8003c7a:	4b70      	ldr	r3, [pc, #448]	@ (8003e3c <HAL_RCC_OscConfig+0x4f8>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003c82:	4a6e      	ldr	r2, [pc, #440]	@ (8003e3c <HAL_RCC_OscConfig+0x4f8>)
 8003c84:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003c88:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c8a:	e075      	b.n	8003d78 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c8c:	4b6b      	ldr	r3, [pc, #428]	@ (8003e3c <HAL_RCC_OscConfig+0x4f8>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	069b      	lsls	r3, r3, #26
 8003c9a:	4968      	ldr	r1, [pc, #416]	@ (8003e3c <HAL_RCC_OscConfig+0x4f8>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ca0:	e06a      	b.n	8003d78 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ca2:	4b66      	ldr	r3, [pc, #408]	@ (8003e3c <HAL_RCC_OscConfig+0x4f8>)
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	061b      	lsls	r3, r3, #24
 8003cb0:	4962      	ldr	r1, [pc, #392]	@ (8003e3c <HAL_RCC_OscConfig+0x4f8>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003cb6:	e05f      	b.n	8003d78 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	69db      	ldr	r3, [r3, #28]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d042      	beq.n	8003d46 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003cc0:	4b5e      	ldr	r3, [pc, #376]	@ (8003e3c <HAL_RCC_OscConfig+0x4f8>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a5d      	ldr	r2, [pc, #372]	@ (8003e3c <HAL_RCC_OscConfig+0x4f8>)
 8003cc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ccc:	f7fe fe5a 	bl	8002984 <HAL_GetTick>
 8003cd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003cd4:	f7fe fe56 	bl	8002984 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e280      	b.n	80041e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ce6:	4b55      	ldr	r3, [pc, #340]	@ (8003e3c <HAL_RCC_OscConfig+0x4f8>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d0f0      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003cf2:	f7fe fe77 	bl	80029e4 <HAL_GetREVID>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d817      	bhi.n	8003d30 <HAL_RCC_OscConfig+0x3ec>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	2b20      	cmp	r3, #32
 8003d06:	d108      	bne.n	8003d1a <HAL_RCC_OscConfig+0x3d6>
 8003d08:	4b4c      	ldr	r3, [pc, #304]	@ (8003e3c <HAL_RCC_OscConfig+0x4f8>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003d10:	4a4a      	ldr	r2, [pc, #296]	@ (8003e3c <HAL_RCC_OscConfig+0x4f8>)
 8003d12:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003d16:	6053      	str	r3, [r2, #4]
 8003d18:	e02e      	b.n	8003d78 <HAL_RCC_OscConfig+0x434>
 8003d1a:	4b48      	ldr	r3, [pc, #288]	@ (8003e3c <HAL_RCC_OscConfig+0x4f8>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	069b      	lsls	r3, r3, #26
 8003d28:	4944      	ldr	r1, [pc, #272]	@ (8003e3c <HAL_RCC_OscConfig+0x4f8>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	604b      	str	r3, [r1, #4]
 8003d2e:	e023      	b.n	8003d78 <HAL_RCC_OscConfig+0x434>
 8003d30:	4b42      	ldr	r3, [pc, #264]	@ (8003e3c <HAL_RCC_OscConfig+0x4f8>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	061b      	lsls	r3, r3, #24
 8003d3e:	493f      	ldr	r1, [pc, #252]	@ (8003e3c <HAL_RCC_OscConfig+0x4f8>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	60cb      	str	r3, [r1, #12]
 8003d44:	e018      	b.n	8003d78 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003d46:	4b3d      	ldr	r3, [pc, #244]	@ (8003e3c <HAL_RCC_OscConfig+0x4f8>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a3c      	ldr	r2, [pc, #240]	@ (8003e3c <HAL_RCC_OscConfig+0x4f8>)
 8003d4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d52:	f7fe fe17 	bl	8002984 <HAL_GetTick>
 8003d56:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003d58:	e008      	b.n	8003d6c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003d5a:	f7fe fe13 	bl	8002984 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e23d      	b.n	80041e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003d6c:	4b33      	ldr	r3, [pc, #204]	@ (8003e3c <HAL_RCC_OscConfig+0x4f8>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1f0      	bne.n	8003d5a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0308 	and.w	r3, r3, #8
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d036      	beq.n	8003df2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d019      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d8c:	4b2b      	ldr	r3, [pc, #172]	@ (8003e3c <HAL_RCC_OscConfig+0x4f8>)
 8003d8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d90:	4a2a      	ldr	r2, [pc, #168]	@ (8003e3c <HAL_RCC_OscConfig+0x4f8>)
 8003d92:	f043 0301 	orr.w	r3, r3, #1
 8003d96:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d98:	f7fe fdf4 	bl	8002984 <HAL_GetTick>
 8003d9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d9e:	e008      	b.n	8003db2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003da0:	f7fe fdf0 	bl	8002984 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e21a      	b.n	80041e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003db2:	4b22      	ldr	r3, [pc, #136]	@ (8003e3c <HAL_RCC_OscConfig+0x4f8>)
 8003db4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0f0      	beq.n	8003da0 <HAL_RCC_OscConfig+0x45c>
 8003dbe:	e018      	b.n	8003df2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dc0:	4b1e      	ldr	r3, [pc, #120]	@ (8003e3c <HAL_RCC_OscConfig+0x4f8>)
 8003dc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dc4:	4a1d      	ldr	r2, [pc, #116]	@ (8003e3c <HAL_RCC_OscConfig+0x4f8>)
 8003dc6:	f023 0301 	bic.w	r3, r3, #1
 8003dca:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dcc:	f7fe fdda 	bl	8002984 <HAL_GetTick>
 8003dd0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dd4:	f7fe fdd6 	bl	8002984 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e200      	b.n	80041e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003de6:	4b15      	ldr	r3, [pc, #84]	@ (8003e3c <HAL_RCC_OscConfig+0x4f8>)
 8003de8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1f0      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0320 	and.w	r3, r3, #32
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d039      	beq.n	8003e72 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d01c      	beq.n	8003e40 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e06:	4b0d      	ldr	r3, [pc, #52]	@ (8003e3c <HAL_RCC_OscConfig+0x4f8>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a0c      	ldr	r2, [pc, #48]	@ (8003e3c <HAL_RCC_OscConfig+0x4f8>)
 8003e0c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003e10:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003e12:	f7fe fdb7 	bl	8002984 <HAL_GetTick>
 8003e16:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e18:	e008      	b.n	8003e2c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e1a:	f7fe fdb3 	bl	8002984 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e1dd      	b.n	80041e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e2c:	4b03      	ldr	r3, [pc, #12]	@ (8003e3c <HAL_RCC_OscConfig+0x4f8>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0f0      	beq.n	8003e1a <HAL_RCC_OscConfig+0x4d6>
 8003e38:	e01b      	b.n	8003e72 <HAL_RCC_OscConfig+0x52e>
 8003e3a:	bf00      	nop
 8003e3c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e40:	4b9b      	ldr	r3, [pc, #620]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a9a      	ldr	r2, [pc, #616]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 8003e46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e4a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003e4c:	f7fe fd9a 	bl	8002984 <HAL_GetTick>
 8003e50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e54:	f7fe fd96 	bl	8002984 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e1c0      	b.n	80041e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e66:	4b92      	ldr	r3, [pc, #584]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1f0      	bne.n	8003e54 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0304 	and.w	r3, r3, #4
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f000 8081 	beq.w	8003f82 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e80:	4b8c      	ldr	r3, [pc, #560]	@ (80040b4 <HAL_RCC_OscConfig+0x770>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a8b      	ldr	r2, [pc, #556]	@ (80040b4 <HAL_RCC_OscConfig+0x770>)
 8003e86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e8c:	f7fe fd7a 	bl	8002984 <HAL_GetTick>
 8003e90:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e94:	f7fe fd76 	bl	8002984 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b64      	cmp	r3, #100	@ 0x64
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e1a0      	b.n	80041e8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ea6:	4b83      	ldr	r3, [pc, #524]	@ (80040b4 <HAL_RCC_OscConfig+0x770>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0f0      	beq.n	8003e94 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d106      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x584>
 8003eba:	4b7d      	ldr	r3, [pc, #500]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 8003ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ebe:	4a7c      	ldr	r2, [pc, #496]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 8003ec0:	f043 0301 	orr.w	r3, r3, #1
 8003ec4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ec6:	e02d      	b.n	8003f24 <HAL_RCC_OscConfig+0x5e0>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10c      	bne.n	8003eea <HAL_RCC_OscConfig+0x5a6>
 8003ed0:	4b77      	ldr	r3, [pc, #476]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 8003ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ed4:	4a76      	ldr	r2, [pc, #472]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 8003ed6:	f023 0301 	bic.w	r3, r3, #1
 8003eda:	6713      	str	r3, [r2, #112]	@ 0x70
 8003edc:	4b74      	ldr	r3, [pc, #464]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 8003ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ee0:	4a73      	ldr	r2, [pc, #460]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 8003ee2:	f023 0304 	bic.w	r3, r3, #4
 8003ee6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ee8:	e01c      	b.n	8003f24 <HAL_RCC_OscConfig+0x5e0>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	2b05      	cmp	r3, #5
 8003ef0:	d10c      	bne.n	8003f0c <HAL_RCC_OscConfig+0x5c8>
 8003ef2:	4b6f      	ldr	r3, [pc, #444]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 8003ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ef6:	4a6e      	ldr	r2, [pc, #440]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 8003ef8:	f043 0304 	orr.w	r3, r3, #4
 8003efc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003efe:	4b6c      	ldr	r3, [pc, #432]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 8003f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f02:	4a6b      	ldr	r2, [pc, #428]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 8003f04:	f043 0301 	orr.w	r3, r3, #1
 8003f08:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f0a:	e00b      	b.n	8003f24 <HAL_RCC_OscConfig+0x5e0>
 8003f0c:	4b68      	ldr	r3, [pc, #416]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 8003f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f10:	4a67      	ldr	r2, [pc, #412]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 8003f12:	f023 0301 	bic.w	r3, r3, #1
 8003f16:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f18:	4b65      	ldr	r3, [pc, #404]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 8003f1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f1c:	4a64      	ldr	r2, [pc, #400]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 8003f1e:	f023 0304 	bic.w	r3, r3, #4
 8003f22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d015      	beq.n	8003f58 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f2c:	f7fe fd2a 	bl	8002984 <HAL_GetTick>
 8003f30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f32:	e00a      	b.n	8003f4a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f34:	f7fe fd26 	bl	8002984 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e14e      	b.n	80041e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f4a:	4b59      	ldr	r3, [pc, #356]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 8003f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d0ee      	beq.n	8003f34 <HAL_RCC_OscConfig+0x5f0>
 8003f56:	e014      	b.n	8003f82 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f58:	f7fe fd14 	bl	8002984 <HAL_GetTick>
 8003f5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f5e:	e00a      	b.n	8003f76 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f60:	f7fe fd10 	bl	8002984 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e138      	b.n	80041e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f76:	4b4e      	ldr	r3, [pc, #312]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 8003f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1ee      	bne.n	8003f60 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 812d 	beq.w	80041e6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003f8c:	4b48      	ldr	r3, [pc, #288]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f94:	2b18      	cmp	r3, #24
 8003f96:	f000 80bd 	beq.w	8004114 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	f040 809e 	bne.w	80040e0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fa4:	4b42      	ldr	r3, [pc, #264]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a41      	ldr	r2, [pc, #260]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 8003faa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb0:	f7fe fce8 	bl	8002984 <HAL_GetTick>
 8003fb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fb8:	f7fe fce4 	bl	8002984 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e10e      	b.n	80041e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fca:	4b39      	ldr	r3, [pc, #228]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1f0      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fd6:	4b36      	ldr	r3, [pc, #216]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 8003fd8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003fda:	4b37      	ldr	r3, [pc, #220]	@ (80040b8 <HAL_RCC_OscConfig+0x774>)
 8003fdc:	4013      	ands	r3, r2
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003fe6:	0112      	lsls	r2, r2, #4
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	4931      	ldr	r1, [pc, #196]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	628b      	str	r3, [r1, #40]	@ 0x28
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ffe:	3b01      	subs	r3, #1
 8004000:	025b      	lsls	r3, r3, #9
 8004002:	b29b      	uxth	r3, r3
 8004004:	431a      	orrs	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800400a:	3b01      	subs	r3, #1
 800400c:	041b      	lsls	r3, r3, #16
 800400e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004012:	431a      	orrs	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004018:	3b01      	subs	r3, #1
 800401a:	061b      	lsls	r3, r3, #24
 800401c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004020:	4923      	ldr	r1, [pc, #140]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 8004022:	4313      	orrs	r3, r2
 8004024:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004026:	4b22      	ldr	r3, [pc, #136]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 8004028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402a:	4a21      	ldr	r2, [pc, #132]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 800402c:	f023 0301 	bic.w	r3, r3, #1
 8004030:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004032:	4b1f      	ldr	r3, [pc, #124]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 8004034:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004036:	4b21      	ldr	r3, [pc, #132]	@ (80040bc <HAL_RCC_OscConfig+0x778>)
 8004038:	4013      	ands	r3, r2
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800403e:	00d2      	lsls	r2, r2, #3
 8004040:	491b      	ldr	r1, [pc, #108]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 8004042:	4313      	orrs	r3, r2
 8004044:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004046:	4b1a      	ldr	r3, [pc, #104]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 8004048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404a:	f023 020c 	bic.w	r2, r3, #12
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004052:	4917      	ldr	r1, [pc, #92]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 8004054:	4313      	orrs	r3, r2
 8004056:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004058:	4b15      	ldr	r3, [pc, #84]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 800405a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405c:	f023 0202 	bic.w	r2, r3, #2
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004064:	4912      	ldr	r1, [pc, #72]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 8004066:	4313      	orrs	r3, r2
 8004068:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800406a:	4b11      	ldr	r3, [pc, #68]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 800406c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800406e:	4a10      	ldr	r2, [pc, #64]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 8004070:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004074:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004076:	4b0e      	ldr	r3, [pc, #56]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 8004078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800407a:	4a0d      	ldr	r2, [pc, #52]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 800407c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004080:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004082:	4b0b      	ldr	r3, [pc, #44]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 8004084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004086:	4a0a      	ldr	r2, [pc, #40]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 8004088:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800408c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800408e:	4b08      	ldr	r3, [pc, #32]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 8004090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004092:	4a07      	ldr	r2, [pc, #28]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 8004094:	f043 0301 	orr.w	r3, r3, #1
 8004098:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800409a:	4b05      	ldr	r3, [pc, #20]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a04      	ldr	r2, [pc, #16]	@ (80040b0 <HAL_RCC_OscConfig+0x76c>)
 80040a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a6:	f7fe fc6d 	bl	8002984 <HAL_GetTick>
 80040aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040ac:	e011      	b.n	80040d2 <HAL_RCC_OscConfig+0x78e>
 80040ae:	bf00      	nop
 80040b0:	58024400 	.word	0x58024400
 80040b4:	58024800 	.word	0x58024800
 80040b8:	fffffc0c 	.word	0xfffffc0c
 80040bc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c0:	f7fe fc60 	bl	8002984 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e08a      	b.n	80041e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040d2:	4b47      	ldr	r3, [pc, #284]	@ (80041f0 <HAL_RCC_OscConfig+0x8ac>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0f0      	beq.n	80040c0 <HAL_RCC_OscConfig+0x77c>
 80040de:	e082      	b.n	80041e6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e0:	4b43      	ldr	r3, [pc, #268]	@ (80041f0 <HAL_RCC_OscConfig+0x8ac>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a42      	ldr	r2, [pc, #264]	@ (80041f0 <HAL_RCC_OscConfig+0x8ac>)
 80040e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ec:	f7fe fc4a 	bl	8002984 <HAL_GetTick>
 80040f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f4:	f7fe fc46 	bl	8002984 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e070      	b.n	80041e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004106:	4b3a      	ldr	r3, [pc, #232]	@ (80041f0 <HAL_RCC_OscConfig+0x8ac>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1f0      	bne.n	80040f4 <HAL_RCC_OscConfig+0x7b0>
 8004112:	e068      	b.n	80041e6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004114:	4b36      	ldr	r3, [pc, #216]	@ (80041f0 <HAL_RCC_OscConfig+0x8ac>)
 8004116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004118:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800411a:	4b35      	ldr	r3, [pc, #212]	@ (80041f0 <HAL_RCC_OscConfig+0x8ac>)
 800411c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800411e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004124:	2b01      	cmp	r3, #1
 8004126:	d031      	beq.n	800418c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f003 0203 	and.w	r2, r3, #3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004132:	429a      	cmp	r2, r3
 8004134:	d12a      	bne.n	800418c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	091b      	lsrs	r3, r3, #4
 800413a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004142:	429a      	cmp	r2, r3
 8004144:	d122      	bne.n	800418c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004150:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004152:	429a      	cmp	r2, r3
 8004154:	d11a      	bne.n	800418c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	0a5b      	lsrs	r3, r3, #9
 800415a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004162:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004164:	429a      	cmp	r2, r3
 8004166:	d111      	bne.n	800418c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	0c1b      	lsrs	r3, r3, #16
 800416c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004174:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004176:	429a      	cmp	r2, r3
 8004178:	d108      	bne.n	800418c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	0e1b      	lsrs	r3, r3, #24
 800417e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004186:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004188:	429a      	cmp	r2, r3
 800418a:	d001      	beq.n	8004190 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e02b      	b.n	80041e8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004190:	4b17      	ldr	r3, [pc, #92]	@ (80041f0 <HAL_RCC_OscConfig+0x8ac>)
 8004192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004194:	08db      	lsrs	r3, r3, #3
 8004196:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800419a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d01f      	beq.n	80041e6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80041a6:	4b12      	ldr	r3, [pc, #72]	@ (80041f0 <HAL_RCC_OscConfig+0x8ac>)
 80041a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041aa:	4a11      	ldr	r2, [pc, #68]	@ (80041f0 <HAL_RCC_OscConfig+0x8ac>)
 80041ac:	f023 0301 	bic.w	r3, r3, #1
 80041b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80041b2:	f7fe fbe7 	bl	8002984 <HAL_GetTick>
 80041b6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80041b8:	bf00      	nop
 80041ba:	f7fe fbe3 	bl	8002984 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d0f9      	beq.n	80041ba <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80041c6:	4b0a      	ldr	r3, [pc, #40]	@ (80041f0 <HAL_RCC_OscConfig+0x8ac>)
 80041c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041ca:	4b0a      	ldr	r3, [pc, #40]	@ (80041f4 <HAL_RCC_OscConfig+0x8b0>)
 80041cc:	4013      	ands	r3, r2
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80041d2:	00d2      	lsls	r2, r2, #3
 80041d4:	4906      	ldr	r1, [pc, #24]	@ (80041f0 <HAL_RCC_OscConfig+0x8ac>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80041da:	4b05      	ldr	r3, [pc, #20]	@ (80041f0 <HAL_RCC_OscConfig+0x8ac>)
 80041dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041de:	4a04      	ldr	r2, [pc, #16]	@ (80041f0 <HAL_RCC_OscConfig+0x8ac>)
 80041e0:	f043 0301 	orr.w	r3, r3, #1
 80041e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3730      	adds	r7, #48	@ 0x30
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	58024400 	.word	0x58024400
 80041f4:	ffff0007 	.word	0xffff0007

080041f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e19c      	b.n	8004546 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800420c:	4b8a      	ldr	r3, [pc, #552]	@ (8004438 <HAL_RCC_ClockConfig+0x240>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 030f 	and.w	r3, r3, #15
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	429a      	cmp	r2, r3
 8004218:	d910      	bls.n	800423c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800421a:	4b87      	ldr	r3, [pc, #540]	@ (8004438 <HAL_RCC_ClockConfig+0x240>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f023 020f 	bic.w	r2, r3, #15
 8004222:	4985      	ldr	r1, [pc, #532]	@ (8004438 <HAL_RCC_ClockConfig+0x240>)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	4313      	orrs	r3, r2
 8004228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800422a:	4b83      	ldr	r3, [pc, #524]	@ (8004438 <HAL_RCC_ClockConfig+0x240>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 030f 	and.w	r3, r3, #15
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	429a      	cmp	r2, r3
 8004236:	d001      	beq.n	800423c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e184      	b.n	8004546 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	d010      	beq.n	800426a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691a      	ldr	r2, [r3, #16]
 800424c:	4b7b      	ldr	r3, [pc, #492]	@ (800443c <HAL_RCC_ClockConfig+0x244>)
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004254:	429a      	cmp	r2, r3
 8004256:	d908      	bls.n	800426a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004258:	4b78      	ldr	r3, [pc, #480]	@ (800443c <HAL_RCC_ClockConfig+0x244>)
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	4975      	ldr	r1, [pc, #468]	@ (800443c <HAL_RCC_ClockConfig+0x244>)
 8004266:	4313      	orrs	r3, r2
 8004268:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0308 	and.w	r3, r3, #8
 8004272:	2b00      	cmp	r3, #0
 8004274:	d010      	beq.n	8004298 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	695a      	ldr	r2, [r3, #20]
 800427a:	4b70      	ldr	r3, [pc, #448]	@ (800443c <HAL_RCC_ClockConfig+0x244>)
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004282:	429a      	cmp	r2, r3
 8004284:	d908      	bls.n	8004298 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004286:	4b6d      	ldr	r3, [pc, #436]	@ (800443c <HAL_RCC_ClockConfig+0x244>)
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	496a      	ldr	r1, [pc, #424]	@ (800443c <HAL_RCC_ClockConfig+0x244>)
 8004294:	4313      	orrs	r3, r2
 8004296:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0310 	and.w	r3, r3, #16
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d010      	beq.n	80042c6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	699a      	ldr	r2, [r3, #24]
 80042a8:	4b64      	ldr	r3, [pc, #400]	@ (800443c <HAL_RCC_ClockConfig+0x244>)
 80042aa:	69db      	ldr	r3, [r3, #28]
 80042ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d908      	bls.n	80042c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80042b4:	4b61      	ldr	r3, [pc, #388]	@ (800443c <HAL_RCC_ClockConfig+0x244>)
 80042b6:	69db      	ldr	r3, [r3, #28]
 80042b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	495e      	ldr	r1, [pc, #376]	@ (800443c <HAL_RCC_ClockConfig+0x244>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0320 	and.w	r3, r3, #32
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d010      	beq.n	80042f4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	69da      	ldr	r2, [r3, #28]
 80042d6:	4b59      	ldr	r3, [pc, #356]	@ (800443c <HAL_RCC_ClockConfig+0x244>)
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042de:	429a      	cmp	r2, r3
 80042e0:	d908      	bls.n	80042f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80042e2:	4b56      	ldr	r3, [pc, #344]	@ (800443c <HAL_RCC_ClockConfig+0x244>)
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	4953      	ldr	r1, [pc, #332]	@ (800443c <HAL_RCC_ClockConfig+0x244>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d010      	beq.n	8004322 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68da      	ldr	r2, [r3, #12]
 8004304:	4b4d      	ldr	r3, [pc, #308]	@ (800443c <HAL_RCC_ClockConfig+0x244>)
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	f003 030f 	and.w	r3, r3, #15
 800430c:	429a      	cmp	r2, r3
 800430e:	d908      	bls.n	8004322 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004310:	4b4a      	ldr	r3, [pc, #296]	@ (800443c <HAL_RCC_ClockConfig+0x244>)
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	f023 020f 	bic.w	r2, r3, #15
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	4947      	ldr	r1, [pc, #284]	@ (800443c <HAL_RCC_ClockConfig+0x244>)
 800431e:	4313      	orrs	r3, r2
 8004320:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d055      	beq.n	80043da <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800432e:	4b43      	ldr	r3, [pc, #268]	@ (800443c <HAL_RCC_ClockConfig+0x244>)
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	4940      	ldr	r1, [pc, #256]	@ (800443c <HAL_RCC_ClockConfig+0x244>)
 800433c:	4313      	orrs	r3, r2
 800433e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	2b02      	cmp	r3, #2
 8004346:	d107      	bne.n	8004358 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004348:	4b3c      	ldr	r3, [pc, #240]	@ (800443c <HAL_RCC_ClockConfig+0x244>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d121      	bne.n	8004398 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e0f6      	b.n	8004546 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2b03      	cmp	r3, #3
 800435e:	d107      	bne.n	8004370 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004360:	4b36      	ldr	r3, [pc, #216]	@ (800443c <HAL_RCC_ClockConfig+0x244>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d115      	bne.n	8004398 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e0ea      	b.n	8004546 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d107      	bne.n	8004388 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004378:	4b30      	ldr	r3, [pc, #192]	@ (800443c <HAL_RCC_ClockConfig+0x244>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004380:	2b00      	cmp	r3, #0
 8004382:	d109      	bne.n	8004398 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e0de      	b.n	8004546 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004388:	4b2c      	ldr	r3, [pc, #176]	@ (800443c <HAL_RCC_ClockConfig+0x244>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e0d6      	b.n	8004546 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004398:	4b28      	ldr	r3, [pc, #160]	@ (800443c <HAL_RCC_ClockConfig+0x244>)
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	f023 0207 	bic.w	r2, r3, #7
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	4925      	ldr	r1, [pc, #148]	@ (800443c <HAL_RCC_ClockConfig+0x244>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043aa:	f7fe faeb 	bl	8002984 <HAL_GetTick>
 80043ae:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043b0:	e00a      	b.n	80043c8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043b2:	f7fe fae7 	bl	8002984 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d901      	bls.n	80043c8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e0be      	b.n	8004546 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043c8:	4b1c      	ldr	r3, [pc, #112]	@ (800443c <HAL_RCC_ClockConfig+0x244>)
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	00db      	lsls	r3, r3, #3
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d1eb      	bne.n	80043b2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d010      	beq.n	8004408 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68da      	ldr	r2, [r3, #12]
 80043ea:	4b14      	ldr	r3, [pc, #80]	@ (800443c <HAL_RCC_ClockConfig+0x244>)
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	f003 030f 	and.w	r3, r3, #15
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d208      	bcs.n	8004408 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043f6:	4b11      	ldr	r3, [pc, #68]	@ (800443c <HAL_RCC_ClockConfig+0x244>)
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	f023 020f 	bic.w	r2, r3, #15
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	490e      	ldr	r1, [pc, #56]	@ (800443c <HAL_RCC_ClockConfig+0x244>)
 8004404:	4313      	orrs	r3, r2
 8004406:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004408:	4b0b      	ldr	r3, [pc, #44]	@ (8004438 <HAL_RCC_ClockConfig+0x240>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 030f 	and.w	r3, r3, #15
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	429a      	cmp	r2, r3
 8004414:	d214      	bcs.n	8004440 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004416:	4b08      	ldr	r3, [pc, #32]	@ (8004438 <HAL_RCC_ClockConfig+0x240>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f023 020f 	bic.w	r2, r3, #15
 800441e:	4906      	ldr	r1, [pc, #24]	@ (8004438 <HAL_RCC_ClockConfig+0x240>)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	4313      	orrs	r3, r2
 8004424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004426:	4b04      	ldr	r3, [pc, #16]	@ (8004438 <HAL_RCC_ClockConfig+0x240>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 030f 	and.w	r3, r3, #15
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	429a      	cmp	r2, r3
 8004432:	d005      	beq.n	8004440 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e086      	b.n	8004546 <HAL_RCC_ClockConfig+0x34e>
 8004438:	52002000 	.word	0x52002000
 800443c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b00      	cmp	r3, #0
 800444a:	d010      	beq.n	800446e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	691a      	ldr	r2, [r3, #16]
 8004450:	4b3f      	ldr	r3, [pc, #252]	@ (8004550 <HAL_RCC_ClockConfig+0x358>)
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004458:	429a      	cmp	r2, r3
 800445a:	d208      	bcs.n	800446e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800445c:	4b3c      	ldr	r3, [pc, #240]	@ (8004550 <HAL_RCC_ClockConfig+0x358>)
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	4939      	ldr	r1, [pc, #228]	@ (8004550 <HAL_RCC_ClockConfig+0x358>)
 800446a:	4313      	orrs	r3, r2
 800446c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0308 	and.w	r3, r3, #8
 8004476:	2b00      	cmp	r3, #0
 8004478:	d010      	beq.n	800449c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	695a      	ldr	r2, [r3, #20]
 800447e:	4b34      	ldr	r3, [pc, #208]	@ (8004550 <HAL_RCC_ClockConfig+0x358>)
 8004480:	69db      	ldr	r3, [r3, #28]
 8004482:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004486:	429a      	cmp	r2, r3
 8004488:	d208      	bcs.n	800449c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800448a:	4b31      	ldr	r3, [pc, #196]	@ (8004550 <HAL_RCC_ClockConfig+0x358>)
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	492e      	ldr	r1, [pc, #184]	@ (8004550 <HAL_RCC_ClockConfig+0x358>)
 8004498:	4313      	orrs	r3, r2
 800449a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0310 	and.w	r3, r3, #16
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d010      	beq.n	80044ca <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	699a      	ldr	r2, [r3, #24]
 80044ac:	4b28      	ldr	r3, [pc, #160]	@ (8004550 <HAL_RCC_ClockConfig+0x358>)
 80044ae:	69db      	ldr	r3, [r3, #28]
 80044b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d208      	bcs.n	80044ca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80044b8:	4b25      	ldr	r3, [pc, #148]	@ (8004550 <HAL_RCC_ClockConfig+0x358>)
 80044ba:	69db      	ldr	r3, [r3, #28]
 80044bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	4922      	ldr	r1, [pc, #136]	@ (8004550 <HAL_RCC_ClockConfig+0x358>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0320 	and.w	r3, r3, #32
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d010      	beq.n	80044f8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69da      	ldr	r2, [r3, #28]
 80044da:	4b1d      	ldr	r3, [pc, #116]	@ (8004550 <HAL_RCC_ClockConfig+0x358>)
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d208      	bcs.n	80044f8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80044e6:	4b1a      	ldr	r3, [pc, #104]	@ (8004550 <HAL_RCC_ClockConfig+0x358>)
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	4917      	ldr	r1, [pc, #92]	@ (8004550 <HAL_RCC_ClockConfig+0x358>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80044f8:	f000 f834 	bl	8004564 <HAL_RCC_GetSysClockFreq>
 80044fc:	4602      	mov	r2, r0
 80044fe:	4b14      	ldr	r3, [pc, #80]	@ (8004550 <HAL_RCC_ClockConfig+0x358>)
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	0a1b      	lsrs	r3, r3, #8
 8004504:	f003 030f 	and.w	r3, r3, #15
 8004508:	4912      	ldr	r1, [pc, #72]	@ (8004554 <HAL_RCC_ClockConfig+0x35c>)
 800450a:	5ccb      	ldrb	r3, [r1, r3]
 800450c:	f003 031f 	and.w	r3, r3, #31
 8004510:	fa22 f303 	lsr.w	r3, r2, r3
 8004514:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004516:	4b0e      	ldr	r3, [pc, #56]	@ (8004550 <HAL_RCC_ClockConfig+0x358>)
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	f003 030f 	and.w	r3, r3, #15
 800451e:	4a0d      	ldr	r2, [pc, #52]	@ (8004554 <HAL_RCC_ClockConfig+0x35c>)
 8004520:	5cd3      	ldrb	r3, [r2, r3]
 8004522:	f003 031f 	and.w	r3, r3, #31
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	fa22 f303 	lsr.w	r3, r2, r3
 800452c:	4a0a      	ldr	r2, [pc, #40]	@ (8004558 <HAL_RCC_ClockConfig+0x360>)
 800452e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004530:	4a0a      	ldr	r2, [pc, #40]	@ (800455c <HAL_RCC_ClockConfig+0x364>)
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004536:	4b0a      	ldr	r3, [pc, #40]	@ (8004560 <HAL_RCC_ClockConfig+0x368>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4618      	mov	r0, r3
 800453c:	f7fe f9d8 	bl	80028f0 <HAL_InitTick>
 8004540:	4603      	mov	r3, r0
 8004542:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004544:	7bfb      	ldrb	r3, [r7, #15]
}
 8004546:	4618      	mov	r0, r3
 8004548:	3718      	adds	r7, #24
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	58024400 	.word	0x58024400
 8004554:	0800b9a8 	.word	0x0800b9a8
 8004558:	24000004 	.word	0x24000004
 800455c:	24000000 	.word	0x24000000
 8004560:	24000024 	.word	0x24000024

08004564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004564:	b480      	push	{r7}
 8004566:	b089      	sub	sp, #36	@ 0x24
 8004568:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800456a:	4bb3      	ldr	r3, [pc, #716]	@ (8004838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004572:	2b18      	cmp	r3, #24
 8004574:	f200 8155 	bhi.w	8004822 <HAL_RCC_GetSysClockFreq+0x2be>
 8004578:	a201      	add	r2, pc, #4	@ (adr r2, 8004580 <HAL_RCC_GetSysClockFreq+0x1c>)
 800457a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800457e:	bf00      	nop
 8004580:	080045e5 	.word	0x080045e5
 8004584:	08004823 	.word	0x08004823
 8004588:	08004823 	.word	0x08004823
 800458c:	08004823 	.word	0x08004823
 8004590:	08004823 	.word	0x08004823
 8004594:	08004823 	.word	0x08004823
 8004598:	08004823 	.word	0x08004823
 800459c:	08004823 	.word	0x08004823
 80045a0:	0800460b 	.word	0x0800460b
 80045a4:	08004823 	.word	0x08004823
 80045a8:	08004823 	.word	0x08004823
 80045ac:	08004823 	.word	0x08004823
 80045b0:	08004823 	.word	0x08004823
 80045b4:	08004823 	.word	0x08004823
 80045b8:	08004823 	.word	0x08004823
 80045bc:	08004823 	.word	0x08004823
 80045c0:	08004611 	.word	0x08004611
 80045c4:	08004823 	.word	0x08004823
 80045c8:	08004823 	.word	0x08004823
 80045cc:	08004823 	.word	0x08004823
 80045d0:	08004823 	.word	0x08004823
 80045d4:	08004823 	.word	0x08004823
 80045d8:	08004823 	.word	0x08004823
 80045dc:	08004823 	.word	0x08004823
 80045e0:	08004617 	.word	0x08004617
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045e4:	4b94      	ldr	r3, [pc, #592]	@ (8004838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0320 	and.w	r3, r3, #32
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d009      	beq.n	8004604 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80045f0:	4b91      	ldr	r3, [pc, #580]	@ (8004838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	08db      	lsrs	r3, r3, #3
 80045f6:	f003 0303 	and.w	r3, r3, #3
 80045fa:	4a90      	ldr	r2, [pc, #576]	@ (800483c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80045fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004600:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004602:	e111      	b.n	8004828 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004604:	4b8d      	ldr	r3, [pc, #564]	@ (800483c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004606:	61bb      	str	r3, [r7, #24]
      break;
 8004608:	e10e      	b.n	8004828 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800460a:	4b8d      	ldr	r3, [pc, #564]	@ (8004840 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800460c:	61bb      	str	r3, [r7, #24]
      break;
 800460e:	e10b      	b.n	8004828 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004610:	4b8c      	ldr	r3, [pc, #560]	@ (8004844 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004612:	61bb      	str	r3, [r7, #24]
      break;
 8004614:	e108      	b.n	8004828 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004616:	4b88      	ldr	r3, [pc, #544]	@ (8004838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800461a:	f003 0303 	and.w	r3, r3, #3
 800461e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004620:	4b85      	ldr	r3, [pc, #532]	@ (8004838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004624:	091b      	lsrs	r3, r3, #4
 8004626:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800462a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800462c:	4b82      	ldr	r3, [pc, #520]	@ (8004838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800462e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004636:	4b80      	ldr	r3, [pc, #512]	@ (8004838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800463a:	08db      	lsrs	r3, r3, #3
 800463c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	fb02 f303 	mul.w	r3, r2, r3
 8004646:	ee07 3a90 	vmov	s15, r3
 800464a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800464e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 80e1 	beq.w	800481c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	2b02      	cmp	r3, #2
 800465e:	f000 8083 	beq.w	8004768 <HAL_RCC_GetSysClockFreq+0x204>
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	2b02      	cmp	r3, #2
 8004666:	f200 80a1 	bhi.w	80047ac <HAL_RCC_GetSysClockFreq+0x248>
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d003      	beq.n	8004678 <HAL_RCC_GetSysClockFreq+0x114>
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d056      	beq.n	8004724 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004676:	e099      	b.n	80047ac <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004678:	4b6f      	ldr	r3, [pc, #444]	@ (8004838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0320 	and.w	r3, r3, #32
 8004680:	2b00      	cmp	r3, #0
 8004682:	d02d      	beq.n	80046e0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004684:	4b6c      	ldr	r3, [pc, #432]	@ (8004838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	08db      	lsrs	r3, r3, #3
 800468a:	f003 0303 	and.w	r3, r3, #3
 800468e:	4a6b      	ldr	r2, [pc, #428]	@ (800483c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004690:	fa22 f303 	lsr.w	r3, r2, r3
 8004694:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	ee07 3a90 	vmov	s15, r3
 800469c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	ee07 3a90 	vmov	s15, r3
 80046a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ae:	4b62      	ldr	r3, [pc, #392]	@ (8004838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046b6:	ee07 3a90 	vmov	s15, r3
 80046ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046be:	ed97 6a02 	vldr	s12, [r7, #8]
 80046c2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004848 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046da:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80046de:	e087      	b.n	80047f0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	ee07 3a90 	vmov	s15, r3
 80046e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ea:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800484c <HAL_RCC_GetSysClockFreq+0x2e8>
 80046ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046f2:	4b51      	ldr	r3, [pc, #324]	@ (8004838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046fa:	ee07 3a90 	vmov	s15, r3
 80046fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004702:	ed97 6a02 	vldr	s12, [r7, #8]
 8004706:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004848 <HAL_RCC_GetSysClockFreq+0x2e4>
 800470a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800470e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004712:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800471a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800471e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004722:	e065      	b.n	80047f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	ee07 3a90 	vmov	s15, r3
 800472a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800472e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004850 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004736:	4b40      	ldr	r3, [pc, #256]	@ (8004838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800473a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800473e:	ee07 3a90 	vmov	s15, r3
 8004742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004746:	ed97 6a02 	vldr	s12, [r7, #8]
 800474a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004848 <HAL_RCC_GetSysClockFreq+0x2e4>
 800474e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004756:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800475a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800475e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004762:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004766:	e043      	b.n	80047f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	ee07 3a90 	vmov	s15, r3
 800476e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004772:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004854 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800477a:	4b2f      	ldr	r3, [pc, #188]	@ (8004838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800477c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800477e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004782:	ee07 3a90 	vmov	s15, r3
 8004786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800478a:	ed97 6a02 	vldr	s12, [r7, #8]
 800478e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004848 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800479a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800479e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80047aa:	e021      	b.n	80047f0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	ee07 3a90 	vmov	s15, r3
 80047b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047b6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004850 <HAL_RCC_GetSysClockFreq+0x2ec>
 80047ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047be:	4b1e      	ldr	r3, [pc, #120]	@ (8004838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c6:	ee07 3a90 	vmov	s15, r3
 80047ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80047d2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004848 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80047ee:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80047f0:	4b11      	ldr	r3, [pc, #68]	@ (8004838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f4:	0a5b      	lsrs	r3, r3, #9
 80047f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047fa:	3301      	adds	r3, #1
 80047fc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	ee07 3a90 	vmov	s15, r3
 8004804:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004808:	edd7 6a07 	vldr	s13, [r7, #28]
 800480c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004810:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004814:	ee17 3a90 	vmov	r3, s15
 8004818:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800481a:	e005      	b.n	8004828 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800481c:	2300      	movs	r3, #0
 800481e:	61bb      	str	r3, [r7, #24]
      break;
 8004820:	e002      	b.n	8004828 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004822:	4b07      	ldr	r3, [pc, #28]	@ (8004840 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004824:	61bb      	str	r3, [r7, #24]
      break;
 8004826:	bf00      	nop
  }

  return sysclockfreq;
 8004828:	69bb      	ldr	r3, [r7, #24]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3724      	adds	r7, #36	@ 0x24
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	58024400 	.word	0x58024400
 800483c:	03d09000 	.word	0x03d09000
 8004840:	003d0900 	.word	0x003d0900
 8004844:	017d7840 	.word	0x017d7840
 8004848:	46000000 	.word	0x46000000
 800484c:	4c742400 	.word	0x4c742400
 8004850:	4a742400 	.word	0x4a742400
 8004854:	4bbebc20 	.word	0x4bbebc20

08004858 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800485e:	f7ff fe81 	bl	8004564 <HAL_RCC_GetSysClockFreq>
 8004862:	4602      	mov	r2, r0
 8004864:	4b10      	ldr	r3, [pc, #64]	@ (80048a8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	0a1b      	lsrs	r3, r3, #8
 800486a:	f003 030f 	and.w	r3, r3, #15
 800486e:	490f      	ldr	r1, [pc, #60]	@ (80048ac <HAL_RCC_GetHCLKFreq+0x54>)
 8004870:	5ccb      	ldrb	r3, [r1, r3]
 8004872:	f003 031f 	and.w	r3, r3, #31
 8004876:	fa22 f303 	lsr.w	r3, r2, r3
 800487a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800487c:	4b0a      	ldr	r3, [pc, #40]	@ (80048a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	f003 030f 	and.w	r3, r3, #15
 8004884:	4a09      	ldr	r2, [pc, #36]	@ (80048ac <HAL_RCC_GetHCLKFreq+0x54>)
 8004886:	5cd3      	ldrb	r3, [r2, r3]
 8004888:	f003 031f 	and.w	r3, r3, #31
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	fa22 f303 	lsr.w	r3, r2, r3
 8004892:	4a07      	ldr	r2, [pc, #28]	@ (80048b0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004894:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004896:	4a07      	ldr	r2, [pc, #28]	@ (80048b4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800489c:	4b04      	ldr	r3, [pc, #16]	@ (80048b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800489e:	681b      	ldr	r3, [r3, #0]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	58024400 	.word	0x58024400
 80048ac:	0800b9a8 	.word	0x0800b9a8
 80048b0:	24000004 	.word	0x24000004
 80048b4:	24000000 	.word	0x24000000

080048b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80048bc:	f7ff ffcc 	bl	8004858 <HAL_RCC_GetHCLKFreq>
 80048c0:	4602      	mov	r2, r0
 80048c2:	4b06      	ldr	r3, [pc, #24]	@ (80048dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	091b      	lsrs	r3, r3, #4
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	4904      	ldr	r1, [pc, #16]	@ (80048e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80048ce:	5ccb      	ldrb	r3, [r1, r3]
 80048d0:	f003 031f 	and.w	r3, r3, #31
 80048d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80048d8:	4618      	mov	r0, r3
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	58024400 	.word	0x58024400
 80048e0:	0800b9a8 	.word	0x0800b9a8

080048e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80048e8:	f7ff ffb6 	bl	8004858 <HAL_RCC_GetHCLKFreq>
 80048ec:	4602      	mov	r2, r0
 80048ee:	4b06      	ldr	r3, [pc, #24]	@ (8004908 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	0a1b      	lsrs	r3, r3, #8
 80048f4:	f003 0307 	and.w	r3, r3, #7
 80048f8:	4904      	ldr	r1, [pc, #16]	@ (800490c <HAL_RCC_GetPCLK2Freq+0x28>)
 80048fa:	5ccb      	ldrb	r3, [r1, r3]
 80048fc:	f003 031f 	and.w	r3, r3, #31
 8004900:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004904:	4618      	mov	r0, r3
 8004906:	bd80      	pop	{r7, pc}
 8004908:	58024400 	.word	0x58024400
 800490c:	0800b9a8 	.word	0x0800b9a8

08004910 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004914:	b0ca      	sub	sp, #296	@ 0x128
 8004916:	af00      	add	r7, sp, #0
 8004918:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800491c:	2300      	movs	r3, #0
 800491e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004922:	2300      	movs	r3, #0
 8004924:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800492c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004930:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004934:	2500      	movs	r5, #0
 8004936:	ea54 0305 	orrs.w	r3, r4, r5
 800493a:	d049      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800493c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004940:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004942:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004946:	d02f      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004948:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800494c:	d828      	bhi.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800494e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004952:	d01a      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004954:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004958:	d822      	bhi.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800495e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004962:	d007      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004964:	e01c      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004966:	4bb8      	ldr	r3, [pc, #736]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800496a:	4ab7      	ldr	r2, [pc, #732]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800496c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004970:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004972:	e01a      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004978:	3308      	adds	r3, #8
 800497a:	2102      	movs	r1, #2
 800497c:	4618      	mov	r0, r3
 800497e:	f001 fc8f 	bl	80062a0 <RCCEx_PLL2_Config>
 8004982:	4603      	mov	r3, r0
 8004984:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004988:	e00f      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800498a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800498e:	3328      	adds	r3, #40	@ 0x28
 8004990:	2102      	movs	r1, #2
 8004992:	4618      	mov	r0, r3
 8004994:	f001 fd36 	bl	8006404 <RCCEx_PLL3_Config>
 8004998:	4603      	mov	r3, r0
 800499a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800499e:	e004      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049a6:	e000      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80049a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10a      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80049b2:	4ba5      	ldr	r3, [pc, #660]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049b6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80049ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049c0:	4aa1      	ldr	r2, [pc, #644]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049c2:	430b      	orrs	r3, r1
 80049c4:	6513      	str	r3, [r2, #80]	@ 0x50
 80049c6:	e003      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80049d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80049dc:	f04f 0900 	mov.w	r9, #0
 80049e0:	ea58 0309 	orrs.w	r3, r8, r9
 80049e4:	d047      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80049e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ec:	2b04      	cmp	r3, #4
 80049ee:	d82a      	bhi.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80049f0:	a201      	add	r2, pc, #4	@ (adr r2, 80049f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80049f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f6:	bf00      	nop
 80049f8:	08004a0d 	.word	0x08004a0d
 80049fc:	08004a1b 	.word	0x08004a1b
 8004a00:	08004a31 	.word	0x08004a31
 8004a04:	08004a4f 	.word	0x08004a4f
 8004a08:	08004a4f 	.word	0x08004a4f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a0c:	4b8e      	ldr	r3, [pc, #568]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a10:	4a8d      	ldr	r2, [pc, #564]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a18:	e01a      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a1e:	3308      	adds	r3, #8
 8004a20:	2100      	movs	r1, #0
 8004a22:	4618      	mov	r0, r3
 8004a24:	f001 fc3c 	bl	80062a0 <RCCEx_PLL2_Config>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a2e:	e00f      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a34:	3328      	adds	r3, #40	@ 0x28
 8004a36:	2100      	movs	r1, #0
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f001 fce3 	bl	8006404 <RCCEx_PLL3_Config>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a44:	e004      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a4c:	e000      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004a4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10a      	bne.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a58:	4b7b      	ldr	r3, [pc, #492]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a5c:	f023 0107 	bic.w	r1, r3, #7
 8004a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a66:	4a78      	ldr	r2, [pc, #480]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a68:	430b      	orrs	r3, r1
 8004a6a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a6c:	e003      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004a82:	f04f 0b00 	mov.w	fp, #0
 8004a86:	ea5a 030b 	orrs.w	r3, sl, fp
 8004a8a:	d04c      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a96:	d030      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004a98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a9c:	d829      	bhi.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004a9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004aa0:	d02d      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004aa2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004aa4:	d825      	bhi.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004aa6:	2b80      	cmp	r3, #128	@ 0x80
 8004aa8:	d018      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004aaa:	2b80      	cmp	r3, #128	@ 0x80
 8004aac:	d821      	bhi.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d002      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004ab2:	2b40      	cmp	r3, #64	@ 0x40
 8004ab4:	d007      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004ab6:	e01c      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ab8:	4b63      	ldr	r3, [pc, #396]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004abc:	4a62      	ldr	r2, [pc, #392]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004abe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ac2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004ac4:	e01c      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aca:	3308      	adds	r3, #8
 8004acc:	2100      	movs	r1, #0
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f001 fbe6 	bl	80062a0 <RCCEx_PLL2_Config>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004ada:	e011      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ae0:	3328      	adds	r3, #40	@ 0x28
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f001 fc8d 	bl	8006404 <RCCEx_PLL3_Config>
 8004aea:	4603      	mov	r3, r0
 8004aec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004af0:	e006      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004af8:	e002      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004afa:	bf00      	nop
 8004afc:	e000      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004afe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10a      	bne.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004b08:	4b4f      	ldr	r3, [pc, #316]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b0c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b16:	4a4c      	ldr	r2, [pc, #304]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b18:	430b      	orrs	r3, r1
 8004b1a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b1c:	e003      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004b32:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004b36:	2300      	movs	r3, #0
 8004b38:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004b3c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004b40:	460b      	mov	r3, r1
 8004b42:	4313      	orrs	r3, r2
 8004b44:	d053      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b4a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004b4e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004b52:	d035      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004b54:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004b58:	d82e      	bhi.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004b5a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004b5e:	d031      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004b60:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004b64:	d828      	bhi.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004b66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b6a:	d01a      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004b6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b70:	d822      	bhi.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004b76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b7a:	d007      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004b7c:	e01c      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b7e:	4b32      	ldr	r3, [pc, #200]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b82:	4a31      	ldr	r2, [pc, #196]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b8a:	e01c      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b90:	3308      	adds	r3, #8
 8004b92:	2100      	movs	r1, #0
 8004b94:	4618      	mov	r0, r3
 8004b96:	f001 fb83 	bl	80062a0 <RCCEx_PLL2_Config>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004ba0:	e011      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ba6:	3328      	adds	r3, #40	@ 0x28
 8004ba8:	2100      	movs	r1, #0
 8004baa:	4618      	mov	r0, r3
 8004bac:	f001 fc2a 	bl	8006404 <RCCEx_PLL3_Config>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004bb6:	e006      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004bbe:	e002      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004bc0:	bf00      	nop
 8004bc2:	e000      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004bc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10b      	bne.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004bce:	4b1e      	ldr	r3, [pc, #120]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bd2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bda:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004bde:	4a1a      	ldr	r2, [pc, #104]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004be0:	430b      	orrs	r3, r1
 8004be2:	6593      	str	r3, [r2, #88]	@ 0x58
 8004be4:	e003      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004bfa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004bfe:	2300      	movs	r3, #0
 8004c00:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004c04:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004c08:	460b      	mov	r3, r1
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	d056      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c12:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004c16:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c1a:	d038      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004c1c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c20:	d831      	bhi.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004c22:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004c26:	d034      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004c28:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004c2c:	d82b      	bhi.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004c2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c32:	d01d      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004c34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c38:	d825      	bhi.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d006      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004c3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c42:	d00a      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004c44:	e01f      	b.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004c46:	bf00      	nop
 8004c48:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c4c:	4ba2      	ldr	r3, [pc, #648]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c50:	4aa1      	ldr	r2, [pc, #644]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c58:	e01c      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c5e:	3308      	adds	r3, #8
 8004c60:	2100      	movs	r1, #0
 8004c62:	4618      	mov	r0, r3
 8004c64:	f001 fb1c 	bl	80062a0 <RCCEx_PLL2_Config>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004c6e:	e011      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c74:	3328      	adds	r3, #40	@ 0x28
 8004c76:	2100      	movs	r1, #0
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f001 fbc3 	bl	8006404 <RCCEx_PLL3_Config>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c84:	e006      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c8c:	e002      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004c8e:	bf00      	nop
 8004c90:	e000      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004c92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10b      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004c9c:	4b8e      	ldr	r3, [pc, #568]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ca0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ca8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004cac:	4a8a      	ldr	r2, [pc, #552]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004cae:	430b      	orrs	r3, r1
 8004cb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cb2:	e003      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004cc8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004ccc:	2300      	movs	r3, #0
 8004cce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004cd2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	d03a      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ce2:	2b30      	cmp	r3, #48	@ 0x30
 8004ce4:	d01f      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004ce6:	2b30      	cmp	r3, #48	@ 0x30
 8004ce8:	d819      	bhi.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004cea:	2b20      	cmp	r3, #32
 8004cec:	d00c      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004cee:	2b20      	cmp	r3, #32
 8004cf0:	d815      	bhi.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d019      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004cf6:	2b10      	cmp	r3, #16
 8004cf8:	d111      	bne.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cfa:	4b77      	ldr	r3, [pc, #476]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfe:	4a76      	ldr	r2, [pc, #472]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004d06:	e011      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d0c:	3308      	adds	r3, #8
 8004d0e:	2102      	movs	r1, #2
 8004d10:	4618      	mov	r0, r3
 8004d12:	f001 fac5 	bl	80062a0 <RCCEx_PLL2_Config>
 8004d16:	4603      	mov	r3, r0
 8004d18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004d1c:	e006      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d24:	e002      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004d26:	bf00      	nop
 8004d28:	e000      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004d2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10a      	bne.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004d34:	4b68      	ldr	r3, [pc, #416]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d38:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d42:	4a65      	ldr	r2, [pc, #404]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d44:	430b      	orrs	r3, r1
 8004d46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d48:	e003      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004d5e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004d62:	2300      	movs	r3, #0
 8004d64:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004d68:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	d051      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d7c:	d035      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004d7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d82:	d82e      	bhi.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004d84:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d88:	d031      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004d8a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d8e:	d828      	bhi.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004d90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d94:	d01a      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004d96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d9a:	d822      	bhi.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d003      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004da0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004da4:	d007      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004da6:	e01c      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004da8:	4b4b      	ldr	r3, [pc, #300]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dac:	4a4a      	ldr	r2, [pc, #296]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004dae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004db2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004db4:	e01c      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dba:	3308      	adds	r3, #8
 8004dbc:	2100      	movs	r1, #0
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f001 fa6e 	bl	80062a0 <RCCEx_PLL2_Config>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004dca:	e011      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dd0:	3328      	adds	r3, #40	@ 0x28
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f001 fb15 	bl	8006404 <RCCEx_PLL3_Config>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004de0:	e006      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004de8:	e002      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004dea:	bf00      	nop
 8004dec:	e000      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004dee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004df0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10a      	bne.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004df8:	4b37      	ldr	r3, [pc, #220]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004dfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dfc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e06:	4a34      	ldr	r2, [pc, #208]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e08:	430b      	orrs	r3, r1
 8004e0a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e0c:	e003      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004e22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e26:	2300      	movs	r3, #0
 8004e28:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004e2c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004e30:	460b      	mov	r3, r1
 8004e32:	4313      	orrs	r3, r2
 8004e34:	d056      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e40:	d033      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004e42:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e46:	d82c      	bhi.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004e48:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e4c:	d02f      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004e4e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e52:	d826      	bhi.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004e54:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e58:	d02b      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004e5a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e5e:	d820      	bhi.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004e60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e64:	d012      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004e66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e6a:	d81a      	bhi.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d022      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004e70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e74:	d115      	bne.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e7a:	3308      	adds	r3, #8
 8004e7c:	2101      	movs	r1, #1
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f001 fa0e 	bl	80062a0 <RCCEx_PLL2_Config>
 8004e84:	4603      	mov	r3, r0
 8004e86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004e8a:	e015      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e90:	3328      	adds	r3, #40	@ 0x28
 8004e92:	2101      	movs	r1, #1
 8004e94:	4618      	mov	r0, r3
 8004e96:	f001 fab5 	bl	8006404 <RCCEx_PLL3_Config>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004ea0:	e00a      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ea8:	e006      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004eaa:	bf00      	nop
 8004eac:	e004      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004eae:	bf00      	nop
 8004eb0:	e002      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004eb2:	bf00      	nop
 8004eb4:	e000      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004eb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10d      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004ec0:	4b05      	ldr	r3, [pc, #20]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ec2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ec4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ecc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ece:	4a02      	ldr	r2, [pc, #8]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ed0:	430b      	orrs	r3, r1
 8004ed2:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ed4:	e006      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004ed6:	bf00      	nop
 8004ed8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004edc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ee0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eec:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004efa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004efe:	460b      	mov	r3, r1
 8004f00:	4313      	orrs	r3, r2
 8004f02:	d055      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004f0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f10:	d033      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004f12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f16:	d82c      	bhi.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004f18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f1c:	d02f      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f22:	d826      	bhi.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004f24:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004f28:	d02b      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004f2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004f2e:	d820      	bhi.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004f30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f34:	d012      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004f36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f3a:	d81a      	bhi.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d022      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004f40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f44:	d115      	bne.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f4a:	3308      	adds	r3, #8
 8004f4c:	2101      	movs	r1, #1
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f001 f9a6 	bl	80062a0 <RCCEx_PLL2_Config>
 8004f54:	4603      	mov	r3, r0
 8004f56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004f5a:	e015      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f60:	3328      	adds	r3, #40	@ 0x28
 8004f62:	2101      	movs	r1, #1
 8004f64:	4618      	mov	r0, r3
 8004f66:	f001 fa4d 	bl	8006404 <RCCEx_PLL3_Config>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004f70:	e00a      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f78:	e006      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004f7a:	bf00      	nop
 8004f7c:	e004      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004f7e:	bf00      	nop
 8004f80:	e002      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004f82:	bf00      	nop
 8004f84:	e000      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004f86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10b      	bne.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004f90:	4ba3      	ldr	r3, [pc, #652]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f94:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004fa0:	4a9f      	ldr	r2, [pc, #636]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fa2:	430b      	orrs	r3, r1
 8004fa4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fa6:	e003      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004fbc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004fc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004fca:	460b      	mov	r3, r1
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	d037      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004fda:	d00e      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004fdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004fe0:	d816      	bhi.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d018      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004fe6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004fea:	d111      	bne.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fec:	4b8c      	ldr	r3, [pc, #560]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff0:	4a8b      	ldr	r2, [pc, #556]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ff2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ff6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004ff8:	e00f      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ffe:	3308      	adds	r3, #8
 8005000:	2101      	movs	r1, #1
 8005002:	4618      	mov	r0, r3
 8005004:	f001 f94c 	bl	80062a0 <RCCEx_PLL2_Config>
 8005008:	4603      	mov	r3, r0
 800500a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800500e:	e004      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005016:	e000      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005018:	bf00      	nop
    }

    if (ret == HAL_OK)
 800501a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10a      	bne.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005022:	4b7f      	ldr	r3, [pc, #508]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005024:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005026:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800502a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800502e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005030:	4a7b      	ldr	r2, [pc, #492]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005032:	430b      	orrs	r3, r1
 8005034:	6513      	str	r3, [r2, #80]	@ 0x50
 8005036:	e003      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005038:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800503c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005048:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800504c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005050:	2300      	movs	r3, #0
 8005052:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005056:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800505a:	460b      	mov	r3, r1
 800505c:	4313      	orrs	r3, r2
 800505e:	d039      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005064:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005066:	2b03      	cmp	r3, #3
 8005068:	d81c      	bhi.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800506a:	a201      	add	r2, pc, #4	@ (adr r2, 8005070 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800506c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005070:	080050ad 	.word	0x080050ad
 8005074:	08005081 	.word	0x08005081
 8005078:	0800508f 	.word	0x0800508f
 800507c:	080050ad 	.word	0x080050ad
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005080:	4b67      	ldr	r3, [pc, #412]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005084:	4a66      	ldr	r2, [pc, #408]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005086:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800508a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800508c:	e00f      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800508e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005092:	3308      	adds	r3, #8
 8005094:	2102      	movs	r1, #2
 8005096:	4618      	mov	r0, r3
 8005098:	f001 f902 	bl	80062a0 <RCCEx_PLL2_Config>
 800509c:	4603      	mov	r3, r0
 800509e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80050a2:	e004      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050aa:	e000      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80050ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10a      	bne.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80050b6:	4b5a      	ldr	r3, [pc, #360]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050ba:	f023 0103 	bic.w	r1, r3, #3
 80050be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050c4:	4a56      	ldr	r2, [pc, #344]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050c6:	430b      	orrs	r3, r1
 80050c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80050ca:	e003      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050dc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80050e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80050e4:	2300      	movs	r3, #0
 80050e6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80050ea:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80050ee:	460b      	mov	r3, r1
 80050f0:	4313      	orrs	r3, r2
 80050f2:	f000 809f 	beq.w	8005234 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050f6:	4b4b      	ldr	r3, [pc, #300]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a4a      	ldr	r2, [pc, #296]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80050fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005100:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005102:	f7fd fc3f 	bl	8002984 <HAL_GetTick>
 8005106:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800510a:	e00b      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800510c:	f7fd fc3a 	bl	8002984 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	2b64      	cmp	r3, #100	@ 0x64
 800511a:	d903      	bls.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005122:	e005      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005124:	4b3f      	ldr	r3, [pc, #252]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800512c:	2b00      	cmp	r3, #0
 800512e:	d0ed      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005130:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005134:	2b00      	cmp	r3, #0
 8005136:	d179      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005138:	4b39      	ldr	r3, [pc, #228]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800513a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800513c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005140:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005144:	4053      	eors	r3, r2
 8005146:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800514a:	2b00      	cmp	r3, #0
 800514c:	d015      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800514e:	4b34      	ldr	r3, [pc, #208]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005152:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005156:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800515a:	4b31      	ldr	r3, [pc, #196]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800515c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800515e:	4a30      	ldr	r2, [pc, #192]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005164:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005166:	4b2e      	ldr	r3, [pc, #184]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800516a:	4a2d      	ldr	r2, [pc, #180]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800516c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005170:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005172:	4a2b      	ldr	r2, [pc, #172]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005174:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005178:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800517a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800517e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005182:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005186:	d118      	bne.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005188:	f7fd fbfc 	bl	8002984 <HAL_GetTick>
 800518c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005190:	e00d      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005192:	f7fd fbf7 	bl	8002984 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800519c:	1ad2      	subs	r2, r2, r3
 800519e:	f241 3388 	movw	r3, #5000	@ 0x1388
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d903      	bls.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80051ac:	e005      	b.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051ae:	4b1c      	ldr	r3, [pc, #112]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d0eb      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80051ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d129      	bne.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80051ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051d2:	d10e      	bne.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80051d4:	4b12      	ldr	r3, [pc, #72]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80051dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80051e4:	091a      	lsrs	r2, r3, #4
 80051e6:	4b10      	ldr	r3, [pc, #64]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80051e8:	4013      	ands	r3, r2
 80051ea:	4a0d      	ldr	r2, [pc, #52]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051ec:	430b      	orrs	r3, r1
 80051ee:	6113      	str	r3, [r2, #16]
 80051f0:	e005      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80051f2:	4b0b      	ldr	r3, [pc, #44]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	4a0a      	ldr	r2, [pc, #40]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051f8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80051fc:	6113      	str	r3, [r2, #16]
 80051fe:	4b08      	ldr	r3, [pc, #32]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005200:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005206:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800520a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800520e:	4a04      	ldr	r2, [pc, #16]	@ (8005220 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005210:	430b      	orrs	r3, r1
 8005212:	6713      	str	r3, [r2, #112]	@ 0x70
 8005214:	e00e      	b.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005216:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800521a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800521e:	e009      	b.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005220:	58024400 	.word	0x58024400
 8005224:	58024800 	.word	0x58024800
 8005228:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800522c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005230:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523c:	f002 0301 	and.w	r3, r2, #1
 8005240:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005244:	2300      	movs	r3, #0
 8005246:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800524a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800524e:	460b      	mov	r3, r1
 8005250:	4313      	orrs	r3, r2
 8005252:	f000 8089 	beq.w	8005368 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800525a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800525c:	2b28      	cmp	r3, #40	@ 0x28
 800525e:	d86b      	bhi.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005260:	a201      	add	r2, pc, #4	@ (adr r2, 8005268 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005266:	bf00      	nop
 8005268:	08005341 	.word	0x08005341
 800526c:	08005339 	.word	0x08005339
 8005270:	08005339 	.word	0x08005339
 8005274:	08005339 	.word	0x08005339
 8005278:	08005339 	.word	0x08005339
 800527c:	08005339 	.word	0x08005339
 8005280:	08005339 	.word	0x08005339
 8005284:	08005339 	.word	0x08005339
 8005288:	0800530d 	.word	0x0800530d
 800528c:	08005339 	.word	0x08005339
 8005290:	08005339 	.word	0x08005339
 8005294:	08005339 	.word	0x08005339
 8005298:	08005339 	.word	0x08005339
 800529c:	08005339 	.word	0x08005339
 80052a0:	08005339 	.word	0x08005339
 80052a4:	08005339 	.word	0x08005339
 80052a8:	08005323 	.word	0x08005323
 80052ac:	08005339 	.word	0x08005339
 80052b0:	08005339 	.word	0x08005339
 80052b4:	08005339 	.word	0x08005339
 80052b8:	08005339 	.word	0x08005339
 80052bc:	08005339 	.word	0x08005339
 80052c0:	08005339 	.word	0x08005339
 80052c4:	08005339 	.word	0x08005339
 80052c8:	08005341 	.word	0x08005341
 80052cc:	08005339 	.word	0x08005339
 80052d0:	08005339 	.word	0x08005339
 80052d4:	08005339 	.word	0x08005339
 80052d8:	08005339 	.word	0x08005339
 80052dc:	08005339 	.word	0x08005339
 80052e0:	08005339 	.word	0x08005339
 80052e4:	08005339 	.word	0x08005339
 80052e8:	08005341 	.word	0x08005341
 80052ec:	08005339 	.word	0x08005339
 80052f0:	08005339 	.word	0x08005339
 80052f4:	08005339 	.word	0x08005339
 80052f8:	08005339 	.word	0x08005339
 80052fc:	08005339 	.word	0x08005339
 8005300:	08005339 	.word	0x08005339
 8005304:	08005339 	.word	0x08005339
 8005308:	08005341 	.word	0x08005341
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800530c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005310:	3308      	adds	r3, #8
 8005312:	2101      	movs	r1, #1
 8005314:	4618      	mov	r0, r3
 8005316:	f000 ffc3 	bl	80062a0 <RCCEx_PLL2_Config>
 800531a:	4603      	mov	r3, r0
 800531c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005320:	e00f      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005326:	3328      	adds	r3, #40	@ 0x28
 8005328:	2101      	movs	r1, #1
 800532a:	4618      	mov	r0, r3
 800532c:	f001 f86a 	bl	8006404 <RCCEx_PLL3_Config>
 8005330:	4603      	mov	r3, r0
 8005332:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005336:	e004      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800533e:	e000      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005340:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005342:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10a      	bne.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800534a:	4bbf      	ldr	r3, [pc, #764]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800534c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800534e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005356:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005358:	4abb      	ldr	r2, [pc, #748]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800535a:	430b      	orrs	r3, r1
 800535c:	6553      	str	r3, [r2, #84]	@ 0x54
 800535e:	e003      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005360:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005364:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800536c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005370:	f002 0302 	and.w	r3, r2, #2
 8005374:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005378:	2300      	movs	r3, #0
 800537a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800537e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005382:	460b      	mov	r3, r1
 8005384:	4313      	orrs	r3, r2
 8005386:	d041      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800538c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800538e:	2b05      	cmp	r3, #5
 8005390:	d824      	bhi.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005392:	a201      	add	r2, pc, #4	@ (adr r2, 8005398 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005398:	080053e5 	.word	0x080053e5
 800539c:	080053b1 	.word	0x080053b1
 80053a0:	080053c7 	.word	0x080053c7
 80053a4:	080053e5 	.word	0x080053e5
 80053a8:	080053e5 	.word	0x080053e5
 80053ac:	080053e5 	.word	0x080053e5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053b4:	3308      	adds	r3, #8
 80053b6:	2101      	movs	r1, #1
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 ff71 	bl	80062a0 <RCCEx_PLL2_Config>
 80053be:	4603      	mov	r3, r0
 80053c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80053c4:	e00f      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ca:	3328      	adds	r3, #40	@ 0x28
 80053cc:	2101      	movs	r1, #1
 80053ce:	4618      	mov	r0, r3
 80053d0:	f001 f818 	bl	8006404 <RCCEx_PLL3_Config>
 80053d4:	4603      	mov	r3, r0
 80053d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80053da:	e004      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053e2:	e000      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80053e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d10a      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80053ee:	4b96      	ldr	r3, [pc, #600]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053f2:	f023 0107 	bic.w	r1, r3, #7
 80053f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053fc:	4a92      	ldr	r2, [pc, #584]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053fe:	430b      	orrs	r3, r1
 8005400:	6553      	str	r3, [r2, #84]	@ 0x54
 8005402:	e003      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005404:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005408:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800540c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005414:	f002 0304 	and.w	r3, r2, #4
 8005418:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800541c:	2300      	movs	r3, #0
 800541e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005422:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005426:	460b      	mov	r3, r1
 8005428:	4313      	orrs	r3, r2
 800542a:	d044      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800542c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005430:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005434:	2b05      	cmp	r3, #5
 8005436:	d825      	bhi.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005438:	a201      	add	r2, pc, #4	@ (adr r2, 8005440 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800543a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543e:	bf00      	nop
 8005440:	0800548d 	.word	0x0800548d
 8005444:	08005459 	.word	0x08005459
 8005448:	0800546f 	.word	0x0800546f
 800544c:	0800548d 	.word	0x0800548d
 8005450:	0800548d 	.word	0x0800548d
 8005454:	0800548d 	.word	0x0800548d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800545c:	3308      	adds	r3, #8
 800545e:	2101      	movs	r1, #1
 8005460:	4618      	mov	r0, r3
 8005462:	f000 ff1d 	bl	80062a0 <RCCEx_PLL2_Config>
 8005466:	4603      	mov	r3, r0
 8005468:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800546c:	e00f      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800546e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005472:	3328      	adds	r3, #40	@ 0x28
 8005474:	2101      	movs	r1, #1
 8005476:	4618      	mov	r0, r3
 8005478:	f000 ffc4 	bl	8006404 <RCCEx_PLL3_Config>
 800547c:	4603      	mov	r3, r0
 800547e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005482:	e004      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800548a:	e000      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800548c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800548e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10b      	bne.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005496:	4b6c      	ldr	r3, [pc, #432]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800549a:	f023 0107 	bic.w	r1, r3, #7
 800549e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054a6:	4a68      	ldr	r2, [pc, #416]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054a8:	430b      	orrs	r3, r1
 80054aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80054ac:	e003      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054be:	f002 0320 	and.w	r3, r2, #32
 80054c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80054c6:	2300      	movs	r3, #0
 80054c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80054cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80054d0:	460b      	mov	r3, r1
 80054d2:	4313      	orrs	r3, r2
 80054d4:	d055      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80054d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80054e2:	d033      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80054e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80054e8:	d82c      	bhi.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80054ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054ee:	d02f      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80054f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054f4:	d826      	bhi.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80054f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80054fa:	d02b      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80054fc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005500:	d820      	bhi.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005502:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005506:	d012      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005508:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800550c:	d81a      	bhi.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800550e:	2b00      	cmp	r3, #0
 8005510:	d022      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005512:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005516:	d115      	bne.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800551c:	3308      	adds	r3, #8
 800551e:	2100      	movs	r1, #0
 8005520:	4618      	mov	r0, r3
 8005522:	f000 febd 	bl	80062a0 <RCCEx_PLL2_Config>
 8005526:	4603      	mov	r3, r0
 8005528:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800552c:	e015      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800552e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005532:	3328      	adds	r3, #40	@ 0x28
 8005534:	2102      	movs	r1, #2
 8005536:	4618      	mov	r0, r3
 8005538:	f000 ff64 	bl	8006404 <RCCEx_PLL3_Config>
 800553c:	4603      	mov	r3, r0
 800553e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005542:	e00a      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800554a:	e006      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800554c:	bf00      	nop
 800554e:	e004      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005550:	bf00      	nop
 8005552:	e002      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005554:	bf00      	nop
 8005556:	e000      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005558:	bf00      	nop
    }

    if (ret == HAL_OK)
 800555a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10b      	bne.n	800557a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005562:	4b39      	ldr	r3, [pc, #228]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005566:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800556a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800556e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005572:	4a35      	ldr	r2, [pc, #212]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005574:	430b      	orrs	r3, r1
 8005576:	6553      	str	r3, [r2, #84]	@ 0x54
 8005578:	e003      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800557a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800557e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800558e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005592:	2300      	movs	r3, #0
 8005594:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005598:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800559c:	460b      	mov	r3, r1
 800559e:	4313      	orrs	r3, r2
 80055a0:	d058      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80055a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055aa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80055ae:	d033      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80055b0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80055b4:	d82c      	bhi.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80055b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055ba:	d02f      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80055bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055c0:	d826      	bhi.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80055c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80055c6:	d02b      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80055c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80055cc:	d820      	bhi.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80055ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055d2:	d012      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80055d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055d8:	d81a      	bhi.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d022      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80055de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055e2:	d115      	bne.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055e8:	3308      	adds	r3, #8
 80055ea:	2100      	movs	r1, #0
 80055ec:	4618      	mov	r0, r3
 80055ee:	f000 fe57 	bl	80062a0 <RCCEx_PLL2_Config>
 80055f2:	4603      	mov	r3, r0
 80055f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80055f8:	e015      	b.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80055fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055fe:	3328      	adds	r3, #40	@ 0x28
 8005600:	2102      	movs	r1, #2
 8005602:	4618      	mov	r0, r3
 8005604:	f000 fefe 	bl	8006404 <RCCEx_PLL3_Config>
 8005608:	4603      	mov	r3, r0
 800560a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800560e:	e00a      	b.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005616:	e006      	b.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005618:	bf00      	nop
 800561a:	e004      	b.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800561c:	bf00      	nop
 800561e:	e002      	b.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005620:	bf00      	nop
 8005622:	e000      	b.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005624:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005626:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800562a:	2b00      	cmp	r3, #0
 800562c:	d10e      	bne.n	800564c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800562e:	4b06      	ldr	r3, [pc, #24]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005632:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800563a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800563e:	4a02      	ldr	r2, [pc, #8]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005640:	430b      	orrs	r3, r1
 8005642:	6593      	str	r3, [r2, #88]	@ 0x58
 8005644:	e006      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005646:	bf00      	nop
 8005648:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800564c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005650:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005660:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005664:	2300      	movs	r3, #0
 8005666:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800566a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800566e:	460b      	mov	r3, r1
 8005670:	4313      	orrs	r3, r2
 8005672:	d055      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005678:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800567c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005680:	d033      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005682:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005686:	d82c      	bhi.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005688:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800568c:	d02f      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800568e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005692:	d826      	bhi.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005694:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005698:	d02b      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800569a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800569e:	d820      	bhi.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80056a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056a4:	d012      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80056a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056aa:	d81a      	bhi.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d022      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80056b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056b4:	d115      	bne.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ba:	3308      	adds	r3, #8
 80056bc:	2100      	movs	r1, #0
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 fdee 	bl	80062a0 <RCCEx_PLL2_Config>
 80056c4:	4603      	mov	r3, r0
 80056c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80056ca:	e015      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80056cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056d0:	3328      	adds	r3, #40	@ 0x28
 80056d2:	2102      	movs	r1, #2
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 fe95 	bl	8006404 <RCCEx_PLL3_Config>
 80056da:	4603      	mov	r3, r0
 80056dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80056e0:	e00a      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056e8:	e006      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80056ea:	bf00      	nop
 80056ec:	e004      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80056ee:	bf00      	nop
 80056f0:	e002      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80056f2:	bf00      	nop
 80056f4:	e000      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80056f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10b      	bne.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005700:	4ba1      	ldr	r3, [pc, #644]	@ (8005988 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005704:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800570c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005710:	4a9d      	ldr	r2, [pc, #628]	@ (8005988 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005712:	430b      	orrs	r3, r1
 8005714:	6593      	str	r3, [r2, #88]	@ 0x58
 8005716:	e003      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005718:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800571c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005728:	f002 0308 	and.w	r3, r2, #8
 800572c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005730:	2300      	movs	r3, #0
 8005732:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005736:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800573a:	460b      	mov	r3, r1
 800573c:	4313      	orrs	r3, r2
 800573e:	d01e      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005744:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005748:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800574c:	d10c      	bne.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800574e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005752:	3328      	adds	r3, #40	@ 0x28
 8005754:	2102      	movs	r1, #2
 8005756:	4618      	mov	r0, r3
 8005758:	f000 fe54 	bl	8006404 <RCCEx_PLL3_Config>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d002      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005768:	4b87      	ldr	r3, [pc, #540]	@ (8005988 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800576a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800576c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005774:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005778:	4a83      	ldr	r2, [pc, #524]	@ (8005988 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800577a:	430b      	orrs	r3, r1
 800577c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800577e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005786:	f002 0310 	and.w	r3, r2, #16
 800578a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800578e:	2300      	movs	r3, #0
 8005790:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005794:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005798:	460b      	mov	r3, r1
 800579a:	4313      	orrs	r3, r2
 800579c:	d01e      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800579e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057aa:	d10c      	bne.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80057ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057b0:	3328      	adds	r3, #40	@ 0x28
 80057b2:	2102      	movs	r1, #2
 80057b4:	4618      	mov	r0, r3
 80057b6:	f000 fe25 	bl	8006404 <RCCEx_PLL3_Config>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d002      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80057c6:	4b70      	ldr	r3, [pc, #448]	@ (8005988 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80057ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057d6:	4a6c      	ldr	r2, [pc, #432]	@ (8005988 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057d8:	430b      	orrs	r3, r1
 80057da:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80057e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80057ec:	2300      	movs	r3, #0
 80057ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80057f2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80057f6:	460b      	mov	r3, r1
 80057f8:	4313      	orrs	r3, r2
 80057fa:	d03e      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80057fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005800:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005804:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005808:	d022      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800580a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800580e:	d81b      	bhi.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005810:	2b00      	cmp	r3, #0
 8005812:	d003      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005814:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005818:	d00b      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800581a:	e015      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800581c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005820:	3308      	adds	r3, #8
 8005822:	2100      	movs	r1, #0
 8005824:	4618      	mov	r0, r3
 8005826:	f000 fd3b 	bl	80062a0 <RCCEx_PLL2_Config>
 800582a:	4603      	mov	r3, r0
 800582c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005830:	e00f      	b.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005836:	3328      	adds	r3, #40	@ 0x28
 8005838:	2102      	movs	r1, #2
 800583a:	4618      	mov	r0, r3
 800583c:	f000 fde2 	bl	8006404 <RCCEx_PLL3_Config>
 8005840:	4603      	mov	r3, r0
 8005842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005846:	e004      	b.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800584e:	e000      	b.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005850:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005852:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005856:	2b00      	cmp	r3, #0
 8005858:	d10b      	bne.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800585a:	4b4b      	ldr	r3, [pc, #300]	@ (8005988 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800585c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800585e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005866:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800586a:	4a47      	ldr	r2, [pc, #284]	@ (8005988 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800586c:	430b      	orrs	r3, r1
 800586e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005870:	e003      	b.n	800587a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005872:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005876:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800587a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800587e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005882:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005886:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005888:	2300      	movs	r3, #0
 800588a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800588c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005890:	460b      	mov	r3, r1
 8005892:	4313      	orrs	r3, r2
 8005894:	d03b      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800589a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800589e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80058a2:	d01f      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80058a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80058a8:	d818      	bhi.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80058aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058ae:	d003      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80058b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058b4:	d007      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80058b6:	e011      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058b8:	4b33      	ldr	r3, [pc, #204]	@ (8005988 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058bc:	4a32      	ldr	r2, [pc, #200]	@ (8005988 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80058c4:	e00f      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80058c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ca:	3328      	adds	r3, #40	@ 0x28
 80058cc:	2101      	movs	r1, #1
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 fd98 	bl	8006404 <RCCEx_PLL3_Config>
 80058d4:	4603      	mov	r3, r0
 80058d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80058da:	e004      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058e2:	e000      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80058e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10b      	bne.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058ee:	4b26      	ldr	r3, [pc, #152]	@ (8005988 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058f2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80058f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058fe:	4a22      	ldr	r2, [pc, #136]	@ (8005988 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005900:	430b      	orrs	r3, r1
 8005902:	6553      	str	r3, [r2, #84]	@ 0x54
 8005904:	e003      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005906:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800590a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800590e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005916:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800591a:	673b      	str	r3, [r7, #112]	@ 0x70
 800591c:	2300      	movs	r3, #0
 800591e:	677b      	str	r3, [r7, #116]	@ 0x74
 8005920:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005924:	460b      	mov	r3, r1
 8005926:	4313      	orrs	r3, r2
 8005928:	d034      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800592a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800592e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005930:	2b00      	cmp	r3, #0
 8005932:	d003      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005934:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005938:	d007      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800593a:	e011      	b.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800593c:	4b12      	ldr	r3, [pc, #72]	@ (8005988 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800593e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005940:	4a11      	ldr	r2, [pc, #68]	@ (8005988 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005942:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005946:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005948:	e00e      	b.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800594a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800594e:	3308      	adds	r3, #8
 8005950:	2102      	movs	r1, #2
 8005952:	4618      	mov	r0, r3
 8005954:	f000 fca4 	bl	80062a0 <RCCEx_PLL2_Config>
 8005958:	4603      	mov	r3, r0
 800595a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800595e:	e003      	b.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005966:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005968:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800596c:	2b00      	cmp	r3, #0
 800596e:	d10d      	bne.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005970:	4b05      	ldr	r3, [pc, #20]	@ (8005988 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005974:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800597c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800597e:	4a02      	ldr	r2, [pc, #8]	@ (8005988 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005980:	430b      	orrs	r3, r1
 8005982:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005984:	e006      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005986:	bf00      	nop
 8005988:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800598c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005990:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80059a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059a2:	2300      	movs	r3, #0
 80059a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80059a6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80059aa:	460b      	mov	r3, r1
 80059ac:	4313      	orrs	r3, r2
 80059ae:	d00c      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80059b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059b4:	3328      	adds	r3, #40	@ 0x28
 80059b6:	2102      	movs	r1, #2
 80059b8:	4618      	mov	r0, r3
 80059ba:	f000 fd23 	bl	8006404 <RCCEx_PLL3_Config>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d002      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80059ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80059d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80059d8:	2300      	movs	r3, #0
 80059da:	667b      	str	r3, [r7, #100]	@ 0x64
 80059dc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80059e0:	460b      	mov	r3, r1
 80059e2:	4313      	orrs	r3, r2
 80059e4:	d038      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80059e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059f2:	d018      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80059f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059f8:	d811      	bhi.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80059fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059fe:	d014      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005a00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a04:	d80b      	bhi.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d011      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005a0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a0e:	d106      	bne.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a10:	4bc3      	ldr	r3, [pc, #780]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a14:	4ac2      	ldr	r2, [pc, #776]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005a1c:	e008      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a24:	e004      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005a26:	bf00      	nop
 8005a28:	e002      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005a2a:	bf00      	nop
 8005a2c:	e000      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005a2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d10b      	bne.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a38:	4bb9      	ldr	r3, [pc, #740]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a3c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a48:	4ab5      	ldr	r2, [pc, #724]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a4a:	430b      	orrs	r3, r1
 8005a4c:	6553      	str	r3, [r2, #84]	@ 0x54
 8005a4e:	e003      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a60:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005a64:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a66:	2300      	movs	r3, #0
 8005a68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a6a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005a6e:	460b      	mov	r3, r1
 8005a70:	4313      	orrs	r3, r2
 8005a72:	d009      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005a74:	4baa      	ldr	r3, [pc, #680]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a78:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a82:	4aa7      	ldr	r2, [pc, #668]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a84:	430b      	orrs	r3, r1
 8005a86:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a90:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005a94:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a96:	2300      	movs	r3, #0
 8005a98:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a9a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	d00a      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005aa4:	4b9e      	ldr	r3, [pc, #632]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005ab4:	4a9a      	ldr	r2, [pc, #616]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ab6:	430b      	orrs	r3, r1
 8005ab8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005ac6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ac8:	2300      	movs	r3, #0
 8005aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005acc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	d009      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005ad6:	4b92      	ldr	r3, [pc, #584]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ad8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ada:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ae2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ae4:	4a8e      	ldr	r2, [pc, #568]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ae6:	430b      	orrs	r3, r1
 8005ae8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005af6:	643b      	str	r3, [r7, #64]	@ 0x40
 8005af8:	2300      	movs	r3, #0
 8005afa:	647b      	str	r3, [r7, #68]	@ 0x44
 8005afc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005b00:	460b      	mov	r3, r1
 8005b02:	4313      	orrs	r3, r2
 8005b04:	d00e      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005b06:	4b86      	ldr	r3, [pc, #536]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	4a85      	ldr	r2, [pc, #532]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b0c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005b10:	6113      	str	r3, [r2, #16]
 8005b12:	4b83      	ldr	r3, [pc, #524]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b14:	6919      	ldr	r1, [r3, #16]
 8005b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b1a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005b1e:	4a80      	ldr	r2, [pc, #512]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b20:	430b      	orrs	r3, r1
 8005b22:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b2c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005b30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b32:	2300      	movs	r3, #0
 8005b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b36:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	d009      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005b40:	4b77      	ldr	r3, [pc, #476]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b44:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b4e:	4a74      	ldr	r2, [pc, #464]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b50:	430b      	orrs	r3, r1
 8005b52:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005b60:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b62:	2300      	movs	r3, #0
 8005b64:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b66:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	d00a      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005b70:	4b6b      	ldr	r3, [pc, #428]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b74:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b80:	4a67      	ldr	r2, [pc, #412]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005b82:	430b      	orrs	r3, r1
 8005b84:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8e:	2100      	movs	r1, #0
 8005b90:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b98:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	d011      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba6:	3308      	adds	r3, #8
 8005ba8:	2100      	movs	r1, #0
 8005baa:	4618      	mov	r0, r3
 8005bac:	f000 fb78 	bl	80062a0 <RCCEx_PLL2_Config>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005bb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d003      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bce:	2100      	movs	r1, #0
 8005bd0:	6239      	str	r1, [r7, #32]
 8005bd2:	f003 0302 	and.w	r3, r3, #2
 8005bd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bd8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005bdc:	460b      	mov	r3, r1
 8005bde:	4313      	orrs	r3, r2
 8005be0:	d011      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005be6:	3308      	adds	r3, #8
 8005be8:	2101      	movs	r1, #1
 8005bea:	4618      	mov	r0, r3
 8005bec:	f000 fb58 	bl	80062a0 <RCCEx_PLL2_Config>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d003      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0e:	2100      	movs	r1, #0
 8005c10:	61b9      	str	r1, [r7, #24]
 8005c12:	f003 0304 	and.w	r3, r3, #4
 8005c16:	61fb      	str	r3, [r7, #28]
 8005c18:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	d011      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c26:	3308      	adds	r3, #8
 8005c28:	2102      	movs	r1, #2
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 fb38 	bl	80062a0 <RCCEx_PLL2_Config>
 8005c30:	4603      	mov	r3, r0
 8005c32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005c36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4e:	2100      	movs	r1, #0
 8005c50:	6139      	str	r1, [r7, #16]
 8005c52:	f003 0308 	and.w	r3, r3, #8
 8005c56:	617b      	str	r3, [r7, #20]
 8005c58:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	d011      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c66:	3328      	adds	r3, #40	@ 0x28
 8005c68:	2100      	movs	r1, #0
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 fbca 	bl	8006404 <RCCEx_PLL3_Config>
 8005c70:	4603      	mov	r3, r0
 8005c72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005c76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d003      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8e:	2100      	movs	r1, #0
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	f003 0310 	and.w	r3, r3, #16
 8005c96:	60fb      	str	r3, [r7, #12]
 8005c98:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	d011      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ca6:	3328      	adds	r3, #40	@ 0x28
 8005ca8:	2101      	movs	r1, #1
 8005caa:	4618      	mov	r0, r3
 8005cac:	f000 fbaa 	bl	8006404 <RCCEx_PLL3_Config>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005cb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cce:	2100      	movs	r1, #0
 8005cd0:	6039      	str	r1, [r7, #0]
 8005cd2:	f003 0320 	and.w	r3, r3, #32
 8005cd6:	607b      	str	r3, [r7, #4]
 8005cd8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005cdc:	460b      	mov	r3, r1
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	d011      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ce6:	3328      	adds	r3, #40	@ 0x28
 8005ce8:	2102      	movs	r1, #2
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 fb8a 	bl	8006404 <RCCEx_PLL3_Config>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005cf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005d06:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	e000      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d20:	58024400 	.word	0x58024400

08005d24 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005d28:	f7fe fd96 	bl	8004858 <HAL_RCC_GetHCLKFreq>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	4b06      	ldr	r3, [pc, #24]	@ (8005d48 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	091b      	lsrs	r3, r3, #4
 8005d34:	f003 0307 	and.w	r3, r3, #7
 8005d38:	4904      	ldr	r1, [pc, #16]	@ (8005d4c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005d3a:	5ccb      	ldrb	r3, [r1, r3]
 8005d3c:	f003 031f 	and.w	r3, r3, #31
 8005d40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	58024400 	.word	0x58024400
 8005d4c:	0800b9a8 	.word	0x0800b9a8

08005d50 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b089      	sub	sp, #36	@ 0x24
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d58:	4ba1      	ldr	r3, [pc, #644]	@ (8005fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d5c:	f003 0303 	and.w	r3, r3, #3
 8005d60:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005d62:	4b9f      	ldr	r3, [pc, #636]	@ (8005fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d66:	0b1b      	lsrs	r3, r3, #12
 8005d68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d6c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005d6e:	4b9c      	ldr	r3, [pc, #624]	@ (8005fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d72:	091b      	lsrs	r3, r3, #4
 8005d74:	f003 0301 	and.w	r3, r3, #1
 8005d78:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005d7a:	4b99      	ldr	r3, [pc, #612]	@ (8005fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d7e:	08db      	lsrs	r3, r3, #3
 8005d80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	fb02 f303 	mul.w	r3, r2, r3
 8005d8a:	ee07 3a90 	vmov	s15, r3
 8005d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f000 8111 	beq.w	8005fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	f000 8083 	beq.w	8005eac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	f200 80a1 	bhi.w	8005ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d003      	beq.n	8005dbc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d056      	beq.n	8005e68 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005dba:	e099      	b.n	8005ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dbc:	4b88      	ldr	r3, [pc, #544]	@ (8005fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0320 	and.w	r3, r3, #32
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d02d      	beq.n	8005e24 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005dc8:	4b85      	ldr	r3, [pc, #532]	@ (8005fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	08db      	lsrs	r3, r3, #3
 8005dce:	f003 0303 	and.w	r3, r3, #3
 8005dd2:	4a84      	ldr	r2, [pc, #528]	@ (8005fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8005dd8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	ee07 3a90 	vmov	s15, r3
 8005de0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	ee07 3a90 	vmov	s15, r3
 8005dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005df2:	4b7b      	ldr	r3, [pc, #492]	@ (8005fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dfa:	ee07 3a90 	vmov	s15, r3
 8005dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e02:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e06:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005e22:	e087      	b.n	8005f34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	ee07 3a90 	vmov	s15, r3
 8005e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e2e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005fec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e36:	4b6a      	ldr	r3, [pc, #424]	@ (8005fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e3e:	ee07 3a90 	vmov	s15, r3
 8005e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e46:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e4a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e66:	e065      	b.n	8005f34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	ee07 3a90 	vmov	s15, r3
 8005e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e72:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e7a:	4b59      	ldr	r3, [pc, #356]	@ (8005fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e82:	ee07 3a90 	vmov	s15, r3
 8005e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e8e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ea6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005eaa:	e043      	b.n	8005f34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	ee07 3a90 	vmov	s15, r3
 8005eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eb6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ebe:	4b48      	ldr	r3, [pc, #288]	@ (8005fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ec6:	ee07 3a90 	vmov	s15, r3
 8005eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ece:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ed2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ede:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005eee:	e021      	b.n	8005f34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	ee07 3a90 	vmov	s15, r3
 8005ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005efa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f02:	4b37      	ldr	r3, [pc, #220]	@ (8005fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f0a:	ee07 3a90 	vmov	s15, r3
 8005f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f12:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f16:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f32:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005f34:	4b2a      	ldr	r3, [pc, #168]	@ (8005fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f38:	0a5b      	lsrs	r3, r3, #9
 8005f3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f3e:	ee07 3a90 	vmov	s15, r3
 8005f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f5a:	ee17 2a90 	vmov	r2, s15
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005f62:	4b1f      	ldr	r3, [pc, #124]	@ (8005fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f66:	0c1b      	lsrs	r3, r3, #16
 8005f68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f6c:	ee07 3a90 	vmov	s15, r3
 8005f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f88:	ee17 2a90 	vmov	r2, s15
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005f90:	4b13      	ldr	r3, [pc, #76]	@ (8005fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f94:	0e1b      	lsrs	r3, r3, #24
 8005f96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f9a:	ee07 3a90 	vmov	s15, r3
 8005f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fa2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005fa6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005faa:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fb6:	ee17 2a90 	vmov	r2, s15
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005fbe:	e008      	b.n	8005fd2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	609a      	str	r2, [r3, #8]
}
 8005fd2:	bf00      	nop
 8005fd4:	3724      	adds	r7, #36	@ 0x24
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	58024400 	.word	0x58024400
 8005fe4:	03d09000 	.word	0x03d09000
 8005fe8:	46000000 	.word	0x46000000
 8005fec:	4c742400 	.word	0x4c742400
 8005ff0:	4a742400 	.word	0x4a742400
 8005ff4:	4bbebc20 	.word	0x4bbebc20

08005ff8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b089      	sub	sp, #36	@ 0x24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006000:	4ba1      	ldr	r3, [pc, #644]	@ (8006288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006004:	f003 0303 	and.w	r3, r3, #3
 8006008:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800600a:	4b9f      	ldr	r3, [pc, #636]	@ (8006288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800600c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800600e:	0d1b      	lsrs	r3, r3, #20
 8006010:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006014:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006016:	4b9c      	ldr	r3, [pc, #624]	@ (8006288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800601a:	0a1b      	lsrs	r3, r3, #8
 800601c:	f003 0301 	and.w	r3, r3, #1
 8006020:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006022:	4b99      	ldr	r3, [pc, #612]	@ (8006288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006026:	08db      	lsrs	r3, r3, #3
 8006028:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	fb02 f303 	mul.w	r3, r2, r3
 8006032:	ee07 3a90 	vmov	s15, r3
 8006036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800603a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	2b00      	cmp	r3, #0
 8006042:	f000 8111 	beq.w	8006268 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	2b02      	cmp	r3, #2
 800604a:	f000 8083 	beq.w	8006154 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	2b02      	cmp	r3, #2
 8006052:	f200 80a1 	bhi.w	8006198 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d003      	beq.n	8006064 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d056      	beq.n	8006110 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006062:	e099      	b.n	8006198 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006064:	4b88      	ldr	r3, [pc, #544]	@ (8006288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0320 	and.w	r3, r3, #32
 800606c:	2b00      	cmp	r3, #0
 800606e:	d02d      	beq.n	80060cc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006070:	4b85      	ldr	r3, [pc, #532]	@ (8006288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	08db      	lsrs	r3, r3, #3
 8006076:	f003 0303 	and.w	r3, r3, #3
 800607a:	4a84      	ldr	r2, [pc, #528]	@ (800628c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800607c:	fa22 f303 	lsr.w	r3, r2, r3
 8006080:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	ee07 3a90 	vmov	s15, r3
 8006088:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	ee07 3a90 	vmov	s15, r3
 8006092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800609a:	4b7b      	ldr	r3, [pc, #492]	@ (8006288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800609c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800609e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060a2:	ee07 3a90 	vmov	s15, r3
 80060a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80060ae:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006290 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80060ca:	e087      	b.n	80061dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	ee07 3a90 	vmov	s15, r3
 80060d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060d6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006294 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80060da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060de:	4b6a      	ldr	r3, [pc, #424]	@ (8006288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060e6:	ee07 3a90 	vmov	s15, r3
 80060ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80060f2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006290 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800610a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800610e:	e065      	b.n	80061dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	ee07 3a90 	vmov	s15, r3
 8006116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800611a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006298 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800611e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006122:	4b59      	ldr	r3, [pc, #356]	@ (8006288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800612a:	ee07 3a90 	vmov	s15, r3
 800612e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006132:	ed97 6a03 	vldr	s12, [r7, #12]
 8006136:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006290 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800613a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800613e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006142:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800614a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800614e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006152:	e043      	b.n	80061dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	ee07 3a90 	vmov	s15, r3
 800615a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800615e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800629c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006166:	4b48      	ldr	r3, [pc, #288]	@ (8006288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800616a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800616e:	ee07 3a90 	vmov	s15, r3
 8006172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006176:	ed97 6a03 	vldr	s12, [r7, #12]
 800617a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006290 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800617e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006186:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800618a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800618e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006192:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006196:	e021      	b.n	80061dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	ee07 3a90 	vmov	s15, r3
 800619e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061a2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006298 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80061a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061aa:	4b37      	ldr	r3, [pc, #220]	@ (8006288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061b2:	ee07 3a90 	vmov	s15, r3
 80061b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80061be:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006290 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80061c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061da:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80061dc:	4b2a      	ldr	r3, [pc, #168]	@ (8006288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e0:	0a5b      	lsrs	r3, r3, #9
 80061e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061e6:	ee07 3a90 	vmov	s15, r3
 80061ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80061f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80061fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006202:	ee17 2a90 	vmov	r2, s15
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800620a:	4b1f      	ldr	r3, [pc, #124]	@ (8006288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800620c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800620e:	0c1b      	lsrs	r3, r3, #16
 8006210:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006214:	ee07 3a90 	vmov	s15, r3
 8006218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800621c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006220:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006224:	edd7 6a07 	vldr	s13, [r7, #28]
 8006228:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800622c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006230:	ee17 2a90 	vmov	r2, s15
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006238:	4b13      	ldr	r3, [pc, #76]	@ (8006288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800623a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800623c:	0e1b      	lsrs	r3, r3, #24
 800623e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006242:	ee07 3a90 	vmov	s15, r3
 8006246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800624a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800624e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006252:	edd7 6a07 	vldr	s13, [r7, #28]
 8006256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800625a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800625e:	ee17 2a90 	vmov	r2, s15
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006266:	e008      	b.n	800627a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	609a      	str	r2, [r3, #8]
}
 800627a:	bf00      	nop
 800627c:	3724      	adds	r7, #36	@ 0x24
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	58024400 	.word	0x58024400
 800628c:	03d09000 	.word	0x03d09000
 8006290:	46000000 	.word	0x46000000
 8006294:	4c742400 	.word	0x4c742400
 8006298:	4a742400 	.word	0x4a742400
 800629c:	4bbebc20 	.word	0x4bbebc20

080062a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062aa:	2300      	movs	r3, #0
 80062ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80062ae:	4b53      	ldr	r3, [pc, #332]	@ (80063fc <RCCEx_PLL2_Config+0x15c>)
 80062b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b2:	f003 0303 	and.w	r3, r3, #3
 80062b6:	2b03      	cmp	r3, #3
 80062b8:	d101      	bne.n	80062be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e099      	b.n	80063f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80062be:	4b4f      	ldr	r3, [pc, #316]	@ (80063fc <RCCEx_PLL2_Config+0x15c>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a4e      	ldr	r2, [pc, #312]	@ (80063fc <RCCEx_PLL2_Config+0x15c>)
 80062c4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80062c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062ca:	f7fc fb5b 	bl	8002984 <HAL_GetTick>
 80062ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80062d0:	e008      	b.n	80062e4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80062d2:	f7fc fb57 	bl	8002984 <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d901      	bls.n	80062e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e086      	b.n	80063f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80062e4:	4b45      	ldr	r3, [pc, #276]	@ (80063fc <RCCEx_PLL2_Config+0x15c>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1f0      	bne.n	80062d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80062f0:	4b42      	ldr	r3, [pc, #264]	@ (80063fc <RCCEx_PLL2_Config+0x15c>)
 80062f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	031b      	lsls	r3, r3, #12
 80062fe:	493f      	ldr	r1, [pc, #252]	@ (80063fc <RCCEx_PLL2_Config+0x15c>)
 8006300:	4313      	orrs	r3, r2
 8006302:	628b      	str	r3, [r1, #40]	@ 0x28
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	3b01      	subs	r3, #1
 800630a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	3b01      	subs	r3, #1
 8006314:	025b      	lsls	r3, r3, #9
 8006316:	b29b      	uxth	r3, r3
 8006318:	431a      	orrs	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	3b01      	subs	r3, #1
 8006320:	041b      	lsls	r3, r3, #16
 8006322:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006326:	431a      	orrs	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	3b01      	subs	r3, #1
 800632e:	061b      	lsls	r3, r3, #24
 8006330:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006334:	4931      	ldr	r1, [pc, #196]	@ (80063fc <RCCEx_PLL2_Config+0x15c>)
 8006336:	4313      	orrs	r3, r2
 8006338:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800633a:	4b30      	ldr	r3, [pc, #192]	@ (80063fc <RCCEx_PLL2_Config+0x15c>)
 800633c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800633e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	492d      	ldr	r1, [pc, #180]	@ (80063fc <RCCEx_PLL2_Config+0x15c>)
 8006348:	4313      	orrs	r3, r2
 800634a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800634c:	4b2b      	ldr	r3, [pc, #172]	@ (80063fc <RCCEx_PLL2_Config+0x15c>)
 800634e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006350:	f023 0220 	bic.w	r2, r3, #32
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	4928      	ldr	r1, [pc, #160]	@ (80063fc <RCCEx_PLL2_Config+0x15c>)
 800635a:	4313      	orrs	r3, r2
 800635c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800635e:	4b27      	ldr	r3, [pc, #156]	@ (80063fc <RCCEx_PLL2_Config+0x15c>)
 8006360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006362:	4a26      	ldr	r2, [pc, #152]	@ (80063fc <RCCEx_PLL2_Config+0x15c>)
 8006364:	f023 0310 	bic.w	r3, r3, #16
 8006368:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800636a:	4b24      	ldr	r3, [pc, #144]	@ (80063fc <RCCEx_PLL2_Config+0x15c>)
 800636c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800636e:	4b24      	ldr	r3, [pc, #144]	@ (8006400 <RCCEx_PLL2_Config+0x160>)
 8006370:	4013      	ands	r3, r2
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	69d2      	ldr	r2, [r2, #28]
 8006376:	00d2      	lsls	r2, r2, #3
 8006378:	4920      	ldr	r1, [pc, #128]	@ (80063fc <RCCEx_PLL2_Config+0x15c>)
 800637a:	4313      	orrs	r3, r2
 800637c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800637e:	4b1f      	ldr	r3, [pc, #124]	@ (80063fc <RCCEx_PLL2_Config+0x15c>)
 8006380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006382:	4a1e      	ldr	r2, [pc, #120]	@ (80063fc <RCCEx_PLL2_Config+0x15c>)
 8006384:	f043 0310 	orr.w	r3, r3, #16
 8006388:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d106      	bne.n	800639e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006390:	4b1a      	ldr	r3, [pc, #104]	@ (80063fc <RCCEx_PLL2_Config+0x15c>)
 8006392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006394:	4a19      	ldr	r2, [pc, #100]	@ (80063fc <RCCEx_PLL2_Config+0x15c>)
 8006396:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800639a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800639c:	e00f      	b.n	80063be <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d106      	bne.n	80063b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80063a4:	4b15      	ldr	r3, [pc, #84]	@ (80063fc <RCCEx_PLL2_Config+0x15c>)
 80063a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a8:	4a14      	ldr	r2, [pc, #80]	@ (80063fc <RCCEx_PLL2_Config+0x15c>)
 80063aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80063b0:	e005      	b.n	80063be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80063b2:	4b12      	ldr	r3, [pc, #72]	@ (80063fc <RCCEx_PLL2_Config+0x15c>)
 80063b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063b6:	4a11      	ldr	r2, [pc, #68]	@ (80063fc <RCCEx_PLL2_Config+0x15c>)
 80063b8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80063bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80063be:	4b0f      	ldr	r3, [pc, #60]	@ (80063fc <RCCEx_PLL2_Config+0x15c>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a0e      	ldr	r2, [pc, #56]	@ (80063fc <RCCEx_PLL2_Config+0x15c>)
 80063c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80063c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063ca:	f7fc fadb 	bl	8002984 <HAL_GetTick>
 80063ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80063d0:	e008      	b.n	80063e4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80063d2:	f7fc fad7 	bl	8002984 <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d901      	bls.n	80063e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e006      	b.n	80063f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80063e4:	4b05      	ldr	r3, [pc, #20]	@ (80063fc <RCCEx_PLL2_Config+0x15c>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d0f0      	beq.n	80063d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80063f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	58024400 	.word	0x58024400
 8006400:	ffff0007 	.word	0xffff0007

08006404 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800640e:	2300      	movs	r3, #0
 8006410:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006412:	4b53      	ldr	r3, [pc, #332]	@ (8006560 <RCCEx_PLL3_Config+0x15c>)
 8006414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006416:	f003 0303 	and.w	r3, r3, #3
 800641a:	2b03      	cmp	r3, #3
 800641c:	d101      	bne.n	8006422 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e099      	b.n	8006556 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006422:	4b4f      	ldr	r3, [pc, #316]	@ (8006560 <RCCEx_PLL3_Config+0x15c>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a4e      	ldr	r2, [pc, #312]	@ (8006560 <RCCEx_PLL3_Config+0x15c>)
 8006428:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800642c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800642e:	f7fc faa9 	bl	8002984 <HAL_GetTick>
 8006432:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006434:	e008      	b.n	8006448 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006436:	f7fc faa5 	bl	8002984 <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	2b02      	cmp	r3, #2
 8006442:	d901      	bls.n	8006448 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e086      	b.n	8006556 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006448:	4b45      	ldr	r3, [pc, #276]	@ (8006560 <RCCEx_PLL3_Config+0x15c>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1f0      	bne.n	8006436 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006454:	4b42      	ldr	r3, [pc, #264]	@ (8006560 <RCCEx_PLL3_Config+0x15c>)
 8006456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006458:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	051b      	lsls	r3, r3, #20
 8006462:	493f      	ldr	r1, [pc, #252]	@ (8006560 <RCCEx_PLL3_Config+0x15c>)
 8006464:	4313      	orrs	r3, r2
 8006466:	628b      	str	r3, [r1, #40]	@ 0x28
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	3b01      	subs	r3, #1
 800646e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	3b01      	subs	r3, #1
 8006478:	025b      	lsls	r3, r3, #9
 800647a:	b29b      	uxth	r3, r3
 800647c:	431a      	orrs	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	3b01      	subs	r3, #1
 8006484:	041b      	lsls	r3, r3, #16
 8006486:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800648a:	431a      	orrs	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	3b01      	subs	r3, #1
 8006492:	061b      	lsls	r3, r3, #24
 8006494:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006498:	4931      	ldr	r1, [pc, #196]	@ (8006560 <RCCEx_PLL3_Config+0x15c>)
 800649a:	4313      	orrs	r3, r2
 800649c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800649e:	4b30      	ldr	r3, [pc, #192]	@ (8006560 <RCCEx_PLL3_Config+0x15c>)
 80064a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	492d      	ldr	r1, [pc, #180]	@ (8006560 <RCCEx_PLL3_Config+0x15c>)
 80064ac:	4313      	orrs	r3, r2
 80064ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80064b0:	4b2b      	ldr	r3, [pc, #172]	@ (8006560 <RCCEx_PLL3_Config+0x15c>)
 80064b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064b4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	4928      	ldr	r1, [pc, #160]	@ (8006560 <RCCEx_PLL3_Config+0x15c>)
 80064be:	4313      	orrs	r3, r2
 80064c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80064c2:	4b27      	ldr	r3, [pc, #156]	@ (8006560 <RCCEx_PLL3_Config+0x15c>)
 80064c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c6:	4a26      	ldr	r2, [pc, #152]	@ (8006560 <RCCEx_PLL3_Config+0x15c>)
 80064c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80064ce:	4b24      	ldr	r3, [pc, #144]	@ (8006560 <RCCEx_PLL3_Config+0x15c>)
 80064d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064d2:	4b24      	ldr	r3, [pc, #144]	@ (8006564 <RCCEx_PLL3_Config+0x160>)
 80064d4:	4013      	ands	r3, r2
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	69d2      	ldr	r2, [r2, #28]
 80064da:	00d2      	lsls	r2, r2, #3
 80064dc:	4920      	ldr	r1, [pc, #128]	@ (8006560 <RCCEx_PLL3_Config+0x15c>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80064e2:	4b1f      	ldr	r3, [pc, #124]	@ (8006560 <RCCEx_PLL3_Config+0x15c>)
 80064e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e6:	4a1e      	ldr	r2, [pc, #120]	@ (8006560 <RCCEx_PLL3_Config+0x15c>)
 80064e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d106      	bne.n	8006502 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80064f4:	4b1a      	ldr	r3, [pc, #104]	@ (8006560 <RCCEx_PLL3_Config+0x15c>)
 80064f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f8:	4a19      	ldr	r2, [pc, #100]	@ (8006560 <RCCEx_PLL3_Config+0x15c>)
 80064fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80064fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006500:	e00f      	b.n	8006522 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d106      	bne.n	8006516 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006508:	4b15      	ldr	r3, [pc, #84]	@ (8006560 <RCCEx_PLL3_Config+0x15c>)
 800650a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800650c:	4a14      	ldr	r2, [pc, #80]	@ (8006560 <RCCEx_PLL3_Config+0x15c>)
 800650e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006512:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006514:	e005      	b.n	8006522 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006516:	4b12      	ldr	r3, [pc, #72]	@ (8006560 <RCCEx_PLL3_Config+0x15c>)
 8006518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800651a:	4a11      	ldr	r2, [pc, #68]	@ (8006560 <RCCEx_PLL3_Config+0x15c>)
 800651c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006520:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006522:	4b0f      	ldr	r3, [pc, #60]	@ (8006560 <RCCEx_PLL3_Config+0x15c>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a0e      	ldr	r2, [pc, #56]	@ (8006560 <RCCEx_PLL3_Config+0x15c>)
 8006528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800652c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800652e:	f7fc fa29 	bl	8002984 <HAL_GetTick>
 8006532:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006534:	e008      	b.n	8006548 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006536:	f7fc fa25 	bl	8002984 <HAL_GetTick>
 800653a:	4602      	mov	r2, r0
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	2b02      	cmp	r3, #2
 8006542:	d901      	bls.n	8006548 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e006      	b.n	8006556 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006548:	4b05      	ldr	r3, [pc, #20]	@ (8006560 <RCCEx_PLL3_Config+0x15c>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d0f0      	beq.n	8006536 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006554:	7bfb      	ldrb	r3, [r7, #15]
}
 8006556:	4618      	mov	r0, r3
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	58024400 	.word	0x58024400
 8006564:	ffff0007 	.word	0xffff0007

08006568 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e10f      	b.n	800679a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a87      	ldr	r2, [pc, #540]	@ (80067a4 <HAL_SPI_Init+0x23c>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d00f      	beq.n	80065aa <HAL_SPI_Init+0x42>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a86      	ldr	r2, [pc, #536]	@ (80067a8 <HAL_SPI_Init+0x240>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d00a      	beq.n	80065aa <HAL_SPI_Init+0x42>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a84      	ldr	r2, [pc, #528]	@ (80067ac <HAL_SPI_Init+0x244>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d005      	beq.n	80065aa <HAL_SPI_Init+0x42>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	2b0f      	cmp	r3, #15
 80065a4:	d901      	bls.n	80065aa <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e0f7      	b.n	800679a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 ff4c 	bl	8007448 <SPI_GetPacketSize>
 80065b0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a7b      	ldr	r2, [pc, #492]	@ (80067a4 <HAL_SPI_Init+0x23c>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d00c      	beq.n	80065d6 <HAL_SPI_Init+0x6e>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a79      	ldr	r2, [pc, #484]	@ (80067a8 <HAL_SPI_Init+0x240>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d007      	beq.n	80065d6 <HAL_SPI_Init+0x6e>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a78      	ldr	r2, [pc, #480]	@ (80067ac <HAL_SPI_Init+0x244>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d002      	beq.n	80065d6 <HAL_SPI_Init+0x6e>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2b08      	cmp	r3, #8
 80065d4:	d811      	bhi.n	80065fa <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80065da:	4a72      	ldr	r2, [pc, #456]	@ (80067a4 <HAL_SPI_Init+0x23c>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d009      	beq.n	80065f4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a70      	ldr	r2, [pc, #448]	@ (80067a8 <HAL_SPI_Init+0x240>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d004      	beq.n	80065f4 <HAL_SPI_Init+0x8c>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a6f      	ldr	r2, [pc, #444]	@ (80067ac <HAL_SPI_Init+0x244>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d104      	bne.n	80065fe <HAL_SPI_Init+0x96>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2b10      	cmp	r3, #16
 80065f8:	d901      	bls.n	80065fe <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e0cd      	b.n	800679a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d106      	bne.n	8006618 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7fb fc68 	bl	8001ee8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2202      	movs	r2, #2
 800661c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f022 0201 	bic.w	r2, r2, #1
 800662e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800663a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	699b      	ldr	r3, [r3, #24]
 8006640:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006644:	d119      	bne.n	800667a <HAL_SPI_Init+0x112>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800664e:	d103      	bne.n	8006658 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006654:	2b00      	cmp	r3, #0
 8006656:	d008      	beq.n	800666a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10c      	bne.n	800667a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006664:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006668:	d107      	bne.n	800667a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006678:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00f      	beq.n	80066a6 <HAL_SPI_Init+0x13e>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	2b06      	cmp	r3, #6
 800668c:	d90b      	bls.n	80066a6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	430a      	orrs	r2, r1
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	e007      	b.n	80066b6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80066b4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	69da      	ldr	r2, [r3, #28]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066be:	431a      	orrs	r2, r3
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	431a      	orrs	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066c8:	ea42 0103 	orr.w	r1, r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	68da      	ldr	r2, [r3, #12]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	430a      	orrs	r2, r1
 80066d6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e0:	431a      	orrs	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066e6:	431a      	orrs	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	431a      	orrs	r2, r3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	431a      	orrs	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	695b      	ldr	r3, [r3, #20]
 80066f8:	431a      	orrs	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	431a      	orrs	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	431a      	orrs	r2, r3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800670a:	431a      	orrs	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	431a      	orrs	r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006716:	ea42 0103 	orr.w	r1, r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	430a      	orrs	r2, r1
 8006724:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d113      	bne.n	8006756 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006740:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006754:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f022 0201 	bic.w	r2, r2, #1
 8006764:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00a      	beq.n	8006788 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	430a      	orrs	r2, r1
 8006786:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	40013000 	.word	0x40013000
 80067a8:	40003800 	.word	0x40003800
 80067ac:	40003c00 	.word	0x40003c00

080067b0 <HAL_SPI_DeInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d101      	bne.n	80067c2 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e01b      	b.n	80067fa <HAL_SPI_DeInit+0x4a>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2202      	movs	r2, #2
 80067c6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f022 0201 	bic.w	r2, r2, #1
 80067d8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f7fb fc0a 	bl	8001ff4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State = HAL_SPI_STATE_RESET;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3708      	adds	r7, #8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
	...

08006804 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b08e      	sub	sp, #56	@ 0x38
 8006808:	af02      	add	r7, sp, #8
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
 8006810:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	3320      	adds	r3, #32
 8006818:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	3330      	adds	r3, #48	@ 0x30
 8006820:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006826:	095b      	lsrs	r3, r3, #5
 8006828:	b29b      	uxth	r3, r3
 800682a:	3301      	adds	r3, #1
 800682c:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800682e:	f7fc f8a9 	bl	8002984 <HAL_GetTick>
 8006832:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8006834:	887b      	ldrh	r3, [r7, #2]
 8006836:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8006838:	887b      	ldrh	r3, [r7, #2]
 800683a:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b01      	cmp	r3, #1
 8006846:	d001      	beq.n	800684c <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8006848:	2302      	movs	r3, #2
 800684a:	e310      	b.n	8006e6e <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d005      	beq.n	800685e <HAL_SPI_TransmitReceive+0x5a>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d002      	beq.n	800685e <HAL_SPI_TransmitReceive+0x5a>
 8006858:	887b      	ldrh	r3, [r7, #2]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d101      	bne.n	8006862 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e305      	b.n	8006e6e <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006868:	2b01      	cmp	r3, #1
 800686a:	d101      	bne.n	8006870 <HAL_SPI_TransmitReceive+0x6c>
 800686c:	2302      	movs	r3, #2
 800686e:	e2fe      	b.n	8006e6e <HAL_SPI_TransmitReceive+0x66a>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2205      	movs	r2, #5
 800687c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	887a      	ldrh	r2, [r7, #2]
 8006892:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	887a      	ldrh	r2, [r7, #2]
 800689a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	68ba      	ldr	r2, [r7, #8]
 80068a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	887a      	ldrh	r2, [r7, #2]
 80068a8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	887a      	ldrh	r2, [r7, #2]
 80068b0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68da      	ldr	r2, [r3, #12]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 80068ce:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a70      	ldr	r2, [pc, #448]	@ (8006a98 <HAL_SPI_TransmitReceive+0x294>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d009      	beq.n	80068ee <HAL_SPI_TransmitReceive+0xea>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a6f      	ldr	r2, [pc, #444]	@ (8006a9c <HAL_SPI_TransmitReceive+0x298>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d004      	beq.n	80068ee <HAL_SPI_TransmitReceive+0xea>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a6d      	ldr	r2, [pc, #436]	@ (8006aa0 <HAL_SPI_TransmitReceive+0x29c>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d102      	bne.n	80068f4 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 80068ee:	2310      	movs	r3, #16
 80068f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068f2:	e001      	b.n	80068f8 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 80068f4:	2308      	movs	r3, #8
 80068f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	685a      	ldr	r2, [r3, #4]
 80068fe:	4b69      	ldr	r3, [pc, #420]	@ (8006aa4 <HAL_SPI_TransmitReceive+0x2a0>)
 8006900:	4013      	ands	r3, r2
 8006902:	8879      	ldrh	r1, [r7, #2]
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	6812      	ldr	r2, [r2, #0]
 8006908:	430b      	orrs	r3, r1
 800690a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f042 0201 	orr.w	r2, r2, #1
 800691a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006924:	d107      	bne.n	8006936 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006934:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	2b0f      	cmp	r3, #15
 800693c:	f240 80a2 	bls.w	8006a84 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8006940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006942:	089b      	lsrs	r3, r3, #2
 8006944:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006946:	e094      	b.n	8006a72 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	695b      	ldr	r3, [r3, #20]
 800694e:	f003 0302 	and.w	r3, r3, #2
 8006952:	2b02      	cmp	r3, #2
 8006954:	d120      	bne.n	8006998 <HAL_SPI_TransmitReceive+0x194>
 8006956:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006958:	2b00      	cmp	r3, #0
 800695a:	d01d      	beq.n	8006998 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800695c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800695e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006962:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006964:	429a      	cmp	r2, r3
 8006966:	d217      	bcs.n	8006998 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6812      	ldr	r2, [r2, #0]
 8006972:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006978:	1d1a      	adds	r2, r3, #4
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006984:	b29b      	uxth	r3, r3
 8006986:	3b01      	subs	r3, #1
 8006988:	b29a      	uxth	r2, r3
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006996:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80069a0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d065      	beq.n	8006a72 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	695b      	ldr	r3, [r3, #20]
 80069ac:	f003 0301 	and.w	r3, r3, #1
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d118      	bne.n	80069e6 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069bc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80069be:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069c4:	1d1a      	adds	r2, r3, #4
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	3b01      	subs	r3, #1
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80069e2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80069e4:	e045      	b.n	8006a72 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80069e6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80069e8:	8bfb      	ldrh	r3, [r7, #30]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d21d      	bcs.n	8006a2a <HAL_SPI_TransmitReceive+0x226>
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d018      	beq.n	8006a2a <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a00:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006a02:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a08:	1d1a      	adds	r2, r3, #4
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	3b01      	subs	r3, #1
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006a26:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006a28:	e023      	b.n	8006a72 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a2a:	f7fb ffab 	bl	8002984 <HAL_GetTick>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d803      	bhi.n	8006a42 <HAL_SPI_TransmitReceive+0x23e>
 8006a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a40:	d102      	bne.n	8006a48 <HAL_SPI_TransmitReceive+0x244>
 8006a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d114      	bne.n	8006a72 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f000 fc2f 	bl	80072ac <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a54:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2201      	movs	r2, #1
 8006a62:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e1fd      	b.n	8006e6e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006a72:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f47f af67 	bne.w	8006948 <HAL_SPI_TransmitReceive+0x144>
 8006a7a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f47f af63 	bne.w	8006948 <HAL_SPI_TransmitReceive+0x144>
 8006a82:	e1ce      	b.n	8006e22 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	2b07      	cmp	r3, #7
 8006a8a:	f240 81c2 	bls.w	8006e12 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8006a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a90:	085b      	lsrs	r3, r3, #1
 8006a92:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006a94:	e0c9      	b.n	8006c2a <HAL_SPI_TransmitReceive+0x426>
 8006a96:	bf00      	nop
 8006a98:	40013000 	.word	0x40013000
 8006a9c:	40003800 	.word	0x40003800
 8006aa0:	40003c00 	.word	0x40003c00
 8006aa4:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	f003 0302 	and.w	r3, r3, #2
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d11f      	bne.n	8006af6 <HAL_SPI_TransmitReceive+0x2f2>
 8006ab6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d01c      	beq.n	8006af6 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006abc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006abe:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ac2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d216      	bcs.n	8006af6 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006acc:	881a      	ldrh	r2, [r3, #0]
 8006ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad0:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ad6:	1c9a      	adds	r2, r3, #2
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	b29a      	uxth	r2, r3
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006af4:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	695b      	ldr	r3, [r3, #20]
 8006afc:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8006afe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f000 8092 	beq.w	8006c2a <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	695b      	ldr	r3, [r3, #20]
 8006b0c:	f003 0301 	and.w	r3, r3, #1
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d118      	bne.n	8006b46 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b18:	6a3a      	ldr	r2, [r7, #32]
 8006b1a:	8812      	ldrh	r2, [r2, #0]
 8006b1c:	b292      	uxth	r2, r2
 8006b1e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b24:	1c9a      	adds	r2, r3, #2
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	3b01      	subs	r3, #1
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006b42:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006b44:	e071      	b.n	8006c2a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006b46:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006b48:	8bfb      	ldrh	r3, [r7, #30]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d228      	bcs.n	8006ba0 <HAL_SPI_TransmitReceive+0x39c>
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d023      	beq.n	8006ba0 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b5c:	6a3a      	ldr	r2, [r7, #32]
 8006b5e:	8812      	ldrh	r2, [r2, #0]
 8006b60:	b292      	uxth	r2, r2
 8006b62:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b68:	1c9a      	adds	r2, r3, #2
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b72:	6a3a      	ldr	r2, [r7, #32]
 8006b74:	8812      	ldrh	r2, [r2, #0]
 8006b76:	b292      	uxth	r2, r2
 8006b78:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b7e:	1c9a      	adds	r2, r3, #2
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	3b02      	subs	r3, #2
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006b9c:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006b9e:	e044      	b.n	8006c2a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8006ba0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d11d      	bne.n	8006be2 <HAL_SPI_TransmitReceive+0x3de>
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d018      	beq.n	8006be2 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bb4:	6a3a      	ldr	r2, [r7, #32]
 8006bb6:	8812      	ldrh	r2, [r2, #0]
 8006bb8:	b292      	uxth	r2, r2
 8006bba:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bc0:	1c9a      	adds	r2, r3, #2
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006bde:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006be0:	e023      	b.n	8006c2a <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006be2:	f7fb fecf 	bl	8002984 <HAL_GetTick>
 8006be6:	4602      	mov	r2, r0
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	1ad3      	subs	r3, r2, r3
 8006bec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d803      	bhi.n	8006bfa <HAL_SPI_TransmitReceive+0x3f6>
 8006bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf8:	d102      	bne.n	8006c00 <HAL_SPI_TransmitReceive+0x3fc>
 8006bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d114      	bne.n	8006c2a <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f000 fb53 	bl	80072ac <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c0c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e121      	b.n	8006e6e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006c2a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f47f af3b 	bne.w	8006aa8 <HAL_SPI_TransmitReceive+0x2a4>
 8006c32:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f47f af37 	bne.w	8006aa8 <HAL_SPI_TransmitReceive+0x2a4>
 8006c3a:	e0f2      	b.n	8006e22 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	f003 0302 	and.w	r3, r3, #2
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d121      	bne.n	8006c8e <HAL_SPI_TransmitReceive+0x48a>
 8006c4a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d01e      	beq.n	8006c8e <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006c50:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006c52:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c56:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d218      	bcs.n	8006c8e <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	3320      	adds	r3, #32
 8006c66:	7812      	ldrb	r2, [r2, #0]
 8006c68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c6e:	1c5a      	adds	r2, r3, #1
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006c8c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	695b      	ldr	r3, [r3, #20]
 8006c94:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8006c96:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f000 80ba 	beq.w	8006e12 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	695b      	ldr	r3, [r3, #20]
 8006ca4:	f003 0301 	and.w	r3, r3, #1
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d11b      	bne.n	8006ce4 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006cb8:	7812      	ldrb	r2, [r2, #0]
 8006cba:	b2d2      	uxtb	r2, r2
 8006cbc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006cc2:	1c5a      	adds	r2, r3, #1
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006ce0:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006ce2:	e096      	b.n	8006e12 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006ce4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006ce6:	8bfb      	ldrh	r3, [r7, #30]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d24a      	bcs.n	8006d82 <HAL_SPI_TransmitReceive+0x57e>
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d045      	beq.n	8006d82 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d02:	7812      	ldrb	r2, [r2, #0]
 8006d04:	b2d2      	uxtb	r2, r2
 8006d06:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d0c:	1c5a      	adds	r2, r3, #1
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d1e:	7812      	ldrb	r2, [r2, #0]
 8006d20:	b2d2      	uxtb	r2, r2
 8006d22:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d28:	1c5a      	adds	r2, r3, #1
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d3a:	7812      	ldrb	r2, [r2, #0]
 8006d3c:	b2d2      	uxtb	r2, r2
 8006d3e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d44:	1c5a      	adds	r2, r3, #1
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d56:	7812      	ldrb	r2, [r2, #0]
 8006d58:	b2d2      	uxtb	r2, r2
 8006d5a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d60:	1c5a      	adds	r2, r3, #1
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	3b04      	subs	r3, #4
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006d7e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006d80:	e047      	b.n	8006e12 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8006d82:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006d84:	2b03      	cmp	r3, #3
 8006d86:	d820      	bhi.n	8006dca <HAL_SPI_TransmitReceive+0x5c6>
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d01b      	beq.n	8006dca <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d9e:	7812      	ldrb	r2, [r2, #0]
 8006da0:	b2d2      	uxtb	r2, r2
 8006da2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006da8:	1c5a      	adds	r2, r3, #1
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	3b01      	subs	r3, #1
 8006db8:	b29a      	uxth	r2, r3
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006dc6:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006dc8:	e023      	b.n	8006e12 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dca:	f7fb fddb 	bl	8002984 <HAL_GetTick>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d803      	bhi.n	8006de2 <HAL_SPI_TransmitReceive+0x5de>
 8006dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de0:	d102      	bne.n	8006de8 <HAL_SPI_TransmitReceive+0x5e4>
 8006de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d114      	bne.n	8006e12 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f000 fa5f 	bl	80072ac <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006df4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e02d      	b.n	8006e6e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006e12:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f47f af11 	bne.w	8006c3c <HAL_SPI_TransmitReceive+0x438>
 8006e1a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f47f af0d 	bne.w	8006c3c <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	9300      	str	r3, [sp, #0]
 8006e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e28:	2200      	movs	r2, #0
 8006e2a:	2108      	movs	r1, #8
 8006e2c:	68f8      	ldr	r0, [r7, #12]
 8006e2e:	f000 fadd 	bl	80073ec <SPI_WaitOnFlagUntilTimeout>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d007      	beq.n	8006e48 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e3e:	f043 0220 	orr.w	r2, r3, #32
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f000 fa2f 	bl	80072ac <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d001      	beq.n	8006e6c <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e000      	b.n	8006e6e <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
  }
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3730      	adds	r7, #48	@ 0x30
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop

08006e78 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b08a      	sub	sp, #40	@ 0x28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	695b      	ldr	r3, [r3, #20]
 8006e8e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8006e90:	6a3a      	ldr	r2, [r7, #32]
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	4013      	ands	r3, r2
 8006e96:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006eaa:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	3330      	adds	r3, #48	@ 0x30
 8006eb2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d010      	beq.n	8006ee0 <HAL_SPI_IRQHandler+0x68>
 8006ebe:	6a3b      	ldr	r3, [r7, #32]
 8006ec0:	f003 0308 	and.w	r3, r3, #8
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00b      	beq.n	8006ee0 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	699a      	ldr	r2, [r3, #24]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ed6:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 f9c3 	bl	8007264 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8006ede:	e192      	b.n	8007206 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d113      	bne.n	8006f12 <HAL_SPI_IRQHandler+0x9a>
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	f003 0320 	and.w	r3, r3, #32
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d10e      	bne.n	8006f12 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d009      	beq.n	8006f12 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	4798      	blx	r3
    hspi->RxISR(hspi);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	4798      	blx	r3
    handled = 1UL;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d10f      	bne.n	8006f3c <HAL_SPI_IRQHandler+0xc4>
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	f003 0301 	and.w	r3, r3, #1
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00a      	beq.n	8006f3c <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d105      	bne.n	8006f3c <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	4798      	blx	r3
    handled = 1UL;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	f003 0320 	and.w	r3, r3, #32
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10f      	bne.n	8006f66 <HAL_SPI_IRQHandler+0xee>
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	f003 0302 	and.w	r3, r3, #2
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00a      	beq.n	8006f66 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d105      	bne.n	8006f66 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	4798      	blx	r3
    handled = 1UL;
 8006f62:	2301      	movs	r3, #1
 8006f64:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8006f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f040 8147 	bne.w	80071fc <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	f003 0308 	and.w	r3, r3, #8
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	f000 808b 	beq.w	8007090 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	699a      	ldr	r2, [r3, #24]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f042 0208 	orr.w	r2, r2, #8
 8006f88:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	699a      	ldr	r2, [r3, #24]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f042 0210 	orr.w	r2, r2, #16
 8006f98:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	699a      	ldr	r2, [r3, #24]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006fa8:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	691a      	ldr	r2, [r3, #16]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f022 0208 	bic.w	r2, r2, #8
 8006fb8:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d13d      	bne.n	8007044 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8006fc8:	e036      	b.n	8007038 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	2b0f      	cmp	r3, #15
 8006fd0:	d90b      	bls.n	8006fea <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fda:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006fdc:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fe2:	1d1a      	adds	r2, r3, #4
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	665a      	str	r2, [r3, #100]	@ 0x64
 8006fe8:	e01d      	b.n	8007026 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	2b07      	cmp	r3, #7
 8006ff0:	d90b      	bls.n	800700a <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	8812      	ldrh	r2, [r2, #0]
 8006ffa:	b292      	uxth	r2, r2
 8006ffc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007002:	1c9a      	adds	r2, r3, #2
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	665a      	str	r2, [r3, #100]	@ 0x64
 8007008:	e00d      	b.n	8007026 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007016:	7812      	ldrb	r2, [r2, #0]
 8007018:	b2d2      	uxtb	r2, r2
 800701a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007020:	1c5a      	adds	r2, r3, #1
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800702c:	b29b      	uxth	r3, r3
 800702e:	3b01      	subs	r3, #1
 8007030:	b29a      	uxth	r2, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800703e:	b29b      	uxth	r3, r3
 8007040:	2b00      	cmp	r3, #0
 8007042:	d1c2      	bne.n	8006fca <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 f931 	bl	80072ac <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2201      	movs	r2, #1
 800704e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007058:	2b00      	cmp	r3, #0
 800705a:	d003      	beq.n	8007064 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 f8f7 	bl	8007250 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007062:	e0d0      	b.n	8007206 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007064:	7cfb      	ldrb	r3, [r7, #19]
 8007066:	2b05      	cmp	r3, #5
 8007068:	d103      	bne.n	8007072 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f8e6 	bl	800723c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8007070:	e0c6      	b.n	8007200 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007072:	7cfb      	ldrb	r3, [r7, #19]
 8007074:	2b04      	cmp	r3, #4
 8007076:	d103      	bne.n	8007080 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 f8d5 	bl	8007228 <HAL_SPI_RxCpltCallback>
    return;
 800707e:	e0bf      	b.n	8007200 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007080:	7cfb      	ldrb	r3, [r7, #19]
 8007082:	2b03      	cmp	r3, #3
 8007084:	f040 80bc 	bne.w	8007200 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 f8c3 	bl	8007214 <HAL_SPI_TxCpltCallback>
    return;
 800708e:	e0b7      	b.n	8007200 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8007096:	2b00      	cmp	r3, #0
 8007098:	f000 80b5 	beq.w	8007206 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00f      	beq.n	80070c6 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070ac:	f043 0204 	orr.w	r2, r3, #4
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	699a      	ldr	r2, [r3, #24]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070c4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d00f      	beq.n	80070f0 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80070d6:	f043 0201 	orr.w	r2, r3, #1
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	699a      	ldr	r2, [r3, #24]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070ee:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00f      	beq.n	800711a <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007100:	f043 0208 	orr.w	r2, r3, #8
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	699a      	ldr	r2, [r3, #24]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007118:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	f003 0320 	and.w	r3, r3, #32
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00f      	beq.n	8007144 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800712a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	699a      	ldr	r2, [r3, #24]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f042 0220 	orr.w	r2, r2, #32
 8007142:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800714a:	2b00      	cmp	r3, #0
 800714c:	d05a      	beq.n	8007204 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f022 0201 	bic.w	r2, r2, #1
 800715c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	6919      	ldr	r1, [r3, #16]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	4b28      	ldr	r3, [pc, #160]	@ (800720c <HAL_SPI_IRQHandler+0x394>)
 800716a:	400b      	ands	r3, r1
 800716c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007174:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007178:	d138      	bne.n	80071ec <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	689a      	ldr	r2, [r3, #8]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007188:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800718e:	2b00      	cmp	r3, #0
 8007190:	d013      	beq.n	80071ba <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007196:	4a1e      	ldr	r2, [pc, #120]	@ (8007210 <HAL_SPI_IRQHandler+0x398>)
 8007198:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800719e:	4618      	mov	r0, r3
 80071a0:	f7fb fde6 	bl	8002d70 <HAL_DMA_Abort_IT>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d007      	beq.n	80071ba <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071b0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d020      	beq.n	8007204 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80071c6:	4a12      	ldr	r2, [pc, #72]	@ (8007210 <HAL_SPI_IRQHandler+0x398>)
 80071c8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7fb fdce 	bl	8002d70 <HAL_DMA_Abort_IT>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d014      	beq.n	8007204 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071e0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80071ea:	e00b      	b.n	8007204 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 f82b 	bl	8007250 <HAL_SPI_ErrorCallback>
    return;
 80071fa:	e003      	b.n	8007204 <HAL_SPI_IRQHandler+0x38c>
    return;
 80071fc:	bf00      	nop
 80071fe:	e002      	b.n	8007206 <HAL_SPI_IRQHandler+0x38e>
    return;
 8007200:	bf00      	nop
 8007202:	e000      	b.n	8007206 <HAL_SPI_IRQHandler+0x38e>
    return;
 8007204:	bf00      	nop
  }
}
 8007206:	3728      	adds	r7, #40	@ 0x28
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	fffffc94 	.word	0xfffffc94
 8007210:	08007279 	.word	0x08007279

08007214 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800721c:	bf00      	nop
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007244:	bf00      	nop
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007258:	bf00      	nop
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800726c:	bf00      	nop
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007284:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2200      	movs	r2, #0
 8007292:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f7ff ffd6 	bl	8007250 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80072a4:	bf00      	nop
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	695b      	ldr	r3, [r3, #20]
 80072ba:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	699a      	ldr	r2, [r3, #24]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f042 0208 	orr.w	r2, r2, #8
 80072ca:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	699a      	ldr	r2, [r3, #24]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f042 0210 	orr.w	r2, r2, #16
 80072da:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f022 0201 	bic.w	r2, r2, #1
 80072ea:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6919      	ldr	r1, [r3, #16]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	4b3c      	ldr	r3, [pc, #240]	@ (80073e8 <SPI_CloseTransfer+0x13c>)
 80072f8:	400b      	ands	r3, r1
 80072fa:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	689a      	ldr	r2, [r3, #8]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800730a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007312:	b2db      	uxtb	r3, r3
 8007314:	2b04      	cmp	r3, #4
 8007316:	d014      	beq.n	8007342 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f003 0320 	and.w	r3, r3, #32
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00f      	beq.n	8007342 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007328:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	699a      	ldr	r2, [r3, #24]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f042 0220 	orr.w	r2, r2, #32
 8007340:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007348:	b2db      	uxtb	r3, r3
 800734a:	2b03      	cmp	r3, #3
 800734c:	d014      	beq.n	8007378 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00f      	beq.n	8007378 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800735e:	f043 0204 	orr.w	r2, r3, #4
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	699a      	ldr	r2, [r3, #24]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007376:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00f      	beq.n	80073a2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007388:	f043 0201 	orr.w	r2, r3, #1
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	699a      	ldr	r2, [r3, #24]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073a0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00f      	beq.n	80073cc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073b2:	f043 0208 	orr.w	r2, r3, #8
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	699a      	ldr	r2, [r3, #24]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80073ca:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80073dc:	bf00      	nop
 80073de:	3714      	adds	r7, #20
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr
 80073e8:	fffffc90 	.word	0xfffffc90

080073ec <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	603b      	str	r3, [r7, #0]
 80073f8:	4613      	mov	r3, r2
 80073fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80073fc:	e010      	b.n	8007420 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073fe:	f7fb fac1 	bl	8002984 <HAL_GetTick>
 8007402:	4602      	mov	r2, r0
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	683a      	ldr	r2, [r7, #0]
 800740a:	429a      	cmp	r2, r3
 800740c:	d803      	bhi.n	8007416 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007414:	d102      	bne.n	800741c <SPI_WaitOnFlagUntilTimeout+0x30>
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d101      	bne.n	8007420 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800741c:	2303      	movs	r3, #3
 800741e:	e00f      	b.n	8007440 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	695a      	ldr	r2, [r3, #20]
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	4013      	ands	r3, r2
 800742a:	68ba      	ldr	r2, [r7, #8]
 800742c:	429a      	cmp	r2, r3
 800742e:	bf0c      	ite	eq
 8007430:	2301      	moveq	r3, #1
 8007432:	2300      	movne	r3, #0
 8007434:	b2db      	uxtb	r3, r3
 8007436:	461a      	mov	r2, r3
 8007438:	79fb      	ldrb	r3, [r7, #7]
 800743a:	429a      	cmp	r2, r3
 800743c:	d0df      	beq.n	80073fe <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007454:	095b      	lsrs	r3, r3, #5
 8007456:	3301      	adds	r3, #1
 8007458:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	3301      	adds	r3, #1
 8007460:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	3307      	adds	r3, #7
 8007466:	08db      	lsrs	r3, r3, #3
 8007468:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	fb02 f303 	mul.w	r3, r2, r3
}
 8007472:	4618      	mov	r0, r3
 8007474:	3714      	adds	r7, #20
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr

0800747e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b082      	sub	sp, #8
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d101      	bne.n	8007490 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	e042      	b.n	8007516 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007496:	2b00      	cmp	r3, #0
 8007498:	d106      	bne.n	80074a8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f83b 	bl	800751e <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2224      	movs	r2, #36	@ 0x24
 80074ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f022 0201 	bic.w	r2, r2, #1
 80074be:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d002      	beq.n	80074ce <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 fe29 	bl	8008120 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f8be 	bl	8007650 <UART_SetConfig>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d101      	bne.n	80074de <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e01b      	b.n	8007516 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	685a      	ldr	r2, [r3, #4]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80074ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	689a      	ldr	r2, [r3, #8]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80074fc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f042 0201 	orr.w	r2, r2, #1
 800750c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 fea8 	bl	8008264 <UART_CheckIdleState>
 8007514:	4603      	mov	r3, r0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3708      	adds	r7, #8
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800751e:	b480      	push	{r7}
 8007520:	b083      	sub	sp, #12
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8007526:	bf00      	nop
 8007528:	370c      	adds	r7, #12
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr

08007532 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007532:	b580      	push	{r7, lr}
 8007534:	b08a      	sub	sp, #40	@ 0x28
 8007536:	af02      	add	r7, sp, #8
 8007538:	60f8      	str	r0, [r7, #12]
 800753a:	60b9      	str	r1, [r7, #8]
 800753c:	603b      	str	r3, [r7, #0]
 800753e:	4613      	mov	r3, r2
 8007540:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007548:	2b20      	cmp	r3, #32
 800754a:	d17b      	bne.n	8007644 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d002      	beq.n	8007558 <HAL_UART_Transmit+0x26>
 8007552:	88fb      	ldrh	r3, [r7, #6]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d101      	bne.n	800755c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e074      	b.n	8007646 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2221      	movs	r2, #33	@ 0x21
 8007568:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800756c:	f7fb fa0a 	bl	8002984 <HAL_GetTick>
 8007570:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	88fa      	ldrh	r2, [r7, #6]
 8007576:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	88fa      	ldrh	r2, [r7, #6]
 800757e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800758a:	d108      	bne.n	800759e <HAL_UART_Transmit+0x6c>
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d104      	bne.n	800759e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007594:	2300      	movs	r3, #0
 8007596:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	61bb      	str	r3, [r7, #24]
 800759c:	e003      	b.n	80075a6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075a2:	2300      	movs	r3, #0
 80075a4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80075a6:	e030      	b.n	800760a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	9300      	str	r3, [sp, #0]
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	2200      	movs	r2, #0
 80075b0:	2180      	movs	r1, #128	@ 0x80
 80075b2:	68f8      	ldr	r0, [r7, #12]
 80075b4:	f000 ff00 	bl	80083b8 <UART_WaitOnFlagUntilTimeout>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d005      	beq.n	80075ca <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2220      	movs	r2, #32
 80075c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80075c6:	2303      	movs	r3, #3
 80075c8:	e03d      	b.n	8007646 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d10b      	bne.n	80075e8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	881b      	ldrh	r3, [r3, #0]
 80075d4:	461a      	mov	r2, r3
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075de:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80075e0:	69bb      	ldr	r3, [r7, #24]
 80075e2:	3302      	adds	r3, #2
 80075e4:	61bb      	str	r3, [r7, #24]
 80075e6:	e007      	b.n	80075f8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	781a      	ldrb	r2, [r3, #0]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	3301      	adds	r3, #1
 80075f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80075fe:	b29b      	uxth	r3, r3
 8007600:	3b01      	subs	r3, #1
 8007602:	b29a      	uxth	r2, r3
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007610:	b29b      	uxth	r3, r3
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1c8      	bne.n	80075a8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	9300      	str	r3, [sp, #0]
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	2200      	movs	r2, #0
 800761e:	2140      	movs	r1, #64	@ 0x40
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f000 fec9 	bl	80083b8 <UART_WaitOnFlagUntilTimeout>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d005      	beq.n	8007638 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2220      	movs	r2, #32
 8007630:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007634:	2303      	movs	r3, #3
 8007636:	e006      	b.n	8007646 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2220      	movs	r2, #32
 800763c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007640:	2300      	movs	r3, #0
 8007642:	e000      	b.n	8007646 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007644:	2302      	movs	r3, #2
  }
}
 8007646:	4618      	mov	r0, r3
 8007648:	3720      	adds	r7, #32
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
	...

08007650 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007654:	b092      	sub	sp, #72	@ 0x48
 8007656:	af00      	add	r7, sp, #0
 8007658:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800765a:	2300      	movs	r3, #0
 800765c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	689a      	ldr	r2, [r3, #8]
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	691b      	ldr	r3, [r3, #16]
 8007668:	431a      	orrs	r2, r3
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	431a      	orrs	r2, r3
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	69db      	ldr	r3, [r3, #28]
 8007674:	4313      	orrs	r3, r2
 8007676:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	4bbe      	ldr	r3, [pc, #760]	@ (8007978 <UART_SetConfig+0x328>)
 8007680:	4013      	ands	r3, r2
 8007682:	697a      	ldr	r2, [r7, #20]
 8007684:	6812      	ldr	r2, [r2, #0]
 8007686:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007688:	430b      	orrs	r3, r1
 800768a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	68da      	ldr	r2, [r3, #12]
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	430a      	orrs	r2, r1
 80076a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4ab3      	ldr	r2, [pc, #716]	@ (800797c <UART_SetConfig+0x32c>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d004      	beq.n	80076bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	6a1b      	ldr	r3, [r3, #32]
 80076b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076b8:	4313      	orrs	r3, r2
 80076ba:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	689a      	ldr	r2, [r3, #8]
 80076c2:	4baf      	ldr	r3, [pc, #700]	@ (8007980 <UART_SetConfig+0x330>)
 80076c4:	4013      	ands	r3, r2
 80076c6:	697a      	ldr	r2, [r7, #20]
 80076c8:	6812      	ldr	r2, [r2, #0]
 80076ca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80076cc:	430b      	orrs	r3, r1
 80076ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d6:	f023 010f 	bic.w	r1, r3, #15
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	430a      	orrs	r2, r1
 80076e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4aa6      	ldr	r2, [pc, #664]	@ (8007984 <UART_SetConfig+0x334>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d177      	bne.n	80077e0 <UART_SetConfig+0x190>
 80076f0:	4ba5      	ldr	r3, [pc, #660]	@ (8007988 <UART_SetConfig+0x338>)
 80076f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80076f8:	2b28      	cmp	r3, #40	@ 0x28
 80076fa:	d86d      	bhi.n	80077d8 <UART_SetConfig+0x188>
 80076fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007704 <UART_SetConfig+0xb4>)
 80076fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007702:	bf00      	nop
 8007704:	080077a9 	.word	0x080077a9
 8007708:	080077d9 	.word	0x080077d9
 800770c:	080077d9 	.word	0x080077d9
 8007710:	080077d9 	.word	0x080077d9
 8007714:	080077d9 	.word	0x080077d9
 8007718:	080077d9 	.word	0x080077d9
 800771c:	080077d9 	.word	0x080077d9
 8007720:	080077d9 	.word	0x080077d9
 8007724:	080077b1 	.word	0x080077b1
 8007728:	080077d9 	.word	0x080077d9
 800772c:	080077d9 	.word	0x080077d9
 8007730:	080077d9 	.word	0x080077d9
 8007734:	080077d9 	.word	0x080077d9
 8007738:	080077d9 	.word	0x080077d9
 800773c:	080077d9 	.word	0x080077d9
 8007740:	080077d9 	.word	0x080077d9
 8007744:	080077b9 	.word	0x080077b9
 8007748:	080077d9 	.word	0x080077d9
 800774c:	080077d9 	.word	0x080077d9
 8007750:	080077d9 	.word	0x080077d9
 8007754:	080077d9 	.word	0x080077d9
 8007758:	080077d9 	.word	0x080077d9
 800775c:	080077d9 	.word	0x080077d9
 8007760:	080077d9 	.word	0x080077d9
 8007764:	080077c1 	.word	0x080077c1
 8007768:	080077d9 	.word	0x080077d9
 800776c:	080077d9 	.word	0x080077d9
 8007770:	080077d9 	.word	0x080077d9
 8007774:	080077d9 	.word	0x080077d9
 8007778:	080077d9 	.word	0x080077d9
 800777c:	080077d9 	.word	0x080077d9
 8007780:	080077d9 	.word	0x080077d9
 8007784:	080077c9 	.word	0x080077c9
 8007788:	080077d9 	.word	0x080077d9
 800778c:	080077d9 	.word	0x080077d9
 8007790:	080077d9 	.word	0x080077d9
 8007794:	080077d9 	.word	0x080077d9
 8007798:	080077d9 	.word	0x080077d9
 800779c:	080077d9 	.word	0x080077d9
 80077a0:	080077d9 	.word	0x080077d9
 80077a4:	080077d1 	.word	0x080077d1
 80077a8:	2301      	movs	r3, #1
 80077aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ae:	e222      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 80077b0:	2304      	movs	r3, #4
 80077b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077b6:	e21e      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 80077b8:	2308      	movs	r3, #8
 80077ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077be:	e21a      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 80077c0:	2310      	movs	r3, #16
 80077c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077c6:	e216      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 80077c8:	2320      	movs	r3, #32
 80077ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ce:	e212      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 80077d0:	2340      	movs	r3, #64	@ 0x40
 80077d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077d6:	e20e      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 80077d8:	2380      	movs	r3, #128	@ 0x80
 80077da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077de:	e20a      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a69      	ldr	r2, [pc, #420]	@ (800798c <UART_SetConfig+0x33c>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d130      	bne.n	800784c <UART_SetConfig+0x1fc>
 80077ea:	4b67      	ldr	r3, [pc, #412]	@ (8007988 <UART_SetConfig+0x338>)
 80077ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077ee:	f003 0307 	and.w	r3, r3, #7
 80077f2:	2b05      	cmp	r3, #5
 80077f4:	d826      	bhi.n	8007844 <UART_SetConfig+0x1f4>
 80077f6:	a201      	add	r2, pc, #4	@ (adr r2, 80077fc <UART_SetConfig+0x1ac>)
 80077f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077fc:	08007815 	.word	0x08007815
 8007800:	0800781d 	.word	0x0800781d
 8007804:	08007825 	.word	0x08007825
 8007808:	0800782d 	.word	0x0800782d
 800780c:	08007835 	.word	0x08007835
 8007810:	0800783d 	.word	0x0800783d
 8007814:	2300      	movs	r3, #0
 8007816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800781a:	e1ec      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 800781c:	2304      	movs	r3, #4
 800781e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007822:	e1e8      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007824:	2308      	movs	r3, #8
 8007826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800782a:	e1e4      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 800782c:	2310      	movs	r3, #16
 800782e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007832:	e1e0      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007834:	2320      	movs	r3, #32
 8007836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800783a:	e1dc      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 800783c:	2340      	movs	r3, #64	@ 0x40
 800783e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007842:	e1d8      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007844:	2380      	movs	r3, #128	@ 0x80
 8007846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800784a:	e1d4      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a4f      	ldr	r2, [pc, #316]	@ (8007990 <UART_SetConfig+0x340>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d130      	bne.n	80078b8 <UART_SetConfig+0x268>
 8007856:	4b4c      	ldr	r3, [pc, #304]	@ (8007988 <UART_SetConfig+0x338>)
 8007858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800785a:	f003 0307 	and.w	r3, r3, #7
 800785e:	2b05      	cmp	r3, #5
 8007860:	d826      	bhi.n	80078b0 <UART_SetConfig+0x260>
 8007862:	a201      	add	r2, pc, #4	@ (adr r2, 8007868 <UART_SetConfig+0x218>)
 8007864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007868:	08007881 	.word	0x08007881
 800786c:	08007889 	.word	0x08007889
 8007870:	08007891 	.word	0x08007891
 8007874:	08007899 	.word	0x08007899
 8007878:	080078a1 	.word	0x080078a1
 800787c:	080078a9 	.word	0x080078a9
 8007880:	2300      	movs	r3, #0
 8007882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007886:	e1b6      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007888:	2304      	movs	r3, #4
 800788a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800788e:	e1b2      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007890:	2308      	movs	r3, #8
 8007892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007896:	e1ae      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007898:	2310      	movs	r3, #16
 800789a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800789e:	e1aa      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 80078a0:	2320      	movs	r3, #32
 80078a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078a6:	e1a6      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 80078a8:	2340      	movs	r3, #64	@ 0x40
 80078aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ae:	e1a2      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 80078b0:	2380      	movs	r3, #128	@ 0x80
 80078b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078b6:	e19e      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a35      	ldr	r2, [pc, #212]	@ (8007994 <UART_SetConfig+0x344>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d130      	bne.n	8007924 <UART_SetConfig+0x2d4>
 80078c2:	4b31      	ldr	r3, [pc, #196]	@ (8007988 <UART_SetConfig+0x338>)
 80078c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078c6:	f003 0307 	and.w	r3, r3, #7
 80078ca:	2b05      	cmp	r3, #5
 80078cc:	d826      	bhi.n	800791c <UART_SetConfig+0x2cc>
 80078ce:	a201      	add	r2, pc, #4	@ (adr r2, 80078d4 <UART_SetConfig+0x284>)
 80078d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d4:	080078ed 	.word	0x080078ed
 80078d8:	080078f5 	.word	0x080078f5
 80078dc:	080078fd 	.word	0x080078fd
 80078e0:	08007905 	.word	0x08007905
 80078e4:	0800790d 	.word	0x0800790d
 80078e8:	08007915 	.word	0x08007915
 80078ec:	2300      	movs	r3, #0
 80078ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078f2:	e180      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 80078f4:	2304      	movs	r3, #4
 80078f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078fa:	e17c      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 80078fc:	2308      	movs	r3, #8
 80078fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007902:	e178      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007904:	2310      	movs	r3, #16
 8007906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800790a:	e174      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 800790c:	2320      	movs	r3, #32
 800790e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007912:	e170      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007914:	2340      	movs	r3, #64	@ 0x40
 8007916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800791a:	e16c      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 800791c:	2380      	movs	r3, #128	@ 0x80
 800791e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007922:	e168      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a1b      	ldr	r2, [pc, #108]	@ (8007998 <UART_SetConfig+0x348>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d142      	bne.n	80079b4 <UART_SetConfig+0x364>
 800792e:	4b16      	ldr	r3, [pc, #88]	@ (8007988 <UART_SetConfig+0x338>)
 8007930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007932:	f003 0307 	and.w	r3, r3, #7
 8007936:	2b05      	cmp	r3, #5
 8007938:	d838      	bhi.n	80079ac <UART_SetConfig+0x35c>
 800793a:	a201      	add	r2, pc, #4	@ (adr r2, 8007940 <UART_SetConfig+0x2f0>)
 800793c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007940:	08007959 	.word	0x08007959
 8007944:	08007961 	.word	0x08007961
 8007948:	08007969 	.word	0x08007969
 800794c:	08007971 	.word	0x08007971
 8007950:	0800799d 	.word	0x0800799d
 8007954:	080079a5 	.word	0x080079a5
 8007958:	2300      	movs	r3, #0
 800795a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800795e:	e14a      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007960:	2304      	movs	r3, #4
 8007962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007966:	e146      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007968:	2308      	movs	r3, #8
 800796a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800796e:	e142      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007970:	2310      	movs	r3, #16
 8007972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007976:	e13e      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007978:	cfff69f3 	.word	0xcfff69f3
 800797c:	58000c00 	.word	0x58000c00
 8007980:	11fff4ff 	.word	0x11fff4ff
 8007984:	40011000 	.word	0x40011000
 8007988:	58024400 	.word	0x58024400
 800798c:	40004400 	.word	0x40004400
 8007990:	40004800 	.word	0x40004800
 8007994:	40004c00 	.word	0x40004c00
 8007998:	40005000 	.word	0x40005000
 800799c:	2320      	movs	r3, #32
 800799e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079a2:	e128      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 80079a4:	2340      	movs	r3, #64	@ 0x40
 80079a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079aa:	e124      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 80079ac:	2380      	movs	r3, #128	@ 0x80
 80079ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079b2:	e120      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4acb      	ldr	r2, [pc, #812]	@ (8007ce8 <UART_SetConfig+0x698>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d176      	bne.n	8007aac <UART_SetConfig+0x45c>
 80079be:	4bcb      	ldr	r3, [pc, #812]	@ (8007cec <UART_SetConfig+0x69c>)
 80079c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80079c6:	2b28      	cmp	r3, #40	@ 0x28
 80079c8:	d86c      	bhi.n	8007aa4 <UART_SetConfig+0x454>
 80079ca:	a201      	add	r2, pc, #4	@ (adr r2, 80079d0 <UART_SetConfig+0x380>)
 80079cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d0:	08007a75 	.word	0x08007a75
 80079d4:	08007aa5 	.word	0x08007aa5
 80079d8:	08007aa5 	.word	0x08007aa5
 80079dc:	08007aa5 	.word	0x08007aa5
 80079e0:	08007aa5 	.word	0x08007aa5
 80079e4:	08007aa5 	.word	0x08007aa5
 80079e8:	08007aa5 	.word	0x08007aa5
 80079ec:	08007aa5 	.word	0x08007aa5
 80079f0:	08007a7d 	.word	0x08007a7d
 80079f4:	08007aa5 	.word	0x08007aa5
 80079f8:	08007aa5 	.word	0x08007aa5
 80079fc:	08007aa5 	.word	0x08007aa5
 8007a00:	08007aa5 	.word	0x08007aa5
 8007a04:	08007aa5 	.word	0x08007aa5
 8007a08:	08007aa5 	.word	0x08007aa5
 8007a0c:	08007aa5 	.word	0x08007aa5
 8007a10:	08007a85 	.word	0x08007a85
 8007a14:	08007aa5 	.word	0x08007aa5
 8007a18:	08007aa5 	.word	0x08007aa5
 8007a1c:	08007aa5 	.word	0x08007aa5
 8007a20:	08007aa5 	.word	0x08007aa5
 8007a24:	08007aa5 	.word	0x08007aa5
 8007a28:	08007aa5 	.word	0x08007aa5
 8007a2c:	08007aa5 	.word	0x08007aa5
 8007a30:	08007a8d 	.word	0x08007a8d
 8007a34:	08007aa5 	.word	0x08007aa5
 8007a38:	08007aa5 	.word	0x08007aa5
 8007a3c:	08007aa5 	.word	0x08007aa5
 8007a40:	08007aa5 	.word	0x08007aa5
 8007a44:	08007aa5 	.word	0x08007aa5
 8007a48:	08007aa5 	.word	0x08007aa5
 8007a4c:	08007aa5 	.word	0x08007aa5
 8007a50:	08007a95 	.word	0x08007a95
 8007a54:	08007aa5 	.word	0x08007aa5
 8007a58:	08007aa5 	.word	0x08007aa5
 8007a5c:	08007aa5 	.word	0x08007aa5
 8007a60:	08007aa5 	.word	0x08007aa5
 8007a64:	08007aa5 	.word	0x08007aa5
 8007a68:	08007aa5 	.word	0x08007aa5
 8007a6c:	08007aa5 	.word	0x08007aa5
 8007a70:	08007a9d 	.word	0x08007a9d
 8007a74:	2301      	movs	r3, #1
 8007a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a7a:	e0bc      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007a7c:	2304      	movs	r3, #4
 8007a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a82:	e0b8      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007a84:	2308      	movs	r3, #8
 8007a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a8a:	e0b4      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007a8c:	2310      	movs	r3, #16
 8007a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a92:	e0b0      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007a94:	2320      	movs	r3, #32
 8007a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a9a:	e0ac      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007a9c:	2340      	movs	r3, #64	@ 0x40
 8007a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aa2:	e0a8      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007aa4:	2380      	movs	r3, #128	@ 0x80
 8007aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aaa:	e0a4      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a8f      	ldr	r2, [pc, #572]	@ (8007cf0 <UART_SetConfig+0x6a0>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d130      	bne.n	8007b18 <UART_SetConfig+0x4c8>
 8007ab6:	4b8d      	ldr	r3, [pc, #564]	@ (8007cec <UART_SetConfig+0x69c>)
 8007ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aba:	f003 0307 	and.w	r3, r3, #7
 8007abe:	2b05      	cmp	r3, #5
 8007ac0:	d826      	bhi.n	8007b10 <UART_SetConfig+0x4c0>
 8007ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ac8 <UART_SetConfig+0x478>)
 8007ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac8:	08007ae1 	.word	0x08007ae1
 8007acc:	08007ae9 	.word	0x08007ae9
 8007ad0:	08007af1 	.word	0x08007af1
 8007ad4:	08007af9 	.word	0x08007af9
 8007ad8:	08007b01 	.word	0x08007b01
 8007adc:	08007b09 	.word	0x08007b09
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ae6:	e086      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007ae8:	2304      	movs	r3, #4
 8007aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aee:	e082      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007af0:	2308      	movs	r3, #8
 8007af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007af6:	e07e      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007af8:	2310      	movs	r3, #16
 8007afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007afe:	e07a      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007b00:	2320      	movs	r3, #32
 8007b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b06:	e076      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007b08:	2340      	movs	r3, #64	@ 0x40
 8007b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b0e:	e072      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007b10:	2380      	movs	r3, #128	@ 0x80
 8007b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b16:	e06e      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a75      	ldr	r2, [pc, #468]	@ (8007cf4 <UART_SetConfig+0x6a4>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d130      	bne.n	8007b84 <UART_SetConfig+0x534>
 8007b22:	4b72      	ldr	r3, [pc, #456]	@ (8007cec <UART_SetConfig+0x69c>)
 8007b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b26:	f003 0307 	and.w	r3, r3, #7
 8007b2a:	2b05      	cmp	r3, #5
 8007b2c:	d826      	bhi.n	8007b7c <UART_SetConfig+0x52c>
 8007b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b34 <UART_SetConfig+0x4e4>)
 8007b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b34:	08007b4d 	.word	0x08007b4d
 8007b38:	08007b55 	.word	0x08007b55
 8007b3c:	08007b5d 	.word	0x08007b5d
 8007b40:	08007b65 	.word	0x08007b65
 8007b44:	08007b6d 	.word	0x08007b6d
 8007b48:	08007b75 	.word	0x08007b75
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b52:	e050      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007b54:	2304      	movs	r3, #4
 8007b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b5a:	e04c      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007b5c:	2308      	movs	r3, #8
 8007b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b62:	e048      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007b64:	2310      	movs	r3, #16
 8007b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b6a:	e044      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007b6c:	2320      	movs	r3, #32
 8007b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b72:	e040      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007b74:	2340      	movs	r3, #64	@ 0x40
 8007b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b7a:	e03c      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007b7c:	2380      	movs	r3, #128	@ 0x80
 8007b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b82:	e038      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a5b      	ldr	r2, [pc, #364]	@ (8007cf8 <UART_SetConfig+0x6a8>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d130      	bne.n	8007bf0 <UART_SetConfig+0x5a0>
 8007b8e:	4b57      	ldr	r3, [pc, #348]	@ (8007cec <UART_SetConfig+0x69c>)
 8007b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b92:	f003 0307 	and.w	r3, r3, #7
 8007b96:	2b05      	cmp	r3, #5
 8007b98:	d826      	bhi.n	8007be8 <UART_SetConfig+0x598>
 8007b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8007ba0 <UART_SetConfig+0x550>)
 8007b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba0:	08007bb9 	.word	0x08007bb9
 8007ba4:	08007bc1 	.word	0x08007bc1
 8007ba8:	08007bc9 	.word	0x08007bc9
 8007bac:	08007bd1 	.word	0x08007bd1
 8007bb0:	08007bd9 	.word	0x08007bd9
 8007bb4:	08007be1 	.word	0x08007be1
 8007bb8:	2302      	movs	r3, #2
 8007bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bbe:	e01a      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007bc0:	2304      	movs	r3, #4
 8007bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bc6:	e016      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007bc8:	2308      	movs	r3, #8
 8007bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bce:	e012      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007bd0:	2310      	movs	r3, #16
 8007bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bd6:	e00e      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007bd8:	2320      	movs	r3, #32
 8007bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bde:	e00a      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007be0:	2340      	movs	r3, #64	@ 0x40
 8007be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007be6:	e006      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007be8:	2380      	movs	r3, #128	@ 0x80
 8007bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bee:	e002      	b.n	8007bf6 <UART_SetConfig+0x5a6>
 8007bf0:	2380      	movs	r3, #128	@ 0x80
 8007bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a3f      	ldr	r2, [pc, #252]	@ (8007cf8 <UART_SetConfig+0x6a8>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	f040 80f8 	bne.w	8007df2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c02:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007c06:	2b20      	cmp	r3, #32
 8007c08:	dc46      	bgt.n	8007c98 <UART_SetConfig+0x648>
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	f2c0 8082 	blt.w	8007d14 <UART_SetConfig+0x6c4>
 8007c10:	3b02      	subs	r3, #2
 8007c12:	2b1e      	cmp	r3, #30
 8007c14:	d87e      	bhi.n	8007d14 <UART_SetConfig+0x6c4>
 8007c16:	a201      	add	r2, pc, #4	@ (adr r2, 8007c1c <UART_SetConfig+0x5cc>)
 8007c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c1c:	08007c9f 	.word	0x08007c9f
 8007c20:	08007d15 	.word	0x08007d15
 8007c24:	08007ca7 	.word	0x08007ca7
 8007c28:	08007d15 	.word	0x08007d15
 8007c2c:	08007d15 	.word	0x08007d15
 8007c30:	08007d15 	.word	0x08007d15
 8007c34:	08007cb7 	.word	0x08007cb7
 8007c38:	08007d15 	.word	0x08007d15
 8007c3c:	08007d15 	.word	0x08007d15
 8007c40:	08007d15 	.word	0x08007d15
 8007c44:	08007d15 	.word	0x08007d15
 8007c48:	08007d15 	.word	0x08007d15
 8007c4c:	08007d15 	.word	0x08007d15
 8007c50:	08007d15 	.word	0x08007d15
 8007c54:	08007cc7 	.word	0x08007cc7
 8007c58:	08007d15 	.word	0x08007d15
 8007c5c:	08007d15 	.word	0x08007d15
 8007c60:	08007d15 	.word	0x08007d15
 8007c64:	08007d15 	.word	0x08007d15
 8007c68:	08007d15 	.word	0x08007d15
 8007c6c:	08007d15 	.word	0x08007d15
 8007c70:	08007d15 	.word	0x08007d15
 8007c74:	08007d15 	.word	0x08007d15
 8007c78:	08007d15 	.word	0x08007d15
 8007c7c:	08007d15 	.word	0x08007d15
 8007c80:	08007d15 	.word	0x08007d15
 8007c84:	08007d15 	.word	0x08007d15
 8007c88:	08007d15 	.word	0x08007d15
 8007c8c:	08007d15 	.word	0x08007d15
 8007c90:	08007d15 	.word	0x08007d15
 8007c94:	08007d07 	.word	0x08007d07
 8007c98:	2b40      	cmp	r3, #64	@ 0x40
 8007c9a:	d037      	beq.n	8007d0c <UART_SetConfig+0x6bc>
 8007c9c:	e03a      	b.n	8007d14 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007c9e:	f7fe f841 	bl	8005d24 <HAL_RCCEx_GetD3PCLK1Freq>
 8007ca2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ca4:	e03c      	b.n	8007d20 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ca6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7fe f850 	bl	8005d50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cb4:	e034      	b.n	8007d20 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cb6:	f107 0318 	add.w	r3, r7, #24
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7fe f99c 	bl	8005ff8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cc4:	e02c      	b.n	8007d20 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cc6:	4b09      	ldr	r3, [pc, #36]	@ (8007cec <UART_SetConfig+0x69c>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 0320 	and.w	r3, r3, #32
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d016      	beq.n	8007d00 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007cd2:	4b06      	ldr	r3, [pc, #24]	@ (8007cec <UART_SetConfig+0x69c>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	08db      	lsrs	r3, r3, #3
 8007cd8:	f003 0303 	and.w	r3, r3, #3
 8007cdc:	4a07      	ldr	r2, [pc, #28]	@ (8007cfc <UART_SetConfig+0x6ac>)
 8007cde:	fa22 f303 	lsr.w	r3, r2, r3
 8007ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ce4:	e01c      	b.n	8007d20 <UART_SetConfig+0x6d0>
 8007ce6:	bf00      	nop
 8007ce8:	40011400 	.word	0x40011400
 8007cec:	58024400 	.word	0x58024400
 8007cf0:	40007800 	.word	0x40007800
 8007cf4:	40007c00 	.word	0x40007c00
 8007cf8:	58000c00 	.word	0x58000c00
 8007cfc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007d00:	4b9d      	ldr	r3, [pc, #628]	@ (8007f78 <UART_SetConfig+0x928>)
 8007d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d04:	e00c      	b.n	8007d20 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007d06:	4b9d      	ldr	r3, [pc, #628]	@ (8007f7c <UART_SetConfig+0x92c>)
 8007d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d0a:	e009      	b.n	8007d20 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d0c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d12:	e005      	b.n	8007d20 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007d14:	2300      	movs	r3, #0
 8007d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007d1e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f000 81de 	beq.w	80080e4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d2c:	4a94      	ldr	r2, [pc, #592]	@ (8007f80 <UART_SetConfig+0x930>)
 8007d2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d32:	461a      	mov	r2, r3
 8007d34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d36:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d3a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	685a      	ldr	r2, [r3, #4]
 8007d40:	4613      	mov	r3, r2
 8007d42:	005b      	lsls	r3, r3, #1
 8007d44:	4413      	add	r3, r2
 8007d46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d305      	bcc.n	8007d58 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d903      	bls.n	8007d60 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007d5e:	e1c1      	b.n	80080e4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d62:	2200      	movs	r2, #0
 8007d64:	60bb      	str	r3, [r7, #8]
 8007d66:	60fa      	str	r2, [r7, #12]
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d6c:	4a84      	ldr	r2, [pc, #528]	@ (8007f80 <UART_SetConfig+0x930>)
 8007d6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	2200      	movs	r2, #0
 8007d76:	603b      	str	r3, [r7, #0]
 8007d78:	607a      	str	r2, [r7, #4]
 8007d7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d82:	f7f8 fafd 	bl	8000380 <__aeabi_uldivmod>
 8007d86:	4602      	mov	r2, r0
 8007d88:	460b      	mov	r3, r1
 8007d8a:	4610      	mov	r0, r2
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	f04f 0200 	mov.w	r2, #0
 8007d92:	f04f 0300 	mov.w	r3, #0
 8007d96:	020b      	lsls	r3, r1, #8
 8007d98:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d9c:	0202      	lsls	r2, r0, #8
 8007d9e:	6979      	ldr	r1, [r7, #20]
 8007da0:	6849      	ldr	r1, [r1, #4]
 8007da2:	0849      	lsrs	r1, r1, #1
 8007da4:	2000      	movs	r0, #0
 8007da6:	460c      	mov	r4, r1
 8007da8:	4605      	mov	r5, r0
 8007daa:	eb12 0804 	adds.w	r8, r2, r4
 8007dae:	eb43 0905 	adc.w	r9, r3, r5
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	469a      	mov	sl, r3
 8007dba:	4693      	mov	fp, r2
 8007dbc:	4652      	mov	r2, sl
 8007dbe:	465b      	mov	r3, fp
 8007dc0:	4640      	mov	r0, r8
 8007dc2:	4649      	mov	r1, r9
 8007dc4:	f7f8 fadc 	bl	8000380 <__aeabi_uldivmod>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	460b      	mov	r3, r1
 8007dcc:	4613      	mov	r3, r2
 8007dce:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007dd6:	d308      	bcc.n	8007dea <UART_SetConfig+0x79a>
 8007dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007dde:	d204      	bcs.n	8007dea <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007de6:	60da      	str	r2, [r3, #12]
 8007de8:	e17c      	b.n	80080e4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007df0:	e178      	b.n	80080e4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	69db      	ldr	r3, [r3, #28]
 8007df6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007dfa:	f040 80c5 	bne.w	8007f88 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007dfe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007e02:	2b20      	cmp	r3, #32
 8007e04:	dc48      	bgt.n	8007e98 <UART_SetConfig+0x848>
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	db7b      	blt.n	8007f02 <UART_SetConfig+0x8b2>
 8007e0a:	2b20      	cmp	r3, #32
 8007e0c:	d879      	bhi.n	8007f02 <UART_SetConfig+0x8b2>
 8007e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e14 <UART_SetConfig+0x7c4>)
 8007e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e14:	08007e9f 	.word	0x08007e9f
 8007e18:	08007ea7 	.word	0x08007ea7
 8007e1c:	08007f03 	.word	0x08007f03
 8007e20:	08007f03 	.word	0x08007f03
 8007e24:	08007eaf 	.word	0x08007eaf
 8007e28:	08007f03 	.word	0x08007f03
 8007e2c:	08007f03 	.word	0x08007f03
 8007e30:	08007f03 	.word	0x08007f03
 8007e34:	08007ebf 	.word	0x08007ebf
 8007e38:	08007f03 	.word	0x08007f03
 8007e3c:	08007f03 	.word	0x08007f03
 8007e40:	08007f03 	.word	0x08007f03
 8007e44:	08007f03 	.word	0x08007f03
 8007e48:	08007f03 	.word	0x08007f03
 8007e4c:	08007f03 	.word	0x08007f03
 8007e50:	08007f03 	.word	0x08007f03
 8007e54:	08007ecf 	.word	0x08007ecf
 8007e58:	08007f03 	.word	0x08007f03
 8007e5c:	08007f03 	.word	0x08007f03
 8007e60:	08007f03 	.word	0x08007f03
 8007e64:	08007f03 	.word	0x08007f03
 8007e68:	08007f03 	.word	0x08007f03
 8007e6c:	08007f03 	.word	0x08007f03
 8007e70:	08007f03 	.word	0x08007f03
 8007e74:	08007f03 	.word	0x08007f03
 8007e78:	08007f03 	.word	0x08007f03
 8007e7c:	08007f03 	.word	0x08007f03
 8007e80:	08007f03 	.word	0x08007f03
 8007e84:	08007f03 	.word	0x08007f03
 8007e88:	08007f03 	.word	0x08007f03
 8007e8c:	08007f03 	.word	0x08007f03
 8007e90:	08007f03 	.word	0x08007f03
 8007e94:	08007ef5 	.word	0x08007ef5
 8007e98:	2b40      	cmp	r3, #64	@ 0x40
 8007e9a:	d02e      	beq.n	8007efa <UART_SetConfig+0x8aa>
 8007e9c:	e031      	b.n	8007f02 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e9e:	f7fc fd0b 	bl	80048b8 <HAL_RCC_GetPCLK1Freq>
 8007ea2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ea4:	e033      	b.n	8007f0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ea6:	f7fc fd1d 	bl	80048e4 <HAL_RCC_GetPCLK2Freq>
 8007eaa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007eac:	e02f      	b.n	8007f0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007eae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7fd ff4c 	bl	8005d50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ebc:	e027      	b.n	8007f0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ebe:	f107 0318 	add.w	r3, r7, #24
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7fe f898 	bl	8005ff8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ecc:	e01f      	b.n	8007f0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ece:	4b2d      	ldr	r3, [pc, #180]	@ (8007f84 <UART_SetConfig+0x934>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 0320 	and.w	r3, r3, #32
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d009      	beq.n	8007eee <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007eda:	4b2a      	ldr	r3, [pc, #168]	@ (8007f84 <UART_SetConfig+0x934>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	08db      	lsrs	r3, r3, #3
 8007ee0:	f003 0303 	and.w	r3, r3, #3
 8007ee4:	4a24      	ldr	r2, [pc, #144]	@ (8007f78 <UART_SetConfig+0x928>)
 8007ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8007eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007eec:	e00f      	b.n	8007f0e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007eee:	4b22      	ldr	r3, [pc, #136]	@ (8007f78 <UART_SetConfig+0x928>)
 8007ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ef2:	e00c      	b.n	8007f0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007ef4:	4b21      	ldr	r3, [pc, #132]	@ (8007f7c <UART_SetConfig+0x92c>)
 8007ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ef8:	e009      	b.n	8007f0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007efa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f00:	e005      	b.n	8007f0e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007f02:	2300      	movs	r3, #0
 8007f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007f0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f000 80e7 	beq.w	80080e4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f1a:	4a19      	ldr	r2, [pc, #100]	@ (8007f80 <UART_SetConfig+0x930>)
 8007f1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f20:	461a      	mov	r2, r3
 8007f22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f24:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f28:	005a      	lsls	r2, r3, #1
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	085b      	lsrs	r3, r3, #1
 8007f30:	441a      	add	r2, r3
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f3e:	2b0f      	cmp	r3, #15
 8007f40:	d916      	bls.n	8007f70 <UART_SetConfig+0x920>
 8007f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f48:	d212      	bcs.n	8007f70 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	f023 030f 	bic.w	r3, r3, #15
 8007f52:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f56:	085b      	lsrs	r3, r3, #1
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	f003 0307 	and.w	r3, r3, #7
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007f62:	4313      	orrs	r3, r2
 8007f64:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007f6c:	60da      	str	r2, [r3, #12]
 8007f6e:	e0b9      	b.n	80080e4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007f76:	e0b5      	b.n	80080e4 <UART_SetConfig+0xa94>
 8007f78:	03d09000 	.word	0x03d09000
 8007f7c:	003d0900 	.word	0x003d0900
 8007f80:	0800b9c4 	.word	0x0800b9c4
 8007f84:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f88:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007f8c:	2b20      	cmp	r3, #32
 8007f8e:	dc49      	bgt.n	8008024 <UART_SetConfig+0x9d4>
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	db7c      	blt.n	800808e <UART_SetConfig+0xa3e>
 8007f94:	2b20      	cmp	r3, #32
 8007f96:	d87a      	bhi.n	800808e <UART_SetConfig+0xa3e>
 8007f98:	a201      	add	r2, pc, #4	@ (adr r2, 8007fa0 <UART_SetConfig+0x950>)
 8007f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f9e:	bf00      	nop
 8007fa0:	0800802b 	.word	0x0800802b
 8007fa4:	08008033 	.word	0x08008033
 8007fa8:	0800808f 	.word	0x0800808f
 8007fac:	0800808f 	.word	0x0800808f
 8007fb0:	0800803b 	.word	0x0800803b
 8007fb4:	0800808f 	.word	0x0800808f
 8007fb8:	0800808f 	.word	0x0800808f
 8007fbc:	0800808f 	.word	0x0800808f
 8007fc0:	0800804b 	.word	0x0800804b
 8007fc4:	0800808f 	.word	0x0800808f
 8007fc8:	0800808f 	.word	0x0800808f
 8007fcc:	0800808f 	.word	0x0800808f
 8007fd0:	0800808f 	.word	0x0800808f
 8007fd4:	0800808f 	.word	0x0800808f
 8007fd8:	0800808f 	.word	0x0800808f
 8007fdc:	0800808f 	.word	0x0800808f
 8007fe0:	0800805b 	.word	0x0800805b
 8007fe4:	0800808f 	.word	0x0800808f
 8007fe8:	0800808f 	.word	0x0800808f
 8007fec:	0800808f 	.word	0x0800808f
 8007ff0:	0800808f 	.word	0x0800808f
 8007ff4:	0800808f 	.word	0x0800808f
 8007ff8:	0800808f 	.word	0x0800808f
 8007ffc:	0800808f 	.word	0x0800808f
 8008000:	0800808f 	.word	0x0800808f
 8008004:	0800808f 	.word	0x0800808f
 8008008:	0800808f 	.word	0x0800808f
 800800c:	0800808f 	.word	0x0800808f
 8008010:	0800808f 	.word	0x0800808f
 8008014:	0800808f 	.word	0x0800808f
 8008018:	0800808f 	.word	0x0800808f
 800801c:	0800808f 	.word	0x0800808f
 8008020:	08008081 	.word	0x08008081
 8008024:	2b40      	cmp	r3, #64	@ 0x40
 8008026:	d02e      	beq.n	8008086 <UART_SetConfig+0xa36>
 8008028:	e031      	b.n	800808e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800802a:	f7fc fc45 	bl	80048b8 <HAL_RCC_GetPCLK1Freq>
 800802e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008030:	e033      	b.n	800809a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008032:	f7fc fc57 	bl	80048e4 <HAL_RCC_GetPCLK2Freq>
 8008036:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008038:	e02f      	b.n	800809a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800803a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800803e:	4618      	mov	r0, r3
 8008040:	f7fd fe86 	bl	8005d50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008046:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008048:	e027      	b.n	800809a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800804a:	f107 0318 	add.w	r3, r7, #24
 800804e:	4618      	mov	r0, r3
 8008050:	f7fd ffd2 	bl	8005ff8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008058:	e01f      	b.n	800809a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800805a:	4b2d      	ldr	r3, [pc, #180]	@ (8008110 <UART_SetConfig+0xac0>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f003 0320 	and.w	r3, r3, #32
 8008062:	2b00      	cmp	r3, #0
 8008064:	d009      	beq.n	800807a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008066:	4b2a      	ldr	r3, [pc, #168]	@ (8008110 <UART_SetConfig+0xac0>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	08db      	lsrs	r3, r3, #3
 800806c:	f003 0303 	and.w	r3, r3, #3
 8008070:	4a28      	ldr	r2, [pc, #160]	@ (8008114 <UART_SetConfig+0xac4>)
 8008072:	fa22 f303 	lsr.w	r3, r2, r3
 8008076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008078:	e00f      	b.n	800809a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800807a:	4b26      	ldr	r3, [pc, #152]	@ (8008114 <UART_SetConfig+0xac4>)
 800807c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800807e:	e00c      	b.n	800809a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008080:	4b25      	ldr	r3, [pc, #148]	@ (8008118 <UART_SetConfig+0xac8>)
 8008082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008084:	e009      	b.n	800809a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008086:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800808a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800808c:	e005      	b.n	800809a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800808e:	2300      	movs	r3, #0
 8008090:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008098:	bf00      	nop
    }

    if (pclk != 0U)
 800809a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800809c:	2b00      	cmp	r3, #0
 800809e:	d021      	beq.n	80080e4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080a4:	4a1d      	ldr	r2, [pc, #116]	@ (800811c <UART_SetConfig+0xacc>)
 80080a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080aa:	461a      	mov	r2, r3
 80080ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	085b      	lsrs	r3, r3, #1
 80080b8:	441a      	add	r2, r3
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	fbb2 f3f3 	udiv	r3, r2, r3
 80080c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c6:	2b0f      	cmp	r3, #15
 80080c8:	d909      	bls.n	80080de <UART_SetConfig+0xa8e>
 80080ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080d0:	d205      	bcs.n	80080de <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80080d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	60da      	str	r2, [r3, #12]
 80080dc:	e002      	b.n	80080e4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	2200      	movs	r2, #0
 80080f8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	2200      	movs	r2, #0
 80080fe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008100:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008104:	4618      	mov	r0, r3
 8008106:	3748      	adds	r7, #72	@ 0x48
 8008108:	46bd      	mov	sp, r7
 800810a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800810e:	bf00      	nop
 8008110:	58024400 	.word	0x58024400
 8008114:	03d09000 	.word	0x03d09000
 8008118:	003d0900 	.word	0x003d0900
 800811c:	0800b9c4 	.word	0x0800b9c4

08008120 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008120:	b480      	push	{r7}
 8008122:	b083      	sub	sp, #12
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800812c:	f003 0308 	and.w	r3, r3, #8
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00a      	beq.n	800814a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	430a      	orrs	r2, r1
 8008148:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800814e:	f003 0301 	and.w	r3, r3, #1
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00a      	beq.n	800816c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	430a      	orrs	r2, r1
 800816a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008170:	f003 0302 	and.w	r3, r3, #2
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00a      	beq.n	800818e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	430a      	orrs	r2, r1
 800818c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008192:	f003 0304 	and.w	r3, r3, #4
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00a      	beq.n	80081b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	430a      	orrs	r2, r1
 80081ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081b4:	f003 0310 	and.w	r3, r3, #16
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d00a      	beq.n	80081d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	430a      	orrs	r2, r1
 80081d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081d6:	f003 0320 	and.w	r3, r3, #32
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00a      	beq.n	80081f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	430a      	orrs	r2, r1
 80081f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d01a      	beq.n	8008236 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	430a      	orrs	r2, r1
 8008214:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800821a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800821e:	d10a      	bne.n	8008236 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	430a      	orrs	r2, r1
 8008234:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800823a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800823e:	2b00      	cmp	r3, #0
 8008240:	d00a      	beq.n	8008258 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	430a      	orrs	r2, r1
 8008256:	605a      	str	r2, [r3, #4]
  }
}
 8008258:	bf00      	nop
 800825a:	370c      	adds	r7, #12
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b098      	sub	sp, #96	@ 0x60
 8008268:	af02      	add	r7, sp, #8
 800826a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008274:	f7fa fb86 	bl	8002984 <HAL_GetTick>
 8008278:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f003 0308 	and.w	r3, r3, #8
 8008284:	2b08      	cmp	r3, #8
 8008286:	d12f      	bne.n	80082e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008288:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800828c:	9300      	str	r3, [sp, #0]
 800828e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008290:	2200      	movs	r2, #0
 8008292:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 f88e 	bl	80083b8 <UART_WaitOnFlagUntilTimeout>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d022      	beq.n	80082e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082aa:	e853 3f00 	ldrex	r3, [r3]
 80082ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80082b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	461a      	mov	r2, r3
 80082be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80082c2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80082c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80082c8:	e841 2300 	strex	r3, r2, [r1]
 80082cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80082ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d1e6      	bne.n	80082a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2220      	movs	r2, #32
 80082d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082e4:	2303      	movs	r3, #3
 80082e6:	e063      	b.n	80083b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f003 0304 	and.w	r3, r3, #4
 80082f2:	2b04      	cmp	r3, #4
 80082f4:	d149      	bne.n	800838a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082f6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80082fa:	9300      	str	r3, [sp, #0]
 80082fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082fe:	2200      	movs	r2, #0
 8008300:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 f857 	bl	80083b8 <UART_WaitOnFlagUntilTimeout>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d03c      	beq.n	800838a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008318:	e853 3f00 	ldrex	r3, [r3]
 800831c:	623b      	str	r3, [r7, #32]
   return(result);
 800831e:	6a3b      	ldr	r3, [r7, #32]
 8008320:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008324:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	461a      	mov	r2, r3
 800832c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800832e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008330:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008332:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008334:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008336:	e841 2300 	strex	r3, r2, [r1]
 800833a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800833c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800833e:	2b00      	cmp	r3, #0
 8008340:	d1e6      	bne.n	8008310 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	3308      	adds	r3, #8
 8008348:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	e853 3f00 	ldrex	r3, [r3]
 8008350:	60fb      	str	r3, [r7, #12]
   return(result);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f023 0301 	bic.w	r3, r3, #1
 8008358:	64bb      	str	r3, [r7, #72]	@ 0x48
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	3308      	adds	r3, #8
 8008360:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008362:	61fa      	str	r2, [r7, #28]
 8008364:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008366:	69b9      	ldr	r1, [r7, #24]
 8008368:	69fa      	ldr	r2, [r7, #28]
 800836a:	e841 2300 	strex	r3, r2, [r1]
 800836e:	617b      	str	r3, [r7, #20]
   return(result);
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d1e5      	bne.n	8008342 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2220      	movs	r2, #32
 800837a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008386:	2303      	movs	r3, #3
 8008388:	e012      	b.n	80083b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2220      	movs	r2, #32
 800838e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2220      	movs	r2, #32
 8008396:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80083ae:	2300      	movs	r3, #0
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3758      	adds	r7, #88	@ 0x58
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	603b      	str	r3, [r7, #0]
 80083c4:	4613      	mov	r3, r2
 80083c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083c8:	e04f      	b.n	800846a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083ca:	69bb      	ldr	r3, [r7, #24]
 80083cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083d0:	d04b      	beq.n	800846a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083d2:	f7fa fad7 	bl	8002984 <HAL_GetTick>
 80083d6:	4602      	mov	r2, r0
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	1ad3      	subs	r3, r2, r3
 80083dc:	69ba      	ldr	r2, [r7, #24]
 80083de:	429a      	cmp	r2, r3
 80083e0:	d302      	bcc.n	80083e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d101      	bne.n	80083ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80083e8:	2303      	movs	r3, #3
 80083ea:	e04e      	b.n	800848a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f003 0304 	and.w	r3, r3, #4
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d037      	beq.n	800846a <UART_WaitOnFlagUntilTimeout+0xb2>
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	2b80      	cmp	r3, #128	@ 0x80
 80083fe:	d034      	beq.n	800846a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	2b40      	cmp	r3, #64	@ 0x40
 8008404:	d031      	beq.n	800846a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	69db      	ldr	r3, [r3, #28]
 800840c:	f003 0308 	and.w	r3, r3, #8
 8008410:	2b08      	cmp	r3, #8
 8008412:	d110      	bne.n	8008436 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2208      	movs	r2, #8
 800841a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800841c:	68f8      	ldr	r0, [r7, #12]
 800841e:	f000 f839 	bl	8008494 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2208      	movs	r2, #8
 8008426:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2200      	movs	r2, #0
 800842e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e029      	b.n	800848a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	69db      	ldr	r3, [r3, #28]
 800843c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008440:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008444:	d111      	bne.n	800846a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800844e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008450:	68f8      	ldr	r0, [r7, #12]
 8008452:	f000 f81f 	bl	8008494 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2220      	movs	r2, #32
 800845a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008466:	2303      	movs	r3, #3
 8008468:	e00f      	b.n	800848a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	69da      	ldr	r2, [r3, #28]
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	4013      	ands	r3, r2
 8008474:	68ba      	ldr	r2, [r7, #8]
 8008476:	429a      	cmp	r2, r3
 8008478:	bf0c      	ite	eq
 800847a:	2301      	moveq	r3, #1
 800847c:	2300      	movne	r3, #0
 800847e:	b2db      	uxtb	r3, r3
 8008480:	461a      	mov	r2, r3
 8008482:	79fb      	ldrb	r3, [r7, #7]
 8008484:	429a      	cmp	r2, r3
 8008486:	d0a0      	beq.n	80083ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008488:	2300      	movs	r3, #0
}
 800848a:	4618      	mov	r0, r3
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
	...

08008494 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008494:	b480      	push	{r7}
 8008496:	b095      	sub	sp, #84	@ 0x54
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084a4:	e853 3f00 	ldrex	r3, [r3]
 80084a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80084aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80084b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	461a      	mov	r2, r3
 80084b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80084bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80084c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80084c2:	e841 2300 	strex	r3, r2, [r1]
 80084c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80084c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d1e6      	bne.n	800849c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	3308      	adds	r3, #8
 80084d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d6:	6a3b      	ldr	r3, [r7, #32]
 80084d8:	e853 3f00 	ldrex	r3, [r3]
 80084dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80084de:	69fa      	ldr	r2, [r7, #28]
 80084e0:	4b1e      	ldr	r3, [pc, #120]	@ (800855c <UART_EndRxTransfer+0xc8>)
 80084e2:	4013      	ands	r3, r2
 80084e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	3308      	adds	r3, #8
 80084ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80084ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80084f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80084f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084f6:	e841 2300 	strex	r3, r2, [r1]
 80084fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80084fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d1e5      	bne.n	80084ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008506:	2b01      	cmp	r3, #1
 8008508:	d118      	bne.n	800853c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	e853 3f00 	ldrex	r3, [r3]
 8008516:	60bb      	str	r3, [r7, #8]
   return(result);
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	f023 0310 	bic.w	r3, r3, #16
 800851e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	461a      	mov	r2, r3
 8008526:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008528:	61bb      	str	r3, [r7, #24]
 800852a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800852c:	6979      	ldr	r1, [r7, #20]
 800852e:	69ba      	ldr	r2, [r7, #24]
 8008530:	e841 2300 	strex	r3, r2, [r1]
 8008534:	613b      	str	r3, [r7, #16]
   return(result);
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d1e6      	bne.n	800850a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2220      	movs	r2, #32
 8008540:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008550:	bf00      	nop
 8008552:	3754      	adds	r7, #84	@ 0x54
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr
 800855c:	effffffe 	.word	0xeffffffe

08008560 <std>:
 8008560:	2300      	movs	r3, #0
 8008562:	b510      	push	{r4, lr}
 8008564:	4604      	mov	r4, r0
 8008566:	e9c0 3300 	strd	r3, r3, [r0]
 800856a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800856e:	6083      	str	r3, [r0, #8]
 8008570:	8181      	strh	r1, [r0, #12]
 8008572:	6643      	str	r3, [r0, #100]	@ 0x64
 8008574:	81c2      	strh	r2, [r0, #14]
 8008576:	6183      	str	r3, [r0, #24]
 8008578:	4619      	mov	r1, r3
 800857a:	2208      	movs	r2, #8
 800857c:	305c      	adds	r0, #92	@ 0x5c
 800857e:	f000 f906 	bl	800878e <memset>
 8008582:	4b0d      	ldr	r3, [pc, #52]	@ (80085b8 <std+0x58>)
 8008584:	6263      	str	r3, [r4, #36]	@ 0x24
 8008586:	4b0d      	ldr	r3, [pc, #52]	@ (80085bc <std+0x5c>)
 8008588:	62a3      	str	r3, [r4, #40]	@ 0x28
 800858a:	4b0d      	ldr	r3, [pc, #52]	@ (80085c0 <std+0x60>)
 800858c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800858e:	4b0d      	ldr	r3, [pc, #52]	@ (80085c4 <std+0x64>)
 8008590:	6323      	str	r3, [r4, #48]	@ 0x30
 8008592:	4b0d      	ldr	r3, [pc, #52]	@ (80085c8 <std+0x68>)
 8008594:	6224      	str	r4, [r4, #32]
 8008596:	429c      	cmp	r4, r3
 8008598:	d006      	beq.n	80085a8 <std+0x48>
 800859a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800859e:	4294      	cmp	r4, r2
 80085a0:	d002      	beq.n	80085a8 <std+0x48>
 80085a2:	33d0      	adds	r3, #208	@ 0xd0
 80085a4:	429c      	cmp	r4, r3
 80085a6:	d105      	bne.n	80085b4 <std+0x54>
 80085a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80085ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085b0:	f000 b966 	b.w	8008880 <__retarget_lock_init_recursive>
 80085b4:	bd10      	pop	{r4, pc}
 80085b6:	bf00      	nop
 80085b8:	08008709 	.word	0x08008709
 80085bc:	0800872b 	.word	0x0800872b
 80085c0:	08008763 	.word	0x08008763
 80085c4:	08008787 	.word	0x08008787
 80085c8:	240001e8 	.word	0x240001e8

080085cc <stdio_exit_handler>:
 80085cc:	4a02      	ldr	r2, [pc, #8]	@ (80085d8 <stdio_exit_handler+0xc>)
 80085ce:	4903      	ldr	r1, [pc, #12]	@ (80085dc <stdio_exit_handler+0x10>)
 80085d0:	4803      	ldr	r0, [pc, #12]	@ (80085e0 <stdio_exit_handler+0x14>)
 80085d2:	f000 b869 	b.w	80086a8 <_fwalk_sglue>
 80085d6:	bf00      	nop
 80085d8:	2400002c 	.word	0x2400002c
 80085dc:	0800911d 	.word	0x0800911d
 80085e0:	2400003c 	.word	0x2400003c

080085e4 <cleanup_stdio>:
 80085e4:	6841      	ldr	r1, [r0, #4]
 80085e6:	4b0c      	ldr	r3, [pc, #48]	@ (8008618 <cleanup_stdio+0x34>)
 80085e8:	4299      	cmp	r1, r3
 80085ea:	b510      	push	{r4, lr}
 80085ec:	4604      	mov	r4, r0
 80085ee:	d001      	beq.n	80085f4 <cleanup_stdio+0x10>
 80085f0:	f000 fd94 	bl	800911c <_fflush_r>
 80085f4:	68a1      	ldr	r1, [r4, #8]
 80085f6:	4b09      	ldr	r3, [pc, #36]	@ (800861c <cleanup_stdio+0x38>)
 80085f8:	4299      	cmp	r1, r3
 80085fa:	d002      	beq.n	8008602 <cleanup_stdio+0x1e>
 80085fc:	4620      	mov	r0, r4
 80085fe:	f000 fd8d 	bl	800911c <_fflush_r>
 8008602:	68e1      	ldr	r1, [r4, #12]
 8008604:	4b06      	ldr	r3, [pc, #24]	@ (8008620 <cleanup_stdio+0x3c>)
 8008606:	4299      	cmp	r1, r3
 8008608:	d004      	beq.n	8008614 <cleanup_stdio+0x30>
 800860a:	4620      	mov	r0, r4
 800860c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008610:	f000 bd84 	b.w	800911c <_fflush_r>
 8008614:	bd10      	pop	{r4, pc}
 8008616:	bf00      	nop
 8008618:	240001e8 	.word	0x240001e8
 800861c:	24000250 	.word	0x24000250
 8008620:	240002b8 	.word	0x240002b8

08008624 <global_stdio_init.part.0>:
 8008624:	b510      	push	{r4, lr}
 8008626:	4b0b      	ldr	r3, [pc, #44]	@ (8008654 <global_stdio_init.part.0+0x30>)
 8008628:	4c0b      	ldr	r4, [pc, #44]	@ (8008658 <global_stdio_init.part.0+0x34>)
 800862a:	4a0c      	ldr	r2, [pc, #48]	@ (800865c <global_stdio_init.part.0+0x38>)
 800862c:	601a      	str	r2, [r3, #0]
 800862e:	4620      	mov	r0, r4
 8008630:	2200      	movs	r2, #0
 8008632:	2104      	movs	r1, #4
 8008634:	f7ff ff94 	bl	8008560 <std>
 8008638:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800863c:	2201      	movs	r2, #1
 800863e:	2109      	movs	r1, #9
 8008640:	f7ff ff8e 	bl	8008560 <std>
 8008644:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008648:	2202      	movs	r2, #2
 800864a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800864e:	2112      	movs	r1, #18
 8008650:	f7ff bf86 	b.w	8008560 <std>
 8008654:	24000320 	.word	0x24000320
 8008658:	240001e8 	.word	0x240001e8
 800865c:	080085cd 	.word	0x080085cd

08008660 <__sfp_lock_acquire>:
 8008660:	4801      	ldr	r0, [pc, #4]	@ (8008668 <__sfp_lock_acquire+0x8>)
 8008662:	f000 b90e 	b.w	8008882 <__retarget_lock_acquire_recursive>
 8008666:	bf00      	nop
 8008668:	24000329 	.word	0x24000329

0800866c <__sfp_lock_release>:
 800866c:	4801      	ldr	r0, [pc, #4]	@ (8008674 <__sfp_lock_release+0x8>)
 800866e:	f000 b909 	b.w	8008884 <__retarget_lock_release_recursive>
 8008672:	bf00      	nop
 8008674:	24000329 	.word	0x24000329

08008678 <__sinit>:
 8008678:	b510      	push	{r4, lr}
 800867a:	4604      	mov	r4, r0
 800867c:	f7ff fff0 	bl	8008660 <__sfp_lock_acquire>
 8008680:	6a23      	ldr	r3, [r4, #32]
 8008682:	b11b      	cbz	r3, 800868c <__sinit+0x14>
 8008684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008688:	f7ff bff0 	b.w	800866c <__sfp_lock_release>
 800868c:	4b04      	ldr	r3, [pc, #16]	@ (80086a0 <__sinit+0x28>)
 800868e:	6223      	str	r3, [r4, #32]
 8008690:	4b04      	ldr	r3, [pc, #16]	@ (80086a4 <__sinit+0x2c>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d1f5      	bne.n	8008684 <__sinit+0xc>
 8008698:	f7ff ffc4 	bl	8008624 <global_stdio_init.part.0>
 800869c:	e7f2      	b.n	8008684 <__sinit+0xc>
 800869e:	bf00      	nop
 80086a0:	080085e5 	.word	0x080085e5
 80086a4:	24000320 	.word	0x24000320

080086a8 <_fwalk_sglue>:
 80086a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086ac:	4607      	mov	r7, r0
 80086ae:	4688      	mov	r8, r1
 80086b0:	4614      	mov	r4, r2
 80086b2:	2600      	movs	r6, #0
 80086b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80086b8:	f1b9 0901 	subs.w	r9, r9, #1
 80086bc:	d505      	bpl.n	80086ca <_fwalk_sglue+0x22>
 80086be:	6824      	ldr	r4, [r4, #0]
 80086c0:	2c00      	cmp	r4, #0
 80086c2:	d1f7      	bne.n	80086b4 <_fwalk_sglue+0xc>
 80086c4:	4630      	mov	r0, r6
 80086c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086ca:	89ab      	ldrh	r3, [r5, #12]
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d907      	bls.n	80086e0 <_fwalk_sglue+0x38>
 80086d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80086d4:	3301      	adds	r3, #1
 80086d6:	d003      	beq.n	80086e0 <_fwalk_sglue+0x38>
 80086d8:	4629      	mov	r1, r5
 80086da:	4638      	mov	r0, r7
 80086dc:	47c0      	blx	r8
 80086de:	4306      	orrs	r6, r0
 80086e0:	3568      	adds	r5, #104	@ 0x68
 80086e2:	e7e9      	b.n	80086b8 <_fwalk_sglue+0x10>

080086e4 <iprintf>:
 80086e4:	b40f      	push	{r0, r1, r2, r3}
 80086e6:	b507      	push	{r0, r1, r2, lr}
 80086e8:	4906      	ldr	r1, [pc, #24]	@ (8008704 <iprintf+0x20>)
 80086ea:	ab04      	add	r3, sp, #16
 80086ec:	6808      	ldr	r0, [r1, #0]
 80086ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80086f2:	6881      	ldr	r1, [r0, #8]
 80086f4:	9301      	str	r3, [sp, #4]
 80086f6:	f000 f9e9 	bl	8008acc <_vfiprintf_r>
 80086fa:	b003      	add	sp, #12
 80086fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008700:	b004      	add	sp, #16
 8008702:	4770      	bx	lr
 8008704:	24000038 	.word	0x24000038

08008708 <__sread>:
 8008708:	b510      	push	{r4, lr}
 800870a:	460c      	mov	r4, r1
 800870c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008710:	f000 f868 	bl	80087e4 <_read_r>
 8008714:	2800      	cmp	r0, #0
 8008716:	bfab      	itete	ge
 8008718:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800871a:	89a3      	ldrhlt	r3, [r4, #12]
 800871c:	181b      	addge	r3, r3, r0
 800871e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008722:	bfac      	ite	ge
 8008724:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008726:	81a3      	strhlt	r3, [r4, #12]
 8008728:	bd10      	pop	{r4, pc}

0800872a <__swrite>:
 800872a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800872e:	461f      	mov	r7, r3
 8008730:	898b      	ldrh	r3, [r1, #12]
 8008732:	05db      	lsls	r3, r3, #23
 8008734:	4605      	mov	r5, r0
 8008736:	460c      	mov	r4, r1
 8008738:	4616      	mov	r6, r2
 800873a:	d505      	bpl.n	8008748 <__swrite+0x1e>
 800873c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008740:	2302      	movs	r3, #2
 8008742:	2200      	movs	r2, #0
 8008744:	f000 f83c 	bl	80087c0 <_lseek_r>
 8008748:	89a3      	ldrh	r3, [r4, #12]
 800874a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800874e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008752:	81a3      	strh	r3, [r4, #12]
 8008754:	4632      	mov	r2, r6
 8008756:	463b      	mov	r3, r7
 8008758:	4628      	mov	r0, r5
 800875a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800875e:	f000 b853 	b.w	8008808 <_write_r>

08008762 <__sseek>:
 8008762:	b510      	push	{r4, lr}
 8008764:	460c      	mov	r4, r1
 8008766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800876a:	f000 f829 	bl	80087c0 <_lseek_r>
 800876e:	1c43      	adds	r3, r0, #1
 8008770:	89a3      	ldrh	r3, [r4, #12]
 8008772:	bf15      	itete	ne
 8008774:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008776:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800877a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800877e:	81a3      	strheq	r3, [r4, #12]
 8008780:	bf18      	it	ne
 8008782:	81a3      	strhne	r3, [r4, #12]
 8008784:	bd10      	pop	{r4, pc}

08008786 <__sclose>:
 8008786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800878a:	f000 b809 	b.w	80087a0 <_close_r>

0800878e <memset>:
 800878e:	4402      	add	r2, r0
 8008790:	4603      	mov	r3, r0
 8008792:	4293      	cmp	r3, r2
 8008794:	d100      	bne.n	8008798 <memset+0xa>
 8008796:	4770      	bx	lr
 8008798:	f803 1b01 	strb.w	r1, [r3], #1
 800879c:	e7f9      	b.n	8008792 <memset+0x4>
	...

080087a0 <_close_r>:
 80087a0:	b538      	push	{r3, r4, r5, lr}
 80087a2:	4d06      	ldr	r5, [pc, #24]	@ (80087bc <_close_r+0x1c>)
 80087a4:	2300      	movs	r3, #0
 80087a6:	4604      	mov	r4, r0
 80087a8:	4608      	mov	r0, r1
 80087aa:	602b      	str	r3, [r5, #0]
 80087ac:	f7f9 fcc0 	bl	8002130 <_close>
 80087b0:	1c43      	adds	r3, r0, #1
 80087b2:	d102      	bne.n	80087ba <_close_r+0x1a>
 80087b4:	682b      	ldr	r3, [r5, #0]
 80087b6:	b103      	cbz	r3, 80087ba <_close_r+0x1a>
 80087b8:	6023      	str	r3, [r4, #0]
 80087ba:	bd38      	pop	{r3, r4, r5, pc}
 80087bc:	24000324 	.word	0x24000324

080087c0 <_lseek_r>:
 80087c0:	b538      	push	{r3, r4, r5, lr}
 80087c2:	4d07      	ldr	r5, [pc, #28]	@ (80087e0 <_lseek_r+0x20>)
 80087c4:	4604      	mov	r4, r0
 80087c6:	4608      	mov	r0, r1
 80087c8:	4611      	mov	r1, r2
 80087ca:	2200      	movs	r2, #0
 80087cc:	602a      	str	r2, [r5, #0]
 80087ce:	461a      	mov	r2, r3
 80087d0:	f7f9 fcd5 	bl	800217e <_lseek>
 80087d4:	1c43      	adds	r3, r0, #1
 80087d6:	d102      	bne.n	80087de <_lseek_r+0x1e>
 80087d8:	682b      	ldr	r3, [r5, #0]
 80087da:	b103      	cbz	r3, 80087de <_lseek_r+0x1e>
 80087dc:	6023      	str	r3, [r4, #0]
 80087de:	bd38      	pop	{r3, r4, r5, pc}
 80087e0:	24000324 	.word	0x24000324

080087e4 <_read_r>:
 80087e4:	b538      	push	{r3, r4, r5, lr}
 80087e6:	4d07      	ldr	r5, [pc, #28]	@ (8008804 <_read_r+0x20>)
 80087e8:	4604      	mov	r4, r0
 80087ea:	4608      	mov	r0, r1
 80087ec:	4611      	mov	r1, r2
 80087ee:	2200      	movs	r2, #0
 80087f0:	602a      	str	r2, [r5, #0]
 80087f2:	461a      	mov	r2, r3
 80087f4:	f7f9 fc63 	bl	80020be <_read>
 80087f8:	1c43      	adds	r3, r0, #1
 80087fa:	d102      	bne.n	8008802 <_read_r+0x1e>
 80087fc:	682b      	ldr	r3, [r5, #0]
 80087fe:	b103      	cbz	r3, 8008802 <_read_r+0x1e>
 8008800:	6023      	str	r3, [r4, #0]
 8008802:	bd38      	pop	{r3, r4, r5, pc}
 8008804:	24000324 	.word	0x24000324

08008808 <_write_r>:
 8008808:	b538      	push	{r3, r4, r5, lr}
 800880a:	4d07      	ldr	r5, [pc, #28]	@ (8008828 <_write_r+0x20>)
 800880c:	4604      	mov	r4, r0
 800880e:	4608      	mov	r0, r1
 8008810:	4611      	mov	r1, r2
 8008812:	2200      	movs	r2, #0
 8008814:	602a      	str	r2, [r5, #0]
 8008816:	461a      	mov	r2, r3
 8008818:	f7f9 fc6e 	bl	80020f8 <_write>
 800881c:	1c43      	adds	r3, r0, #1
 800881e:	d102      	bne.n	8008826 <_write_r+0x1e>
 8008820:	682b      	ldr	r3, [r5, #0]
 8008822:	b103      	cbz	r3, 8008826 <_write_r+0x1e>
 8008824:	6023      	str	r3, [r4, #0]
 8008826:	bd38      	pop	{r3, r4, r5, pc}
 8008828:	24000324 	.word	0x24000324

0800882c <__errno>:
 800882c:	4b01      	ldr	r3, [pc, #4]	@ (8008834 <__errno+0x8>)
 800882e:	6818      	ldr	r0, [r3, #0]
 8008830:	4770      	bx	lr
 8008832:	bf00      	nop
 8008834:	24000038 	.word	0x24000038

08008838 <__libc_init_array>:
 8008838:	b570      	push	{r4, r5, r6, lr}
 800883a:	4d0d      	ldr	r5, [pc, #52]	@ (8008870 <__libc_init_array+0x38>)
 800883c:	4c0d      	ldr	r4, [pc, #52]	@ (8008874 <__libc_init_array+0x3c>)
 800883e:	1b64      	subs	r4, r4, r5
 8008840:	10a4      	asrs	r4, r4, #2
 8008842:	2600      	movs	r6, #0
 8008844:	42a6      	cmp	r6, r4
 8008846:	d109      	bne.n	800885c <__libc_init_array+0x24>
 8008848:	4d0b      	ldr	r5, [pc, #44]	@ (8008878 <__libc_init_array+0x40>)
 800884a:	4c0c      	ldr	r4, [pc, #48]	@ (800887c <__libc_init_array+0x44>)
 800884c:	f000 fdb6 	bl	80093bc <_init>
 8008850:	1b64      	subs	r4, r4, r5
 8008852:	10a4      	asrs	r4, r4, #2
 8008854:	2600      	movs	r6, #0
 8008856:	42a6      	cmp	r6, r4
 8008858:	d105      	bne.n	8008866 <__libc_init_array+0x2e>
 800885a:	bd70      	pop	{r4, r5, r6, pc}
 800885c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008860:	4798      	blx	r3
 8008862:	3601      	adds	r6, #1
 8008864:	e7ee      	b.n	8008844 <__libc_init_array+0xc>
 8008866:	f855 3b04 	ldr.w	r3, [r5], #4
 800886a:	4798      	blx	r3
 800886c:	3601      	adds	r6, #1
 800886e:	e7f2      	b.n	8008856 <__libc_init_array+0x1e>
 8008870:	0800ba18 	.word	0x0800ba18
 8008874:	0800ba18 	.word	0x0800ba18
 8008878:	0800ba18 	.word	0x0800ba18
 800887c:	0800ba1c 	.word	0x0800ba1c

08008880 <__retarget_lock_init_recursive>:
 8008880:	4770      	bx	lr

08008882 <__retarget_lock_acquire_recursive>:
 8008882:	4770      	bx	lr

08008884 <__retarget_lock_release_recursive>:
 8008884:	4770      	bx	lr
	...

08008888 <_free_r>:
 8008888:	b538      	push	{r3, r4, r5, lr}
 800888a:	4605      	mov	r5, r0
 800888c:	2900      	cmp	r1, #0
 800888e:	d041      	beq.n	8008914 <_free_r+0x8c>
 8008890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008894:	1f0c      	subs	r4, r1, #4
 8008896:	2b00      	cmp	r3, #0
 8008898:	bfb8      	it	lt
 800889a:	18e4      	addlt	r4, r4, r3
 800889c:	f000 f8e0 	bl	8008a60 <__malloc_lock>
 80088a0:	4a1d      	ldr	r2, [pc, #116]	@ (8008918 <_free_r+0x90>)
 80088a2:	6813      	ldr	r3, [r2, #0]
 80088a4:	b933      	cbnz	r3, 80088b4 <_free_r+0x2c>
 80088a6:	6063      	str	r3, [r4, #4]
 80088a8:	6014      	str	r4, [r2, #0]
 80088aa:	4628      	mov	r0, r5
 80088ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088b0:	f000 b8dc 	b.w	8008a6c <__malloc_unlock>
 80088b4:	42a3      	cmp	r3, r4
 80088b6:	d908      	bls.n	80088ca <_free_r+0x42>
 80088b8:	6820      	ldr	r0, [r4, #0]
 80088ba:	1821      	adds	r1, r4, r0
 80088bc:	428b      	cmp	r3, r1
 80088be:	bf01      	itttt	eq
 80088c0:	6819      	ldreq	r1, [r3, #0]
 80088c2:	685b      	ldreq	r3, [r3, #4]
 80088c4:	1809      	addeq	r1, r1, r0
 80088c6:	6021      	streq	r1, [r4, #0]
 80088c8:	e7ed      	b.n	80088a6 <_free_r+0x1e>
 80088ca:	461a      	mov	r2, r3
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	b10b      	cbz	r3, 80088d4 <_free_r+0x4c>
 80088d0:	42a3      	cmp	r3, r4
 80088d2:	d9fa      	bls.n	80088ca <_free_r+0x42>
 80088d4:	6811      	ldr	r1, [r2, #0]
 80088d6:	1850      	adds	r0, r2, r1
 80088d8:	42a0      	cmp	r0, r4
 80088da:	d10b      	bne.n	80088f4 <_free_r+0x6c>
 80088dc:	6820      	ldr	r0, [r4, #0]
 80088de:	4401      	add	r1, r0
 80088e0:	1850      	adds	r0, r2, r1
 80088e2:	4283      	cmp	r3, r0
 80088e4:	6011      	str	r1, [r2, #0]
 80088e6:	d1e0      	bne.n	80088aa <_free_r+0x22>
 80088e8:	6818      	ldr	r0, [r3, #0]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	6053      	str	r3, [r2, #4]
 80088ee:	4408      	add	r0, r1
 80088f0:	6010      	str	r0, [r2, #0]
 80088f2:	e7da      	b.n	80088aa <_free_r+0x22>
 80088f4:	d902      	bls.n	80088fc <_free_r+0x74>
 80088f6:	230c      	movs	r3, #12
 80088f8:	602b      	str	r3, [r5, #0]
 80088fa:	e7d6      	b.n	80088aa <_free_r+0x22>
 80088fc:	6820      	ldr	r0, [r4, #0]
 80088fe:	1821      	adds	r1, r4, r0
 8008900:	428b      	cmp	r3, r1
 8008902:	bf04      	itt	eq
 8008904:	6819      	ldreq	r1, [r3, #0]
 8008906:	685b      	ldreq	r3, [r3, #4]
 8008908:	6063      	str	r3, [r4, #4]
 800890a:	bf04      	itt	eq
 800890c:	1809      	addeq	r1, r1, r0
 800890e:	6021      	streq	r1, [r4, #0]
 8008910:	6054      	str	r4, [r2, #4]
 8008912:	e7ca      	b.n	80088aa <_free_r+0x22>
 8008914:	bd38      	pop	{r3, r4, r5, pc}
 8008916:	bf00      	nop
 8008918:	24000330 	.word	0x24000330

0800891c <sbrk_aligned>:
 800891c:	b570      	push	{r4, r5, r6, lr}
 800891e:	4e0f      	ldr	r6, [pc, #60]	@ (800895c <sbrk_aligned+0x40>)
 8008920:	460c      	mov	r4, r1
 8008922:	6831      	ldr	r1, [r6, #0]
 8008924:	4605      	mov	r5, r0
 8008926:	b911      	cbnz	r1, 800892e <sbrk_aligned+0x12>
 8008928:	f000 fcb4 	bl	8009294 <_sbrk_r>
 800892c:	6030      	str	r0, [r6, #0]
 800892e:	4621      	mov	r1, r4
 8008930:	4628      	mov	r0, r5
 8008932:	f000 fcaf 	bl	8009294 <_sbrk_r>
 8008936:	1c43      	adds	r3, r0, #1
 8008938:	d103      	bne.n	8008942 <sbrk_aligned+0x26>
 800893a:	f04f 34ff 	mov.w	r4, #4294967295
 800893e:	4620      	mov	r0, r4
 8008940:	bd70      	pop	{r4, r5, r6, pc}
 8008942:	1cc4      	adds	r4, r0, #3
 8008944:	f024 0403 	bic.w	r4, r4, #3
 8008948:	42a0      	cmp	r0, r4
 800894a:	d0f8      	beq.n	800893e <sbrk_aligned+0x22>
 800894c:	1a21      	subs	r1, r4, r0
 800894e:	4628      	mov	r0, r5
 8008950:	f000 fca0 	bl	8009294 <_sbrk_r>
 8008954:	3001      	adds	r0, #1
 8008956:	d1f2      	bne.n	800893e <sbrk_aligned+0x22>
 8008958:	e7ef      	b.n	800893a <sbrk_aligned+0x1e>
 800895a:	bf00      	nop
 800895c:	2400032c 	.word	0x2400032c

08008960 <_malloc_r>:
 8008960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008964:	1ccd      	adds	r5, r1, #3
 8008966:	f025 0503 	bic.w	r5, r5, #3
 800896a:	3508      	adds	r5, #8
 800896c:	2d0c      	cmp	r5, #12
 800896e:	bf38      	it	cc
 8008970:	250c      	movcc	r5, #12
 8008972:	2d00      	cmp	r5, #0
 8008974:	4606      	mov	r6, r0
 8008976:	db01      	blt.n	800897c <_malloc_r+0x1c>
 8008978:	42a9      	cmp	r1, r5
 800897a:	d904      	bls.n	8008986 <_malloc_r+0x26>
 800897c:	230c      	movs	r3, #12
 800897e:	6033      	str	r3, [r6, #0]
 8008980:	2000      	movs	r0, #0
 8008982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008986:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a5c <_malloc_r+0xfc>
 800898a:	f000 f869 	bl	8008a60 <__malloc_lock>
 800898e:	f8d8 3000 	ldr.w	r3, [r8]
 8008992:	461c      	mov	r4, r3
 8008994:	bb44      	cbnz	r4, 80089e8 <_malloc_r+0x88>
 8008996:	4629      	mov	r1, r5
 8008998:	4630      	mov	r0, r6
 800899a:	f7ff ffbf 	bl	800891c <sbrk_aligned>
 800899e:	1c43      	adds	r3, r0, #1
 80089a0:	4604      	mov	r4, r0
 80089a2:	d158      	bne.n	8008a56 <_malloc_r+0xf6>
 80089a4:	f8d8 4000 	ldr.w	r4, [r8]
 80089a8:	4627      	mov	r7, r4
 80089aa:	2f00      	cmp	r7, #0
 80089ac:	d143      	bne.n	8008a36 <_malloc_r+0xd6>
 80089ae:	2c00      	cmp	r4, #0
 80089b0:	d04b      	beq.n	8008a4a <_malloc_r+0xea>
 80089b2:	6823      	ldr	r3, [r4, #0]
 80089b4:	4639      	mov	r1, r7
 80089b6:	4630      	mov	r0, r6
 80089b8:	eb04 0903 	add.w	r9, r4, r3
 80089bc:	f000 fc6a 	bl	8009294 <_sbrk_r>
 80089c0:	4581      	cmp	r9, r0
 80089c2:	d142      	bne.n	8008a4a <_malloc_r+0xea>
 80089c4:	6821      	ldr	r1, [r4, #0]
 80089c6:	1a6d      	subs	r5, r5, r1
 80089c8:	4629      	mov	r1, r5
 80089ca:	4630      	mov	r0, r6
 80089cc:	f7ff ffa6 	bl	800891c <sbrk_aligned>
 80089d0:	3001      	adds	r0, #1
 80089d2:	d03a      	beq.n	8008a4a <_malloc_r+0xea>
 80089d4:	6823      	ldr	r3, [r4, #0]
 80089d6:	442b      	add	r3, r5
 80089d8:	6023      	str	r3, [r4, #0]
 80089da:	f8d8 3000 	ldr.w	r3, [r8]
 80089de:	685a      	ldr	r2, [r3, #4]
 80089e0:	bb62      	cbnz	r2, 8008a3c <_malloc_r+0xdc>
 80089e2:	f8c8 7000 	str.w	r7, [r8]
 80089e6:	e00f      	b.n	8008a08 <_malloc_r+0xa8>
 80089e8:	6822      	ldr	r2, [r4, #0]
 80089ea:	1b52      	subs	r2, r2, r5
 80089ec:	d420      	bmi.n	8008a30 <_malloc_r+0xd0>
 80089ee:	2a0b      	cmp	r2, #11
 80089f0:	d917      	bls.n	8008a22 <_malloc_r+0xc2>
 80089f2:	1961      	adds	r1, r4, r5
 80089f4:	42a3      	cmp	r3, r4
 80089f6:	6025      	str	r5, [r4, #0]
 80089f8:	bf18      	it	ne
 80089fa:	6059      	strne	r1, [r3, #4]
 80089fc:	6863      	ldr	r3, [r4, #4]
 80089fe:	bf08      	it	eq
 8008a00:	f8c8 1000 	streq.w	r1, [r8]
 8008a04:	5162      	str	r2, [r4, r5]
 8008a06:	604b      	str	r3, [r1, #4]
 8008a08:	4630      	mov	r0, r6
 8008a0a:	f000 f82f 	bl	8008a6c <__malloc_unlock>
 8008a0e:	f104 000b 	add.w	r0, r4, #11
 8008a12:	1d23      	adds	r3, r4, #4
 8008a14:	f020 0007 	bic.w	r0, r0, #7
 8008a18:	1ac2      	subs	r2, r0, r3
 8008a1a:	bf1c      	itt	ne
 8008a1c:	1a1b      	subne	r3, r3, r0
 8008a1e:	50a3      	strne	r3, [r4, r2]
 8008a20:	e7af      	b.n	8008982 <_malloc_r+0x22>
 8008a22:	6862      	ldr	r2, [r4, #4]
 8008a24:	42a3      	cmp	r3, r4
 8008a26:	bf0c      	ite	eq
 8008a28:	f8c8 2000 	streq.w	r2, [r8]
 8008a2c:	605a      	strne	r2, [r3, #4]
 8008a2e:	e7eb      	b.n	8008a08 <_malloc_r+0xa8>
 8008a30:	4623      	mov	r3, r4
 8008a32:	6864      	ldr	r4, [r4, #4]
 8008a34:	e7ae      	b.n	8008994 <_malloc_r+0x34>
 8008a36:	463c      	mov	r4, r7
 8008a38:	687f      	ldr	r7, [r7, #4]
 8008a3a:	e7b6      	b.n	80089aa <_malloc_r+0x4a>
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	42a3      	cmp	r3, r4
 8008a42:	d1fb      	bne.n	8008a3c <_malloc_r+0xdc>
 8008a44:	2300      	movs	r3, #0
 8008a46:	6053      	str	r3, [r2, #4]
 8008a48:	e7de      	b.n	8008a08 <_malloc_r+0xa8>
 8008a4a:	230c      	movs	r3, #12
 8008a4c:	6033      	str	r3, [r6, #0]
 8008a4e:	4630      	mov	r0, r6
 8008a50:	f000 f80c 	bl	8008a6c <__malloc_unlock>
 8008a54:	e794      	b.n	8008980 <_malloc_r+0x20>
 8008a56:	6005      	str	r5, [r0, #0]
 8008a58:	e7d6      	b.n	8008a08 <_malloc_r+0xa8>
 8008a5a:	bf00      	nop
 8008a5c:	24000330 	.word	0x24000330

08008a60 <__malloc_lock>:
 8008a60:	4801      	ldr	r0, [pc, #4]	@ (8008a68 <__malloc_lock+0x8>)
 8008a62:	f7ff bf0e 	b.w	8008882 <__retarget_lock_acquire_recursive>
 8008a66:	bf00      	nop
 8008a68:	24000328 	.word	0x24000328

08008a6c <__malloc_unlock>:
 8008a6c:	4801      	ldr	r0, [pc, #4]	@ (8008a74 <__malloc_unlock+0x8>)
 8008a6e:	f7ff bf09 	b.w	8008884 <__retarget_lock_release_recursive>
 8008a72:	bf00      	nop
 8008a74:	24000328 	.word	0x24000328

08008a78 <__sfputc_r>:
 8008a78:	6893      	ldr	r3, [r2, #8]
 8008a7a:	3b01      	subs	r3, #1
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	b410      	push	{r4}
 8008a80:	6093      	str	r3, [r2, #8]
 8008a82:	da08      	bge.n	8008a96 <__sfputc_r+0x1e>
 8008a84:	6994      	ldr	r4, [r2, #24]
 8008a86:	42a3      	cmp	r3, r4
 8008a88:	db01      	blt.n	8008a8e <__sfputc_r+0x16>
 8008a8a:	290a      	cmp	r1, #10
 8008a8c:	d103      	bne.n	8008a96 <__sfputc_r+0x1e>
 8008a8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a92:	f000 bb6b 	b.w	800916c <__swbuf_r>
 8008a96:	6813      	ldr	r3, [r2, #0]
 8008a98:	1c58      	adds	r0, r3, #1
 8008a9a:	6010      	str	r0, [r2, #0]
 8008a9c:	7019      	strb	r1, [r3, #0]
 8008a9e:	4608      	mov	r0, r1
 8008aa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008aa4:	4770      	bx	lr

08008aa6 <__sfputs_r>:
 8008aa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aa8:	4606      	mov	r6, r0
 8008aaa:	460f      	mov	r7, r1
 8008aac:	4614      	mov	r4, r2
 8008aae:	18d5      	adds	r5, r2, r3
 8008ab0:	42ac      	cmp	r4, r5
 8008ab2:	d101      	bne.n	8008ab8 <__sfputs_r+0x12>
 8008ab4:	2000      	movs	r0, #0
 8008ab6:	e007      	b.n	8008ac8 <__sfputs_r+0x22>
 8008ab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008abc:	463a      	mov	r2, r7
 8008abe:	4630      	mov	r0, r6
 8008ac0:	f7ff ffda 	bl	8008a78 <__sfputc_r>
 8008ac4:	1c43      	adds	r3, r0, #1
 8008ac6:	d1f3      	bne.n	8008ab0 <__sfputs_r+0xa>
 8008ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008acc <_vfiprintf_r>:
 8008acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ad0:	460d      	mov	r5, r1
 8008ad2:	b09d      	sub	sp, #116	@ 0x74
 8008ad4:	4614      	mov	r4, r2
 8008ad6:	4698      	mov	r8, r3
 8008ad8:	4606      	mov	r6, r0
 8008ada:	b118      	cbz	r0, 8008ae4 <_vfiprintf_r+0x18>
 8008adc:	6a03      	ldr	r3, [r0, #32]
 8008ade:	b90b      	cbnz	r3, 8008ae4 <_vfiprintf_r+0x18>
 8008ae0:	f7ff fdca 	bl	8008678 <__sinit>
 8008ae4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ae6:	07d9      	lsls	r1, r3, #31
 8008ae8:	d405      	bmi.n	8008af6 <_vfiprintf_r+0x2a>
 8008aea:	89ab      	ldrh	r3, [r5, #12]
 8008aec:	059a      	lsls	r2, r3, #22
 8008aee:	d402      	bmi.n	8008af6 <_vfiprintf_r+0x2a>
 8008af0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008af2:	f7ff fec6 	bl	8008882 <__retarget_lock_acquire_recursive>
 8008af6:	89ab      	ldrh	r3, [r5, #12]
 8008af8:	071b      	lsls	r3, r3, #28
 8008afa:	d501      	bpl.n	8008b00 <_vfiprintf_r+0x34>
 8008afc:	692b      	ldr	r3, [r5, #16]
 8008afe:	b99b      	cbnz	r3, 8008b28 <_vfiprintf_r+0x5c>
 8008b00:	4629      	mov	r1, r5
 8008b02:	4630      	mov	r0, r6
 8008b04:	f000 fb70 	bl	80091e8 <__swsetup_r>
 8008b08:	b170      	cbz	r0, 8008b28 <_vfiprintf_r+0x5c>
 8008b0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b0c:	07dc      	lsls	r4, r3, #31
 8008b0e:	d504      	bpl.n	8008b1a <_vfiprintf_r+0x4e>
 8008b10:	f04f 30ff 	mov.w	r0, #4294967295
 8008b14:	b01d      	add	sp, #116	@ 0x74
 8008b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b1a:	89ab      	ldrh	r3, [r5, #12]
 8008b1c:	0598      	lsls	r0, r3, #22
 8008b1e:	d4f7      	bmi.n	8008b10 <_vfiprintf_r+0x44>
 8008b20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b22:	f7ff feaf 	bl	8008884 <__retarget_lock_release_recursive>
 8008b26:	e7f3      	b.n	8008b10 <_vfiprintf_r+0x44>
 8008b28:	2300      	movs	r3, #0
 8008b2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b2c:	2320      	movs	r3, #32
 8008b2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008b32:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b36:	2330      	movs	r3, #48	@ 0x30
 8008b38:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008ce8 <_vfiprintf_r+0x21c>
 8008b3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008b40:	f04f 0901 	mov.w	r9, #1
 8008b44:	4623      	mov	r3, r4
 8008b46:	469a      	mov	sl, r3
 8008b48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b4c:	b10a      	cbz	r2, 8008b52 <_vfiprintf_r+0x86>
 8008b4e:	2a25      	cmp	r2, #37	@ 0x25
 8008b50:	d1f9      	bne.n	8008b46 <_vfiprintf_r+0x7a>
 8008b52:	ebba 0b04 	subs.w	fp, sl, r4
 8008b56:	d00b      	beq.n	8008b70 <_vfiprintf_r+0xa4>
 8008b58:	465b      	mov	r3, fp
 8008b5a:	4622      	mov	r2, r4
 8008b5c:	4629      	mov	r1, r5
 8008b5e:	4630      	mov	r0, r6
 8008b60:	f7ff ffa1 	bl	8008aa6 <__sfputs_r>
 8008b64:	3001      	adds	r0, #1
 8008b66:	f000 80a7 	beq.w	8008cb8 <_vfiprintf_r+0x1ec>
 8008b6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b6c:	445a      	add	r2, fp
 8008b6e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b70:	f89a 3000 	ldrb.w	r3, [sl]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	f000 809f 	beq.w	8008cb8 <_vfiprintf_r+0x1ec>
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b84:	f10a 0a01 	add.w	sl, sl, #1
 8008b88:	9304      	str	r3, [sp, #16]
 8008b8a:	9307      	str	r3, [sp, #28]
 8008b8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008b90:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b92:	4654      	mov	r4, sl
 8008b94:	2205      	movs	r2, #5
 8008b96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b9a:	4853      	ldr	r0, [pc, #332]	@ (8008ce8 <_vfiprintf_r+0x21c>)
 8008b9c:	f7f7 fba0 	bl	80002e0 <memchr>
 8008ba0:	9a04      	ldr	r2, [sp, #16]
 8008ba2:	b9d8      	cbnz	r0, 8008bdc <_vfiprintf_r+0x110>
 8008ba4:	06d1      	lsls	r1, r2, #27
 8008ba6:	bf44      	itt	mi
 8008ba8:	2320      	movmi	r3, #32
 8008baa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008bae:	0713      	lsls	r3, r2, #28
 8008bb0:	bf44      	itt	mi
 8008bb2:	232b      	movmi	r3, #43	@ 0x2b
 8008bb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008bb8:	f89a 3000 	ldrb.w	r3, [sl]
 8008bbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bbe:	d015      	beq.n	8008bec <_vfiprintf_r+0x120>
 8008bc0:	9a07      	ldr	r2, [sp, #28]
 8008bc2:	4654      	mov	r4, sl
 8008bc4:	2000      	movs	r0, #0
 8008bc6:	f04f 0c0a 	mov.w	ip, #10
 8008bca:	4621      	mov	r1, r4
 8008bcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bd0:	3b30      	subs	r3, #48	@ 0x30
 8008bd2:	2b09      	cmp	r3, #9
 8008bd4:	d94b      	bls.n	8008c6e <_vfiprintf_r+0x1a2>
 8008bd6:	b1b0      	cbz	r0, 8008c06 <_vfiprintf_r+0x13a>
 8008bd8:	9207      	str	r2, [sp, #28]
 8008bda:	e014      	b.n	8008c06 <_vfiprintf_r+0x13a>
 8008bdc:	eba0 0308 	sub.w	r3, r0, r8
 8008be0:	fa09 f303 	lsl.w	r3, r9, r3
 8008be4:	4313      	orrs	r3, r2
 8008be6:	9304      	str	r3, [sp, #16]
 8008be8:	46a2      	mov	sl, r4
 8008bea:	e7d2      	b.n	8008b92 <_vfiprintf_r+0xc6>
 8008bec:	9b03      	ldr	r3, [sp, #12]
 8008bee:	1d19      	adds	r1, r3, #4
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	9103      	str	r1, [sp, #12]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	bfbb      	ittet	lt
 8008bf8:	425b      	neglt	r3, r3
 8008bfa:	f042 0202 	orrlt.w	r2, r2, #2
 8008bfe:	9307      	strge	r3, [sp, #28]
 8008c00:	9307      	strlt	r3, [sp, #28]
 8008c02:	bfb8      	it	lt
 8008c04:	9204      	strlt	r2, [sp, #16]
 8008c06:	7823      	ldrb	r3, [r4, #0]
 8008c08:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c0a:	d10a      	bne.n	8008c22 <_vfiprintf_r+0x156>
 8008c0c:	7863      	ldrb	r3, [r4, #1]
 8008c0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c10:	d132      	bne.n	8008c78 <_vfiprintf_r+0x1ac>
 8008c12:	9b03      	ldr	r3, [sp, #12]
 8008c14:	1d1a      	adds	r2, r3, #4
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	9203      	str	r2, [sp, #12]
 8008c1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008c1e:	3402      	adds	r4, #2
 8008c20:	9305      	str	r3, [sp, #20]
 8008c22:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008cf8 <_vfiprintf_r+0x22c>
 8008c26:	7821      	ldrb	r1, [r4, #0]
 8008c28:	2203      	movs	r2, #3
 8008c2a:	4650      	mov	r0, sl
 8008c2c:	f7f7 fb58 	bl	80002e0 <memchr>
 8008c30:	b138      	cbz	r0, 8008c42 <_vfiprintf_r+0x176>
 8008c32:	9b04      	ldr	r3, [sp, #16]
 8008c34:	eba0 000a 	sub.w	r0, r0, sl
 8008c38:	2240      	movs	r2, #64	@ 0x40
 8008c3a:	4082      	lsls	r2, r0
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	3401      	adds	r4, #1
 8008c40:	9304      	str	r3, [sp, #16]
 8008c42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c46:	4829      	ldr	r0, [pc, #164]	@ (8008cec <_vfiprintf_r+0x220>)
 8008c48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008c4c:	2206      	movs	r2, #6
 8008c4e:	f7f7 fb47 	bl	80002e0 <memchr>
 8008c52:	2800      	cmp	r0, #0
 8008c54:	d03f      	beq.n	8008cd6 <_vfiprintf_r+0x20a>
 8008c56:	4b26      	ldr	r3, [pc, #152]	@ (8008cf0 <_vfiprintf_r+0x224>)
 8008c58:	bb1b      	cbnz	r3, 8008ca2 <_vfiprintf_r+0x1d6>
 8008c5a:	9b03      	ldr	r3, [sp, #12]
 8008c5c:	3307      	adds	r3, #7
 8008c5e:	f023 0307 	bic.w	r3, r3, #7
 8008c62:	3308      	adds	r3, #8
 8008c64:	9303      	str	r3, [sp, #12]
 8008c66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c68:	443b      	add	r3, r7
 8008c6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c6c:	e76a      	b.n	8008b44 <_vfiprintf_r+0x78>
 8008c6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c72:	460c      	mov	r4, r1
 8008c74:	2001      	movs	r0, #1
 8008c76:	e7a8      	b.n	8008bca <_vfiprintf_r+0xfe>
 8008c78:	2300      	movs	r3, #0
 8008c7a:	3401      	adds	r4, #1
 8008c7c:	9305      	str	r3, [sp, #20]
 8008c7e:	4619      	mov	r1, r3
 8008c80:	f04f 0c0a 	mov.w	ip, #10
 8008c84:	4620      	mov	r0, r4
 8008c86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c8a:	3a30      	subs	r2, #48	@ 0x30
 8008c8c:	2a09      	cmp	r2, #9
 8008c8e:	d903      	bls.n	8008c98 <_vfiprintf_r+0x1cc>
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d0c6      	beq.n	8008c22 <_vfiprintf_r+0x156>
 8008c94:	9105      	str	r1, [sp, #20]
 8008c96:	e7c4      	b.n	8008c22 <_vfiprintf_r+0x156>
 8008c98:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c9c:	4604      	mov	r4, r0
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e7f0      	b.n	8008c84 <_vfiprintf_r+0x1b8>
 8008ca2:	ab03      	add	r3, sp, #12
 8008ca4:	9300      	str	r3, [sp, #0]
 8008ca6:	462a      	mov	r2, r5
 8008ca8:	4b12      	ldr	r3, [pc, #72]	@ (8008cf4 <_vfiprintf_r+0x228>)
 8008caa:	a904      	add	r1, sp, #16
 8008cac:	4630      	mov	r0, r6
 8008cae:	f3af 8000 	nop.w
 8008cb2:	4607      	mov	r7, r0
 8008cb4:	1c78      	adds	r0, r7, #1
 8008cb6:	d1d6      	bne.n	8008c66 <_vfiprintf_r+0x19a>
 8008cb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cba:	07d9      	lsls	r1, r3, #31
 8008cbc:	d405      	bmi.n	8008cca <_vfiprintf_r+0x1fe>
 8008cbe:	89ab      	ldrh	r3, [r5, #12]
 8008cc0:	059a      	lsls	r2, r3, #22
 8008cc2:	d402      	bmi.n	8008cca <_vfiprintf_r+0x1fe>
 8008cc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cc6:	f7ff fddd 	bl	8008884 <__retarget_lock_release_recursive>
 8008cca:	89ab      	ldrh	r3, [r5, #12]
 8008ccc:	065b      	lsls	r3, r3, #25
 8008cce:	f53f af1f 	bmi.w	8008b10 <_vfiprintf_r+0x44>
 8008cd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008cd4:	e71e      	b.n	8008b14 <_vfiprintf_r+0x48>
 8008cd6:	ab03      	add	r3, sp, #12
 8008cd8:	9300      	str	r3, [sp, #0]
 8008cda:	462a      	mov	r2, r5
 8008cdc:	4b05      	ldr	r3, [pc, #20]	@ (8008cf4 <_vfiprintf_r+0x228>)
 8008cde:	a904      	add	r1, sp, #16
 8008ce0:	4630      	mov	r0, r6
 8008ce2:	f000 f879 	bl	8008dd8 <_printf_i>
 8008ce6:	e7e4      	b.n	8008cb2 <_vfiprintf_r+0x1e6>
 8008ce8:	0800b9dc 	.word	0x0800b9dc
 8008cec:	0800b9e6 	.word	0x0800b9e6
 8008cf0:	00000000 	.word	0x00000000
 8008cf4:	08008aa7 	.word	0x08008aa7
 8008cf8:	0800b9e2 	.word	0x0800b9e2

08008cfc <_printf_common>:
 8008cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d00:	4616      	mov	r6, r2
 8008d02:	4698      	mov	r8, r3
 8008d04:	688a      	ldr	r2, [r1, #8]
 8008d06:	690b      	ldr	r3, [r1, #16]
 8008d08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	bfb8      	it	lt
 8008d10:	4613      	movlt	r3, r2
 8008d12:	6033      	str	r3, [r6, #0]
 8008d14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008d18:	4607      	mov	r7, r0
 8008d1a:	460c      	mov	r4, r1
 8008d1c:	b10a      	cbz	r2, 8008d22 <_printf_common+0x26>
 8008d1e:	3301      	adds	r3, #1
 8008d20:	6033      	str	r3, [r6, #0]
 8008d22:	6823      	ldr	r3, [r4, #0]
 8008d24:	0699      	lsls	r1, r3, #26
 8008d26:	bf42      	ittt	mi
 8008d28:	6833      	ldrmi	r3, [r6, #0]
 8008d2a:	3302      	addmi	r3, #2
 8008d2c:	6033      	strmi	r3, [r6, #0]
 8008d2e:	6825      	ldr	r5, [r4, #0]
 8008d30:	f015 0506 	ands.w	r5, r5, #6
 8008d34:	d106      	bne.n	8008d44 <_printf_common+0x48>
 8008d36:	f104 0a19 	add.w	sl, r4, #25
 8008d3a:	68e3      	ldr	r3, [r4, #12]
 8008d3c:	6832      	ldr	r2, [r6, #0]
 8008d3e:	1a9b      	subs	r3, r3, r2
 8008d40:	42ab      	cmp	r3, r5
 8008d42:	dc26      	bgt.n	8008d92 <_printf_common+0x96>
 8008d44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008d48:	6822      	ldr	r2, [r4, #0]
 8008d4a:	3b00      	subs	r3, #0
 8008d4c:	bf18      	it	ne
 8008d4e:	2301      	movne	r3, #1
 8008d50:	0692      	lsls	r2, r2, #26
 8008d52:	d42b      	bmi.n	8008dac <_printf_common+0xb0>
 8008d54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008d58:	4641      	mov	r1, r8
 8008d5a:	4638      	mov	r0, r7
 8008d5c:	47c8      	blx	r9
 8008d5e:	3001      	adds	r0, #1
 8008d60:	d01e      	beq.n	8008da0 <_printf_common+0xa4>
 8008d62:	6823      	ldr	r3, [r4, #0]
 8008d64:	6922      	ldr	r2, [r4, #16]
 8008d66:	f003 0306 	and.w	r3, r3, #6
 8008d6a:	2b04      	cmp	r3, #4
 8008d6c:	bf02      	ittt	eq
 8008d6e:	68e5      	ldreq	r5, [r4, #12]
 8008d70:	6833      	ldreq	r3, [r6, #0]
 8008d72:	1aed      	subeq	r5, r5, r3
 8008d74:	68a3      	ldr	r3, [r4, #8]
 8008d76:	bf0c      	ite	eq
 8008d78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d7c:	2500      	movne	r5, #0
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	bfc4      	itt	gt
 8008d82:	1a9b      	subgt	r3, r3, r2
 8008d84:	18ed      	addgt	r5, r5, r3
 8008d86:	2600      	movs	r6, #0
 8008d88:	341a      	adds	r4, #26
 8008d8a:	42b5      	cmp	r5, r6
 8008d8c:	d11a      	bne.n	8008dc4 <_printf_common+0xc8>
 8008d8e:	2000      	movs	r0, #0
 8008d90:	e008      	b.n	8008da4 <_printf_common+0xa8>
 8008d92:	2301      	movs	r3, #1
 8008d94:	4652      	mov	r2, sl
 8008d96:	4641      	mov	r1, r8
 8008d98:	4638      	mov	r0, r7
 8008d9a:	47c8      	blx	r9
 8008d9c:	3001      	adds	r0, #1
 8008d9e:	d103      	bne.n	8008da8 <_printf_common+0xac>
 8008da0:	f04f 30ff 	mov.w	r0, #4294967295
 8008da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008da8:	3501      	adds	r5, #1
 8008daa:	e7c6      	b.n	8008d3a <_printf_common+0x3e>
 8008dac:	18e1      	adds	r1, r4, r3
 8008dae:	1c5a      	adds	r2, r3, #1
 8008db0:	2030      	movs	r0, #48	@ 0x30
 8008db2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008db6:	4422      	add	r2, r4
 8008db8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008dbc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008dc0:	3302      	adds	r3, #2
 8008dc2:	e7c7      	b.n	8008d54 <_printf_common+0x58>
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	4622      	mov	r2, r4
 8008dc8:	4641      	mov	r1, r8
 8008dca:	4638      	mov	r0, r7
 8008dcc:	47c8      	blx	r9
 8008dce:	3001      	adds	r0, #1
 8008dd0:	d0e6      	beq.n	8008da0 <_printf_common+0xa4>
 8008dd2:	3601      	adds	r6, #1
 8008dd4:	e7d9      	b.n	8008d8a <_printf_common+0x8e>
	...

08008dd8 <_printf_i>:
 8008dd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ddc:	7e0f      	ldrb	r7, [r1, #24]
 8008dde:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008de0:	2f78      	cmp	r7, #120	@ 0x78
 8008de2:	4691      	mov	r9, r2
 8008de4:	4680      	mov	r8, r0
 8008de6:	460c      	mov	r4, r1
 8008de8:	469a      	mov	sl, r3
 8008dea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008dee:	d807      	bhi.n	8008e00 <_printf_i+0x28>
 8008df0:	2f62      	cmp	r7, #98	@ 0x62
 8008df2:	d80a      	bhi.n	8008e0a <_printf_i+0x32>
 8008df4:	2f00      	cmp	r7, #0
 8008df6:	f000 80d1 	beq.w	8008f9c <_printf_i+0x1c4>
 8008dfa:	2f58      	cmp	r7, #88	@ 0x58
 8008dfc:	f000 80b8 	beq.w	8008f70 <_printf_i+0x198>
 8008e00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008e08:	e03a      	b.n	8008e80 <_printf_i+0xa8>
 8008e0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008e0e:	2b15      	cmp	r3, #21
 8008e10:	d8f6      	bhi.n	8008e00 <_printf_i+0x28>
 8008e12:	a101      	add	r1, pc, #4	@ (adr r1, 8008e18 <_printf_i+0x40>)
 8008e14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e18:	08008e71 	.word	0x08008e71
 8008e1c:	08008e85 	.word	0x08008e85
 8008e20:	08008e01 	.word	0x08008e01
 8008e24:	08008e01 	.word	0x08008e01
 8008e28:	08008e01 	.word	0x08008e01
 8008e2c:	08008e01 	.word	0x08008e01
 8008e30:	08008e85 	.word	0x08008e85
 8008e34:	08008e01 	.word	0x08008e01
 8008e38:	08008e01 	.word	0x08008e01
 8008e3c:	08008e01 	.word	0x08008e01
 8008e40:	08008e01 	.word	0x08008e01
 8008e44:	08008f83 	.word	0x08008f83
 8008e48:	08008eaf 	.word	0x08008eaf
 8008e4c:	08008f3d 	.word	0x08008f3d
 8008e50:	08008e01 	.word	0x08008e01
 8008e54:	08008e01 	.word	0x08008e01
 8008e58:	08008fa5 	.word	0x08008fa5
 8008e5c:	08008e01 	.word	0x08008e01
 8008e60:	08008eaf 	.word	0x08008eaf
 8008e64:	08008e01 	.word	0x08008e01
 8008e68:	08008e01 	.word	0x08008e01
 8008e6c:	08008f45 	.word	0x08008f45
 8008e70:	6833      	ldr	r3, [r6, #0]
 8008e72:	1d1a      	adds	r2, r3, #4
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	6032      	str	r2, [r6, #0]
 8008e78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008e80:	2301      	movs	r3, #1
 8008e82:	e09c      	b.n	8008fbe <_printf_i+0x1e6>
 8008e84:	6833      	ldr	r3, [r6, #0]
 8008e86:	6820      	ldr	r0, [r4, #0]
 8008e88:	1d19      	adds	r1, r3, #4
 8008e8a:	6031      	str	r1, [r6, #0]
 8008e8c:	0606      	lsls	r6, r0, #24
 8008e8e:	d501      	bpl.n	8008e94 <_printf_i+0xbc>
 8008e90:	681d      	ldr	r5, [r3, #0]
 8008e92:	e003      	b.n	8008e9c <_printf_i+0xc4>
 8008e94:	0645      	lsls	r5, r0, #25
 8008e96:	d5fb      	bpl.n	8008e90 <_printf_i+0xb8>
 8008e98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008e9c:	2d00      	cmp	r5, #0
 8008e9e:	da03      	bge.n	8008ea8 <_printf_i+0xd0>
 8008ea0:	232d      	movs	r3, #45	@ 0x2d
 8008ea2:	426d      	negs	r5, r5
 8008ea4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ea8:	4858      	ldr	r0, [pc, #352]	@ (800900c <_printf_i+0x234>)
 8008eaa:	230a      	movs	r3, #10
 8008eac:	e011      	b.n	8008ed2 <_printf_i+0xfa>
 8008eae:	6821      	ldr	r1, [r4, #0]
 8008eb0:	6833      	ldr	r3, [r6, #0]
 8008eb2:	0608      	lsls	r0, r1, #24
 8008eb4:	f853 5b04 	ldr.w	r5, [r3], #4
 8008eb8:	d402      	bmi.n	8008ec0 <_printf_i+0xe8>
 8008eba:	0649      	lsls	r1, r1, #25
 8008ebc:	bf48      	it	mi
 8008ebe:	b2ad      	uxthmi	r5, r5
 8008ec0:	2f6f      	cmp	r7, #111	@ 0x6f
 8008ec2:	4852      	ldr	r0, [pc, #328]	@ (800900c <_printf_i+0x234>)
 8008ec4:	6033      	str	r3, [r6, #0]
 8008ec6:	bf14      	ite	ne
 8008ec8:	230a      	movne	r3, #10
 8008eca:	2308      	moveq	r3, #8
 8008ecc:	2100      	movs	r1, #0
 8008ece:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008ed2:	6866      	ldr	r6, [r4, #4]
 8008ed4:	60a6      	str	r6, [r4, #8]
 8008ed6:	2e00      	cmp	r6, #0
 8008ed8:	db05      	blt.n	8008ee6 <_printf_i+0x10e>
 8008eda:	6821      	ldr	r1, [r4, #0]
 8008edc:	432e      	orrs	r6, r5
 8008ede:	f021 0104 	bic.w	r1, r1, #4
 8008ee2:	6021      	str	r1, [r4, #0]
 8008ee4:	d04b      	beq.n	8008f7e <_printf_i+0x1a6>
 8008ee6:	4616      	mov	r6, r2
 8008ee8:	fbb5 f1f3 	udiv	r1, r5, r3
 8008eec:	fb03 5711 	mls	r7, r3, r1, r5
 8008ef0:	5dc7      	ldrb	r7, [r0, r7]
 8008ef2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008ef6:	462f      	mov	r7, r5
 8008ef8:	42bb      	cmp	r3, r7
 8008efa:	460d      	mov	r5, r1
 8008efc:	d9f4      	bls.n	8008ee8 <_printf_i+0x110>
 8008efe:	2b08      	cmp	r3, #8
 8008f00:	d10b      	bne.n	8008f1a <_printf_i+0x142>
 8008f02:	6823      	ldr	r3, [r4, #0]
 8008f04:	07df      	lsls	r7, r3, #31
 8008f06:	d508      	bpl.n	8008f1a <_printf_i+0x142>
 8008f08:	6923      	ldr	r3, [r4, #16]
 8008f0a:	6861      	ldr	r1, [r4, #4]
 8008f0c:	4299      	cmp	r1, r3
 8008f0e:	bfde      	ittt	le
 8008f10:	2330      	movle	r3, #48	@ 0x30
 8008f12:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008f16:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008f1a:	1b92      	subs	r2, r2, r6
 8008f1c:	6122      	str	r2, [r4, #16]
 8008f1e:	f8cd a000 	str.w	sl, [sp]
 8008f22:	464b      	mov	r3, r9
 8008f24:	aa03      	add	r2, sp, #12
 8008f26:	4621      	mov	r1, r4
 8008f28:	4640      	mov	r0, r8
 8008f2a:	f7ff fee7 	bl	8008cfc <_printf_common>
 8008f2e:	3001      	adds	r0, #1
 8008f30:	d14a      	bne.n	8008fc8 <_printf_i+0x1f0>
 8008f32:	f04f 30ff 	mov.w	r0, #4294967295
 8008f36:	b004      	add	sp, #16
 8008f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f3c:	6823      	ldr	r3, [r4, #0]
 8008f3e:	f043 0320 	orr.w	r3, r3, #32
 8008f42:	6023      	str	r3, [r4, #0]
 8008f44:	4832      	ldr	r0, [pc, #200]	@ (8009010 <_printf_i+0x238>)
 8008f46:	2778      	movs	r7, #120	@ 0x78
 8008f48:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008f4c:	6823      	ldr	r3, [r4, #0]
 8008f4e:	6831      	ldr	r1, [r6, #0]
 8008f50:	061f      	lsls	r7, r3, #24
 8008f52:	f851 5b04 	ldr.w	r5, [r1], #4
 8008f56:	d402      	bmi.n	8008f5e <_printf_i+0x186>
 8008f58:	065f      	lsls	r7, r3, #25
 8008f5a:	bf48      	it	mi
 8008f5c:	b2ad      	uxthmi	r5, r5
 8008f5e:	6031      	str	r1, [r6, #0]
 8008f60:	07d9      	lsls	r1, r3, #31
 8008f62:	bf44      	itt	mi
 8008f64:	f043 0320 	orrmi.w	r3, r3, #32
 8008f68:	6023      	strmi	r3, [r4, #0]
 8008f6a:	b11d      	cbz	r5, 8008f74 <_printf_i+0x19c>
 8008f6c:	2310      	movs	r3, #16
 8008f6e:	e7ad      	b.n	8008ecc <_printf_i+0xf4>
 8008f70:	4826      	ldr	r0, [pc, #152]	@ (800900c <_printf_i+0x234>)
 8008f72:	e7e9      	b.n	8008f48 <_printf_i+0x170>
 8008f74:	6823      	ldr	r3, [r4, #0]
 8008f76:	f023 0320 	bic.w	r3, r3, #32
 8008f7a:	6023      	str	r3, [r4, #0]
 8008f7c:	e7f6      	b.n	8008f6c <_printf_i+0x194>
 8008f7e:	4616      	mov	r6, r2
 8008f80:	e7bd      	b.n	8008efe <_printf_i+0x126>
 8008f82:	6833      	ldr	r3, [r6, #0]
 8008f84:	6825      	ldr	r5, [r4, #0]
 8008f86:	6961      	ldr	r1, [r4, #20]
 8008f88:	1d18      	adds	r0, r3, #4
 8008f8a:	6030      	str	r0, [r6, #0]
 8008f8c:	062e      	lsls	r6, r5, #24
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	d501      	bpl.n	8008f96 <_printf_i+0x1be>
 8008f92:	6019      	str	r1, [r3, #0]
 8008f94:	e002      	b.n	8008f9c <_printf_i+0x1c4>
 8008f96:	0668      	lsls	r0, r5, #25
 8008f98:	d5fb      	bpl.n	8008f92 <_printf_i+0x1ba>
 8008f9a:	8019      	strh	r1, [r3, #0]
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	6123      	str	r3, [r4, #16]
 8008fa0:	4616      	mov	r6, r2
 8008fa2:	e7bc      	b.n	8008f1e <_printf_i+0x146>
 8008fa4:	6833      	ldr	r3, [r6, #0]
 8008fa6:	1d1a      	adds	r2, r3, #4
 8008fa8:	6032      	str	r2, [r6, #0]
 8008faa:	681e      	ldr	r6, [r3, #0]
 8008fac:	6862      	ldr	r2, [r4, #4]
 8008fae:	2100      	movs	r1, #0
 8008fb0:	4630      	mov	r0, r6
 8008fb2:	f7f7 f995 	bl	80002e0 <memchr>
 8008fb6:	b108      	cbz	r0, 8008fbc <_printf_i+0x1e4>
 8008fb8:	1b80      	subs	r0, r0, r6
 8008fba:	6060      	str	r0, [r4, #4]
 8008fbc:	6863      	ldr	r3, [r4, #4]
 8008fbe:	6123      	str	r3, [r4, #16]
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008fc6:	e7aa      	b.n	8008f1e <_printf_i+0x146>
 8008fc8:	6923      	ldr	r3, [r4, #16]
 8008fca:	4632      	mov	r2, r6
 8008fcc:	4649      	mov	r1, r9
 8008fce:	4640      	mov	r0, r8
 8008fd0:	47d0      	blx	sl
 8008fd2:	3001      	adds	r0, #1
 8008fd4:	d0ad      	beq.n	8008f32 <_printf_i+0x15a>
 8008fd6:	6823      	ldr	r3, [r4, #0]
 8008fd8:	079b      	lsls	r3, r3, #30
 8008fda:	d413      	bmi.n	8009004 <_printf_i+0x22c>
 8008fdc:	68e0      	ldr	r0, [r4, #12]
 8008fde:	9b03      	ldr	r3, [sp, #12]
 8008fe0:	4298      	cmp	r0, r3
 8008fe2:	bfb8      	it	lt
 8008fe4:	4618      	movlt	r0, r3
 8008fe6:	e7a6      	b.n	8008f36 <_printf_i+0x15e>
 8008fe8:	2301      	movs	r3, #1
 8008fea:	4632      	mov	r2, r6
 8008fec:	4649      	mov	r1, r9
 8008fee:	4640      	mov	r0, r8
 8008ff0:	47d0      	blx	sl
 8008ff2:	3001      	adds	r0, #1
 8008ff4:	d09d      	beq.n	8008f32 <_printf_i+0x15a>
 8008ff6:	3501      	adds	r5, #1
 8008ff8:	68e3      	ldr	r3, [r4, #12]
 8008ffa:	9903      	ldr	r1, [sp, #12]
 8008ffc:	1a5b      	subs	r3, r3, r1
 8008ffe:	42ab      	cmp	r3, r5
 8009000:	dcf2      	bgt.n	8008fe8 <_printf_i+0x210>
 8009002:	e7eb      	b.n	8008fdc <_printf_i+0x204>
 8009004:	2500      	movs	r5, #0
 8009006:	f104 0619 	add.w	r6, r4, #25
 800900a:	e7f5      	b.n	8008ff8 <_printf_i+0x220>
 800900c:	0800b9ed 	.word	0x0800b9ed
 8009010:	0800b9fe 	.word	0x0800b9fe

08009014 <__sflush_r>:
 8009014:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800901c:	0716      	lsls	r6, r2, #28
 800901e:	4605      	mov	r5, r0
 8009020:	460c      	mov	r4, r1
 8009022:	d454      	bmi.n	80090ce <__sflush_r+0xba>
 8009024:	684b      	ldr	r3, [r1, #4]
 8009026:	2b00      	cmp	r3, #0
 8009028:	dc02      	bgt.n	8009030 <__sflush_r+0x1c>
 800902a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800902c:	2b00      	cmp	r3, #0
 800902e:	dd48      	ble.n	80090c2 <__sflush_r+0xae>
 8009030:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009032:	2e00      	cmp	r6, #0
 8009034:	d045      	beq.n	80090c2 <__sflush_r+0xae>
 8009036:	2300      	movs	r3, #0
 8009038:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800903c:	682f      	ldr	r7, [r5, #0]
 800903e:	6a21      	ldr	r1, [r4, #32]
 8009040:	602b      	str	r3, [r5, #0]
 8009042:	d030      	beq.n	80090a6 <__sflush_r+0x92>
 8009044:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009046:	89a3      	ldrh	r3, [r4, #12]
 8009048:	0759      	lsls	r1, r3, #29
 800904a:	d505      	bpl.n	8009058 <__sflush_r+0x44>
 800904c:	6863      	ldr	r3, [r4, #4]
 800904e:	1ad2      	subs	r2, r2, r3
 8009050:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009052:	b10b      	cbz	r3, 8009058 <__sflush_r+0x44>
 8009054:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009056:	1ad2      	subs	r2, r2, r3
 8009058:	2300      	movs	r3, #0
 800905a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800905c:	6a21      	ldr	r1, [r4, #32]
 800905e:	4628      	mov	r0, r5
 8009060:	47b0      	blx	r6
 8009062:	1c43      	adds	r3, r0, #1
 8009064:	89a3      	ldrh	r3, [r4, #12]
 8009066:	d106      	bne.n	8009076 <__sflush_r+0x62>
 8009068:	6829      	ldr	r1, [r5, #0]
 800906a:	291d      	cmp	r1, #29
 800906c:	d82b      	bhi.n	80090c6 <__sflush_r+0xb2>
 800906e:	4a2a      	ldr	r2, [pc, #168]	@ (8009118 <__sflush_r+0x104>)
 8009070:	40ca      	lsrs	r2, r1
 8009072:	07d6      	lsls	r6, r2, #31
 8009074:	d527      	bpl.n	80090c6 <__sflush_r+0xb2>
 8009076:	2200      	movs	r2, #0
 8009078:	6062      	str	r2, [r4, #4]
 800907a:	04d9      	lsls	r1, r3, #19
 800907c:	6922      	ldr	r2, [r4, #16]
 800907e:	6022      	str	r2, [r4, #0]
 8009080:	d504      	bpl.n	800908c <__sflush_r+0x78>
 8009082:	1c42      	adds	r2, r0, #1
 8009084:	d101      	bne.n	800908a <__sflush_r+0x76>
 8009086:	682b      	ldr	r3, [r5, #0]
 8009088:	b903      	cbnz	r3, 800908c <__sflush_r+0x78>
 800908a:	6560      	str	r0, [r4, #84]	@ 0x54
 800908c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800908e:	602f      	str	r7, [r5, #0]
 8009090:	b1b9      	cbz	r1, 80090c2 <__sflush_r+0xae>
 8009092:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009096:	4299      	cmp	r1, r3
 8009098:	d002      	beq.n	80090a0 <__sflush_r+0x8c>
 800909a:	4628      	mov	r0, r5
 800909c:	f7ff fbf4 	bl	8008888 <_free_r>
 80090a0:	2300      	movs	r3, #0
 80090a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80090a4:	e00d      	b.n	80090c2 <__sflush_r+0xae>
 80090a6:	2301      	movs	r3, #1
 80090a8:	4628      	mov	r0, r5
 80090aa:	47b0      	blx	r6
 80090ac:	4602      	mov	r2, r0
 80090ae:	1c50      	adds	r0, r2, #1
 80090b0:	d1c9      	bne.n	8009046 <__sflush_r+0x32>
 80090b2:	682b      	ldr	r3, [r5, #0]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d0c6      	beq.n	8009046 <__sflush_r+0x32>
 80090b8:	2b1d      	cmp	r3, #29
 80090ba:	d001      	beq.n	80090c0 <__sflush_r+0xac>
 80090bc:	2b16      	cmp	r3, #22
 80090be:	d11e      	bne.n	80090fe <__sflush_r+0xea>
 80090c0:	602f      	str	r7, [r5, #0]
 80090c2:	2000      	movs	r0, #0
 80090c4:	e022      	b.n	800910c <__sflush_r+0xf8>
 80090c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090ca:	b21b      	sxth	r3, r3
 80090cc:	e01b      	b.n	8009106 <__sflush_r+0xf2>
 80090ce:	690f      	ldr	r7, [r1, #16]
 80090d0:	2f00      	cmp	r7, #0
 80090d2:	d0f6      	beq.n	80090c2 <__sflush_r+0xae>
 80090d4:	0793      	lsls	r3, r2, #30
 80090d6:	680e      	ldr	r6, [r1, #0]
 80090d8:	bf08      	it	eq
 80090da:	694b      	ldreq	r3, [r1, #20]
 80090dc:	600f      	str	r7, [r1, #0]
 80090de:	bf18      	it	ne
 80090e0:	2300      	movne	r3, #0
 80090e2:	eba6 0807 	sub.w	r8, r6, r7
 80090e6:	608b      	str	r3, [r1, #8]
 80090e8:	f1b8 0f00 	cmp.w	r8, #0
 80090ec:	dde9      	ble.n	80090c2 <__sflush_r+0xae>
 80090ee:	6a21      	ldr	r1, [r4, #32]
 80090f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80090f2:	4643      	mov	r3, r8
 80090f4:	463a      	mov	r2, r7
 80090f6:	4628      	mov	r0, r5
 80090f8:	47b0      	blx	r6
 80090fa:	2800      	cmp	r0, #0
 80090fc:	dc08      	bgt.n	8009110 <__sflush_r+0xfc>
 80090fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009102:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009106:	81a3      	strh	r3, [r4, #12]
 8009108:	f04f 30ff 	mov.w	r0, #4294967295
 800910c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009110:	4407      	add	r7, r0
 8009112:	eba8 0800 	sub.w	r8, r8, r0
 8009116:	e7e7      	b.n	80090e8 <__sflush_r+0xd4>
 8009118:	20400001 	.word	0x20400001

0800911c <_fflush_r>:
 800911c:	b538      	push	{r3, r4, r5, lr}
 800911e:	690b      	ldr	r3, [r1, #16]
 8009120:	4605      	mov	r5, r0
 8009122:	460c      	mov	r4, r1
 8009124:	b913      	cbnz	r3, 800912c <_fflush_r+0x10>
 8009126:	2500      	movs	r5, #0
 8009128:	4628      	mov	r0, r5
 800912a:	bd38      	pop	{r3, r4, r5, pc}
 800912c:	b118      	cbz	r0, 8009136 <_fflush_r+0x1a>
 800912e:	6a03      	ldr	r3, [r0, #32]
 8009130:	b90b      	cbnz	r3, 8009136 <_fflush_r+0x1a>
 8009132:	f7ff faa1 	bl	8008678 <__sinit>
 8009136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d0f3      	beq.n	8009126 <_fflush_r+0xa>
 800913e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009140:	07d0      	lsls	r0, r2, #31
 8009142:	d404      	bmi.n	800914e <_fflush_r+0x32>
 8009144:	0599      	lsls	r1, r3, #22
 8009146:	d402      	bmi.n	800914e <_fflush_r+0x32>
 8009148:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800914a:	f7ff fb9a 	bl	8008882 <__retarget_lock_acquire_recursive>
 800914e:	4628      	mov	r0, r5
 8009150:	4621      	mov	r1, r4
 8009152:	f7ff ff5f 	bl	8009014 <__sflush_r>
 8009156:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009158:	07da      	lsls	r2, r3, #31
 800915a:	4605      	mov	r5, r0
 800915c:	d4e4      	bmi.n	8009128 <_fflush_r+0xc>
 800915e:	89a3      	ldrh	r3, [r4, #12]
 8009160:	059b      	lsls	r3, r3, #22
 8009162:	d4e1      	bmi.n	8009128 <_fflush_r+0xc>
 8009164:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009166:	f7ff fb8d 	bl	8008884 <__retarget_lock_release_recursive>
 800916a:	e7dd      	b.n	8009128 <_fflush_r+0xc>

0800916c <__swbuf_r>:
 800916c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800916e:	460e      	mov	r6, r1
 8009170:	4614      	mov	r4, r2
 8009172:	4605      	mov	r5, r0
 8009174:	b118      	cbz	r0, 800917e <__swbuf_r+0x12>
 8009176:	6a03      	ldr	r3, [r0, #32]
 8009178:	b90b      	cbnz	r3, 800917e <__swbuf_r+0x12>
 800917a:	f7ff fa7d 	bl	8008678 <__sinit>
 800917e:	69a3      	ldr	r3, [r4, #24]
 8009180:	60a3      	str	r3, [r4, #8]
 8009182:	89a3      	ldrh	r3, [r4, #12]
 8009184:	071a      	lsls	r2, r3, #28
 8009186:	d501      	bpl.n	800918c <__swbuf_r+0x20>
 8009188:	6923      	ldr	r3, [r4, #16]
 800918a:	b943      	cbnz	r3, 800919e <__swbuf_r+0x32>
 800918c:	4621      	mov	r1, r4
 800918e:	4628      	mov	r0, r5
 8009190:	f000 f82a 	bl	80091e8 <__swsetup_r>
 8009194:	b118      	cbz	r0, 800919e <__swbuf_r+0x32>
 8009196:	f04f 37ff 	mov.w	r7, #4294967295
 800919a:	4638      	mov	r0, r7
 800919c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800919e:	6823      	ldr	r3, [r4, #0]
 80091a0:	6922      	ldr	r2, [r4, #16]
 80091a2:	1a98      	subs	r0, r3, r2
 80091a4:	6963      	ldr	r3, [r4, #20]
 80091a6:	b2f6      	uxtb	r6, r6
 80091a8:	4283      	cmp	r3, r0
 80091aa:	4637      	mov	r7, r6
 80091ac:	dc05      	bgt.n	80091ba <__swbuf_r+0x4e>
 80091ae:	4621      	mov	r1, r4
 80091b0:	4628      	mov	r0, r5
 80091b2:	f7ff ffb3 	bl	800911c <_fflush_r>
 80091b6:	2800      	cmp	r0, #0
 80091b8:	d1ed      	bne.n	8009196 <__swbuf_r+0x2a>
 80091ba:	68a3      	ldr	r3, [r4, #8]
 80091bc:	3b01      	subs	r3, #1
 80091be:	60a3      	str	r3, [r4, #8]
 80091c0:	6823      	ldr	r3, [r4, #0]
 80091c2:	1c5a      	adds	r2, r3, #1
 80091c4:	6022      	str	r2, [r4, #0]
 80091c6:	701e      	strb	r6, [r3, #0]
 80091c8:	6962      	ldr	r2, [r4, #20]
 80091ca:	1c43      	adds	r3, r0, #1
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d004      	beq.n	80091da <__swbuf_r+0x6e>
 80091d0:	89a3      	ldrh	r3, [r4, #12]
 80091d2:	07db      	lsls	r3, r3, #31
 80091d4:	d5e1      	bpl.n	800919a <__swbuf_r+0x2e>
 80091d6:	2e0a      	cmp	r6, #10
 80091d8:	d1df      	bne.n	800919a <__swbuf_r+0x2e>
 80091da:	4621      	mov	r1, r4
 80091dc:	4628      	mov	r0, r5
 80091de:	f7ff ff9d 	bl	800911c <_fflush_r>
 80091e2:	2800      	cmp	r0, #0
 80091e4:	d0d9      	beq.n	800919a <__swbuf_r+0x2e>
 80091e6:	e7d6      	b.n	8009196 <__swbuf_r+0x2a>

080091e8 <__swsetup_r>:
 80091e8:	b538      	push	{r3, r4, r5, lr}
 80091ea:	4b29      	ldr	r3, [pc, #164]	@ (8009290 <__swsetup_r+0xa8>)
 80091ec:	4605      	mov	r5, r0
 80091ee:	6818      	ldr	r0, [r3, #0]
 80091f0:	460c      	mov	r4, r1
 80091f2:	b118      	cbz	r0, 80091fc <__swsetup_r+0x14>
 80091f4:	6a03      	ldr	r3, [r0, #32]
 80091f6:	b90b      	cbnz	r3, 80091fc <__swsetup_r+0x14>
 80091f8:	f7ff fa3e 	bl	8008678 <__sinit>
 80091fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009200:	0719      	lsls	r1, r3, #28
 8009202:	d422      	bmi.n	800924a <__swsetup_r+0x62>
 8009204:	06da      	lsls	r2, r3, #27
 8009206:	d407      	bmi.n	8009218 <__swsetup_r+0x30>
 8009208:	2209      	movs	r2, #9
 800920a:	602a      	str	r2, [r5, #0]
 800920c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009210:	81a3      	strh	r3, [r4, #12]
 8009212:	f04f 30ff 	mov.w	r0, #4294967295
 8009216:	e033      	b.n	8009280 <__swsetup_r+0x98>
 8009218:	0758      	lsls	r0, r3, #29
 800921a:	d512      	bpl.n	8009242 <__swsetup_r+0x5a>
 800921c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800921e:	b141      	cbz	r1, 8009232 <__swsetup_r+0x4a>
 8009220:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009224:	4299      	cmp	r1, r3
 8009226:	d002      	beq.n	800922e <__swsetup_r+0x46>
 8009228:	4628      	mov	r0, r5
 800922a:	f7ff fb2d 	bl	8008888 <_free_r>
 800922e:	2300      	movs	r3, #0
 8009230:	6363      	str	r3, [r4, #52]	@ 0x34
 8009232:	89a3      	ldrh	r3, [r4, #12]
 8009234:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009238:	81a3      	strh	r3, [r4, #12]
 800923a:	2300      	movs	r3, #0
 800923c:	6063      	str	r3, [r4, #4]
 800923e:	6923      	ldr	r3, [r4, #16]
 8009240:	6023      	str	r3, [r4, #0]
 8009242:	89a3      	ldrh	r3, [r4, #12]
 8009244:	f043 0308 	orr.w	r3, r3, #8
 8009248:	81a3      	strh	r3, [r4, #12]
 800924a:	6923      	ldr	r3, [r4, #16]
 800924c:	b94b      	cbnz	r3, 8009262 <__swsetup_r+0x7a>
 800924e:	89a3      	ldrh	r3, [r4, #12]
 8009250:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009254:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009258:	d003      	beq.n	8009262 <__swsetup_r+0x7a>
 800925a:	4621      	mov	r1, r4
 800925c:	4628      	mov	r0, r5
 800925e:	f000 f84f 	bl	8009300 <__smakebuf_r>
 8009262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009266:	f013 0201 	ands.w	r2, r3, #1
 800926a:	d00a      	beq.n	8009282 <__swsetup_r+0x9a>
 800926c:	2200      	movs	r2, #0
 800926e:	60a2      	str	r2, [r4, #8]
 8009270:	6962      	ldr	r2, [r4, #20]
 8009272:	4252      	negs	r2, r2
 8009274:	61a2      	str	r2, [r4, #24]
 8009276:	6922      	ldr	r2, [r4, #16]
 8009278:	b942      	cbnz	r2, 800928c <__swsetup_r+0xa4>
 800927a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800927e:	d1c5      	bne.n	800920c <__swsetup_r+0x24>
 8009280:	bd38      	pop	{r3, r4, r5, pc}
 8009282:	0799      	lsls	r1, r3, #30
 8009284:	bf58      	it	pl
 8009286:	6962      	ldrpl	r2, [r4, #20]
 8009288:	60a2      	str	r2, [r4, #8]
 800928a:	e7f4      	b.n	8009276 <__swsetup_r+0x8e>
 800928c:	2000      	movs	r0, #0
 800928e:	e7f7      	b.n	8009280 <__swsetup_r+0x98>
 8009290:	24000038 	.word	0x24000038

08009294 <_sbrk_r>:
 8009294:	b538      	push	{r3, r4, r5, lr}
 8009296:	4d06      	ldr	r5, [pc, #24]	@ (80092b0 <_sbrk_r+0x1c>)
 8009298:	2300      	movs	r3, #0
 800929a:	4604      	mov	r4, r0
 800929c:	4608      	mov	r0, r1
 800929e:	602b      	str	r3, [r5, #0]
 80092a0:	f7f8 ff7a 	bl	8002198 <_sbrk>
 80092a4:	1c43      	adds	r3, r0, #1
 80092a6:	d102      	bne.n	80092ae <_sbrk_r+0x1a>
 80092a8:	682b      	ldr	r3, [r5, #0]
 80092aa:	b103      	cbz	r3, 80092ae <_sbrk_r+0x1a>
 80092ac:	6023      	str	r3, [r4, #0]
 80092ae:	bd38      	pop	{r3, r4, r5, pc}
 80092b0:	24000324 	.word	0x24000324

080092b4 <__swhatbuf_r>:
 80092b4:	b570      	push	{r4, r5, r6, lr}
 80092b6:	460c      	mov	r4, r1
 80092b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092bc:	2900      	cmp	r1, #0
 80092be:	b096      	sub	sp, #88	@ 0x58
 80092c0:	4615      	mov	r5, r2
 80092c2:	461e      	mov	r6, r3
 80092c4:	da0d      	bge.n	80092e2 <__swhatbuf_r+0x2e>
 80092c6:	89a3      	ldrh	r3, [r4, #12]
 80092c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80092cc:	f04f 0100 	mov.w	r1, #0
 80092d0:	bf14      	ite	ne
 80092d2:	2340      	movne	r3, #64	@ 0x40
 80092d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80092d8:	2000      	movs	r0, #0
 80092da:	6031      	str	r1, [r6, #0]
 80092dc:	602b      	str	r3, [r5, #0]
 80092de:	b016      	add	sp, #88	@ 0x58
 80092e0:	bd70      	pop	{r4, r5, r6, pc}
 80092e2:	466a      	mov	r2, sp
 80092e4:	f000 f848 	bl	8009378 <_fstat_r>
 80092e8:	2800      	cmp	r0, #0
 80092ea:	dbec      	blt.n	80092c6 <__swhatbuf_r+0x12>
 80092ec:	9901      	ldr	r1, [sp, #4]
 80092ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80092f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80092f6:	4259      	negs	r1, r3
 80092f8:	4159      	adcs	r1, r3
 80092fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80092fe:	e7eb      	b.n	80092d8 <__swhatbuf_r+0x24>

08009300 <__smakebuf_r>:
 8009300:	898b      	ldrh	r3, [r1, #12]
 8009302:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009304:	079d      	lsls	r5, r3, #30
 8009306:	4606      	mov	r6, r0
 8009308:	460c      	mov	r4, r1
 800930a:	d507      	bpl.n	800931c <__smakebuf_r+0x1c>
 800930c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009310:	6023      	str	r3, [r4, #0]
 8009312:	6123      	str	r3, [r4, #16]
 8009314:	2301      	movs	r3, #1
 8009316:	6163      	str	r3, [r4, #20]
 8009318:	b003      	add	sp, #12
 800931a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800931c:	ab01      	add	r3, sp, #4
 800931e:	466a      	mov	r2, sp
 8009320:	f7ff ffc8 	bl	80092b4 <__swhatbuf_r>
 8009324:	9f00      	ldr	r7, [sp, #0]
 8009326:	4605      	mov	r5, r0
 8009328:	4639      	mov	r1, r7
 800932a:	4630      	mov	r0, r6
 800932c:	f7ff fb18 	bl	8008960 <_malloc_r>
 8009330:	b948      	cbnz	r0, 8009346 <__smakebuf_r+0x46>
 8009332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009336:	059a      	lsls	r2, r3, #22
 8009338:	d4ee      	bmi.n	8009318 <__smakebuf_r+0x18>
 800933a:	f023 0303 	bic.w	r3, r3, #3
 800933e:	f043 0302 	orr.w	r3, r3, #2
 8009342:	81a3      	strh	r3, [r4, #12]
 8009344:	e7e2      	b.n	800930c <__smakebuf_r+0xc>
 8009346:	89a3      	ldrh	r3, [r4, #12]
 8009348:	6020      	str	r0, [r4, #0]
 800934a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800934e:	81a3      	strh	r3, [r4, #12]
 8009350:	9b01      	ldr	r3, [sp, #4]
 8009352:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009356:	b15b      	cbz	r3, 8009370 <__smakebuf_r+0x70>
 8009358:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800935c:	4630      	mov	r0, r6
 800935e:	f000 f81d 	bl	800939c <_isatty_r>
 8009362:	b128      	cbz	r0, 8009370 <__smakebuf_r+0x70>
 8009364:	89a3      	ldrh	r3, [r4, #12]
 8009366:	f023 0303 	bic.w	r3, r3, #3
 800936a:	f043 0301 	orr.w	r3, r3, #1
 800936e:	81a3      	strh	r3, [r4, #12]
 8009370:	89a3      	ldrh	r3, [r4, #12]
 8009372:	431d      	orrs	r5, r3
 8009374:	81a5      	strh	r5, [r4, #12]
 8009376:	e7cf      	b.n	8009318 <__smakebuf_r+0x18>

08009378 <_fstat_r>:
 8009378:	b538      	push	{r3, r4, r5, lr}
 800937a:	4d07      	ldr	r5, [pc, #28]	@ (8009398 <_fstat_r+0x20>)
 800937c:	2300      	movs	r3, #0
 800937e:	4604      	mov	r4, r0
 8009380:	4608      	mov	r0, r1
 8009382:	4611      	mov	r1, r2
 8009384:	602b      	str	r3, [r5, #0]
 8009386:	f7f8 fedf 	bl	8002148 <_fstat>
 800938a:	1c43      	adds	r3, r0, #1
 800938c:	d102      	bne.n	8009394 <_fstat_r+0x1c>
 800938e:	682b      	ldr	r3, [r5, #0]
 8009390:	b103      	cbz	r3, 8009394 <_fstat_r+0x1c>
 8009392:	6023      	str	r3, [r4, #0]
 8009394:	bd38      	pop	{r3, r4, r5, pc}
 8009396:	bf00      	nop
 8009398:	24000324 	.word	0x24000324

0800939c <_isatty_r>:
 800939c:	b538      	push	{r3, r4, r5, lr}
 800939e:	4d06      	ldr	r5, [pc, #24]	@ (80093b8 <_isatty_r+0x1c>)
 80093a0:	2300      	movs	r3, #0
 80093a2:	4604      	mov	r4, r0
 80093a4:	4608      	mov	r0, r1
 80093a6:	602b      	str	r3, [r5, #0]
 80093a8:	f7f8 fede 	bl	8002168 <_isatty>
 80093ac:	1c43      	adds	r3, r0, #1
 80093ae:	d102      	bne.n	80093b6 <_isatty_r+0x1a>
 80093b0:	682b      	ldr	r3, [r5, #0]
 80093b2:	b103      	cbz	r3, 80093b6 <_isatty_r+0x1a>
 80093b4:	6023      	str	r3, [r4, #0]
 80093b6:	bd38      	pop	{r3, r4, r5, pc}
 80093b8:	24000324 	.word	0x24000324

080093bc <_init>:
 80093bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093be:	bf00      	nop
 80093c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093c2:	bc08      	pop	{r3}
 80093c4:	469e      	mov	lr, r3
 80093c6:	4770      	bx	lr

080093c8 <_fini>:
 80093c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ca:	bf00      	nop
 80093cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ce:	bc08      	pop	{r3}
 80093d0:	469e      	mov	lr, r3
 80093d2:	4770      	bx	lr
