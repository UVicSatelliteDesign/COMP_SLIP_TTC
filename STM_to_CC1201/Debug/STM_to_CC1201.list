
STM_to_CC1201.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000981c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018a8  08009abc  08009abc  0000aabc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b364  0800b364  0000c364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b36c  0800b36c  0000c36c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b370  0800b370  0000c370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  24000000  0800b374  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000334  24000088  0800b3fc  0000d088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240003bc  0800b3fc  0000d3bc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d088  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015b40  00000000  00000000  0000d0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c8b  00000000  00000000  00022bf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f28  00000000  00000000  00025888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b9c  00000000  00000000  000267b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000384e5  00000000  00000000  0002734c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016406  00000000  00000000  0005f831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015eebe  00000000  00000000  00075c37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d4af5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000045e8  00000000  00000000  001d4b38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000051  00000000  00000000  001d9120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009aa4 	.word	0x08009aa4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	08009aa4 	.word	0x08009aa4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <CC1201_SoftReset>:

// Read bit for register addresses
#define CC1201_READ_BIT                 0x80

HAL_StatusTypeDef CC1201_SoftReset(uint8_t *status_byte)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_SOFT_RESET, status_byte);
 80006b4:	6879      	ldr	r1, [r7, #4]
 80006b6:	2030      	movs	r0, #48	@ 0x30
 80006b8:	f000 faca 	bl	8000c50 <CC1201_SendStrobe>
 80006bc:	4603      	mov	r3, r0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <CC1201_FastTxOn>:

HAL_StatusTypeDef CC1201_FastTxOn(uint8_t *status_byte)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_FAST_TX_ON, status_byte);
 80006ce:	6879      	ldr	r1, [r7, #4]
 80006d0:	2031      	movs	r0, #49	@ 0x31
 80006d2:	f000 fabd 	bl	8000c50 <CC1201_SendStrobe>
 80006d6:	4603      	mov	r3, r0
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <CC1201_CalFreqSynth>:
{
    return CC1201_SendStrobe(CC1201_STROBE_OSC_OFF, status_byte);
}

HAL_StatusTypeDef CC1201_CalFreqSynth(uint8_t *status_byte)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_CAL_FREQ_SYNTH, status_byte);
 80006e8:	6879      	ldr	r1, [r7, #4]
 80006ea:	2033      	movs	r0, #51	@ 0x33
 80006ec:	f000 fab0 	bl	8000c50 <CC1201_SendStrobe>
 80006f0:	4603      	mov	r3, r0
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <CC1201_EnterRxMode>:

HAL_StatusTypeDef CC1201_EnterRxMode(uint8_t *status_byte)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b082      	sub	sp, #8
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_RX, status_byte);
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	2034      	movs	r0, #52	@ 0x34
 8000706:	f000 faa3 	bl	8000c50 <CC1201_SendStrobe>
 800070a:	4603      	mov	r3, r0
}
 800070c:	4618      	mov	r0, r3
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <CC1201_EnterTxMode>:

HAL_StatusTypeDef CC1201_EnterTxMode(uint8_t *status_byte)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_TX, status_byte);
 800071c:	6879      	ldr	r1, [r7, #4]
 800071e:	2035      	movs	r0, #53	@ 0x35
 8000720:	f000 fa96 	bl	8000c50 <CC1201_SendStrobe>
 8000724:	4603      	mov	r3, r0
}
 8000726:	4618      	mov	r0, r3
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <CC1201_EnterIdleMode>:

HAL_StatusTypeDef CC1201_EnterIdleMode(uint8_t *status_byte)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	b082      	sub	sp, #8
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_IDLE, status_byte);
 8000736:	6879      	ldr	r1, [r7, #4]
 8000738:	2036      	movs	r0, #54	@ 0x36
 800073a:	f000 fa89 	bl	8000c50 <CC1201_SendStrobe>
 800073e:	4603      	mov	r3, r0
}
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <CC1201_AutoFreqComp>:

HAL_StatusTypeDef CC1201_AutoFreqComp(uint8_t *status_byte)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_AUTO_FREQ_COMP, status_byte);
 8000750:	6879      	ldr	r1, [r7, #4]
 8000752:	2037      	movs	r0, #55	@ 0x37
 8000754:	f000 fa7c 	bl	8000c50 <CC1201_SendStrobe>
 8000758:	4603      	mov	r3, r0
}
 800075a:	4618      	mov	r0, r3
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <CC1201_WakeOnRadio>:

HAL_StatusTypeDef CC1201_WakeOnRadio(uint8_t *status_byte)
{
 8000762:	b580      	push	{r7, lr}
 8000764:	b082      	sub	sp, #8
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_WAKE_ON_RADIO, status_byte);
 800076a:	6879      	ldr	r1, [r7, #4]
 800076c:	2038      	movs	r0, #56	@ 0x38
 800076e:	f000 fa6f 	bl	8000c50 <CC1201_SendStrobe>
 8000772:	4603      	mov	r3, r0
}
 8000774:	4618      	mov	r0, r3
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <CC1201_EnterSleepMode>:

HAL_StatusTypeDef CC1201_EnterSleepMode(uint8_t *status_byte)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_SLEEP, status_byte);
 8000784:	6879      	ldr	r1, [r7, #4]
 8000786:	2039      	movs	r0, #57	@ 0x39
 8000788:	f000 fa62 	bl	8000c50 <CC1201_SendStrobe>
 800078c:	4603      	mov	r3, r0
}
 800078e:	4618      	mov	r0, r3
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <CC1201_FlushRxFifo>:

HAL_StatusTypeDef CC1201_FlushRxFifo(uint8_t *status_byte)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b082      	sub	sp, #8
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_FLUSH_RX, status_byte);
 800079e:	6879      	ldr	r1, [r7, #4]
 80007a0:	203a      	movs	r0, #58	@ 0x3a
 80007a2:	f000 fa55 	bl	8000c50 <CC1201_SendStrobe>
 80007a6:	4603      	mov	r3, r0
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <CC1201_FlushTxFifo>:

HAL_StatusTypeDef CC1201_FlushTxFifo(uint8_t *status_byte)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_FLUSH_TX, status_byte);
 80007b8:	6879      	ldr	r1, [r7, #4]
 80007ba:	203b      	movs	r0, #59	@ 0x3b
 80007bc:	f000 fa48 	bl	8000c50 <CC1201_SendStrobe>
 80007c0:	4603      	mov	r3, r0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <CC1201_WorReset>:

HAL_StatusTypeDef CC1201_WorReset(uint8_t *status_byte)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b082      	sub	sp, #8
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_WOR_RESET, status_byte);
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	203c      	movs	r0, #60	@ 0x3c
 80007d6:	f000 fa3b 	bl	8000c50 <CC1201_SendStrobe>
 80007da:	4603      	mov	r3, r0
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <CC1201_Nop>:

HAL_StatusTypeDef CC1201_Nop(uint8_t *status_byte)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
    return CC1201_SendStrobe(CC1201_STROBE_NOP, status_byte);
 80007ec:	6879      	ldr	r1, [r7, #4]
 80007ee:	203d      	movs	r0, #61	@ 0x3d
 80007f0:	f000 fa2e 	bl	8000c50 <CC1201_SendStrobe>
 80007f4:	4603      	mov	r3, r0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <CC1201_ReadStatus>:
 * @param reg_addr The address of the register to read. The read bit (MSB) will be set internally.
 * @param read_data Pointer to a uint8_t where the read data will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadStatus(uint16_t reg_addr, uint8_t *read_data)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af02      	add	r7, sp, #8
 8000806:	4603      	mov	r3, r0
 8000808:	6039      	str	r1, [r7, #0]
 800080a:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[4];
    uint8_t rx_buffer[4];
    uint8_t buffer_size;

    if (reg_addr > 0xFF) {
 800080c:	88fb      	ldrh	r3, [r7, #6]
 800080e:	2bff      	cmp	r3, #255	@ 0xff
 8000810:	d909      	bls.n	8000826 <CC1201_ReadStatus+0x26>
        // Extended register (burst access)
        tx_buffer[0] = 0x2F; // Extended register access command
 8000812:	232f      	movs	r3, #47	@ 0x2f
 8000814:	743b      	strb	r3, [r7, #16]
        tx_buffer[1] = (uint8_t)(reg_addr & 0xFF); // Low byte of address
 8000816:	88fb      	ldrh	r3, [r7, #6]
 8000818:	b2db      	uxtb	r3, r3
 800081a:	747b      	strb	r3, [r7, #17]
        tx_buffer[2] = 0x00; // Dummy byte for reading
 800081c:	2300      	movs	r3, #0
 800081e:	74bb      	strb	r3, [r7, #18]
        buffer_size = 3;
 8000820:	2303      	movs	r3, #3
 8000822:	75fb      	strb	r3, [r7, #23]
 8000824:	e009      	b.n	800083a <CC1201_ReadStatus+0x3a>
    } else {
        // Standard register
        tx_buffer[0] = (uint8_t)reg_addr | CC1201_READ_BIT;
 8000826:	88fb      	ldrh	r3, [r7, #6]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800082e:	b2db      	uxtb	r3, r3
 8000830:	743b      	strb	r3, [r7, #16]
        tx_buffer[1] = 0x00; // Dummy byte for reading
 8000832:	2300      	movs	r3, #0
 8000834:	747b      	strb	r3, [r7, #17]
        buffer_size = 2;
 8000836:	2302      	movs	r3, #2
 8000838:	75fb      	strb	r3, [r7, #23]
    }

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 800083a:	2200      	movs	r2, #0
 800083c:	2110      	movs	r1, #16
 800083e:	4815      	ldr	r0, [pc, #84]	@ (8000894 <CC1201_ReadStatus+0x94>)
 8000840:	f003 f9c2 	bl	8003bc8 <HAL_GPIO_WritePin>

    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, tx_buffer, rx_buffer, buffer_size, HAL_MAX_DELAY);
 8000844:	7dfb      	ldrb	r3, [r7, #23]
 8000846:	b29b      	uxth	r3, r3
 8000848:	f107 020c 	add.w	r2, r7, #12
 800084c:	f107 0110 	add.w	r1, r7, #16
 8000850:	f04f 30ff 	mov.w	r0, #4294967295
 8000854:	9000      	str	r0, [sp, #0]
 8000856:	4810      	ldr	r0, [pc, #64]	@ (8000898 <CC1201_ReadStatus+0x98>)
 8000858:	f006 fb48 	bl	8006eec <HAL_SPI_TransmitReceive>
 800085c:	4603      	mov	r3, r0
 800085e:	75bb      	strb	r3, [r7, #22]

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 8000860:	2201      	movs	r2, #1
 8000862:	2110      	movs	r1, #16
 8000864:	480b      	ldr	r0, [pc, #44]	@ (8000894 <CC1201_ReadStatus+0x94>)
 8000866:	f003 f9af 	bl	8003bc8 <HAL_GPIO_WritePin>

    if (status == HAL_OK) {
 800086a:	7dbb      	ldrb	r3, [r7, #22]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d10c      	bne.n	800088a <CC1201_ReadStatus+0x8a>
        if (read_data != NULL) {
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d009      	beq.n	800088a <CC1201_ReadStatus+0x8a>
            if (reg_addr > 0xFF) {
 8000876:	88fb      	ldrh	r3, [r7, #6]
 8000878:	2bff      	cmp	r3, #255	@ 0xff
 800087a:	d903      	bls.n	8000884 <CC1201_ReadStatus+0x84>
                *read_data = rx_buffer[2]; // Extended register data
 800087c:	7bba      	ldrb	r2, [r7, #14]
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	701a      	strb	r2, [r3, #0]
 8000882:	e002      	b.n	800088a <CC1201_ReadStatus+0x8a>
            } else {
                *read_data = rx_buffer[1]; // Standard register data
 8000884:	7b7a      	ldrb	r2, [r7, #13]
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return status;
 800088a:	7dbb      	ldrb	r3, [r7, #22]
}
 800088c:	4618      	mov	r0, r3
 800088e:	3718      	adds	r7, #24
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	58021000 	.word	0x58021000
 8000898:	240000b8 	.word	0x240000b8

0800089c <CC1201_WriteRegister>:
 * @param reg_addr The address of the register to write to.
 * @param write_data The byte of data to write to the register.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteRegister(uint16_t reg_addr, uint8_t write_data)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	460a      	mov	r2, r1
 80008a6:	80fb      	strh	r3, [r7, #6]
 80008a8:	4613      	mov	r3, r2
 80008aa:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[4];
    uint8_t buffer_size;

    if (reg_addr > 0xFF) {
 80008ac:	88fb      	ldrh	r3, [r7, #6]
 80008ae:	2bff      	cmp	r3, #255	@ 0xff
 80008b0:	d909      	bls.n	80008c6 <CC1201_WriteRegister+0x2a>
        // Extended register (burst access)
        tx_buffer[0] = 0x2F; // Extended register access command  
 80008b2:	232f      	movs	r3, #47	@ 0x2f
 80008b4:	723b      	strb	r3, [r7, #8]
        tx_buffer[1] = (uint8_t)(reg_addr & 0xFF); // Low byte of address
 80008b6:	88fb      	ldrh	r3, [r7, #6]
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	727b      	strb	r3, [r7, #9]
        tx_buffer[2] = write_data; // Data to write
 80008bc:	797b      	ldrb	r3, [r7, #5]
 80008be:	72bb      	strb	r3, [r7, #10]
        buffer_size = 3;
 80008c0:	2303      	movs	r3, #3
 80008c2:	73fb      	strb	r3, [r7, #15]
 80008c4:	e006      	b.n	80008d4 <CC1201_WriteRegister+0x38>
    } else {
        // Standard register
        tx_buffer[0] = (uint8_t)reg_addr; // Register address
 80008c6:	88fb      	ldrh	r3, [r7, #6]
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	723b      	strb	r3, [r7, #8]
        tx_buffer[1] = write_data; // Data to write
 80008cc:	797b      	ldrb	r3, [r7, #5]
 80008ce:	727b      	strb	r3, [r7, #9]
        buffer_size = 2;
 80008d0:	2302      	movs	r3, #2
 80008d2:	73fb      	strb	r3, [r7, #15]
    }

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 80008d4:	2200      	movs	r2, #0
 80008d6:	2110      	movs	r1, #16
 80008d8:	480b      	ldr	r0, [pc, #44]	@ (8000908 <CC1201_WriteRegister+0x6c>)
 80008da:	f003 f975 	bl	8003bc8 <HAL_GPIO_WritePin>

    status = HAL_SPI_Transmit(&CC1201_SPI_HANDLE, tx_buffer, buffer_size, HAL_MAX_DELAY);
 80008de:	7bfb      	ldrb	r3, [r7, #15]
 80008e0:	b29a      	uxth	r2, r3
 80008e2:	f107 0108 	add.w	r1, r7, #8
 80008e6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ea:	4808      	ldr	r0, [pc, #32]	@ (800090c <CC1201_WriteRegister+0x70>)
 80008ec:	f006 f910 	bl	8006b10 <HAL_SPI_Transmit>
 80008f0:	4603      	mov	r3, r0
 80008f2:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 80008f4:	2201      	movs	r2, #1
 80008f6:	2110      	movs	r1, #16
 80008f8:	4803      	ldr	r0, [pc, #12]	@ (8000908 <CC1201_WriteRegister+0x6c>)
 80008fa:	f003 f965 	bl	8003bc8 <HAL_GPIO_WritePin>

    return status;
 80008fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8000900:	4618      	mov	r0, r3
 8000902:	3710      	adds	r7, #16
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	58021000 	.word	0x58021000
 800090c:	240000b8 	.word	0x240000b8

08000910 <CC1201_ReadMARCState>:
 *
 * @param marc_state Pointer to a uint8_t where the MARCSTATE value will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadMARCState(uint8_t *marc_state)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_MARCSTATE, marc_state);
 8000918:	6879      	ldr	r1, [r7, #4]
 800091a:	f642 7073 	movw	r0, #12147	@ 0x2f73
 800091e:	f7ff ff6f 	bl	8000800 <CC1201_ReadStatus>
 8000922:	4603      	mov	r3, r0
}
 8000924:	4618      	mov	r0, r3
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <CC1201_GetNumRXBytes>:
 *
 * @param num_bytes Pointer to a uint8_t where the number of RX bytes will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_GetNumRXBytes(uint8_t *num_bytes)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_NUM_RXBYTES, num_bytes);
 8000934:	6879      	ldr	r1, [r7, #4]
 8000936:	f642 707a 	movw	r0, #12154	@ 0x2f7a
 800093a:	f7ff ff61 	bl	8000800 <CC1201_ReadStatus>
 800093e:	4603      	mov	r3, r0
}
 8000940:	4618      	mov	r0, r3
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <CC1201_GetNumTXBytes>:
 *
 * @param num_bytes Pointer to a uint8_t where the number of TX bytes will be stored.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_GetNumTXBytes(uint8_t *num_bytes)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
    return CC1201_ReadStatus(CC1201_NUM_TXBYTES, num_bytes);
 8000950:	6879      	ldr	r1, [r7, #4]
 8000952:	f642 707b 	movw	r0, #12155	@ 0x2f7b
 8000956:	f7ff ff53 	bl	8000800 <CC1201_ReadStatus>
 800095a:	4603      	mov	r3, r0
}
 800095c:	4618      	mov	r0, r3
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <CC1201_WriteTxFifo>:
 * @param length Number of bytes to write.
 * @param status_byte Pointer to store the status byte returned.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteTxFifo(uint8_t *data, uint8_t length, uint8_t *status_byte)
{
 8000964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000968:	b08f      	sub	sp, #60	@ 0x3c
 800096a:	af02      	add	r7, sp, #8
 800096c:	6178      	str	r0, [r7, #20]
 800096e:	460b      	mov	r3, r1
 8000970:	60fa      	str	r2, [r7, #12]
 8000972:	74fb      	strb	r3, [r7, #19]
 8000974:	466b      	mov	r3, sp
 8000976:	461e      	mov	r6, r3
    if (data == NULL || status_byte == NULL || length == 0) {
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d005      	beq.n	800098a <CC1201_WriteTxFifo+0x26>
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d002      	beq.n	800098a <CC1201_WriteTxFifo+0x26>
 8000984:	7cfb      	ldrb	r3, [r7, #19]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d101      	bne.n	800098e <CC1201_WriteTxFifo+0x2a>
        return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
 800098c:	e088      	b.n	8000aa0 <CC1201_WriteTxFifo+0x13c>
    }
    
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[2 + length]; // Command + address + data
 800098e:	7cfb      	ldrb	r3, [r7, #19]
 8000990:	1c99      	adds	r1, r3, #2
 8000992:	1e4b      	subs	r3, r1, #1
 8000994:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000996:	460a      	mov	r2, r1
 8000998:	2300      	movs	r3, #0
 800099a:	603a      	str	r2, [r7, #0]
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	f04f 0200 	mov.w	r2, #0
 80009a2:	f04f 0300 	mov.w	r3, #0
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	00c3      	lsls	r3, r0, #3
 80009aa:	6838      	ldr	r0, [r7, #0]
 80009ac:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80009b0:	6838      	ldr	r0, [r7, #0]
 80009b2:	00c2      	lsls	r2, r0, #3
 80009b4:	460a      	mov	r2, r1
 80009b6:	2300      	movs	r3, #0
 80009b8:	4692      	mov	sl, r2
 80009ba:	469b      	mov	fp, r3
 80009bc:	f04f 0200 	mov.w	r2, #0
 80009c0:	f04f 0300 	mov.w	r3, #0
 80009c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80009c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80009cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80009d0:	460b      	mov	r3, r1
 80009d2:	3307      	adds	r3, #7
 80009d4:	08db      	lsrs	r3, r3, #3
 80009d6:	00db      	lsls	r3, r3, #3
 80009d8:	ebad 0d03 	sub.w	sp, sp, r3
 80009dc:	ab02      	add	r3, sp, #8
 80009de:	3300      	adds	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t rx_buffer[2 + length];
 80009e2:	7cfb      	ldrb	r3, [r7, #19]
 80009e4:	1c99      	adds	r1, r3, #2
 80009e6:	1e4b      	subs	r3, r1, #1
 80009e8:	623b      	str	r3, [r7, #32]
 80009ea:	460a      	mov	r2, r1
 80009ec:	2300      	movs	r3, #0
 80009ee:	4690      	mov	r8, r2
 80009f0:	4699      	mov	r9, r3
 80009f2:	f04f 0200 	mov.w	r2, #0
 80009f6:	f04f 0300 	mov.w	r3, #0
 80009fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80009fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000a02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000a06:	460a      	mov	r2, r1
 8000a08:	2300      	movs	r3, #0
 8000a0a:	4614      	mov	r4, r2
 8000a0c:	461d      	mov	r5, r3
 8000a0e:	f04f 0200 	mov.w	r2, #0
 8000a12:	f04f 0300 	mov.w	r3, #0
 8000a16:	00eb      	lsls	r3, r5, #3
 8000a18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000a1c:	00e2      	lsls	r2, r4, #3
 8000a1e:	460b      	mov	r3, r1
 8000a20:	3307      	adds	r3, #7
 8000a22:	08db      	lsrs	r3, r3, #3
 8000a24:	00db      	lsls	r3, r3, #3
 8000a26:	ebad 0d03 	sub.w	sp, sp, r3
 8000a2a:	ab02      	add	r3, sp, #8
 8000a2c:	3300      	adds	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
    
    // Build command: burst write to TX FIFO (0x3F | 0x40)
    tx_buffer[0] = 0x7F; // TX FIFO burst write
 8000a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a32:	227f      	movs	r2, #127	@ 0x7f
 8000a34:	701a      	strb	r2, [r3, #0]
    
    // Copy data to transmit buffer
    for (uint8_t i = 0; i < length; i++) {
 8000a36:	2300      	movs	r3, #0
 8000a38:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000a3c:	e00e      	b.n	8000a5c <CC1201_WriteTxFifo+0xf8>
        tx_buffer[1 + i] = data[i];
 8000a3e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a42:	697a      	ldr	r2, [r7, #20]
 8000a44:	441a      	add	r2, r3
 8000a46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	7811      	ldrb	r1, [r2, #0]
 8000a4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a50:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < length; i++) {
 8000a52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a56:	3301      	adds	r3, #1
 8000a58:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000a5c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000a60:	7cfb      	ldrb	r3, [r7, #19]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d3eb      	bcc.n	8000a3e <CC1201_WriteTxFifo+0xda>
    }
    
    // Pull CS low to start SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2110      	movs	r1, #16
 8000a6a:	4810      	ldr	r0, [pc, #64]	@ (8000aac <CC1201_WriteTxFifo+0x148>)
 8000a6c:	f003 f8ac 	bl	8003bc8 <HAL_GPIO_WritePin>
    
    // Perform SPI transaction
    status = HAL_SPI_TransmitReceive(&hspi2, tx_buffer, rx_buffer, length + 1, HAL_MAX_DELAY);
 8000a70:	7cfb      	ldrb	r3, [r7, #19]
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	3301      	adds	r3, #1
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	f04f 32ff 	mov.w	r2, #4294967295
 8000a7c:	9200      	str	r2, [sp, #0]
 8000a7e:	69fa      	ldr	r2, [r7, #28]
 8000a80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000a82:	480b      	ldr	r0, [pc, #44]	@ (8000ab0 <CC1201_WriteTxFifo+0x14c>)
 8000a84:	f006 fa32 	bl	8006eec <HAL_SPI_TransmitReceive>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	76fb      	strb	r3, [r7, #27]
    
    // Pull CS high to end SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	2110      	movs	r1, #16
 8000a90:	4806      	ldr	r0, [pc, #24]	@ (8000aac <CC1201_WriteTxFifo+0x148>)
 8000a92:	f003 f899 	bl	8003bc8 <HAL_GPIO_WritePin>
    
    // Store status byte (first received byte)
    *status_byte = rx_buffer[0];
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	781a      	ldrb	r2, [r3, #0]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	701a      	strb	r2, [r3, #0]
    
    return status;
 8000a9e:	7efb      	ldrb	r3, [r7, #27]
 8000aa0:	46b5      	mov	sp, r6
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3734      	adds	r7, #52	@ 0x34
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000aac:	58021000 	.word	0x58021000
 8000ab0:	240000b8 	.word	0x240000b8

08000ab4 <CC1201_ReadRxFifo>:
 * @param length Number of bytes to read.
 * @param status_byte Pointer to store the status byte returned.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_ReadRxFifo(uint8_t *data, uint8_t length, uint8_t *status_byte)
{
 8000ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ab8:	b08f      	sub	sp, #60	@ 0x3c
 8000aba:	af02      	add	r7, sp, #8
 8000abc:	6178      	str	r0, [r7, #20]
 8000abe:	460b      	mov	r3, r1
 8000ac0:	60fa      	str	r2, [r7, #12]
 8000ac2:	74fb      	strb	r3, [r7, #19]
 8000ac4:	466b      	mov	r3, sp
 8000ac6:	461e      	mov	r6, r3
    if (data == NULL || status_byte == NULL || length == 0) {
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d005      	beq.n	8000ada <CC1201_ReadRxFifo+0x26>
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d002      	beq.n	8000ada <CC1201_ReadRxFifo+0x26>
 8000ad4:	7cfb      	ldrb	r3, [r7, #19]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d101      	bne.n	8000ade <CC1201_ReadRxFifo+0x2a>
        return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	e09b      	b.n	8000c16 <CC1201_ReadRxFifo+0x162>
    }
    
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[1 + length]; // Command + dummy bytes
 8000ade:	7cfb      	ldrb	r3, [r7, #19]
 8000ae0:	1c59      	adds	r1, r3, #1
 8000ae2:	1e4b      	subs	r3, r1, #1
 8000ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ae6:	460a      	mov	r2, r1
 8000ae8:	2300      	movs	r3, #0
 8000aea:	603a      	str	r2, [r7, #0]
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	f04f 0200 	mov.w	r2, #0
 8000af2:	f04f 0300 	mov.w	r3, #0
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	00c3      	lsls	r3, r0, #3
 8000afa:	6838      	ldr	r0, [r7, #0]
 8000afc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b00:	6838      	ldr	r0, [r7, #0]
 8000b02:	00c2      	lsls	r2, r0, #3
 8000b04:	460a      	mov	r2, r1
 8000b06:	2300      	movs	r3, #0
 8000b08:	4692      	mov	sl, r2
 8000b0a:	469b      	mov	fp, r3
 8000b0c:	f04f 0200 	mov.w	r2, #0
 8000b10:	f04f 0300 	mov.w	r3, #0
 8000b14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000b18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000b1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000b20:	460b      	mov	r3, r1
 8000b22:	3307      	adds	r3, #7
 8000b24:	08db      	lsrs	r3, r3, #3
 8000b26:	00db      	lsls	r3, r3, #3
 8000b28:	ebad 0d03 	sub.w	sp, sp, r3
 8000b2c:	ab02      	add	r3, sp, #8
 8000b2e:	3300      	adds	r3, #0
 8000b30:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t rx_buffer[1 + length];
 8000b32:	7cfb      	ldrb	r3, [r7, #19]
 8000b34:	1c59      	adds	r1, r3, #1
 8000b36:	1e4b      	subs	r3, r1, #1
 8000b38:	623b      	str	r3, [r7, #32]
 8000b3a:	460a      	mov	r2, r1
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	4690      	mov	r8, r2
 8000b40:	4699      	mov	r9, r3
 8000b42:	f04f 0200 	mov.w	r2, #0
 8000b46:	f04f 0300 	mov.w	r3, #0
 8000b4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000b4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000b52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000b56:	460a      	mov	r2, r1
 8000b58:	2300      	movs	r3, #0
 8000b5a:	4614      	mov	r4, r2
 8000b5c:	461d      	mov	r5, r3
 8000b5e:	f04f 0200 	mov.w	r2, #0
 8000b62:	f04f 0300 	mov.w	r3, #0
 8000b66:	00eb      	lsls	r3, r5, #3
 8000b68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000b6c:	00e2      	lsls	r2, r4, #3
 8000b6e:	460b      	mov	r3, r1
 8000b70:	3307      	adds	r3, #7
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	00db      	lsls	r3, r3, #3
 8000b76:	ebad 0d03 	sub.w	sp, sp, r3
 8000b7a:	ab02      	add	r3, sp, #8
 8000b7c:	3300      	adds	r3, #0
 8000b7e:	61fb      	str	r3, [r7, #28]
    
    // Build command: burst read from RX FIFO (0x3F | 0x80 | 0x40)
    tx_buffer[0] = 0xFF; // RX FIFO burst read
 8000b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b82:	22ff      	movs	r2, #255	@ 0xff
 8000b84:	701a      	strb	r2, [r3, #0]
    
    // Fill with dummy bytes for reading
    for (uint8_t i = 1; i <= length; i++) {
 8000b86:	2301      	movs	r3, #1
 8000b88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000b8c:	e009      	b.n	8000ba2 <CC1201_ReadRxFifo+0xee>
        tx_buffer[i] = 0x00;
 8000b8e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b94:	2100      	movs	r1, #0
 8000b96:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 1; i <= length; i++) {
 8000b98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000ba2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000ba6:	7cfb      	ldrb	r3, [r7, #19]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d9f0      	bls.n	8000b8e <CC1201_ReadRxFifo+0xda>
    }
    
    // Pull CS low to start SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2110      	movs	r1, #16
 8000bb0:	481c      	ldr	r0, [pc, #112]	@ (8000c24 <CC1201_ReadRxFifo+0x170>)
 8000bb2:	f003 f809 	bl	8003bc8 <HAL_GPIO_WritePin>
    
    // Perform SPI transaction
    status = HAL_SPI_TransmitReceive(&hspi2, tx_buffer, rx_buffer, length + 1, HAL_MAX_DELAY);
 8000bb6:	7cfb      	ldrb	r3, [r7, #19]
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	3301      	adds	r3, #1
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc2:	9200      	str	r2, [sp, #0]
 8000bc4:	69fa      	ldr	r2, [r7, #28]
 8000bc6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000bc8:	4817      	ldr	r0, [pc, #92]	@ (8000c28 <CC1201_ReadRxFifo+0x174>)
 8000bca:	f006 f98f 	bl	8006eec <HAL_SPI_TransmitReceive>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	76fb      	strb	r3, [r7, #27]
    
    // Pull CS high to end SPI transaction
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	2110      	movs	r1, #16
 8000bd6:	4813      	ldr	r0, [pc, #76]	@ (8000c24 <CC1201_ReadRxFifo+0x170>)
 8000bd8:	f002 fff6 	bl	8003bc8 <HAL_GPIO_WritePin>
    
    // Store status byte (first received byte)
    *status_byte = rx_buffer[0];
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	781a      	ldrb	r2, [r3, #0]
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	701a      	strb	r2, [r3, #0]
    
    // Copy received data
    for (uint8_t i = 0; i < length; i++) {
 8000be4:	2300      	movs	r3, #0
 8000be6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000bea:	e00e      	b.n	8000c0a <CC1201_ReadRxFifo+0x156>
        data[i] = rx_buffer[1 + i];
 8000bec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000bf0:	1c5a      	adds	r2, r3, #1
 8000bf2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000bf6:	6979      	ldr	r1, [r7, #20]
 8000bf8:	440b      	add	r3, r1
 8000bfa:	69f9      	ldr	r1, [r7, #28]
 8000bfc:	5c8a      	ldrb	r2, [r1, r2]
 8000bfe:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < length; i++) {
 8000c00:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000c04:	3301      	adds	r3, #1
 8000c06:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8000c0a:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000c0e:	7cfb      	ldrb	r3, [r7, #19]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d3eb      	bcc.n	8000bec <CC1201_ReadRxFifo+0x138>
    }
    
    return status;
 8000c14:	7efb      	ldrb	r3, [r7, #27]
 8000c16:	46b5      	mov	sp, r6
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3734      	adds	r7, #52	@ 0x34
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c22:	bf00      	nop
 8000c24:	58021000 	.word	0x58021000
 8000c28:	240000b8 	.word	0x240000b8

08000c2c <CC1201_WriteSingleTxFifo>:
 * @param data Single byte to write to TX FIFO.
 * @param status_byte Pointer to store the status byte returned.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteSingleTxFifo(uint8_t data, uint8_t *status_byte)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	6039      	str	r1, [r7, #0]
 8000c36:	71fb      	strb	r3, [r7, #7]
    return CC1201_WriteTxFifo(&data, 1, status_byte);
 8000c38:	1dfb      	adds	r3, r7, #7
 8000c3a:	683a      	ldr	r2, [r7, #0]
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fe90 	bl	8000964 <CC1201_WriteTxFifo>
 8000c44:	4603      	mov	r3, r0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <CC1201_SendStrobe>:
 * @param status_byte Pointer to a uint8_t where the status byte received from the CC1201 will be stored.
 *                    Can be NULL if the status byte is not needed.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_SendStrobe(uint8_t strobe_command, uint8_t *status_byte)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af02      	add	r7, sp, #8
 8000c56:	4603      	mov	r3, r0
 8000c58:	6039      	str	r1, [r7, #0]
 8000c5a:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;
    uint8_t rx_data;

    // Debug: Check CS pin before transaction
    printf("  Strobe 0x%02X: CS before=", strobe_command);
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4827      	ldr	r0, [pc, #156]	@ (8000d00 <CC1201_SendStrobe+0xb0>)
 8000c62:	f008 f8b3 	bl	8008dcc <iprintf>
    printf("%s", HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN) == GPIO_PIN_SET ? "HIGH" : "LOW");
 8000c66:	2110      	movs	r1, #16
 8000c68:	4826      	ldr	r0, [pc, #152]	@ (8000d04 <CC1201_SendStrobe+0xb4>)
 8000c6a:	f002 ff95 	bl	8003b98 <HAL_GPIO_ReadPin>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d101      	bne.n	8000c78 <CC1201_SendStrobe+0x28>
 8000c74:	4b24      	ldr	r3, [pc, #144]	@ (8000d08 <CC1201_SendStrobe+0xb8>)
 8000c76:	e000      	b.n	8000c7a <CC1201_SendStrobe+0x2a>
 8000c78:	4b24      	ldr	r3, [pc, #144]	@ (8000d0c <CC1201_SendStrobe+0xbc>)
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4824      	ldr	r0, [pc, #144]	@ (8000d10 <CC1201_SendStrobe+0xc0>)
 8000c7e:	f008 f8a5 	bl	8008dcc <iprintf>

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 8000c82:	2200      	movs	r2, #0
 8000c84:	2110      	movs	r1, #16
 8000c86:	481f      	ldr	r0, [pc, #124]	@ (8000d04 <CC1201_SendStrobe+0xb4>)
 8000c88:	f002 ff9e 	bl	8003bc8 <HAL_GPIO_WritePin>
    
    // Debug: Check CS pin during transaction
    printf(", CS during=");
 8000c8c:	4821      	ldr	r0, [pc, #132]	@ (8000d14 <CC1201_SendStrobe+0xc4>)
 8000c8e:	f008 f89d 	bl	8008dcc <iprintf>
    printf("%s", HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN) == GPIO_PIN_SET ? "HIGH" : "LOW");
 8000c92:	2110      	movs	r1, #16
 8000c94:	481b      	ldr	r0, [pc, #108]	@ (8000d04 <CC1201_SendStrobe+0xb4>)
 8000c96:	f002 ff7f 	bl	8003b98 <HAL_GPIO_ReadPin>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d101      	bne.n	8000ca4 <CC1201_SendStrobe+0x54>
 8000ca0:	4b19      	ldr	r3, [pc, #100]	@ (8000d08 <CC1201_SendStrobe+0xb8>)
 8000ca2:	e000      	b.n	8000ca6 <CC1201_SendStrobe+0x56>
 8000ca4:	4b19      	ldr	r3, [pc, #100]	@ (8000d0c <CC1201_SendStrobe+0xbc>)
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4819      	ldr	r0, [pc, #100]	@ (8000d10 <CC1201_SendStrobe+0xc0>)
 8000caa:	f008 f88f 	bl	8008dcc <iprintf>
    
    // Small delay to ensure CS is stable
    HAL_Delay(1);
 8000cae:	2001      	movs	r0, #1
 8000cb0:	f002 f960 	bl	8002f74 <HAL_Delay>

    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, &strobe_command, &rx_data, 1, HAL_MAX_DELAY); // Transmit strobe command and receive status
 8000cb4:	f107 020e 	add.w	r2, r7, #14
 8000cb8:	1df9      	adds	r1, r7, #7
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	4815      	ldr	r0, [pc, #84]	@ (8000d18 <CC1201_SendStrobe+0xc8>)
 8000cc4:	f006 f912 	bl	8006eec <HAL_SPI_TransmitReceive>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 8000ccc:	2201      	movs	r2, #1
 8000cce:	2110      	movs	r1, #16
 8000cd0:	480c      	ldr	r0, [pc, #48]	@ (8000d04 <CC1201_SendStrobe+0xb4>)
 8000cd2:	f002 ff79 	bl	8003bc8 <HAL_GPIO_WritePin>

    // Debug output
    printf(", CS after=HIGH, RX=0x%02X, HAL=%d\n\r", rx_data, status);
 8000cd6:	7bbb      	ldrb	r3, [r7, #14]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	480f      	ldr	r0, [pc, #60]	@ (8000d1c <CC1201_SendStrobe+0xcc>)
 8000ce0:	f008 f874 	bl	8008dcc <iprintf>

    if (status == HAL_OK) {
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d105      	bne.n	8000cf6 <CC1201_SendStrobe+0xa6>
        if (status_byte != NULL) {
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d002      	beq.n	8000cf6 <CC1201_SendStrobe+0xa6>
            *status_byte = rx_data;
 8000cf0:	7bba      	ldrb	r2, [r7, #14]
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	701a      	strb	r2, [r3, #0]
        }
    }
    return status;
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	08009abc 	.word	0x08009abc
 8000d04:	58021000 	.word	0x58021000
 8000d08:	08009ad8 	.word	0x08009ad8
 8000d0c:	08009ae0 	.word	0x08009ae0
 8000d10:	08009ae4 	.word	0x08009ae4
 8000d14:	08009ae8 	.word	0x08009ae8
 8000d18:	240000b8 	.word	0x240000b8
 8000d1c:	08009af8 	.word	0x08009af8

08000d20 <CC1201_WriteRegisterConfig>:
 * @param settings Array of register settings to write.
 * @param num_settings Number of settings in the array.
 * @return HAL_StatusTypeDef Status of the configuration (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_WriteRegisterConfig(const registerSetting_t *settings, uint16_t num_settings)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	460b      	mov	r3, r1
 8000d2a:	807b      	strh	r3, [r7, #2]
    HAL_StatusTypeDef status = HAL_OK;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	73fb      	strb	r3, [r7, #15]
    
    for (uint16_t i = 0; i < num_settings; i++) {
 8000d30:	2300      	movs	r3, #0
 8000d32:	81bb      	strh	r3, [r7, #12]
 8000d34:	e024      	b.n	8000d80 <CC1201_WriteRegisterConfig+0x60>
        if (settings[i].addr > 0xFF) {
 8000d36:	89bb      	ldrh	r3, [r7, #12]
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	881b      	ldrh	r3, [r3, #0]
 8000d40:	2bff      	cmp	r3, #255	@ 0xff
 8000d42:	d819      	bhi.n	8000d78 <CC1201_WriteRegisterConfig+0x58>
            // Extended register (requires burst access)
            // For now, skip extended registers in this simple implementation
            continue;
        }
        
        status = CC1201_WriteRegister((uint8_t)settings[i].addr, settings[i].data);
 8000d44:	89bb      	ldrh	r3, [r7, #12]
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	881b      	ldrh	r3, [r3, #0]
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	4618      	mov	r0, r3
 8000d52:	89bb      	ldrh	r3, [r7, #12]
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	789b      	ldrb	r3, [r3, #2]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f7ff fd9d 	bl	800089c <CC1201_WriteRegister>
 8000d62:	4603      	mov	r3, r0
 8000d64:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK) {
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <CC1201_WriteRegisterConfig+0x50>
            return status;
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
 8000d6e:	e00c      	b.n	8000d8a <CC1201_WriteRegisterConfig+0x6a>
        }
        
        HAL_Delay(1); // Small delay between register writes
 8000d70:	2001      	movs	r0, #1
 8000d72:	f002 f8ff 	bl	8002f74 <HAL_Delay>
 8000d76:	e000      	b.n	8000d7a <CC1201_WriteRegisterConfig+0x5a>
            continue;
 8000d78:	bf00      	nop
    for (uint16_t i = 0; i < num_settings; i++) {
 8000d7a:	89bb      	ldrh	r3, [r7, #12]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	81bb      	strh	r3, [r7, #12]
 8000d80:	89ba      	ldrh	r2, [r7, #12]
 8000d82:	887b      	ldrh	r3, [r7, #2]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d3d6      	bcc.n	8000d36 <CC1201_WriteRegisterConfig+0x16>
    }
    
    return status;
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <CC1201_GetNumPreferredSettings>:
 * @brief Gets the number of preferred settings.
 *
 * @return uint16_t Number of settings in the preferred settings array.
 */
uint16_t CC1201_GetNumPreferredSettings(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
    return sizeof(preferredSettings) / sizeof(registerSetting_t);
 8000d96:	2331      	movs	r3, #49	@ 0x31
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
	...

08000da4 <CC1201_GetPreferredSettings>:
 * @brief Gets a pointer to the preferred settings array.
 *
 * @return const registerSetting_t* Pointer to the preferred settings array.
 */
const registerSetting_t* CC1201_GetPreferredSettings(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
    return preferredSettings;
 8000da8:	4b02      	ldr	r3, [pc, #8]	@ (8000db4 <CC1201_GetPreferredSettings+0x10>)
 8000daa:	4618      	mov	r0, r3
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	0800b238 	.word	0x0800b238

08000db8 <print_cc1201_status>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Function to decode and print CC1201 status
void print_cc1201_status(uint8_t status_byte, const char* context) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	6039      	str	r1, [r7, #0]
 8000dc2:	71fb      	strb	r3, [r7, #7]
    uint8_t radio_state = (status_byte >> 4) & 0x0F;
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	091b      	lsrs	r3, r3, #4
 8000dc8:	73fb      	strb	r3, [r7, #15]
    uint8_t fifo_bytes = status_byte & 0x0F;
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	f003 030f 	and.w	r3, r3, #15
 8000dd0:	73bb      	strb	r3, [r7, #14]
    
    printf("  %s: Status=0x%02X, State=0x%X", context, status_byte, radio_state);
 8000dd2:	79fa      	ldrb	r2, [r7, #7]
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
 8000dd6:	6839      	ldr	r1, [r7, #0]
 8000dd8:	4823      	ldr	r0, [pc, #140]	@ (8000e68 <print_cc1201_status+0xb0>)
 8000dda:	f007 fff7 	bl	8008dcc <iprintf>
    switch(radio_state) {
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
 8000de0:	2b07      	cmp	r3, #7
 8000de2:	d833      	bhi.n	8000e4c <print_cc1201_status+0x94>
 8000de4:	a201      	add	r2, pc, #4	@ (adr r2, 8000dec <print_cc1201_status+0x34>)
 8000de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dea:	bf00      	nop
 8000dec:	08000e0d 	.word	0x08000e0d
 8000df0:	08000e15 	.word	0x08000e15
 8000df4:	08000e1d 	.word	0x08000e1d
 8000df8:	08000e25 	.word	0x08000e25
 8000dfc:	08000e2d 	.word	0x08000e2d
 8000e00:	08000e35 	.word	0x08000e35
 8000e04:	08000e3d 	.word	0x08000e3d
 8000e08:	08000e45 	.word	0x08000e45
        case 0x0: printf("(IDLE)"); break;
 8000e0c:	4817      	ldr	r0, [pc, #92]	@ (8000e6c <print_cc1201_status+0xb4>)
 8000e0e:	f007 ffdd 	bl	8008dcc <iprintf>
 8000e12:	e01f      	b.n	8000e54 <print_cc1201_status+0x9c>
        case 0x1: printf("(RX)"); break;
 8000e14:	4816      	ldr	r0, [pc, #88]	@ (8000e70 <print_cc1201_status+0xb8>)
 8000e16:	f007 ffd9 	bl	8008dcc <iprintf>
 8000e1a:	e01b      	b.n	8000e54 <print_cc1201_status+0x9c>
        case 0x2: printf("(TX)"); break;
 8000e1c:	4815      	ldr	r0, [pc, #84]	@ (8000e74 <print_cc1201_status+0xbc>)
 8000e1e:	f007 ffd5 	bl	8008dcc <iprintf>
 8000e22:	e017      	b.n	8000e54 <print_cc1201_status+0x9c>
        case 0x3: printf("(FSTXON)"); break;
 8000e24:	4814      	ldr	r0, [pc, #80]	@ (8000e78 <print_cc1201_status+0xc0>)
 8000e26:	f007 ffd1 	bl	8008dcc <iprintf>
 8000e2a:	e013      	b.n	8000e54 <print_cc1201_status+0x9c>
        case 0x4: printf("(CALIBRATE)"); break;
 8000e2c:	4813      	ldr	r0, [pc, #76]	@ (8000e7c <print_cc1201_status+0xc4>)
 8000e2e:	f007 ffcd 	bl	8008dcc <iprintf>
 8000e32:	e00f      	b.n	8000e54 <print_cc1201_status+0x9c>
        case 0x5: printf("(SETTLING)"); break;
 8000e34:	4812      	ldr	r0, [pc, #72]	@ (8000e80 <print_cc1201_status+0xc8>)
 8000e36:	f007 ffc9 	bl	8008dcc <iprintf>
 8000e3a:	e00b      	b.n	8000e54 <print_cc1201_status+0x9c>
        case 0x6: printf("(RX_FIFO_ERR)"); break;
 8000e3c:	4811      	ldr	r0, [pc, #68]	@ (8000e84 <print_cc1201_status+0xcc>)
 8000e3e:	f007 ffc5 	bl	8008dcc <iprintf>
 8000e42:	e007      	b.n	8000e54 <print_cc1201_status+0x9c>
        case 0x7: printf("(TX_FIFO_ERR)"); break;
 8000e44:	4810      	ldr	r0, [pc, #64]	@ (8000e88 <print_cc1201_status+0xd0>)
 8000e46:	f007 ffc1 	bl	8008dcc <iprintf>
 8000e4a:	e003      	b.n	8000e54 <print_cc1201_status+0x9c>
        default: printf("(UNKNOWN)"); break;
 8000e4c:	480f      	ldr	r0, [pc, #60]	@ (8000e8c <print_cc1201_status+0xd4>)
 8000e4e:	f007 ffbd 	bl	8008dcc <iprintf>
 8000e52:	bf00      	nop
    }
    printf(", FIFO=%d\n\r", fifo_bytes);
 8000e54:	7bbb      	ldrb	r3, [r7, #14]
 8000e56:	4619      	mov	r1, r3
 8000e58:	480d      	ldr	r0, [pc, #52]	@ (8000e90 <print_cc1201_status+0xd8>)
 8000e5a:	f007 ffb7 	bl	8008dcc <iprintf>
}
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	08009b20 	.word	0x08009b20
 8000e6c:	08009b40 	.word	0x08009b40
 8000e70:	08009b48 	.word	0x08009b48
 8000e74:	08009b50 	.word	0x08009b50
 8000e78:	08009b58 	.word	0x08009b58
 8000e7c:	08009b64 	.word	0x08009b64
 8000e80:	08009b70 	.word	0x08009b70
 8000e84:	08009b7c 	.word	0x08009b7c
 8000e88:	08009b8c 	.word	0x08009b8c
 8000e8c:	08009b9c 	.word	0x08009b9c
 8000e90:	08009ba8 	.word	0x08009ba8

08000e94 <test_all_strobe_commands>:

// Comprehensive CC1201 strobe command test
void test_all_strobe_commands(void) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
    uint8_t status_byte = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef hal_status;
    
    printf("\n=== COMPREHENSIVE STROBE COMMAND TEST ===\n\r");
 8000e9e:	48b7      	ldr	r0, [pc, #732]	@ (800117c <test_all_strobe_commands+0x2e8>)
 8000ea0:	f007 ff94 	bl	8008dcc <iprintf>
    
    // Test 1: NOP Command (baseline)
    printf("1. NOP Command (baseline test)\n\r");
 8000ea4:	48b6      	ldr	r0, [pc, #728]	@ (8001180 <test_all_strobe_commands+0x2ec>)
 8000ea6:	f007 ff91 	bl	8008dcc <iprintf>
    hal_status = CC1201_Nop(&status_byte);
 8000eaa:	1dbb      	adds	r3, r7, #6
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fc99 	bl	80007e4 <CC1201_Nop>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d111      	bne.n	8000ee0 <test_all_strobe_commands+0x4c>
        print_cc1201_status(status_byte, "NOP");
 8000ebc:	79bb      	ldrb	r3, [r7, #6]
 8000ebe:	49b1      	ldr	r1, [pc, #708]	@ (8001184 <test_all_strobe_commands+0x2f0>)
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff ff79 	bl	8000db8 <print_cc1201_status>
        printf("  NOP FAILED - HAL Error: %d\n\r", hal_status);
        return;
    }
    
    // Test 2: Soft Reset
    printf("\n2. Soft Reset\n\r");
 8000ec6:	48b0      	ldr	r0, [pc, #704]	@ (8001188 <test_all_strobe_commands+0x2f4>)
 8000ec8:	f007 ff80 	bl	8008dcc <iprintf>
    hal_status = CC1201_SoftReset(&status_byte);
 8000ecc:	1dbb      	adds	r3, r7, #6
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fbec 	bl	80006ac <CC1201_SoftReset>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d10f      	bne.n	8000efe <test_all_strobe_commands+0x6a>
 8000ede:	e005      	b.n	8000eec <test_all_strobe_commands+0x58>
        printf("  NOP FAILED - HAL Error: %d\n\r", hal_status);
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	48a9      	ldr	r0, [pc, #676]	@ (800118c <test_all_strobe_commands+0x2f8>)
 8000ee6:	f007 ff71 	bl	8008dcc <iprintf>
 8000eea:	e144      	b.n	8001176 <test_all_strobe_commands+0x2e2>
        print_cc1201_status(status_byte, "RESET");
 8000eec:	79bb      	ldrb	r3, [r7, #6]
 8000eee:	49a8      	ldr	r1, [pc, #672]	@ (8001190 <test_all_strobe_commands+0x2fc>)
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff61 	bl	8000db8 <print_cc1201_status>
        HAL_Delay(100); // Wait for reset to complete
 8000ef6:	2064      	movs	r0, #100	@ 0x64
 8000ef8:	f002 f83c 	bl	8002f74 <HAL_Delay>
 8000efc:	e004      	b.n	8000f08 <test_all_strobe_commands+0x74>
    } else {
        printf("  RESET FAILED - HAL Error: %d\n\r", hal_status);
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	4619      	mov	r1, r3
 8000f02:	48a4      	ldr	r0, [pc, #656]	@ (8001194 <test_all_strobe_commands+0x300>)
 8000f04:	f007 ff62 	bl	8008dcc <iprintf>
    }
    
    // Test 3: Enter Idle Mode
    printf("\n3. Enter Idle Mode\n\r");
 8000f08:	48a3      	ldr	r0, [pc, #652]	@ (8001198 <test_all_strobe_commands+0x304>)
 8000f0a:	f007 ff5f 	bl	8008dcc <iprintf>
    hal_status = CC1201_EnterIdleMode(&status_byte);
 8000f0e:	1dbb      	adds	r3, r7, #6
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fc0c 	bl	800072e <CC1201_EnterIdleMode>
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d105      	bne.n	8000f2c <test_all_strobe_commands+0x98>
        print_cc1201_status(status_byte, "IDLE");
 8000f20:	79bb      	ldrb	r3, [r7, #6]
 8000f22:	499e      	ldr	r1, [pc, #632]	@ (800119c <test_all_strobe_commands+0x308>)
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff47 	bl	8000db8 <print_cc1201_status>
 8000f2a:	e004      	b.n	8000f36 <test_all_strobe_commands+0xa2>
    } else {
        printf("  IDLE FAILED - HAL Error: %d\n\r", hal_status);
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	4619      	mov	r1, r3
 8000f30:	489b      	ldr	r0, [pc, #620]	@ (80011a0 <test_all_strobe_commands+0x30c>)
 8000f32:	f007 ff4b 	bl	8008dcc <iprintf>
    }
    
    // Test 4: Calibrate Frequency Synthesizer
    printf("\n4. Calibrate Frequency Synthesizer\n\r");
 8000f36:	489b      	ldr	r0, [pc, #620]	@ (80011a4 <test_all_strobe_commands+0x310>)
 8000f38:	f007 ff48 	bl	8008dcc <iprintf>
    hal_status = CC1201_CalFreqSynth(&status_byte);
 8000f3c:	1dbb      	adds	r3, r7, #6
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fbce 	bl	80006e0 <CC1201_CalFreqSynth>
 8000f44:	4603      	mov	r3, r0
 8000f46:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d108      	bne.n	8000f60 <test_all_strobe_commands+0xcc>
        print_cc1201_status(status_byte, "CALIBRATE");
 8000f4e:	79bb      	ldrb	r3, [r7, #6]
 8000f50:	4995      	ldr	r1, [pc, #596]	@ (80011a8 <test_all_strobe_commands+0x314>)
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ff30 	bl	8000db8 <print_cc1201_status>
        HAL_Delay(50); // Wait for calibration
 8000f58:	2032      	movs	r0, #50	@ 0x32
 8000f5a:	f002 f80b 	bl	8002f74 <HAL_Delay>
 8000f5e:	e004      	b.n	8000f6a <test_all_strobe_commands+0xd6>
    } else {
        printf("  CALIBRATE FAILED - HAL Error: %d\n\r", hal_status);
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	4619      	mov	r1, r3
 8000f64:	4891      	ldr	r0, [pc, #580]	@ (80011ac <test_all_strobe_commands+0x318>)
 8000f66:	f007 ff31 	bl	8008dcc <iprintf>
    }
    
    // Test 5: Fast TX On
    printf("\n5. Fast TX On\n\r");
 8000f6a:	4891      	ldr	r0, [pc, #580]	@ (80011b0 <test_all_strobe_commands+0x31c>)
 8000f6c:	f007 ff2e 	bl	8008dcc <iprintf>
    hal_status = CC1201_FastTxOn(&status_byte);
 8000f70:	1dbb      	adds	r3, r7, #6
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fba7 	bl	80006c6 <CC1201_FastTxOn>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d105      	bne.n	8000f8e <test_all_strobe_commands+0xfa>
        print_cc1201_status(status_byte, "FAST_TX_ON");
 8000f82:	79bb      	ldrb	r3, [r7, #6]
 8000f84:	498b      	ldr	r1, [pc, #556]	@ (80011b4 <test_all_strobe_commands+0x320>)
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff ff16 	bl	8000db8 <print_cc1201_status>
 8000f8c:	e004      	b.n	8000f98 <test_all_strobe_commands+0x104>
    } else {
        printf("  FAST_TX_ON FAILED - HAL Error: %d\n\r", hal_status);
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	4619      	mov	r1, r3
 8000f92:	4889      	ldr	r0, [pc, #548]	@ (80011b8 <test_all_strobe_commands+0x324>)
 8000f94:	f007 ff1a 	bl	8008dcc <iprintf>
    }
    
    // Test 6: Enter TX Mode
    printf("\n6. Enter TX Mode\n\r");
 8000f98:	4888      	ldr	r0, [pc, #544]	@ (80011bc <test_all_strobe_commands+0x328>)
 8000f9a:	f007 ff17 	bl	8008dcc <iprintf>
    hal_status = CC1201_EnterTxMode(&status_byte);
 8000f9e:	1dbb      	adds	r3, r7, #6
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fbb7 	bl	8000714 <CC1201_EnterTxMode>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d108      	bne.n	8000fc2 <test_all_strobe_commands+0x12e>
        print_cc1201_status(status_byte, "TX_MODE");
 8000fb0:	79bb      	ldrb	r3, [r7, #6]
 8000fb2:	4983      	ldr	r1, [pc, #524]	@ (80011c0 <test_all_strobe_commands+0x32c>)
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff feff 	bl	8000db8 <print_cc1201_status>
        HAL_Delay(10);
 8000fba:	200a      	movs	r0, #10
 8000fbc:	f001 ffda 	bl	8002f74 <HAL_Delay>
 8000fc0:	e004      	b.n	8000fcc <test_all_strobe_commands+0x138>
    } else {
        printf("  TX_MODE FAILED - HAL Error: %d\n\r", hal_status);
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	487f      	ldr	r0, [pc, #508]	@ (80011c4 <test_all_strobe_commands+0x330>)
 8000fc8:	f007 ff00 	bl	8008dcc <iprintf>
    }
    
    // Return to idle before RX test
    hal_status = CC1201_EnterIdleMode(&status_byte);
 8000fcc:	1dbb      	adds	r3, r7, #6
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fbad 	bl	800072e <CC1201_EnterIdleMode>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(10);
 8000fd8:	200a      	movs	r0, #10
 8000fda:	f001 ffcb 	bl	8002f74 <HAL_Delay>
    
    // Test 7: Enter RX Mode
    printf("\n7. Enter RX Mode\n\r");
 8000fde:	487a      	ldr	r0, [pc, #488]	@ (80011c8 <test_all_strobe_commands+0x334>)
 8000fe0:	f007 fef4 	bl	8008dcc <iprintf>
    hal_status = CC1201_EnterRxMode(&status_byte);
 8000fe4:	1dbb      	adds	r3, r7, #6
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fb87 	bl	80006fa <CC1201_EnterRxMode>
 8000fec:	4603      	mov	r3, r0
 8000fee:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d108      	bne.n	8001008 <test_all_strobe_commands+0x174>
        print_cc1201_status(status_byte, "RX_MODE");
 8000ff6:	79bb      	ldrb	r3, [r7, #6]
 8000ff8:	4974      	ldr	r1, [pc, #464]	@ (80011cc <test_all_strobe_commands+0x338>)
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fedc 	bl	8000db8 <print_cc1201_status>
        HAL_Delay(10);
 8001000:	200a      	movs	r0, #10
 8001002:	f001 ffb7 	bl	8002f74 <HAL_Delay>
 8001006:	e004      	b.n	8001012 <test_all_strobe_commands+0x17e>
    } else {
        printf("  RX_MODE FAILED - HAL Error: %d\n\r", hal_status);
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	4619      	mov	r1, r3
 800100c:	4870      	ldr	r0, [pc, #448]	@ (80011d0 <test_all_strobe_commands+0x33c>)
 800100e:	f007 fedd 	bl	8008dcc <iprintf>
    }
    
    // Test 8: Flush RX FIFO
    printf("\n8. Flush RX FIFO\n\r");
 8001012:	4870      	ldr	r0, [pc, #448]	@ (80011d4 <test_all_strobe_commands+0x340>)
 8001014:	f007 feda 	bl	8008dcc <iprintf>
    hal_status = CC1201_FlushRxFifo(&status_byte);
 8001018:	1dbb      	adds	r3, r7, #6
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fbbb 	bl	8000796 <CC1201_FlushRxFifo>
 8001020:	4603      	mov	r3, r0
 8001022:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d105      	bne.n	8001036 <test_all_strobe_commands+0x1a2>
        print_cc1201_status(status_byte, "FLUSH_RX");
 800102a:	79bb      	ldrb	r3, [r7, #6]
 800102c:	496a      	ldr	r1, [pc, #424]	@ (80011d8 <test_all_strobe_commands+0x344>)
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fec2 	bl	8000db8 <print_cc1201_status>
 8001034:	e004      	b.n	8001040 <test_all_strobe_commands+0x1ac>
    } else {
        printf("  FLUSH_RX FAILED - HAL Error: %d\n\r", hal_status);
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	4619      	mov	r1, r3
 800103a:	4868      	ldr	r0, [pc, #416]	@ (80011dc <test_all_strobe_commands+0x348>)
 800103c:	f007 fec6 	bl	8008dcc <iprintf>
    }
    
    // Test 9: Flush TX FIFO
    printf("\n9. Flush TX FIFO\n\r");
 8001040:	4867      	ldr	r0, [pc, #412]	@ (80011e0 <test_all_strobe_commands+0x34c>)
 8001042:	f007 fec3 	bl	8008dcc <iprintf>
    hal_status = CC1201_FlushTxFifo(&status_byte);
 8001046:	1dbb      	adds	r3, r7, #6
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fbb1 	bl	80007b0 <CC1201_FlushTxFifo>
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d105      	bne.n	8001064 <test_all_strobe_commands+0x1d0>
        print_cc1201_status(status_byte, "FLUSH_TX");
 8001058:	79bb      	ldrb	r3, [r7, #6]
 800105a:	4962      	ldr	r1, [pc, #392]	@ (80011e4 <test_all_strobe_commands+0x350>)
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff feab 	bl	8000db8 <print_cc1201_status>
 8001062:	e004      	b.n	800106e <test_all_strobe_commands+0x1da>
    } else {
        printf("  FLUSH_TX FAILED - HAL Error: %d\n\r", hal_status);
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	4619      	mov	r1, r3
 8001068:	485f      	ldr	r0, [pc, #380]	@ (80011e8 <test_all_strobe_commands+0x354>)
 800106a:	f007 feaf 	bl	8008dcc <iprintf>
    }
    
    // Test 10: Auto Frequency Compensation
    printf("\n10. Auto Frequency Compensation\n\r");
 800106e:	485f      	ldr	r0, [pc, #380]	@ (80011ec <test_all_strobe_commands+0x358>)
 8001070:	f007 feac 	bl	8008dcc <iprintf>
    hal_status = CC1201_AutoFreqComp(&status_byte);
 8001074:	1dbb      	adds	r3, r7, #6
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fb66 	bl	8000748 <CC1201_AutoFreqComp>
 800107c:	4603      	mov	r3, r0
 800107e:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d105      	bne.n	8001092 <test_all_strobe_commands+0x1fe>
        print_cc1201_status(status_byte, "AFC");
 8001086:	79bb      	ldrb	r3, [r7, #6]
 8001088:	4959      	ldr	r1, [pc, #356]	@ (80011f0 <test_all_strobe_commands+0x35c>)
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fe94 	bl	8000db8 <print_cc1201_status>
 8001090:	e004      	b.n	800109c <test_all_strobe_commands+0x208>
    } else {
        printf("  AFC FAILED - HAL Error: %d\n\r", hal_status);
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	4619      	mov	r1, r3
 8001096:	4857      	ldr	r0, [pc, #348]	@ (80011f4 <test_all_strobe_commands+0x360>)
 8001098:	f007 fe98 	bl	8008dcc <iprintf>
    }
    
    // Test 11: Wake on Radio
    printf("\n11. Wake on Radio\n\r");
 800109c:	4856      	ldr	r0, [pc, #344]	@ (80011f8 <test_all_strobe_commands+0x364>)
 800109e:	f007 fe95 	bl	8008dcc <iprintf>
    hal_status = CC1201_WakeOnRadio(&status_byte);
 80010a2:	1dbb      	adds	r3, r7, #6
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fb5c 	bl	8000762 <CC1201_WakeOnRadio>
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d105      	bne.n	80010c0 <test_all_strobe_commands+0x22c>
        print_cc1201_status(status_byte, "WOR");
 80010b4:	79bb      	ldrb	r3, [r7, #6]
 80010b6:	4951      	ldr	r1, [pc, #324]	@ (80011fc <test_all_strobe_commands+0x368>)
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fe7d 	bl	8000db8 <print_cc1201_status>
 80010be:	e004      	b.n	80010ca <test_all_strobe_commands+0x236>
    } else {
        printf("  WOR FAILED - HAL Error: %d\n\r", hal_status);
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	4619      	mov	r1, r3
 80010c4:	484e      	ldr	r0, [pc, #312]	@ (8001200 <test_all_strobe_commands+0x36c>)
 80010c6:	f007 fe81 	bl	8008dcc <iprintf>
    }
    
    // Test 12: WOR Reset
    printf("\n12. WOR Reset\n\r");
 80010ca:	484e      	ldr	r0, [pc, #312]	@ (8001204 <test_all_strobe_commands+0x370>)
 80010cc:	f007 fe7e 	bl	8008dcc <iprintf>
    hal_status = CC1201_WorReset(&status_byte);
 80010d0:	1dbb      	adds	r3, r7, #6
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff fb79 	bl	80007ca <CC1201_WorReset>
 80010d8:	4603      	mov	r3, r0
 80010da:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d105      	bne.n	80010ee <test_all_strobe_commands+0x25a>
        print_cc1201_status(status_byte, "WOR_RESET");
 80010e2:	79bb      	ldrb	r3, [r7, #6]
 80010e4:	4948      	ldr	r1, [pc, #288]	@ (8001208 <test_all_strobe_commands+0x374>)
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fe66 	bl	8000db8 <print_cc1201_status>
 80010ec:	e004      	b.n	80010f8 <test_all_strobe_commands+0x264>
    } else {
        printf("  WOR_RESET FAILED - HAL Error: %d\n\r", hal_status);
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	4619      	mov	r1, r3
 80010f2:	4846      	ldr	r0, [pc, #280]	@ (800120c <test_all_strobe_commands+0x378>)
 80010f4:	f007 fe6a 	bl	8008dcc <iprintf>
    }
    
    // Test 13: Enter Sleep Mode
    printf("\n13. Enter Sleep Mode\n\r");
 80010f8:	4845      	ldr	r0, [pc, #276]	@ (8001210 <test_all_strobe_commands+0x37c>)
 80010fa:	f007 fe67 	bl	8008dcc <iprintf>
    hal_status = CC1201_EnterSleepMode(&status_byte);
 80010fe:	1dbb      	adds	r3, r7, #6
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fb3b 	bl	800077c <CC1201_EnterSleepMode>
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d108      	bne.n	8001122 <test_all_strobe_commands+0x28e>
        print_cc1201_status(status_byte, "SLEEP");
 8001110:	79bb      	ldrb	r3, [r7, #6]
 8001112:	4940      	ldr	r1, [pc, #256]	@ (8001214 <test_all_strobe_commands+0x380>)
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fe4f 	bl	8000db8 <print_cc1201_status>
        HAL_Delay(100);
 800111a:	2064      	movs	r0, #100	@ 0x64
 800111c:	f001 ff2a 	bl	8002f74 <HAL_Delay>
 8001120:	e004      	b.n	800112c <test_all_strobe_commands+0x298>
    } else {
        printf("  SLEEP FAILED - HAL Error: %d\n\r", hal_status);
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	4619      	mov	r1, r3
 8001126:	483c      	ldr	r0, [pc, #240]	@ (8001218 <test_all_strobe_commands+0x384>)
 8001128:	f007 fe50 	bl	8008dcc <iprintf>
    }
    
    // Test 14: Wake up from sleep with NOP
    printf("\n14. Wake up from Sleep with NOP\n\r");
 800112c:	483b      	ldr	r0, [pc, #236]	@ (800121c <test_all_strobe_commands+0x388>)
 800112e:	f007 fe4d 	bl	8008dcc <iprintf>
    hal_status = CC1201_Nop(&status_byte);
 8001132:	1dbb      	adds	r3, r7, #6
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fb55 	bl	80007e4 <CC1201_Nop>
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d105      	bne.n	8001150 <test_all_strobe_commands+0x2bc>
        print_cc1201_status(status_byte, "WAKE_UP");
 8001144:	79bb      	ldrb	r3, [r7, #6]
 8001146:	4936      	ldr	r1, [pc, #216]	@ (8001220 <test_all_strobe_commands+0x38c>)
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fe35 	bl	8000db8 <print_cc1201_status>
 800114e:	e004      	b.n	800115a <test_all_strobe_commands+0x2c6>
    } else {
        printf("  WAKE_UP FAILED - HAL Error: %d\n\r", hal_status);
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	4619      	mov	r1, r3
 8001154:	4833      	ldr	r0, [pc, #204]	@ (8001224 <test_all_strobe_commands+0x390>)
 8001156:	f007 fe39 	bl	8008dcc <iprintf>
    }
    
    // Return to idle state
    hal_status = CC1201_EnterIdleMode(&status_byte);
 800115a:	1dbb      	adds	r3, r7, #6
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fae6 	bl	800072e <CC1201_EnterIdleMode>
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]
    print_cc1201_status(status_byte, "FINAL_IDLE");
 8001166:	79bb      	ldrb	r3, [r7, #6]
 8001168:	492f      	ldr	r1, [pc, #188]	@ (8001228 <test_all_strobe_commands+0x394>)
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fe24 	bl	8000db8 <print_cc1201_status>
    
    printf("=== STROBE COMMAND TEST COMPLETE ===\n\r");
 8001170:	482e      	ldr	r0, [pc, #184]	@ (800122c <test_all_strobe_commands+0x398>)
 8001172:	f007 fe2b 	bl	8008dcc <iprintf>
}
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	08009bb4 	.word	0x08009bb4
 8001180:	08009be4 	.word	0x08009be4
 8001184:	08009c08 	.word	0x08009c08
 8001188:	08009c2c 	.word	0x08009c2c
 800118c:	08009c0c 	.word	0x08009c0c
 8001190:	08009c40 	.word	0x08009c40
 8001194:	08009c48 	.word	0x08009c48
 8001198:	08009c6c 	.word	0x08009c6c
 800119c:	08009c84 	.word	0x08009c84
 80011a0:	08009c8c 	.word	0x08009c8c
 80011a4:	08009cac 	.word	0x08009cac
 80011a8:	08009cd4 	.word	0x08009cd4
 80011ac:	08009ce0 	.word	0x08009ce0
 80011b0:	08009d08 	.word	0x08009d08
 80011b4:	08009d1c 	.word	0x08009d1c
 80011b8:	08009d28 	.word	0x08009d28
 80011bc:	08009d50 	.word	0x08009d50
 80011c0:	08009d64 	.word	0x08009d64
 80011c4:	08009d6c 	.word	0x08009d6c
 80011c8:	08009d90 	.word	0x08009d90
 80011cc:	08009da4 	.word	0x08009da4
 80011d0:	08009dac 	.word	0x08009dac
 80011d4:	08009dd0 	.word	0x08009dd0
 80011d8:	08009de4 	.word	0x08009de4
 80011dc:	08009df0 	.word	0x08009df0
 80011e0:	08009e14 	.word	0x08009e14
 80011e4:	08009e28 	.word	0x08009e28
 80011e8:	08009e34 	.word	0x08009e34
 80011ec:	08009e58 	.word	0x08009e58
 80011f0:	08009e7c 	.word	0x08009e7c
 80011f4:	08009e80 	.word	0x08009e80
 80011f8:	08009ea0 	.word	0x08009ea0
 80011fc:	08009eb8 	.word	0x08009eb8
 8001200:	08009ebc 	.word	0x08009ebc
 8001204:	08009edc 	.word	0x08009edc
 8001208:	08009ef0 	.word	0x08009ef0
 800120c:	08009efc 	.word	0x08009efc
 8001210:	08009f24 	.word	0x08009f24
 8001214:	08009f3c 	.word	0x08009f3c
 8001218:	08009f44 	.word	0x08009f44
 800121c:	08009f68 	.word	0x08009f68
 8001220:	08009f8c 	.word	0x08009f8c
 8001224:	08009f94 	.word	0x08009f94
 8001228:	08009fb8 	.word	0x08009fb8
 800122c:	08009fc4 	.word	0x08009fc4

08001230 <test_status_registers>:

// Test reading status registers
void test_status_registers(void) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
    uint8_t data = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef hal_status;
    
    printf("\n=== STATUS REGISTER TEST ===\n\r");
 800123a:	4827      	ldr	r0, [pc, #156]	@ (80012d8 <test_status_registers+0xa8>)
 800123c:	f007 fdc6 	bl	8008dcc <iprintf>
    
    // Test MARC State
    printf("1. Reading MARC State\n\r");
 8001240:	4826      	ldr	r0, [pc, #152]	@ (80012dc <test_status_registers+0xac>)
 8001242:	f007 fdc3 	bl	8008dcc <iprintf>
    hal_status = CC1201_ReadMARCState(&data);
 8001246:	1dbb      	adds	r3, r7, #6
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fb61 	bl	8000910 <CC1201_ReadMARCState>
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d105      	bne.n	8001264 <test_status_registers+0x34>
        printf("  MARC State: 0x%02X\n\r", data);
 8001258:	79bb      	ldrb	r3, [r7, #6]
 800125a:	4619      	mov	r1, r3
 800125c:	4820      	ldr	r0, [pc, #128]	@ (80012e0 <test_status_registers+0xb0>)
 800125e:	f007 fdb5 	bl	8008dcc <iprintf>
 8001262:	e004      	b.n	800126e <test_status_registers+0x3e>
    } else {
        printf("  MARC State read FAILED - HAL Error: %d\n\r", hal_status);
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	4619      	mov	r1, r3
 8001268:	481e      	ldr	r0, [pc, #120]	@ (80012e4 <test_status_registers+0xb4>)
 800126a:	f007 fdaf 	bl	8008dcc <iprintf>
    }
    
    // Test RX Bytes
    printf("2. Reading RX FIFO Bytes\n\r");
 800126e:	481e      	ldr	r0, [pc, #120]	@ (80012e8 <test_status_registers+0xb8>)
 8001270:	f007 fdac 	bl	8008dcc <iprintf>
    hal_status = CC1201_GetNumRXBytes(&data);
 8001274:	1dbb      	adds	r3, r7, #6
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fb58 	bl	800092c <CC1201_GetNumRXBytes>
 800127c:	4603      	mov	r3, r0
 800127e:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d105      	bne.n	8001292 <test_status_registers+0x62>
        printf("  RX FIFO Bytes: %d\n\r", data);
 8001286:	79bb      	ldrb	r3, [r7, #6]
 8001288:	4619      	mov	r1, r3
 800128a:	4818      	ldr	r0, [pc, #96]	@ (80012ec <test_status_registers+0xbc>)
 800128c:	f007 fd9e 	bl	8008dcc <iprintf>
 8001290:	e004      	b.n	800129c <test_status_registers+0x6c>
    } else {
        printf("  RX Bytes read FAILED - HAL Error: %d\n\r", hal_status);
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	4619      	mov	r1, r3
 8001296:	4816      	ldr	r0, [pc, #88]	@ (80012f0 <test_status_registers+0xc0>)
 8001298:	f007 fd98 	bl	8008dcc <iprintf>
    }
    
    // Test TX Bytes
    printf("3. Reading TX FIFO Bytes\n\r");
 800129c:	4815      	ldr	r0, [pc, #84]	@ (80012f4 <test_status_registers+0xc4>)
 800129e:	f007 fd95 	bl	8008dcc <iprintf>
    hal_status = CC1201_GetNumTXBytes(&data);
 80012a2:	1dbb      	adds	r3, r7, #6
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fb4f 	bl	8000948 <CC1201_GetNumTXBytes>
 80012aa:	4603      	mov	r3, r0
 80012ac:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d105      	bne.n	80012c0 <test_status_registers+0x90>
        printf("  TX FIFO Bytes: %d\n\r", data);
 80012b4:	79bb      	ldrb	r3, [r7, #6]
 80012b6:	4619      	mov	r1, r3
 80012b8:	480f      	ldr	r0, [pc, #60]	@ (80012f8 <test_status_registers+0xc8>)
 80012ba:	f007 fd87 	bl	8008dcc <iprintf>
 80012be:	e004      	b.n	80012ca <test_status_registers+0x9a>
    } else {
        printf("  TX Bytes read FAILED - HAL Error: %d\n\r", hal_status);
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	4619      	mov	r1, r3
 80012c4:	480d      	ldr	r0, [pc, #52]	@ (80012fc <test_status_registers+0xcc>)
 80012c6:	f007 fd81 	bl	8008dcc <iprintf>
    }
    
    printf("=== STATUS REGISTER TEST COMPLETE ===\n\r");
 80012ca:	480d      	ldr	r0, [pc, #52]	@ (8001300 <test_status_registers+0xd0>)
 80012cc:	f007 fd7e 	bl	8008dcc <iprintf>
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	08009fec 	.word	0x08009fec
 80012dc:	0800a00c 	.word	0x0800a00c
 80012e0:	0800a024 	.word	0x0800a024
 80012e4:	0800a03c 	.word	0x0800a03c
 80012e8:	0800a068 	.word	0x0800a068
 80012ec:	0800a084 	.word	0x0800a084
 80012f0:	0800a09c 	.word	0x0800a09c
 80012f4:	0800a0c8 	.word	0x0800a0c8
 80012f8:	0800a0e4 	.word	0x0800a0e4
 80012fc:	0800a0fc 	.word	0x0800a0fc
 8001300:	0800a128 	.word	0x0800a128

08001304 <test_register_operations>:

// Test register read/write operations
void test_register_operations(void) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef hal_status;
    uint8_t write_data = 0x55; // Test pattern
 800130a:	2355      	movs	r3, #85	@ 0x55
 800130c:	71fb      	strb	r3, [r7, #7]
    uint8_t read_data = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	713b      	strb	r3, [r7, #4]
    
    printf("\n=== REGISTER READ/WRITE TEST ===\n\r");
 8001312:	4831      	ldr	r0, [pc, #196]	@ (80013d8 <test_register_operations+0xd4>)
 8001314:	f007 fd5a 	bl	8008dcc <iprintf>
    
    // Test with a safe register (IOCFG2 - 0x01)
    printf("1. Testing Register Write/Read (IOCFG2)\n\r");
 8001318:	4830      	ldr	r0, [pc, #192]	@ (80013dc <test_register_operations+0xd8>)
 800131a:	f007 fd57 	bl	8008dcc <iprintf>
    
    // First read original value
    hal_status = CC1201_ReadStatus(0x01, &read_data);
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	4619      	mov	r1, r3
 8001322:	2001      	movs	r0, #1
 8001324:	f7ff fa6c 	bl	8000800 <CC1201_ReadStatus>
 8001328:	4603      	mov	r3, r0
 800132a:	71bb      	strb	r3, [r7, #6]
    if (hal_status == HAL_OK) {
 800132c:	79bb      	ldrb	r3, [r7, #6]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d146      	bne.n	80013c0 <test_register_operations+0xbc>
        printf("  Original IOCFG2 value: 0x%02X\n\r", read_data);
 8001332:	793b      	ldrb	r3, [r7, #4]
 8001334:	4619      	mov	r1, r3
 8001336:	482a      	ldr	r0, [pc, #168]	@ (80013e0 <test_register_operations+0xdc>)
 8001338:	f007 fd48 	bl	8008dcc <iprintf>
        uint8_t original_value = read_data;
 800133c:	793b      	ldrb	r3, [r7, #4]
 800133e:	717b      	strb	r3, [r7, #5]
        
        // Write test pattern
        hal_status = CC1201_WriteRegister(0x01, write_data);
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	4619      	mov	r1, r3
 8001344:	2001      	movs	r0, #1
 8001346:	f7ff faa9 	bl	800089c <CC1201_WriteRegister>
 800134a:	4603      	mov	r3, r0
 800134c:	71bb      	strb	r3, [r7, #6]
        if (hal_status == HAL_OK) {
 800134e:	79bb      	ldrb	r3, [r7, #6]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d12f      	bne.n	80013b4 <test_register_operations+0xb0>
            printf("  Write 0x%02X to IOCFG2: OK\n\r", write_data);
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	4619      	mov	r1, r3
 8001358:	4822      	ldr	r0, [pc, #136]	@ (80013e4 <test_register_operations+0xe0>)
 800135a:	f007 fd37 	bl	8008dcc <iprintf>
            
            // Read back
            hal_status = CC1201_ReadStatus(0x01, &read_data);
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	4619      	mov	r1, r3
 8001362:	2001      	movs	r0, #1
 8001364:	f7ff fa4c 	bl	8000800 <CC1201_ReadStatus>
 8001368:	4603      	mov	r3, r0
 800136a:	71bb      	strb	r3, [r7, #6]
            if (hal_status == HAL_OK) {
 800136c:	79bb      	ldrb	r3, [r7, #6]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d11a      	bne.n	80013a8 <test_register_operations+0xa4>
                printf("  Read back: 0x%02X\n\r", read_data);
 8001372:	793b      	ldrb	r3, [r7, #4]
 8001374:	4619      	mov	r1, r3
 8001376:	481c      	ldr	r0, [pc, #112]	@ (80013e8 <test_register_operations+0xe4>)
 8001378:	f007 fd28 	bl	8008dcc <iprintf>
                if (read_data == write_data) {
 800137c:	793b      	ldrb	r3, [r7, #4]
 800137e:	79fa      	ldrb	r2, [r7, #7]
 8001380:	429a      	cmp	r2, r3
 8001382:	d103      	bne.n	800138c <test_register_operations+0x88>
                    printf("  ✓ Register write/read SUCCESS!\n\r");
 8001384:	4819      	ldr	r0, [pc, #100]	@ (80013ec <test_register_operations+0xe8>)
 8001386:	f007 fd21 	bl	8008dcc <iprintf>
 800138a:	e002      	b.n	8001392 <test_register_operations+0x8e>
                } else {
                    printf("  ✗ Register write/read FAILED - Data mismatch\n\r");
 800138c:	4818      	ldr	r0, [pc, #96]	@ (80013f0 <test_register_operations+0xec>)
 800138e:	f007 fd1d 	bl	8008dcc <iprintf>
                }
                
                // Restore original value
                CC1201_WriteRegister(0x01, original_value);
 8001392:	797b      	ldrb	r3, [r7, #5]
 8001394:	4619      	mov	r1, r3
 8001396:	2001      	movs	r0, #1
 8001398:	f7ff fa80 	bl	800089c <CC1201_WriteRegister>
                printf("  Restored original value: 0x%02X\n\r", original_value);
 800139c:	797b      	ldrb	r3, [r7, #5]
 800139e:	4619      	mov	r1, r3
 80013a0:	4814      	ldr	r0, [pc, #80]	@ (80013f4 <test_register_operations+0xf0>)
 80013a2:	f007 fd13 	bl	8008dcc <iprintf>
 80013a6:	e010      	b.n	80013ca <test_register_operations+0xc6>
            } else {
                printf("  Read back FAILED - HAL Error: %d\n\r", hal_status);
 80013a8:	79bb      	ldrb	r3, [r7, #6]
 80013aa:	4619      	mov	r1, r3
 80013ac:	4812      	ldr	r0, [pc, #72]	@ (80013f8 <test_register_operations+0xf4>)
 80013ae:	f007 fd0d 	bl	8008dcc <iprintf>
 80013b2:	e00a      	b.n	80013ca <test_register_operations+0xc6>
            }
        } else {
            printf("  Write FAILED - HAL Error: %d\n\r", hal_status);
 80013b4:	79bb      	ldrb	r3, [r7, #6]
 80013b6:	4619      	mov	r1, r3
 80013b8:	4810      	ldr	r0, [pc, #64]	@ (80013fc <test_register_operations+0xf8>)
 80013ba:	f007 fd07 	bl	8008dcc <iprintf>
 80013be:	e004      	b.n	80013ca <test_register_operations+0xc6>
        }
    } else {
        printf("  Initial read FAILED - HAL Error: %d\n\r", hal_status);
 80013c0:	79bb      	ldrb	r3, [r7, #6]
 80013c2:	4619      	mov	r1, r3
 80013c4:	480e      	ldr	r0, [pc, #56]	@ (8001400 <test_register_operations+0xfc>)
 80013c6:	f007 fd01 	bl	8008dcc <iprintf>
    }
    
    printf("=== REGISTER TEST COMPLETE ===\n\r");
 80013ca:	480e      	ldr	r0, [pc, #56]	@ (8001404 <test_register_operations+0x100>)
 80013cc:	f007 fcfe 	bl	8008dcc <iprintf>
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	0800a150 	.word	0x0800a150
 80013dc:	0800a174 	.word	0x0800a174
 80013e0:	0800a1a0 	.word	0x0800a1a0
 80013e4:	0800a1c4 	.word	0x0800a1c4
 80013e8:	0800a1e4 	.word	0x0800a1e4
 80013ec:	0800a1fc 	.word	0x0800a1fc
 80013f0:	0800a224 	.word	0x0800a224
 80013f4:	0800a258 	.word	0x0800a258
 80013f8:	0800a27c 	.word	0x0800a27c
 80013fc:	0800a2a4 	.word	0x0800a2a4
 8001400:	0800a2c8 	.word	0x0800a2c8
 8001404:	0800a2f0 	.word	0x0800a2f0

08001408 <test_configuration_write>:

// Test configuration writing
void test_configuration_write(void) {
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef hal_status;
    
    printf("\n=== CONFIGURATION WRITE TEST ===\n\r");
 800140e:	4825      	ldr	r0, [pc, #148]	@ (80014a4 <test_configuration_write+0x9c>)
 8001410:	f007 fcdc 	bl	8008dcc <iprintf>
    
    const registerSetting_t* settings = CC1201_GetPreferredSettings();
 8001414:	f7ff fcc6 	bl	8000da4 <CC1201_GetPreferredSettings>
 8001418:	6078      	str	r0, [r7, #4]
    uint16_t num_settings = CC1201_GetNumPreferredSettings();
 800141a:	f7ff fcba 	bl	8000d92 <CC1201_GetNumPreferredSettings>
 800141e:	4603      	mov	r3, r0
 8001420:	807b      	strh	r3, [r7, #2]
    
    printf("Writing %d configuration registers...\n\r", num_settings);
 8001422:	887b      	ldrh	r3, [r7, #2]
 8001424:	4619      	mov	r1, r3
 8001426:	4820      	ldr	r0, [pc, #128]	@ (80014a8 <test_configuration_write+0xa0>)
 8001428:	f007 fcd0 	bl	8008dcc <iprintf>
    
    hal_status = CC1201_WriteRegisterConfig(settings, num_settings);
 800142c:	887b      	ldrh	r3, [r7, #2]
 800142e:	4619      	mov	r1, r3
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff fc75 	bl	8000d20 <CC1201_WriteRegisterConfig>
 8001436:	4603      	mov	r3, r0
 8001438:	707b      	strb	r3, [r7, #1]
    if (hal_status == HAL_OK) {
 800143a:	787b      	ldrb	r3, [r7, #1]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d124      	bne.n	800148a <test_configuration_write+0x82>
        printf("  ✓ Configuration write SUCCESS!\n\r");
 8001440:	481a      	ldr	r0, [pc, #104]	@ (80014ac <test_configuration_write+0xa4>)
 8001442:	f007 fcc3 	bl	8008dcc <iprintf>
        
        // Verify a few key registers
        uint8_t read_data;
        printf("Verifying key registers:\n\r");
 8001446:	481a      	ldr	r0, [pc, #104]	@ (80014b0 <test_configuration_write+0xa8>)
 8001448:	f007 fcc0 	bl	8008dcc <iprintf>
        
        // Check SYNC3 (should be 0x55)
        hal_status = CC1201_ReadStatus(0x03, &read_data);
 800144c:	463b      	mov	r3, r7
 800144e:	4619      	mov	r1, r3
 8001450:	2003      	movs	r0, #3
 8001452:	f7ff f9d5 	bl	8000800 <CC1201_ReadStatus>
 8001456:	4603      	mov	r3, r0
 8001458:	707b      	strb	r3, [r7, #1]
        if (hal_status == HAL_OK) {
 800145a:	787b      	ldrb	r3, [r7, #1]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d104      	bne.n	800146a <test_configuration_write+0x62>
            printf("  SYNC3: 0x%02X (expected: 0x55)\n\r", read_data);
 8001460:	783b      	ldrb	r3, [r7, #0]
 8001462:	4619      	mov	r1, r3
 8001464:	4813      	ldr	r0, [pc, #76]	@ (80014b4 <test_configuration_write+0xac>)
 8001466:	f007 fcb1 	bl	8008dcc <iprintf>
        }
        
        // Check PKT_LEN (should be 0xFF)
        hal_status = CC1201_ReadStatus(0x25, &read_data);
 800146a:	463b      	mov	r3, r7
 800146c:	4619      	mov	r1, r3
 800146e:	2025      	movs	r0, #37	@ 0x25
 8001470:	f7ff f9c6 	bl	8000800 <CC1201_ReadStatus>
 8001474:	4603      	mov	r3, r0
 8001476:	707b      	strb	r3, [r7, #1]
        if (hal_status == HAL_OK) {
 8001478:	787b      	ldrb	r3, [r7, #1]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10a      	bne.n	8001494 <test_configuration_write+0x8c>
            printf("  PKT_LEN: 0x%02X (expected: 0xFF)\n\r", read_data);
 800147e:	783b      	ldrb	r3, [r7, #0]
 8001480:	4619      	mov	r1, r3
 8001482:	480d      	ldr	r0, [pc, #52]	@ (80014b8 <test_configuration_write+0xb0>)
 8001484:	f007 fca2 	bl	8008dcc <iprintf>
 8001488:	e004      	b.n	8001494 <test_configuration_write+0x8c>
        }
        
    } else {
        printf("  ✗ Configuration write FAILED - HAL Error: %d\n\r", hal_status);
 800148a:	787b      	ldrb	r3, [r7, #1]
 800148c:	4619      	mov	r1, r3
 800148e:	480b      	ldr	r0, [pc, #44]	@ (80014bc <test_configuration_write+0xb4>)
 8001490:	f007 fc9c 	bl	8008dcc <iprintf>
    }
    
    printf("=== CONFIGURATION TEST COMPLETE ===\n\r");
 8001494:	480a      	ldr	r0, [pc, #40]	@ (80014c0 <test_configuration_write+0xb8>)
 8001496:	f007 fc99 	bl	8008dcc <iprintf>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	0800a314 	.word	0x0800a314
 80014a8:	0800a338 	.word	0x0800a338
 80014ac:	0800a360 	.word	0x0800a360
 80014b0:	0800a388 	.word	0x0800a388
 80014b4:	0800a3a4 	.word	0x0800a3a4
 80014b8:	0800a3c8 	.word	0x0800a3c8
 80014bc:	0800a3f0 	.word	0x0800a3f0
 80014c0:	0800a424 	.word	0x0800a424

080014c4 <test_fifo_operations>:

// Test FIFO operations (read/write buffer tests)
void test_fifo_operations(void) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef hal_status;
    uint8_t status_byte = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	777b      	strb	r3, [r7, #29]
    
    printf("\n=== FIFO OPERATIONS TEST ===\n\r");
 80014ce:	489b      	ldr	r0, [pc, #620]	@ (800173c <test_fifo_operations+0x278>)
 80014d0:	f007 fc7c 	bl	8008dcc <iprintf>
    
    // First ensure we're in IDLE state
    hal_status = CC1201_EnterIdleMode(&status_byte);
 80014d4:	f107 031d 	add.w	r3, r7, #29
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff f928 	bl	800072e <CC1201_EnterIdleMode>
 80014de:	4603      	mov	r3, r0
 80014e0:	77fb      	strb	r3, [r7, #31]
    if (hal_status != HAL_OK) {
 80014e2:	7ffb      	ldrb	r3, [r7, #31]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d003      	beq.n	80014f0 <test_fifo_operations+0x2c>
        printf("  ✗ Failed to enter IDLE mode\n\r");
 80014e8:	4895      	ldr	r0, [pc, #596]	@ (8001740 <test_fifo_operations+0x27c>)
 80014ea:	f007 fc6f 	bl	8008dcc <iprintf>
 80014ee:	e121      	b.n	8001734 <test_fifo_operations+0x270>
        return;
    }
    print_cc1201_status(status_byte, "IDLE_FOR_FIFO");
 80014f0:	7f7b      	ldrb	r3, [r7, #29]
 80014f2:	4994      	ldr	r1, [pc, #592]	@ (8001744 <test_fifo_operations+0x280>)
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fc5f 	bl	8000db8 <print_cc1201_status>
    
    // Test 1: Flush both FIFOs to start clean
    printf("1. Flushing FIFOs\n\r");
 80014fa:	4893      	ldr	r0, [pc, #588]	@ (8001748 <test_fifo_operations+0x284>)
 80014fc:	f007 fc66 	bl	8008dcc <iprintf>
    hal_status = CC1201_FlushTxFifo(&status_byte);
 8001500:	f107 031d 	add.w	r3, r7, #29
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f953 	bl	80007b0 <CC1201_FlushTxFifo>
 800150a:	4603      	mov	r3, r0
 800150c:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 800150e:	7ffb      	ldrb	r3, [r7, #31]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d104      	bne.n	800151e <test_fifo_operations+0x5a>
        print_cc1201_status(status_byte, "FLUSH_TX");
 8001514:	7f7b      	ldrb	r3, [r7, #29]
 8001516:	498d      	ldr	r1, [pc, #564]	@ (800174c <test_fifo_operations+0x288>)
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff fc4d 	bl	8000db8 <print_cc1201_status>
    }
    
    hal_status = CC1201_FlushRxFifo(&status_byte);
 800151e:	f107 031d 	add.w	r3, r7, #29
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff f937 	bl	8000796 <CC1201_FlushRxFifo>
 8001528:	4603      	mov	r3, r0
 800152a:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 800152c:	7ffb      	ldrb	r3, [r7, #31]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d104      	bne.n	800153c <test_fifo_operations+0x78>
        print_cc1201_status(status_byte, "FLUSH_RX");
 8001532:	7f7b      	ldrb	r3, [r7, #29]
 8001534:	4986      	ldr	r1, [pc, #536]	@ (8001750 <test_fifo_operations+0x28c>)
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fc3e 	bl	8000db8 <print_cc1201_status>
    }
    
    // Test 2: Check initial FIFO byte counts
    printf("2. Initial FIFO status\n\r");
 800153c:	4885      	ldr	r0, [pc, #532]	@ (8001754 <test_fifo_operations+0x290>)
 800153e:	f007 fc45 	bl	8008dcc <iprintf>
    uint8_t tx_bytes = 0, rx_bytes = 0;
 8001542:	2300      	movs	r3, #0
 8001544:	773b      	strb	r3, [r7, #28]
 8001546:	2300      	movs	r3, #0
 8001548:	76fb      	strb	r3, [r7, #27]
    
    hal_status = CC1201_GetNumTXBytes(&tx_bytes);
 800154a:	f107 031c 	add.w	r3, r7, #28
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff f9fa 	bl	8000948 <CC1201_GetNumTXBytes>
 8001554:	4603      	mov	r3, r0
 8001556:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 8001558:	7ffb      	ldrb	r3, [r7, #31]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d104      	bne.n	8001568 <test_fifo_operations+0xa4>
        printf("  TX FIFO bytes: %d\n\r", tx_bytes);
 800155e:	7f3b      	ldrb	r3, [r7, #28]
 8001560:	4619      	mov	r1, r3
 8001562:	487d      	ldr	r0, [pc, #500]	@ (8001758 <test_fifo_operations+0x294>)
 8001564:	f007 fc32 	bl	8008dcc <iprintf>
    }
    
    hal_status = CC1201_GetNumRXBytes(&rx_bytes);
 8001568:	f107 031b 	add.w	r3, r7, #27
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff f9dd 	bl	800092c <CC1201_GetNumRXBytes>
 8001572:	4603      	mov	r3, r0
 8001574:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 8001576:	7ffb      	ldrb	r3, [r7, #31]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d104      	bne.n	8001586 <test_fifo_operations+0xc2>
        printf("  RX FIFO bytes: %d\n\r", rx_bytes);
 800157c:	7efb      	ldrb	r3, [r7, #27]
 800157e:	4619      	mov	r1, r3
 8001580:	4876      	ldr	r0, [pc, #472]	@ (800175c <test_fifo_operations+0x298>)
 8001582:	f007 fc23 	bl	8008dcc <iprintf>
    }
    
    // Test 3: Write test data to TX FIFO
    printf("3. Writing test data to TX FIFO\n\r");
 8001586:	4876      	ldr	r0, [pc, #472]	@ (8001760 <test_fifo_operations+0x29c>)
 8001588:	f007 fc20 	bl	8008dcc <iprintf>
    uint8_t test_data[] = {0xAA, 0x55, 0xCC, 0x33, 0xFF, 0x00, 0x11, 0x22};
 800158c:	4a75      	ldr	r2, [pc, #468]	@ (8001764 <test_fifo_operations+0x2a0>)
 800158e:	f107 0310 	add.w	r3, r7, #16
 8001592:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001596:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t test_data_length = sizeof(test_data);
 800159a:	2308      	movs	r3, #8
 800159c:	77bb      	strb	r3, [r7, #30]
    
    hal_status = CC1201_WriteTxFifo(test_data, test_data_length, &status_byte);
 800159e:	f107 021d 	add.w	r2, r7, #29
 80015a2:	7fb9      	ldrb	r1, [r7, #30]
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff f9db 	bl	8000964 <CC1201_WriteTxFifo>
 80015ae:	4603      	mov	r3, r0
 80015b0:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 80015b2:	7ffb      	ldrb	r3, [r7, #31]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d126      	bne.n	8001606 <test_fifo_operations+0x142>
        printf("  ✓ Wrote %d bytes to TX FIFO\n\r", test_data_length);
 80015b8:	7fbb      	ldrb	r3, [r7, #30]
 80015ba:	4619      	mov	r1, r3
 80015bc:	486a      	ldr	r0, [pc, #424]	@ (8001768 <test_fifo_operations+0x2a4>)
 80015be:	f007 fc05 	bl	8008dcc <iprintf>
        print_cc1201_status(status_byte, "TX_WRITE");
 80015c2:	7f7b      	ldrb	r3, [r7, #29]
 80015c4:	4969      	ldr	r1, [pc, #420]	@ (800176c <test_fifo_operations+0x2a8>)
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fbf6 	bl	8000db8 <print_cc1201_status>
        
        // Check TX FIFO count after write
        hal_status = CC1201_GetNumTXBytes(&tx_bytes);
 80015cc:	f107 031c 	add.w	r3, r7, #28
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff f9b9 	bl	8000948 <CC1201_GetNumTXBytes>
 80015d6:	4603      	mov	r3, r0
 80015d8:	77fb      	strb	r3, [r7, #31]
        if (hal_status == HAL_OK) {
 80015da:	7ffb      	ldrb	r3, [r7, #31]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d117      	bne.n	8001610 <test_fifo_operations+0x14c>
            printf("  TX FIFO bytes after write: %d (expected: %d)\n\r", tx_bytes, test_data_length);
 80015e0:	7f3b      	ldrb	r3, [r7, #28]
 80015e2:	4619      	mov	r1, r3
 80015e4:	7fbb      	ldrb	r3, [r7, #30]
 80015e6:	461a      	mov	r2, r3
 80015e8:	4861      	ldr	r0, [pc, #388]	@ (8001770 <test_fifo_operations+0x2ac>)
 80015ea:	f007 fbef 	bl	8008dcc <iprintf>
            if (tx_bytes == test_data_length) {
 80015ee:	7f3b      	ldrb	r3, [r7, #28]
 80015f0:	7fba      	ldrb	r2, [r7, #30]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d103      	bne.n	80015fe <test_fifo_operations+0x13a>
                printf("  ✓ TX FIFO count matches written data\n\r");
 80015f6:	485f      	ldr	r0, [pc, #380]	@ (8001774 <test_fifo_operations+0x2b0>)
 80015f8:	f007 fbe8 	bl	8008dcc <iprintf>
 80015fc:	e008      	b.n	8001610 <test_fifo_operations+0x14c>
            } else {
                printf("  ✗ TX FIFO count mismatch\n\r");
 80015fe:	485e      	ldr	r0, [pc, #376]	@ (8001778 <test_fifo_operations+0x2b4>)
 8001600:	f007 fbe4 	bl	8008dcc <iprintf>
 8001604:	e004      	b.n	8001610 <test_fifo_operations+0x14c>
            }
        }
    } else {
        printf("  ✗ TX FIFO write FAILED - HAL Error: %d\n\r", hal_status);
 8001606:	7ffb      	ldrb	r3, [r7, #31]
 8001608:	4619      	mov	r1, r3
 800160a:	485c      	ldr	r0, [pc, #368]	@ (800177c <test_fifo_operations+0x2b8>)
 800160c:	f007 fbde 	bl	8008dcc <iprintf>
    }
    
    // Test 4: Write single byte to TX FIFO
    printf("4. Writing single byte to TX FIFO\n\r");
 8001610:	485b      	ldr	r0, [pc, #364]	@ (8001780 <test_fifo_operations+0x2bc>)
 8001612:	f007 fbdb 	bl	8008dcc <iprintf>
    hal_status = CC1201_WriteSingleTxFifo(0x42, &status_byte);
 8001616:	f107 031d 	add.w	r3, r7, #29
 800161a:	4619      	mov	r1, r3
 800161c:	2042      	movs	r0, #66	@ 0x42
 800161e:	f7ff fb05 	bl	8000c2c <CC1201_WriteSingleTxFifo>
 8001622:	4603      	mov	r3, r0
 8001624:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 8001626:	7ffb      	ldrb	r3, [r7, #31]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d117      	bne.n	800165c <test_fifo_operations+0x198>
        printf("  ✓ Wrote single byte (0x42) to TX FIFO\n\r");
 800162c:	4855      	ldr	r0, [pc, #340]	@ (8001784 <test_fifo_operations+0x2c0>)
 800162e:	f007 fbcd 	bl	8008dcc <iprintf>
        print_cc1201_status(status_byte, "TX_SINGLE");
 8001632:	7f7b      	ldrb	r3, [r7, #29]
 8001634:	4954      	ldr	r1, [pc, #336]	@ (8001788 <test_fifo_operations+0x2c4>)
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fbbe 	bl	8000db8 <print_cc1201_status>
        
        // Check updated count
        hal_status = CC1201_GetNumTXBytes(&tx_bytes);
 800163c:	f107 031c 	add.w	r3, r7, #28
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff f981 	bl	8000948 <CC1201_GetNumTXBytes>
 8001646:	4603      	mov	r3, r0
 8001648:	77fb      	strb	r3, [r7, #31]
        if (hal_status == HAL_OK) {
 800164a:	7ffb      	ldrb	r3, [r7, #31]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d10a      	bne.n	8001666 <test_fifo_operations+0x1a2>
            printf("  TX FIFO bytes after single write: %d\n\r", tx_bytes);
 8001650:	7f3b      	ldrb	r3, [r7, #28]
 8001652:	4619      	mov	r1, r3
 8001654:	484d      	ldr	r0, [pc, #308]	@ (800178c <test_fifo_operations+0x2c8>)
 8001656:	f007 fbb9 	bl	8008dcc <iprintf>
 800165a:	e004      	b.n	8001666 <test_fifo_operations+0x1a2>
        }
    } else {
        printf("  ✗ Single TX write FAILED - HAL Error: %d\n\r", hal_status);
 800165c:	7ffb      	ldrb	r3, [r7, #31]
 800165e:	4619      	mov	r1, r3
 8001660:	484b      	ldr	r0, [pc, #300]	@ (8001790 <test_fifo_operations+0x2cc>)
 8001662:	f007 fbb3 	bl	8008dcc <iprintf>
    }
    
    // Test 5: Attempt to read from RX FIFO (should be empty)
    printf("5. Reading from empty RX FIFO\n\r");
 8001666:	484b      	ldr	r0, [pc, #300]	@ (8001794 <test_fifo_operations+0x2d0>)
 8001668:	f007 fbb0 	bl	8008dcc <iprintf>
    uint8_t read_buffer[10] = {0};
 800166c:	1d3b      	adds	r3, r7, #4
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	811a      	strh	r2, [r3, #8]
    hal_status = CC1201_ReadRxFifo(read_buffer, 1, &status_byte);
 8001676:	f107 021d 	add.w	r2, r7, #29
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	2101      	movs	r1, #1
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fa18 	bl	8000ab4 <CC1201_ReadRxFifo>
 8001684:	4603      	mov	r3, r0
 8001686:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 8001688:	7ffb      	ldrb	r3, [r7, #31]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d119      	bne.n	80016c2 <test_fifo_operations+0x1fe>
        printf("  Read from RX FIFO: 0x%02X\n\r", read_buffer[0]);
 800168e:	793b      	ldrb	r3, [r7, #4]
 8001690:	4619      	mov	r1, r3
 8001692:	4841      	ldr	r0, [pc, #260]	@ (8001798 <test_fifo_operations+0x2d4>)
 8001694:	f007 fb9a 	bl	8008dcc <iprintf>
        print_cc1201_status(status_byte, "RX_READ_EMPTY");
 8001698:	7f7b      	ldrb	r3, [r7, #29]
 800169a:	4940      	ldr	r1, [pc, #256]	@ (800179c <test_fifo_operations+0x2d8>)
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fb8b 	bl	8000db8 <print_cc1201_status>
        
        hal_status = CC1201_GetNumRXBytes(&rx_bytes);
 80016a2:	f107 031b 	add.w	r3, r7, #27
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff f940 	bl	800092c <CC1201_GetNumRXBytes>
 80016ac:	4603      	mov	r3, r0
 80016ae:	77fb      	strb	r3, [r7, #31]
        if (hal_status == HAL_OK) {
 80016b0:	7ffb      	ldrb	r3, [r7, #31]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d10a      	bne.n	80016cc <test_fifo_operations+0x208>
            printf("  RX FIFO bytes after read: %d\n\r", rx_bytes);
 80016b6:	7efb      	ldrb	r3, [r7, #27]
 80016b8:	4619      	mov	r1, r3
 80016ba:	4839      	ldr	r0, [pc, #228]	@ (80017a0 <test_fifo_operations+0x2dc>)
 80016bc:	f007 fb86 	bl	8008dcc <iprintf>
 80016c0:	e004      	b.n	80016cc <test_fifo_operations+0x208>
        }
    } else {
        printf("  ✗ RX FIFO read FAILED - HAL Error: %d\n\r", hal_status);
 80016c2:	7ffb      	ldrb	r3, [r7, #31]
 80016c4:	4619      	mov	r1, r3
 80016c6:	4837      	ldr	r0, [pc, #220]	@ (80017a4 <test_fifo_operations+0x2e0>)
 80016c8:	f007 fb80 	bl	8008dcc <iprintf>
    }
    
    // Test 6: Flush TX FIFO and verify
    printf("6. Flushing TX FIFO and verifying\n\r");
 80016cc:	4836      	ldr	r0, [pc, #216]	@ (80017a8 <test_fifo_operations+0x2e4>)
 80016ce:	f007 fb7d 	bl	8008dcc <iprintf>
    hal_status = CC1201_FlushTxFifo(&status_byte);
 80016d2:	f107 031d 	add.w	r3, r7, #29
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff f86a 	bl	80007b0 <CC1201_FlushTxFifo>
 80016dc:	4603      	mov	r3, r0
 80016de:	77fb      	strb	r3, [r7, #31]
    if (hal_status == HAL_OK) {
 80016e0:	7ffb      	ldrb	r3, [r7, #31]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d11e      	bne.n	8001724 <test_fifo_operations+0x260>
        print_cc1201_status(status_byte, "FINAL_FLUSH_TX");
 80016e6:	7f7b      	ldrb	r3, [r7, #29]
 80016e8:	4930      	ldr	r1, [pc, #192]	@ (80017ac <test_fifo_operations+0x2e8>)
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fb64 	bl	8000db8 <print_cc1201_status>
        
        hal_status = CC1201_GetNumTXBytes(&tx_bytes);
 80016f0:	f107 031c 	add.w	r3, r7, #28
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff f927 	bl	8000948 <CC1201_GetNumTXBytes>
 80016fa:	4603      	mov	r3, r0
 80016fc:	77fb      	strb	r3, [r7, #31]
        if (hal_status == HAL_OK) {
 80016fe:	7ffb      	ldrb	r3, [r7, #31]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d114      	bne.n	800172e <test_fifo_operations+0x26a>
            printf("  TX FIFO bytes after flush: %d (expected: 0)\n\r", tx_bytes);
 8001704:	7f3b      	ldrb	r3, [r7, #28]
 8001706:	4619      	mov	r1, r3
 8001708:	4829      	ldr	r0, [pc, #164]	@ (80017b0 <test_fifo_operations+0x2ec>)
 800170a:	f007 fb5f 	bl	8008dcc <iprintf>
            if (tx_bytes == 0) {
 800170e:	7f3b      	ldrb	r3, [r7, #28]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d103      	bne.n	800171c <test_fifo_operations+0x258>
                printf("  ✓ TX FIFO successfully flushed\n\r");
 8001714:	4827      	ldr	r0, [pc, #156]	@ (80017b4 <test_fifo_operations+0x2f0>)
 8001716:	f007 fb59 	bl	8008dcc <iprintf>
 800171a:	e008      	b.n	800172e <test_fifo_operations+0x26a>
            } else {
                printf("  ✗ TX FIFO flush incomplete\n\r");
 800171c:	4826      	ldr	r0, [pc, #152]	@ (80017b8 <test_fifo_operations+0x2f4>)
 800171e:	f007 fb55 	bl	8008dcc <iprintf>
 8001722:	e004      	b.n	800172e <test_fifo_operations+0x26a>
            }
        }
    } else {
        printf("  ✗ TX FIFO flush FAILED - HAL Error: %d\n\r", hal_status);
 8001724:	7ffb      	ldrb	r3, [r7, #31]
 8001726:	4619      	mov	r1, r3
 8001728:	4824      	ldr	r0, [pc, #144]	@ (80017bc <test_fifo_operations+0x2f8>)
 800172a:	f007 fb4f 	bl	8008dcc <iprintf>
    }
    
    printf("=== FIFO OPERATIONS TEST COMPLETE ===\n\r");
 800172e:	4824      	ldr	r0, [pc, #144]	@ (80017c0 <test_fifo_operations+0x2fc>)
 8001730:	f007 fb4c 	bl	8008dcc <iprintf>
}
 8001734:	3720      	adds	r7, #32
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	0800a44c 	.word	0x0800a44c
 8001740:	0800a46c 	.word	0x0800a46c
 8001744:	0800a490 	.word	0x0800a490
 8001748:	0800a4a0 	.word	0x0800a4a0
 800174c:	08009e28 	.word	0x08009e28
 8001750:	08009de4 	.word	0x08009de4
 8001754:	0800a4b4 	.word	0x0800a4b4
 8001758:	0800a4d0 	.word	0x0800a4d0
 800175c:	0800a4e8 	.word	0x0800a4e8
 8001760:	0800a500 	.word	0x0800a500
 8001764:	0800a864 	.word	0x0800a864
 8001768:	0800a524 	.word	0x0800a524
 800176c:	0800a548 	.word	0x0800a548
 8001770:	0800a554 	.word	0x0800a554
 8001774:	0800a588 	.word	0x0800a588
 8001778:	0800a5b4 	.word	0x0800a5b4
 800177c:	0800a5d4 	.word	0x0800a5d4
 8001780:	0800a604 	.word	0x0800a604
 8001784:	0800a628 	.word	0x0800a628
 8001788:	0800a654 	.word	0x0800a654
 800178c:	0800a660 	.word	0x0800a660
 8001790:	0800a68c 	.word	0x0800a68c
 8001794:	0800a6bc 	.word	0x0800a6bc
 8001798:	0800a6dc 	.word	0x0800a6dc
 800179c:	0800a6fc 	.word	0x0800a6fc
 80017a0:	0800a70c 	.word	0x0800a70c
 80017a4:	0800a730 	.word	0x0800a730
 80017a8:	0800a75c 	.word	0x0800a75c
 80017ac:	0800a780 	.word	0x0800a780
 80017b0:	0800a790 	.word	0x0800a790
 80017b4:	0800a7c0 	.word	0x0800a7c0
 80017b8:	0800a7e8 	.word	0x0800a7e8
 80017bc:	0800a80c 	.word	0x0800a80c
 80017c0:	0800a83c 	.word	0x0800a83c

080017c4 <test_power_states>:

// Advanced power state testing
void test_power_states(void) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef hal_status;
    uint8_t status_byte = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	71bb      	strb	r3, [r7, #6]
    
    printf("\n=== POWER STATE TESTING ===\n\r");
 80017ce:	4860      	ldr	r0, [pc, #384]	@ (8001950 <test_power_states+0x18c>)
 80017d0:	f007 fafc 	bl	8008dcc <iprintf>
    
    // Test 1: Start from IDLE
    printf("1. Starting from IDLE state\n\r");
 80017d4:	485f      	ldr	r0, [pc, #380]	@ (8001954 <test_power_states+0x190>)
 80017d6:	f007 faf9 	bl	8008dcc <iprintf>
    hal_status = CC1201_EnterIdleMode(&status_byte);
 80017da:	1dbb      	adds	r3, r7, #6
 80017dc:	4618      	mov	r0, r3
 80017de:	f7fe ffa6 	bl	800072e <CC1201_EnterIdleMode>
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d104      	bne.n	80017f6 <test_power_states+0x32>
        print_cc1201_status(status_byte, "START_IDLE");
 80017ec:	79bb      	ldrb	r3, [r7, #6]
 80017ee:	495a      	ldr	r1, [pc, #360]	@ (8001958 <test_power_states+0x194>)
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fae1 	bl	8000db8 <print_cc1201_status>
    }
    
    // Test 2: Enter RX mode
    printf("2. Entering RX mode\n\r");
 80017f6:	4859      	ldr	r0, [pc, #356]	@ (800195c <test_power_states+0x198>)
 80017f8:	f007 fae8 	bl	8008dcc <iprintf>
    hal_status = CC1201_EnterRxMode(&status_byte);
 80017fc:	1dbb      	adds	r3, r7, #6
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe ff7b 	bl	80006fa <CC1201_EnterRxMode>
 8001804:	4603      	mov	r3, r0
 8001806:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d107      	bne.n	800181e <test_power_states+0x5a>
        print_cc1201_status(status_byte, "RX_MODE");
 800180e:	79bb      	ldrb	r3, [r7, #6]
 8001810:	4953      	ldr	r1, [pc, #332]	@ (8001960 <test_power_states+0x19c>)
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff fad0 	bl	8000db8 <print_cc1201_status>
        HAL_Delay(100); // Stay in RX for a moment
 8001818:	2064      	movs	r0, #100	@ 0x64
 800181a:	f001 fbab 	bl	8002f74 <HAL_Delay>
    }
    
    // Test 3: Return to IDLE from RX
    printf("3. Returning to IDLE from RX\n\r");
 800181e:	4851      	ldr	r0, [pc, #324]	@ (8001964 <test_power_states+0x1a0>)
 8001820:	f007 fad4 	bl	8008dcc <iprintf>
    hal_status = CC1201_EnterIdleMode(&status_byte);
 8001824:	1dbb      	adds	r3, r7, #6
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe ff81 	bl	800072e <CC1201_EnterIdleMode>
 800182c:	4603      	mov	r3, r0
 800182e:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d104      	bne.n	8001840 <test_power_states+0x7c>
        print_cc1201_status(status_byte, "IDLE_FROM_RX");
 8001836:	79bb      	ldrb	r3, [r7, #6]
 8001838:	494b      	ldr	r1, [pc, #300]	@ (8001968 <test_power_states+0x1a4>)
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fabc 	bl	8000db8 <print_cc1201_status>
    }
    
    // Test 4: Enter TX mode
    printf("4. Entering TX mode\n\r");
 8001840:	484a      	ldr	r0, [pc, #296]	@ (800196c <test_power_states+0x1a8>)
 8001842:	f007 fac3 	bl	8008dcc <iprintf>
    hal_status = CC1201_EnterTxMode(&status_byte);
 8001846:	1dbb      	adds	r3, r7, #6
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe ff63 	bl	8000714 <CC1201_EnterTxMode>
 800184e:	4603      	mov	r3, r0
 8001850:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d107      	bne.n	8001868 <test_power_states+0xa4>
        print_cc1201_status(status_byte, "TX_MODE");
 8001858:	79bb      	ldrb	r3, [r7, #6]
 800185a:	4945      	ldr	r1, [pc, #276]	@ (8001970 <test_power_states+0x1ac>)
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff faab 	bl	8000db8 <print_cc1201_status>
        HAL_Delay(50); // Brief TX state
 8001862:	2032      	movs	r0, #50	@ 0x32
 8001864:	f001 fb86 	bl	8002f74 <HAL_Delay>
    }
    
    // Test 5: Return to IDLE from TX
    printf("5. Returning to IDLE from TX\n\r");
 8001868:	4842      	ldr	r0, [pc, #264]	@ (8001974 <test_power_states+0x1b0>)
 800186a:	f007 faaf 	bl	8008dcc <iprintf>
    hal_status = CC1201_EnterIdleMode(&status_byte);
 800186e:	1dbb      	adds	r3, r7, #6
 8001870:	4618      	mov	r0, r3
 8001872:	f7fe ff5c 	bl	800072e <CC1201_EnterIdleMode>
 8001876:	4603      	mov	r3, r0
 8001878:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d104      	bne.n	800188a <test_power_states+0xc6>
        print_cc1201_status(status_byte, "IDLE_FROM_TX");
 8001880:	79bb      	ldrb	r3, [r7, #6]
 8001882:	493d      	ldr	r1, [pc, #244]	@ (8001978 <test_power_states+0x1b4>)
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fa97 	bl	8000db8 <print_cc1201_status>
    }
    
    // Test 6: Fast TX On (FSTXON state)
    printf("6. Fast TX On (FSTXON state)\n\r");
 800188a:	483c      	ldr	r0, [pc, #240]	@ (800197c <test_power_states+0x1b8>)
 800188c:	f007 fa9e 	bl	8008dcc <iprintf>
    hal_status = CC1201_FastTxOn(&status_byte);
 8001890:	1dbb      	adds	r3, r7, #6
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe ff17 	bl	80006c6 <CC1201_FastTxOn>
 8001898:	4603      	mov	r3, r0
 800189a:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d107      	bne.n	80018b2 <test_power_states+0xee>
        print_cc1201_status(status_byte, "FSTXON");
 80018a2:	79bb      	ldrb	r3, [r7, #6]
 80018a4:	4936      	ldr	r1, [pc, #216]	@ (8001980 <test_power_states+0x1bc>)
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff fa86 	bl	8000db8 <print_cc1201_status>
        HAL_Delay(50);
 80018ac:	2032      	movs	r0, #50	@ 0x32
 80018ae:	f001 fb61 	bl	8002f74 <HAL_Delay>
    }
    
    // Test 7: Return to IDLE from FSTXON
    printf("7. Returning to IDLE from FSTXON\n\r");
 80018b2:	4834      	ldr	r0, [pc, #208]	@ (8001984 <test_power_states+0x1c0>)
 80018b4:	f007 fa8a 	bl	8008dcc <iprintf>
    hal_status = CC1201_EnterIdleMode(&status_byte);
 80018b8:	1dbb      	adds	r3, r7, #6
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7fe ff37 	bl	800072e <CC1201_EnterIdleMode>
 80018c0:	4603      	mov	r3, r0
 80018c2:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d104      	bne.n	80018d4 <test_power_states+0x110>
        print_cc1201_status(status_byte, "IDLE_FROM_FSTXON");
 80018ca:	79bb      	ldrb	r3, [r7, #6]
 80018cc:	492e      	ldr	r1, [pc, #184]	@ (8001988 <test_power_states+0x1c4>)
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fa72 	bl	8000db8 <print_cc1201_status>
    }
    
    // Test 8: Enter Sleep mode
    printf("8. Entering Sleep mode\n\r");
 80018d4:	482d      	ldr	r0, [pc, #180]	@ (800198c <test_power_states+0x1c8>)
 80018d6:	f007 fa79 	bl	8008dcc <iprintf>
    hal_status = CC1201_EnterSleepMode(&status_byte);
 80018da:	1dbb      	adds	r3, r7, #6
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe ff4d 	bl	800077c <CC1201_EnterSleepMode>
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d107      	bne.n	80018fc <test_power_states+0x138>
        print_cc1201_status(status_byte, "SLEEP");
 80018ec:	79bb      	ldrb	r3, [r7, #6]
 80018ee:	4928      	ldr	r1, [pc, #160]	@ (8001990 <test_power_states+0x1cc>)
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fa61 	bl	8000db8 <print_cc1201_status>
        HAL_Delay(200); // Sleep for a moment
 80018f6:	20c8      	movs	r0, #200	@ 0xc8
 80018f8:	f001 fb3c 	bl	8002f74 <HAL_Delay>
    }
    
    // Test 9: Wake up from Sleep with NOP
    printf("9. Waking up from Sleep\n\r");
 80018fc:	4825      	ldr	r0, [pc, #148]	@ (8001994 <test_power_states+0x1d0>)
 80018fe:	f007 fa65 	bl	8008dcc <iprintf>
    hal_status = CC1201_Nop(&status_byte);
 8001902:	1dbb      	adds	r3, r7, #6
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe ff6d 	bl	80007e4 <CC1201_Nop>
 800190a:	4603      	mov	r3, r0
 800190c:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d104      	bne.n	800191e <test_power_states+0x15a>
        print_cc1201_status(status_byte, "WAKE_FROM_SLEEP");
 8001914:	79bb      	ldrb	r3, [r7, #6]
 8001916:	4920      	ldr	r1, [pc, #128]	@ (8001998 <test_power_states+0x1d4>)
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff fa4d 	bl	8000db8 <print_cc1201_status>
    }
    
    // Test 10: Final IDLE state
    printf("10. Final IDLE state\n\r");
 800191e:	481f      	ldr	r0, [pc, #124]	@ (800199c <test_power_states+0x1d8>)
 8001920:	f007 fa54 	bl	8008dcc <iprintf>
    hal_status = CC1201_EnterIdleMode(&status_byte);
 8001924:	1dbb      	adds	r3, r7, #6
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe ff01 	bl	800072e <CC1201_EnterIdleMode>
 800192c:	4603      	mov	r3, r0
 800192e:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d104      	bne.n	8001940 <test_power_states+0x17c>
        print_cc1201_status(status_byte, "FINAL_IDLE");
 8001936:	79bb      	ldrb	r3, [r7, #6]
 8001938:	4919      	ldr	r1, [pc, #100]	@ (80019a0 <test_power_states+0x1dc>)
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fa3c 	bl	8000db8 <print_cc1201_status>
    }
    
    printf("=== POWER STATE TESTING COMPLETE ===\n\r");
 8001940:	4818      	ldr	r0, [pc, #96]	@ (80019a4 <test_power_states+0x1e0>)
 8001942:	f007 fa43 	bl	8008dcc <iprintf>
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	0800a86c 	.word	0x0800a86c
 8001954:	0800a88c 	.word	0x0800a88c
 8001958:	0800a8ac 	.word	0x0800a8ac
 800195c:	0800a8b8 	.word	0x0800a8b8
 8001960:	08009da4 	.word	0x08009da4
 8001964:	0800a8d0 	.word	0x0800a8d0
 8001968:	0800a8f0 	.word	0x0800a8f0
 800196c:	0800a900 	.word	0x0800a900
 8001970:	08009d64 	.word	0x08009d64
 8001974:	0800a918 	.word	0x0800a918
 8001978:	0800a938 	.word	0x0800a938
 800197c:	0800a948 	.word	0x0800a948
 8001980:	0800a968 	.word	0x0800a968
 8001984:	0800a970 	.word	0x0800a970
 8001988:	0800a994 	.word	0x0800a994
 800198c:	0800a9a8 	.word	0x0800a9a8
 8001990:	08009f3c 	.word	0x08009f3c
 8001994:	0800a9c4 	.word	0x0800a9c4
 8001998:	0800a9e0 	.word	0x0800a9e0
 800199c:	0800a9f0 	.word	0x0800a9f0
 80019a0:	08009fb8 	.word	0x08009fb8
 80019a4:	0800aa08 	.word	0x0800aa08

080019a8 <run_comprehensive_cc1201_test>:

// Comprehensive test sequence
void run_comprehensive_cc1201_test(void) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
    printf("\n🚀 STARTING COMPREHENSIVE CC1201 TEST SEQUENCE 🚀\n\r");
 80019ac:	4818      	ldr	r0, [pc, #96]	@ (8001a10 <run_comprehensive_cc1201_test+0x68>)
 80019ae:	f007 fa0d 	bl	8008dcc <iprintf>
    printf("================================================\n\r");
 80019b2:	4818      	ldr	r0, [pc, #96]	@ (8001a14 <run_comprehensive_cc1201_test+0x6c>)
 80019b4:	f007 fa0a 	bl	8008dcc <iprintf>
    
    test_all_strobe_commands();
 80019b8:	f7ff fa6c 	bl	8000e94 <test_all_strobe_commands>
    HAL_Delay(500);
 80019bc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019c0:	f001 fad8 	bl	8002f74 <HAL_Delay>
    
    test_status_registers();
 80019c4:	f7ff fc34 	bl	8001230 <test_status_registers>
    HAL_Delay(500);
 80019c8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019cc:	f001 fad2 	bl	8002f74 <HAL_Delay>
    
    test_register_operations();
 80019d0:	f7ff fc98 	bl	8001304 <test_register_operations>
    HAL_Delay(500);
 80019d4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019d8:	f001 facc 	bl	8002f74 <HAL_Delay>
    
    test_configuration_write();
 80019dc:	f7ff fd14 	bl	8001408 <test_configuration_write>
    HAL_Delay(500);
 80019e0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019e4:	f001 fac6 	bl	8002f74 <HAL_Delay>
    
    test_fifo_operations();
 80019e8:	f7ff fd6c 	bl	80014c4 <test_fifo_operations>
    HAL_Delay(500);
 80019ec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019f0:	f001 fac0 	bl	8002f74 <HAL_Delay>
    
    test_power_states();
 80019f4:	f7ff fee6 	bl	80017c4 <test_power_states>
    HAL_Delay(500);
 80019f8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019fc:	f001 faba 	bl	8002f74 <HAL_Delay>
    
    printf("\n🎉 COMPREHENSIVE TEST SEQUENCE COMPLETE! 🎉\n\r");
 8001a00:	4805      	ldr	r0, [pc, #20]	@ (8001a18 <run_comprehensive_cc1201_test+0x70>)
 8001a02:	f007 f9e3 	bl	8008dcc <iprintf>
    printf("==============================================\n\r");
 8001a06:	4805      	ldr	r0, [pc, #20]	@ (8001a1c <run_comprehensive_cc1201_test+0x74>)
 8001a08:	f007 f9e0 	bl	8008dcc <iprintf>
}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	0800aa30 	.word	0x0800aa30
 8001a14:	0800aa6c 	.word	0x0800aa6c
 8001a18:	0800aaa0 	.word	0x0800aaa0
 8001a1c:	0800aad4 	.word	0x0800aad4

08001a20 <test_GPIO_pins>:

// Function to test GPIO pin states
void test_GPIO_pins(void) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
    printf("=== GPIO Pin Test ===\n\r");
 8001a26:	4831      	ldr	r0, [pc, #196]	@ (8001aec <test_GPIO_pins+0xcc>)
 8001a28:	f007 f9d0 	bl	8008dcc <iprintf>
    
    // Test CS pin
    printf("CS Pin (PE4): ");
 8001a2c:	4830      	ldr	r0, [pc, #192]	@ (8001af0 <test_GPIO_pins+0xd0>)
 8001a2e:	f007 f9cd 	bl	8008dcc <iprintf>
    GPIO_PinState cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 8001a32:	2110      	movs	r1, #16
 8001a34:	482f      	ldr	r0, [pc, #188]	@ (8001af4 <test_GPIO_pins+0xd4>)
 8001a36:	f002 f8af 	bl	8003b98 <HAL_GPIO_ReadPin>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	71fb      	strb	r3, [r7, #7]
    printf("%s\n\r", cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d101      	bne.n	8001a48 <test_GPIO_pins+0x28>
 8001a44:	4b2c      	ldr	r3, [pc, #176]	@ (8001af8 <test_GPIO_pins+0xd8>)
 8001a46:	e000      	b.n	8001a4a <test_GPIO_pins+0x2a>
 8001a48:	4b2c      	ldr	r3, [pc, #176]	@ (8001afc <test_GPIO_pins+0xdc>)
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	482c      	ldr	r0, [pc, #176]	@ (8001b00 <test_GPIO_pins+0xe0>)
 8001a4e:	f007 f9bd 	bl	8008dcc <iprintf>
    
    // Toggle CS pin to test control
    printf("Toggling CS pin...\n\r");
 8001a52:	482c      	ldr	r0, [pc, #176]	@ (8001b04 <test_GPIO_pins+0xe4>)
 8001a54:	f007 f9ba 	bl	8008dcc <iprintf>
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2110      	movs	r1, #16
 8001a5c:	4825      	ldr	r0, [pc, #148]	@ (8001af4 <test_GPIO_pins+0xd4>)
 8001a5e:	f002 f8b3 	bl	8003bc8 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001a62:	2064      	movs	r0, #100	@ 0x64
 8001a64:	f001 fa86 	bl	8002f74 <HAL_Delay>
    cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 8001a68:	2110      	movs	r1, #16
 8001a6a:	4822      	ldr	r0, [pc, #136]	@ (8001af4 <test_GPIO_pins+0xd4>)
 8001a6c:	f002 f894 	bl	8003b98 <HAL_GPIO_ReadPin>
 8001a70:	4603      	mov	r3, r0
 8001a72:	71fb      	strb	r3, [r7, #7]
    printf("CS Pin after LOW: %s\n\r", cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d101      	bne.n	8001a7e <test_GPIO_pins+0x5e>
 8001a7a:	4b1f      	ldr	r3, [pc, #124]	@ (8001af8 <test_GPIO_pins+0xd8>)
 8001a7c:	e000      	b.n	8001a80 <test_GPIO_pins+0x60>
 8001a7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001afc <test_GPIO_pins+0xdc>)
 8001a80:	4619      	mov	r1, r3
 8001a82:	4821      	ldr	r0, [pc, #132]	@ (8001b08 <test_GPIO_pins+0xe8>)
 8001a84:	f007 f9a2 	bl	8008dcc <iprintf>
    
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 8001a88:	2201      	movs	r2, #1
 8001a8a:	2110      	movs	r1, #16
 8001a8c:	4819      	ldr	r0, [pc, #100]	@ (8001af4 <test_GPIO_pins+0xd4>)
 8001a8e:	f002 f89b 	bl	8003bc8 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001a92:	2064      	movs	r0, #100	@ 0x64
 8001a94:	f001 fa6e 	bl	8002f74 <HAL_Delay>
    cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 8001a98:	2110      	movs	r1, #16
 8001a9a:	4816      	ldr	r0, [pc, #88]	@ (8001af4 <test_GPIO_pins+0xd4>)
 8001a9c:	f002 f87c 	bl	8003b98 <HAL_GPIO_ReadPin>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	71fb      	strb	r3, [r7, #7]
    printf("CS Pin after HIGH: %s\n\r", cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d101      	bne.n	8001aae <test_GPIO_pins+0x8e>
 8001aaa:	4b13      	ldr	r3, [pc, #76]	@ (8001af8 <test_GPIO_pins+0xd8>)
 8001aac:	e000      	b.n	8001ab0 <test_GPIO_pins+0x90>
 8001aae:	4b13      	ldr	r3, [pc, #76]	@ (8001afc <test_GPIO_pins+0xdc>)
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4816      	ldr	r0, [pc, #88]	@ (8001b0c <test_GPIO_pins+0xec>)
 8001ab4:	f007 f98a 	bl	8008dcc <iprintf>
    
    // Test INT pin
    printf("INT Pin (PD4): ");
 8001ab8:	4815      	ldr	r0, [pc, #84]	@ (8001b10 <test_GPIO_pins+0xf0>)
 8001aba:	f007 f987 	bl	8008dcc <iprintf>
    GPIO_PinState int_state = HAL_GPIO_ReadPin(CC1201_INT_PORT, CC1201_INT_PIN);
 8001abe:	2110      	movs	r1, #16
 8001ac0:	4814      	ldr	r0, [pc, #80]	@ (8001b14 <test_GPIO_pins+0xf4>)
 8001ac2:	f002 f869 	bl	8003b98 <HAL_GPIO_ReadPin>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71bb      	strb	r3, [r7, #6]
    printf("%s\n\r", int_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 8001aca:	79bb      	ldrb	r3, [r7, #6]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d101      	bne.n	8001ad4 <test_GPIO_pins+0xb4>
 8001ad0:	4b09      	ldr	r3, [pc, #36]	@ (8001af8 <test_GPIO_pins+0xd8>)
 8001ad2:	e000      	b.n	8001ad6 <test_GPIO_pins+0xb6>
 8001ad4:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <test_GPIO_pins+0xdc>)
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4809      	ldr	r0, [pc, #36]	@ (8001b00 <test_GPIO_pins+0xe0>)
 8001ada:	f007 f977 	bl	8008dcc <iprintf>
    
    printf("===================\n\r");
 8001ade:	480e      	ldr	r0, [pc, #56]	@ (8001b18 <test_GPIO_pins+0xf8>)
 8001ae0:	f007 f974 	bl	8008dcc <iprintf>
}
 8001ae4:	bf00      	nop
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	0800ab08 	.word	0x0800ab08
 8001af0:	0800ab20 	.word	0x0800ab20
 8001af4:	58021000 	.word	0x58021000
 8001af8:	0800ab30 	.word	0x0800ab30
 8001afc:	0800ab38 	.word	0x0800ab38
 8001b00:	0800ab3c 	.word	0x0800ab3c
 8001b04:	0800ab44 	.word	0x0800ab44
 8001b08:	0800ab5c 	.word	0x0800ab5c
 8001b0c:	0800ab74 	.word	0x0800ab74
 8001b10:	0800ab8c 	.word	0x0800ab8c
 8001b14:	58020c00 	.word	0x58020c00
 8001b18:	0800ab9c 	.word	0x0800ab9c

08001b1c <initialize_CC1201>:

// Function to initialize CC1201 with preferred settings
HAL_StatusTypeDef initialize_CC1201(void) {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
    uint8_t status_byte = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	717b      	strb	r3, [r7, #5]
    HAL_StatusTypeDef hal_status;
    
    printf("Initializing CC1201...\n\r");
 8001b26:	4827      	ldr	r0, [pc, #156]	@ (8001bc4 <initialize_CC1201+0xa8>)
 8001b28:	f007 f950 	bl	8008dcc <iprintf>
    
    // Step 1: Soft reset
    hal_status = CC1201_SoftReset(&status_byte);
 8001b2c:	1d7b      	adds	r3, r7, #5
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7fe fdbc 	bl	80006ac <CC1201_SoftReset>
 8001b34:	4603      	mov	r3, r0
 8001b36:	73fb      	strb	r3, [r7, #15]
    if (hal_status != HAL_OK) {
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d004      	beq.n	8001b48 <initialize_CC1201+0x2c>
        printf("CC1201 Reset Failed!\n\r");
 8001b3e:	4822      	ldr	r0, [pc, #136]	@ (8001bc8 <initialize_CC1201+0xac>)
 8001b40:	f007 f944 	bl	8008dcc <iprintf>
        return hal_status;
 8001b44:	7bfb      	ldrb	r3, [r7, #15]
 8001b46:	e039      	b.n	8001bbc <initialize_CC1201+0xa0>
    }
    printf("CC1201 Reset OK - Status: 0x%02X\n\r", status_byte);
 8001b48:	797b      	ldrb	r3, [r7, #5]
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	481f      	ldr	r0, [pc, #124]	@ (8001bcc <initialize_CC1201+0xb0>)
 8001b4e:	f007 f93d 	bl	8008dcc <iprintf>
    
    HAL_Delay(100); // Wait for reset to complete
 8001b52:	2064      	movs	r0, #100	@ 0x64
 8001b54:	f001 fa0e 	bl	8002f74 <HAL_Delay>
    
    // Step 2: Write preferred settings (basic registers only)
    const registerSetting_t* settings = CC1201_GetPreferredSettings();
 8001b58:	f7ff f924 	bl	8000da4 <CC1201_GetPreferredSettings>
 8001b5c:	60b8      	str	r0, [r7, #8]
    uint16_t num_settings = CC1201_GetNumPreferredSettings();
 8001b5e:	f7ff f918 	bl	8000d92 <CC1201_GetNumPreferredSettings>
 8001b62:	4603      	mov	r3, r0
 8001b64:	80fb      	strh	r3, [r7, #6]
    
    printf("Writing %d configuration registers...\n\r", num_settings);
 8001b66:	88fb      	ldrh	r3, [r7, #6]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4819      	ldr	r0, [pc, #100]	@ (8001bd0 <initialize_CC1201+0xb4>)
 8001b6c:	f007 f92e 	bl	8008dcc <iprintf>
    hal_status = CC1201_WriteRegisterConfig(settings, num_settings);
 8001b70:	88fb      	ldrh	r3, [r7, #6]
 8001b72:	4619      	mov	r1, r3
 8001b74:	68b8      	ldr	r0, [r7, #8]
 8001b76:	f7ff f8d3 	bl	8000d20 <CC1201_WriteRegisterConfig>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	73fb      	strb	r3, [r7, #15]
    if (hal_status != HAL_OK) {
 8001b7e:	7bfb      	ldrb	r3, [r7, #15]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d004      	beq.n	8001b8e <initialize_CC1201+0x72>
        printf("Configuration write failed!\n\r");
 8001b84:	4813      	ldr	r0, [pc, #76]	@ (8001bd4 <initialize_CC1201+0xb8>)
 8001b86:	f007 f921 	bl	8008dcc <iprintf>
        return hal_status;
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	e016      	b.n	8001bbc <initialize_CC1201+0xa0>
    }
    printf("Configuration complete!\n\r");
 8001b8e:	4812      	ldr	r0, [pc, #72]	@ (8001bd8 <initialize_CC1201+0xbc>)
 8001b90:	f007 f91c 	bl	8008dcc <iprintf>
    
    // Step 3: Enter idle mode
    hal_status = CC1201_EnterIdleMode(&status_byte);
 8001b94:	1d7b      	adds	r3, r7, #5
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe fdc9 	bl	800072e <CC1201_EnterIdleMode>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	73fb      	strb	r3, [r7, #15]
    if (hal_status != HAL_OK) {
 8001ba0:	7bfb      	ldrb	r3, [r7, #15]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d004      	beq.n	8001bb0 <initialize_CC1201+0x94>
        printf("Enter Idle Failed!\n\r");
 8001ba6:	480d      	ldr	r0, [pc, #52]	@ (8001bdc <initialize_CC1201+0xc0>)
 8001ba8:	f007 f910 	bl	8008dcc <iprintf>
        return hal_status;
 8001bac:	7bfb      	ldrb	r3, [r7, #15]
 8001bae:	e005      	b.n	8001bbc <initialize_CC1201+0xa0>
    }
    printf("Enter Idle OK - Status: 0x%02X\n\r", status_byte);
 8001bb0:	797b      	ldrb	r3, [r7, #5]
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	480a      	ldr	r0, [pc, #40]	@ (8001be0 <initialize_CC1201+0xc4>)
 8001bb6:	f007 f909 	bl	8008dcc <iprintf>
    
    return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	0800abb4 	.word	0x0800abb4
 8001bc8:	0800abd0 	.word	0x0800abd0
 8001bcc:	0800abe8 	.word	0x0800abe8
 8001bd0:	0800a338 	.word	0x0800a338
 8001bd4:	0800ac0c 	.word	0x0800ac0c
 8001bd8:	0800ac2c 	.word	0x0800ac2c
 8001bdc:	0800ac48 	.word	0x0800ac48
 8001be0:	0800ac60 	.word	0x0800ac60

08001be4 <test_CC1201_strobe_commands>:

// Function to test CC1201 strobe commands
void test_CC1201_strobe_commands(void) {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
    uint8_t status_byte = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef hal_status;
    
    printf("Starting CC1201 Strobe Command Tests...\n\r");
 8001bee:	4873      	ldr	r0, [pc, #460]	@ (8001dbc <test_CC1201_strobe_commands+0x1d8>)
 8001bf0:	f007 f8ec 	bl	8008dcc <iprintf>
    
    // Test 1: NOP command (should always work)
    printf("Test 1: NOP Command\n\r");
 8001bf4:	4872      	ldr	r0, [pc, #456]	@ (8001dc0 <test_CC1201_strobe_commands+0x1dc>)
 8001bf6:	f007 f8e9 	bl	8008dcc <iprintf>
    hal_status = CC1201_Nop(&status_byte);
 8001bfa:	1dbb      	adds	r3, r7, #6
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7fe fdf1 	bl	80007e4 <CC1201_Nop>
 8001c02:	4603      	mov	r3, r0
 8001c04:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d105      	bne.n	8001c18 <test_CC1201_strobe_commands+0x34>
        printf("  NOP Success - Status: 0x%02X\n\r", status_byte);
 8001c0c:	79bb      	ldrb	r3, [r7, #6]
 8001c0e:	4619      	mov	r1, r3
 8001c10:	486c      	ldr	r0, [pc, #432]	@ (8001dc4 <test_CC1201_strobe_commands+0x1e0>)
 8001c12:	f007 f8db 	bl	8008dcc <iprintf>
 8001c16:	e004      	b.n	8001c22 <test_CC1201_strobe_commands+0x3e>
    } else {
        printf("  NOP Failed - HAL Status: %d\n\r", hal_status);
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	486a      	ldr	r0, [pc, #424]	@ (8001dc8 <test_CC1201_strobe_commands+0x1e4>)
 8001c1e:	f007 f8d5 	bl	8008dcc <iprintf>
    }
    
    // Test 2: Soft Reset
    printf("Test 2: Soft Reset\n\r");
 8001c22:	486a      	ldr	r0, [pc, #424]	@ (8001dcc <test_CC1201_strobe_commands+0x1e8>)
 8001c24:	f007 f8d2 	bl	8008dcc <iprintf>
    hal_status = CC1201_SoftReset(&status_byte);
 8001c28:	1dbb      	adds	r3, r7, #6
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7fe fd3e 	bl	80006ac <CC1201_SoftReset>
 8001c30:	4603      	mov	r3, r0
 8001c32:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d105      	bne.n	8001c46 <test_CC1201_strobe_commands+0x62>
        printf("  Soft Reset Success - Status: 0x%02X\n\r", status_byte);
 8001c3a:	79bb      	ldrb	r3, [r7, #6]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4864      	ldr	r0, [pc, #400]	@ (8001dd0 <test_CC1201_strobe_commands+0x1ec>)
 8001c40:	f007 f8c4 	bl	8008dcc <iprintf>
 8001c44:	e004      	b.n	8001c50 <test_CC1201_strobe_commands+0x6c>
    } else {
        printf("  Soft Reset Failed - HAL Status: %d\n\r", hal_status);
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4862      	ldr	r0, [pc, #392]	@ (8001dd4 <test_CC1201_strobe_commands+0x1f0>)
 8001c4c:	f007 f8be 	bl	8008dcc <iprintf>
    }
    
    HAL_Delay(100); // Wait after reset
 8001c50:	2064      	movs	r0, #100	@ 0x64
 8001c52:	f001 f98f 	bl	8002f74 <HAL_Delay>
    
    // Test 3: Enter Idle Mode
    printf("Test 3: Enter Idle Mode\n\r");
 8001c56:	4860      	ldr	r0, [pc, #384]	@ (8001dd8 <test_CC1201_strobe_commands+0x1f4>)
 8001c58:	f007 f8b8 	bl	8008dcc <iprintf>
    hal_status = CC1201_EnterIdleMode(&status_byte);
 8001c5c:	1dbb      	adds	r3, r7, #6
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe fd65 	bl	800072e <CC1201_EnterIdleMode>
 8001c64:	4603      	mov	r3, r0
 8001c66:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d105      	bne.n	8001c7a <test_CC1201_strobe_commands+0x96>
        printf("  Enter Idle Success - Status: 0x%02X\n\r", status_byte);
 8001c6e:	79bb      	ldrb	r3, [r7, #6]
 8001c70:	4619      	mov	r1, r3
 8001c72:	485a      	ldr	r0, [pc, #360]	@ (8001ddc <test_CC1201_strobe_commands+0x1f8>)
 8001c74:	f007 f8aa 	bl	8008dcc <iprintf>
 8001c78:	e004      	b.n	8001c84 <test_CC1201_strobe_commands+0xa0>
    } else {
        printf("  Enter Idle Failed - HAL Status: %d\n\r", hal_status);
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4858      	ldr	r0, [pc, #352]	@ (8001de0 <test_CC1201_strobe_commands+0x1fc>)
 8001c80:	f007 f8a4 	bl	8008dcc <iprintf>
    }
    
    // Test 4: Read MARC State
    printf("Test 4: Read MARC State\n\r");
 8001c84:	4857      	ldr	r0, [pc, #348]	@ (8001de4 <test_CC1201_strobe_commands+0x200>)
 8001c86:	f007 f8a1 	bl	8008dcc <iprintf>
    uint8_t marc_state = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	717b      	strb	r3, [r7, #5]
    hal_status = CC1201_ReadMARCState(&marc_state);
 8001c8e:	1d7b      	adds	r3, r7, #5
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe fe3d 	bl	8000910 <CC1201_ReadMARCState>
 8001c96:	4603      	mov	r3, r0
 8001c98:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d105      	bne.n	8001cac <test_CC1201_strobe_commands+0xc8>
        printf("  MARC State: 0x%02X\n\r", marc_state);
 8001ca0:	797b      	ldrb	r3, [r7, #5]
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4850      	ldr	r0, [pc, #320]	@ (8001de8 <test_CC1201_strobe_commands+0x204>)
 8001ca6:	f007 f891 	bl	8008dcc <iprintf>
 8001caa:	e004      	b.n	8001cb6 <test_CC1201_strobe_commands+0xd2>
    } else {
        printf("  Read MARC State Failed - HAL Status: %d\n\r", hal_status);
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	4619      	mov	r1, r3
 8001cb0:	484e      	ldr	r0, [pc, #312]	@ (8001dec <test_CC1201_strobe_commands+0x208>)
 8001cb2:	f007 f88b 	bl	8008dcc <iprintf>
    }
    
    // Test 5: Calibrate Frequency Synthesizer
    printf("Test 5: Calibrate Frequency Synthesizer\n\r");
 8001cb6:	484e      	ldr	r0, [pc, #312]	@ (8001df0 <test_CC1201_strobe_commands+0x20c>)
 8001cb8:	f007 f888 	bl	8008dcc <iprintf>
    hal_status = CC1201_CalFreqSynth(&status_byte);
 8001cbc:	1dbb      	adds	r3, r7, #6
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7fe fd0e 	bl	80006e0 <CC1201_CalFreqSynth>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d105      	bne.n	8001cda <test_CC1201_strobe_commands+0xf6>
        printf("  Cal Freq Synth Success - Status: 0x%02X\n\r", status_byte);
 8001cce:	79bb      	ldrb	r3, [r7, #6]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4848      	ldr	r0, [pc, #288]	@ (8001df4 <test_CC1201_strobe_commands+0x210>)
 8001cd4:	f007 f87a 	bl	8008dcc <iprintf>
 8001cd8:	e004      	b.n	8001ce4 <test_CC1201_strobe_commands+0x100>
    } else {
        printf("  Cal Freq Synth Failed - HAL Status: %d\n\r", hal_status);
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4846      	ldr	r0, [pc, #280]	@ (8001df8 <test_CC1201_strobe_commands+0x214>)
 8001ce0:	f007 f874 	bl	8008dcc <iprintf>
    }
    
    // Test 6: Enter RX Mode
    printf("Test 6: Enter RX Mode\n\r");
 8001ce4:	4845      	ldr	r0, [pc, #276]	@ (8001dfc <test_CC1201_strobe_commands+0x218>)
 8001ce6:	f007 f871 	bl	8008dcc <iprintf>
    hal_status = CC1201_EnterRxMode(&status_byte);
 8001cea:	1dbb      	adds	r3, r7, #6
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fd04 	bl	80006fa <CC1201_EnterRxMode>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d105      	bne.n	8001d08 <test_CC1201_strobe_commands+0x124>
        printf("  Enter RX Success - Status: 0x%02X\n\r", status_byte);
 8001cfc:	79bb      	ldrb	r3, [r7, #6]
 8001cfe:	4619      	mov	r1, r3
 8001d00:	483f      	ldr	r0, [pc, #252]	@ (8001e00 <test_CC1201_strobe_commands+0x21c>)
 8001d02:	f007 f863 	bl	8008dcc <iprintf>
 8001d06:	e004      	b.n	8001d12 <test_CC1201_strobe_commands+0x12e>
    } else {
        printf("  Enter RX Failed - HAL Status: %d\n\r", hal_status);
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	483d      	ldr	r0, [pc, #244]	@ (8001e04 <test_CC1201_strobe_commands+0x220>)
 8001d0e:	f007 f85d 	bl	8008dcc <iprintf>
    }
    
    HAL_Delay(10);
 8001d12:	200a      	movs	r0, #10
 8001d14:	f001 f92e 	bl	8002f74 <HAL_Delay>
    
    // Test 7: Read MARC State again
    printf("Test 7: Read MARC State (after RX)\n\r");
 8001d18:	483b      	ldr	r0, [pc, #236]	@ (8001e08 <test_CC1201_strobe_commands+0x224>)
 8001d1a:	f007 f857 	bl	8008dcc <iprintf>
    hal_status = CC1201_ReadMARCState(&marc_state);
 8001d1e:	1d7b      	adds	r3, r7, #5
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe fdf5 	bl	8000910 <CC1201_ReadMARCState>
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d105      	bne.n	8001d3c <test_CC1201_strobe_commands+0x158>
        printf("  MARC State: 0x%02X\n\r", marc_state);
 8001d30:	797b      	ldrb	r3, [r7, #5]
 8001d32:	4619      	mov	r1, r3
 8001d34:	482c      	ldr	r0, [pc, #176]	@ (8001de8 <test_CC1201_strobe_commands+0x204>)
 8001d36:	f007 f849 	bl	8008dcc <iprintf>
 8001d3a:	e004      	b.n	8001d46 <test_CC1201_strobe_commands+0x162>
    } else {
        printf("  Read MARC State Failed - HAL Status: %d\n\r", hal_status);
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	4619      	mov	r1, r3
 8001d40:	482a      	ldr	r0, [pc, #168]	@ (8001dec <test_CC1201_strobe_commands+0x208>)
 8001d42:	f007 f843 	bl	8008dcc <iprintf>
    }
    
    // Test 8: Flush RX FIFO
    printf("Test 8: Flush RX FIFO\n\r");
 8001d46:	4831      	ldr	r0, [pc, #196]	@ (8001e0c <test_CC1201_strobe_commands+0x228>)
 8001d48:	f007 f840 	bl	8008dcc <iprintf>
    hal_status = CC1201_FlushRxFifo(&status_byte);
 8001d4c:	1dbb      	adds	r3, r7, #6
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe fd21 	bl	8000796 <CC1201_FlushRxFifo>
 8001d54:	4603      	mov	r3, r0
 8001d56:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d105      	bne.n	8001d6a <test_CC1201_strobe_commands+0x186>
        printf("  Flush RX FIFO Success - Status: 0x%02X\n\r", status_byte);
 8001d5e:	79bb      	ldrb	r3, [r7, #6]
 8001d60:	4619      	mov	r1, r3
 8001d62:	482b      	ldr	r0, [pc, #172]	@ (8001e10 <test_CC1201_strobe_commands+0x22c>)
 8001d64:	f007 f832 	bl	8008dcc <iprintf>
 8001d68:	e004      	b.n	8001d74 <test_CC1201_strobe_commands+0x190>
    } else {
        printf("  Flush RX FIFO Failed - HAL Status: %d\n\r", hal_status);
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4829      	ldr	r0, [pc, #164]	@ (8001e14 <test_CC1201_strobe_commands+0x230>)
 8001d70:	f007 f82c 	bl	8008dcc <iprintf>
    }
    
    // Test 9: Check RX bytes
    printf("Test 9: Check RX Bytes\n\r");
 8001d74:	4828      	ldr	r0, [pc, #160]	@ (8001e18 <test_CC1201_strobe_commands+0x234>)
 8001d76:	f007 f829 	bl	8008dcc <iprintf>
    uint8_t rx_bytes = 0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	713b      	strb	r3, [r7, #4]
    hal_status = CC1201_GetNumRXBytes(&rx_bytes);
 8001d7e:	1d3b      	adds	r3, r7, #4
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe fdd3 	bl	800092c <CC1201_GetNumRXBytes>
 8001d86:	4603      	mov	r3, r0
 8001d88:	71fb      	strb	r3, [r7, #7]
    if (hal_status == HAL_OK) {
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d105      	bne.n	8001d9c <test_CC1201_strobe_commands+0x1b8>
        printf("  RX Bytes: %d\n\r", rx_bytes);
 8001d90:	793b      	ldrb	r3, [r7, #4]
 8001d92:	4619      	mov	r1, r3
 8001d94:	4821      	ldr	r0, [pc, #132]	@ (8001e1c <test_CC1201_strobe_commands+0x238>)
 8001d96:	f007 f819 	bl	8008dcc <iprintf>
 8001d9a:	e004      	b.n	8001da6 <test_CC1201_strobe_commands+0x1c2>
    } else {
        printf("  Get RX Bytes Failed - HAL Status: %d\n\r", hal_status);
 8001d9c:	79fb      	ldrb	r3, [r7, #7]
 8001d9e:	4619      	mov	r1, r3
 8001da0:	481f      	ldr	r0, [pc, #124]	@ (8001e20 <test_CC1201_strobe_commands+0x23c>)
 8001da2:	f007 f813 	bl	8008dcc <iprintf>
    }
    
    printf("CC1201 Strobe Command Tests Complete!\n\r");
 8001da6:	481f      	ldr	r0, [pc, #124]	@ (8001e24 <test_CC1201_strobe_commands+0x240>)
 8001da8:	f007 f810 	bl	8008dcc <iprintf>
    printf("========================================\n\r");
 8001dac:	481e      	ldr	r0, [pc, #120]	@ (8001e28 <test_CC1201_strobe_commands+0x244>)
 8001dae:	f007 f80d 	bl	8008dcc <iprintf>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	0800ac84 	.word	0x0800ac84
 8001dc0:	0800acb0 	.word	0x0800acb0
 8001dc4:	0800acc8 	.word	0x0800acc8
 8001dc8:	0800acec 	.word	0x0800acec
 8001dcc:	0800ad0c 	.word	0x0800ad0c
 8001dd0:	0800ad24 	.word	0x0800ad24
 8001dd4:	0800ad4c 	.word	0x0800ad4c
 8001dd8:	0800ad74 	.word	0x0800ad74
 8001ddc:	0800ad90 	.word	0x0800ad90
 8001de0:	0800adb8 	.word	0x0800adb8
 8001de4:	0800ade0 	.word	0x0800ade0
 8001de8:	0800a024 	.word	0x0800a024
 8001dec:	0800adfc 	.word	0x0800adfc
 8001df0:	0800ae28 	.word	0x0800ae28
 8001df4:	0800ae54 	.word	0x0800ae54
 8001df8:	0800ae80 	.word	0x0800ae80
 8001dfc:	0800aeac 	.word	0x0800aeac
 8001e00:	0800aec4 	.word	0x0800aec4
 8001e04:	0800aeec 	.word	0x0800aeec
 8001e08:	0800af14 	.word	0x0800af14
 8001e0c:	0800af3c 	.word	0x0800af3c
 8001e10:	0800af54 	.word	0x0800af54
 8001e14:	0800af80 	.word	0x0800af80
 8001e18:	0800afac 	.word	0x0800afac
 8001e1c:	0800afc8 	.word	0x0800afc8
 8001e20:	0800afdc 	.word	0x0800afdc
 8001e24:	0800b008 	.word	0x0800b008
 8001e28:	0800b030 	.word	0x0800b030

08001e2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001e32:	f000 fa91 	bl	8002358 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e36:	f001 f80b 	bl	8002e50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e3a:	f000 f8e9 	bl	8002010 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e3e:	f000 fa11 	bl	8002264 <MX_GPIO_Init>
  MX_SPI4_Init();
 8001e42:	f000 f9b9 	bl	80021b8 <MX_SPI4_Init>
  MX_SPI2_Init();
 8001e46:	f000 f961 	bl	800210c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  
  // Test GPIO pins first
  test_GPIO_pins();
 8001e4a:	f7ff fde9 	bl	8001a20 <test_GPIO_pins>
  
  // Initialize and test CC1201 communication
  printf("Starting CC1201 initialization...\n\r");
 8001e4e:	4864      	ldr	r0, [pc, #400]	@ (8001fe0 <main+0x1b4>)
 8001e50:	f006 ffbc 	bl	8008dcc <iprintf>
  HAL_Delay(100); // Give CC1201 time to power up
 8001e54:	2064      	movs	r0, #100	@ 0x64
 8001e56:	f001 f88d 	bl	8002f74 <HAL_Delay>
  
  if (initialize_CC1201() == HAL_OK) {
 8001e5a:	f7ff fe5f 	bl	8001b1c <initialize_CC1201>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d106      	bne.n	8001e72 <main+0x46>
      printf("CC1201 initialization successful!\n\r");
 8001e64:	485f      	ldr	r0, [pc, #380]	@ (8001fe4 <main+0x1b8>)
 8001e66:	f006 ffb1 	bl	8008dcc <iprintf>
      BSP_LED_On(LED_GREEN);
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	f000 fe10 	bl	8002a90 <BSP_LED_On>
 8001e70:	e005      	b.n	8001e7e <main+0x52>
  } else {
      printf("CC1201 initialization failed!\n\r");
 8001e72:	485d      	ldr	r0, [pc, #372]	@ (8001fe8 <main+0x1bc>)
 8001e74:	f006 ffaa 	bl	8008dcc <iprintf>
      BSP_LED_On(LED_RED);
 8001e78:	2002      	movs	r0, #2
 8001e7a:	f000 fe09 	bl	8002a90 <BSP_LED_On>
  }
  
  // Run initial strobe command tests
  test_CC1201_strobe_commands();
 8001e7e:	f7ff feb1 	bl	8001be4 <test_CC1201_strobe_commands>

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8001e82:	2000      	movs	r0, #0
 8001e84:	f000 fd8e 	bl	80029a4 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8001e88:	2001      	movs	r0, #1
 8001e8a:	f000 fd8b 	bl	80029a4 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8001e8e:	2002      	movs	r0, #2
 8001e90:	f000 fd88 	bl	80029a4 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8001e94:	2101      	movs	r1, #1
 8001e96:	2000      	movs	r0, #0
 8001e98:	f000 fe78 	bl	8002b8c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8001e9c:	4b53      	ldr	r3, [pc, #332]	@ (8001fec <main+0x1c0>)
 8001e9e:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ea2:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8001ea4:	4b51      	ldr	r3, [pc, #324]	@ (8001fec <main+0x1c0>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8001eaa:	4b50      	ldr	r3, [pc, #320]	@ (8001fec <main+0x1c0>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8001eb0:	4b4e      	ldr	r3, [pc, #312]	@ (8001fec <main+0x1c0>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8001eb6:	4b4d      	ldr	r3, [pc, #308]	@ (8001fec <main+0x1c0>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8001ebc:	494b      	ldr	r1, [pc, #300]	@ (8001fec <main+0x1c0>)
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f000 fee8 	bl	8002c94 <BSP_COM_Init>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <main+0xa2>
  {
    Error_Handler();
 8001eca:	f000 fa85 	bl	80023d8 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8001ece:	4848      	ldr	r0, [pc, #288]	@ (8001ff0 <main+0x1c4>)
 8001ed0:	f006 ff7c 	bl	8008dcc <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	f000 fddb 	bl	8002a90 <BSP_LED_On>
  BSP_LED_On(LED_YELLOW);
 8001eda:	2001      	movs	r0, #1
 8001edc:	f000 fdd8 	bl	8002a90 <BSP_LED_On>
  BSP_LED_On(LED_RED);
 8001ee0:	2002      	movs	r0, #2
 8001ee2:	f000 fdd5 	bl	8002a90 <BSP_LED_On>

  /* USER CODE END BSP */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t last_comprehensive_test = 0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
  uint32_t last_quick_test = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	60bb      	str	r3, [r7, #8]
  uint32_t test_counter = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	607b      	str	r3, [r7, #4]
  
  printf("\n🚀 STARTING COMPREHENSIVE CC1201 TEST MODE 🚀\n\r");
 8001ef2:	4840      	ldr	r0, [pc, #256]	@ (8001ff4 <main+0x1c8>)
 8001ef4:	f006 ff6a 	bl	8008dcc <iprintf>
  
  while (1)
  {

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 8001ef8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ff8 <main+0x1cc>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d110      	bne.n	8001f22 <main+0xf6>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 8001f00:	4b3d      	ldr	r3, [pc, #244]	@ (8001ff8 <main+0x1cc>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle leds ---- */
      BSP_LED_Toggle(LED_GREEN);
 8001f06:	2000      	movs	r0, #0
 8001f08:	f000 fe16 	bl	8002b38 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_YELLOW);
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	f000 fe13 	bl	8002b38 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_RED);
 8001f12:	2002      	movs	r0, #2
 8001f14:	f000 fe10 	bl	8002b38 <BSP_LED_Toggle>

      /* ..... Perform your action ..... */
      printf("\n[BUTTON] Manual comprehensive test triggered...\n\r");
 8001f18:	4838      	ldr	r0, [pc, #224]	@ (8001ffc <main+0x1d0>)
 8001f1a:	f006 ff57 	bl	8008dcc <iprintf>
      run_comprehensive_cc1201_test();
 8001f1e:	f7ff fd43 	bl	80019a8 <run_comprehensive_cc1201_test>
    }
    
    // Run comprehensive test every 30 seconds
    if (HAL_GetTick() - last_comprehensive_test > 30000) {
 8001f22:	f001 f81b 	bl	8002f5c <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d90e      	bls.n	8001f52 <main+0x126>
      printf("\n[%lu] 🔄 Running Comprehensive Test Cycle %lu\n\r", HAL_GetTick(), ++test_counter);
 8001f34:	f001 f812 	bl	8002f5c <HAL_GetTick>
 8001f38:	4601      	mov	r1, r0
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	607b      	str	r3, [r7, #4]
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	482f      	ldr	r0, [pc, #188]	@ (8002000 <main+0x1d4>)
 8001f44:	f006 ff42 	bl	8008dcc <iprintf>
      run_comprehensive_cc1201_test();
 8001f48:	f7ff fd2e 	bl	80019a8 <run_comprehensive_cc1201_test>
      last_comprehensive_test = HAL_GetTick();
 8001f4c:	f001 f806 	bl	8002f5c <HAL_GetTick>
 8001f50:	60f8      	str	r0, [r7, #12]
    }
    
    // Quick status check every 3 seconds
    if (HAL_GetTick() - last_quick_test > 3000) {
 8001f52:	f001 f803 	bl	8002f5c <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d938      	bls.n	8001fd6 <main+0x1aa>
      uint8_t status_byte = 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	707b      	strb	r3, [r7, #1]
      HAL_StatusTypeDef hal_status = CC1201_Nop(&status_byte);
 8001f68:	1c7b      	adds	r3, r7, #1
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7fe fc3a 	bl	80007e4 <CC1201_Nop>
 8001f70:	4603      	mov	r3, r0
 8001f72:	70fb      	strb	r3, [r7, #3]
      
      printf("[%lu] Quick Status: ", HAL_GetTick());
 8001f74:	f000 fff2 	bl	8002f5c <HAL_GetTick>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4821      	ldr	r0, [pc, #132]	@ (8002004 <main+0x1d8>)
 8001f7e:	f006 ff25 	bl	8008dcc <iprintf>
      if (hal_status == HAL_OK) {
 8001f82:	78fb      	ldrb	r3, [r7, #3]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d118      	bne.n	8001fba <main+0x18e>
        print_cc1201_status(status_byte, "NOP");
 8001f88:	787b      	ldrb	r3, [r7, #1]
 8001f8a:	491f      	ldr	r1, [pc, #124]	@ (8002008 <main+0x1dc>)
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7fe ff13 	bl	8000db8 <print_cc1201_status>
        
        // Update LEDs based on status
        uint8_t radio_state = (status_byte >> 4) & 0x0F;
 8001f92:	787b      	ldrb	r3, [r7, #1]
 8001f94:	091b      	lsrs	r3, r3, #4
 8001f96:	70bb      	strb	r3, [r7, #2]
        if (radio_state == 0x0) {  // IDLE state expected
 8001f98:	78bb      	ldrb	r3, [r7, #2]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d106      	bne.n	8001fac <main+0x180>
          BSP_LED_On(LED_GREEN);
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	f000 fd76 	bl	8002a90 <BSP_LED_On>
          BSP_LED_Off(LED_RED);
 8001fa4:	2002      	movs	r0, #2
 8001fa6:	f000 fd9d 	bl	8002ae4 <BSP_LED_Off>
 8001faa:	e011      	b.n	8001fd0 <main+0x1a4>
        } else {
          BSP_LED_Off(LED_GREEN);
 8001fac:	2000      	movs	r0, #0
 8001fae:	f000 fd99 	bl	8002ae4 <BSP_LED_Off>
          BSP_LED_On(LED_YELLOW);  // Unexpected state
 8001fb2:	2001      	movs	r0, #1
 8001fb4:	f000 fd6c 	bl	8002a90 <BSP_LED_On>
 8001fb8:	e00a      	b.n	8001fd0 <main+0x1a4>
        }
      } else {
        printf("COMMUNICATION ERROR - HAL: %d\n\r", hal_status);
 8001fba:	78fb      	ldrb	r3, [r7, #3]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4813      	ldr	r0, [pc, #76]	@ (800200c <main+0x1e0>)
 8001fc0:	f006 ff04 	bl	8008dcc <iprintf>
        BSP_LED_Off(LED_GREEN);
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	f000 fd8d 	bl	8002ae4 <BSP_LED_Off>
        BSP_LED_On(LED_RED);
 8001fca:	2002      	movs	r0, #2
 8001fcc:	f000 fd60 	bl	8002a90 <BSP_LED_On>
      }
      
      last_quick_test = HAL_GetTick();
 8001fd0:	f000 ffc4 	bl	8002f5c <HAL_GetTick>
 8001fd4:	60b8      	str	r0, [r7, #8]
    }
    
    HAL_Delay(100); // Small delay to prevent overwhelming output
 8001fd6:	2064      	movs	r0, #100	@ 0x64
 8001fd8:	f000 ffcc 	bl	8002f74 <HAL_Delay>
    if (BspButtonState == BUTTON_PRESSED)
 8001fdc:	e78c      	b.n	8001ef8 <main+0xcc>
 8001fde:	bf00      	nop
 8001fe0:	0800b05c 	.word	0x0800b05c
 8001fe4:	0800b080 	.word	0x0800b080
 8001fe8:	0800b0a4 	.word	0x0800b0a4
 8001fec:	240000a4 	.word	0x240000a4
 8001ff0:	0800b0c4 	.word	0x0800b0c4
 8001ff4:	0800b0e0 	.word	0x0800b0e0
 8001ff8:	240000b4 	.word	0x240000b4
 8001ffc:	0800b118 	.word	0x0800b118
 8002000:	0800b14c 	.word	0x0800b14c
 8002004:	0800b180 	.word	0x0800b180
 8002008:	08009c08 	.word	0x08009c08
 800200c:	0800b198 	.word	0x0800b198

08002010 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b09c      	sub	sp, #112	@ 0x70
 8002014:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002016:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800201a:	224c      	movs	r2, #76	@ 0x4c
 800201c:	2100      	movs	r1, #0
 800201e:	4618      	mov	r0, r3
 8002020:	f006 ff29 	bl	8008e76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002024:	1d3b      	adds	r3, r7, #4
 8002026:	2220      	movs	r2, #32
 8002028:	2100      	movs	r1, #0
 800202a:	4618      	mov	r0, r3
 800202c:	f006 ff23 	bl	8008e76 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002030:	2002      	movs	r0, #2
 8002032:	f001 fdfd 	bl	8003c30 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002036:	2300      	movs	r3, #0
 8002038:	603b      	str	r3, [r7, #0]
 800203a:	4b32      	ldr	r3, [pc, #200]	@ (8002104 <SystemClock_Config+0xf4>)
 800203c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800203e:	4a31      	ldr	r2, [pc, #196]	@ (8002104 <SystemClock_Config+0xf4>)
 8002040:	f023 0301 	bic.w	r3, r3, #1
 8002044:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002046:	4b2f      	ldr	r3, [pc, #188]	@ (8002104 <SystemClock_Config+0xf4>)
 8002048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	4b2d      	ldr	r3, [pc, #180]	@ (8002108 <SystemClock_Config+0xf8>)
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002058:	4a2b      	ldr	r2, [pc, #172]	@ (8002108 <SystemClock_Config+0xf8>)
 800205a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800205e:	6193      	str	r3, [r2, #24]
 8002060:	4b29      	ldr	r3, [pc, #164]	@ (8002108 <SystemClock_Config+0xf8>)
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002068:	603b      	str	r3, [r7, #0]
 800206a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800206c:	bf00      	nop
 800206e:	4b26      	ldr	r3, [pc, #152]	@ (8002108 <SystemClock_Config+0xf8>)
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002076:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800207a:	d1f8      	bne.n	800206e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800207c:	2302      	movs	r3, #2
 800207e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002080:	2301      	movs	r3, #1
 8002082:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002084:	2340      	movs	r3, #64	@ 0x40
 8002086:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002088:	2302      	movs	r3, #2
 800208a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800208c:	2300      	movs	r3, #0
 800208e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002090:	2304      	movs	r3, #4
 8002092:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002094:	230a      	movs	r3, #10
 8002096:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002098:	2302      	movs	r3, #2
 800209a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800209c:	2302      	movs	r3, #2
 800209e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80020a0:	2302      	movs	r3, #2
 80020a2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80020a4:	230c      	movs	r3, #12
 80020a6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80020a8:	2302      	movs	r3, #2
 80020aa:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020b4:	4618      	mov	r0, r3
 80020b6:	f001 fdf5 	bl	8003ca4 <HAL_RCC_OscConfig>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80020c0:	f000 f98a 	bl	80023d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020c4:	233f      	movs	r3, #63	@ 0x3f
 80020c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80020c8:	2300      	movs	r3, #0
 80020ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80020cc:	2300      	movs	r3, #0
 80020ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80020d0:	2300      	movs	r3, #0
 80020d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80020d8:	2300      	movs	r3, #0
 80020da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80020dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80020e2:	2300      	movs	r3, #0
 80020e4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80020e6:	1d3b      	adds	r3, r7, #4
 80020e8:	2101      	movs	r1, #1
 80020ea:	4618      	mov	r0, r3
 80020ec:	f002 fa34 	bl	8004558 <HAL_RCC_ClockConfig>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <SystemClock_Config+0xea>
  {
    Error_Handler();
 80020f6:	f000 f96f 	bl	80023d8 <Error_Handler>
  }
}
 80020fa:	bf00      	nop
 80020fc:	3770      	adds	r7, #112	@ 0x70
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	58000400 	.word	0x58000400
 8002108:	58024800 	.word	0x58024800

0800210c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002110:	4b27      	ldr	r3, [pc, #156]	@ (80021b0 <MX_SPI2_Init+0xa4>)
 8002112:	4a28      	ldr	r2, [pc, #160]	@ (80021b4 <MX_SPI2_Init+0xa8>)
 8002114:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002116:	4b26      	ldr	r3, [pc, #152]	@ (80021b0 <MX_SPI2_Init+0xa4>)
 8002118:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800211c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800211e:	4b24      	ldr	r3, [pc, #144]	@ (80021b0 <MX_SPI2_Init+0xa4>)
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002124:	4b22      	ldr	r3, [pc, #136]	@ (80021b0 <MX_SPI2_Init+0xa4>)
 8002126:	2203      	movs	r2, #3
 8002128:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800212a:	4b21      	ldr	r3, [pc, #132]	@ (80021b0 <MX_SPI2_Init+0xa4>)
 800212c:	2200      	movs	r2, #0
 800212e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002130:	4b1f      	ldr	r3, [pc, #124]	@ (80021b0 <MX_SPI2_Init+0xa4>)
 8002132:	2200      	movs	r2, #0
 8002134:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002136:	4b1e      	ldr	r3, [pc, #120]	@ (80021b0 <MX_SPI2_Init+0xa4>)
 8002138:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800213c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800213e:	4b1c      	ldr	r3, [pc, #112]	@ (80021b0 <MX_SPI2_Init+0xa4>)
 8002140:	2200      	movs	r2, #0
 8002142:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002144:	4b1a      	ldr	r3, [pc, #104]	@ (80021b0 <MX_SPI2_Init+0xa4>)
 8002146:	2200      	movs	r2, #0
 8002148:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800214a:	4b19      	ldr	r3, [pc, #100]	@ (80021b0 <MX_SPI2_Init+0xa4>)
 800214c:	2200      	movs	r2, #0
 800214e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002150:	4b17      	ldr	r3, [pc, #92]	@ (80021b0 <MX_SPI2_Init+0xa4>)
 8002152:	2200      	movs	r2, #0
 8002154:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002156:	4b16      	ldr	r3, [pc, #88]	@ (80021b0 <MX_SPI2_Init+0xa4>)
 8002158:	2200      	movs	r2, #0
 800215a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800215c:	4b14      	ldr	r3, [pc, #80]	@ (80021b0 <MX_SPI2_Init+0xa4>)
 800215e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002162:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002164:	4b12      	ldr	r3, [pc, #72]	@ (80021b0 <MX_SPI2_Init+0xa4>)
 8002166:	2200      	movs	r2, #0
 8002168:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800216a:	4b11      	ldr	r3, [pc, #68]	@ (80021b0 <MX_SPI2_Init+0xa4>)
 800216c:	2200      	movs	r2, #0
 800216e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002170:	4b0f      	ldr	r3, [pc, #60]	@ (80021b0 <MX_SPI2_Init+0xa4>)
 8002172:	2200      	movs	r2, #0
 8002174:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002176:	4b0e      	ldr	r3, [pc, #56]	@ (80021b0 <MX_SPI2_Init+0xa4>)
 8002178:	2200      	movs	r2, #0
 800217a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800217c:	4b0c      	ldr	r3, [pc, #48]	@ (80021b0 <MX_SPI2_Init+0xa4>)
 800217e:	2200      	movs	r2, #0
 8002180:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002182:	4b0b      	ldr	r3, [pc, #44]	@ (80021b0 <MX_SPI2_Init+0xa4>)
 8002184:	2200      	movs	r2, #0
 8002186:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002188:	4b09      	ldr	r3, [pc, #36]	@ (80021b0 <MX_SPI2_Init+0xa4>)
 800218a:	2200      	movs	r2, #0
 800218c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800218e:	4b08      	ldr	r3, [pc, #32]	@ (80021b0 <MX_SPI2_Init+0xa4>)
 8002190:	2200      	movs	r2, #0
 8002192:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002194:	4b06      	ldr	r3, [pc, #24]	@ (80021b0 <MX_SPI2_Init+0xa4>)
 8002196:	2200      	movs	r2, #0
 8002198:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800219a:	4805      	ldr	r0, [pc, #20]	@ (80021b0 <MX_SPI2_Init+0xa4>)
 800219c:	f004 fb94 	bl	80068c8 <HAL_SPI_Init>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 80021a6:	f000 f917 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	240000b8 	.word	0x240000b8
 80021b4:	40003800 	.word	0x40003800

080021b8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80021bc:	4b27      	ldr	r3, [pc, #156]	@ (800225c <MX_SPI4_Init+0xa4>)
 80021be:	4a28      	ldr	r2, [pc, #160]	@ (8002260 <MX_SPI4_Init+0xa8>)
 80021c0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80021c2:	4b26      	ldr	r3, [pc, #152]	@ (800225c <MX_SPI4_Init+0xa4>)
 80021c4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80021c8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80021ca:	4b24      	ldr	r3, [pc, #144]	@ (800225c <MX_SPI4_Init+0xa4>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 80021d0:	4b22      	ldr	r3, [pc, #136]	@ (800225c <MX_SPI4_Init+0xa4>)
 80021d2:	2203      	movs	r2, #3
 80021d4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021d6:	4b21      	ldr	r3, [pc, #132]	@ (800225c <MX_SPI4_Init+0xa4>)
 80021d8:	2200      	movs	r2, #0
 80021da:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021dc:	4b1f      	ldr	r3, [pc, #124]	@ (800225c <MX_SPI4_Init+0xa4>)
 80021de:	2200      	movs	r2, #0
 80021e0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80021e2:	4b1e      	ldr	r3, [pc, #120]	@ (800225c <MX_SPI4_Init+0xa4>)
 80021e4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80021e8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021ea:	4b1c      	ldr	r3, [pc, #112]	@ (800225c <MX_SPI4_Init+0xa4>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021f0:	4b1a      	ldr	r3, [pc, #104]	@ (800225c <MX_SPI4_Init+0xa4>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80021f6:	4b19      	ldr	r3, [pc, #100]	@ (800225c <MX_SPI4_Init+0xa4>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021fc:	4b17      	ldr	r3, [pc, #92]	@ (800225c <MX_SPI4_Init+0xa4>)
 80021fe:	2200      	movs	r2, #0
 8002200:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8002202:	4b16      	ldr	r3, [pc, #88]	@ (800225c <MX_SPI4_Init+0xa4>)
 8002204:	2200      	movs	r2, #0
 8002206:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002208:	4b14      	ldr	r3, [pc, #80]	@ (800225c <MX_SPI4_Init+0xa4>)
 800220a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800220e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002210:	4b12      	ldr	r3, [pc, #72]	@ (800225c <MX_SPI4_Init+0xa4>)
 8002212:	2200      	movs	r2, #0
 8002214:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002216:	4b11      	ldr	r3, [pc, #68]	@ (800225c <MX_SPI4_Init+0xa4>)
 8002218:	2200      	movs	r2, #0
 800221a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800221c:	4b0f      	ldr	r3, [pc, #60]	@ (800225c <MX_SPI4_Init+0xa4>)
 800221e:	2200      	movs	r2, #0
 8002220:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002222:	4b0e      	ldr	r3, [pc, #56]	@ (800225c <MX_SPI4_Init+0xa4>)
 8002224:	2200      	movs	r2, #0
 8002226:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002228:	4b0c      	ldr	r3, [pc, #48]	@ (800225c <MX_SPI4_Init+0xa4>)
 800222a:	2200      	movs	r2, #0
 800222c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800222e:	4b0b      	ldr	r3, [pc, #44]	@ (800225c <MX_SPI4_Init+0xa4>)
 8002230:	2200      	movs	r2, #0
 8002232:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002234:	4b09      	ldr	r3, [pc, #36]	@ (800225c <MX_SPI4_Init+0xa4>)
 8002236:	2200      	movs	r2, #0
 8002238:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800223a:	4b08      	ldr	r3, [pc, #32]	@ (800225c <MX_SPI4_Init+0xa4>)
 800223c:	2200      	movs	r2, #0
 800223e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002240:	4b06      	ldr	r3, [pc, #24]	@ (800225c <MX_SPI4_Init+0xa4>)
 8002242:	2200      	movs	r2, #0
 8002244:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002246:	4805      	ldr	r0, [pc, #20]	@ (800225c <MX_SPI4_Init+0xa4>)
 8002248:	f004 fb3e 	bl	80068c8 <HAL_SPI_Init>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8002252:	f000 f8c1 	bl	80023d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	24000140 	.word	0x24000140
 8002260:	40013400 	.word	0x40013400

08002264 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b08c      	sub	sp, #48	@ 0x30
 8002268:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226a:	f107 031c 	add.w	r3, r7, #28
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	605a      	str	r2, [r3, #4]
 8002274:	609a      	str	r2, [r3, #8]
 8002276:	60da      	str	r2, [r3, #12]
 8002278:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800227a:	4b35      	ldr	r3, [pc, #212]	@ (8002350 <MX_GPIO_Init+0xec>)
 800227c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002280:	4a33      	ldr	r2, [pc, #204]	@ (8002350 <MX_GPIO_Init+0xec>)
 8002282:	f043 0310 	orr.w	r3, r3, #16
 8002286:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800228a:	4b31      	ldr	r3, [pc, #196]	@ (8002350 <MX_GPIO_Init+0xec>)
 800228c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002290:	f003 0310 	and.w	r3, r3, #16
 8002294:	61bb      	str	r3, [r7, #24]
 8002296:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002298:	4b2d      	ldr	r3, [pc, #180]	@ (8002350 <MX_GPIO_Init+0xec>)
 800229a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800229e:	4a2c      	ldr	r2, [pc, #176]	@ (8002350 <MX_GPIO_Init+0xec>)
 80022a0:	f043 0304 	orr.w	r3, r3, #4
 80022a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022a8:	4b29      	ldr	r3, [pc, #164]	@ (8002350 <MX_GPIO_Init+0xec>)
 80022aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022ae:	f003 0304 	and.w	r3, r3, #4
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022b6:	4b26      	ldr	r3, [pc, #152]	@ (8002350 <MX_GPIO_Init+0xec>)
 80022b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022bc:	4a24      	ldr	r2, [pc, #144]	@ (8002350 <MX_GPIO_Init+0xec>)
 80022be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022c6:	4b22      	ldr	r3, [pc, #136]	@ (8002350 <MX_GPIO_Init+0xec>)
 80022c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d4:	4b1e      	ldr	r3, [pc, #120]	@ (8002350 <MX_GPIO_Init+0xec>)
 80022d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022da:	4a1d      	ldr	r2, [pc, #116]	@ (8002350 <MX_GPIO_Init+0xec>)
 80022dc:	f043 0302 	orr.w	r3, r3, #2
 80022e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002350 <MX_GPIO_Init+0xec>)
 80022e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f2:	4b17      	ldr	r3, [pc, #92]	@ (8002350 <MX_GPIO_Init+0xec>)
 80022f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022f8:	4a15      	ldr	r2, [pc, #84]	@ (8002350 <MX_GPIO_Init+0xec>)
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002302:	4b13      	ldr	r3, [pc, #76]	@ (8002350 <MX_GPIO_Init+0xec>)
 8002304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002310:	4b0f      	ldr	r3, [pc, #60]	@ (8002350 <MX_GPIO_Init+0xec>)
 8002312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002316:	4a0e      	ldr	r2, [pc, #56]	@ (8002350 <MX_GPIO_Init+0xec>)
 8002318:	f043 0308 	orr.w	r3, r3, #8
 800231c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002320:	4b0b      	ldr	r3, [pc, #44]	@ (8002350 <MX_GPIO_Init+0xec>)
 8002322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	607b      	str	r3, [r7, #4]
 800232c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800232e:	2310      	movs	r3, #16
 8002330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002332:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002336:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002338:	2300      	movs	r3, #0
 800233a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800233c:	f107 031c 	add.w	r3, r7, #28
 8002340:	4619      	mov	r1, r3
 8002342:	4804      	ldr	r0, [pc, #16]	@ (8002354 <MX_GPIO_Init+0xf0>)
 8002344:	f001 fa78 	bl	8003838 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002348:	bf00      	nop
 800234a:	3730      	adds	r7, #48	@ 0x30
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	58024400 	.word	0x58024400
 8002354:	58020c00 	.word	0x58020c00

08002358 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800235e:	463b      	mov	r3, r7
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800236a:	f000 ff43 	bl	80031f4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800236e:	2301      	movs	r3, #1
 8002370:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002372:	2300      	movs	r3, #0
 8002374:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8002376:	2300      	movs	r3, #0
 8002378:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800237a:	231f      	movs	r3, #31
 800237c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800237e:	2387      	movs	r3, #135	@ 0x87
 8002380:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002382:	2300      	movs	r3, #0
 8002384:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002386:	2300      	movs	r3, #0
 8002388:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800238a:	2301      	movs	r3, #1
 800238c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800238e:	2301      	movs	r3, #1
 8002390:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002392:	2300      	movs	r3, #0
 8002394:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002396:	2300      	movs	r3, #0
 8002398:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800239a:	463b      	mov	r3, r7
 800239c:	4618      	mov	r0, r3
 800239e:	f000 ff61 	bl	8003264 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80023a2:	2004      	movs	r0, #4
 80023a4:	f000 ff3e 	bl	8003224 <HAL_MPU_Enable>

}
 80023a8:	bf00      	nop
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d102      	bne.n	80023c6 <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <BSP_PB_Callback+0x24>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	601a      	str	r2, [r3, #0]
  }
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	240000b4 	.word	0x240000b4

080023d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023dc:	b672      	cpsid	i
}
 80023de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023e0:	bf00      	nop
 80023e2:	e7fd      	b.n	80023e0 <Error_Handler+0x8>

080023e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002414 <HAL_MspInit+0x30>)
 80023ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023f0:	4a08      	ldr	r2, [pc, #32]	@ (8002414 <HAL_MspInit+0x30>)
 80023f2:	f043 0302 	orr.w	r3, r3, #2
 80023f6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80023fa:	4b06      	ldr	r3, [pc, #24]	@ (8002414 <HAL_MspInit+0x30>)
 80023fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	607b      	str	r3, [r7, #4]
 8002406:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	58024400 	.word	0x58024400

08002418 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b0bc      	sub	sp, #240	@ 0xf0
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002420:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002430:	f107 0318 	add.w	r3, r7, #24
 8002434:	22c0      	movs	r2, #192	@ 0xc0
 8002436:	2100      	movs	r1, #0
 8002438:	4618      	mov	r0, r3
 800243a:	f006 fd1c 	bl	8008e76 <memset>
  if(hspi->Instance==SPI2)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a69      	ldr	r2, [pc, #420]	@ (80025e8 <HAL_SPI_MspInit+0x1d0>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d164      	bne.n	8002512 <HAL_SPI_MspInit+0xfa>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002448:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800244c:	f04f 0300 	mov.w	r3, #0
 8002450:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002454:	2300      	movs	r3, #0
 8002456:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002458:	f107 0318 	add.w	r3, r7, #24
 800245c:	4618      	mov	r0, r3
 800245e:	f002 fc07 	bl	8004c70 <HAL_RCCEx_PeriphCLKConfig>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002468:	f7ff ffb6 	bl	80023d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800246c:	4b5f      	ldr	r3, [pc, #380]	@ (80025ec <HAL_SPI_MspInit+0x1d4>)
 800246e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002472:	4a5e      	ldr	r2, [pc, #376]	@ (80025ec <HAL_SPI_MspInit+0x1d4>)
 8002474:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002478:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800247c:	4b5b      	ldr	r3, [pc, #364]	@ (80025ec <HAL_SPI_MspInit+0x1d4>)
 800247e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002482:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800248a:	4b58      	ldr	r3, [pc, #352]	@ (80025ec <HAL_SPI_MspInit+0x1d4>)
 800248c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002490:	4a56      	ldr	r2, [pc, #344]	@ (80025ec <HAL_SPI_MspInit+0x1d4>)
 8002492:	f043 0302 	orr.w	r3, r3, #2
 8002496:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800249a:	4b54      	ldr	r3, [pc, #336]	@ (80025ec <HAL_SPI_MspInit+0x1d4>)
 800249c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	693b      	ldr	r3, [r7, #16]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80024a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024ac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b0:	2302      	movs	r3, #2
 80024b2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024b6:	2301      	movs	r3, #1
 80024b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024bc:	2300      	movs	r3, #0
 80024be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024c2:	2305      	movs	r3, #5
 80024c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024c8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80024cc:	4619      	mov	r1, r3
 80024ce:	4848      	ldr	r0, [pc, #288]	@ (80025f0 <HAL_SPI_MspInit+0x1d8>)
 80024d0:	f001 f9b2 	bl	8003838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80024d4:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80024d8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024dc:	2302      	movs	r3, #2
 80024de:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e8:	2300      	movs	r3, #0
 80024ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024ee:	2305      	movs	r3, #5
 80024f0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024f4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80024f8:	4619      	mov	r1, r3
 80024fa:	483d      	ldr	r0, [pc, #244]	@ (80025f0 <HAL_SPI_MspInit+0x1d8>)
 80024fc:	f001 f99c 	bl	8003838 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002500:	2200      	movs	r2, #0
 8002502:	2100      	movs	r1, #0
 8002504:	2024      	movs	r0, #36	@ 0x24
 8002506:	f000 fe40 	bl	800318a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800250a:	2024      	movs	r0, #36	@ 0x24
 800250c:	f000 fe57 	bl	80031be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002510:	e066      	b.n	80025e0 <HAL_SPI_MspInit+0x1c8>
  else if(hspi->Instance==SPI4)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a37      	ldr	r2, [pc, #220]	@ (80025f4 <HAL_SPI_MspInit+0x1dc>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d161      	bne.n	80025e0 <HAL_SPI_MspInit+0x1c8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 800251c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002520:	f04f 0300 	mov.w	r3, #0
 8002524:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8002528:	2300      	movs	r3, #0
 800252a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800252c:	f107 0318 	add.w	r3, r7, #24
 8002530:	4618      	mov	r0, r3
 8002532:	f002 fb9d 	bl	8004c70 <HAL_RCCEx_PeriphCLKConfig>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <HAL_SPI_MspInit+0x128>
      Error_Handler();
 800253c:	f7ff ff4c 	bl	80023d8 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002540:	4b2a      	ldr	r3, [pc, #168]	@ (80025ec <HAL_SPI_MspInit+0x1d4>)
 8002542:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002546:	4a29      	ldr	r2, [pc, #164]	@ (80025ec <HAL_SPI_MspInit+0x1d4>)
 8002548:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800254c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002550:	4b26      	ldr	r3, [pc, #152]	@ (80025ec <HAL_SPI_MspInit+0x1d4>)
 8002552:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002556:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800255e:	4b23      	ldr	r3, [pc, #140]	@ (80025ec <HAL_SPI_MspInit+0x1d4>)
 8002560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002564:	4a21      	ldr	r2, [pc, #132]	@ (80025ec <HAL_SPI_MspInit+0x1d4>)
 8002566:	f043 0310 	orr.w	r3, r3, #16
 800256a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800256e:	4b1f      	ldr	r3, [pc, #124]	@ (80025ec <HAL_SPI_MspInit+0x1d4>)
 8002570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002574:	f003 0310 	and.w	r3, r3, #16
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800257c:	2364      	movs	r3, #100	@ 0x64
 800257e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002582:	2302      	movs	r3, #2
 8002584:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002588:	2300      	movs	r3, #0
 800258a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258e:	2300      	movs	r3, #0
 8002590:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002594:	2305      	movs	r3, #5
 8002596:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800259a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800259e:	4619      	mov	r1, r3
 80025a0:	4815      	ldr	r0, [pc, #84]	@ (80025f8 <HAL_SPI_MspInit+0x1e0>)
 80025a2:	f001 f949 	bl	8003838 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80025a6:	2310      	movs	r3, #16
 80025a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ac:	2302      	movs	r3, #2
 80025ae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025b2:	2301      	movs	r3, #1
 80025b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b8:	2300      	movs	r3, #0
 80025ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80025be:	2305      	movs	r3, #5
 80025c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025c4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80025c8:	4619      	mov	r1, r3
 80025ca:	480b      	ldr	r0, [pc, #44]	@ (80025f8 <HAL_SPI_MspInit+0x1e0>)
 80025cc:	f001 f934 	bl	8003838 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 80025d0:	2200      	movs	r2, #0
 80025d2:	2100      	movs	r1, #0
 80025d4:	2054      	movs	r0, #84	@ 0x54
 80025d6:	f000 fdd8 	bl	800318a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80025da:	2054      	movs	r0, #84	@ 0x54
 80025dc:	f000 fdef 	bl	80031be <HAL_NVIC_EnableIRQ>
}
 80025e0:	bf00      	nop
 80025e2:	37f0      	adds	r7, #240	@ 0xf0
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40003800 	.word	0x40003800
 80025ec:	58024400 	.word	0x58024400
 80025f0:	58020400 	.word	0x58020400
 80025f4:	40013400 	.word	0x40013400
 80025f8:	58021000 	.word	0x58021000

080025fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002600:	bf00      	nop
 8002602:	e7fd      	b.n	8002600 <NMI_Handler+0x4>

08002604 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002608:	bf00      	nop
 800260a:	e7fd      	b.n	8002608 <HardFault_Handler+0x4>

0800260c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002610:	bf00      	nop
 8002612:	e7fd      	b.n	8002610 <MemManage_Handler+0x4>

08002614 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002618:	bf00      	nop
 800261a:	e7fd      	b.n	8002618 <BusFault_Handler+0x4>

0800261c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002620:	bf00      	nop
 8002622:	e7fd      	b.n	8002620 <UsageFault_Handler+0x4>

08002624 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002632:	b480      	push	{r7}
 8002634:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002644:	bf00      	nop
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002652:	f000 fc6f 	bl	8002f34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
	...

0800265c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002660:	4802      	ldr	r0, [pc, #8]	@ (800266c <SPI2_IRQHandler+0x10>)
 8002662:	f004 ff7d 	bl	8007560 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	240000b8 	.word	0x240000b8

08002670 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8002674:	2000      	movs	r0, #0
 8002676:	f000 fafb 	bl	8002c70 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}
	...

08002680 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8002684:	4802      	ldr	r0, [pc, #8]	@ (8002690 <SPI4_IRQHandler+0x10>)
 8002686:	f004 ff6b 	bl	8007560 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	24000140 	.word	0x24000140

08002694 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]
 80026a4:	e00a      	b.n	80026bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026a6:	f3af 8000 	nop.w
 80026aa:	4601      	mov	r1, r0
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	60ba      	str	r2, [r7, #8]
 80026b2:	b2ca      	uxtb	r2, r1
 80026b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	3301      	adds	r3, #1
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	dbf0      	blt.n	80026a6 <_read+0x12>
  }

  return len;
 80026c4:	687b      	ldr	r3, [r7, #4]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b086      	sub	sp, #24
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	60f8      	str	r0, [r7, #12]
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026da:	2300      	movs	r3, #0
 80026dc:	617b      	str	r3, [r7, #20]
 80026de:	e009      	b.n	80026f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	1c5a      	adds	r2, r3, #1
 80026e4:	60ba      	str	r2, [r7, #8]
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f000 fb35 	bl	8002d58 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	3301      	adds	r3, #1
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	dbf1      	blt.n	80026e0 <_write+0x12>
  }
  return len;
 80026fc:	687b      	ldr	r3, [r7, #4]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <_close>:

int _close(int file)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800270e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002712:	4618      	mov	r0, r3
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
 8002726:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800272e:	605a      	str	r2, [r3, #4]
  return 0;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <_isatty>:

int _isatty(int file)
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002746:	2301      	movs	r3, #1
}
 8002748:	4618      	mov	r0, r3
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3714      	adds	r7, #20
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
	...

08002770 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002778:	4a14      	ldr	r2, [pc, #80]	@ (80027cc <_sbrk+0x5c>)
 800277a:	4b15      	ldr	r3, [pc, #84]	@ (80027d0 <_sbrk+0x60>)
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002784:	4b13      	ldr	r3, [pc, #76]	@ (80027d4 <_sbrk+0x64>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d102      	bne.n	8002792 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800278c:	4b11      	ldr	r3, [pc, #68]	@ (80027d4 <_sbrk+0x64>)
 800278e:	4a12      	ldr	r2, [pc, #72]	@ (80027d8 <_sbrk+0x68>)
 8002790:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002792:	4b10      	ldr	r3, [pc, #64]	@ (80027d4 <_sbrk+0x64>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4413      	add	r3, r2
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	429a      	cmp	r2, r3
 800279e:	d207      	bcs.n	80027b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027a0:	f006 fbb8 	bl	8008f14 <__errno>
 80027a4:	4603      	mov	r3, r0
 80027a6:	220c      	movs	r2, #12
 80027a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027aa:	f04f 33ff 	mov.w	r3, #4294967295
 80027ae:	e009      	b.n	80027c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027b0:	4b08      	ldr	r3, [pc, #32]	@ (80027d4 <_sbrk+0x64>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027b6:	4b07      	ldr	r3, [pc, #28]	@ (80027d4 <_sbrk+0x64>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4413      	add	r3, r2
 80027be:	4a05      	ldr	r2, [pc, #20]	@ (80027d4 <_sbrk+0x64>)
 80027c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027c2:	68fb      	ldr	r3, [r7, #12]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	24080000 	.word	0x24080000
 80027d0:	00000400 	.word	0x00000400
 80027d4:	240001c8 	.word	0x240001c8
 80027d8:	240003c0 	.word	0x240003c0

080027dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80027e0:	4b43      	ldr	r3, [pc, #268]	@ (80028f0 <SystemInit+0x114>)
 80027e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027e6:	4a42      	ldr	r2, [pc, #264]	@ (80028f0 <SystemInit+0x114>)
 80027e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027f0:	4b40      	ldr	r3, [pc, #256]	@ (80028f4 <SystemInit+0x118>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 030f 	and.w	r3, r3, #15
 80027f8:	2b06      	cmp	r3, #6
 80027fa:	d807      	bhi.n	800280c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80027fc:	4b3d      	ldr	r3, [pc, #244]	@ (80028f4 <SystemInit+0x118>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f023 030f 	bic.w	r3, r3, #15
 8002804:	4a3b      	ldr	r2, [pc, #236]	@ (80028f4 <SystemInit+0x118>)
 8002806:	f043 0307 	orr.w	r3, r3, #7
 800280a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800280c:	4b3a      	ldr	r3, [pc, #232]	@ (80028f8 <SystemInit+0x11c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a39      	ldr	r2, [pc, #228]	@ (80028f8 <SystemInit+0x11c>)
 8002812:	f043 0301 	orr.w	r3, r3, #1
 8002816:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002818:	4b37      	ldr	r3, [pc, #220]	@ (80028f8 <SystemInit+0x11c>)
 800281a:	2200      	movs	r2, #0
 800281c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800281e:	4b36      	ldr	r3, [pc, #216]	@ (80028f8 <SystemInit+0x11c>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	4935      	ldr	r1, [pc, #212]	@ (80028f8 <SystemInit+0x11c>)
 8002824:	4b35      	ldr	r3, [pc, #212]	@ (80028fc <SystemInit+0x120>)
 8002826:	4013      	ands	r3, r2
 8002828:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800282a:	4b32      	ldr	r3, [pc, #200]	@ (80028f4 <SystemInit+0x118>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	2b00      	cmp	r3, #0
 8002834:	d007      	beq.n	8002846 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002836:	4b2f      	ldr	r3, [pc, #188]	@ (80028f4 <SystemInit+0x118>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f023 030f 	bic.w	r3, r3, #15
 800283e:	4a2d      	ldr	r2, [pc, #180]	@ (80028f4 <SystemInit+0x118>)
 8002840:	f043 0307 	orr.w	r3, r3, #7
 8002844:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002846:	4b2c      	ldr	r3, [pc, #176]	@ (80028f8 <SystemInit+0x11c>)
 8002848:	2200      	movs	r2, #0
 800284a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800284c:	4b2a      	ldr	r3, [pc, #168]	@ (80028f8 <SystemInit+0x11c>)
 800284e:	2200      	movs	r2, #0
 8002850:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002852:	4b29      	ldr	r3, [pc, #164]	@ (80028f8 <SystemInit+0x11c>)
 8002854:	2200      	movs	r2, #0
 8002856:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002858:	4b27      	ldr	r3, [pc, #156]	@ (80028f8 <SystemInit+0x11c>)
 800285a:	4a29      	ldr	r2, [pc, #164]	@ (8002900 <SystemInit+0x124>)
 800285c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800285e:	4b26      	ldr	r3, [pc, #152]	@ (80028f8 <SystemInit+0x11c>)
 8002860:	4a28      	ldr	r2, [pc, #160]	@ (8002904 <SystemInit+0x128>)
 8002862:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002864:	4b24      	ldr	r3, [pc, #144]	@ (80028f8 <SystemInit+0x11c>)
 8002866:	4a28      	ldr	r2, [pc, #160]	@ (8002908 <SystemInit+0x12c>)
 8002868:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800286a:	4b23      	ldr	r3, [pc, #140]	@ (80028f8 <SystemInit+0x11c>)
 800286c:	2200      	movs	r2, #0
 800286e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002870:	4b21      	ldr	r3, [pc, #132]	@ (80028f8 <SystemInit+0x11c>)
 8002872:	4a25      	ldr	r2, [pc, #148]	@ (8002908 <SystemInit+0x12c>)
 8002874:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002876:	4b20      	ldr	r3, [pc, #128]	@ (80028f8 <SystemInit+0x11c>)
 8002878:	2200      	movs	r2, #0
 800287a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800287c:	4b1e      	ldr	r3, [pc, #120]	@ (80028f8 <SystemInit+0x11c>)
 800287e:	4a22      	ldr	r2, [pc, #136]	@ (8002908 <SystemInit+0x12c>)
 8002880:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002882:	4b1d      	ldr	r3, [pc, #116]	@ (80028f8 <SystemInit+0x11c>)
 8002884:	2200      	movs	r2, #0
 8002886:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002888:	4b1b      	ldr	r3, [pc, #108]	@ (80028f8 <SystemInit+0x11c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a1a      	ldr	r2, [pc, #104]	@ (80028f8 <SystemInit+0x11c>)
 800288e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002892:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002894:	4b18      	ldr	r3, [pc, #96]	@ (80028f8 <SystemInit+0x11c>)
 8002896:	2200      	movs	r2, #0
 8002898:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800289a:	4b1c      	ldr	r3, [pc, #112]	@ (800290c <SystemInit+0x130>)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	4b1c      	ldr	r3, [pc, #112]	@ (8002910 <SystemInit+0x134>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80028a6:	d202      	bcs.n	80028ae <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80028a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002914 <SystemInit+0x138>)
 80028aa:	2201      	movs	r2, #1
 80028ac:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80028ae:	4b12      	ldr	r3, [pc, #72]	@ (80028f8 <SystemInit+0x11c>)
 80028b0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80028b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d113      	bne.n	80028e4 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80028bc:	4b0e      	ldr	r3, [pc, #56]	@ (80028f8 <SystemInit+0x11c>)
 80028be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80028c2:	4a0d      	ldr	r2, [pc, #52]	@ (80028f8 <SystemInit+0x11c>)
 80028c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80028c8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80028cc:	4b12      	ldr	r3, [pc, #72]	@ (8002918 <SystemInit+0x13c>)
 80028ce:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80028d2:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80028d4:	4b08      	ldr	r3, [pc, #32]	@ (80028f8 <SystemInit+0x11c>)
 80028d6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80028da:	4a07      	ldr	r2, [pc, #28]	@ (80028f8 <SystemInit+0x11c>)
 80028dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80028e0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	e000ed00 	.word	0xe000ed00
 80028f4:	52002000 	.word	0x52002000
 80028f8:	58024400 	.word	0x58024400
 80028fc:	eaf6ed7f 	.word	0xeaf6ed7f
 8002900:	02020200 	.word	0x02020200
 8002904:	01ff0000 	.word	0x01ff0000
 8002908:	01010280 	.word	0x01010280
 800290c:	5c001000 	.word	0x5c001000
 8002910:	ffff0000 	.word	0xffff0000
 8002914:	51008108 	.word	0x51008108
 8002918:	52004000 	.word	0x52004000

0800291c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002920:	4b09      	ldr	r3, [pc, #36]	@ (8002948 <ExitRun0Mode+0x2c>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	4a08      	ldr	r2, [pc, #32]	@ (8002948 <ExitRun0Mode+0x2c>)
 8002926:	f043 0302 	orr.w	r3, r3, #2
 800292a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800292c:	bf00      	nop
 800292e:	4b06      	ldr	r3, [pc, #24]	@ (8002948 <ExitRun0Mode+0x2c>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f9      	beq.n	800292e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800293a:	bf00      	nop
 800293c:	bf00      	nop
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	58024800 	.word	0x58024800

0800294c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800294c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002988 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002950:	f7ff ffe4 	bl	800291c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002954:	f7ff ff42 	bl	80027dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002958:	480c      	ldr	r0, [pc, #48]	@ (800298c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800295a:	490d      	ldr	r1, [pc, #52]	@ (8002990 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800295c:	4a0d      	ldr	r2, [pc, #52]	@ (8002994 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800295e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002960:	e002      	b.n	8002968 <LoopCopyDataInit>

08002962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002966:	3304      	adds	r3, #4

08002968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800296a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800296c:	d3f9      	bcc.n	8002962 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800296e:	4a0a      	ldr	r2, [pc, #40]	@ (8002998 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002970:	4c0a      	ldr	r4, [pc, #40]	@ (800299c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002974:	e001      	b.n	800297a <LoopFillZerobss>

08002976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002978:	3204      	adds	r2, #4

0800297a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800297a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800297c:	d3fb      	bcc.n	8002976 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800297e:	f006 facf 	bl	8008f20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002982:	f7ff fa53 	bl	8001e2c <main>
  bx  lr
 8002986:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002988:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800298c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002990:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8002994:	0800b374 	.word	0x0800b374
  ldr r2, =_sbss
 8002998:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 800299c:	240003bc 	.word	0x240003bc

080029a0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029a0:	e7fe      	b.n	80029a0 <ADC3_IRQHandler>
	...

080029a4 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08c      	sub	sp, #48	@ 0x30
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80029ae:	2300      	movs	r3, #0
 80029b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d009      	beq.n	80029cc <BSP_LED_Init+0x28>
 80029b8:	79fb      	ldrb	r3, [r7, #7]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d006      	beq.n	80029cc <BSP_LED_Init+0x28>
 80029be:	79fb      	ldrb	r3, [r7, #7]
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d003      	beq.n	80029cc <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80029c4:	f06f 0301 	mvn.w	r3, #1
 80029c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029ca:	e055      	b.n	8002a78 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80029cc:	79fb      	ldrb	r3, [r7, #7]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10f      	bne.n	80029f2 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80029d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002a84 <BSP_LED_Init+0xe0>)
 80029d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029d8:	4a2a      	ldr	r2, [pc, #168]	@ (8002a84 <BSP_LED_Init+0xe0>)
 80029da:	f043 0302 	orr.w	r3, r3, #2
 80029de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029e2:	4b28      	ldr	r3, [pc, #160]	@ (8002a84 <BSP_LED_Init+0xe0>)
 80029e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	617b      	str	r3, [r7, #20]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	e021      	b.n	8002a36 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80029f2:	79fb      	ldrb	r3, [r7, #7]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d10f      	bne.n	8002a18 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80029f8:	4b22      	ldr	r3, [pc, #136]	@ (8002a84 <BSP_LED_Init+0xe0>)
 80029fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029fe:	4a21      	ldr	r2, [pc, #132]	@ (8002a84 <BSP_LED_Init+0xe0>)
 8002a00:	f043 0310 	orr.w	r3, r3, #16
 8002a04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a08:	4b1e      	ldr	r3, [pc, #120]	@ (8002a84 <BSP_LED_Init+0xe0>)
 8002a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a0e:	f003 0310 	and.w	r3, r3, #16
 8002a12:	613b      	str	r3, [r7, #16]
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	e00e      	b.n	8002a36 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8002a18:	4b1a      	ldr	r3, [pc, #104]	@ (8002a84 <BSP_LED_Init+0xe0>)
 8002a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a1e:	4a19      	ldr	r2, [pc, #100]	@ (8002a84 <BSP_LED_Init+0xe0>)
 8002a20:	f043 0302 	orr.w	r3, r3, #2
 8002a24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a28:	4b16      	ldr	r3, [pc, #88]	@ (8002a84 <BSP_LED_Init+0xe0>)
 8002a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8002a36:	79fb      	ldrb	r3, [r7, #7]
 8002a38:	4a13      	ldr	r2, [pc, #76]	@ (8002a88 <BSP_LED_Init+0xe4>)
 8002a3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a3e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002a40:	2301      	movs	r3, #1
 8002a42:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002a4c:	79fb      	ldrb	r3, [r7, #7]
 8002a4e:	4a0f      	ldr	r2, [pc, #60]	@ (8002a8c <BSP_LED_Init+0xe8>)
 8002a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a54:	f107 0218 	add.w	r2, r7, #24
 8002a58:	4611      	mov	r1, r2
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 feec 	bl	8003838 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002a60:	79fb      	ldrb	r3, [r7, #7]
 8002a62:	4a0a      	ldr	r2, [pc, #40]	@ (8002a8c <BSP_LED_Init+0xe8>)
 8002a64:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002a68:	79fb      	ldrb	r3, [r7, #7]
 8002a6a:	4a07      	ldr	r2, [pc, #28]	@ (8002a88 <BSP_LED_Init+0xe4>)
 8002a6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a70:	2200      	movs	r2, #0
 8002a72:	4619      	mov	r1, r3
 8002a74:	f001 f8a8 	bl	8003bc8 <HAL_GPIO_WritePin>
  }

  return ret;
 8002a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3730      	adds	r7, #48	@ 0x30
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	58024400 	.word	0x58024400
 8002a88:	0800b30c 	.word	0x0800b30c
 8002a8c:	2400000c 	.word	0x2400000c

08002a90 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8002a9e:	79fb      	ldrb	r3, [r7, #7]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d009      	beq.n	8002ab8 <BSP_LED_On+0x28>
 8002aa4:	79fb      	ldrb	r3, [r7, #7]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d006      	beq.n	8002ab8 <BSP_LED_On+0x28>
 8002aaa:	79fb      	ldrb	r3, [r7, #7]
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d003      	beq.n	8002ab8 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002ab0:	f06f 0301 	mvn.w	r3, #1
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	e00b      	b.n	8002ad0 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	4a08      	ldr	r2, [pc, #32]	@ (8002adc <BSP_LED_On+0x4c>)
 8002abc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002ac0:	79fb      	ldrb	r3, [r7, #7]
 8002ac2:	4a07      	ldr	r2, [pc, #28]	@ (8002ae0 <BSP_LED_On+0x50>)
 8002ac4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	4619      	mov	r1, r3
 8002acc:	f001 f87c 	bl	8003bc8 <HAL_GPIO_WritePin>
  }

  return ret;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	2400000c 	.word	0x2400000c
 8002ae0:	0800b30c 	.word	0x0800b30c

08002ae4 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d009      	beq.n	8002b0c <BSP_LED_Off+0x28>
 8002af8:	79fb      	ldrb	r3, [r7, #7]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d006      	beq.n	8002b0c <BSP_LED_Off+0x28>
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d003      	beq.n	8002b0c <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002b04:	f06f 0301 	mvn.w	r3, #1
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	e00b      	b.n	8002b24 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002b0c:	79fb      	ldrb	r3, [r7, #7]
 8002b0e:	4a08      	ldr	r2, [pc, #32]	@ (8002b30 <BSP_LED_Off+0x4c>)
 8002b10:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002b14:	79fb      	ldrb	r3, [r7, #7]
 8002b16:	4a07      	ldr	r2, [pc, #28]	@ (8002b34 <BSP_LED_Off+0x50>)
 8002b18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	4619      	mov	r1, r3
 8002b20:	f001 f852 	bl	8003bc8 <HAL_GPIO_WritePin>
  }

  return ret;
 8002b24:	68fb      	ldr	r3, [r7, #12]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	2400000c 	.word	0x2400000c
 8002b34:	0800b30c 	.word	0x0800b30c

08002b38 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8002b46:	79fb      	ldrb	r3, [r7, #7]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d009      	beq.n	8002b60 <BSP_LED_Toggle+0x28>
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d006      	beq.n	8002b60 <BSP_LED_Toggle+0x28>
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d003      	beq.n	8002b60 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002b58:	f06f 0301 	mvn.w	r3, #1
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	e00b      	b.n	8002b78 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002b60:	79fb      	ldrb	r3, [r7, #7]
 8002b62:	4a08      	ldr	r2, [pc, #32]	@ (8002b84 <BSP_LED_Toggle+0x4c>)
 8002b64:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002b68:	79fb      	ldrb	r3, [r7, #7]
 8002b6a:	4907      	ldr	r1, [pc, #28]	@ (8002b88 <BSP_LED_Toggle+0x50>)
 8002b6c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002b70:	4619      	mov	r1, r3
 8002b72:	4610      	mov	r0, r2
 8002b74:	f001 f841 	bl	8003bfa <HAL_GPIO_TogglePin>
  }

  return ret;
 8002b78:	68fb      	ldr	r3, [r7, #12]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	2400000c 	.word	0x2400000c
 8002b88:	0800b30c 	.word	0x0800b30c

08002b8c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b088      	sub	sp, #32
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	460a      	mov	r2, r1
 8002b96:	71fb      	strb	r3, [r7, #7]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8002b9c:	4b2e      	ldr	r3, [pc, #184]	@ (8002c58 <BSP_PB_Init+0xcc>)
 8002b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ba2:	4a2d      	ldr	r2, [pc, #180]	@ (8002c58 <BSP_PB_Init+0xcc>)
 8002ba4:	f043 0304 	orr.w	r3, r3, #4
 8002ba8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002bac:	4b2a      	ldr	r3, [pc, #168]	@ (8002c58 <BSP_PB_Init+0xcc>)
 8002bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	60bb      	str	r3, [r7, #8]
 8002bb8:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8002bba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002bbe:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8002bc8:	79bb      	ldrb	r3, [r7, #6]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10c      	bne.n	8002be8 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8002bd2:	79fb      	ldrb	r3, [r7, #7]
 8002bd4:	4a21      	ldr	r2, [pc, #132]	@ (8002c5c <BSP_PB_Init+0xd0>)
 8002bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bda:	f107 020c 	add.w	r2, r7, #12
 8002bde:	4611      	mov	r1, r2
 8002be0:	4618      	mov	r0, r3
 8002be2:	f000 fe29 	bl	8003838 <HAL_GPIO_Init>
 8002be6:	e031      	b.n	8002c4c <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002be8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002bec:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	4a1a      	ldr	r2, [pc, #104]	@ (8002c5c <BSP_PB_Init+0xd0>)
 8002bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf6:	f107 020c 	add.w	r2, r7, #12
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f000 fe1b 	bl	8003838 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8002c02:	79fb      	ldrb	r3, [r7, #7]
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	4a16      	ldr	r2, [pc, #88]	@ (8002c60 <BSP_PB_Init+0xd4>)
 8002c08:	441a      	add	r2, r3
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	4915      	ldr	r1, [pc, #84]	@ (8002c64 <BSP_PB_Init+0xd8>)
 8002c0e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c12:	4619      	mov	r1, r3
 8002c14:	4610      	mov	r0, r2
 8002c16:	f000 fdca 	bl	80037ae <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	4a10      	ldr	r2, [pc, #64]	@ (8002c60 <BSP_PB_Init+0xd4>)
 8002c20:	1898      	adds	r0, r3, r2
 8002c22:	79fb      	ldrb	r3, [r7, #7]
 8002c24:	4a10      	ldr	r2, [pc, #64]	@ (8002c68 <BSP_PB_Init+0xdc>)
 8002c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	f000 fd9f 	bl	8003770 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002c32:	2028      	movs	r0, #40	@ 0x28
 8002c34:	79fb      	ldrb	r3, [r7, #7]
 8002c36:	4a0d      	ldr	r2, [pc, #52]	@ (8002c6c <BSP_PB_Init+0xe0>)
 8002c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	4619      	mov	r1, r3
 8002c40:	f000 faa3 	bl	800318a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002c44:	2328      	movs	r3, #40	@ 0x28
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 fab9 	bl	80031be <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3720      	adds	r7, #32
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	58024400 	.word	0x58024400
 8002c5c:	24000018 	.word	0x24000018
 8002c60:	240001cc 	.word	0x240001cc
 8002c64:	0800b314 	.word	0x0800b314
 8002c68:	2400001c 	.word	0x2400001c
 8002c6c:	24000020 	.word	0x24000020

08002c70 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	4a04      	ldr	r2, [pc, #16]	@ (8002c90 <BSP_PB_IRQHandler+0x20>)
 8002c80:	4413      	add	r3, r2
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 fda8 	bl	80037d8 <HAL_EXTI_IRQHandler>
}
 8002c88:	bf00      	nop
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	240001cc 	.word	0x240001cc

08002c94 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	6039      	str	r1, [r7, #0]
 8002c9e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002caa:	f06f 0301 	mvn.w	r3, #1
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	e018      	b.n	8002ce4 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8002cb2:	79fb      	ldrb	r3, [r7, #7]
 8002cb4:	2294      	movs	r2, #148	@ 0x94
 8002cb6:	fb02 f303 	mul.w	r3, r2, r3
 8002cba:	4a0d      	ldr	r2, [pc, #52]	@ (8002cf0 <BSP_COM_Init+0x5c>)
 8002cbc:	4413      	add	r3, r2
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 f86e 	bl	8002da0 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8002cc4:	79fb      	ldrb	r3, [r7, #7]
 8002cc6:	2294      	movs	r2, #148	@ 0x94
 8002cc8:	fb02 f303 	mul.w	r3, r2, r3
 8002ccc:	4a08      	ldr	r2, [pc, #32]	@ (8002cf0 <BSP_COM_Init+0x5c>)
 8002cce:	4413      	add	r3, r2
 8002cd0:	6839      	ldr	r1, [r7, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 f80e 	bl	8002cf4 <MX_USART3_Init>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d002      	beq.n	8002ce4 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002cde:	f06f 0303 	mvn.w	r3, #3
 8002ce2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	240001d4 	.word	0x240001d4

08002cf4 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8002cfe:	4b15      	ldr	r3, [pc, #84]	@ (8002d54 <MX_USART3_Init+0x60>)
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	220c      	movs	r2, #12
 8002d12:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	895b      	ldrh	r3, [r3, #10]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	891b      	ldrh	r3, [r3, #8]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	899b      	ldrh	r3, [r3, #12]
 8002d34:	461a      	mov	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002d40:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f004 ff0f 	bl	8007b66 <HAL_UART_Init>
 8002d48:	4603      	mov	r3, r0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	24000008 	.word	0x24000008

08002d58 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8002d60:	4b09      	ldr	r3, [pc, #36]	@ (8002d88 <__io_putchar+0x30>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	461a      	mov	r2, r3
 8002d66:	2394      	movs	r3, #148	@ 0x94
 8002d68:	fb02 f303 	mul.w	r3, r2, r3
 8002d6c:	4a07      	ldr	r2, [pc, #28]	@ (8002d8c <__io_putchar+0x34>)
 8002d6e:	1898      	adds	r0, r3, r2
 8002d70:	1d39      	adds	r1, r7, #4
 8002d72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d76:	2201      	movs	r2, #1
 8002d78:	f004 ff4f 	bl	8007c1a <HAL_UART_Transmit>
  return ch;
 8002d7c:	687b      	ldr	r3, [r7, #4]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	24000268 	.word	0x24000268
 8002d8c:	240001d4 	.word	0x240001d4

08002d90 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002d94:	2000      	movs	r0, #0
 8002d96:	f7ff fb0b 	bl	80023b0 <BSP_PB_Callback>
}
 8002d9a:	bf00      	nop
 8002d9c:	bd80      	pop	{r7, pc}
	...

08002da0 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b08a      	sub	sp, #40	@ 0x28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8002da8:	4b27      	ldr	r3, [pc, #156]	@ (8002e48 <COM1_MspInit+0xa8>)
 8002daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dae:	4a26      	ldr	r2, [pc, #152]	@ (8002e48 <COM1_MspInit+0xa8>)
 8002db0:	f043 0308 	orr.w	r3, r3, #8
 8002db4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002db8:	4b23      	ldr	r3, [pc, #140]	@ (8002e48 <COM1_MspInit+0xa8>)
 8002dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	613b      	str	r3, [r7, #16]
 8002dc4:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8002dc6:	4b20      	ldr	r3, [pc, #128]	@ (8002e48 <COM1_MspInit+0xa8>)
 8002dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dcc:	4a1e      	ldr	r2, [pc, #120]	@ (8002e48 <COM1_MspInit+0xa8>)
 8002dce:	f043 0308 	orr.w	r3, r3, #8
 8002dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8002e48 <COM1_MspInit+0xa8>)
 8002dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ddc:	f003 0308 	and.w	r3, r3, #8
 8002de0:	60fb      	str	r3, [r7, #12]
 8002de2:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8002de4:	4b18      	ldr	r3, [pc, #96]	@ (8002e48 <COM1_MspInit+0xa8>)
 8002de6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002dea:	4a17      	ldr	r2, [pc, #92]	@ (8002e48 <COM1_MspInit+0xa8>)
 8002dec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002df0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002df4:	4b14      	ldr	r3, [pc, #80]	@ (8002e48 <COM1_MspInit+0xa8>)
 8002df6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002dfa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dfe:	60bb      	str	r3, [r7, #8]
 8002e00:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8002e02:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e06:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002e08:	2302      	movs	r3, #2
 8002e0a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002e10:	2301      	movs	r3, #1
 8002e12:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8002e14:	2307      	movs	r3, #7
 8002e16:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002e18:	f107 0314 	add.w	r3, r7, #20
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	480b      	ldr	r0, [pc, #44]	@ (8002e4c <COM1_MspInit+0xac>)
 8002e20:	f000 fd0a 	bl	8003838 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8002e24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e28:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8002e2e:	2307      	movs	r3, #7
 8002e30:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8002e32:	f107 0314 	add.w	r3, r7, #20
 8002e36:	4619      	mov	r1, r3
 8002e38:	4804      	ldr	r0, [pc, #16]	@ (8002e4c <COM1_MspInit+0xac>)
 8002e3a:	f000 fcfd 	bl	8003838 <HAL_GPIO_Init>
}
 8002e3e:	bf00      	nop
 8002e40:	3728      	adds	r7, #40	@ 0x28
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	58024400 	.word	0x58024400
 8002e4c:	58020c00 	.word	0x58020c00

08002e50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e56:	2003      	movs	r0, #3
 8002e58:	f000 f98c 	bl	8003174 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e5c:	f001 fd32 	bl	80048c4 <HAL_RCC_GetSysClockFreq>
 8002e60:	4602      	mov	r2, r0
 8002e62:	4b15      	ldr	r3, [pc, #84]	@ (8002eb8 <HAL_Init+0x68>)
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	0a1b      	lsrs	r3, r3, #8
 8002e68:	f003 030f 	and.w	r3, r3, #15
 8002e6c:	4913      	ldr	r1, [pc, #76]	@ (8002ebc <HAL_Init+0x6c>)
 8002e6e:	5ccb      	ldrb	r3, [r1, r3]
 8002e70:	f003 031f 	and.w	r3, r3, #31
 8002e74:	fa22 f303 	lsr.w	r3, r2, r3
 8002e78:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8002eb8 <HAL_Init+0x68>)
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	4a0e      	ldr	r2, [pc, #56]	@ (8002ebc <HAL_Init+0x6c>)
 8002e84:	5cd3      	ldrb	r3, [r2, r3]
 8002e86:	f003 031f 	and.w	r3, r3, #31
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e90:	4a0b      	ldr	r2, [pc, #44]	@ (8002ec0 <HAL_Init+0x70>)
 8002e92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e94:	4a0b      	ldr	r2, [pc, #44]	@ (8002ec4 <HAL_Init+0x74>)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	f000 f814 	bl	8002ec8 <HAL_InitTick>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e002      	b.n	8002eb0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002eaa:	f7ff fa9b 	bl	80023e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	58024400 	.word	0x58024400
 8002ebc:	0800b2fc 	.word	0x0800b2fc
 8002ec0:	24000004 	.word	0x24000004
 8002ec4:	24000000 	.word	0x24000000

08002ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002ed0:	4b15      	ldr	r3, [pc, #84]	@ (8002f28 <HAL_InitTick+0x60>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e021      	b.n	8002f20 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002edc:	4b13      	ldr	r3, [pc, #76]	@ (8002f2c <HAL_InitTick+0x64>)
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	4b11      	ldr	r3, [pc, #68]	@ (8002f28 <HAL_InitTick+0x60>)
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002eea:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 f971 	bl	80031da <HAL_SYSTICK_Config>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e00e      	b.n	8002f20 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b0f      	cmp	r3, #15
 8002f06:	d80a      	bhi.n	8002f1e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f08:	2200      	movs	r2, #0
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f10:	f000 f93b 	bl	800318a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f14:	4a06      	ldr	r2, [pc, #24]	@ (8002f30 <HAL_InitTick+0x68>)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	e000      	b.n	8002f20 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	24000028 	.word	0x24000028
 8002f2c:	24000000 	.word	0x24000000
 8002f30:	24000024 	.word	0x24000024

08002f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f38:	4b06      	ldr	r3, [pc, #24]	@ (8002f54 <HAL_IncTick+0x20>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4b06      	ldr	r3, [pc, #24]	@ (8002f58 <HAL_IncTick+0x24>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4413      	add	r3, r2
 8002f44:	4a04      	ldr	r2, [pc, #16]	@ (8002f58 <HAL_IncTick+0x24>)
 8002f46:	6013      	str	r3, [r2, #0]
}
 8002f48:	bf00      	nop
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	24000028 	.word	0x24000028
 8002f58:	2400026c 	.word	0x2400026c

08002f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f60:	4b03      	ldr	r3, [pc, #12]	@ (8002f70 <HAL_GetTick+0x14>)
 8002f62:	681b      	ldr	r3, [r3, #0]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	2400026c 	.word	0x2400026c

08002f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f7c:	f7ff ffee 	bl	8002f5c <HAL_GetTick>
 8002f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8c:	d005      	beq.n	8002f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb8 <HAL_Delay+0x44>)
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	461a      	mov	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4413      	add	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f9a:	bf00      	nop
 8002f9c:	f7ff ffde 	bl	8002f5c <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d8f7      	bhi.n	8002f9c <HAL_Delay+0x28>
  {
  }
}
 8002fac:	bf00      	nop
 8002fae:	bf00      	nop
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	24000028 	.word	0x24000028

08002fbc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002fc0:	4b03      	ldr	r3, [pc, #12]	@ (8002fd0 <HAL_GetREVID+0x14>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	0c1b      	lsrs	r3, r3, #16
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	5c001000 	.word	0x5c001000

08002fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8003014 <__NVIC_SetPriorityGrouping+0x40>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ffc:	4b06      	ldr	r3, [pc, #24]	@ (8003018 <__NVIC_SetPriorityGrouping+0x44>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003002:	4a04      	ldr	r2, [pc, #16]	@ (8003014 <__NVIC_SetPriorityGrouping+0x40>)
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	60d3      	str	r3, [r2, #12]
}
 8003008:	bf00      	nop
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	e000ed00 	.word	0xe000ed00
 8003018:	05fa0000 	.word	0x05fa0000

0800301c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003020:	4b04      	ldr	r3, [pc, #16]	@ (8003034 <__NVIC_GetPriorityGrouping+0x18>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	0a1b      	lsrs	r3, r3, #8
 8003026:	f003 0307 	and.w	r3, r3, #7
}
 800302a:	4618      	mov	r0, r3
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	e000ed00 	.word	0xe000ed00

08003038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	4603      	mov	r3, r0
 8003040:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003042:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003046:	2b00      	cmp	r3, #0
 8003048:	db0b      	blt.n	8003062 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800304a:	88fb      	ldrh	r3, [r7, #6]
 800304c:	f003 021f 	and.w	r2, r3, #31
 8003050:	4907      	ldr	r1, [pc, #28]	@ (8003070 <__NVIC_EnableIRQ+0x38>)
 8003052:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003056:	095b      	lsrs	r3, r3, #5
 8003058:	2001      	movs	r0, #1
 800305a:	fa00 f202 	lsl.w	r2, r0, r2
 800305e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	e000e100 	.word	0xe000e100

08003074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	6039      	str	r1, [r7, #0]
 800307e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003080:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003084:	2b00      	cmp	r3, #0
 8003086:	db0a      	blt.n	800309e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	b2da      	uxtb	r2, r3
 800308c:	490c      	ldr	r1, [pc, #48]	@ (80030c0 <__NVIC_SetPriority+0x4c>)
 800308e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003092:	0112      	lsls	r2, r2, #4
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	440b      	add	r3, r1
 8003098:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800309c:	e00a      	b.n	80030b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	4908      	ldr	r1, [pc, #32]	@ (80030c4 <__NVIC_SetPriority+0x50>)
 80030a4:	88fb      	ldrh	r3, [r7, #6]
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	3b04      	subs	r3, #4
 80030ac:	0112      	lsls	r2, r2, #4
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	440b      	add	r3, r1
 80030b2:	761a      	strb	r2, [r3, #24]
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	e000e100 	.word	0xe000e100
 80030c4:	e000ed00 	.word	0xe000ed00

080030c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b089      	sub	sp, #36	@ 0x24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f1c3 0307 	rsb	r3, r3, #7
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	bf28      	it	cs
 80030e6:	2304      	movcs	r3, #4
 80030e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	3304      	adds	r3, #4
 80030ee:	2b06      	cmp	r3, #6
 80030f0:	d902      	bls.n	80030f8 <NVIC_EncodePriority+0x30>
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	3b03      	subs	r3, #3
 80030f6:	e000      	b.n	80030fa <NVIC_EncodePriority+0x32>
 80030f8:	2300      	movs	r3, #0
 80030fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43da      	mvns	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	401a      	ands	r2, r3
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003110:	f04f 31ff 	mov.w	r1, #4294967295
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	fa01 f303 	lsl.w	r3, r1, r3
 800311a:	43d9      	mvns	r1, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003120:	4313      	orrs	r3, r2
         );
}
 8003122:	4618      	mov	r0, r3
 8003124:	3724      	adds	r7, #36	@ 0x24
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
	...

08003130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3b01      	subs	r3, #1
 800313c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003140:	d301      	bcc.n	8003146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003142:	2301      	movs	r3, #1
 8003144:	e00f      	b.n	8003166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003146:	4a0a      	ldr	r2, [pc, #40]	@ (8003170 <SysTick_Config+0x40>)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3b01      	subs	r3, #1
 800314c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800314e:	210f      	movs	r1, #15
 8003150:	f04f 30ff 	mov.w	r0, #4294967295
 8003154:	f7ff ff8e 	bl	8003074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003158:	4b05      	ldr	r3, [pc, #20]	@ (8003170 <SysTick_Config+0x40>)
 800315a:	2200      	movs	r2, #0
 800315c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800315e:	4b04      	ldr	r3, [pc, #16]	@ (8003170 <SysTick_Config+0x40>)
 8003160:	2207      	movs	r2, #7
 8003162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	e000e010 	.word	0xe000e010

08003174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7ff ff29 	bl	8002fd4 <__NVIC_SetPriorityGrouping>
}
 8003182:	bf00      	nop
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b086      	sub	sp, #24
 800318e:	af00      	add	r7, sp, #0
 8003190:	4603      	mov	r3, r0
 8003192:	60b9      	str	r1, [r7, #8]
 8003194:	607a      	str	r2, [r7, #4]
 8003196:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003198:	f7ff ff40 	bl	800301c <__NVIC_GetPriorityGrouping>
 800319c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	68b9      	ldr	r1, [r7, #8]
 80031a2:	6978      	ldr	r0, [r7, #20]
 80031a4:	f7ff ff90 	bl	80030c8 <NVIC_EncodePriority>
 80031a8:	4602      	mov	r2, r0
 80031aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031ae:	4611      	mov	r1, r2
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff ff5f 	bl	8003074 <__NVIC_SetPriority>
}
 80031b6:	bf00      	nop
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b082      	sub	sp, #8
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	4603      	mov	r3, r0
 80031c6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff ff33 	bl	8003038 <__NVIC_EnableIRQ>
}
 80031d2:	bf00      	nop
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b082      	sub	sp, #8
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7ff ffa4 	bl	8003130 <SysTick_Config>
 80031e8:	4603      	mov	r3, r0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
	...

080031f4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80031f8:	f3bf 8f5f 	dmb	sy
}
 80031fc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80031fe:	4b07      	ldr	r3, [pc, #28]	@ (800321c <HAL_MPU_Disable+0x28>)
 8003200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003202:	4a06      	ldr	r2, [pc, #24]	@ (800321c <HAL_MPU_Disable+0x28>)
 8003204:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003208:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800320a:	4b05      	ldr	r3, [pc, #20]	@ (8003220 <HAL_MPU_Disable+0x2c>)
 800320c:	2200      	movs	r2, #0
 800320e:	605a      	str	r2, [r3, #4]
}
 8003210:	bf00      	nop
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	e000ed00 	.word	0xe000ed00
 8003220:	e000ed90 	.word	0xe000ed90

08003224 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800322c:	4a0b      	ldr	r2, [pc, #44]	@ (800325c <HAL_MPU_Enable+0x38>)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f043 0301 	orr.w	r3, r3, #1
 8003234:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003236:	4b0a      	ldr	r3, [pc, #40]	@ (8003260 <HAL_MPU_Enable+0x3c>)
 8003238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323a:	4a09      	ldr	r2, [pc, #36]	@ (8003260 <HAL_MPU_Enable+0x3c>)
 800323c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003240:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003242:	f3bf 8f4f 	dsb	sy
}
 8003246:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003248:	f3bf 8f6f 	isb	sy
}
 800324c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	e000ed90 	.word	0xe000ed90
 8003260:	e000ed00 	.word	0xe000ed00

08003264 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	785a      	ldrb	r2, [r3, #1]
 8003270:	4b1b      	ldr	r3, [pc, #108]	@ (80032e0 <HAL_MPU_ConfigRegion+0x7c>)
 8003272:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003274:	4b1a      	ldr	r3, [pc, #104]	@ (80032e0 <HAL_MPU_ConfigRegion+0x7c>)
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	4a19      	ldr	r2, [pc, #100]	@ (80032e0 <HAL_MPU_ConfigRegion+0x7c>)
 800327a:	f023 0301 	bic.w	r3, r3, #1
 800327e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003280:	4a17      	ldr	r2, [pc, #92]	@ (80032e0 <HAL_MPU_ConfigRegion+0x7c>)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	7b1b      	ldrb	r3, [r3, #12]
 800328c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	7adb      	ldrb	r3, [r3, #11]
 8003292:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003294:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	7a9b      	ldrb	r3, [r3, #10]
 800329a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800329c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	7b5b      	ldrb	r3, [r3, #13]
 80032a2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80032a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	7b9b      	ldrb	r3, [r3, #14]
 80032aa:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80032ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	7bdb      	ldrb	r3, [r3, #15]
 80032b2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80032b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	7a5b      	ldrb	r3, [r3, #9]
 80032ba:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80032bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	7a1b      	ldrb	r3, [r3, #8]
 80032c2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80032c4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	7812      	ldrb	r2, [r2, #0]
 80032ca:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80032cc:	4a04      	ldr	r2, [pc, #16]	@ (80032e0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80032ce:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80032d0:	6113      	str	r3, [r2, #16]
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	e000ed90 	.word	0xe000ed90

080032e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e237      	b.n	8003766 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d004      	beq.n	800330c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2280      	movs	r2, #128	@ 0x80
 8003306:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e22c      	b.n	8003766 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a5c      	ldr	r2, [pc, #368]	@ (8003484 <HAL_DMA_Abort_IT+0x1a0>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d04a      	beq.n	80033ac <HAL_DMA_Abort_IT+0xc8>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a5b      	ldr	r2, [pc, #364]	@ (8003488 <HAL_DMA_Abort_IT+0x1a4>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d045      	beq.n	80033ac <HAL_DMA_Abort_IT+0xc8>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a59      	ldr	r2, [pc, #356]	@ (800348c <HAL_DMA_Abort_IT+0x1a8>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d040      	beq.n	80033ac <HAL_DMA_Abort_IT+0xc8>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a58      	ldr	r2, [pc, #352]	@ (8003490 <HAL_DMA_Abort_IT+0x1ac>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d03b      	beq.n	80033ac <HAL_DMA_Abort_IT+0xc8>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a56      	ldr	r2, [pc, #344]	@ (8003494 <HAL_DMA_Abort_IT+0x1b0>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d036      	beq.n	80033ac <HAL_DMA_Abort_IT+0xc8>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a55      	ldr	r2, [pc, #340]	@ (8003498 <HAL_DMA_Abort_IT+0x1b4>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d031      	beq.n	80033ac <HAL_DMA_Abort_IT+0xc8>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a53      	ldr	r2, [pc, #332]	@ (800349c <HAL_DMA_Abort_IT+0x1b8>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d02c      	beq.n	80033ac <HAL_DMA_Abort_IT+0xc8>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a52      	ldr	r2, [pc, #328]	@ (80034a0 <HAL_DMA_Abort_IT+0x1bc>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d027      	beq.n	80033ac <HAL_DMA_Abort_IT+0xc8>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a50      	ldr	r2, [pc, #320]	@ (80034a4 <HAL_DMA_Abort_IT+0x1c0>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d022      	beq.n	80033ac <HAL_DMA_Abort_IT+0xc8>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a4f      	ldr	r2, [pc, #316]	@ (80034a8 <HAL_DMA_Abort_IT+0x1c4>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d01d      	beq.n	80033ac <HAL_DMA_Abort_IT+0xc8>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a4d      	ldr	r2, [pc, #308]	@ (80034ac <HAL_DMA_Abort_IT+0x1c8>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d018      	beq.n	80033ac <HAL_DMA_Abort_IT+0xc8>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a4c      	ldr	r2, [pc, #304]	@ (80034b0 <HAL_DMA_Abort_IT+0x1cc>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d013      	beq.n	80033ac <HAL_DMA_Abort_IT+0xc8>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a4a      	ldr	r2, [pc, #296]	@ (80034b4 <HAL_DMA_Abort_IT+0x1d0>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d00e      	beq.n	80033ac <HAL_DMA_Abort_IT+0xc8>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a49      	ldr	r2, [pc, #292]	@ (80034b8 <HAL_DMA_Abort_IT+0x1d4>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d009      	beq.n	80033ac <HAL_DMA_Abort_IT+0xc8>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a47      	ldr	r2, [pc, #284]	@ (80034bc <HAL_DMA_Abort_IT+0x1d8>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d004      	beq.n	80033ac <HAL_DMA_Abort_IT+0xc8>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a46      	ldr	r2, [pc, #280]	@ (80034c0 <HAL_DMA_Abort_IT+0x1dc>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d101      	bne.n	80033b0 <HAL_DMA_Abort_IT+0xcc>
 80033ac:	2301      	movs	r3, #1
 80033ae:	e000      	b.n	80033b2 <HAL_DMA_Abort_IT+0xce>
 80033b0:	2300      	movs	r3, #0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f000 8086 	beq.w	80034c4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2204      	movs	r2, #4
 80033bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a2f      	ldr	r2, [pc, #188]	@ (8003484 <HAL_DMA_Abort_IT+0x1a0>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d04a      	beq.n	8003460 <HAL_DMA_Abort_IT+0x17c>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a2e      	ldr	r2, [pc, #184]	@ (8003488 <HAL_DMA_Abort_IT+0x1a4>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d045      	beq.n	8003460 <HAL_DMA_Abort_IT+0x17c>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a2c      	ldr	r2, [pc, #176]	@ (800348c <HAL_DMA_Abort_IT+0x1a8>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d040      	beq.n	8003460 <HAL_DMA_Abort_IT+0x17c>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a2b      	ldr	r2, [pc, #172]	@ (8003490 <HAL_DMA_Abort_IT+0x1ac>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d03b      	beq.n	8003460 <HAL_DMA_Abort_IT+0x17c>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a29      	ldr	r2, [pc, #164]	@ (8003494 <HAL_DMA_Abort_IT+0x1b0>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d036      	beq.n	8003460 <HAL_DMA_Abort_IT+0x17c>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a28      	ldr	r2, [pc, #160]	@ (8003498 <HAL_DMA_Abort_IT+0x1b4>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d031      	beq.n	8003460 <HAL_DMA_Abort_IT+0x17c>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a26      	ldr	r2, [pc, #152]	@ (800349c <HAL_DMA_Abort_IT+0x1b8>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d02c      	beq.n	8003460 <HAL_DMA_Abort_IT+0x17c>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a25      	ldr	r2, [pc, #148]	@ (80034a0 <HAL_DMA_Abort_IT+0x1bc>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d027      	beq.n	8003460 <HAL_DMA_Abort_IT+0x17c>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a23      	ldr	r2, [pc, #140]	@ (80034a4 <HAL_DMA_Abort_IT+0x1c0>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d022      	beq.n	8003460 <HAL_DMA_Abort_IT+0x17c>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a22      	ldr	r2, [pc, #136]	@ (80034a8 <HAL_DMA_Abort_IT+0x1c4>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d01d      	beq.n	8003460 <HAL_DMA_Abort_IT+0x17c>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a20      	ldr	r2, [pc, #128]	@ (80034ac <HAL_DMA_Abort_IT+0x1c8>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d018      	beq.n	8003460 <HAL_DMA_Abort_IT+0x17c>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a1f      	ldr	r2, [pc, #124]	@ (80034b0 <HAL_DMA_Abort_IT+0x1cc>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d013      	beq.n	8003460 <HAL_DMA_Abort_IT+0x17c>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a1d      	ldr	r2, [pc, #116]	@ (80034b4 <HAL_DMA_Abort_IT+0x1d0>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d00e      	beq.n	8003460 <HAL_DMA_Abort_IT+0x17c>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a1c      	ldr	r2, [pc, #112]	@ (80034b8 <HAL_DMA_Abort_IT+0x1d4>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d009      	beq.n	8003460 <HAL_DMA_Abort_IT+0x17c>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a1a      	ldr	r2, [pc, #104]	@ (80034bc <HAL_DMA_Abort_IT+0x1d8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d004      	beq.n	8003460 <HAL_DMA_Abort_IT+0x17c>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a19      	ldr	r2, [pc, #100]	@ (80034c0 <HAL_DMA_Abort_IT+0x1dc>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d108      	bne.n	8003472 <HAL_DMA_Abort_IT+0x18e>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0201 	bic.w	r2, r2, #1
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	e178      	b.n	8003764 <HAL_DMA_Abort_IT+0x480>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0201 	bic.w	r2, r2, #1
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	e16f      	b.n	8003764 <HAL_DMA_Abort_IT+0x480>
 8003484:	40020010 	.word	0x40020010
 8003488:	40020028 	.word	0x40020028
 800348c:	40020040 	.word	0x40020040
 8003490:	40020058 	.word	0x40020058
 8003494:	40020070 	.word	0x40020070
 8003498:	40020088 	.word	0x40020088
 800349c:	400200a0 	.word	0x400200a0
 80034a0:	400200b8 	.word	0x400200b8
 80034a4:	40020410 	.word	0x40020410
 80034a8:	40020428 	.word	0x40020428
 80034ac:	40020440 	.word	0x40020440
 80034b0:	40020458 	.word	0x40020458
 80034b4:	40020470 	.word	0x40020470
 80034b8:	40020488 	.word	0x40020488
 80034bc:	400204a0 	.word	0x400204a0
 80034c0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 020e 	bic.w	r2, r2, #14
 80034d2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a6c      	ldr	r2, [pc, #432]	@ (800368c <HAL_DMA_Abort_IT+0x3a8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d04a      	beq.n	8003574 <HAL_DMA_Abort_IT+0x290>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a6b      	ldr	r2, [pc, #428]	@ (8003690 <HAL_DMA_Abort_IT+0x3ac>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d045      	beq.n	8003574 <HAL_DMA_Abort_IT+0x290>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a69      	ldr	r2, [pc, #420]	@ (8003694 <HAL_DMA_Abort_IT+0x3b0>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d040      	beq.n	8003574 <HAL_DMA_Abort_IT+0x290>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a68      	ldr	r2, [pc, #416]	@ (8003698 <HAL_DMA_Abort_IT+0x3b4>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d03b      	beq.n	8003574 <HAL_DMA_Abort_IT+0x290>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a66      	ldr	r2, [pc, #408]	@ (800369c <HAL_DMA_Abort_IT+0x3b8>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d036      	beq.n	8003574 <HAL_DMA_Abort_IT+0x290>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a65      	ldr	r2, [pc, #404]	@ (80036a0 <HAL_DMA_Abort_IT+0x3bc>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d031      	beq.n	8003574 <HAL_DMA_Abort_IT+0x290>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a63      	ldr	r2, [pc, #396]	@ (80036a4 <HAL_DMA_Abort_IT+0x3c0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d02c      	beq.n	8003574 <HAL_DMA_Abort_IT+0x290>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a62      	ldr	r2, [pc, #392]	@ (80036a8 <HAL_DMA_Abort_IT+0x3c4>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d027      	beq.n	8003574 <HAL_DMA_Abort_IT+0x290>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a60      	ldr	r2, [pc, #384]	@ (80036ac <HAL_DMA_Abort_IT+0x3c8>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d022      	beq.n	8003574 <HAL_DMA_Abort_IT+0x290>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a5f      	ldr	r2, [pc, #380]	@ (80036b0 <HAL_DMA_Abort_IT+0x3cc>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d01d      	beq.n	8003574 <HAL_DMA_Abort_IT+0x290>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a5d      	ldr	r2, [pc, #372]	@ (80036b4 <HAL_DMA_Abort_IT+0x3d0>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d018      	beq.n	8003574 <HAL_DMA_Abort_IT+0x290>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a5c      	ldr	r2, [pc, #368]	@ (80036b8 <HAL_DMA_Abort_IT+0x3d4>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d013      	beq.n	8003574 <HAL_DMA_Abort_IT+0x290>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a5a      	ldr	r2, [pc, #360]	@ (80036bc <HAL_DMA_Abort_IT+0x3d8>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d00e      	beq.n	8003574 <HAL_DMA_Abort_IT+0x290>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a59      	ldr	r2, [pc, #356]	@ (80036c0 <HAL_DMA_Abort_IT+0x3dc>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d009      	beq.n	8003574 <HAL_DMA_Abort_IT+0x290>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a57      	ldr	r2, [pc, #348]	@ (80036c4 <HAL_DMA_Abort_IT+0x3e0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d004      	beq.n	8003574 <HAL_DMA_Abort_IT+0x290>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a56      	ldr	r2, [pc, #344]	@ (80036c8 <HAL_DMA_Abort_IT+0x3e4>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d108      	bne.n	8003586 <HAL_DMA_Abort_IT+0x2a2>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0201 	bic.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	e007      	b.n	8003596 <HAL_DMA_Abort_IT+0x2b2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 0201 	bic.w	r2, r2, #1
 8003594:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a3c      	ldr	r2, [pc, #240]	@ (800368c <HAL_DMA_Abort_IT+0x3a8>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d072      	beq.n	8003686 <HAL_DMA_Abort_IT+0x3a2>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a3a      	ldr	r2, [pc, #232]	@ (8003690 <HAL_DMA_Abort_IT+0x3ac>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d06d      	beq.n	8003686 <HAL_DMA_Abort_IT+0x3a2>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a39      	ldr	r2, [pc, #228]	@ (8003694 <HAL_DMA_Abort_IT+0x3b0>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d068      	beq.n	8003686 <HAL_DMA_Abort_IT+0x3a2>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a37      	ldr	r2, [pc, #220]	@ (8003698 <HAL_DMA_Abort_IT+0x3b4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d063      	beq.n	8003686 <HAL_DMA_Abort_IT+0x3a2>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a36      	ldr	r2, [pc, #216]	@ (800369c <HAL_DMA_Abort_IT+0x3b8>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d05e      	beq.n	8003686 <HAL_DMA_Abort_IT+0x3a2>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a34      	ldr	r2, [pc, #208]	@ (80036a0 <HAL_DMA_Abort_IT+0x3bc>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d059      	beq.n	8003686 <HAL_DMA_Abort_IT+0x3a2>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a33      	ldr	r2, [pc, #204]	@ (80036a4 <HAL_DMA_Abort_IT+0x3c0>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d054      	beq.n	8003686 <HAL_DMA_Abort_IT+0x3a2>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a31      	ldr	r2, [pc, #196]	@ (80036a8 <HAL_DMA_Abort_IT+0x3c4>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d04f      	beq.n	8003686 <HAL_DMA_Abort_IT+0x3a2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a30      	ldr	r2, [pc, #192]	@ (80036ac <HAL_DMA_Abort_IT+0x3c8>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d04a      	beq.n	8003686 <HAL_DMA_Abort_IT+0x3a2>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a2e      	ldr	r2, [pc, #184]	@ (80036b0 <HAL_DMA_Abort_IT+0x3cc>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d045      	beq.n	8003686 <HAL_DMA_Abort_IT+0x3a2>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a2d      	ldr	r2, [pc, #180]	@ (80036b4 <HAL_DMA_Abort_IT+0x3d0>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d040      	beq.n	8003686 <HAL_DMA_Abort_IT+0x3a2>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a2b      	ldr	r2, [pc, #172]	@ (80036b8 <HAL_DMA_Abort_IT+0x3d4>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d03b      	beq.n	8003686 <HAL_DMA_Abort_IT+0x3a2>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a2a      	ldr	r2, [pc, #168]	@ (80036bc <HAL_DMA_Abort_IT+0x3d8>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d036      	beq.n	8003686 <HAL_DMA_Abort_IT+0x3a2>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a28      	ldr	r2, [pc, #160]	@ (80036c0 <HAL_DMA_Abort_IT+0x3dc>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d031      	beq.n	8003686 <HAL_DMA_Abort_IT+0x3a2>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a27      	ldr	r2, [pc, #156]	@ (80036c4 <HAL_DMA_Abort_IT+0x3e0>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d02c      	beq.n	8003686 <HAL_DMA_Abort_IT+0x3a2>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a25      	ldr	r2, [pc, #148]	@ (80036c8 <HAL_DMA_Abort_IT+0x3e4>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d027      	beq.n	8003686 <HAL_DMA_Abort_IT+0x3a2>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a24      	ldr	r2, [pc, #144]	@ (80036cc <HAL_DMA_Abort_IT+0x3e8>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d022      	beq.n	8003686 <HAL_DMA_Abort_IT+0x3a2>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a22      	ldr	r2, [pc, #136]	@ (80036d0 <HAL_DMA_Abort_IT+0x3ec>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d01d      	beq.n	8003686 <HAL_DMA_Abort_IT+0x3a2>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a21      	ldr	r2, [pc, #132]	@ (80036d4 <HAL_DMA_Abort_IT+0x3f0>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d018      	beq.n	8003686 <HAL_DMA_Abort_IT+0x3a2>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a1f      	ldr	r2, [pc, #124]	@ (80036d8 <HAL_DMA_Abort_IT+0x3f4>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d013      	beq.n	8003686 <HAL_DMA_Abort_IT+0x3a2>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a1e      	ldr	r2, [pc, #120]	@ (80036dc <HAL_DMA_Abort_IT+0x3f8>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d00e      	beq.n	8003686 <HAL_DMA_Abort_IT+0x3a2>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a1c      	ldr	r2, [pc, #112]	@ (80036e0 <HAL_DMA_Abort_IT+0x3fc>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d009      	beq.n	8003686 <HAL_DMA_Abort_IT+0x3a2>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a1b      	ldr	r2, [pc, #108]	@ (80036e4 <HAL_DMA_Abort_IT+0x400>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d004      	beq.n	8003686 <HAL_DMA_Abort_IT+0x3a2>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a19      	ldr	r2, [pc, #100]	@ (80036e8 <HAL_DMA_Abort_IT+0x404>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d132      	bne.n	80036ec <HAL_DMA_Abort_IT+0x408>
 8003686:	2301      	movs	r3, #1
 8003688:	e031      	b.n	80036ee <HAL_DMA_Abort_IT+0x40a>
 800368a:	bf00      	nop
 800368c:	40020010 	.word	0x40020010
 8003690:	40020028 	.word	0x40020028
 8003694:	40020040 	.word	0x40020040
 8003698:	40020058 	.word	0x40020058
 800369c:	40020070 	.word	0x40020070
 80036a0:	40020088 	.word	0x40020088
 80036a4:	400200a0 	.word	0x400200a0
 80036a8:	400200b8 	.word	0x400200b8
 80036ac:	40020410 	.word	0x40020410
 80036b0:	40020428 	.word	0x40020428
 80036b4:	40020440 	.word	0x40020440
 80036b8:	40020458 	.word	0x40020458
 80036bc:	40020470 	.word	0x40020470
 80036c0:	40020488 	.word	0x40020488
 80036c4:	400204a0 	.word	0x400204a0
 80036c8:	400204b8 	.word	0x400204b8
 80036cc:	58025408 	.word	0x58025408
 80036d0:	5802541c 	.word	0x5802541c
 80036d4:	58025430 	.word	0x58025430
 80036d8:	58025444 	.word	0x58025444
 80036dc:	58025458 	.word	0x58025458
 80036e0:	5802546c 	.word	0x5802546c
 80036e4:	58025480 	.word	0x58025480
 80036e8:	58025494 	.word	0x58025494
 80036ec:	2300      	movs	r3, #0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d028      	beq.n	8003744 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003700:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003706:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800370c:	f003 031f 	and.w	r3, r3, #31
 8003710:	2201      	movs	r2, #1
 8003712:	409a      	lsls	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003720:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00c      	beq.n	8003744 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003734:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003738:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003742:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop

08003770 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8003770:	b480      	push	{r7}
 8003772:	b087      	sub	sp, #28
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	460b      	mov	r3, r1
 800377a:	607a      	str	r2, [r7, #4]
 800377c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800377e:	2300      	movs	r3, #0
 8003780:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d101      	bne.n	800378c <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e00a      	b.n	80037a2 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 800378c:	7afb      	ldrb	r3, [r7, #11]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d103      	bne.n	800379a <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	605a      	str	r2, [r3, #4]
      break;
 8003798:	e002      	b.n	80037a0 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	75fb      	strb	r3, [r7, #23]
      break;
 800379e:	bf00      	nop
  }

  return status;
 80037a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	371c      	adds	r7, #28
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
 80037b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e003      	b.n	80037ca <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80037c8:	2300      	movs	r3, #0
  }
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
	...

080037d8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	0c1b      	lsrs	r3, r3, #16
 80037e6:	f003 0303 	and.w	r3, r3, #3
 80037ea:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 031f 	and.w	r3, r3, #31
 80037f4:	2201      	movs	r2, #1
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	011a      	lsls	r2, r3, #4
 8003800:	4b0c      	ldr	r3, [pc, #48]	@ (8003834 <HAL_EXTI_IRQHandler+0x5c>)
 8003802:	4413      	add	r3, r2
 8003804:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	4013      	ands	r3, r2
 800380e:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d009      	beq.n	800382a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d002      	beq.n	800382a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	4798      	blx	r3
    }
  }
}
 800382a:	bf00      	nop
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	58000088 	.word	0x58000088

08003838 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003838:	b480      	push	{r7}
 800383a:	b089      	sub	sp, #36	@ 0x24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003842:	2300      	movs	r3, #0
 8003844:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003846:	4b89      	ldr	r3, [pc, #548]	@ (8003a6c <HAL_GPIO_Init+0x234>)
 8003848:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800384a:	e194      	b.n	8003b76 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	2101      	movs	r1, #1
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	fa01 f303 	lsl.w	r3, r1, r3
 8003858:	4013      	ands	r3, r2
 800385a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 8186 	beq.w	8003b70 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f003 0303 	and.w	r3, r3, #3
 800386c:	2b01      	cmp	r3, #1
 800386e:	d005      	beq.n	800387c <HAL_GPIO_Init+0x44>
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f003 0303 	and.w	r3, r3, #3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d130      	bne.n	80038de <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	2203      	movs	r2, #3
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	43db      	mvns	r3, r3
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	4013      	ands	r3, r2
 8003892:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	68da      	ldr	r2, [r3, #12]
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038b2:	2201      	movs	r2, #1
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ba:	43db      	mvns	r3, r3
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	4013      	ands	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	091b      	lsrs	r3, r3, #4
 80038c8:	f003 0201 	and.w	r2, r3, #1
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	2b03      	cmp	r3, #3
 80038e8:	d017      	beq.n	800391a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	2203      	movs	r2, #3
 80038f6:	fa02 f303 	lsl.w	r3, r2, r3
 80038fa:	43db      	mvns	r3, r3
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	4013      	ands	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	689a      	ldr	r2, [r3, #8]
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4313      	orrs	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f003 0303 	and.w	r3, r3, #3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d123      	bne.n	800396e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	08da      	lsrs	r2, r3, #3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	3208      	adds	r2, #8
 800392e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003932:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	f003 0307 	and.w	r3, r3, #7
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	220f      	movs	r2, #15
 800393e:	fa02 f303 	lsl.w	r3, r2, r3
 8003942:	43db      	mvns	r3, r3
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	4013      	ands	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	691a      	ldr	r2, [r3, #16]
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	fa02 f303 	lsl.w	r3, r2, r3
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4313      	orrs	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	08da      	lsrs	r2, r3, #3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3208      	adds	r2, #8
 8003968:	69b9      	ldr	r1, [r7, #24]
 800396a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	2203      	movs	r2, #3
 800397a:	fa02 f303 	lsl.w	r3, r2, r3
 800397e:	43db      	mvns	r3, r3
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	4013      	ands	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f003 0203 	and.w	r2, r3, #3
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4313      	orrs	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 80e0 	beq.w	8003b70 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039b0:	4b2f      	ldr	r3, [pc, #188]	@ (8003a70 <HAL_GPIO_Init+0x238>)
 80039b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80039b6:	4a2e      	ldr	r2, [pc, #184]	@ (8003a70 <HAL_GPIO_Init+0x238>)
 80039b8:	f043 0302 	orr.w	r3, r3, #2
 80039bc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80039c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003a70 <HAL_GPIO_Init+0x238>)
 80039c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039ce:	4a29      	ldr	r2, [pc, #164]	@ (8003a74 <HAL_GPIO_Init+0x23c>)
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	089b      	lsrs	r3, r3, #2
 80039d4:	3302      	adds	r3, #2
 80039d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	220f      	movs	r2, #15
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	43db      	mvns	r3, r3
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	4013      	ands	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a20      	ldr	r2, [pc, #128]	@ (8003a78 <HAL_GPIO_Init+0x240>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d052      	beq.n	8003aa0 <HAL_GPIO_Init+0x268>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a1f      	ldr	r2, [pc, #124]	@ (8003a7c <HAL_GPIO_Init+0x244>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d031      	beq.n	8003a66 <HAL_GPIO_Init+0x22e>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a1e      	ldr	r2, [pc, #120]	@ (8003a80 <HAL_GPIO_Init+0x248>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d02b      	beq.n	8003a62 <HAL_GPIO_Init+0x22a>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a1d      	ldr	r2, [pc, #116]	@ (8003a84 <HAL_GPIO_Init+0x24c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d025      	beq.n	8003a5e <HAL_GPIO_Init+0x226>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a1c      	ldr	r2, [pc, #112]	@ (8003a88 <HAL_GPIO_Init+0x250>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d01f      	beq.n	8003a5a <HAL_GPIO_Init+0x222>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a1b      	ldr	r2, [pc, #108]	@ (8003a8c <HAL_GPIO_Init+0x254>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d019      	beq.n	8003a56 <HAL_GPIO_Init+0x21e>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a1a      	ldr	r2, [pc, #104]	@ (8003a90 <HAL_GPIO_Init+0x258>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d013      	beq.n	8003a52 <HAL_GPIO_Init+0x21a>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a19      	ldr	r2, [pc, #100]	@ (8003a94 <HAL_GPIO_Init+0x25c>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d00d      	beq.n	8003a4e <HAL_GPIO_Init+0x216>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a18      	ldr	r2, [pc, #96]	@ (8003a98 <HAL_GPIO_Init+0x260>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d007      	beq.n	8003a4a <HAL_GPIO_Init+0x212>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a17      	ldr	r2, [pc, #92]	@ (8003a9c <HAL_GPIO_Init+0x264>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d101      	bne.n	8003a46 <HAL_GPIO_Init+0x20e>
 8003a42:	2309      	movs	r3, #9
 8003a44:	e02d      	b.n	8003aa2 <HAL_GPIO_Init+0x26a>
 8003a46:	230a      	movs	r3, #10
 8003a48:	e02b      	b.n	8003aa2 <HAL_GPIO_Init+0x26a>
 8003a4a:	2308      	movs	r3, #8
 8003a4c:	e029      	b.n	8003aa2 <HAL_GPIO_Init+0x26a>
 8003a4e:	2307      	movs	r3, #7
 8003a50:	e027      	b.n	8003aa2 <HAL_GPIO_Init+0x26a>
 8003a52:	2306      	movs	r3, #6
 8003a54:	e025      	b.n	8003aa2 <HAL_GPIO_Init+0x26a>
 8003a56:	2305      	movs	r3, #5
 8003a58:	e023      	b.n	8003aa2 <HAL_GPIO_Init+0x26a>
 8003a5a:	2304      	movs	r3, #4
 8003a5c:	e021      	b.n	8003aa2 <HAL_GPIO_Init+0x26a>
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e01f      	b.n	8003aa2 <HAL_GPIO_Init+0x26a>
 8003a62:	2302      	movs	r3, #2
 8003a64:	e01d      	b.n	8003aa2 <HAL_GPIO_Init+0x26a>
 8003a66:	2301      	movs	r3, #1
 8003a68:	e01b      	b.n	8003aa2 <HAL_GPIO_Init+0x26a>
 8003a6a:	bf00      	nop
 8003a6c:	58000080 	.word	0x58000080
 8003a70:	58024400 	.word	0x58024400
 8003a74:	58000400 	.word	0x58000400
 8003a78:	58020000 	.word	0x58020000
 8003a7c:	58020400 	.word	0x58020400
 8003a80:	58020800 	.word	0x58020800
 8003a84:	58020c00 	.word	0x58020c00
 8003a88:	58021000 	.word	0x58021000
 8003a8c:	58021400 	.word	0x58021400
 8003a90:	58021800 	.word	0x58021800
 8003a94:	58021c00 	.word	0x58021c00
 8003a98:	58022000 	.word	0x58022000
 8003a9c:	58022400 	.word	0x58022400
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	69fa      	ldr	r2, [r7, #28]
 8003aa4:	f002 0203 	and.w	r2, r2, #3
 8003aa8:	0092      	lsls	r2, r2, #2
 8003aaa:	4093      	lsls	r3, r2
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ab2:	4938      	ldr	r1, [pc, #224]	@ (8003b94 <HAL_GPIO_Init+0x35c>)
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	089b      	lsrs	r3, r3, #2
 8003ab8:	3302      	adds	r3, #2
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ac0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	43db      	mvns	r3, r3
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003ae6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003aee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	43db      	mvns	r3, r3
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	4013      	ands	r3, r2
 8003afe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003b14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	43db      	mvns	r3, r3
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d003      	beq.n	8003b40 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	43db      	mvns	r3, r3
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	4013      	ands	r3, r2
 8003b54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d003      	beq.n	8003b6a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	3301      	adds	r3, #1
 8003b74:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f47f ae63 	bne.w	800384c <HAL_GPIO_Init+0x14>
  }
}
 8003b86:	bf00      	nop
 8003b88:	bf00      	nop
 8003b8a:	3724      	adds	r7, #36	@ 0x24
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	58000400 	.word	0x58000400

08003b98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691a      	ldr	r2, [r3, #16]
 8003ba8:	887b      	ldrh	r3, [r7, #2]
 8003baa:	4013      	ands	r3, r2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d002      	beq.n	8003bb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	73fb      	strb	r3, [r7, #15]
 8003bb4:	e001      	b.n	8003bba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	807b      	strh	r3, [r7, #2]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bd8:	787b      	ldrb	r3, [r7, #1]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bde:	887a      	ldrh	r2, [r7, #2]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003be4:	e003      	b.n	8003bee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003be6:	887b      	ldrh	r3, [r7, #2]
 8003be8:	041a      	lsls	r2, r3, #16
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	619a      	str	r2, [r3, #24]
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b085      	sub	sp, #20
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
 8003c02:	460b      	mov	r3, r1
 8003c04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c0c:	887a      	ldrh	r2, [r7, #2]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	4013      	ands	r3, r2
 8003c12:	041a      	lsls	r2, r3, #16
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	43d9      	mvns	r1, r3
 8003c18:	887b      	ldrh	r3, [r7, #2]
 8003c1a:	400b      	ands	r3, r1
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	619a      	str	r2, [r3, #24]
}
 8003c22:	bf00      	nop
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
	...

08003c30 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003c38:	4b19      	ldr	r3, [pc, #100]	@ (8003ca0 <HAL_PWREx_ConfigSupply+0x70>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d00a      	beq.n	8003c5a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003c44:	4b16      	ldr	r3, [pc, #88]	@ (8003ca0 <HAL_PWREx_ConfigSupply+0x70>)
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d001      	beq.n	8003c56 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e01f      	b.n	8003c96 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003c56:	2300      	movs	r3, #0
 8003c58:	e01d      	b.n	8003c96 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003c5a:	4b11      	ldr	r3, [pc, #68]	@ (8003ca0 <HAL_PWREx_ConfigSupply+0x70>)
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	f023 0207 	bic.w	r2, r3, #7
 8003c62:	490f      	ldr	r1, [pc, #60]	@ (8003ca0 <HAL_PWREx_ConfigSupply+0x70>)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003c6a:	f7ff f977 	bl	8002f5c <HAL_GetTick>
 8003c6e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003c70:	e009      	b.n	8003c86 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003c72:	f7ff f973 	bl	8002f5c <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c80:	d901      	bls.n	8003c86 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e007      	b.n	8003c96 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003c86:	4b06      	ldr	r3, [pc, #24]	@ (8003ca0 <HAL_PWREx_ConfigSupply+0x70>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c92:	d1ee      	bne.n	8003c72 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	58024800 	.word	0x58024800

08003ca4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b08c      	sub	sp, #48	@ 0x30
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d102      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	f000 bc48 	b.w	8004548 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 8088 	beq.w	8003dd6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cc6:	4b99      	ldr	r3, [pc, #612]	@ (8003f2c <HAL_RCC_OscConfig+0x288>)
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003cd0:	4b96      	ldr	r3, [pc, #600]	@ (8003f2c <HAL_RCC_OscConfig+0x288>)
 8003cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cd8:	2b10      	cmp	r3, #16
 8003cda:	d007      	beq.n	8003cec <HAL_RCC_OscConfig+0x48>
 8003cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cde:	2b18      	cmp	r3, #24
 8003ce0:	d111      	bne.n	8003d06 <HAL_RCC_OscConfig+0x62>
 8003ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ce4:	f003 0303 	and.w	r3, r3, #3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d10c      	bne.n	8003d06 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cec:	4b8f      	ldr	r3, [pc, #572]	@ (8003f2c <HAL_RCC_OscConfig+0x288>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d06d      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x130>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d169      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	f000 bc21 	b.w	8004548 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d0e:	d106      	bne.n	8003d1e <HAL_RCC_OscConfig+0x7a>
 8003d10:	4b86      	ldr	r3, [pc, #536]	@ (8003f2c <HAL_RCC_OscConfig+0x288>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a85      	ldr	r2, [pc, #532]	@ (8003f2c <HAL_RCC_OscConfig+0x288>)
 8003d16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d1a:	6013      	str	r3, [r2, #0]
 8003d1c:	e02e      	b.n	8003d7c <HAL_RCC_OscConfig+0xd8>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10c      	bne.n	8003d40 <HAL_RCC_OscConfig+0x9c>
 8003d26:	4b81      	ldr	r3, [pc, #516]	@ (8003f2c <HAL_RCC_OscConfig+0x288>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a80      	ldr	r2, [pc, #512]	@ (8003f2c <HAL_RCC_OscConfig+0x288>)
 8003d2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d30:	6013      	str	r3, [r2, #0]
 8003d32:	4b7e      	ldr	r3, [pc, #504]	@ (8003f2c <HAL_RCC_OscConfig+0x288>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a7d      	ldr	r2, [pc, #500]	@ (8003f2c <HAL_RCC_OscConfig+0x288>)
 8003d38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	e01d      	b.n	8003d7c <HAL_RCC_OscConfig+0xd8>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d48:	d10c      	bne.n	8003d64 <HAL_RCC_OscConfig+0xc0>
 8003d4a:	4b78      	ldr	r3, [pc, #480]	@ (8003f2c <HAL_RCC_OscConfig+0x288>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a77      	ldr	r2, [pc, #476]	@ (8003f2c <HAL_RCC_OscConfig+0x288>)
 8003d50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d54:	6013      	str	r3, [r2, #0]
 8003d56:	4b75      	ldr	r3, [pc, #468]	@ (8003f2c <HAL_RCC_OscConfig+0x288>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a74      	ldr	r2, [pc, #464]	@ (8003f2c <HAL_RCC_OscConfig+0x288>)
 8003d5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d60:	6013      	str	r3, [r2, #0]
 8003d62:	e00b      	b.n	8003d7c <HAL_RCC_OscConfig+0xd8>
 8003d64:	4b71      	ldr	r3, [pc, #452]	@ (8003f2c <HAL_RCC_OscConfig+0x288>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a70      	ldr	r2, [pc, #448]	@ (8003f2c <HAL_RCC_OscConfig+0x288>)
 8003d6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d6e:	6013      	str	r3, [r2, #0]
 8003d70:	4b6e      	ldr	r3, [pc, #440]	@ (8003f2c <HAL_RCC_OscConfig+0x288>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a6d      	ldr	r2, [pc, #436]	@ (8003f2c <HAL_RCC_OscConfig+0x288>)
 8003d76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d013      	beq.n	8003dac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d84:	f7ff f8ea 	bl	8002f5c <HAL_GetTick>
 8003d88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d8c:	f7ff f8e6 	bl	8002f5c <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b64      	cmp	r3, #100	@ 0x64
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e3d4      	b.n	8004548 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d9e:	4b63      	ldr	r3, [pc, #396]	@ (8003f2c <HAL_RCC_OscConfig+0x288>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d0f0      	beq.n	8003d8c <HAL_RCC_OscConfig+0xe8>
 8003daa:	e014      	b.n	8003dd6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dac:	f7ff f8d6 	bl	8002f5c <HAL_GetTick>
 8003db0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003db4:	f7ff f8d2 	bl	8002f5c <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b64      	cmp	r3, #100	@ 0x64
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e3c0      	b.n	8004548 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003dc6:	4b59      	ldr	r3, [pc, #356]	@ (8003f2c <HAL_RCC_OscConfig+0x288>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1f0      	bne.n	8003db4 <HAL_RCC_OscConfig+0x110>
 8003dd2:	e000      	b.n	8003dd6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 80ca 	beq.w	8003f78 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003de4:	4b51      	ldr	r3, [pc, #324]	@ (8003f2c <HAL_RCC_OscConfig+0x288>)
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003dec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003dee:	4b4f      	ldr	r3, [pc, #316]	@ (8003f2c <HAL_RCC_OscConfig+0x288>)
 8003df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d007      	beq.n	8003e0a <HAL_RCC_OscConfig+0x166>
 8003dfa:	6a3b      	ldr	r3, [r7, #32]
 8003dfc:	2b18      	cmp	r3, #24
 8003dfe:	d156      	bne.n	8003eae <HAL_RCC_OscConfig+0x20a>
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	f003 0303 	and.w	r3, r3, #3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d151      	bne.n	8003eae <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e0a:	4b48      	ldr	r3, [pc, #288]	@ (8003f2c <HAL_RCC_OscConfig+0x288>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0304 	and.w	r3, r3, #4
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d005      	beq.n	8003e22 <HAL_RCC_OscConfig+0x17e>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e392      	b.n	8004548 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003e22:	4b42      	ldr	r3, [pc, #264]	@ (8003f2c <HAL_RCC_OscConfig+0x288>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f023 0219 	bic.w	r2, r3, #25
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	493f      	ldr	r1, [pc, #252]	@ (8003f2c <HAL_RCC_OscConfig+0x288>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e34:	f7ff f892 	bl	8002f5c <HAL_GetTick>
 8003e38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e3c:	f7ff f88e 	bl	8002f5c <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e37c      	b.n	8004548 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e4e:	4b37      	ldr	r3, [pc, #220]	@ (8003f2c <HAL_RCC_OscConfig+0x288>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0304 	and.w	r3, r3, #4
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d0f0      	beq.n	8003e3c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e5a:	f7ff f8af 	bl	8002fbc <HAL_GetREVID>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d817      	bhi.n	8003e98 <HAL_RCC_OscConfig+0x1f4>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	2b40      	cmp	r3, #64	@ 0x40
 8003e6e:	d108      	bne.n	8003e82 <HAL_RCC_OscConfig+0x1de>
 8003e70:	4b2e      	ldr	r3, [pc, #184]	@ (8003f2c <HAL_RCC_OscConfig+0x288>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003e78:	4a2c      	ldr	r2, [pc, #176]	@ (8003f2c <HAL_RCC_OscConfig+0x288>)
 8003e7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e7e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e80:	e07a      	b.n	8003f78 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e82:	4b2a      	ldr	r3, [pc, #168]	@ (8003f2c <HAL_RCC_OscConfig+0x288>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	031b      	lsls	r3, r3, #12
 8003e90:	4926      	ldr	r1, [pc, #152]	@ (8003f2c <HAL_RCC_OscConfig+0x288>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e96:	e06f      	b.n	8003f78 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e98:	4b24      	ldr	r3, [pc, #144]	@ (8003f2c <HAL_RCC_OscConfig+0x288>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	061b      	lsls	r3, r3, #24
 8003ea6:	4921      	ldr	r1, [pc, #132]	@ (8003f2c <HAL_RCC_OscConfig+0x288>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003eac:	e064      	b.n	8003f78 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d047      	beq.n	8003f46 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8003f2c <HAL_RCC_OscConfig+0x288>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f023 0219 	bic.w	r2, r3, #25
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	491a      	ldr	r1, [pc, #104]	@ (8003f2c <HAL_RCC_OscConfig+0x288>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec8:	f7ff f848 	bl	8002f5c <HAL_GetTick>
 8003ecc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ed0:	f7ff f844 	bl	8002f5c <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e332      	b.n	8004548 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ee2:	4b12      	ldr	r3, [pc, #72]	@ (8003f2c <HAL_RCC_OscConfig+0x288>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0304 	and.w	r3, r3, #4
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0f0      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eee:	f7ff f865 	bl	8002fbc <HAL_GetREVID>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d819      	bhi.n	8003f30 <HAL_RCC_OscConfig+0x28c>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	2b40      	cmp	r3, #64	@ 0x40
 8003f02:	d108      	bne.n	8003f16 <HAL_RCC_OscConfig+0x272>
 8003f04:	4b09      	ldr	r3, [pc, #36]	@ (8003f2c <HAL_RCC_OscConfig+0x288>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003f0c:	4a07      	ldr	r2, [pc, #28]	@ (8003f2c <HAL_RCC_OscConfig+0x288>)
 8003f0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f12:	6053      	str	r3, [r2, #4]
 8003f14:	e030      	b.n	8003f78 <HAL_RCC_OscConfig+0x2d4>
 8003f16:	4b05      	ldr	r3, [pc, #20]	@ (8003f2c <HAL_RCC_OscConfig+0x288>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	031b      	lsls	r3, r3, #12
 8003f24:	4901      	ldr	r1, [pc, #4]	@ (8003f2c <HAL_RCC_OscConfig+0x288>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	604b      	str	r3, [r1, #4]
 8003f2a:	e025      	b.n	8003f78 <HAL_RCC_OscConfig+0x2d4>
 8003f2c:	58024400 	.word	0x58024400
 8003f30:	4b9a      	ldr	r3, [pc, #616]	@ (800419c <HAL_RCC_OscConfig+0x4f8>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	061b      	lsls	r3, r3, #24
 8003f3e:	4997      	ldr	r1, [pc, #604]	@ (800419c <HAL_RCC_OscConfig+0x4f8>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	604b      	str	r3, [r1, #4]
 8003f44:	e018      	b.n	8003f78 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f46:	4b95      	ldr	r3, [pc, #596]	@ (800419c <HAL_RCC_OscConfig+0x4f8>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a94      	ldr	r2, [pc, #592]	@ (800419c <HAL_RCC_OscConfig+0x4f8>)
 8003f4c:	f023 0301 	bic.w	r3, r3, #1
 8003f50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f52:	f7ff f803 	bl	8002f5c <HAL_GetTick>
 8003f56:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f5a:	f7fe ffff 	bl	8002f5c <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e2ed      	b.n	8004548 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f6c:	4b8b      	ldr	r3, [pc, #556]	@ (800419c <HAL_RCC_OscConfig+0x4f8>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1f0      	bne.n	8003f5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0310 	and.w	r3, r3, #16
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 80a9 	beq.w	80040d8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f86:	4b85      	ldr	r3, [pc, #532]	@ (800419c <HAL_RCC_OscConfig+0x4f8>)
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f8e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f90:	4b82      	ldr	r3, [pc, #520]	@ (800419c <HAL_RCC_OscConfig+0x4f8>)
 8003f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f94:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	d007      	beq.n	8003fac <HAL_RCC_OscConfig+0x308>
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	2b18      	cmp	r3, #24
 8003fa0:	d13a      	bne.n	8004018 <HAL_RCC_OscConfig+0x374>
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f003 0303 	and.w	r3, r3, #3
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d135      	bne.n	8004018 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003fac:	4b7b      	ldr	r3, [pc, #492]	@ (800419c <HAL_RCC_OscConfig+0x4f8>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d005      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x320>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	2b80      	cmp	r3, #128	@ 0x80
 8003fbe:	d001      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e2c1      	b.n	8004548 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003fc4:	f7fe fffa 	bl	8002fbc <HAL_GetREVID>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d817      	bhi.n	8004002 <HAL_RCC_OscConfig+0x35e>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	2b20      	cmp	r3, #32
 8003fd8:	d108      	bne.n	8003fec <HAL_RCC_OscConfig+0x348>
 8003fda:	4b70      	ldr	r3, [pc, #448]	@ (800419c <HAL_RCC_OscConfig+0x4f8>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003fe2:	4a6e      	ldr	r2, [pc, #440]	@ (800419c <HAL_RCC_OscConfig+0x4f8>)
 8003fe4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003fe8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003fea:	e075      	b.n	80040d8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003fec:	4b6b      	ldr	r3, [pc, #428]	@ (800419c <HAL_RCC_OscConfig+0x4f8>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	069b      	lsls	r3, r3, #26
 8003ffa:	4968      	ldr	r1, [pc, #416]	@ (800419c <HAL_RCC_OscConfig+0x4f8>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004000:	e06a      	b.n	80040d8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004002:	4b66      	ldr	r3, [pc, #408]	@ (800419c <HAL_RCC_OscConfig+0x4f8>)
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	061b      	lsls	r3, r3, #24
 8004010:	4962      	ldr	r1, [pc, #392]	@ (800419c <HAL_RCC_OscConfig+0x4f8>)
 8004012:	4313      	orrs	r3, r2
 8004014:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004016:	e05f      	b.n	80040d8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	69db      	ldr	r3, [r3, #28]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d042      	beq.n	80040a6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004020:	4b5e      	ldr	r3, [pc, #376]	@ (800419c <HAL_RCC_OscConfig+0x4f8>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a5d      	ldr	r2, [pc, #372]	@ (800419c <HAL_RCC_OscConfig+0x4f8>)
 8004026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800402a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402c:	f7fe ff96 	bl	8002f5c <HAL_GetTick>
 8004030:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004034:	f7fe ff92 	bl	8002f5c <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e280      	b.n	8004548 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004046:	4b55      	ldr	r3, [pc, #340]	@ (800419c <HAL_RCC_OscConfig+0x4f8>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800404e:	2b00      	cmp	r3, #0
 8004050:	d0f0      	beq.n	8004034 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004052:	f7fe ffb3 	bl	8002fbc <HAL_GetREVID>
 8004056:	4603      	mov	r3, r0
 8004058:	f241 0203 	movw	r2, #4099	@ 0x1003
 800405c:	4293      	cmp	r3, r2
 800405e:	d817      	bhi.n	8004090 <HAL_RCC_OscConfig+0x3ec>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	2b20      	cmp	r3, #32
 8004066:	d108      	bne.n	800407a <HAL_RCC_OscConfig+0x3d6>
 8004068:	4b4c      	ldr	r3, [pc, #304]	@ (800419c <HAL_RCC_OscConfig+0x4f8>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004070:	4a4a      	ldr	r2, [pc, #296]	@ (800419c <HAL_RCC_OscConfig+0x4f8>)
 8004072:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004076:	6053      	str	r3, [r2, #4]
 8004078:	e02e      	b.n	80040d8 <HAL_RCC_OscConfig+0x434>
 800407a:	4b48      	ldr	r3, [pc, #288]	@ (800419c <HAL_RCC_OscConfig+0x4f8>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	069b      	lsls	r3, r3, #26
 8004088:	4944      	ldr	r1, [pc, #272]	@ (800419c <HAL_RCC_OscConfig+0x4f8>)
 800408a:	4313      	orrs	r3, r2
 800408c:	604b      	str	r3, [r1, #4]
 800408e:	e023      	b.n	80040d8 <HAL_RCC_OscConfig+0x434>
 8004090:	4b42      	ldr	r3, [pc, #264]	@ (800419c <HAL_RCC_OscConfig+0x4f8>)
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	061b      	lsls	r3, r3, #24
 800409e:	493f      	ldr	r1, [pc, #252]	@ (800419c <HAL_RCC_OscConfig+0x4f8>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	60cb      	str	r3, [r1, #12]
 80040a4:	e018      	b.n	80040d8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80040a6:	4b3d      	ldr	r3, [pc, #244]	@ (800419c <HAL_RCC_OscConfig+0x4f8>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a3c      	ldr	r2, [pc, #240]	@ (800419c <HAL_RCC_OscConfig+0x4f8>)
 80040ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b2:	f7fe ff53 	bl	8002f5c <HAL_GetTick>
 80040b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80040b8:	e008      	b.n	80040cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80040ba:	f7fe ff4f 	bl	8002f5c <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e23d      	b.n	8004548 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80040cc:	4b33      	ldr	r3, [pc, #204]	@ (800419c <HAL_RCC_OscConfig+0x4f8>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1f0      	bne.n	80040ba <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0308 	and.w	r3, r3, #8
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d036      	beq.n	8004152 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d019      	beq.n	8004120 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ec:	4b2b      	ldr	r3, [pc, #172]	@ (800419c <HAL_RCC_OscConfig+0x4f8>)
 80040ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040f0:	4a2a      	ldr	r2, [pc, #168]	@ (800419c <HAL_RCC_OscConfig+0x4f8>)
 80040f2:	f043 0301 	orr.w	r3, r3, #1
 80040f6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f8:	f7fe ff30 	bl	8002f5c <HAL_GetTick>
 80040fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004100:	f7fe ff2c 	bl	8002f5c <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e21a      	b.n	8004548 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004112:	4b22      	ldr	r3, [pc, #136]	@ (800419c <HAL_RCC_OscConfig+0x4f8>)
 8004114:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d0f0      	beq.n	8004100 <HAL_RCC_OscConfig+0x45c>
 800411e:	e018      	b.n	8004152 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004120:	4b1e      	ldr	r3, [pc, #120]	@ (800419c <HAL_RCC_OscConfig+0x4f8>)
 8004122:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004124:	4a1d      	ldr	r2, [pc, #116]	@ (800419c <HAL_RCC_OscConfig+0x4f8>)
 8004126:	f023 0301 	bic.w	r3, r3, #1
 800412a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412c:	f7fe ff16 	bl	8002f5c <HAL_GetTick>
 8004130:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004134:	f7fe ff12 	bl	8002f5c <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e200      	b.n	8004548 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004146:	4b15      	ldr	r3, [pc, #84]	@ (800419c <HAL_RCC_OscConfig+0x4f8>)
 8004148:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1f0      	bne.n	8004134 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0320 	and.w	r3, r3, #32
 800415a:	2b00      	cmp	r3, #0
 800415c:	d039      	beq.n	80041d2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d01c      	beq.n	80041a0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004166:	4b0d      	ldr	r3, [pc, #52]	@ (800419c <HAL_RCC_OscConfig+0x4f8>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a0c      	ldr	r2, [pc, #48]	@ (800419c <HAL_RCC_OscConfig+0x4f8>)
 800416c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004170:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004172:	f7fe fef3 	bl	8002f5c <HAL_GetTick>
 8004176:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004178:	e008      	b.n	800418c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800417a:	f7fe feef 	bl	8002f5c <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d901      	bls.n	800418c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e1dd      	b.n	8004548 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800418c:	4b03      	ldr	r3, [pc, #12]	@ (800419c <HAL_RCC_OscConfig+0x4f8>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0f0      	beq.n	800417a <HAL_RCC_OscConfig+0x4d6>
 8004198:	e01b      	b.n	80041d2 <HAL_RCC_OscConfig+0x52e>
 800419a:	bf00      	nop
 800419c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041a0:	4b9b      	ldr	r3, [pc, #620]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a9a      	ldr	r2, [pc, #616]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 80041a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80041aa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80041ac:	f7fe fed6 	bl	8002f5c <HAL_GetTick>
 80041b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041b4:	f7fe fed2 	bl	8002f5c <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e1c0      	b.n	8004548 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80041c6:	4b92      	ldr	r3, [pc, #584]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1f0      	bne.n	80041b4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0304 	and.w	r3, r3, #4
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f000 8081 	beq.w	80042e2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80041e0:	4b8c      	ldr	r3, [pc, #560]	@ (8004414 <HAL_RCC_OscConfig+0x770>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a8b      	ldr	r2, [pc, #556]	@ (8004414 <HAL_RCC_OscConfig+0x770>)
 80041e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041ec:	f7fe feb6 	bl	8002f5c <HAL_GetTick>
 80041f0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041f2:	e008      	b.n	8004206 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041f4:	f7fe feb2 	bl	8002f5c <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b64      	cmp	r3, #100	@ 0x64
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e1a0      	b.n	8004548 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004206:	4b83      	ldr	r3, [pc, #524]	@ (8004414 <HAL_RCC_OscConfig+0x770>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0f0      	beq.n	80041f4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d106      	bne.n	8004228 <HAL_RCC_OscConfig+0x584>
 800421a:	4b7d      	ldr	r3, [pc, #500]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 800421c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800421e:	4a7c      	ldr	r2, [pc, #496]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 8004220:	f043 0301 	orr.w	r3, r3, #1
 8004224:	6713      	str	r3, [r2, #112]	@ 0x70
 8004226:	e02d      	b.n	8004284 <HAL_RCC_OscConfig+0x5e0>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10c      	bne.n	800424a <HAL_RCC_OscConfig+0x5a6>
 8004230:	4b77      	ldr	r3, [pc, #476]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 8004232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004234:	4a76      	ldr	r2, [pc, #472]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 8004236:	f023 0301 	bic.w	r3, r3, #1
 800423a:	6713      	str	r3, [r2, #112]	@ 0x70
 800423c:	4b74      	ldr	r3, [pc, #464]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 800423e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004240:	4a73      	ldr	r2, [pc, #460]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 8004242:	f023 0304 	bic.w	r3, r3, #4
 8004246:	6713      	str	r3, [r2, #112]	@ 0x70
 8004248:	e01c      	b.n	8004284 <HAL_RCC_OscConfig+0x5e0>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	2b05      	cmp	r3, #5
 8004250:	d10c      	bne.n	800426c <HAL_RCC_OscConfig+0x5c8>
 8004252:	4b6f      	ldr	r3, [pc, #444]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 8004254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004256:	4a6e      	ldr	r2, [pc, #440]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 8004258:	f043 0304 	orr.w	r3, r3, #4
 800425c:	6713      	str	r3, [r2, #112]	@ 0x70
 800425e:	4b6c      	ldr	r3, [pc, #432]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 8004260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004262:	4a6b      	ldr	r2, [pc, #428]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 8004264:	f043 0301 	orr.w	r3, r3, #1
 8004268:	6713      	str	r3, [r2, #112]	@ 0x70
 800426a:	e00b      	b.n	8004284 <HAL_RCC_OscConfig+0x5e0>
 800426c:	4b68      	ldr	r3, [pc, #416]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 800426e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004270:	4a67      	ldr	r2, [pc, #412]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 8004272:	f023 0301 	bic.w	r3, r3, #1
 8004276:	6713      	str	r3, [r2, #112]	@ 0x70
 8004278:	4b65      	ldr	r3, [pc, #404]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 800427a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800427c:	4a64      	ldr	r2, [pc, #400]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 800427e:	f023 0304 	bic.w	r3, r3, #4
 8004282:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d015      	beq.n	80042b8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428c:	f7fe fe66 	bl	8002f5c <HAL_GetTick>
 8004290:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004292:	e00a      	b.n	80042aa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004294:	f7fe fe62 	bl	8002f5c <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e14e      	b.n	8004548 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042aa:	4b59      	ldr	r3, [pc, #356]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 80042ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0ee      	beq.n	8004294 <HAL_RCC_OscConfig+0x5f0>
 80042b6:	e014      	b.n	80042e2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b8:	f7fe fe50 	bl	8002f5c <HAL_GetTick>
 80042bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042be:	e00a      	b.n	80042d6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042c0:	f7fe fe4c 	bl	8002f5c <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e138      	b.n	8004548 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042d6:	4b4e      	ldr	r3, [pc, #312]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 80042d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1ee      	bne.n	80042c0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 812d 	beq.w	8004546 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80042ec:	4b48      	ldr	r3, [pc, #288]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042f4:	2b18      	cmp	r3, #24
 80042f6:	f000 80bd 	beq.w	8004474 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fe:	2b02      	cmp	r3, #2
 8004300:	f040 809e 	bne.w	8004440 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004304:	4b42      	ldr	r3, [pc, #264]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a41      	ldr	r2, [pc, #260]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 800430a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800430e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004310:	f7fe fe24 	bl	8002f5c <HAL_GetTick>
 8004314:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004318:	f7fe fe20 	bl	8002f5c <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e10e      	b.n	8004548 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800432a:	4b39      	ldr	r3, [pc, #228]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1f0      	bne.n	8004318 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004336:	4b36      	ldr	r3, [pc, #216]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 8004338:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800433a:	4b37      	ldr	r3, [pc, #220]	@ (8004418 <HAL_RCC_OscConfig+0x774>)
 800433c:	4013      	ands	r3, r2
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004346:	0112      	lsls	r2, r2, #4
 8004348:	430a      	orrs	r2, r1
 800434a:	4931      	ldr	r1, [pc, #196]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 800434c:	4313      	orrs	r3, r2
 800434e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004354:	3b01      	subs	r3, #1
 8004356:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800435e:	3b01      	subs	r3, #1
 8004360:	025b      	lsls	r3, r3, #9
 8004362:	b29b      	uxth	r3, r3
 8004364:	431a      	orrs	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800436a:	3b01      	subs	r3, #1
 800436c:	041b      	lsls	r3, r3, #16
 800436e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004378:	3b01      	subs	r3, #1
 800437a:	061b      	lsls	r3, r3, #24
 800437c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004380:	4923      	ldr	r1, [pc, #140]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 8004382:	4313      	orrs	r3, r2
 8004384:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004386:	4b22      	ldr	r3, [pc, #136]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 8004388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800438a:	4a21      	ldr	r2, [pc, #132]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 800438c:	f023 0301 	bic.w	r3, r3, #1
 8004390:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004392:	4b1f      	ldr	r3, [pc, #124]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 8004394:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004396:	4b21      	ldr	r3, [pc, #132]	@ (800441c <HAL_RCC_OscConfig+0x778>)
 8004398:	4013      	ands	r3, r2
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800439e:	00d2      	lsls	r2, r2, #3
 80043a0:	491b      	ldr	r1, [pc, #108]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80043a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 80043a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043aa:	f023 020c 	bic.w	r2, r3, #12
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b2:	4917      	ldr	r1, [pc, #92]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80043b8:	4b15      	ldr	r3, [pc, #84]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 80043ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043bc:	f023 0202 	bic.w	r2, r3, #2
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c4:	4912      	ldr	r1, [pc, #72]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80043ca:	4b11      	ldr	r3, [pc, #68]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 80043cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ce:	4a10      	ldr	r2, [pc, #64]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 80043d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043d6:	4b0e      	ldr	r3, [pc, #56]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 80043d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043da:	4a0d      	ldr	r2, [pc, #52]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 80043dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80043e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 80043e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e6:	4a0a      	ldr	r2, [pc, #40]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 80043e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80043ee:	4b08      	ldr	r3, [pc, #32]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 80043f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f2:	4a07      	ldr	r2, [pc, #28]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 80043f4:	f043 0301 	orr.w	r3, r3, #1
 80043f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043fa:	4b05      	ldr	r3, [pc, #20]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a04      	ldr	r2, [pc, #16]	@ (8004410 <HAL_RCC_OscConfig+0x76c>)
 8004400:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004404:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004406:	f7fe fda9 	bl	8002f5c <HAL_GetTick>
 800440a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800440c:	e011      	b.n	8004432 <HAL_RCC_OscConfig+0x78e>
 800440e:	bf00      	nop
 8004410:	58024400 	.word	0x58024400
 8004414:	58024800 	.word	0x58024800
 8004418:	fffffc0c 	.word	0xfffffc0c
 800441c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004420:	f7fe fd9c 	bl	8002f5c <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e08a      	b.n	8004548 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004432:	4b47      	ldr	r3, [pc, #284]	@ (8004550 <HAL_RCC_OscConfig+0x8ac>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d0f0      	beq.n	8004420 <HAL_RCC_OscConfig+0x77c>
 800443e:	e082      	b.n	8004546 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004440:	4b43      	ldr	r3, [pc, #268]	@ (8004550 <HAL_RCC_OscConfig+0x8ac>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a42      	ldr	r2, [pc, #264]	@ (8004550 <HAL_RCC_OscConfig+0x8ac>)
 8004446:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800444a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444c:	f7fe fd86 	bl	8002f5c <HAL_GetTick>
 8004450:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004454:	f7fe fd82 	bl	8002f5c <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e070      	b.n	8004548 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004466:	4b3a      	ldr	r3, [pc, #232]	@ (8004550 <HAL_RCC_OscConfig+0x8ac>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1f0      	bne.n	8004454 <HAL_RCC_OscConfig+0x7b0>
 8004472:	e068      	b.n	8004546 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004474:	4b36      	ldr	r3, [pc, #216]	@ (8004550 <HAL_RCC_OscConfig+0x8ac>)
 8004476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004478:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800447a:	4b35      	ldr	r3, [pc, #212]	@ (8004550 <HAL_RCC_OscConfig+0x8ac>)
 800447c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800447e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004484:	2b01      	cmp	r3, #1
 8004486:	d031      	beq.n	80044ec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	f003 0203 	and.w	r2, r3, #3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004492:	429a      	cmp	r2, r3
 8004494:	d12a      	bne.n	80044ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	091b      	lsrs	r3, r3, #4
 800449a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d122      	bne.n	80044ec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d11a      	bne.n	80044ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	0a5b      	lsrs	r3, r3, #9
 80044ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044c2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d111      	bne.n	80044ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	0c1b      	lsrs	r3, r3, #16
 80044cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d108      	bne.n	80044ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	0e1b      	lsrs	r3, r3, #24
 80044de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d001      	beq.n	80044f0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e02b      	b.n	8004548 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80044f0:	4b17      	ldr	r3, [pc, #92]	@ (8004550 <HAL_RCC_OscConfig+0x8ac>)
 80044f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044f4:	08db      	lsrs	r3, r3, #3
 80044f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044fa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	429a      	cmp	r2, r3
 8004504:	d01f      	beq.n	8004546 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004506:	4b12      	ldr	r3, [pc, #72]	@ (8004550 <HAL_RCC_OscConfig+0x8ac>)
 8004508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800450a:	4a11      	ldr	r2, [pc, #68]	@ (8004550 <HAL_RCC_OscConfig+0x8ac>)
 800450c:	f023 0301 	bic.w	r3, r3, #1
 8004510:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004512:	f7fe fd23 	bl	8002f5c <HAL_GetTick>
 8004516:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004518:	bf00      	nop
 800451a:	f7fe fd1f 	bl	8002f5c <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004522:	4293      	cmp	r3, r2
 8004524:	d0f9      	beq.n	800451a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004526:	4b0a      	ldr	r3, [pc, #40]	@ (8004550 <HAL_RCC_OscConfig+0x8ac>)
 8004528:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800452a:	4b0a      	ldr	r3, [pc, #40]	@ (8004554 <HAL_RCC_OscConfig+0x8b0>)
 800452c:	4013      	ands	r3, r2
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004532:	00d2      	lsls	r2, r2, #3
 8004534:	4906      	ldr	r1, [pc, #24]	@ (8004550 <HAL_RCC_OscConfig+0x8ac>)
 8004536:	4313      	orrs	r3, r2
 8004538:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800453a:	4b05      	ldr	r3, [pc, #20]	@ (8004550 <HAL_RCC_OscConfig+0x8ac>)
 800453c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453e:	4a04      	ldr	r2, [pc, #16]	@ (8004550 <HAL_RCC_OscConfig+0x8ac>)
 8004540:	f043 0301 	orr.w	r3, r3, #1
 8004544:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3730      	adds	r7, #48	@ 0x30
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	58024400 	.word	0x58024400
 8004554:	ffff0007 	.word	0xffff0007

08004558 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e19c      	b.n	80048a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800456c:	4b8a      	ldr	r3, [pc, #552]	@ (8004798 <HAL_RCC_ClockConfig+0x240>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 030f 	and.w	r3, r3, #15
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	429a      	cmp	r2, r3
 8004578:	d910      	bls.n	800459c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800457a:	4b87      	ldr	r3, [pc, #540]	@ (8004798 <HAL_RCC_ClockConfig+0x240>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f023 020f 	bic.w	r2, r3, #15
 8004582:	4985      	ldr	r1, [pc, #532]	@ (8004798 <HAL_RCC_ClockConfig+0x240>)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	4313      	orrs	r3, r2
 8004588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800458a:	4b83      	ldr	r3, [pc, #524]	@ (8004798 <HAL_RCC_ClockConfig+0x240>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	429a      	cmp	r2, r3
 8004596:	d001      	beq.n	800459c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e184      	b.n	80048a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d010      	beq.n	80045ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691a      	ldr	r2, [r3, #16]
 80045ac:	4b7b      	ldr	r3, [pc, #492]	@ (800479c <HAL_RCC_ClockConfig+0x244>)
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d908      	bls.n	80045ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80045b8:	4b78      	ldr	r3, [pc, #480]	@ (800479c <HAL_RCC_ClockConfig+0x244>)
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	4975      	ldr	r1, [pc, #468]	@ (800479c <HAL_RCC_ClockConfig+0x244>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0308 	and.w	r3, r3, #8
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d010      	beq.n	80045f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	695a      	ldr	r2, [r3, #20]
 80045da:	4b70      	ldr	r3, [pc, #448]	@ (800479c <HAL_RCC_ClockConfig+0x244>)
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d908      	bls.n	80045f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80045e6:	4b6d      	ldr	r3, [pc, #436]	@ (800479c <HAL_RCC_ClockConfig+0x244>)
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	496a      	ldr	r1, [pc, #424]	@ (800479c <HAL_RCC_ClockConfig+0x244>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0310 	and.w	r3, r3, #16
 8004600:	2b00      	cmp	r3, #0
 8004602:	d010      	beq.n	8004626 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	699a      	ldr	r2, [r3, #24]
 8004608:	4b64      	ldr	r3, [pc, #400]	@ (800479c <HAL_RCC_ClockConfig+0x244>)
 800460a:	69db      	ldr	r3, [r3, #28]
 800460c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004610:	429a      	cmp	r2, r3
 8004612:	d908      	bls.n	8004626 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004614:	4b61      	ldr	r3, [pc, #388]	@ (800479c <HAL_RCC_ClockConfig+0x244>)
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	495e      	ldr	r1, [pc, #376]	@ (800479c <HAL_RCC_ClockConfig+0x244>)
 8004622:	4313      	orrs	r3, r2
 8004624:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0320 	and.w	r3, r3, #32
 800462e:	2b00      	cmp	r3, #0
 8004630:	d010      	beq.n	8004654 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	69da      	ldr	r2, [r3, #28]
 8004636:	4b59      	ldr	r3, [pc, #356]	@ (800479c <HAL_RCC_ClockConfig+0x244>)
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800463e:	429a      	cmp	r2, r3
 8004640:	d908      	bls.n	8004654 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004642:	4b56      	ldr	r3, [pc, #344]	@ (800479c <HAL_RCC_ClockConfig+0x244>)
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	4953      	ldr	r1, [pc, #332]	@ (800479c <HAL_RCC_ClockConfig+0x244>)
 8004650:	4313      	orrs	r3, r2
 8004652:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d010      	beq.n	8004682 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68da      	ldr	r2, [r3, #12]
 8004664:	4b4d      	ldr	r3, [pc, #308]	@ (800479c <HAL_RCC_ClockConfig+0x244>)
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	f003 030f 	and.w	r3, r3, #15
 800466c:	429a      	cmp	r2, r3
 800466e:	d908      	bls.n	8004682 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004670:	4b4a      	ldr	r3, [pc, #296]	@ (800479c <HAL_RCC_ClockConfig+0x244>)
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	f023 020f 	bic.w	r2, r3, #15
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	4947      	ldr	r1, [pc, #284]	@ (800479c <HAL_RCC_ClockConfig+0x244>)
 800467e:	4313      	orrs	r3, r2
 8004680:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d055      	beq.n	800473a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800468e:	4b43      	ldr	r3, [pc, #268]	@ (800479c <HAL_RCC_ClockConfig+0x244>)
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	4940      	ldr	r1, [pc, #256]	@ (800479c <HAL_RCC_ClockConfig+0x244>)
 800469c:	4313      	orrs	r3, r2
 800469e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d107      	bne.n	80046b8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046a8:	4b3c      	ldr	r3, [pc, #240]	@ (800479c <HAL_RCC_ClockConfig+0x244>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d121      	bne.n	80046f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e0f6      	b.n	80048a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	2b03      	cmp	r3, #3
 80046be:	d107      	bne.n	80046d0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046c0:	4b36      	ldr	r3, [pc, #216]	@ (800479c <HAL_RCC_ClockConfig+0x244>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d115      	bne.n	80046f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e0ea      	b.n	80048a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d107      	bne.n	80046e8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046d8:	4b30      	ldr	r3, [pc, #192]	@ (800479c <HAL_RCC_ClockConfig+0x244>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d109      	bne.n	80046f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e0de      	b.n	80048a6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046e8:	4b2c      	ldr	r3, [pc, #176]	@ (800479c <HAL_RCC_ClockConfig+0x244>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0304 	and.w	r3, r3, #4
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e0d6      	b.n	80048a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046f8:	4b28      	ldr	r3, [pc, #160]	@ (800479c <HAL_RCC_ClockConfig+0x244>)
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	f023 0207 	bic.w	r2, r3, #7
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	4925      	ldr	r1, [pc, #148]	@ (800479c <HAL_RCC_ClockConfig+0x244>)
 8004706:	4313      	orrs	r3, r2
 8004708:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800470a:	f7fe fc27 	bl	8002f5c <HAL_GetTick>
 800470e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004710:	e00a      	b.n	8004728 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004712:	f7fe fc23 	bl	8002f5c <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004720:	4293      	cmp	r3, r2
 8004722:	d901      	bls.n	8004728 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e0be      	b.n	80048a6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004728:	4b1c      	ldr	r3, [pc, #112]	@ (800479c <HAL_RCC_ClockConfig+0x244>)
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	00db      	lsls	r3, r3, #3
 8004736:	429a      	cmp	r2, r3
 8004738:	d1eb      	bne.n	8004712 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d010      	beq.n	8004768 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68da      	ldr	r2, [r3, #12]
 800474a:	4b14      	ldr	r3, [pc, #80]	@ (800479c <HAL_RCC_ClockConfig+0x244>)
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	429a      	cmp	r2, r3
 8004754:	d208      	bcs.n	8004768 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004756:	4b11      	ldr	r3, [pc, #68]	@ (800479c <HAL_RCC_ClockConfig+0x244>)
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	f023 020f 	bic.w	r2, r3, #15
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	490e      	ldr	r1, [pc, #56]	@ (800479c <HAL_RCC_ClockConfig+0x244>)
 8004764:	4313      	orrs	r3, r2
 8004766:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004768:	4b0b      	ldr	r3, [pc, #44]	@ (8004798 <HAL_RCC_ClockConfig+0x240>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 030f 	and.w	r3, r3, #15
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	429a      	cmp	r2, r3
 8004774:	d214      	bcs.n	80047a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004776:	4b08      	ldr	r3, [pc, #32]	@ (8004798 <HAL_RCC_ClockConfig+0x240>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f023 020f 	bic.w	r2, r3, #15
 800477e:	4906      	ldr	r1, [pc, #24]	@ (8004798 <HAL_RCC_ClockConfig+0x240>)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	4313      	orrs	r3, r2
 8004784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004786:	4b04      	ldr	r3, [pc, #16]	@ (8004798 <HAL_RCC_ClockConfig+0x240>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 030f 	and.w	r3, r3, #15
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	429a      	cmp	r2, r3
 8004792:	d005      	beq.n	80047a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e086      	b.n	80048a6 <HAL_RCC_ClockConfig+0x34e>
 8004798:	52002000 	.word	0x52002000
 800479c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d010      	beq.n	80047ce <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	691a      	ldr	r2, [r3, #16]
 80047b0:	4b3f      	ldr	r3, [pc, #252]	@ (80048b0 <HAL_RCC_ClockConfig+0x358>)
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d208      	bcs.n	80047ce <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80047bc:	4b3c      	ldr	r3, [pc, #240]	@ (80048b0 <HAL_RCC_ClockConfig+0x358>)
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	4939      	ldr	r1, [pc, #228]	@ (80048b0 <HAL_RCC_ClockConfig+0x358>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0308 	and.w	r3, r3, #8
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d010      	beq.n	80047fc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	695a      	ldr	r2, [r3, #20]
 80047de:	4b34      	ldr	r3, [pc, #208]	@ (80048b0 <HAL_RCC_ClockConfig+0x358>)
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d208      	bcs.n	80047fc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80047ea:	4b31      	ldr	r3, [pc, #196]	@ (80048b0 <HAL_RCC_ClockConfig+0x358>)
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	492e      	ldr	r1, [pc, #184]	@ (80048b0 <HAL_RCC_ClockConfig+0x358>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0310 	and.w	r3, r3, #16
 8004804:	2b00      	cmp	r3, #0
 8004806:	d010      	beq.n	800482a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	699a      	ldr	r2, [r3, #24]
 800480c:	4b28      	ldr	r3, [pc, #160]	@ (80048b0 <HAL_RCC_ClockConfig+0x358>)
 800480e:	69db      	ldr	r3, [r3, #28]
 8004810:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004814:	429a      	cmp	r2, r3
 8004816:	d208      	bcs.n	800482a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004818:	4b25      	ldr	r3, [pc, #148]	@ (80048b0 <HAL_RCC_ClockConfig+0x358>)
 800481a:	69db      	ldr	r3, [r3, #28]
 800481c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	4922      	ldr	r1, [pc, #136]	@ (80048b0 <HAL_RCC_ClockConfig+0x358>)
 8004826:	4313      	orrs	r3, r2
 8004828:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0320 	and.w	r3, r3, #32
 8004832:	2b00      	cmp	r3, #0
 8004834:	d010      	beq.n	8004858 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	69da      	ldr	r2, [r3, #28]
 800483a:	4b1d      	ldr	r3, [pc, #116]	@ (80048b0 <HAL_RCC_ClockConfig+0x358>)
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004842:	429a      	cmp	r2, r3
 8004844:	d208      	bcs.n	8004858 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004846:	4b1a      	ldr	r3, [pc, #104]	@ (80048b0 <HAL_RCC_ClockConfig+0x358>)
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	4917      	ldr	r1, [pc, #92]	@ (80048b0 <HAL_RCC_ClockConfig+0x358>)
 8004854:	4313      	orrs	r3, r2
 8004856:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004858:	f000 f834 	bl	80048c4 <HAL_RCC_GetSysClockFreq>
 800485c:	4602      	mov	r2, r0
 800485e:	4b14      	ldr	r3, [pc, #80]	@ (80048b0 <HAL_RCC_ClockConfig+0x358>)
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	0a1b      	lsrs	r3, r3, #8
 8004864:	f003 030f 	and.w	r3, r3, #15
 8004868:	4912      	ldr	r1, [pc, #72]	@ (80048b4 <HAL_RCC_ClockConfig+0x35c>)
 800486a:	5ccb      	ldrb	r3, [r1, r3]
 800486c:	f003 031f 	and.w	r3, r3, #31
 8004870:	fa22 f303 	lsr.w	r3, r2, r3
 8004874:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004876:	4b0e      	ldr	r3, [pc, #56]	@ (80048b0 <HAL_RCC_ClockConfig+0x358>)
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	f003 030f 	and.w	r3, r3, #15
 800487e:	4a0d      	ldr	r2, [pc, #52]	@ (80048b4 <HAL_RCC_ClockConfig+0x35c>)
 8004880:	5cd3      	ldrb	r3, [r2, r3]
 8004882:	f003 031f 	and.w	r3, r3, #31
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	fa22 f303 	lsr.w	r3, r2, r3
 800488c:	4a0a      	ldr	r2, [pc, #40]	@ (80048b8 <HAL_RCC_ClockConfig+0x360>)
 800488e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004890:	4a0a      	ldr	r2, [pc, #40]	@ (80048bc <HAL_RCC_ClockConfig+0x364>)
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004896:	4b0a      	ldr	r3, [pc, #40]	@ (80048c0 <HAL_RCC_ClockConfig+0x368>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4618      	mov	r0, r3
 800489c:	f7fe fb14 	bl	8002ec8 <HAL_InitTick>
 80048a0:	4603      	mov	r3, r0
 80048a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3718      	adds	r7, #24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	58024400 	.word	0x58024400
 80048b4:	0800b2fc 	.word	0x0800b2fc
 80048b8:	24000004 	.word	0x24000004
 80048bc:	24000000 	.word	0x24000000
 80048c0:	24000024 	.word	0x24000024

080048c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b089      	sub	sp, #36	@ 0x24
 80048c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048ca:	4bb3      	ldr	r3, [pc, #716]	@ (8004b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048d2:	2b18      	cmp	r3, #24
 80048d4:	f200 8155 	bhi.w	8004b82 <HAL_RCC_GetSysClockFreq+0x2be>
 80048d8:	a201      	add	r2, pc, #4	@ (adr r2, 80048e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80048da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048de:	bf00      	nop
 80048e0:	08004945 	.word	0x08004945
 80048e4:	08004b83 	.word	0x08004b83
 80048e8:	08004b83 	.word	0x08004b83
 80048ec:	08004b83 	.word	0x08004b83
 80048f0:	08004b83 	.word	0x08004b83
 80048f4:	08004b83 	.word	0x08004b83
 80048f8:	08004b83 	.word	0x08004b83
 80048fc:	08004b83 	.word	0x08004b83
 8004900:	0800496b 	.word	0x0800496b
 8004904:	08004b83 	.word	0x08004b83
 8004908:	08004b83 	.word	0x08004b83
 800490c:	08004b83 	.word	0x08004b83
 8004910:	08004b83 	.word	0x08004b83
 8004914:	08004b83 	.word	0x08004b83
 8004918:	08004b83 	.word	0x08004b83
 800491c:	08004b83 	.word	0x08004b83
 8004920:	08004971 	.word	0x08004971
 8004924:	08004b83 	.word	0x08004b83
 8004928:	08004b83 	.word	0x08004b83
 800492c:	08004b83 	.word	0x08004b83
 8004930:	08004b83 	.word	0x08004b83
 8004934:	08004b83 	.word	0x08004b83
 8004938:	08004b83 	.word	0x08004b83
 800493c:	08004b83 	.word	0x08004b83
 8004940:	08004977 	.word	0x08004977
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004944:	4b94      	ldr	r3, [pc, #592]	@ (8004b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0320 	and.w	r3, r3, #32
 800494c:	2b00      	cmp	r3, #0
 800494e:	d009      	beq.n	8004964 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004950:	4b91      	ldr	r3, [pc, #580]	@ (8004b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	08db      	lsrs	r3, r3, #3
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	4a90      	ldr	r2, [pc, #576]	@ (8004b9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800495c:	fa22 f303 	lsr.w	r3, r2, r3
 8004960:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004962:	e111      	b.n	8004b88 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004964:	4b8d      	ldr	r3, [pc, #564]	@ (8004b9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004966:	61bb      	str	r3, [r7, #24]
      break;
 8004968:	e10e      	b.n	8004b88 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800496a:	4b8d      	ldr	r3, [pc, #564]	@ (8004ba0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800496c:	61bb      	str	r3, [r7, #24]
      break;
 800496e:	e10b      	b.n	8004b88 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004970:	4b8c      	ldr	r3, [pc, #560]	@ (8004ba4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004972:	61bb      	str	r3, [r7, #24]
      break;
 8004974:	e108      	b.n	8004b88 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004976:	4b88      	ldr	r3, [pc, #544]	@ (8004b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800497a:	f003 0303 	and.w	r3, r3, #3
 800497e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004980:	4b85      	ldr	r3, [pc, #532]	@ (8004b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004984:	091b      	lsrs	r3, r3, #4
 8004986:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800498a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800498c:	4b82      	ldr	r3, [pc, #520]	@ (8004b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800498e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004996:	4b80      	ldr	r3, [pc, #512]	@ (8004b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800499a:	08db      	lsrs	r3, r3, #3
 800499c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	fb02 f303 	mul.w	r3, r2, r3
 80049a6:	ee07 3a90 	vmov	s15, r3
 80049aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ae:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 80e1 	beq.w	8004b7c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2b02      	cmp	r3, #2
 80049be:	f000 8083 	beq.w	8004ac8 <HAL_RCC_GetSysClockFreq+0x204>
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	f200 80a1 	bhi.w	8004b0c <HAL_RCC_GetSysClockFreq+0x248>
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d003      	beq.n	80049d8 <HAL_RCC_GetSysClockFreq+0x114>
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d056      	beq.n	8004a84 <HAL_RCC_GetSysClockFreq+0x1c0>
 80049d6:	e099      	b.n	8004b0c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049d8:	4b6f      	ldr	r3, [pc, #444]	@ (8004b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0320 	and.w	r3, r3, #32
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d02d      	beq.n	8004a40 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049e4:	4b6c      	ldr	r3, [pc, #432]	@ (8004b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	08db      	lsrs	r3, r3, #3
 80049ea:	f003 0303 	and.w	r3, r3, #3
 80049ee:	4a6b      	ldr	r2, [pc, #428]	@ (8004b9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80049f0:	fa22 f303 	lsr.w	r3, r2, r3
 80049f4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	ee07 3a90 	vmov	s15, r3
 80049fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	ee07 3a90 	vmov	s15, r3
 8004a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a0e:	4b62      	ldr	r3, [pc, #392]	@ (8004b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a16:	ee07 3a90 	vmov	s15, r3
 8004a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a22:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004ba8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a3a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004a3e:	e087      	b.n	8004b50 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	ee07 3a90 	vmov	s15, r3
 8004a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a4a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004bac <HAL_RCC_GetSysClockFreq+0x2e8>
 8004a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a52:	4b51      	ldr	r3, [pc, #324]	@ (8004b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a5a:	ee07 3a90 	vmov	s15, r3
 8004a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a62:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a66:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004ba8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004a82:	e065      	b.n	8004b50 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	ee07 3a90 	vmov	s15, r3
 8004a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a8e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004bb0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a96:	4b40      	ldr	r3, [pc, #256]	@ (8004b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a9e:	ee07 3a90 	vmov	s15, r3
 8004aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aa6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004aaa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004ba8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ab6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ac2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004ac6:	e043      	b.n	8004b50 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	ee07 3a90 	vmov	s15, r3
 8004ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ad2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004bb4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ada:	4b2f      	ldr	r3, [pc, #188]	@ (8004b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae2:	ee07 3a90 	vmov	s15, r3
 8004ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aea:	ed97 6a02 	vldr	s12, [r7, #8]
 8004aee:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004ba8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004afa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b06:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004b0a:	e021      	b.n	8004b50 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	ee07 3a90 	vmov	s15, r3
 8004b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b16:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004bb0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8004b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b26:	ee07 3a90 	vmov	s15, r3
 8004b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b32:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004ba8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b4a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004b4e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004b50:	4b11      	ldr	r3, [pc, #68]	@ (8004b98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b54:	0a5b      	lsrs	r3, r3, #9
 8004b56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	ee07 3a90 	vmov	s15, r3
 8004b64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b68:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b74:	ee17 3a90 	vmov	r3, s15
 8004b78:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004b7a:	e005      	b.n	8004b88 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	61bb      	str	r3, [r7, #24]
      break;
 8004b80:	e002      	b.n	8004b88 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004b82:	4b07      	ldr	r3, [pc, #28]	@ (8004ba0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004b84:	61bb      	str	r3, [r7, #24]
      break;
 8004b86:	bf00      	nop
  }

  return sysclockfreq;
 8004b88:	69bb      	ldr	r3, [r7, #24]
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3724      	adds	r7, #36	@ 0x24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	58024400 	.word	0x58024400
 8004b9c:	03d09000 	.word	0x03d09000
 8004ba0:	003d0900 	.word	0x003d0900
 8004ba4:	017d7840 	.word	0x017d7840
 8004ba8:	46000000 	.word	0x46000000
 8004bac:	4c742400 	.word	0x4c742400
 8004bb0:	4a742400 	.word	0x4a742400
 8004bb4:	4bbebc20 	.word	0x4bbebc20

08004bb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004bbe:	f7ff fe81 	bl	80048c4 <HAL_RCC_GetSysClockFreq>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	4b10      	ldr	r3, [pc, #64]	@ (8004c08 <HAL_RCC_GetHCLKFreq+0x50>)
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	0a1b      	lsrs	r3, r3, #8
 8004bca:	f003 030f 	and.w	r3, r3, #15
 8004bce:	490f      	ldr	r1, [pc, #60]	@ (8004c0c <HAL_RCC_GetHCLKFreq+0x54>)
 8004bd0:	5ccb      	ldrb	r3, [r1, r3]
 8004bd2:	f003 031f 	and.w	r3, r3, #31
 8004bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bda:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8004c08 <HAL_RCC_GetHCLKFreq+0x50>)
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	f003 030f 	and.w	r3, r3, #15
 8004be4:	4a09      	ldr	r2, [pc, #36]	@ (8004c0c <HAL_RCC_GetHCLKFreq+0x54>)
 8004be6:	5cd3      	ldrb	r3, [r2, r3]
 8004be8:	f003 031f 	and.w	r3, r3, #31
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf2:	4a07      	ldr	r2, [pc, #28]	@ (8004c10 <HAL_RCC_GetHCLKFreq+0x58>)
 8004bf4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004bf6:	4a07      	ldr	r2, [pc, #28]	@ (8004c14 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004bfc:	4b04      	ldr	r3, [pc, #16]	@ (8004c10 <HAL_RCC_GetHCLKFreq+0x58>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	58024400 	.word	0x58024400
 8004c0c:	0800b2fc 	.word	0x0800b2fc
 8004c10:	24000004 	.word	0x24000004
 8004c14:	24000000 	.word	0x24000000

08004c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004c1c:	f7ff ffcc 	bl	8004bb8 <HAL_RCC_GetHCLKFreq>
 8004c20:	4602      	mov	r2, r0
 8004c22:	4b06      	ldr	r3, [pc, #24]	@ (8004c3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	091b      	lsrs	r3, r3, #4
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	4904      	ldr	r1, [pc, #16]	@ (8004c40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c2e:	5ccb      	ldrb	r3, [r1, r3]
 8004c30:	f003 031f 	and.w	r3, r3, #31
 8004c34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	58024400 	.word	0x58024400
 8004c40:	0800b2fc 	.word	0x0800b2fc

08004c44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004c48:	f7ff ffb6 	bl	8004bb8 <HAL_RCC_GetHCLKFreq>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	4b06      	ldr	r3, [pc, #24]	@ (8004c68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	0a1b      	lsrs	r3, r3, #8
 8004c54:	f003 0307 	and.w	r3, r3, #7
 8004c58:	4904      	ldr	r1, [pc, #16]	@ (8004c6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c5a:	5ccb      	ldrb	r3, [r1, r3]
 8004c5c:	f003 031f 	and.w	r3, r3, #31
 8004c60:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	58024400 	.word	0x58024400
 8004c6c:	0800b2fc 	.word	0x0800b2fc

08004c70 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c74:	b0ca      	sub	sp, #296	@ 0x128
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c82:	2300      	movs	r3, #0
 8004c84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c90:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004c94:	2500      	movs	r5, #0
 8004c96:	ea54 0305 	orrs.w	r3, r4, r5
 8004c9a:	d049      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ca0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ca2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004ca6:	d02f      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004ca8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004cac:	d828      	bhi.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004cae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004cb2:	d01a      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004cb4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004cb8:	d822      	bhi.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d003      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004cbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cc2:	d007      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004cc4:	e01c      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cc6:	4bb8      	ldr	r3, [pc, #736]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cca:	4ab7      	ldr	r2, [pc, #732]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ccc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004cd2:	e01a      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cd8:	3308      	adds	r3, #8
 8004cda:	2102      	movs	r1, #2
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f001 fc8f 	bl	8006600 <RCCEx_PLL2_Config>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004ce8:	e00f      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cee:	3328      	adds	r3, #40	@ 0x28
 8004cf0:	2102      	movs	r1, #2
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f001 fd36 	bl	8006764 <RCCEx_PLL3_Config>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004cfe:	e004      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d06:	e000      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004d08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10a      	bne.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004d12:	4ba5      	ldr	r3, [pc, #660]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d16:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d20:	4aa1      	ldr	r2, [pc, #644]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d22:	430b      	orrs	r3, r1
 8004d24:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d26:	e003      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d38:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004d3c:	f04f 0900 	mov.w	r9, #0
 8004d40:	ea58 0309 	orrs.w	r3, r8, r9
 8004d44:	d047      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d4c:	2b04      	cmp	r3, #4
 8004d4e:	d82a      	bhi.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004d50:	a201      	add	r2, pc, #4	@ (adr r2, 8004d58 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d56:	bf00      	nop
 8004d58:	08004d6d 	.word	0x08004d6d
 8004d5c:	08004d7b 	.word	0x08004d7b
 8004d60:	08004d91 	.word	0x08004d91
 8004d64:	08004daf 	.word	0x08004daf
 8004d68:	08004daf 	.word	0x08004daf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d6c:	4b8e      	ldr	r3, [pc, #568]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d70:	4a8d      	ldr	r2, [pc, #564]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d78:	e01a      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d7e:	3308      	adds	r3, #8
 8004d80:	2100      	movs	r1, #0
 8004d82:	4618      	mov	r0, r3
 8004d84:	f001 fc3c 	bl	8006600 <RCCEx_PLL2_Config>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d8e:	e00f      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d94:	3328      	adds	r3, #40	@ 0x28
 8004d96:	2100      	movs	r1, #0
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f001 fce3 	bl	8006764 <RCCEx_PLL3_Config>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004da4:	e004      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004dac:	e000      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004dae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004db0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10a      	bne.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004db8:	4b7b      	ldr	r3, [pc, #492]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004dba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dbc:	f023 0107 	bic.w	r1, r3, #7
 8004dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dc6:	4a78      	ldr	r2, [pc, #480]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004dc8:	430b      	orrs	r3, r1
 8004dca:	6513      	str	r3, [r2, #80]	@ 0x50
 8004dcc:	e003      	b.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dde:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004de2:	f04f 0b00 	mov.w	fp, #0
 8004de6:	ea5a 030b 	orrs.w	r3, sl, fp
 8004dea:	d04c      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004df2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004df6:	d030      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004df8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004dfc:	d829      	bhi.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004dfe:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e00:	d02d      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004e02:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e04:	d825      	bhi.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004e06:	2b80      	cmp	r3, #128	@ 0x80
 8004e08:	d018      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004e0a:	2b80      	cmp	r3, #128	@ 0x80
 8004e0c:	d821      	bhi.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d002      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004e12:	2b40      	cmp	r3, #64	@ 0x40
 8004e14:	d007      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004e16:	e01c      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e18:	4b63      	ldr	r3, [pc, #396]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e1c:	4a62      	ldr	r2, [pc, #392]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004e24:	e01c      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e2a:	3308      	adds	r3, #8
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f001 fbe6 	bl	8006600 <RCCEx_PLL2_Config>
 8004e34:	4603      	mov	r3, r0
 8004e36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004e3a:	e011      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e40:	3328      	adds	r3, #40	@ 0x28
 8004e42:	2100      	movs	r1, #0
 8004e44:	4618      	mov	r0, r3
 8004e46:	f001 fc8d 	bl	8006764 <RCCEx_PLL3_Config>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004e50:	e006      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e58:	e002      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004e5a:	bf00      	nop
 8004e5c:	e000      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004e5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10a      	bne.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004e68:	4b4f      	ldr	r3, [pc, #316]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e6c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e76:	4a4c      	ldr	r2, [pc, #304]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e78:	430b      	orrs	r3, r1
 8004e7a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e7c:	e003      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004e92:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004e96:	2300      	movs	r3, #0
 8004e98:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004e9c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	d053      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eaa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004eae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004eb2:	d035      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004eb4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004eb8:	d82e      	bhi.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004eba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004ebe:	d031      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004ec0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004ec4:	d828      	bhi.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004ec6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004eca:	d01a      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004ecc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ed0:	d822      	bhi.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004ed6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004eda:	d007      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004edc:	e01c      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ede:	4b32      	ldr	r3, [pc, #200]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee2:	4a31      	ldr	r2, [pc, #196]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ee4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ee8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004eea:	e01c      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ef0:	3308      	adds	r3, #8
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f001 fb83 	bl	8006600 <RCCEx_PLL2_Config>
 8004efa:	4603      	mov	r3, r0
 8004efc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004f00:	e011      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f06:	3328      	adds	r3, #40	@ 0x28
 8004f08:	2100      	movs	r1, #0
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f001 fc2a 	bl	8006764 <RCCEx_PLL3_Config>
 8004f10:	4603      	mov	r3, r0
 8004f12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004f16:	e006      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f1e:	e002      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004f20:	bf00      	nop
 8004f22:	e000      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004f24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10b      	bne.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f32:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004f3e:	4a1a      	ldr	r2, [pc, #104]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004f40:	430b      	orrs	r3, r1
 8004f42:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f44:	e003      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f56:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004f5a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004f5e:	2300      	movs	r3, #0
 8004f60:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004f64:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004f68:	460b      	mov	r3, r1
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	d056      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f72:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004f76:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f7a:	d038      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004f7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f80:	d831      	bhi.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004f82:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004f86:	d034      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004f88:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004f8c:	d82b      	bhi.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004f8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f92:	d01d      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004f94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f98:	d825      	bhi.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d006      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004f9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fa2:	d00a      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004fa4:	e01f      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004fa6:	bf00      	nop
 8004fa8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fac:	4ba2      	ldr	r3, [pc, #648]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb0:	4aa1      	ldr	r2, [pc, #644]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004fb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004fb8:	e01c      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fbe:	3308      	adds	r3, #8
 8004fc0:	2100      	movs	r1, #0
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f001 fb1c 	bl	8006600 <RCCEx_PLL2_Config>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004fce:	e011      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fd4:	3328      	adds	r3, #40	@ 0x28
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f001 fbc3 	bl	8006764 <RCCEx_PLL3_Config>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004fe4:	e006      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fec:	e002      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004fee:	bf00      	nop
 8004ff0:	e000      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004ff2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ff4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10b      	bne.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004ffc:	4b8e      	ldr	r3, [pc, #568]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005000:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005008:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800500c:	4a8a      	ldr	r2, [pc, #552]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800500e:	430b      	orrs	r3, r1
 8005010:	6593      	str	r3, [r2, #88]	@ 0x58
 8005012:	e003      	b.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005014:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005018:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800501c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005024:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005028:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800502c:	2300      	movs	r3, #0
 800502e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005032:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005036:	460b      	mov	r3, r1
 8005038:	4313      	orrs	r3, r2
 800503a:	d03a      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800503c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005042:	2b30      	cmp	r3, #48	@ 0x30
 8005044:	d01f      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005046:	2b30      	cmp	r3, #48	@ 0x30
 8005048:	d819      	bhi.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800504a:	2b20      	cmp	r3, #32
 800504c:	d00c      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800504e:	2b20      	cmp	r3, #32
 8005050:	d815      	bhi.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005052:	2b00      	cmp	r3, #0
 8005054:	d019      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005056:	2b10      	cmp	r3, #16
 8005058:	d111      	bne.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800505a:	4b77      	ldr	r3, [pc, #476]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800505c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505e:	4a76      	ldr	r2, [pc, #472]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005060:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005064:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005066:	e011      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800506c:	3308      	adds	r3, #8
 800506e:	2102      	movs	r1, #2
 8005070:	4618      	mov	r0, r3
 8005072:	f001 fac5 	bl	8006600 <RCCEx_PLL2_Config>
 8005076:	4603      	mov	r3, r0
 8005078:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800507c:	e006      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005084:	e002      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005086:	bf00      	nop
 8005088:	e000      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800508a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800508c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10a      	bne.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005094:	4b68      	ldr	r3, [pc, #416]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005096:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005098:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800509c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050a2:	4a65      	ldr	r2, [pc, #404]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050a4:	430b      	orrs	r3, r1
 80050a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80050a8:	e003      	b.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80050b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ba:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80050be:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80050c2:	2300      	movs	r3, #0
 80050c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80050c8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80050cc:	460b      	mov	r3, r1
 80050ce:	4313      	orrs	r3, r2
 80050d0:	d051      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80050d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050dc:	d035      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80050de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050e2:	d82e      	bhi.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80050e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80050e8:	d031      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80050ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80050ee:	d828      	bhi.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80050f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050f4:	d01a      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80050f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050fa:	d822      	bhi.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d003      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005100:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005104:	d007      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005106:	e01c      	b.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005108:	4b4b      	ldr	r3, [pc, #300]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800510a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800510c:	4a4a      	ldr	r2, [pc, #296]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800510e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005112:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005114:	e01c      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800511a:	3308      	adds	r3, #8
 800511c:	2100      	movs	r1, #0
 800511e:	4618      	mov	r0, r3
 8005120:	f001 fa6e 	bl	8006600 <RCCEx_PLL2_Config>
 8005124:	4603      	mov	r3, r0
 8005126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800512a:	e011      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800512c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005130:	3328      	adds	r3, #40	@ 0x28
 8005132:	2100      	movs	r1, #0
 8005134:	4618      	mov	r0, r3
 8005136:	f001 fb15 	bl	8006764 <RCCEx_PLL3_Config>
 800513a:	4603      	mov	r3, r0
 800513c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005140:	e006      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005148:	e002      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800514a:	bf00      	nop
 800514c:	e000      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800514e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005150:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10a      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005158:	4b37      	ldr	r3, [pc, #220]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800515a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800515c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005166:	4a34      	ldr	r2, [pc, #208]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005168:	430b      	orrs	r3, r1
 800516a:	6513      	str	r3, [r2, #80]	@ 0x50
 800516c:	e003      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800516e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005172:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800517a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005182:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005186:	2300      	movs	r3, #0
 8005188:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800518c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005190:	460b      	mov	r3, r1
 8005192:	4313      	orrs	r3, r2
 8005194:	d056      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800519a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800519c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80051a0:	d033      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80051a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80051a6:	d82c      	bhi.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80051a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80051ac:	d02f      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80051ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80051b2:	d826      	bhi.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80051b4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80051b8:	d02b      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80051ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80051be:	d820      	bhi.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80051c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051c4:	d012      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80051c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051ca:	d81a      	bhi.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d022      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80051d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051d4:	d115      	bne.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051da:	3308      	adds	r3, #8
 80051dc:	2101      	movs	r1, #1
 80051de:	4618      	mov	r0, r3
 80051e0:	f001 fa0e 	bl	8006600 <RCCEx_PLL2_Config>
 80051e4:	4603      	mov	r3, r0
 80051e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80051ea:	e015      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051f0:	3328      	adds	r3, #40	@ 0x28
 80051f2:	2101      	movs	r1, #1
 80051f4:	4618      	mov	r0, r3
 80051f6:	f001 fab5 	bl	8006764 <RCCEx_PLL3_Config>
 80051fa:	4603      	mov	r3, r0
 80051fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005200:	e00a      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005208:	e006      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800520a:	bf00      	nop
 800520c:	e004      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800520e:	bf00      	nop
 8005210:	e002      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005212:	bf00      	nop
 8005214:	e000      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005216:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005218:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10d      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005220:	4b05      	ldr	r3, [pc, #20]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005224:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800522c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800522e:	4a02      	ldr	r2, [pc, #8]	@ (8005238 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005230:	430b      	orrs	r3, r1
 8005232:	6513      	str	r3, [r2, #80]	@ 0x50
 8005234:	e006      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005236:	bf00      	nop
 8005238:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800523c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005240:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005250:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005254:	2300      	movs	r3, #0
 8005256:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800525a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800525e:	460b      	mov	r3, r1
 8005260:	4313      	orrs	r3, r2
 8005262:	d055      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005268:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800526c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005270:	d033      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005272:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005276:	d82c      	bhi.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005278:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800527c:	d02f      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800527e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005282:	d826      	bhi.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005284:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005288:	d02b      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800528a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800528e:	d820      	bhi.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005290:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005294:	d012      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005296:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800529a:	d81a      	bhi.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800529c:	2b00      	cmp	r3, #0
 800529e:	d022      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80052a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052a4:	d115      	bne.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052aa:	3308      	adds	r3, #8
 80052ac:	2101      	movs	r1, #1
 80052ae:	4618      	mov	r0, r3
 80052b0:	f001 f9a6 	bl	8006600 <RCCEx_PLL2_Config>
 80052b4:	4603      	mov	r3, r0
 80052b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80052ba:	e015      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052c0:	3328      	adds	r3, #40	@ 0x28
 80052c2:	2101      	movs	r1, #1
 80052c4:	4618      	mov	r0, r3
 80052c6:	f001 fa4d 	bl	8006764 <RCCEx_PLL3_Config>
 80052ca:	4603      	mov	r3, r0
 80052cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80052d0:	e00a      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052d8:	e006      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80052da:	bf00      	nop
 80052dc:	e004      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80052de:	bf00      	nop
 80052e0:	e002      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80052e2:	bf00      	nop
 80052e4:	e000      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80052e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10b      	bne.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80052f0:	4ba3      	ldr	r3, [pc, #652]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052f4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80052f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005300:	4a9f      	ldr	r2, [pc, #636]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005302:	430b      	orrs	r3, r1
 8005304:	6593      	str	r3, [r2, #88]	@ 0x58
 8005306:	e003      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005308:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800530c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005318:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800531c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005320:	2300      	movs	r3, #0
 8005322:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005326:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800532a:	460b      	mov	r3, r1
 800532c:	4313      	orrs	r3, r2
 800532e:	d037      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005336:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800533a:	d00e      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800533c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005340:	d816      	bhi.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005342:	2b00      	cmp	r3, #0
 8005344:	d018      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005346:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800534a:	d111      	bne.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800534c:	4b8c      	ldr	r3, [pc, #560]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800534e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005350:	4a8b      	ldr	r2, [pc, #556]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005352:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005356:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005358:	e00f      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800535a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800535e:	3308      	adds	r3, #8
 8005360:	2101      	movs	r1, #1
 8005362:	4618      	mov	r0, r3
 8005364:	f001 f94c 	bl	8006600 <RCCEx_PLL2_Config>
 8005368:	4603      	mov	r3, r0
 800536a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800536e:	e004      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005376:	e000      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005378:	bf00      	nop
    }

    if (ret == HAL_OK)
 800537a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800537e:	2b00      	cmp	r3, #0
 8005380:	d10a      	bne.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005382:	4b7f      	ldr	r3, [pc, #508]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005384:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005386:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800538a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800538e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005390:	4a7b      	ldr	r2, [pc, #492]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005392:	430b      	orrs	r3, r1
 8005394:	6513      	str	r3, [r2, #80]	@ 0x50
 8005396:	e003      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005398:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800539c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80053a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80053ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80053b0:	2300      	movs	r3, #0
 80053b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80053b6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80053ba:	460b      	mov	r3, r1
 80053bc:	4313      	orrs	r3, r2
 80053be:	d039      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80053c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053c6:	2b03      	cmp	r3, #3
 80053c8:	d81c      	bhi.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80053ca:	a201      	add	r2, pc, #4	@ (adr r2, 80053d0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80053cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d0:	0800540d 	.word	0x0800540d
 80053d4:	080053e1 	.word	0x080053e1
 80053d8:	080053ef 	.word	0x080053ef
 80053dc:	0800540d 	.word	0x0800540d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053e0:	4b67      	ldr	r3, [pc, #412]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e4:	4a66      	ldr	r2, [pc, #408]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80053ec:	e00f      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80053ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053f2:	3308      	adds	r3, #8
 80053f4:	2102      	movs	r1, #2
 80053f6:	4618      	mov	r0, r3
 80053f8:	f001 f902 	bl	8006600 <RCCEx_PLL2_Config>
 80053fc:	4603      	mov	r3, r0
 80053fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005402:	e004      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800540a:	e000      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800540c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800540e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005412:	2b00      	cmp	r3, #0
 8005414:	d10a      	bne.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005416:	4b5a      	ldr	r3, [pc, #360]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800541a:	f023 0103 	bic.w	r1, r3, #3
 800541e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005422:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005424:	4a56      	ldr	r2, [pc, #344]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005426:	430b      	orrs	r3, r1
 8005428:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800542a:	e003      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800542c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005430:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005440:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005444:	2300      	movs	r3, #0
 8005446:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800544a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800544e:	460b      	mov	r3, r1
 8005450:	4313      	orrs	r3, r2
 8005452:	f000 809f 	beq.w	8005594 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005456:	4b4b      	ldr	r3, [pc, #300]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a4a      	ldr	r2, [pc, #296]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800545c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005460:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005462:	f7fd fd7b 	bl	8002f5c <HAL_GetTick>
 8005466:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800546a:	e00b      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800546c:	f7fd fd76 	bl	8002f5c <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	2b64      	cmp	r3, #100	@ 0x64
 800547a:	d903      	bls.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005482:	e005      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005484:	4b3f      	ldr	r3, [pc, #252]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800548c:	2b00      	cmp	r3, #0
 800548e:	d0ed      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005490:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005494:	2b00      	cmp	r3, #0
 8005496:	d179      	bne.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005498:	4b39      	ldr	r3, [pc, #228]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800549a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800549c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80054a4:	4053      	eors	r3, r2
 80054a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d015      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054ae:	4b34      	ldr	r3, [pc, #208]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054b6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054ba:	4b31      	ldr	r3, [pc, #196]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054be:	4a30      	ldr	r2, [pc, #192]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054c4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054c6:	4b2e      	ldr	r3, [pc, #184]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054ca:	4a2d      	ldr	r2, [pc, #180]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054d0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80054d2:	4a2b      	ldr	r2, [pc, #172]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80054d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80054d8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80054da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80054e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054e6:	d118      	bne.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e8:	f7fd fd38 	bl	8002f5c <HAL_GetTick>
 80054ec:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054f0:	e00d      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054f2:	f7fd fd33 	bl	8002f5c <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80054fc:	1ad2      	subs	r2, r2, r3
 80054fe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005502:	429a      	cmp	r2, r3
 8005504:	d903      	bls.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800550c:	e005      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800550e:	4b1c      	ldr	r3, [pc, #112]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d0eb      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800551a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800551e:	2b00      	cmp	r3, #0
 8005520:	d129      	bne.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005526:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800552a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800552e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005532:	d10e      	bne.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005534:	4b12      	ldr	r3, [pc, #72]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800553c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005540:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005544:	091a      	lsrs	r2, r3, #4
 8005546:	4b10      	ldr	r3, [pc, #64]	@ (8005588 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005548:	4013      	ands	r3, r2
 800554a:	4a0d      	ldr	r2, [pc, #52]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800554c:	430b      	orrs	r3, r1
 800554e:	6113      	str	r3, [r2, #16]
 8005550:	e005      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005552:	4b0b      	ldr	r3, [pc, #44]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	4a0a      	ldr	r2, [pc, #40]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005558:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800555c:	6113      	str	r3, [r2, #16]
 800555e:	4b08      	ldr	r3, [pc, #32]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005560:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005566:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800556a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800556e:	4a04      	ldr	r2, [pc, #16]	@ (8005580 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005570:	430b      	orrs	r3, r1
 8005572:	6713      	str	r3, [r2, #112]	@ 0x70
 8005574:	e00e      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005576:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800557a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800557e:	e009      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005580:	58024400 	.word	0x58024400
 8005584:	58024800 	.word	0x58024800
 8005588:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800558c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005590:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559c:	f002 0301 	and.w	r3, r2, #1
 80055a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80055a4:	2300      	movs	r3, #0
 80055a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80055aa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80055ae:	460b      	mov	r3, r1
 80055b0:	4313      	orrs	r3, r2
 80055b2:	f000 8089 	beq.w	80056c8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80055b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055bc:	2b28      	cmp	r3, #40	@ 0x28
 80055be:	d86b      	bhi.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80055c0:	a201      	add	r2, pc, #4	@ (adr r2, 80055c8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80055c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c6:	bf00      	nop
 80055c8:	080056a1 	.word	0x080056a1
 80055cc:	08005699 	.word	0x08005699
 80055d0:	08005699 	.word	0x08005699
 80055d4:	08005699 	.word	0x08005699
 80055d8:	08005699 	.word	0x08005699
 80055dc:	08005699 	.word	0x08005699
 80055e0:	08005699 	.word	0x08005699
 80055e4:	08005699 	.word	0x08005699
 80055e8:	0800566d 	.word	0x0800566d
 80055ec:	08005699 	.word	0x08005699
 80055f0:	08005699 	.word	0x08005699
 80055f4:	08005699 	.word	0x08005699
 80055f8:	08005699 	.word	0x08005699
 80055fc:	08005699 	.word	0x08005699
 8005600:	08005699 	.word	0x08005699
 8005604:	08005699 	.word	0x08005699
 8005608:	08005683 	.word	0x08005683
 800560c:	08005699 	.word	0x08005699
 8005610:	08005699 	.word	0x08005699
 8005614:	08005699 	.word	0x08005699
 8005618:	08005699 	.word	0x08005699
 800561c:	08005699 	.word	0x08005699
 8005620:	08005699 	.word	0x08005699
 8005624:	08005699 	.word	0x08005699
 8005628:	080056a1 	.word	0x080056a1
 800562c:	08005699 	.word	0x08005699
 8005630:	08005699 	.word	0x08005699
 8005634:	08005699 	.word	0x08005699
 8005638:	08005699 	.word	0x08005699
 800563c:	08005699 	.word	0x08005699
 8005640:	08005699 	.word	0x08005699
 8005644:	08005699 	.word	0x08005699
 8005648:	080056a1 	.word	0x080056a1
 800564c:	08005699 	.word	0x08005699
 8005650:	08005699 	.word	0x08005699
 8005654:	08005699 	.word	0x08005699
 8005658:	08005699 	.word	0x08005699
 800565c:	08005699 	.word	0x08005699
 8005660:	08005699 	.word	0x08005699
 8005664:	08005699 	.word	0x08005699
 8005668:	080056a1 	.word	0x080056a1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800566c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005670:	3308      	adds	r3, #8
 8005672:	2101      	movs	r1, #1
 8005674:	4618      	mov	r0, r3
 8005676:	f000 ffc3 	bl	8006600 <RCCEx_PLL2_Config>
 800567a:	4603      	mov	r3, r0
 800567c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005680:	e00f      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005686:	3328      	adds	r3, #40	@ 0x28
 8005688:	2101      	movs	r1, #1
 800568a:	4618      	mov	r0, r3
 800568c:	f001 f86a 	bl	8006764 <RCCEx_PLL3_Config>
 8005690:	4603      	mov	r3, r0
 8005692:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005696:	e004      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800569e:	e000      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80056a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10a      	bne.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80056aa:	4bbf      	ldr	r3, [pc, #764]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80056ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ae:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80056b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056b8:	4abb      	ldr	r2, [pc, #748]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80056ba:	430b      	orrs	r3, r1
 80056bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80056be:	e003      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80056c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d0:	f002 0302 	and.w	r3, r2, #2
 80056d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80056d8:	2300      	movs	r3, #0
 80056da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80056de:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80056e2:	460b      	mov	r3, r1
 80056e4:	4313      	orrs	r3, r2
 80056e6:	d041      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80056e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056ee:	2b05      	cmp	r3, #5
 80056f0:	d824      	bhi.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80056f2:	a201      	add	r2, pc, #4	@ (adr r2, 80056f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80056f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f8:	08005745 	.word	0x08005745
 80056fc:	08005711 	.word	0x08005711
 8005700:	08005727 	.word	0x08005727
 8005704:	08005745 	.word	0x08005745
 8005708:	08005745 	.word	0x08005745
 800570c:	08005745 	.word	0x08005745
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005714:	3308      	adds	r3, #8
 8005716:	2101      	movs	r1, #1
 8005718:	4618      	mov	r0, r3
 800571a:	f000 ff71 	bl	8006600 <RCCEx_PLL2_Config>
 800571e:	4603      	mov	r3, r0
 8005720:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005724:	e00f      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800572a:	3328      	adds	r3, #40	@ 0x28
 800572c:	2101      	movs	r1, #1
 800572e:	4618      	mov	r0, r3
 8005730:	f001 f818 	bl	8006764 <RCCEx_PLL3_Config>
 8005734:	4603      	mov	r3, r0
 8005736:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800573a:	e004      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005742:	e000      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005744:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005746:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10a      	bne.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800574e:	4b96      	ldr	r3, [pc, #600]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005752:	f023 0107 	bic.w	r1, r3, #7
 8005756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800575a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800575c:	4a92      	ldr	r2, [pc, #584]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800575e:	430b      	orrs	r3, r1
 8005760:	6553      	str	r3, [r2, #84]	@ 0x54
 8005762:	e003      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005764:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005768:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800576c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005774:	f002 0304 	and.w	r3, r2, #4
 8005778:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800577c:	2300      	movs	r3, #0
 800577e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005782:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005786:	460b      	mov	r3, r1
 8005788:	4313      	orrs	r3, r2
 800578a:	d044      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800578c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005790:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005794:	2b05      	cmp	r3, #5
 8005796:	d825      	bhi.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005798:	a201      	add	r2, pc, #4	@ (adr r2, 80057a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800579a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579e:	bf00      	nop
 80057a0:	080057ed 	.word	0x080057ed
 80057a4:	080057b9 	.word	0x080057b9
 80057a8:	080057cf 	.word	0x080057cf
 80057ac:	080057ed 	.word	0x080057ed
 80057b0:	080057ed 	.word	0x080057ed
 80057b4:	080057ed 	.word	0x080057ed
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80057b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057bc:	3308      	adds	r3, #8
 80057be:	2101      	movs	r1, #1
 80057c0:	4618      	mov	r0, r3
 80057c2:	f000 ff1d 	bl	8006600 <RCCEx_PLL2_Config>
 80057c6:	4603      	mov	r3, r0
 80057c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80057cc:	e00f      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057d2:	3328      	adds	r3, #40	@ 0x28
 80057d4:	2101      	movs	r1, #1
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 ffc4 	bl	8006764 <RCCEx_PLL3_Config>
 80057dc:	4603      	mov	r3, r0
 80057de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80057e2:	e004      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057ea:	e000      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80057ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10b      	bne.n	800580e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80057f6:	4b6c      	ldr	r3, [pc, #432]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80057f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057fa:	f023 0107 	bic.w	r1, r3, #7
 80057fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005802:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005806:	4a68      	ldr	r2, [pc, #416]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005808:	430b      	orrs	r3, r1
 800580a:	6593      	str	r3, [r2, #88]	@ 0x58
 800580c:	e003      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800580e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005812:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800581a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581e:	f002 0320 	and.w	r3, r2, #32
 8005822:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005826:	2300      	movs	r3, #0
 8005828:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800582c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005830:	460b      	mov	r3, r1
 8005832:	4313      	orrs	r3, r2
 8005834:	d055      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800583a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800583e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005842:	d033      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005844:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005848:	d82c      	bhi.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800584a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800584e:	d02f      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005850:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005854:	d826      	bhi.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005856:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800585a:	d02b      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800585c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005860:	d820      	bhi.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005862:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005866:	d012      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005868:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800586c:	d81a      	bhi.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800586e:	2b00      	cmp	r3, #0
 8005870:	d022      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005872:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005876:	d115      	bne.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800587c:	3308      	adds	r3, #8
 800587e:	2100      	movs	r1, #0
 8005880:	4618      	mov	r0, r3
 8005882:	f000 febd 	bl	8006600 <RCCEx_PLL2_Config>
 8005886:	4603      	mov	r3, r0
 8005888:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800588c:	e015      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800588e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005892:	3328      	adds	r3, #40	@ 0x28
 8005894:	2102      	movs	r1, #2
 8005896:	4618      	mov	r0, r3
 8005898:	f000 ff64 	bl	8006764 <RCCEx_PLL3_Config>
 800589c:	4603      	mov	r3, r0
 800589e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80058a2:	e00a      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058aa:	e006      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80058ac:	bf00      	nop
 80058ae:	e004      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80058b0:	bf00      	nop
 80058b2:	e002      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80058b4:	bf00      	nop
 80058b6:	e000      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80058b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d10b      	bne.n	80058da <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80058c2:	4b39      	ldr	r3, [pc, #228]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80058c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058c6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80058ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058d2:	4a35      	ldr	r2, [pc, #212]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80058d4:	430b      	orrs	r3, r1
 80058d6:	6553      	str	r3, [r2, #84]	@ 0x54
 80058d8:	e003      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80058e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ea:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80058ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80058f2:	2300      	movs	r3, #0
 80058f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80058f8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80058fc:	460b      	mov	r3, r1
 80058fe:	4313      	orrs	r3, r2
 8005900:	d058      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005906:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800590a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800590e:	d033      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005910:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005914:	d82c      	bhi.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005916:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800591a:	d02f      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800591c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005920:	d826      	bhi.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005922:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005926:	d02b      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005928:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800592c:	d820      	bhi.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800592e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005932:	d012      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005934:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005938:	d81a      	bhi.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800593a:	2b00      	cmp	r3, #0
 800593c:	d022      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800593e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005942:	d115      	bne.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005948:	3308      	adds	r3, #8
 800594a:	2100      	movs	r1, #0
 800594c:	4618      	mov	r0, r3
 800594e:	f000 fe57 	bl	8006600 <RCCEx_PLL2_Config>
 8005952:	4603      	mov	r3, r0
 8005954:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005958:	e015      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800595a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800595e:	3328      	adds	r3, #40	@ 0x28
 8005960:	2102      	movs	r1, #2
 8005962:	4618      	mov	r0, r3
 8005964:	f000 fefe 	bl	8006764 <RCCEx_PLL3_Config>
 8005968:	4603      	mov	r3, r0
 800596a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800596e:	e00a      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005976:	e006      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005978:	bf00      	nop
 800597a:	e004      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800597c:	bf00      	nop
 800597e:	e002      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005980:	bf00      	nop
 8005982:	e000      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005984:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10e      	bne.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800598e:	4b06      	ldr	r3, [pc, #24]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005992:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800599a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800599e:	4a02      	ldr	r2, [pc, #8]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80059a0:	430b      	orrs	r3, r1
 80059a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80059a4:	e006      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80059a6:	bf00      	nop
 80059a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80059b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059bc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80059c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80059c4:	2300      	movs	r3, #0
 80059c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80059ca:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80059ce:	460b      	mov	r3, r1
 80059d0:	4313      	orrs	r3, r2
 80059d2:	d055      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80059d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80059dc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80059e0:	d033      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80059e2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80059e6:	d82c      	bhi.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80059e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059ec:	d02f      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80059ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059f2:	d826      	bhi.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80059f4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80059f8:	d02b      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80059fa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80059fe:	d820      	bhi.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005a00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a04:	d012      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005a06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a0a:	d81a      	bhi.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d022      	beq.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005a10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a14:	d115      	bne.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a1a:	3308      	adds	r3, #8
 8005a1c:	2100      	movs	r1, #0
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 fdee 	bl	8006600 <RCCEx_PLL2_Config>
 8005a24:	4603      	mov	r3, r0
 8005a26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005a2a:	e015      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a30:	3328      	adds	r3, #40	@ 0x28
 8005a32:	2102      	movs	r1, #2
 8005a34:	4618      	mov	r0, r3
 8005a36:	f000 fe95 	bl	8006764 <RCCEx_PLL3_Config>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005a40:	e00a      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a48:	e006      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005a4a:	bf00      	nop
 8005a4c:	e004      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005a4e:	bf00      	nop
 8005a50:	e002      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005a52:	bf00      	nop
 8005a54:	e000      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005a56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10b      	bne.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005a60:	4ba1      	ldr	r3, [pc, #644]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a64:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005a70:	4a9d      	ldr	r2, [pc, #628]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a72:	430b      	orrs	r3, r1
 8005a74:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a76:	e003      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a88:	f002 0308 	and.w	r3, r2, #8
 8005a8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a90:	2300      	movs	r3, #0
 8005a92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005a96:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	d01e      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005aa8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aac:	d10c      	bne.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab2:	3328      	adds	r3, #40	@ 0x28
 8005ab4:	2102      	movs	r1, #2
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 fe54 	bl	8006764 <RCCEx_PLL3_Config>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d002      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005ac8:	4b87      	ldr	r3, [pc, #540]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005aca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005acc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ad8:	4a83      	ldr	r2, [pc, #524]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ada:	430b      	orrs	r3, r1
 8005adc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae6:	f002 0310 	and.w	r3, r2, #16
 8005aea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005aee:	2300      	movs	r3, #0
 8005af0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005af4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005af8:	460b      	mov	r3, r1
 8005afa:	4313      	orrs	r3, r2
 8005afc:	d01e      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b0a:	d10c      	bne.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b10:	3328      	adds	r3, #40	@ 0x28
 8005b12:	2102      	movs	r1, #2
 8005b14:	4618      	mov	r0, r3
 8005b16:	f000 fe25 	bl	8006764 <RCCEx_PLL3_Config>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d002      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005b26:	4b70      	ldr	r3, [pc, #448]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b2a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b36:	4a6c      	ldr	r2, [pc, #432]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b38:	430b      	orrs	r3, r1
 8005b3a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b44:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005b48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b52:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005b56:	460b      	mov	r3, r1
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	d03e      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005b64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b68:	d022      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005b6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b6e:	d81b      	bhi.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005b74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b78:	d00b      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005b7a:	e015      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b80:	3308      	adds	r3, #8
 8005b82:	2100      	movs	r1, #0
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 fd3b 	bl	8006600 <RCCEx_PLL2_Config>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005b90:	e00f      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b96:	3328      	adds	r3, #40	@ 0x28
 8005b98:	2102      	movs	r1, #2
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 fde2 	bl	8006764 <RCCEx_PLL3_Config>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005ba6:	e004      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bae:	e000      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005bb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10b      	bne.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005bba:	4b4b      	ldr	r3, [pc, #300]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bbe:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005bca:	4a47      	ldr	r2, [pc, #284]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005bcc:	430b      	orrs	r3, r1
 8005bce:	6593      	str	r3, [r2, #88]	@ 0x58
 8005bd0:	e003      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005be6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005be8:	2300      	movs	r3, #0
 8005bea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005bec:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	d03b      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bfe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005c02:	d01f      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005c04:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005c08:	d818      	bhi.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005c0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c0e:	d003      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005c10:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c14:	d007      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005c16:	e011      	b.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c18:	4b33      	ldr	r3, [pc, #204]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c1c:	4a32      	ldr	r2, [pc, #200]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005c24:	e00f      	b.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c2a:	3328      	adds	r3, #40	@ 0x28
 8005c2c:	2101      	movs	r1, #1
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f000 fd98 	bl	8006764 <RCCEx_PLL3_Config>
 8005c34:	4603      	mov	r3, r0
 8005c36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005c3a:	e004      	b.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c42:	e000      	b.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005c44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d10b      	bne.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c4e:	4b26      	ldr	r3, [pc, #152]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c52:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c5e:	4a22      	ldr	r2, [pc, #136]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c60:	430b      	orrs	r3, r1
 8005c62:	6553      	str	r3, [r2, #84]	@ 0x54
 8005c64:	e003      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c76:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005c7a:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	677b      	str	r3, [r7, #116]	@ 0x74
 8005c80:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005c84:	460b      	mov	r3, r1
 8005c86:	4313      	orrs	r3, r2
 8005c88:	d034      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d003      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005c94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c98:	d007      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005c9a:	e011      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c9c:	4b12      	ldr	r3, [pc, #72]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca0:	4a11      	ldr	r2, [pc, #68]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ca2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ca6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005ca8:	e00e      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cae:	3308      	adds	r3, #8
 8005cb0:	2102      	movs	r1, #2
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 fca4 	bl	8006600 <RCCEx_PLL2_Config>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005cbe:	e003      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10d      	bne.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005cd0:	4b05      	ldr	r3, [pc, #20]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cd4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cde:	4a02      	ldr	r2, [pc, #8]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ce0:	430b      	orrs	r3, r1
 8005ce2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ce4:	e006      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005ce6:	bf00      	nop
 8005ce8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cf0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005d00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d02:	2300      	movs	r3, #0
 8005d04:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d06:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	d00c      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d14:	3328      	adds	r3, #40	@ 0x28
 8005d16:	2102      	movs	r1, #2
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f000 fd23 	bl	8006764 <RCCEx_PLL3_Config>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d002      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d32:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005d36:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d38:	2300      	movs	r3, #0
 8005d3a:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d3c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005d40:	460b      	mov	r3, r1
 8005d42:	4313      	orrs	r3, r2
 8005d44:	d038      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d52:	d018      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005d54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d58:	d811      	bhi.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005d5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d5e:	d014      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005d60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d64:	d80b      	bhi.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d011      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005d6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d6e:	d106      	bne.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d70:	4bc3      	ldr	r3, [pc, #780]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d74:	4ac2      	ldr	r2, [pc, #776]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005d7c:	e008      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d84:	e004      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005d86:	bf00      	nop
 8005d88:	e002      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005d8a:	bf00      	nop
 8005d8c:	e000      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005d8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d10b      	bne.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d98:	4bb9      	ldr	r3, [pc, #740]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d9c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005da4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005da8:	4ab5      	ldr	r2, [pc, #724]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005daa:	430b      	orrs	r3, r1
 8005dac:	6553      	str	r3, [r2, #84]	@ 0x54
 8005dae:	e003      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005db0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005db4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005dc4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005dca:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005dce:	460b      	mov	r3, r1
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	d009      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005dd4:	4baa      	ldr	r3, [pc, #680]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005dd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dd8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005de2:	4aa7      	ldr	r2, [pc, #668]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005de4:	430b      	orrs	r3, r1
 8005de6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005df4:	653b      	str	r3, [r7, #80]	@ 0x50
 8005df6:	2300      	movs	r3, #0
 8005df8:	657b      	str	r3, [r7, #84]	@ 0x54
 8005dfa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005dfe:	460b      	mov	r3, r1
 8005e00:	4313      	orrs	r3, r2
 8005e02:	d00a      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005e04:	4b9e      	ldr	r3, [pc, #632]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e10:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005e14:	4a9a      	ldr	r2, [pc, #616]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e16:	430b      	orrs	r3, r1
 8005e18:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e22:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005e26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e28:	2300      	movs	r3, #0
 8005e2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e2c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005e30:	460b      	mov	r3, r1
 8005e32:	4313      	orrs	r3, r2
 8005e34:	d009      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005e36:	4b92      	ldr	r3, [pc, #584]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e3a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e44:	4a8e      	ldr	r2, [pc, #568]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e46:	430b      	orrs	r3, r1
 8005e48:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e52:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005e56:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e58:	2300      	movs	r3, #0
 8005e5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e5c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005e60:	460b      	mov	r3, r1
 8005e62:	4313      	orrs	r3, r2
 8005e64:	d00e      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e66:	4b86      	ldr	r3, [pc, #536]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	4a85      	ldr	r2, [pc, #532]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e6c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005e70:	6113      	str	r3, [r2, #16]
 8005e72:	4b83      	ldr	r3, [pc, #524]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e74:	6919      	ldr	r1, [r3, #16]
 8005e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e7a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005e7e:	4a80      	ldr	r2, [pc, #512]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005e80:	430b      	orrs	r3, r1
 8005e82:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005e90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e92:	2300      	movs	r3, #0
 8005e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e96:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	d009      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005ea0:	4b77      	ldr	r3, [pc, #476]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ea2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ea4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eae:	4a74      	ldr	r2, [pc, #464]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005eb0:	430b      	orrs	r3, r1
 8005eb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ebc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005ec0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ec6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005eca:	460b      	mov	r3, r1
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	d00a      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005ed0:	4b6b      	ldr	r3, [pc, #428]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ed4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ee0:	4a67      	ldr	r2, [pc, #412]	@ (8006080 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ee2:	430b      	orrs	r3, r1
 8005ee4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eee:	2100      	movs	r1, #0
 8005ef0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ef8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005efc:	460b      	mov	r3, r1
 8005efe:	4313      	orrs	r3, r2
 8005f00:	d011      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f06:	3308      	adds	r3, #8
 8005f08:	2100      	movs	r1, #0
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f000 fb78 	bl	8006600 <RCCEx_PLL2_Config>
 8005f10:	4603      	mov	r3, r0
 8005f12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005f16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d003      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2e:	2100      	movs	r1, #0
 8005f30:	6239      	str	r1, [r7, #32]
 8005f32:	f003 0302 	and.w	r3, r3, #2
 8005f36:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f38:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	d011      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f46:	3308      	adds	r3, #8
 8005f48:	2101      	movs	r1, #1
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 fb58 	bl	8006600 <RCCEx_PLL2_Config>
 8005f50:	4603      	mov	r3, r0
 8005f52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005f56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d003      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6e:	2100      	movs	r1, #0
 8005f70:	61b9      	str	r1, [r7, #24]
 8005f72:	f003 0304 	and.w	r3, r3, #4
 8005f76:	61fb      	str	r3, [r7, #28]
 8005f78:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	d011      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f86:	3308      	adds	r3, #8
 8005f88:	2102      	movs	r1, #2
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f000 fb38 	bl	8006600 <RCCEx_PLL2_Config>
 8005f90:	4603      	mov	r3, r0
 8005f92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005f96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d003      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fa2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fae:	2100      	movs	r1, #0
 8005fb0:	6139      	str	r1, [r7, #16]
 8005fb2:	f003 0308 	and.w	r3, r3, #8
 8005fb6:	617b      	str	r3, [r7, #20]
 8005fb8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	d011      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fc6:	3328      	adds	r3, #40	@ 0x28
 8005fc8:	2100      	movs	r1, #0
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f000 fbca 	bl	8006764 <RCCEx_PLL3_Config>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fe2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fee:	2100      	movs	r1, #0
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	f003 0310 	and.w	r3, r3, #16
 8005ff6:	60fb      	str	r3, [r7, #12]
 8005ff8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	4313      	orrs	r3, r2
 8006000:	d011      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006006:	3328      	adds	r3, #40	@ 0x28
 8006008:	2101      	movs	r1, #1
 800600a:	4618      	mov	r0, r3
 800600c:	f000 fbaa 	bl	8006764 <RCCEx_PLL3_Config>
 8006010:	4603      	mov	r3, r0
 8006012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006016:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800601e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006022:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800602a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602e:	2100      	movs	r1, #0
 8006030:	6039      	str	r1, [r7, #0]
 8006032:	f003 0320 	and.w	r3, r3, #32
 8006036:	607b      	str	r3, [r7, #4]
 8006038:	e9d7 1200 	ldrd	r1, r2, [r7]
 800603c:	460b      	mov	r3, r1
 800603e:	4313      	orrs	r3, r2
 8006040:	d011      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006046:	3328      	adds	r3, #40	@ 0x28
 8006048:	2102      	movs	r1, #2
 800604a:	4618      	mov	r0, r3
 800604c:	f000 fb8a 	bl	8006764 <RCCEx_PLL3_Config>
 8006050:	4603      	mov	r3, r0
 8006052:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006056:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800605a:	2b00      	cmp	r3, #0
 800605c:	d003      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800605e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006062:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006066:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800606e:	2300      	movs	r3, #0
 8006070:	e000      	b.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
}
 8006074:	4618      	mov	r0, r3
 8006076:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800607a:	46bd      	mov	sp, r7
 800607c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006080:	58024400 	.word	0x58024400

08006084 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006088:	f7fe fd96 	bl	8004bb8 <HAL_RCC_GetHCLKFreq>
 800608c:	4602      	mov	r2, r0
 800608e:	4b06      	ldr	r3, [pc, #24]	@ (80060a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	091b      	lsrs	r3, r3, #4
 8006094:	f003 0307 	and.w	r3, r3, #7
 8006098:	4904      	ldr	r1, [pc, #16]	@ (80060ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800609a:	5ccb      	ldrb	r3, [r1, r3]
 800609c:	f003 031f 	and.w	r3, r3, #31
 80060a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	58024400 	.word	0x58024400
 80060ac:	0800b2fc 	.word	0x0800b2fc

080060b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b089      	sub	sp, #36	@ 0x24
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80060b8:	4ba1      	ldr	r3, [pc, #644]	@ (8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060bc:	f003 0303 	and.w	r3, r3, #3
 80060c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80060c2:	4b9f      	ldr	r3, [pc, #636]	@ (8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060c6:	0b1b      	lsrs	r3, r3, #12
 80060c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80060ce:	4b9c      	ldr	r3, [pc, #624]	@ (8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d2:	091b      	lsrs	r3, r3, #4
 80060d4:	f003 0301 	and.w	r3, r3, #1
 80060d8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80060da:	4b99      	ldr	r3, [pc, #612]	@ (8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060de:	08db      	lsrs	r3, r3, #3
 80060e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	fb02 f303 	mul.w	r3, r2, r3
 80060ea:	ee07 3a90 	vmov	s15, r3
 80060ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f000 8111 	beq.w	8006320 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	2b02      	cmp	r3, #2
 8006102:	f000 8083 	beq.w	800620c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	2b02      	cmp	r3, #2
 800610a:	f200 80a1 	bhi.w	8006250 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d003      	beq.n	800611c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d056      	beq.n	80061c8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800611a:	e099      	b.n	8006250 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800611c:	4b88      	ldr	r3, [pc, #544]	@ (8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0320 	and.w	r3, r3, #32
 8006124:	2b00      	cmp	r3, #0
 8006126:	d02d      	beq.n	8006184 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006128:	4b85      	ldr	r3, [pc, #532]	@ (8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	08db      	lsrs	r3, r3, #3
 800612e:	f003 0303 	and.w	r3, r3, #3
 8006132:	4a84      	ldr	r2, [pc, #528]	@ (8006344 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006134:	fa22 f303 	lsr.w	r3, r2, r3
 8006138:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	ee07 3a90 	vmov	s15, r3
 8006140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	ee07 3a90 	vmov	s15, r3
 800614a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800614e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006152:	4b7b      	ldr	r3, [pc, #492]	@ (8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800615a:	ee07 3a90 	vmov	s15, r3
 800615e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006162:	ed97 6a03 	vldr	s12, [r7, #12]
 8006166:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006348 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800616a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800616e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006172:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800617a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800617e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006182:	e087      	b.n	8006294 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	ee07 3a90 	vmov	s15, r3
 800618a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800618e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800634c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006196:	4b6a      	ldr	r3, [pc, #424]	@ (8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800619a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800619e:	ee07 3a90 	vmov	s15, r3
 80061a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80061aa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006348 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061c6:	e065      	b.n	8006294 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	ee07 3a90 	vmov	s15, r3
 80061ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061d2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80061d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061da:	4b59      	ldr	r3, [pc, #356]	@ (8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061e2:	ee07 3a90 	vmov	s15, r3
 80061e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80061ee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006348 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006206:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800620a:	e043      	b.n	8006294 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	ee07 3a90 	vmov	s15, r3
 8006212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006216:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006354 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800621a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800621e:	4b48      	ldr	r3, [pc, #288]	@ (8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006226:	ee07 3a90 	vmov	s15, r3
 800622a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800622e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006232:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006348 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800623a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800623e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800624a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800624e:	e021      	b.n	8006294 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	ee07 3a90 	vmov	s15, r3
 8006256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800625a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800625e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006262:	4b37      	ldr	r3, [pc, #220]	@ (8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800626a:	ee07 3a90 	vmov	s15, r3
 800626e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006272:	ed97 6a03 	vldr	s12, [r7, #12]
 8006276:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006348 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800627a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800627e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006282:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800628a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800628e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006292:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006294:	4b2a      	ldr	r3, [pc, #168]	@ (8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006298:	0a5b      	lsrs	r3, r3, #9
 800629a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800629e:	ee07 3a90 	vmov	s15, r3
 80062a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80062aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80062b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062ba:	ee17 2a90 	vmov	r2, s15
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80062c2:	4b1f      	ldr	r3, [pc, #124]	@ (8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062c6:	0c1b      	lsrs	r3, r3, #16
 80062c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062cc:	ee07 3a90 	vmov	s15, r3
 80062d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80062d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80062e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062e8:	ee17 2a90 	vmov	r2, s15
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80062f0:	4b13      	ldr	r3, [pc, #76]	@ (8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f4:	0e1b      	lsrs	r3, r3, #24
 80062f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062fa:	ee07 3a90 	vmov	s15, r3
 80062fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006302:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006306:	ee37 7a87 	vadd.f32	s14, s15, s14
 800630a:	edd7 6a07 	vldr	s13, [r7, #28]
 800630e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006312:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006316:	ee17 2a90 	vmov	r2, s15
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800631e:	e008      	b.n	8006332 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	609a      	str	r2, [r3, #8]
}
 8006332:	bf00      	nop
 8006334:	3724      	adds	r7, #36	@ 0x24
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	58024400 	.word	0x58024400
 8006344:	03d09000 	.word	0x03d09000
 8006348:	46000000 	.word	0x46000000
 800634c:	4c742400 	.word	0x4c742400
 8006350:	4a742400 	.word	0x4a742400
 8006354:	4bbebc20 	.word	0x4bbebc20

08006358 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006358:	b480      	push	{r7}
 800635a:	b089      	sub	sp, #36	@ 0x24
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006360:	4ba1      	ldr	r3, [pc, #644]	@ (80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006364:	f003 0303 	and.w	r3, r3, #3
 8006368:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800636a:	4b9f      	ldr	r3, [pc, #636]	@ (80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800636c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800636e:	0d1b      	lsrs	r3, r3, #20
 8006370:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006374:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006376:	4b9c      	ldr	r3, [pc, #624]	@ (80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800637a:	0a1b      	lsrs	r3, r3, #8
 800637c:	f003 0301 	and.w	r3, r3, #1
 8006380:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006382:	4b99      	ldr	r3, [pc, #612]	@ (80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006386:	08db      	lsrs	r3, r3, #3
 8006388:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800638c:	693a      	ldr	r2, [r7, #16]
 800638e:	fb02 f303 	mul.w	r3, r2, r3
 8006392:	ee07 3a90 	vmov	s15, r3
 8006396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800639a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f000 8111 	beq.w	80065c8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	f000 8083 	beq.w	80064b4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	f200 80a1 	bhi.w	80064f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d003      	beq.n	80063c4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d056      	beq.n	8006470 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80063c2:	e099      	b.n	80064f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063c4:	4b88      	ldr	r3, [pc, #544]	@ (80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 0320 	and.w	r3, r3, #32
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d02d      	beq.n	800642c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063d0:	4b85      	ldr	r3, [pc, #532]	@ (80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	08db      	lsrs	r3, r3, #3
 80063d6:	f003 0303 	and.w	r3, r3, #3
 80063da:	4a84      	ldr	r2, [pc, #528]	@ (80065ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80063dc:	fa22 f303 	lsr.w	r3, r2, r3
 80063e0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	ee07 3a90 	vmov	s15, r3
 80063e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	ee07 3a90 	vmov	s15, r3
 80063f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063fa:	4b7b      	ldr	r3, [pc, #492]	@ (80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006402:	ee07 3a90 	vmov	s15, r3
 8006406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800640a:	ed97 6a03 	vldr	s12, [r7, #12]
 800640e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80065f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800641a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800641e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006426:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800642a:	e087      	b.n	800653c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	ee07 3a90 	vmov	s15, r3
 8006432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006436:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80065f4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800643a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800643e:	4b6a      	ldr	r3, [pc, #424]	@ (80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006446:	ee07 3a90 	vmov	s15, r3
 800644a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800644e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006452:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80065f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800645a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800645e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800646a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800646e:	e065      	b.n	800653c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	ee07 3a90 	vmov	s15, r3
 8006476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800647a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80065f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800647e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006482:	4b59      	ldr	r3, [pc, #356]	@ (80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800648a:	ee07 3a90 	vmov	s15, r3
 800648e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006492:	ed97 6a03 	vldr	s12, [r7, #12]
 8006496:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80065f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800649a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800649e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064b2:	e043      	b.n	800653c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	ee07 3a90 	vmov	s15, r3
 80064ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064be:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80065fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80064c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064c6:	4b48      	ldr	r3, [pc, #288]	@ (80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ce:	ee07 3a90 	vmov	s15, r3
 80064d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80064da:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80065f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80064de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064f6:	e021      	b.n	800653c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	ee07 3a90 	vmov	s15, r3
 80064fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006502:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80065f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800650a:	4b37      	ldr	r3, [pc, #220]	@ (80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800650c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800650e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006512:	ee07 3a90 	vmov	s15, r3
 8006516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800651a:	ed97 6a03 	vldr	s12, [r7, #12]
 800651e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80065f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800652a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800652e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006536:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800653a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800653c:	4b2a      	ldr	r3, [pc, #168]	@ (80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800653e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006540:	0a5b      	lsrs	r3, r3, #9
 8006542:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006546:	ee07 3a90 	vmov	s15, r3
 800654a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800654e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006552:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006556:	edd7 6a07 	vldr	s13, [r7, #28]
 800655a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800655e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006562:	ee17 2a90 	vmov	r2, s15
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800656a:	4b1f      	ldr	r3, [pc, #124]	@ (80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800656c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800656e:	0c1b      	lsrs	r3, r3, #16
 8006570:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006574:	ee07 3a90 	vmov	s15, r3
 8006578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800657c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006580:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006584:	edd7 6a07 	vldr	s13, [r7, #28]
 8006588:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800658c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006590:	ee17 2a90 	vmov	r2, s15
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006598:	4b13      	ldr	r3, [pc, #76]	@ (80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800659a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800659c:	0e1b      	lsrs	r3, r3, #24
 800659e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065a2:	ee07 3a90 	vmov	s15, r3
 80065a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80065ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80065b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065be:	ee17 2a90 	vmov	r2, s15
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80065c6:	e008      	b.n	80065da <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	609a      	str	r2, [r3, #8]
}
 80065da:	bf00      	nop
 80065dc:	3724      	adds	r7, #36	@ 0x24
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	58024400 	.word	0x58024400
 80065ec:	03d09000 	.word	0x03d09000
 80065f0:	46000000 	.word	0x46000000
 80065f4:	4c742400 	.word	0x4c742400
 80065f8:	4a742400 	.word	0x4a742400
 80065fc:	4bbebc20 	.word	0x4bbebc20

08006600 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800660a:	2300      	movs	r3, #0
 800660c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800660e:	4b53      	ldr	r3, [pc, #332]	@ (800675c <RCCEx_PLL2_Config+0x15c>)
 8006610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006612:	f003 0303 	and.w	r3, r3, #3
 8006616:	2b03      	cmp	r3, #3
 8006618:	d101      	bne.n	800661e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e099      	b.n	8006752 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800661e:	4b4f      	ldr	r3, [pc, #316]	@ (800675c <RCCEx_PLL2_Config+0x15c>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a4e      	ldr	r2, [pc, #312]	@ (800675c <RCCEx_PLL2_Config+0x15c>)
 8006624:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006628:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800662a:	f7fc fc97 	bl	8002f5c <HAL_GetTick>
 800662e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006630:	e008      	b.n	8006644 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006632:	f7fc fc93 	bl	8002f5c <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	2b02      	cmp	r3, #2
 800663e:	d901      	bls.n	8006644 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e086      	b.n	8006752 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006644:	4b45      	ldr	r3, [pc, #276]	@ (800675c <RCCEx_PLL2_Config+0x15c>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1f0      	bne.n	8006632 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006650:	4b42      	ldr	r3, [pc, #264]	@ (800675c <RCCEx_PLL2_Config+0x15c>)
 8006652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006654:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	031b      	lsls	r3, r3, #12
 800665e:	493f      	ldr	r1, [pc, #252]	@ (800675c <RCCEx_PLL2_Config+0x15c>)
 8006660:	4313      	orrs	r3, r2
 8006662:	628b      	str	r3, [r1, #40]	@ 0x28
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	3b01      	subs	r3, #1
 800666a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	3b01      	subs	r3, #1
 8006674:	025b      	lsls	r3, r3, #9
 8006676:	b29b      	uxth	r3, r3
 8006678:	431a      	orrs	r2, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	3b01      	subs	r3, #1
 8006680:	041b      	lsls	r3, r3, #16
 8006682:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006686:	431a      	orrs	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	3b01      	subs	r3, #1
 800668e:	061b      	lsls	r3, r3, #24
 8006690:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006694:	4931      	ldr	r1, [pc, #196]	@ (800675c <RCCEx_PLL2_Config+0x15c>)
 8006696:	4313      	orrs	r3, r2
 8006698:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800669a:	4b30      	ldr	r3, [pc, #192]	@ (800675c <RCCEx_PLL2_Config+0x15c>)
 800669c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800669e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	492d      	ldr	r1, [pc, #180]	@ (800675c <RCCEx_PLL2_Config+0x15c>)
 80066a8:	4313      	orrs	r3, r2
 80066aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80066ac:	4b2b      	ldr	r3, [pc, #172]	@ (800675c <RCCEx_PLL2_Config+0x15c>)
 80066ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b0:	f023 0220 	bic.w	r2, r3, #32
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	4928      	ldr	r1, [pc, #160]	@ (800675c <RCCEx_PLL2_Config+0x15c>)
 80066ba:	4313      	orrs	r3, r2
 80066bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80066be:	4b27      	ldr	r3, [pc, #156]	@ (800675c <RCCEx_PLL2_Config+0x15c>)
 80066c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c2:	4a26      	ldr	r2, [pc, #152]	@ (800675c <RCCEx_PLL2_Config+0x15c>)
 80066c4:	f023 0310 	bic.w	r3, r3, #16
 80066c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80066ca:	4b24      	ldr	r3, [pc, #144]	@ (800675c <RCCEx_PLL2_Config+0x15c>)
 80066cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80066ce:	4b24      	ldr	r3, [pc, #144]	@ (8006760 <RCCEx_PLL2_Config+0x160>)
 80066d0:	4013      	ands	r3, r2
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	69d2      	ldr	r2, [r2, #28]
 80066d6:	00d2      	lsls	r2, r2, #3
 80066d8:	4920      	ldr	r1, [pc, #128]	@ (800675c <RCCEx_PLL2_Config+0x15c>)
 80066da:	4313      	orrs	r3, r2
 80066dc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80066de:	4b1f      	ldr	r3, [pc, #124]	@ (800675c <RCCEx_PLL2_Config+0x15c>)
 80066e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066e2:	4a1e      	ldr	r2, [pc, #120]	@ (800675c <RCCEx_PLL2_Config+0x15c>)
 80066e4:	f043 0310 	orr.w	r3, r3, #16
 80066e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d106      	bne.n	80066fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80066f0:	4b1a      	ldr	r3, [pc, #104]	@ (800675c <RCCEx_PLL2_Config+0x15c>)
 80066f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f4:	4a19      	ldr	r2, [pc, #100]	@ (800675c <RCCEx_PLL2_Config+0x15c>)
 80066f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80066fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80066fc:	e00f      	b.n	800671e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d106      	bne.n	8006712 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006704:	4b15      	ldr	r3, [pc, #84]	@ (800675c <RCCEx_PLL2_Config+0x15c>)
 8006706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006708:	4a14      	ldr	r2, [pc, #80]	@ (800675c <RCCEx_PLL2_Config+0x15c>)
 800670a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800670e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006710:	e005      	b.n	800671e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006712:	4b12      	ldr	r3, [pc, #72]	@ (800675c <RCCEx_PLL2_Config+0x15c>)
 8006714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006716:	4a11      	ldr	r2, [pc, #68]	@ (800675c <RCCEx_PLL2_Config+0x15c>)
 8006718:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800671c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800671e:	4b0f      	ldr	r3, [pc, #60]	@ (800675c <RCCEx_PLL2_Config+0x15c>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a0e      	ldr	r2, [pc, #56]	@ (800675c <RCCEx_PLL2_Config+0x15c>)
 8006724:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006728:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800672a:	f7fc fc17 	bl	8002f5c <HAL_GetTick>
 800672e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006730:	e008      	b.n	8006744 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006732:	f7fc fc13 	bl	8002f5c <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	2b02      	cmp	r3, #2
 800673e:	d901      	bls.n	8006744 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e006      	b.n	8006752 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006744:	4b05      	ldr	r3, [pc, #20]	@ (800675c <RCCEx_PLL2_Config+0x15c>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d0f0      	beq.n	8006732 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006750:	7bfb      	ldrb	r3, [r7, #15]
}
 8006752:	4618      	mov	r0, r3
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	58024400 	.word	0x58024400
 8006760:	ffff0007 	.word	0xffff0007

08006764 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800676e:	2300      	movs	r3, #0
 8006770:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006772:	4b53      	ldr	r3, [pc, #332]	@ (80068c0 <RCCEx_PLL3_Config+0x15c>)
 8006774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006776:	f003 0303 	and.w	r3, r3, #3
 800677a:	2b03      	cmp	r3, #3
 800677c:	d101      	bne.n	8006782 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e099      	b.n	80068b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006782:	4b4f      	ldr	r3, [pc, #316]	@ (80068c0 <RCCEx_PLL3_Config+0x15c>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a4e      	ldr	r2, [pc, #312]	@ (80068c0 <RCCEx_PLL3_Config+0x15c>)
 8006788:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800678c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800678e:	f7fc fbe5 	bl	8002f5c <HAL_GetTick>
 8006792:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006794:	e008      	b.n	80067a8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006796:	f7fc fbe1 	bl	8002f5c <HAL_GetTick>
 800679a:	4602      	mov	r2, r0
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d901      	bls.n	80067a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e086      	b.n	80068b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80067a8:	4b45      	ldr	r3, [pc, #276]	@ (80068c0 <RCCEx_PLL3_Config+0x15c>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d1f0      	bne.n	8006796 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80067b4:	4b42      	ldr	r3, [pc, #264]	@ (80068c0 <RCCEx_PLL3_Config+0x15c>)
 80067b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	051b      	lsls	r3, r3, #20
 80067c2:	493f      	ldr	r1, [pc, #252]	@ (80068c0 <RCCEx_PLL3_Config+0x15c>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	3b01      	subs	r3, #1
 80067ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	3b01      	subs	r3, #1
 80067d8:	025b      	lsls	r3, r3, #9
 80067da:	b29b      	uxth	r3, r3
 80067dc:	431a      	orrs	r2, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	3b01      	subs	r3, #1
 80067e4:	041b      	lsls	r3, r3, #16
 80067e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80067ea:	431a      	orrs	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	3b01      	subs	r3, #1
 80067f2:	061b      	lsls	r3, r3, #24
 80067f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80067f8:	4931      	ldr	r1, [pc, #196]	@ (80068c0 <RCCEx_PLL3_Config+0x15c>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80067fe:	4b30      	ldr	r3, [pc, #192]	@ (80068c0 <RCCEx_PLL3_Config+0x15c>)
 8006800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006802:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	492d      	ldr	r1, [pc, #180]	@ (80068c0 <RCCEx_PLL3_Config+0x15c>)
 800680c:	4313      	orrs	r3, r2
 800680e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006810:	4b2b      	ldr	r3, [pc, #172]	@ (80068c0 <RCCEx_PLL3_Config+0x15c>)
 8006812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006814:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	4928      	ldr	r1, [pc, #160]	@ (80068c0 <RCCEx_PLL3_Config+0x15c>)
 800681e:	4313      	orrs	r3, r2
 8006820:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006822:	4b27      	ldr	r3, [pc, #156]	@ (80068c0 <RCCEx_PLL3_Config+0x15c>)
 8006824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006826:	4a26      	ldr	r2, [pc, #152]	@ (80068c0 <RCCEx_PLL3_Config+0x15c>)
 8006828:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800682c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800682e:	4b24      	ldr	r3, [pc, #144]	@ (80068c0 <RCCEx_PLL3_Config+0x15c>)
 8006830:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006832:	4b24      	ldr	r3, [pc, #144]	@ (80068c4 <RCCEx_PLL3_Config+0x160>)
 8006834:	4013      	ands	r3, r2
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	69d2      	ldr	r2, [r2, #28]
 800683a:	00d2      	lsls	r2, r2, #3
 800683c:	4920      	ldr	r1, [pc, #128]	@ (80068c0 <RCCEx_PLL3_Config+0x15c>)
 800683e:	4313      	orrs	r3, r2
 8006840:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006842:	4b1f      	ldr	r3, [pc, #124]	@ (80068c0 <RCCEx_PLL3_Config+0x15c>)
 8006844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006846:	4a1e      	ldr	r2, [pc, #120]	@ (80068c0 <RCCEx_PLL3_Config+0x15c>)
 8006848:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800684c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d106      	bne.n	8006862 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006854:	4b1a      	ldr	r3, [pc, #104]	@ (80068c0 <RCCEx_PLL3_Config+0x15c>)
 8006856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006858:	4a19      	ldr	r2, [pc, #100]	@ (80068c0 <RCCEx_PLL3_Config+0x15c>)
 800685a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800685e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006860:	e00f      	b.n	8006882 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d106      	bne.n	8006876 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006868:	4b15      	ldr	r3, [pc, #84]	@ (80068c0 <RCCEx_PLL3_Config+0x15c>)
 800686a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800686c:	4a14      	ldr	r2, [pc, #80]	@ (80068c0 <RCCEx_PLL3_Config+0x15c>)
 800686e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006872:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006874:	e005      	b.n	8006882 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006876:	4b12      	ldr	r3, [pc, #72]	@ (80068c0 <RCCEx_PLL3_Config+0x15c>)
 8006878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800687a:	4a11      	ldr	r2, [pc, #68]	@ (80068c0 <RCCEx_PLL3_Config+0x15c>)
 800687c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006880:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006882:	4b0f      	ldr	r3, [pc, #60]	@ (80068c0 <RCCEx_PLL3_Config+0x15c>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a0e      	ldr	r2, [pc, #56]	@ (80068c0 <RCCEx_PLL3_Config+0x15c>)
 8006888:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800688c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800688e:	f7fc fb65 	bl	8002f5c <HAL_GetTick>
 8006892:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006894:	e008      	b.n	80068a8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006896:	f7fc fb61 	bl	8002f5c <HAL_GetTick>
 800689a:	4602      	mov	r2, r0
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d901      	bls.n	80068a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e006      	b.n	80068b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80068a8:	4b05      	ldr	r3, [pc, #20]	@ (80068c0 <RCCEx_PLL3_Config+0x15c>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d0f0      	beq.n	8006896 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80068b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	58024400 	.word	0x58024400
 80068c4:	ffff0007 	.word	0xffff0007

080068c8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d101      	bne.n	80068da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e10f      	b.n	8006afa <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a87      	ldr	r2, [pc, #540]	@ (8006b04 <HAL_SPI_Init+0x23c>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d00f      	beq.n	800690a <HAL_SPI_Init+0x42>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a86      	ldr	r2, [pc, #536]	@ (8006b08 <HAL_SPI_Init+0x240>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d00a      	beq.n	800690a <HAL_SPI_Init+0x42>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a84      	ldr	r2, [pc, #528]	@ (8006b0c <HAL_SPI_Init+0x244>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d005      	beq.n	800690a <HAL_SPI_Init+0x42>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	2b0f      	cmp	r3, #15
 8006904:	d901      	bls.n	800690a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e0f7      	b.n	8006afa <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f001 f910 	bl	8007b30 <SPI_GetPacketSize>
 8006910:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a7b      	ldr	r2, [pc, #492]	@ (8006b04 <HAL_SPI_Init+0x23c>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d00c      	beq.n	8006936 <HAL_SPI_Init+0x6e>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a79      	ldr	r2, [pc, #484]	@ (8006b08 <HAL_SPI_Init+0x240>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d007      	beq.n	8006936 <HAL_SPI_Init+0x6e>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a78      	ldr	r2, [pc, #480]	@ (8006b0c <HAL_SPI_Init+0x244>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d002      	beq.n	8006936 <HAL_SPI_Init+0x6e>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2b08      	cmp	r3, #8
 8006934:	d811      	bhi.n	800695a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800693a:	4a72      	ldr	r2, [pc, #456]	@ (8006b04 <HAL_SPI_Init+0x23c>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d009      	beq.n	8006954 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a70      	ldr	r2, [pc, #448]	@ (8006b08 <HAL_SPI_Init+0x240>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d004      	beq.n	8006954 <HAL_SPI_Init+0x8c>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a6f      	ldr	r2, [pc, #444]	@ (8006b0c <HAL_SPI_Init+0x244>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d104      	bne.n	800695e <HAL_SPI_Init+0x96>
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2b10      	cmp	r3, #16
 8006958:	d901      	bls.n	800695e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e0cd      	b.n	8006afa <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d106      	bne.n	8006978 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7fb fd50 	bl	8002418 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2202      	movs	r2, #2
 800697c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f022 0201 	bic.w	r2, r2, #1
 800698e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800699a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80069a4:	d119      	bne.n	80069da <HAL_SPI_Init+0x112>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069ae:	d103      	bne.n	80069b8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d008      	beq.n	80069ca <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d10c      	bne.n	80069da <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80069c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069c8:	d107      	bne.n	80069da <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80069d8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00f      	beq.n	8006a06 <HAL_SPI_Init+0x13e>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	2b06      	cmp	r3, #6
 80069ec:	d90b      	bls.n	8006a06 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	430a      	orrs	r2, r1
 8006a02:	601a      	str	r2, [r3, #0]
 8006a04:	e007      	b.n	8006a16 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006a14:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	69da      	ldr	r2, [r3, #28]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a1e:	431a      	orrs	r2, r3
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	431a      	orrs	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a28:	ea42 0103 	orr.w	r1, r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	68da      	ldr	r2, [r3, #12]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	430a      	orrs	r2, r1
 8006a36:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a40:	431a      	orrs	r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a46:	431a      	orrs	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	431a      	orrs	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	431a      	orrs	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	695b      	ldr	r3, [r3, #20]
 8006a58:	431a      	orrs	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	431a      	orrs	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	431a      	orrs	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a6a:	431a      	orrs	r2, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	431a      	orrs	r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a76:	ea42 0103 	orr.w	r1, r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	430a      	orrs	r2, r1
 8006a84:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d113      	bne.n	8006ab6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006aa0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006ab4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f022 0201 	bic.w	r2, r2, #1
 8006ac4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00a      	beq.n	8006ae8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	430a      	orrs	r2, r1
 8006ae6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	40013000 	.word	0x40013000
 8006b08:	40003800 	.word	0x40003800
 8006b0c:	40003c00 	.word	0x40003c00

08006b10 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b088      	sub	sp, #32
 8006b14:	af02      	add	r7, sp, #8
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	603b      	str	r3, [r7, #0]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3320      	adds	r3, #32
 8006b26:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b28:	f7fc fa18 	bl	8002f5c <HAL_GetTick>
 8006b2c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d001      	beq.n	8006b3e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8006b3a:	2302      	movs	r3, #2
 8006b3c:	e1d1      	b.n	8006ee2 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d002      	beq.n	8006b4a <HAL_SPI_Transmit+0x3a>
 8006b44:	88fb      	ldrh	r3, [r7, #6]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e1c9      	b.n	8006ee2 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d101      	bne.n	8006b5c <HAL_SPI_Transmit+0x4c>
 8006b58:	2302      	movs	r3, #2
 8006b5a:	e1c2      	b.n	8006ee2 <HAL_SPI_Transmit+0x3d2>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2203      	movs	r2, #3
 8006b68:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	68ba      	ldr	r2, [r7, #8]
 8006b78:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	88fa      	ldrh	r2, [r7, #6]
 8006b7e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	88fa      	ldrh	r2, [r7, #6]
 8006b86:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8006bb4:	d108      	bne.n	8006bc8 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bc4:	601a      	str	r2, [r3, #0]
 8006bc6:	e009      	b.n	8006bdc <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006bda:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	685a      	ldr	r2, [r3, #4]
 8006be2:	4b96      	ldr	r3, [pc, #600]	@ (8006e3c <HAL_SPI_Transmit+0x32c>)
 8006be4:	4013      	ands	r3, r2
 8006be6:	88f9      	ldrh	r1, [r7, #6]
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	6812      	ldr	r2, [r2, #0]
 8006bec:	430b      	orrs	r3, r1
 8006bee:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f042 0201 	orr.w	r2, r2, #1
 8006bfe:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c08:	d107      	bne.n	8006c1a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	2b0f      	cmp	r3, #15
 8006c20:	d947      	bls.n	8006cb2 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006c22:	e03f      	b.n	8006ca4 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	f003 0302 	and.w	r3, r3, #2
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	d114      	bne.n	8006c5c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	6812      	ldr	r2, [r2, #0]
 8006c3c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c42:	1d1a      	adds	r2, r3, #4
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	3b01      	subs	r3, #1
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006c5a:	e023      	b.n	8006ca4 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c5c:	f7fc f97e 	bl	8002f5c <HAL_GetTick>
 8006c60:	4602      	mov	r2, r0
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	683a      	ldr	r2, [r7, #0]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d803      	bhi.n	8006c74 <HAL_SPI_Transmit+0x164>
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c72:	d102      	bne.n	8006c7a <HAL_SPI_Transmit+0x16a>
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d114      	bne.n	8006ca4 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f000 fe8a 	bl	8007994 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c86:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e11e      	b.n	8006ee2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1b9      	bne.n	8006c24 <HAL_SPI_Transmit+0x114>
 8006cb0:	e0f1      	b.n	8006e96 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	2b07      	cmp	r3, #7
 8006cb8:	f240 80e6 	bls.w	8006e88 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006cbc:	e05d      	b.n	8006d7a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	695b      	ldr	r3, [r3, #20]
 8006cc4:	f003 0302 	and.w	r3, r3, #2
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d132      	bne.n	8006d32 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d918      	bls.n	8006d0a <HAL_SPI_Transmit+0x1fa>
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d014      	beq.n	8006d0a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6812      	ldr	r2, [r2, #0]
 8006cea:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cf0:	1d1a      	adds	r2, r3, #4
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	3b02      	subs	r3, #2
 8006d00:	b29a      	uxth	r2, r3
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006d08:	e037      	b.n	8006d7a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d0e:	881a      	ldrh	r2, [r3, #0]
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d18:	1c9a      	adds	r2, r3, #2
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	3b01      	subs	r3, #1
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006d30:	e023      	b.n	8006d7a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d32:	f7fc f913 	bl	8002f5c <HAL_GetTick>
 8006d36:	4602      	mov	r2, r0
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	683a      	ldr	r2, [r7, #0]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d803      	bhi.n	8006d4a <HAL_SPI_Transmit+0x23a>
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d48:	d102      	bne.n	8006d50 <HAL_SPI_Transmit+0x240>
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d114      	bne.n	8006d7a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f000 fe1f 	bl	8007994 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d5c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e0b3      	b.n	8006ee2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d19b      	bne.n	8006cbe <HAL_SPI_Transmit+0x1ae>
 8006d86:	e086      	b.n	8006e96 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	f003 0302 	and.w	r3, r3, #2
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	d154      	bne.n	8006e40 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	2b03      	cmp	r3, #3
 8006da0:	d918      	bls.n	8006dd4 <HAL_SPI_Transmit+0x2c4>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006da6:	2b40      	cmp	r3, #64	@ 0x40
 8006da8:	d914      	bls.n	8006dd4 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	6812      	ldr	r2, [r2, #0]
 8006db4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dba:	1d1a      	adds	r2, r3, #4
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	3b04      	subs	r3, #4
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006dd2:	e059      	b.n	8006e88 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d917      	bls.n	8006e10 <HAL_SPI_Transmit+0x300>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d013      	beq.n	8006e10 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dec:	881a      	ldrh	r2, [r3, #0]
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006df6:	1c9a      	adds	r2, r3, #2
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	3b02      	subs	r3, #2
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006e0e:	e03b      	b.n	8006e88 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	3320      	adds	r3, #32
 8006e1a:	7812      	ldrb	r2, [r2, #0]
 8006e1c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e22:	1c5a      	adds	r2, r3, #1
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	3b01      	subs	r3, #1
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006e3a:	e025      	b.n	8006e88 <HAL_SPI_Transmit+0x378>
 8006e3c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e40:	f7fc f88c 	bl	8002f5c <HAL_GetTick>
 8006e44:	4602      	mov	r2, r0
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	683a      	ldr	r2, [r7, #0]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d803      	bhi.n	8006e58 <HAL_SPI_Transmit+0x348>
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e56:	d102      	bne.n	8006e5e <HAL_SPI_Transmit+0x34e>
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d114      	bne.n	8006e88 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f000 fd98 	bl	8007994 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e6a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e02c      	b.n	8006ee2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f47f af79 	bne.w	8006d88 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	9300      	str	r3, [sp, #0]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	2108      	movs	r1, #8
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	f000 fe17 	bl	8007ad4 <SPI_WaitOnFlagUntilTimeout>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d007      	beq.n	8006ebc <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006eb2:	f043 0220 	orr.w	r2, r3, #32
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f000 fd69 	bl	8007994 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d001      	beq.n	8006ee0 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e000      	b.n	8006ee2 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
  }
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3718      	adds	r7, #24
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop

08006eec <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b08e      	sub	sp, #56	@ 0x38
 8006ef0:	af02      	add	r7, sp, #8
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	607a      	str	r2, [r7, #4]
 8006ef8:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	3320      	adds	r3, #32
 8006f00:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	3330      	adds	r3, #48	@ 0x30
 8006f08:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f0e:	095b      	lsrs	r3, r3, #5
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	3301      	adds	r3, #1
 8006f14:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f16:	f7fc f821 	bl	8002f5c <HAL_GetTick>
 8006f1a:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8006f1c:	887b      	ldrh	r3, [r7, #2]
 8006f1e:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8006f20:	887b      	ldrh	r3, [r7, #2]
 8006f22:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d001      	beq.n	8006f34 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8006f30:	2302      	movs	r3, #2
 8006f32:	e310      	b.n	8007556 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d005      	beq.n	8006f46 <HAL_SPI_TransmitReceive+0x5a>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d002      	beq.n	8006f46 <HAL_SPI_TransmitReceive+0x5a>
 8006f40:	887b      	ldrh	r3, [r7, #2]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d101      	bne.n	8006f4a <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e305      	b.n	8007556 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d101      	bne.n	8006f58 <HAL_SPI_TransmitReceive+0x6c>
 8006f54:	2302      	movs	r3, #2
 8006f56:	e2fe      	b.n	8007556 <HAL_SPI_TransmitReceive+0x66a>
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2205      	movs	r2, #5
 8006f64:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	887a      	ldrh	r2, [r7, #2]
 8006f7a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	887a      	ldrh	r2, [r7, #2]
 8006f82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	887a      	ldrh	r2, [r7, #2]
 8006f90:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	887a      	ldrh	r2, [r7, #2]
 8006f98:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68da      	ldr	r2, [r3, #12]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8006fb6:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a70      	ldr	r2, [pc, #448]	@ (8007180 <HAL_SPI_TransmitReceive+0x294>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d009      	beq.n	8006fd6 <HAL_SPI_TransmitReceive+0xea>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a6f      	ldr	r2, [pc, #444]	@ (8007184 <HAL_SPI_TransmitReceive+0x298>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d004      	beq.n	8006fd6 <HAL_SPI_TransmitReceive+0xea>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a6d      	ldr	r2, [pc, #436]	@ (8007188 <HAL_SPI_TransmitReceive+0x29c>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d102      	bne.n	8006fdc <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8006fd6:	2310      	movs	r3, #16
 8006fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fda:	e001      	b.n	8006fe0 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8006fdc:	2308      	movs	r3, #8
 8006fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	685a      	ldr	r2, [r3, #4]
 8006fe6:	4b69      	ldr	r3, [pc, #420]	@ (800718c <HAL_SPI_TransmitReceive+0x2a0>)
 8006fe8:	4013      	ands	r3, r2
 8006fea:	8879      	ldrh	r1, [r7, #2]
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	6812      	ldr	r2, [r2, #0]
 8006ff0:	430b      	orrs	r3, r1
 8006ff2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f042 0201 	orr.w	r2, r2, #1
 8007002:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800700c:	d107      	bne.n	800701e <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800701c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	2b0f      	cmp	r3, #15
 8007024:	f240 80a2 	bls.w	800716c <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8007028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800702a:	089b      	lsrs	r3, r3, #2
 800702c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800702e:	e094      	b.n	800715a <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	f003 0302 	and.w	r3, r3, #2
 800703a:	2b02      	cmp	r3, #2
 800703c:	d120      	bne.n	8007080 <HAL_SPI_TransmitReceive+0x194>
 800703e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007040:	2b00      	cmp	r3, #0
 8007042:	d01d      	beq.n	8007080 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8007044:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007046:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8007048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800704a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800704c:	429a      	cmp	r2, r3
 800704e:	d217      	bcs.n	8007080 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	6812      	ldr	r2, [r2, #0]
 800705a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007060:	1d1a      	adds	r2, r3, #4
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800706c:	b29b      	uxth	r3, r3
 800706e:	3b01      	subs	r3, #1
 8007070:	b29a      	uxth	r2, r3
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800707e:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	695b      	ldr	r3, [r3, #20]
 8007086:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8007088:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800708a:	2b00      	cmp	r3, #0
 800708c:	d065      	beq.n	800715a <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	695b      	ldr	r3, [r3, #20]
 8007094:	f003 0301 	and.w	r3, r3, #1
 8007098:	2b01      	cmp	r3, #1
 800709a:	d118      	bne.n	80070ce <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070a4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80070a6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070ac:	1d1a      	adds	r2, r3, #4
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	3b01      	subs	r3, #1
 80070bc:	b29a      	uxth	r2, r3
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80070ca:	853b      	strh	r3, [r7, #40]	@ 0x28
 80070cc:	e045      	b.n	800715a <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80070ce:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80070d0:	8bfb      	ldrh	r3, [r7, #30]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d21d      	bcs.n	8007112 <HAL_SPI_TransmitReceive+0x226>
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d018      	beq.n	8007112 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070e8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80070ea:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070f0:	1d1a      	adds	r2, r3, #4
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	3b01      	subs	r3, #1
 8007100:	b29a      	uxth	r2, r3
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800710e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007110:	e023      	b.n	800715a <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007112:	f7fb ff23 	bl	8002f5c <HAL_GetTick>
 8007116:	4602      	mov	r2, r0
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	1ad3      	subs	r3, r2, r3
 800711c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800711e:	429a      	cmp	r2, r3
 8007120:	d803      	bhi.n	800712a <HAL_SPI_TransmitReceive+0x23e>
 8007122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007128:	d102      	bne.n	8007130 <HAL_SPI_TransmitReceive+0x244>
 800712a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800712c:	2b00      	cmp	r3, #0
 800712e:	d114      	bne.n	800715a <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8007130:	68f8      	ldr	r0, [r7, #12]
 8007132:	f000 fc2f 	bl	8007994 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800713c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2201      	movs	r2, #1
 800714a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	e1fd      	b.n	8007556 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800715a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800715c:	2b00      	cmp	r3, #0
 800715e:	f47f af67 	bne.w	8007030 <HAL_SPI_TransmitReceive+0x144>
 8007162:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007164:	2b00      	cmp	r3, #0
 8007166:	f47f af63 	bne.w	8007030 <HAL_SPI_TransmitReceive+0x144>
 800716a:	e1ce      	b.n	800750a <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	2b07      	cmp	r3, #7
 8007172:	f240 81c2 	bls.w	80074fa <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8007176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007178:	085b      	lsrs	r3, r3, #1
 800717a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800717c:	e0c9      	b.n	8007312 <HAL_SPI_TransmitReceive+0x426>
 800717e:	bf00      	nop
 8007180:	40013000 	.word	0x40013000
 8007184:	40003800 	.word	0x40003800
 8007188:	40003c00 	.word	0x40003c00
 800718c:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	f003 0302 	and.w	r3, r3, #2
 800719a:	2b02      	cmp	r3, #2
 800719c:	d11f      	bne.n	80071de <HAL_SPI_TransmitReceive+0x2f2>
 800719e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d01c      	beq.n	80071de <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80071a4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80071a6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80071a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071aa:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d216      	bcs.n	80071de <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071b4:	881a      	ldrh	r2, [r3, #0]
 80071b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b8:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071be:	1c9a      	adds	r2, r3, #2
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	3b01      	subs	r3, #1
 80071ce:	b29a      	uxth	r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80071dc:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	695b      	ldr	r3, [r3, #20]
 80071e4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80071e6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 8092 	beq.w	8007312 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	695b      	ldr	r3, [r3, #20]
 80071f4:	f003 0301 	and.w	r3, r3, #1
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d118      	bne.n	800722e <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007200:	6a3a      	ldr	r2, [r7, #32]
 8007202:	8812      	ldrh	r2, [r2, #0]
 8007204:	b292      	uxth	r2, r2
 8007206:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800720c:	1c9a      	adds	r2, r3, #2
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007218:	b29b      	uxth	r3, r3
 800721a:	3b01      	subs	r3, #1
 800721c:	b29a      	uxth	r2, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800722a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800722c:	e071      	b.n	8007312 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800722e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8007230:	8bfb      	ldrh	r3, [r7, #30]
 8007232:	429a      	cmp	r2, r3
 8007234:	d228      	bcs.n	8007288 <HAL_SPI_TransmitReceive+0x39c>
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800723c:	2b00      	cmp	r3, #0
 800723e:	d023      	beq.n	8007288 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007244:	6a3a      	ldr	r2, [r7, #32]
 8007246:	8812      	ldrh	r2, [r2, #0]
 8007248:	b292      	uxth	r2, r2
 800724a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007250:	1c9a      	adds	r2, r3, #2
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800725a:	6a3a      	ldr	r2, [r7, #32]
 800725c:	8812      	ldrh	r2, [r2, #0]
 800725e:	b292      	uxth	r2, r2
 8007260:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007266:	1c9a      	adds	r2, r3, #2
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007272:	b29b      	uxth	r3, r3
 8007274:	3b02      	subs	r3, #2
 8007276:	b29a      	uxth	r2, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007284:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007286:	e044      	b.n	8007312 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8007288:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800728a:	2b01      	cmp	r3, #1
 800728c:	d11d      	bne.n	80072ca <HAL_SPI_TransmitReceive+0x3de>
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d018      	beq.n	80072ca <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800729c:	6a3a      	ldr	r2, [r7, #32]
 800729e:	8812      	ldrh	r2, [r2, #0]
 80072a0:	b292      	uxth	r2, r2
 80072a2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072a8:	1c9a      	adds	r2, r3, #2
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	3b01      	subs	r3, #1
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80072c6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80072c8:	e023      	b.n	8007312 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072ca:	f7fb fe47 	bl	8002f5c <HAL_GetTick>
 80072ce:	4602      	mov	r2, r0
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	1ad3      	subs	r3, r2, r3
 80072d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d803      	bhi.n	80072e2 <HAL_SPI_TransmitReceive+0x3f6>
 80072da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072e0:	d102      	bne.n	80072e8 <HAL_SPI_TransmitReceive+0x3fc>
 80072e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d114      	bne.n	8007312 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	f000 fb53 	bl	8007994 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072f4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2201      	movs	r2, #1
 8007302:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800730e:	2303      	movs	r3, #3
 8007310:	e121      	b.n	8007556 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007312:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007314:	2b00      	cmp	r3, #0
 8007316:	f47f af3b 	bne.w	8007190 <HAL_SPI_TransmitReceive+0x2a4>
 800731a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800731c:	2b00      	cmp	r3, #0
 800731e:	f47f af37 	bne.w	8007190 <HAL_SPI_TransmitReceive+0x2a4>
 8007322:	e0f2      	b.n	800750a <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	695b      	ldr	r3, [r3, #20]
 800732a:	f003 0302 	and.w	r3, r3, #2
 800732e:	2b02      	cmp	r3, #2
 8007330:	d121      	bne.n	8007376 <HAL_SPI_TransmitReceive+0x48a>
 8007332:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007334:	2b00      	cmp	r3, #0
 8007336:	d01e      	beq.n	8007376 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8007338:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800733a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800733c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800733e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007340:	429a      	cmp	r2, r3
 8007342:	d218      	bcs.n	8007376 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	3320      	adds	r3, #32
 800734e:	7812      	ldrb	r2, [r2, #0]
 8007350:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007356:	1c5a      	adds	r2, r3, #1
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007362:	b29b      	uxth	r3, r3
 8007364:	3b01      	subs	r3, #1
 8007366:	b29a      	uxth	r2, r3
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007374:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	695b      	ldr	r3, [r3, #20]
 800737c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800737e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 80ba 	beq.w	80074fa <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	695b      	ldr	r3, [r3, #20]
 800738c:	f003 0301 	and.w	r3, r3, #1
 8007390:	2b01      	cmp	r3, #1
 8007392:	d11b      	bne.n	80073cc <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073a0:	7812      	ldrb	r2, [r2, #0]
 80073a2:	b2d2      	uxtb	r2, r2
 80073a4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073aa:	1c5a      	adds	r2, r3, #1
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	3b01      	subs	r3, #1
 80073ba:	b29a      	uxth	r2, r3
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80073c8:	853b      	strh	r3, [r7, #40]	@ 0x28
 80073ca:	e096      	b.n	80074fa <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80073cc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80073ce:	8bfb      	ldrh	r3, [r7, #30]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d24a      	bcs.n	800746a <HAL_SPI_TransmitReceive+0x57e>
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d045      	beq.n	800746a <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073ea:	7812      	ldrb	r2, [r2, #0]
 80073ec:	b2d2      	uxtb	r2, r2
 80073ee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073f4:	1c5a      	adds	r2, r3, #1
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007406:	7812      	ldrb	r2, [r2, #0]
 8007408:	b2d2      	uxtb	r2, r2
 800740a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007410:	1c5a      	adds	r2, r3, #1
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007422:	7812      	ldrb	r2, [r2, #0]
 8007424:	b2d2      	uxtb	r2, r2
 8007426:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800742c:	1c5a      	adds	r2, r3, #1
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800743e:	7812      	ldrb	r2, [r2, #0]
 8007440:	b2d2      	uxtb	r2, r2
 8007442:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007448:	1c5a      	adds	r2, r3, #1
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007454:	b29b      	uxth	r3, r3
 8007456:	3b04      	subs	r3, #4
 8007458:	b29a      	uxth	r2, r3
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007466:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007468:	e047      	b.n	80074fa <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800746a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800746c:	2b03      	cmp	r3, #3
 800746e:	d820      	bhi.n	80074b2 <HAL_SPI_TransmitReceive+0x5c6>
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8007476:	2b00      	cmp	r3, #0
 8007478:	d01b      	beq.n	80074b2 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007486:	7812      	ldrb	r2, [r2, #0]
 8007488:	b2d2      	uxtb	r2, r2
 800748a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007490:	1c5a      	adds	r2, r3, #1
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800749c:	b29b      	uxth	r3, r3
 800749e:	3b01      	subs	r3, #1
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80074ae:	853b      	strh	r3, [r7, #40]	@ 0x28
 80074b0:	e023      	b.n	80074fa <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074b2:	f7fb fd53 	bl	8002f5c <HAL_GetTick>
 80074b6:	4602      	mov	r2, r0
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80074be:	429a      	cmp	r2, r3
 80074c0:	d803      	bhi.n	80074ca <HAL_SPI_TransmitReceive+0x5de>
 80074c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c8:	d102      	bne.n	80074d0 <HAL_SPI_TransmitReceive+0x5e4>
 80074ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d114      	bne.n	80074fa <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80074d0:	68f8      	ldr	r0, [r7, #12]
 80074d2:	f000 fa5f 	bl	8007994 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2201      	movs	r2, #1
 80074ea:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80074f6:	2303      	movs	r3, #3
 80074f8:	e02d      	b.n	8007556 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80074fa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f47f af11 	bne.w	8007324 <HAL_SPI_TransmitReceive+0x438>
 8007502:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007504:	2b00      	cmp	r3, #0
 8007506:	f47f af0d 	bne.w	8007324 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	9300      	str	r3, [sp, #0]
 800750e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007510:	2200      	movs	r2, #0
 8007512:	2108      	movs	r1, #8
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f000 fadd 	bl	8007ad4 <SPI_WaitOnFlagUntilTimeout>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d007      	beq.n	8007530 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007526:	f043 0220 	orr.w	r2, r3, #32
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f000 fa2f 	bl	8007994 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800754c:	2b00      	cmp	r3, #0
 800754e:	d001      	beq.n	8007554 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	e000      	b.n	8007556 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8007554:	2300      	movs	r3, #0
  }
}
 8007556:	4618      	mov	r0, r3
 8007558:	3730      	adds	r7, #48	@ 0x30
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop

08007560 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b08a      	sub	sp, #40	@ 0x28
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	695b      	ldr	r3, [r3, #20]
 8007576:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007578:	6a3a      	ldr	r2, [r7, #32]
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	4013      	ands	r3, r2
 800757e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007588:	2300      	movs	r3, #0
 800758a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007592:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	3330      	adds	r3, #48	@ 0x30
 800759a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d010      	beq.n	80075c8 <HAL_SPI_IRQHandler+0x68>
 80075a6:	6a3b      	ldr	r3, [r7, #32]
 80075a8:	f003 0308 	and.w	r3, r3, #8
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00b      	beq.n	80075c8 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	699a      	ldr	r2, [r3, #24]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80075be:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 f9c3 	bl	800794c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 80075c6:	e192      	b.n	80078ee <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d113      	bne.n	80075fa <HAL_SPI_IRQHandler+0x9a>
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	f003 0320 	and.w	r3, r3, #32
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10e      	bne.n	80075fa <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d009      	beq.n	80075fa <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	4798      	blx	r3
    hspi->RxISR(hspi);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	4798      	blx	r3
    handled = 1UL;
 80075f6:	2301      	movs	r3, #1
 80075f8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10f      	bne.n	8007624 <HAL_SPI_IRQHandler+0xc4>
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	f003 0301 	and.w	r3, r3, #1
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00a      	beq.n	8007624 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007614:	2b00      	cmp	r3, #0
 8007616:	d105      	bne.n	8007624 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	4798      	blx	r3
    handled = 1UL;
 8007620:	2301      	movs	r3, #1
 8007622:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	f003 0320 	and.w	r3, r3, #32
 800762a:	2b00      	cmp	r3, #0
 800762c:	d10f      	bne.n	800764e <HAL_SPI_IRQHandler+0xee>
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	f003 0302 	and.w	r3, r3, #2
 8007634:	2b00      	cmp	r3, #0
 8007636:	d00a      	beq.n	800764e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800763e:	2b00      	cmp	r3, #0
 8007640:	d105      	bne.n	800764e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	4798      	blx	r3
    handled = 1UL;
 800764a:	2301      	movs	r3, #1
 800764c:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800764e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007650:	2b00      	cmp	r3, #0
 8007652:	f040 8147 	bne.w	80078e4 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	f003 0308 	and.w	r3, r3, #8
 800765c:	2b00      	cmp	r3, #0
 800765e:	f000 808b 	beq.w	8007778 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	699a      	ldr	r2, [r3, #24]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f042 0208 	orr.w	r2, r2, #8
 8007670:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	699a      	ldr	r2, [r3, #24]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f042 0210 	orr.w	r2, r2, #16
 8007680:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	699a      	ldr	r2, [r3, #24]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007690:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	691a      	ldr	r2, [r3, #16]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f022 0208 	bic.w	r2, r2, #8
 80076a0:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d13d      	bne.n	800772c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80076b0:	e036      	b.n	8007720 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	2b0f      	cmp	r3, #15
 80076b8:	d90b      	bls.n	80076d2 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076c2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80076c4:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076ca:	1d1a      	adds	r2, r3, #4
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	665a      	str	r2, [r3, #100]	@ 0x64
 80076d0:	e01d      	b.n	800770e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	2b07      	cmp	r3, #7
 80076d8:	d90b      	bls.n	80076f2 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	8812      	ldrh	r2, [r2, #0]
 80076e2:	b292      	uxth	r2, r2
 80076e4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076ea:	1c9a      	adds	r2, r3, #2
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	665a      	str	r2, [r3, #100]	@ 0x64
 80076f0:	e00d      	b.n	800770e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076fe:	7812      	ldrb	r2, [r2, #0]
 8007700:	b2d2      	uxtb	r2, r2
 8007702:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007708:	1c5a      	adds	r2, r3, #1
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007714:	b29b      	uxth	r3, r3
 8007716:	3b01      	subs	r3, #1
 8007718:	b29a      	uxth	r2, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007726:	b29b      	uxth	r3, r3
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1c2      	bne.n	80076b2 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 f931 	bl	8007994 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2201      	movs	r2, #1
 8007736:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007740:	2b00      	cmp	r3, #0
 8007742:	d003      	beq.n	800774c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f8f7 	bl	8007938 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800774a:	e0d0      	b.n	80078ee <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800774c:	7cfb      	ldrb	r3, [r7, #19]
 800774e:	2b05      	cmp	r3, #5
 8007750:	d103      	bne.n	800775a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f8e6 	bl	8007924 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8007758:	e0c6      	b.n	80078e8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800775a:	7cfb      	ldrb	r3, [r7, #19]
 800775c:	2b04      	cmp	r3, #4
 800775e:	d103      	bne.n	8007768 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 f8d5 	bl	8007910 <HAL_SPI_RxCpltCallback>
    return;
 8007766:	e0bf      	b.n	80078e8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007768:	7cfb      	ldrb	r3, [r7, #19]
 800776a:	2b03      	cmp	r3, #3
 800776c:	f040 80bc 	bne.w	80078e8 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 f8c3 	bl	80078fc <HAL_SPI_TxCpltCallback>
    return;
 8007776:	e0b7      	b.n	80078e8 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800777e:	2b00      	cmp	r3, #0
 8007780:	f000 80b5 	beq.w	80078ee <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00f      	beq.n	80077ae <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007794:	f043 0204 	orr.w	r2, r3, #4
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	699a      	ldr	r2, [r3, #24]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80077ac:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00f      	beq.n	80077d8 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077be:	f043 0201 	orr.w	r2, r3, #1
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	699a      	ldr	r2, [r3, #24]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80077d6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00f      	beq.n	8007802 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077e8:	f043 0208 	orr.w	r2, r3, #8
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	699a      	ldr	r2, [r3, #24]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007800:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	f003 0320 	and.w	r3, r3, #32
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00f      	beq.n	800782c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007812:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	699a      	ldr	r2, [r3, #24]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f042 0220 	orr.w	r2, r2, #32
 800782a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007832:	2b00      	cmp	r3, #0
 8007834:	d05a      	beq.n	80078ec <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f022 0201 	bic.w	r2, r2, #1
 8007844:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	6919      	ldr	r1, [r3, #16]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	4b28      	ldr	r3, [pc, #160]	@ (80078f4 <HAL_SPI_IRQHandler+0x394>)
 8007852:	400b      	ands	r3, r1
 8007854:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800785c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007860:	d138      	bne.n	80078d4 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	689a      	ldr	r2, [r3, #8]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007870:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007876:	2b00      	cmp	r3, #0
 8007878:	d013      	beq.n	80078a2 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800787e:	4a1e      	ldr	r2, [pc, #120]	@ (80078f8 <HAL_SPI_IRQHandler+0x398>)
 8007880:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007886:	4618      	mov	r0, r3
 8007888:	f7fb fd2c 	bl	80032e4 <HAL_DMA_Abort_IT>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d007      	beq.n	80078a2 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007898:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d020      	beq.n	80078ec <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078ae:	4a12      	ldr	r2, [pc, #72]	@ (80078f8 <HAL_SPI_IRQHandler+0x398>)
 80078b0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7fb fd14 	bl	80032e4 <HAL_DMA_Abort_IT>
 80078bc:	4603      	mov	r3, r0
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d014      	beq.n	80078ec <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078c8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80078d2:	e00b      	b.n	80078ec <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 f82b 	bl	8007938 <HAL_SPI_ErrorCallback>
    return;
 80078e2:	e003      	b.n	80078ec <HAL_SPI_IRQHandler+0x38c>
    return;
 80078e4:	bf00      	nop
 80078e6:	e002      	b.n	80078ee <HAL_SPI_IRQHandler+0x38e>
    return;
 80078e8:	bf00      	nop
 80078ea:	e000      	b.n	80078ee <HAL_SPI_IRQHandler+0x38e>
    return;
 80078ec:	bf00      	nop
  }
}
 80078ee:	3728      	adds	r7, #40	@ 0x28
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	fffffc94 	.word	0xfffffc94
 80078f8:	08007961 	.word	0x08007961

080078fc <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007904:	bf00      	nop
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007918:	bf00      	nop
 800791a:	370c      	adds	r7, #12
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr

08007924 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800792c:	bf00      	nop
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007940:	bf00      	nop
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8007954:	bf00      	nop
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800796c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2200      	movs	r2, #0
 800797a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2201      	movs	r2, #1
 8007982:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	f7ff ffd6 	bl	8007938 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800798c:	bf00      	nop
 800798e:	3710      	adds	r7, #16
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	699a      	ldr	r2, [r3, #24]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f042 0208 	orr.w	r2, r2, #8
 80079b2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	699a      	ldr	r2, [r3, #24]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f042 0210 	orr.w	r2, r2, #16
 80079c2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f022 0201 	bic.w	r2, r2, #1
 80079d2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6919      	ldr	r1, [r3, #16]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	4b3c      	ldr	r3, [pc, #240]	@ (8007ad0 <SPI_CloseTransfer+0x13c>)
 80079e0:	400b      	ands	r3, r1
 80079e2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	689a      	ldr	r2, [r3, #8]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80079f2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	2b04      	cmp	r3, #4
 80079fe:	d014      	beq.n	8007a2a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f003 0320 	and.w	r3, r3, #32
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00f      	beq.n	8007a2a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a10:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	699a      	ldr	r2, [r3, #24]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f042 0220 	orr.w	r2, r2, #32
 8007a28:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b03      	cmp	r3, #3
 8007a34:	d014      	beq.n	8007a60 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00f      	beq.n	8007a60 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a46:	f043 0204 	orr.w	r2, r3, #4
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	699a      	ldr	r2, [r3, #24]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a5e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00f      	beq.n	8007a8a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a70:	f043 0201 	orr.w	r2, r3, #1
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	699a      	ldr	r2, [r3, #24]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a88:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00f      	beq.n	8007ab4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a9a:	f043 0208 	orr.w	r2, r3, #8
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	699a      	ldr	r2, [r3, #24]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007ab2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8007ac4:	bf00      	nop
 8007ac6:	3714      	adds	r7, #20
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr
 8007ad0:	fffffc90 	.word	0xfffffc90

08007ad4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	603b      	str	r3, [r7, #0]
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007ae4:	e010      	b.n	8007b08 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ae6:	f7fb fa39 	bl	8002f5c <HAL_GetTick>
 8007aea:	4602      	mov	r2, r0
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	683a      	ldr	r2, [r7, #0]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d803      	bhi.n	8007afe <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007afc:	d102      	bne.n	8007b04 <SPI_WaitOnFlagUntilTimeout+0x30>
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d101      	bne.n	8007b08 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007b04:	2303      	movs	r3, #3
 8007b06:	e00f      	b.n	8007b28 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	695a      	ldr	r2, [r3, #20]
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	4013      	ands	r3, r2
 8007b12:	68ba      	ldr	r2, [r7, #8]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	bf0c      	ite	eq
 8007b18:	2301      	moveq	r3, #1
 8007b1a:	2300      	movne	r3, #0
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	461a      	mov	r2, r3
 8007b20:	79fb      	ldrb	r3, [r7, #7]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d0df      	beq.n	8007ae6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3710      	adds	r7, #16
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b085      	sub	sp, #20
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b3c:	095b      	lsrs	r3, r3, #5
 8007b3e:	3301      	adds	r3, #1
 8007b40:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	3301      	adds	r3, #1
 8007b48:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	3307      	adds	r3, #7
 8007b4e:	08db      	lsrs	r3, r3, #3
 8007b50:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	fb02 f303 	mul.w	r3, r2, r3
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3714      	adds	r7, #20
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr

08007b66 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b082      	sub	sp, #8
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d101      	bne.n	8007b78 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e042      	b.n	8007bfe <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d106      	bne.n	8007b90 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 f83b 	bl	8007c06 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2224      	movs	r2, #36	@ 0x24
 8007b94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f022 0201 	bic.w	r2, r2, #1
 8007ba6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d002      	beq.n	8007bb6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 fe29 	bl	8008808 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f8be 	bl	8007d38 <UART_SetConfig>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d101      	bne.n	8007bc6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e01b      	b.n	8007bfe <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	685a      	ldr	r2, [r3, #4]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007bd4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	689a      	ldr	r2, [r3, #8]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007be4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f042 0201 	orr.w	r2, r2, #1
 8007bf4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 fea8 	bl	800894c <UART_CheckIdleState>
 8007bfc:	4603      	mov	r3, r0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3708      	adds	r7, #8
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8007c06:	b480      	push	{r7}
 8007c08:	b083      	sub	sp, #12
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8007c0e:	bf00      	nop
 8007c10:	370c      	adds	r7, #12
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr

08007c1a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b08a      	sub	sp, #40	@ 0x28
 8007c1e:	af02      	add	r7, sp, #8
 8007c20:	60f8      	str	r0, [r7, #12]
 8007c22:	60b9      	str	r1, [r7, #8]
 8007c24:	603b      	str	r3, [r7, #0]
 8007c26:	4613      	mov	r3, r2
 8007c28:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c30:	2b20      	cmp	r3, #32
 8007c32:	d17b      	bne.n	8007d2c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d002      	beq.n	8007c40 <HAL_UART_Transmit+0x26>
 8007c3a:	88fb      	ldrh	r3, [r7, #6]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d101      	bne.n	8007c44 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	e074      	b.n	8007d2e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2221      	movs	r2, #33	@ 0x21
 8007c50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c54:	f7fb f982 	bl	8002f5c <HAL_GetTick>
 8007c58:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	88fa      	ldrh	r2, [r7, #6]
 8007c5e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	88fa      	ldrh	r2, [r7, #6]
 8007c66:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c72:	d108      	bne.n	8007c86 <HAL_UART_Transmit+0x6c>
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d104      	bne.n	8007c86 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	61bb      	str	r3, [r7, #24]
 8007c84:	e003      	b.n	8007c8e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007c8e:	e030      	b.n	8007cf2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	9300      	str	r3, [sp, #0]
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	2200      	movs	r2, #0
 8007c98:	2180      	movs	r1, #128	@ 0x80
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f000 ff00 	bl	8008aa0 <UART_WaitOnFlagUntilTimeout>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d005      	beq.n	8007cb2 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2220      	movs	r2, #32
 8007caa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007cae:	2303      	movs	r3, #3
 8007cb0:	e03d      	b.n	8007d2e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d10b      	bne.n	8007cd0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	881b      	ldrh	r3, [r3, #0]
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cc6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	3302      	adds	r3, #2
 8007ccc:	61bb      	str	r3, [r7, #24]
 8007cce:	e007      	b.n	8007ce0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007cd0:	69fb      	ldr	r3, [r7, #28]
 8007cd2:	781a      	ldrb	r2, [r3, #0]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	3301      	adds	r3, #1
 8007cde:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1c8      	bne.n	8007c90 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	9300      	str	r3, [sp, #0]
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	2200      	movs	r2, #0
 8007d06:	2140      	movs	r1, #64	@ 0x40
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	f000 fec9 	bl	8008aa0 <UART_WaitOnFlagUntilTimeout>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d005      	beq.n	8007d20 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2220      	movs	r2, #32
 8007d18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007d1c:	2303      	movs	r3, #3
 8007d1e:	e006      	b.n	8007d2e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2220      	movs	r2, #32
 8007d24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	e000      	b.n	8007d2e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007d2c:	2302      	movs	r3, #2
  }
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3720      	adds	r7, #32
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
	...

08007d38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d3c:	b092      	sub	sp, #72	@ 0x48
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d42:	2300      	movs	r3, #0
 8007d44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	689a      	ldr	r2, [r3, #8]
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	431a      	orrs	r2, r3
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	695b      	ldr	r3, [r3, #20]
 8007d56:	431a      	orrs	r2, r3
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	69db      	ldr	r3, [r3, #28]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	4bbe      	ldr	r3, [pc, #760]	@ (8008060 <UART_SetConfig+0x328>)
 8007d68:	4013      	ands	r3, r2
 8007d6a:	697a      	ldr	r2, [r7, #20]
 8007d6c:	6812      	ldr	r2, [r2, #0]
 8007d6e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007d70:	430b      	orrs	r3, r1
 8007d72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	68da      	ldr	r2, [r3, #12]
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	430a      	orrs	r2, r1
 8007d88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	699b      	ldr	r3, [r3, #24]
 8007d8e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4ab3      	ldr	r2, [pc, #716]	@ (8008064 <UART_SetConfig+0x32c>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d004      	beq.n	8007da4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	6a1b      	ldr	r3, [r3, #32]
 8007d9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007da0:	4313      	orrs	r3, r2
 8007da2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	689a      	ldr	r2, [r3, #8]
 8007daa:	4baf      	ldr	r3, [pc, #700]	@ (8008068 <UART_SetConfig+0x330>)
 8007dac:	4013      	ands	r3, r2
 8007dae:	697a      	ldr	r2, [r7, #20]
 8007db0:	6812      	ldr	r2, [r2, #0]
 8007db2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007db4:	430b      	orrs	r3, r1
 8007db6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dbe:	f023 010f 	bic.w	r1, r3, #15
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	430a      	orrs	r2, r1
 8007dcc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4aa6      	ldr	r2, [pc, #664]	@ (800806c <UART_SetConfig+0x334>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d177      	bne.n	8007ec8 <UART_SetConfig+0x190>
 8007dd8:	4ba5      	ldr	r3, [pc, #660]	@ (8008070 <UART_SetConfig+0x338>)
 8007dda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ddc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007de0:	2b28      	cmp	r3, #40	@ 0x28
 8007de2:	d86d      	bhi.n	8007ec0 <UART_SetConfig+0x188>
 8007de4:	a201      	add	r2, pc, #4	@ (adr r2, 8007dec <UART_SetConfig+0xb4>)
 8007de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dea:	bf00      	nop
 8007dec:	08007e91 	.word	0x08007e91
 8007df0:	08007ec1 	.word	0x08007ec1
 8007df4:	08007ec1 	.word	0x08007ec1
 8007df8:	08007ec1 	.word	0x08007ec1
 8007dfc:	08007ec1 	.word	0x08007ec1
 8007e00:	08007ec1 	.word	0x08007ec1
 8007e04:	08007ec1 	.word	0x08007ec1
 8007e08:	08007ec1 	.word	0x08007ec1
 8007e0c:	08007e99 	.word	0x08007e99
 8007e10:	08007ec1 	.word	0x08007ec1
 8007e14:	08007ec1 	.word	0x08007ec1
 8007e18:	08007ec1 	.word	0x08007ec1
 8007e1c:	08007ec1 	.word	0x08007ec1
 8007e20:	08007ec1 	.word	0x08007ec1
 8007e24:	08007ec1 	.word	0x08007ec1
 8007e28:	08007ec1 	.word	0x08007ec1
 8007e2c:	08007ea1 	.word	0x08007ea1
 8007e30:	08007ec1 	.word	0x08007ec1
 8007e34:	08007ec1 	.word	0x08007ec1
 8007e38:	08007ec1 	.word	0x08007ec1
 8007e3c:	08007ec1 	.word	0x08007ec1
 8007e40:	08007ec1 	.word	0x08007ec1
 8007e44:	08007ec1 	.word	0x08007ec1
 8007e48:	08007ec1 	.word	0x08007ec1
 8007e4c:	08007ea9 	.word	0x08007ea9
 8007e50:	08007ec1 	.word	0x08007ec1
 8007e54:	08007ec1 	.word	0x08007ec1
 8007e58:	08007ec1 	.word	0x08007ec1
 8007e5c:	08007ec1 	.word	0x08007ec1
 8007e60:	08007ec1 	.word	0x08007ec1
 8007e64:	08007ec1 	.word	0x08007ec1
 8007e68:	08007ec1 	.word	0x08007ec1
 8007e6c:	08007eb1 	.word	0x08007eb1
 8007e70:	08007ec1 	.word	0x08007ec1
 8007e74:	08007ec1 	.word	0x08007ec1
 8007e78:	08007ec1 	.word	0x08007ec1
 8007e7c:	08007ec1 	.word	0x08007ec1
 8007e80:	08007ec1 	.word	0x08007ec1
 8007e84:	08007ec1 	.word	0x08007ec1
 8007e88:	08007ec1 	.word	0x08007ec1
 8007e8c:	08007eb9 	.word	0x08007eb9
 8007e90:	2301      	movs	r3, #1
 8007e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e96:	e222      	b.n	80082de <UART_SetConfig+0x5a6>
 8007e98:	2304      	movs	r3, #4
 8007e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e9e:	e21e      	b.n	80082de <UART_SetConfig+0x5a6>
 8007ea0:	2308      	movs	r3, #8
 8007ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ea6:	e21a      	b.n	80082de <UART_SetConfig+0x5a6>
 8007ea8:	2310      	movs	r3, #16
 8007eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eae:	e216      	b.n	80082de <UART_SetConfig+0x5a6>
 8007eb0:	2320      	movs	r3, #32
 8007eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eb6:	e212      	b.n	80082de <UART_SetConfig+0x5a6>
 8007eb8:	2340      	movs	r3, #64	@ 0x40
 8007eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ebe:	e20e      	b.n	80082de <UART_SetConfig+0x5a6>
 8007ec0:	2380      	movs	r3, #128	@ 0x80
 8007ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ec6:	e20a      	b.n	80082de <UART_SetConfig+0x5a6>
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a69      	ldr	r2, [pc, #420]	@ (8008074 <UART_SetConfig+0x33c>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d130      	bne.n	8007f34 <UART_SetConfig+0x1fc>
 8007ed2:	4b67      	ldr	r3, [pc, #412]	@ (8008070 <UART_SetConfig+0x338>)
 8007ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ed6:	f003 0307 	and.w	r3, r3, #7
 8007eda:	2b05      	cmp	r3, #5
 8007edc:	d826      	bhi.n	8007f2c <UART_SetConfig+0x1f4>
 8007ede:	a201      	add	r2, pc, #4	@ (adr r2, 8007ee4 <UART_SetConfig+0x1ac>)
 8007ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee4:	08007efd 	.word	0x08007efd
 8007ee8:	08007f05 	.word	0x08007f05
 8007eec:	08007f0d 	.word	0x08007f0d
 8007ef0:	08007f15 	.word	0x08007f15
 8007ef4:	08007f1d 	.word	0x08007f1d
 8007ef8:	08007f25 	.word	0x08007f25
 8007efc:	2300      	movs	r3, #0
 8007efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f02:	e1ec      	b.n	80082de <UART_SetConfig+0x5a6>
 8007f04:	2304      	movs	r3, #4
 8007f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f0a:	e1e8      	b.n	80082de <UART_SetConfig+0x5a6>
 8007f0c:	2308      	movs	r3, #8
 8007f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f12:	e1e4      	b.n	80082de <UART_SetConfig+0x5a6>
 8007f14:	2310      	movs	r3, #16
 8007f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f1a:	e1e0      	b.n	80082de <UART_SetConfig+0x5a6>
 8007f1c:	2320      	movs	r3, #32
 8007f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f22:	e1dc      	b.n	80082de <UART_SetConfig+0x5a6>
 8007f24:	2340      	movs	r3, #64	@ 0x40
 8007f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f2a:	e1d8      	b.n	80082de <UART_SetConfig+0x5a6>
 8007f2c:	2380      	movs	r3, #128	@ 0x80
 8007f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f32:	e1d4      	b.n	80082de <UART_SetConfig+0x5a6>
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a4f      	ldr	r2, [pc, #316]	@ (8008078 <UART_SetConfig+0x340>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d130      	bne.n	8007fa0 <UART_SetConfig+0x268>
 8007f3e:	4b4c      	ldr	r3, [pc, #304]	@ (8008070 <UART_SetConfig+0x338>)
 8007f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f42:	f003 0307 	and.w	r3, r3, #7
 8007f46:	2b05      	cmp	r3, #5
 8007f48:	d826      	bhi.n	8007f98 <UART_SetConfig+0x260>
 8007f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8007f50 <UART_SetConfig+0x218>)
 8007f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f50:	08007f69 	.word	0x08007f69
 8007f54:	08007f71 	.word	0x08007f71
 8007f58:	08007f79 	.word	0x08007f79
 8007f5c:	08007f81 	.word	0x08007f81
 8007f60:	08007f89 	.word	0x08007f89
 8007f64:	08007f91 	.word	0x08007f91
 8007f68:	2300      	movs	r3, #0
 8007f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f6e:	e1b6      	b.n	80082de <UART_SetConfig+0x5a6>
 8007f70:	2304      	movs	r3, #4
 8007f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f76:	e1b2      	b.n	80082de <UART_SetConfig+0x5a6>
 8007f78:	2308      	movs	r3, #8
 8007f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f7e:	e1ae      	b.n	80082de <UART_SetConfig+0x5a6>
 8007f80:	2310      	movs	r3, #16
 8007f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f86:	e1aa      	b.n	80082de <UART_SetConfig+0x5a6>
 8007f88:	2320      	movs	r3, #32
 8007f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f8e:	e1a6      	b.n	80082de <UART_SetConfig+0x5a6>
 8007f90:	2340      	movs	r3, #64	@ 0x40
 8007f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f96:	e1a2      	b.n	80082de <UART_SetConfig+0x5a6>
 8007f98:	2380      	movs	r3, #128	@ 0x80
 8007f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f9e:	e19e      	b.n	80082de <UART_SetConfig+0x5a6>
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a35      	ldr	r2, [pc, #212]	@ (800807c <UART_SetConfig+0x344>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d130      	bne.n	800800c <UART_SetConfig+0x2d4>
 8007faa:	4b31      	ldr	r3, [pc, #196]	@ (8008070 <UART_SetConfig+0x338>)
 8007fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fae:	f003 0307 	and.w	r3, r3, #7
 8007fb2:	2b05      	cmp	r3, #5
 8007fb4:	d826      	bhi.n	8008004 <UART_SetConfig+0x2cc>
 8007fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8007fbc <UART_SetConfig+0x284>)
 8007fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fbc:	08007fd5 	.word	0x08007fd5
 8007fc0:	08007fdd 	.word	0x08007fdd
 8007fc4:	08007fe5 	.word	0x08007fe5
 8007fc8:	08007fed 	.word	0x08007fed
 8007fcc:	08007ff5 	.word	0x08007ff5
 8007fd0:	08007ffd 	.word	0x08007ffd
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fda:	e180      	b.n	80082de <UART_SetConfig+0x5a6>
 8007fdc:	2304      	movs	r3, #4
 8007fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fe2:	e17c      	b.n	80082de <UART_SetConfig+0x5a6>
 8007fe4:	2308      	movs	r3, #8
 8007fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fea:	e178      	b.n	80082de <UART_SetConfig+0x5a6>
 8007fec:	2310      	movs	r3, #16
 8007fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ff2:	e174      	b.n	80082de <UART_SetConfig+0x5a6>
 8007ff4:	2320      	movs	r3, #32
 8007ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ffa:	e170      	b.n	80082de <UART_SetConfig+0x5a6>
 8007ffc:	2340      	movs	r3, #64	@ 0x40
 8007ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008002:	e16c      	b.n	80082de <UART_SetConfig+0x5a6>
 8008004:	2380      	movs	r3, #128	@ 0x80
 8008006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800800a:	e168      	b.n	80082de <UART_SetConfig+0x5a6>
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a1b      	ldr	r2, [pc, #108]	@ (8008080 <UART_SetConfig+0x348>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d142      	bne.n	800809c <UART_SetConfig+0x364>
 8008016:	4b16      	ldr	r3, [pc, #88]	@ (8008070 <UART_SetConfig+0x338>)
 8008018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800801a:	f003 0307 	and.w	r3, r3, #7
 800801e:	2b05      	cmp	r3, #5
 8008020:	d838      	bhi.n	8008094 <UART_SetConfig+0x35c>
 8008022:	a201      	add	r2, pc, #4	@ (adr r2, 8008028 <UART_SetConfig+0x2f0>)
 8008024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008028:	08008041 	.word	0x08008041
 800802c:	08008049 	.word	0x08008049
 8008030:	08008051 	.word	0x08008051
 8008034:	08008059 	.word	0x08008059
 8008038:	08008085 	.word	0x08008085
 800803c:	0800808d 	.word	0x0800808d
 8008040:	2300      	movs	r3, #0
 8008042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008046:	e14a      	b.n	80082de <UART_SetConfig+0x5a6>
 8008048:	2304      	movs	r3, #4
 800804a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800804e:	e146      	b.n	80082de <UART_SetConfig+0x5a6>
 8008050:	2308      	movs	r3, #8
 8008052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008056:	e142      	b.n	80082de <UART_SetConfig+0x5a6>
 8008058:	2310      	movs	r3, #16
 800805a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800805e:	e13e      	b.n	80082de <UART_SetConfig+0x5a6>
 8008060:	cfff69f3 	.word	0xcfff69f3
 8008064:	58000c00 	.word	0x58000c00
 8008068:	11fff4ff 	.word	0x11fff4ff
 800806c:	40011000 	.word	0x40011000
 8008070:	58024400 	.word	0x58024400
 8008074:	40004400 	.word	0x40004400
 8008078:	40004800 	.word	0x40004800
 800807c:	40004c00 	.word	0x40004c00
 8008080:	40005000 	.word	0x40005000
 8008084:	2320      	movs	r3, #32
 8008086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800808a:	e128      	b.n	80082de <UART_SetConfig+0x5a6>
 800808c:	2340      	movs	r3, #64	@ 0x40
 800808e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008092:	e124      	b.n	80082de <UART_SetConfig+0x5a6>
 8008094:	2380      	movs	r3, #128	@ 0x80
 8008096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800809a:	e120      	b.n	80082de <UART_SetConfig+0x5a6>
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4acb      	ldr	r2, [pc, #812]	@ (80083d0 <UART_SetConfig+0x698>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d176      	bne.n	8008194 <UART_SetConfig+0x45c>
 80080a6:	4bcb      	ldr	r3, [pc, #812]	@ (80083d4 <UART_SetConfig+0x69c>)
 80080a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80080ae:	2b28      	cmp	r3, #40	@ 0x28
 80080b0:	d86c      	bhi.n	800818c <UART_SetConfig+0x454>
 80080b2:	a201      	add	r2, pc, #4	@ (adr r2, 80080b8 <UART_SetConfig+0x380>)
 80080b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b8:	0800815d 	.word	0x0800815d
 80080bc:	0800818d 	.word	0x0800818d
 80080c0:	0800818d 	.word	0x0800818d
 80080c4:	0800818d 	.word	0x0800818d
 80080c8:	0800818d 	.word	0x0800818d
 80080cc:	0800818d 	.word	0x0800818d
 80080d0:	0800818d 	.word	0x0800818d
 80080d4:	0800818d 	.word	0x0800818d
 80080d8:	08008165 	.word	0x08008165
 80080dc:	0800818d 	.word	0x0800818d
 80080e0:	0800818d 	.word	0x0800818d
 80080e4:	0800818d 	.word	0x0800818d
 80080e8:	0800818d 	.word	0x0800818d
 80080ec:	0800818d 	.word	0x0800818d
 80080f0:	0800818d 	.word	0x0800818d
 80080f4:	0800818d 	.word	0x0800818d
 80080f8:	0800816d 	.word	0x0800816d
 80080fc:	0800818d 	.word	0x0800818d
 8008100:	0800818d 	.word	0x0800818d
 8008104:	0800818d 	.word	0x0800818d
 8008108:	0800818d 	.word	0x0800818d
 800810c:	0800818d 	.word	0x0800818d
 8008110:	0800818d 	.word	0x0800818d
 8008114:	0800818d 	.word	0x0800818d
 8008118:	08008175 	.word	0x08008175
 800811c:	0800818d 	.word	0x0800818d
 8008120:	0800818d 	.word	0x0800818d
 8008124:	0800818d 	.word	0x0800818d
 8008128:	0800818d 	.word	0x0800818d
 800812c:	0800818d 	.word	0x0800818d
 8008130:	0800818d 	.word	0x0800818d
 8008134:	0800818d 	.word	0x0800818d
 8008138:	0800817d 	.word	0x0800817d
 800813c:	0800818d 	.word	0x0800818d
 8008140:	0800818d 	.word	0x0800818d
 8008144:	0800818d 	.word	0x0800818d
 8008148:	0800818d 	.word	0x0800818d
 800814c:	0800818d 	.word	0x0800818d
 8008150:	0800818d 	.word	0x0800818d
 8008154:	0800818d 	.word	0x0800818d
 8008158:	08008185 	.word	0x08008185
 800815c:	2301      	movs	r3, #1
 800815e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008162:	e0bc      	b.n	80082de <UART_SetConfig+0x5a6>
 8008164:	2304      	movs	r3, #4
 8008166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800816a:	e0b8      	b.n	80082de <UART_SetConfig+0x5a6>
 800816c:	2308      	movs	r3, #8
 800816e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008172:	e0b4      	b.n	80082de <UART_SetConfig+0x5a6>
 8008174:	2310      	movs	r3, #16
 8008176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800817a:	e0b0      	b.n	80082de <UART_SetConfig+0x5a6>
 800817c:	2320      	movs	r3, #32
 800817e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008182:	e0ac      	b.n	80082de <UART_SetConfig+0x5a6>
 8008184:	2340      	movs	r3, #64	@ 0x40
 8008186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800818a:	e0a8      	b.n	80082de <UART_SetConfig+0x5a6>
 800818c:	2380      	movs	r3, #128	@ 0x80
 800818e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008192:	e0a4      	b.n	80082de <UART_SetConfig+0x5a6>
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a8f      	ldr	r2, [pc, #572]	@ (80083d8 <UART_SetConfig+0x6a0>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d130      	bne.n	8008200 <UART_SetConfig+0x4c8>
 800819e:	4b8d      	ldr	r3, [pc, #564]	@ (80083d4 <UART_SetConfig+0x69c>)
 80081a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081a2:	f003 0307 	and.w	r3, r3, #7
 80081a6:	2b05      	cmp	r3, #5
 80081a8:	d826      	bhi.n	80081f8 <UART_SetConfig+0x4c0>
 80081aa:	a201      	add	r2, pc, #4	@ (adr r2, 80081b0 <UART_SetConfig+0x478>)
 80081ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b0:	080081c9 	.word	0x080081c9
 80081b4:	080081d1 	.word	0x080081d1
 80081b8:	080081d9 	.word	0x080081d9
 80081bc:	080081e1 	.word	0x080081e1
 80081c0:	080081e9 	.word	0x080081e9
 80081c4:	080081f1 	.word	0x080081f1
 80081c8:	2300      	movs	r3, #0
 80081ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081ce:	e086      	b.n	80082de <UART_SetConfig+0x5a6>
 80081d0:	2304      	movs	r3, #4
 80081d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081d6:	e082      	b.n	80082de <UART_SetConfig+0x5a6>
 80081d8:	2308      	movs	r3, #8
 80081da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081de:	e07e      	b.n	80082de <UART_SetConfig+0x5a6>
 80081e0:	2310      	movs	r3, #16
 80081e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081e6:	e07a      	b.n	80082de <UART_SetConfig+0x5a6>
 80081e8:	2320      	movs	r3, #32
 80081ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081ee:	e076      	b.n	80082de <UART_SetConfig+0x5a6>
 80081f0:	2340      	movs	r3, #64	@ 0x40
 80081f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081f6:	e072      	b.n	80082de <UART_SetConfig+0x5a6>
 80081f8:	2380      	movs	r3, #128	@ 0x80
 80081fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081fe:	e06e      	b.n	80082de <UART_SetConfig+0x5a6>
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a75      	ldr	r2, [pc, #468]	@ (80083dc <UART_SetConfig+0x6a4>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d130      	bne.n	800826c <UART_SetConfig+0x534>
 800820a:	4b72      	ldr	r3, [pc, #456]	@ (80083d4 <UART_SetConfig+0x69c>)
 800820c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800820e:	f003 0307 	and.w	r3, r3, #7
 8008212:	2b05      	cmp	r3, #5
 8008214:	d826      	bhi.n	8008264 <UART_SetConfig+0x52c>
 8008216:	a201      	add	r2, pc, #4	@ (adr r2, 800821c <UART_SetConfig+0x4e4>)
 8008218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821c:	08008235 	.word	0x08008235
 8008220:	0800823d 	.word	0x0800823d
 8008224:	08008245 	.word	0x08008245
 8008228:	0800824d 	.word	0x0800824d
 800822c:	08008255 	.word	0x08008255
 8008230:	0800825d 	.word	0x0800825d
 8008234:	2300      	movs	r3, #0
 8008236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800823a:	e050      	b.n	80082de <UART_SetConfig+0x5a6>
 800823c:	2304      	movs	r3, #4
 800823e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008242:	e04c      	b.n	80082de <UART_SetConfig+0x5a6>
 8008244:	2308      	movs	r3, #8
 8008246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800824a:	e048      	b.n	80082de <UART_SetConfig+0x5a6>
 800824c:	2310      	movs	r3, #16
 800824e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008252:	e044      	b.n	80082de <UART_SetConfig+0x5a6>
 8008254:	2320      	movs	r3, #32
 8008256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800825a:	e040      	b.n	80082de <UART_SetConfig+0x5a6>
 800825c:	2340      	movs	r3, #64	@ 0x40
 800825e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008262:	e03c      	b.n	80082de <UART_SetConfig+0x5a6>
 8008264:	2380      	movs	r3, #128	@ 0x80
 8008266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800826a:	e038      	b.n	80082de <UART_SetConfig+0x5a6>
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a5b      	ldr	r2, [pc, #364]	@ (80083e0 <UART_SetConfig+0x6a8>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d130      	bne.n	80082d8 <UART_SetConfig+0x5a0>
 8008276:	4b57      	ldr	r3, [pc, #348]	@ (80083d4 <UART_SetConfig+0x69c>)
 8008278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800827a:	f003 0307 	and.w	r3, r3, #7
 800827e:	2b05      	cmp	r3, #5
 8008280:	d826      	bhi.n	80082d0 <UART_SetConfig+0x598>
 8008282:	a201      	add	r2, pc, #4	@ (adr r2, 8008288 <UART_SetConfig+0x550>)
 8008284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008288:	080082a1 	.word	0x080082a1
 800828c:	080082a9 	.word	0x080082a9
 8008290:	080082b1 	.word	0x080082b1
 8008294:	080082b9 	.word	0x080082b9
 8008298:	080082c1 	.word	0x080082c1
 800829c:	080082c9 	.word	0x080082c9
 80082a0:	2302      	movs	r3, #2
 80082a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082a6:	e01a      	b.n	80082de <UART_SetConfig+0x5a6>
 80082a8:	2304      	movs	r3, #4
 80082aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ae:	e016      	b.n	80082de <UART_SetConfig+0x5a6>
 80082b0:	2308      	movs	r3, #8
 80082b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082b6:	e012      	b.n	80082de <UART_SetConfig+0x5a6>
 80082b8:	2310      	movs	r3, #16
 80082ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082be:	e00e      	b.n	80082de <UART_SetConfig+0x5a6>
 80082c0:	2320      	movs	r3, #32
 80082c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082c6:	e00a      	b.n	80082de <UART_SetConfig+0x5a6>
 80082c8:	2340      	movs	r3, #64	@ 0x40
 80082ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ce:	e006      	b.n	80082de <UART_SetConfig+0x5a6>
 80082d0:	2380      	movs	r3, #128	@ 0x80
 80082d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082d6:	e002      	b.n	80082de <UART_SetConfig+0x5a6>
 80082d8:	2380      	movs	r3, #128	@ 0x80
 80082da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a3f      	ldr	r2, [pc, #252]	@ (80083e0 <UART_SetConfig+0x6a8>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	f040 80f8 	bne.w	80084da <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80082ea:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80082ee:	2b20      	cmp	r3, #32
 80082f0:	dc46      	bgt.n	8008380 <UART_SetConfig+0x648>
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	f2c0 8082 	blt.w	80083fc <UART_SetConfig+0x6c4>
 80082f8:	3b02      	subs	r3, #2
 80082fa:	2b1e      	cmp	r3, #30
 80082fc:	d87e      	bhi.n	80083fc <UART_SetConfig+0x6c4>
 80082fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008304 <UART_SetConfig+0x5cc>)
 8008300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008304:	08008387 	.word	0x08008387
 8008308:	080083fd 	.word	0x080083fd
 800830c:	0800838f 	.word	0x0800838f
 8008310:	080083fd 	.word	0x080083fd
 8008314:	080083fd 	.word	0x080083fd
 8008318:	080083fd 	.word	0x080083fd
 800831c:	0800839f 	.word	0x0800839f
 8008320:	080083fd 	.word	0x080083fd
 8008324:	080083fd 	.word	0x080083fd
 8008328:	080083fd 	.word	0x080083fd
 800832c:	080083fd 	.word	0x080083fd
 8008330:	080083fd 	.word	0x080083fd
 8008334:	080083fd 	.word	0x080083fd
 8008338:	080083fd 	.word	0x080083fd
 800833c:	080083af 	.word	0x080083af
 8008340:	080083fd 	.word	0x080083fd
 8008344:	080083fd 	.word	0x080083fd
 8008348:	080083fd 	.word	0x080083fd
 800834c:	080083fd 	.word	0x080083fd
 8008350:	080083fd 	.word	0x080083fd
 8008354:	080083fd 	.word	0x080083fd
 8008358:	080083fd 	.word	0x080083fd
 800835c:	080083fd 	.word	0x080083fd
 8008360:	080083fd 	.word	0x080083fd
 8008364:	080083fd 	.word	0x080083fd
 8008368:	080083fd 	.word	0x080083fd
 800836c:	080083fd 	.word	0x080083fd
 8008370:	080083fd 	.word	0x080083fd
 8008374:	080083fd 	.word	0x080083fd
 8008378:	080083fd 	.word	0x080083fd
 800837c:	080083ef 	.word	0x080083ef
 8008380:	2b40      	cmp	r3, #64	@ 0x40
 8008382:	d037      	beq.n	80083f4 <UART_SetConfig+0x6bc>
 8008384:	e03a      	b.n	80083fc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008386:	f7fd fe7d 	bl	8006084 <HAL_RCCEx_GetD3PCLK1Freq>
 800838a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800838c:	e03c      	b.n	8008408 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800838e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008392:	4618      	mov	r0, r3
 8008394:	f7fd fe8c 	bl	80060b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800839a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800839c:	e034      	b.n	8008408 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800839e:	f107 0318 	add.w	r3, r7, #24
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7fd ffd8 	bl	8006358 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80083a8:	69fb      	ldr	r3, [r7, #28]
 80083aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083ac:	e02c      	b.n	8008408 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083ae:	4b09      	ldr	r3, [pc, #36]	@ (80083d4 <UART_SetConfig+0x69c>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f003 0320 	and.w	r3, r3, #32
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d016      	beq.n	80083e8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80083ba:	4b06      	ldr	r3, [pc, #24]	@ (80083d4 <UART_SetConfig+0x69c>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	08db      	lsrs	r3, r3, #3
 80083c0:	f003 0303 	and.w	r3, r3, #3
 80083c4:	4a07      	ldr	r2, [pc, #28]	@ (80083e4 <UART_SetConfig+0x6ac>)
 80083c6:	fa22 f303 	lsr.w	r3, r2, r3
 80083ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80083cc:	e01c      	b.n	8008408 <UART_SetConfig+0x6d0>
 80083ce:	bf00      	nop
 80083d0:	40011400 	.word	0x40011400
 80083d4:	58024400 	.word	0x58024400
 80083d8:	40007800 	.word	0x40007800
 80083dc:	40007c00 	.word	0x40007c00
 80083e0:	58000c00 	.word	0x58000c00
 80083e4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80083e8:	4b9d      	ldr	r3, [pc, #628]	@ (8008660 <UART_SetConfig+0x928>)
 80083ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083ec:	e00c      	b.n	8008408 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80083ee:	4b9d      	ldr	r3, [pc, #628]	@ (8008664 <UART_SetConfig+0x92c>)
 80083f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083f2:	e009      	b.n	8008408 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083fa:	e005      	b.n	8008408 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80083fc:	2300      	movs	r3, #0
 80083fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008406:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008408:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800840a:	2b00      	cmp	r3, #0
 800840c:	f000 81de 	beq.w	80087cc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008414:	4a94      	ldr	r2, [pc, #592]	@ (8008668 <UART_SetConfig+0x930>)
 8008416:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800841a:	461a      	mov	r2, r3
 800841c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800841e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008422:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	685a      	ldr	r2, [r3, #4]
 8008428:	4613      	mov	r3, r2
 800842a:	005b      	lsls	r3, r3, #1
 800842c:	4413      	add	r3, r2
 800842e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008430:	429a      	cmp	r2, r3
 8008432:	d305      	bcc.n	8008440 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800843a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800843c:	429a      	cmp	r2, r3
 800843e:	d903      	bls.n	8008448 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008440:	2301      	movs	r3, #1
 8008442:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008446:	e1c1      	b.n	80087cc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800844a:	2200      	movs	r2, #0
 800844c:	60bb      	str	r3, [r7, #8]
 800844e:	60fa      	str	r2, [r7, #12]
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008454:	4a84      	ldr	r2, [pc, #528]	@ (8008668 <UART_SetConfig+0x930>)
 8008456:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800845a:	b29b      	uxth	r3, r3
 800845c:	2200      	movs	r2, #0
 800845e:	603b      	str	r3, [r7, #0]
 8008460:	607a      	str	r2, [r7, #4]
 8008462:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008466:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800846a:	f7f7 ff89 	bl	8000380 <__aeabi_uldivmod>
 800846e:	4602      	mov	r2, r0
 8008470:	460b      	mov	r3, r1
 8008472:	4610      	mov	r0, r2
 8008474:	4619      	mov	r1, r3
 8008476:	f04f 0200 	mov.w	r2, #0
 800847a:	f04f 0300 	mov.w	r3, #0
 800847e:	020b      	lsls	r3, r1, #8
 8008480:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008484:	0202      	lsls	r2, r0, #8
 8008486:	6979      	ldr	r1, [r7, #20]
 8008488:	6849      	ldr	r1, [r1, #4]
 800848a:	0849      	lsrs	r1, r1, #1
 800848c:	2000      	movs	r0, #0
 800848e:	460c      	mov	r4, r1
 8008490:	4605      	mov	r5, r0
 8008492:	eb12 0804 	adds.w	r8, r2, r4
 8008496:	eb43 0905 	adc.w	r9, r3, r5
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	469a      	mov	sl, r3
 80084a2:	4693      	mov	fp, r2
 80084a4:	4652      	mov	r2, sl
 80084a6:	465b      	mov	r3, fp
 80084a8:	4640      	mov	r0, r8
 80084aa:	4649      	mov	r1, r9
 80084ac:	f7f7 ff68 	bl	8000380 <__aeabi_uldivmod>
 80084b0:	4602      	mov	r2, r0
 80084b2:	460b      	mov	r3, r1
 80084b4:	4613      	mov	r3, r2
 80084b6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80084b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80084be:	d308      	bcc.n	80084d2 <UART_SetConfig+0x79a>
 80084c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084c6:	d204      	bcs.n	80084d2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80084ce:	60da      	str	r2, [r3, #12]
 80084d0:	e17c      	b.n	80087cc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80084d2:	2301      	movs	r3, #1
 80084d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80084d8:	e178      	b.n	80087cc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	69db      	ldr	r3, [r3, #28]
 80084de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084e2:	f040 80c5 	bne.w	8008670 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80084e6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80084ea:	2b20      	cmp	r3, #32
 80084ec:	dc48      	bgt.n	8008580 <UART_SetConfig+0x848>
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	db7b      	blt.n	80085ea <UART_SetConfig+0x8b2>
 80084f2:	2b20      	cmp	r3, #32
 80084f4:	d879      	bhi.n	80085ea <UART_SetConfig+0x8b2>
 80084f6:	a201      	add	r2, pc, #4	@ (adr r2, 80084fc <UART_SetConfig+0x7c4>)
 80084f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084fc:	08008587 	.word	0x08008587
 8008500:	0800858f 	.word	0x0800858f
 8008504:	080085eb 	.word	0x080085eb
 8008508:	080085eb 	.word	0x080085eb
 800850c:	08008597 	.word	0x08008597
 8008510:	080085eb 	.word	0x080085eb
 8008514:	080085eb 	.word	0x080085eb
 8008518:	080085eb 	.word	0x080085eb
 800851c:	080085a7 	.word	0x080085a7
 8008520:	080085eb 	.word	0x080085eb
 8008524:	080085eb 	.word	0x080085eb
 8008528:	080085eb 	.word	0x080085eb
 800852c:	080085eb 	.word	0x080085eb
 8008530:	080085eb 	.word	0x080085eb
 8008534:	080085eb 	.word	0x080085eb
 8008538:	080085eb 	.word	0x080085eb
 800853c:	080085b7 	.word	0x080085b7
 8008540:	080085eb 	.word	0x080085eb
 8008544:	080085eb 	.word	0x080085eb
 8008548:	080085eb 	.word	0x080085eb
 800854c:	080085eb 	.word	0x080085eb
 8008550:	080085eb 	.word	0x080085eb
 8008554:	080085eb 	.word	0x080085eb
 8008558:	080085eb 	.word	0x080085eb
 800855c:	080085eb 	.word	0x080085eb
 8008560:	080085eb 	.word	0x080085eb
 8008564:	080085eb 	.word	0x080085eb
 8008568:	080085eb 	.word	0x080085eb
 800856c:	080085eb 	.word	0x080085eb
 8008570:	080085eb 	.word	0x080085eb
 8008574:	080085eb 	.word	0x080085eb
 8008578:	080085eb 	.word	0x080085eb
 800857c:	080085dd 	.word	0x080085dd
 8008580:	2b40      	cmp	r3, #64	@ 0x40
 8008582:	d02e      	beq.n	80085e2 <UART_SetConfig+0x8aa>
 8008584:	e031      	b.n	80085ea <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008586:	f7fc fb47 	bl	8004c18 <HAL_RCC_GetPCLK1Freq>
 800858a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800858c:	e033      	b.n	80085f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800858e:	f7fc fb59 	bl	8004c44 <HAL_RCC_GetPCLK2Freq>
 8008592:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008594:	e02f      	b.n	80085f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008596:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800859a:	4618      	mov	r0, r3
 800859c:	f7fd fd88 	bl	80060b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80085a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085a4:	e027      	b.n	80085f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085a6:	f107 0318 	add.w	r3, r7, #24
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7fd fed4 	bl	8006358 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085b4:	e01f      	b.n	80085f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085b6:	4b2d      	ldr	r3, [pc, #180]	@ (800866c <UART_SetConfig+0x934>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f003 0320 	and.w	r3, r3, #32
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d009      	beq.n	80085d6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80085c2:	4b2a      	ldr	r3, [pc, #168]	@ (800866c <UART_SetConfig+0x934>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	08db      	lsrs	r3, r3, #3
 80085c8:	f003 0303 	and.w	r3, r3, #3
 80085cc:	4a24      	ldr	r2, [pc, #144]	@ (8008660 <UART_SetConfig+0x928>)
 80085ce:	fa22 f303 	lsr.w	r3, r2, r3
 80085d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80085d4:	e00f      	b.n	80085f6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80085d6:	4b22      	ldr	r3, [pc, #136]	@ (8008660 <UART_SetConfig+0x928>)
 80085d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085da:	e00c      	b.n	80085f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80085dc:	4b21      	ldr	r3, [pc, #132]	@ (8008664 <UART_SetConfig+0x92c>)
 80085de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085e0:	e009      	b.n	80085f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085e8:	e005      	b.n	80085f6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80085ea:	2300      	movs	r3, #0
 80085ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80085ee:	2301      	movs	r3, #1
 80085f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80085f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80085f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	f000 80e7 	beq.w	80087cc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008602:	4a19      	ldr	r2, [pc, #100]	@ (8008668 <UART_SetConfig+0x930>)
 8008604:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008608:	461a      	mov	r2, r3
 800860a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800860c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008610:	005a      	lsls	r2, r3, #1
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	085b      	lsrs	r3, r3, #1
 8008618:	441a      	add	r2, r3
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008622:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008626:	2b0f      	cmp	r3, #15
 8008628:	d916      	bls.n	8008658 <UART_SetConfig+0x920>
 800862a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800862c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008630:	d212      	bcs.n	8008658 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008634:	b29b      	uxth	r3, r3
 8008636:	f023 030f 	bic.w	r3, r3, #15
 800863a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800863c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800863e:	085b      	lsrs	r3, r3, #1
 8008640:	b29b      	uxth	r3, r3
 8008642:	f003 0307 	and.w	r3, r3, #7
 8008646:	b29a      	uxth	r2, r3
 8008648:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800864a:	4313      	orrs	r3, r2
 800864c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008654:	60da      	str	r2, [r3, #12]
 8008656:	e0b9      	b.n	80087cc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800865e:	e0b5      	b.n	80087cc <UART_SetConfig+0xa94>
 8008660:	03d09000 	.word	0x03d09000
 8008664:	003d0900 	.word	0x003d0900
 8008668:	0800b318 	.word	0x0800b318
 800866c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008670:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008674:	2b20      	cmp	r3, #32
 8008676:	dc49      	bgt.n	800870c <UART_SetConfig+0x9d4>
 8008678:	2b00      	cmp	r3, #0
 800867a:	db7c      	blt.n	8008776 <UART_SetConfig+0xa3e>
 800867c:	2b20      	cmp	r3, #32
 800867e:	d87a      	bhi.n	8008776 <UART_SetConfig+0xa3e>
 8008680:	a201      	add	r2, pc, #4	@ (adr r2, 8008688 <UART_SetConfig+0x950>)
 8008682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008686:	bf00      	nop
 8008688:	08008713 	.word	0x08008713
 800868c:	0800871b 	.word	0x0800871b
 8008690:	08008777 	.word	0x08008777
 8008694:	08008777 	.word	0x08008777
 8008698:	08008723 	.word	0x08008723
 800869c:	08008777 	.word	0x08008777
 80086a0:	08008777 	.word	0x08008777
 80086a4:	08008777 	.word	0x08008777
 80086a8:	08008733 	.word	0x08008733
 80086ac:	08008777 	.word	0x08008777
 80086b0:	08008777 	.word	0x08008777
 80086b4:	08008777 	.word	0x08008777
 80086b8:	08008777 	.word	0x08008777
 80086bc:	08008777 	.word	0x08008777
 80086c0:	08008777 	.word	0x08008777
 80086c4:	08008777 	.word	0x08008777
 80086c8:	08008743 	.word	0x08008743
 80086cc:	08008777 	.word	0x08008777
 80086d0:	08008777 	.word	0x08008777
 80086d4:	08008777 	.word	0x08008777
 80086d8:	08008777 	.word	0x08008777
 80086dc:	08008777 	.word	0x08008777
 80086e0:	08008777 	.word	0x08008777
 80086e4:	08008777 	.word	0x08008777
 80086e8:	08008777 	.word	0x08008777
 80086ec:	08008777 	.word	0x08008777
 80086f0:	08008777 	.word	0x08008777
 80086f4:	08008777 	.word	0x08008777
 80086f8:	08008777 	.word	0x08008777
 80086fc:	08008777 	.word	0x08008777
 8008700:	08008777 	.word	0x08008777
 8008704:	08008777 	.word	0x08008777
 8008708:	08008769 	.word	0x08008769
 800870c:	2b40      	cmp	r3, #64	@ 0x40
 800870e:	d02e      	beq.n	800876e <UART_SetConfig+0xa36>
 8008710:	e031      	b.n	8008776 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008712:	f7fc fa81 	bl	8004c18 <HAL_RCC_GetPCLK1Freq>
 8008716:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008718:	e033      	b.n	8008782 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800871a:	f7fc fa93 	bl	8004c44 <HAL_RCC_GetPCLK2Freq>
 800871e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008720:	e02f      	b.n	8008782 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008722:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008726:	4618      	mov	r0, r3
 8008728:	f7fd fcc2 	bl	80060b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800872c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800872e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008730:	e027      	b.n	8008782 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008732:	f107 0318 	add.w	r3, r7, #24
 8008736:	4618      	mov	r0, r3
 8008738:	f7fd fe0e 	bl	8006358 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008740:	e01f      	b.n	8008782 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008742:	4b2d      	ldr	r3, [pc, #180]	@ (80087f8 <UART_SetConfig+0xac0>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f003 0320 	and.w	r3, r3, #32
 800874a:	2b00      	cmp	r3, #0
 800874c:	d009      	beq.n	8008762 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800874e:	4b2a      	ldr	r3, [pc, #168]	@ (80087f8 <UART_SetConfig+0xac0>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	08db      	lsrs	r3, r3, #3
 8008754:	f003 0303 	and.w	r3, r3, #3
 8008758:	4a28      	ldr	r2, [pc, #160]	@ (80087fc <UART_SetConfig+0xac4>)
 800875a:	fa22 f303 	lsr.w	r3, r2, r3
 800875e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008760:	e00f      	b.n	8008782 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008762:	4b26      	ldr	r3, [pc, #152]	@ (80087fc <UART_SetConfig+0xac4>)
 8008764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008766:	e00c      	b.n	8008782 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008768:	4b25      	ldr	r3, [pc, #148]	@ (8008800 <UART_SetConfig+0xac8>)
 800876a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800876c:	e009      	b.n	8008782 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800876e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008774:	e005      	b.n	8008782 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008776:	2300      	movs	r3, #0
 8008778:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008780:	bf00      	nop
    }

    if (pclk != 0U)
 8008782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008784:	2b00      	cmp	r3, #0
 8008786:	d021      	beq.n	80087cc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800878c:	4a1d      	ldr	r2, [pc, #116]	@ (8008804 <UART_SetConfig+0xacc>)
 800878e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008792:	461a      	mov	r2, r3
 8008794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008796:	fbb3 f2f2 	udiv	r2, r3, r2
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	085b      	lsrs	r3, r3, #1
 80087a0:	441a      	add	r2, r3
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80087aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ae:	2b0f      	cmp	r3, #15
 80087b0:	d909      	bls.n	80087c6 <UART_SetConfig+0xa8e>
 80087b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087b8:	d205      	bcs.n	80087c6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80087ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087bc:	b29a      	uxth	r2, r3
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	60da      	str	r2, [r3, #12]
 80087c4:	e002      	b.n	80087cc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	2200      	movs	r2, #0
 80087e0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	2200      	movs	r2, #0
 80087e6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80087e8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3748      	adds	r7, #72	@ 0x48
 80087f0:	46bd      	mov	sp, r7
 80087f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087f6:	bf00      	nop
 80087f8:	58024400 	.word	0x58024400
 80087fc:	03d09000 	.word	0x03d09000
 8008800:	003d0900 	.word	0x003d0900
 8008804:	0800b318 	.word	0x0800b318

08008808 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008814:	f003 0308 	and.w	r3, r3, #8
 8008818:	2b00      	cmp	r3, #0
 800881a:	d00a      	beq.n	8008832 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	430a      	orrs	r2, r1
 8008830:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008836:	f003 0301 	and.w	r3, r3, #1
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00a      	beq.n	8008854 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	430a      	orrs	r2, r1
 8008852:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008858:	f003 0302 	and.w	r3, r3, #2
 800885c:	2b00      	cmp	r3, #0
 800885e:	d00a      	beq.n	8008876 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	430a      	orrs	r2, r1
 8008874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800887a:	f003 0304 	and.w	r3, r3, #4
 800887e:	2b00      	cmp	r3, #0
 8008880:	d00a      	beq.n	8008898 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	430a      	orrs	r2, r1
 8008896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800889c:	f003 0310 	and.w	r3, r3, #16
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d00a      	beq.n	80088ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	430a      	orrs	r2, r1
 80088b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088be:	f003 0320 	and.w	r3, r3, #32
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d00a      	beq.n	80088dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	430a      	orrs	r2, r1
 80088da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d01a      	beq.n	800891e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	430a      	orrs	r2, r1
 80088fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008902:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008906:	d10a      	bne.n	800891e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	430a      	orrs	r2, r1
 800891c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008926:	2b00      	cmp	r3, #0
 8008928:	d00a      	beq.n	8008940 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	430a      	orrs	r2, r1
 800893e:	605a      	str	r2, [r3, #4]
  }
}
 8008940:	bf00      	nop
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b098      	sub	sp, #96	@ 0x60
 8008950:	af02      	add	r7, sp, #8
 8008952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800895c:	f7fa fafe 	bl	8002f5c <HAL_GetTick>
 8008960:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f003 0308 	and.w	r3, r3, #8
 800896c:	2b08      	cmp	r3, #8
 800896e:	d12f      	bne.n	80089d0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008970:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008974:	9300      	str	r3, [sp, #0]
 8008976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008978:	2200      	movs	r2, #0
 800897a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 f88e 	bl	8008aa0 <UART_WaitOnFlagUntilTimeout>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d022      	beq.n	80089d0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008992:	e853 3f00 	ldrex	r3, [r3]
 8008996:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800899a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800899e:	653b      	str	r3, [r7, #80]	@ 0x50
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	461a      	mov	r2, r3
 80089a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80089aa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80089ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80089b0:	e841 2300 	strex	r3, r2, [r1]
 80089b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80089b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1e6      	bne.n	800898a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2220      	movs	r2, #32
 80089c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089cc:	2303      	movs	r3, #3
 80089ce:	e063      	b.n	8008a98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f003 0304 	and.w	r3, r3, #4
 80089da:	2b04      	cmp	r3, #4
 80089dc:	d149      	bne.n	8008a72 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089de:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80089e2:	9300      	str	r3, [sp, #0]
 80089e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80089e6:	2200      	movs	r2, #0
 80089e8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 f857 	bl	8008aa0 <UART_WaitOnFlagUntilTimeout>
 80089f2:	4603      	mov	r3, r0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d03c      	beq.n	8008a72 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a00:	e853 3f00 	ldrex	r3, [r3]
 8008a04:	623b      	str	r3, [r7, #32]
   return(result);
 8008a06:	6a3b      	ldr	r3, [r7, #32]
 8008a08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	461a      	mov	r2, r3
 8008a14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a16:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a18:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a1e:	e841 2300 	strex	r3, r2, [r1]
 8008a22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d1e6      	bne.n	80089f8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	3308      	adds	r3, #8
 8008a30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	e853 3f00 	ldrex	r3, [r3]
 8008a38:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f023 0301 	bic.w	r3, r3, #1
 8008a40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	3308      	adds	r3, #8
 8008a48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a4a:	61fa      	str	r2, [r7, #28]
 8008a4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4e:	69b9      	ldr	r1, [r7, #24]
 8008a50:	69fa      	ldr	r2, [r7, #28]
 8008a52:	e841 2300 	strex	r3, r2, [r1]
 8008a56:	617b      	str	r3, [r7, #20]
   return(result);
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d1e5      	bne.n	8008a2a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2220      	movs	r2, #32
 8008a62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a6e:	2303      	movs	r3, #3
 8008a70:	e012      	b.n	8008a98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2220      	movs	r2, #32
 8008a76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2220      	movs	r2, #32
 8008a7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008a96:	2300      	movs	r3, #0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3758      	adds	r7, #88	@ 0x58
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	603b      	str	r3, [r7, #0]
 8008aac:	4613      	mov	r3, r2
 8008aae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ab0:	e04f      	b.n	8008b52 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ab2:	69bb      	ldr	r3, [r7, #24]
 8008ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab8:	d04b      	beq.n	8008b52 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008aba:	f7fa fa4f 	bl	8002f5c <HAL_GetTick>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	1ad3      	subs	r3, r2, r3
 8008ac4:	69ba      	ldr	r2, [r7, #24]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d302      	bcc.n	8008ad0 <UART_WaitOnFlagUntilTimeout+0x30>
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d101      	bne.n	8008ad4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	e04e      	b.n	8008b72 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f003 0304 	and.w	r3, r3, #4
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d037      	beq.n	8008b52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	2b80      	cmp	r3, #128	@ 0x80
 8008ae6:	d034      	beq.n	8008b52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	2b40      	cmp	r3, #64	@ 0x40
 8008aec:	d031      	beq.n	8008b52 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	69db      	ldr	r3, [r3, #28]
 8008af4:	f003 0308 	and.w	r3, r3, #8
 8008af8:	2b08      	cmp	r3, #8
 8008afa:	d110      	bne.n	8008b1e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2208      	movs	r2, #8
 8008b02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b04:	68f8      	ldr	r0, [r7, #12]
 8008b06:	f000 f839 	bl	8008b7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2208      	movs	r2, #8
 8008b0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2200      	movs	r2, #0
 8008b16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e029      	b.n	8008b72 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	69db      	ldr	r3, [r3, #28]
 8008b24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b2c:	d111      	bne.n	8008b52 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008b36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b38:	68f8      	ldr	r0, [r7, #12]
 8008b3a:	f000 f81f 	bl	8008b7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2220      	movs	r2, #32
 8008b42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008b4e:	2303      	movs	r3, #3
 8008b50:	e00f      	b.n	8008b72 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	69da      	ldr	r2, [r3, #28]
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	4013      	ands	r3, r2
 8008b5c:	68ba      	ldr	r2, [r7, #8]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	bf0c      	ite	eq
 8008b62:	2301      	moveq	r3, #1
 8008b64:	2300      	movne	r3, #0
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	461a      	mov	r2, r3
 8008b6a:	79fb      	ldrb	r3, [r7, #7]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d0a0      	beq.n	8008ab2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b70:	2300      	movs	r3, #0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
	...

08008b7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b095      	sub	sp, #84	@ 0x54
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b8c:	e853 3f00 	ldrex	r3, [r3]
 8008b90:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ba2:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ba4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ba8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008baa:	e841 2300 	strex	r3, r2, [r1]
 8008bae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1e6      	bne.n	8008b84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	3308      	adds	r3, #8
 8008bbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bbe:	6a3b      	ldr	r3, [r7, #32]
 8008bc0:	e853 3f00 	ldrex	r3, [r3]
 8008bc4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bc6:	69fa      	ldr	r2, [r7, #28]
 8008bc8:	4b1e      	ldr	r3, [pc, #120]	@ (8008c44 <UART_EndRxTransfer+0xc8>)
 8008bca:	4013      	ands	r3, r2
 8008bcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	3308      	adds	r3, #8
 8008bd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008bd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008bdc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008bde:	e841 2300 	strex	r3, r2, [r1]
 8008be2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d1e5      	bne.n	8008bb6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	d118      	bne.n	8008c24 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	e853 3f00 	ldrex	r3, [r3]
 8008bfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	f023 0310 	bic.w	r3, r3, #16
 8008c06:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c10:	61bb      	str	r3, [r7, #24]
 8008c12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c14:	6979      	ldr	r1, [r7, #20]
 8008c16:	69ba      	ldr	r2, [r7, #24]
 8008c18:	e841 2300 	strex	r3, r2, [r1]
 8008c1c:	613b      	str	r3, [r7, #16]
   return(result);
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d1e6      	bne.n	8008bf2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2220      	movs	r2, #32
 8008c28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2200      	movs	r2, #0
 8008c36:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008c38:	bf00      	nop
 8008c3a:	3754      	adds	r7, #84	@ 0x54
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr
 8008c44:	effffffe 	.word	0xeffffffe

08008c48 <std>:
 8008c48:	2300      	movs	r3, #0
 8008c4a:	b510      	push	{r4, lr}
 8008c4c:	4604      	mov	r4, r0
 8008c4e:	e9c0 3300 	strd	r3, r3, [r0]
 8008c52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c56:	6083      	str	r3, [r0, #8]
 8008c58:	8181      	strh	r1, [r0, #12]
 8008c5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8008c5c:	81c2      	strh	r2, [r0, #14]
 8008c5e:	6183      	str	r3, [r0, #24]
 8008c60:	4619      	mov	r1, r3
 8008c62:	2208      	movs	r2, #8
 8008c64:	305c      	adds	r0, #92	@ 0x5c
 8008c66:	f000 f906 	bl	8008e76 <memset>
 8008c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8008ca0 <std+0x58>)
 8008c6c:	6263      	str	r3, [r4, #36]	@ 0x24
 8008c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8008ca4 <std+0x5c>)
 8008c70:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008c72:	4b0d      	ldr	r3, [pc, #52]	@ (8008ca8 <std+0x60>)
 8008c74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008c76:	4b0d      	ldr	r3, [pc, #52]	@ (8008cac <std+0x64>)
 8008c78:	6323      	str	r3, [r4, #48]	@ 0x30
 8008c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8008cb0 <std+0x68>)
 8008c7c:	6224      	str	r4, [r4, #32]
 8008c7e:	429c      	cmp	r4, r3
 8008c80:	d006      	beq.n	8008c90 <std+0x48>
 8008c82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008c86:	4294      	cmp	r4, r2
 8008c88:	d002      	beq.n	8008c90 <std+0x48>
 8008c8a:	33d0      	adds	r3, #208	@ 0xd0
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	d105      	bne.n	8008c9c <std+0x54>
 8008c90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c98:	f000 b966 	b.w	8008f68 <__retarget_lock_init_recursive>
 8008c9c:	bd10      	pop	{r4, pc}
 8008c9e:	bf00      	nop
 8008ca0:	08008df1 	.word	0x08008df1
 8008ca4:	08008e13 	.word	0x08008e13
 8008ca8:	08008e4b 	.word	0x08008e4b
 8008cac:	08008e6f 	.word	0x08008e6f
 8008cb0:	24000270 	.word	0x24000270

08008cb4 <stdio_exit_handler>:
 8008cb4:	4a02      	ldr	r2, [pc, #8]	@ (8008cc0 <stdio_exit_handler+0xc>)
 8008cb6:	4903      	ldr	r1, [pc, #12]	@ (8008cc4 <stdio_exit_handler+0x10>)
 8008cb8:	4803      	ldr	r0, [pc, #12]	@ (8008cc8 <stdio_exit_handler+0x14>)
 8008cba:	f000 b869 	b.w	8008d90 <_fwalk_sglue>
 8008cbe:	bf00      	nop
 8008cc0:	2400002c 	.word	0x2400002c
 8008cc4:	08009805 	.word	0x08009805
 8008cc8:	2400003c 	.word	0x2400003c

08008ccc <cleanup_stdio>:
 8008ccc:	6841      	ldr	r1, [r0, #4]
 8008cce:	4b0c      	ldr	r3, [pc, #48]	@ (8008d00 <cleanup_stdio+0x34>)
 8008cd0:	4299      	cmp	r1, r3
 8008cd2:	b510      	push	{r4, lr}
 8008cd4:	4604      	mov	r4, r0
 8008cd6:	d001      	beq.n	8008cdc <cleanup_stdio+0x10>
 8008cd8:	f000 fd94 	bl	8009804 <_fflush_r>
 8008cdc:	68a1      	ldr	r1, [r4, #8]
 8008cde:	4b09      	ldr	r3, [pc, #36]	@ (8008d04 <cleanup_stdio+0x38>)
 8008ce0:	4299      	cmp	r1, r3
 8008ce2:	d002      	beq.n	8008cea <cleanup_stdio+0x1e>
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	f000 fd8d 	bl	8009804 <_fflush_r>
 8008cea:	68e1      	ldr	r1, [r4, #12]
 8008cec:	4b06      	ldr	r3, [pc, #24]	@ (8008d08 <cleanup_stdio+0x3c>)
 8008cee:	4299      	cmp	r1, r3
 8008cf0:	d004      	beq.n	8008cfc <cleanup_stdio+0x30>
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cf8:	f000 bd84 	b.w	8009804 <_fflush_r>
 8008cfc:	bd10      	pop	{r4, pc}
 8008cfe:	bf00      	nop
 8008d00:	24000270 	.word	0x24000270
 8008d04:	240002d8 	.word	0x240002d8
 8008d08:	24000340 	.word	0x24000340

08008d0c <global_stdio_init.part.0>:
 8008d0c:	b510      	push	{r4, lr}
 8008d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8008d3c <global_stdio_init.part.0+0x30>)
 8008d10:	4c0b      	ldr	r4, [pc, #44]	@ (8008d40 <global_stdio_init.part.0+0x34>)
 8008d12:	4a0c      	ldr	r2, [pc, #48]	@ (8008d44 <global_stdio_init.part.0+0x38>)
 8008d14:	601a      	str	r2, [r3, #0]
 8008d16:	4620      	mov	r0, r4
 8008d18:	2200      	movs	r2, #0
 8008d1a:	2104      	movs	r1, #4
 8008d1c:	f7ff ff94 	bl	8008c48 <std>
 8008d20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008d24:	2201      	movs	r2, #1
 8008d26:	2109      	movs	r1, #9
 8008d28:	f7ff ff8e 	bl	8008c48 <std>
 8008d2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008d30:	2202      	movs	r2, #2
 8008d32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d36:	2112      	movs	r1, #18
 8008d38:	f7ff bf86 	b.w	8008c48 <std>
 8008d3c:	240003a8 	.word	0x240003a8
 8008d40:	24000270 	.word	0x24000270
 8008d44:	08008cb5 	.word	0x08008cb5

08008d48 <__sfp_lock_acquire>:
 8008d48:	4801      	ldr	r0, [pc, #4]	@ (8008d50 <__sfp_lock_acquire+0x8>)
 8008d4a:	f000 b90e 	b.w	8008f6a <__retarget_lock_acquire_recursive>
 8008d4e:	bf00      	nop
 8008d50:	240003b1 	.word	0x240003b1

08008d54 <__sfp_lock_release>:
 8008d54:	4801      	ldr	r0, [pc, #4]	@ (8008d5c <__sfp_lock_release+0x8>)
 8008d56:	f000 b909 	b.w	8008f6c <__retarget_lock_release_recursive>
 8008d5a:	bf00      	nop
 8008d5c:	240003b1 	.word	0x240003b1

08008d60 <__sinit>:
 8008d60:	b510      	push	{r4, lr}
 8008d62:	4604      	mov	r4, r0
 8008d64:	f7ff fff0 	bl	8008d48 <__sfp_lock_acquire>
 8008d68:	6a23      	ldr	r3, [r4, #32]
 8008d6a:	b11b      	cbz	r3, 8008d74 <__sinit+0x14>
 8008d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d70:	f7ff bff0 	b.w	8008d54 <__sfp_lock_release>
 8008d74:	4b04      	ldr	r3, [pc, #16]	@ (8008d88 <__sinit+0x28>)
 8008d76:	6223      	str	r3, [r4, #32]
 8008d78:	4b04      	ldr	r3, [pc, #16]	@ (8008d8c <__sinit+0x2c>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1f5      	bne.n	8008d6c <__sinit+0xc>
 8008d80:	f7ff ffc4 	bl	8008d0c <global_stdio_init.part.0>
 8008d84:	e7f2      	b.n	8008d6c <__sinit+0xc>
 8008d86:	bf00      	nop
 8008d88:	08008ccd 	.word	0x08008ccd
 8008d8c:	240003a8 	.word	0x240003a8

08008d90 <_fwalk_sglue>:
 8008d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d94:	4607      	mov	r7, r0
 8008d96:	4688      	mov	r8, r1
 8008d98:	4614      	mov	r4, r2
 8008d9a:	2600      	movs	r6, #0
 8008d9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008da0:	f1b9 0901 	subs.w	r9, r9, #1
 8008da4:	d505      	bpl.n	8008db2 <_fwalk_sglue+0x22>
 8008da6:	6824      	ldr	r4, [r4, #0]
 8008da8:	2c00      	cmp	r4, #0
 8008daa:	d1f7      	bne.n	8008d9c <_fwalk_sglue+0xc>
 8008dac:	4630      	mov	r0, r6
 8008dae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008db2:	89ab      	ldrh	r3, [r5, #12]
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d907      	bls.n	8008dc8 <_fwalk_sglue+0x38>
 8008db8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	d003      	beq.n	8008dc8 <_fwalk_sglue+0x38>
 8008dc0:	4629      	mov	r1, r5
 8008dc2:	4638      	mov	r0, r7
 8008dc4:	47c0      	blx	r8
 8008dc6:	4306      	orrs	r6, r0
 8008dc8:	3568      	adds	r5, #104	@ 0x68
 8008dca:	e7e9      	b.n	8008da0 <_fwalk_sglue+0x10>

08008dcc <iprintf>:
 8008dcc:	b40f      	push	{r0, r1, r2, r3}
 8008dce:	b507      	push	{r0, r1, r2, lr}
 8008dd0:	4906      	ldr	r1, [pc, #24]	@ (8008dec <iprintf+0x20>)
 8008dd2:	ab04      	add	r3, sp, #16
 8008dd4:	6808      	ldr	r0, [r1, #0]
 8008dd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dda:	6881      	ldr	r1, [r0, #8]
 8008ddc:	9301      	str	r3, [sp, #4]
 8008dde:	f000 f9e9 	bl	80091b4 <_vfiprintf_r>
 8008de2:	b003      	add	sp, #12
 8008de4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008de8:	b004      	add	sp, #16
 8008dea:	4770      	bx	lr
 8008dec:	24000038 	.word	0x24000038

08008df0 <__sread>:
 8008df0:	b510      	push	{r4, lr}
 8008df2:	460c      	mov	r4, r1
 8008df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008df8:	f000 f868 	bl	8008ecc <_read_r>
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	bfab      	itete	ge
 8008e00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008e02:	89a3      	ldrhlt	r3, [r4, #12]
 8008e04:	181b      	addge	r3, r3, r0
 8008e06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008e0a:	bfac      	ite	ge
 8008e0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008e0e:	81a3      	strhlt	r3, [r4, #12]
 8008e10:	bd10      	pop	{r4, pc}

08008e12 <__swrite>:
 8008e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e16:	461f      	mov	r7, r3
 8008e18:	898b      	ldrh	r3, [r1, #12]
 8008e1a:	05db      	lsls	r3, r3, #23
 8008e1c:	4605      	mov	r5, r0
 8008e1e:	460c      	mov	r4, r1
 8008e20:	4616      	mov	r6, r2
 8008e22:	d505      	bpl.n	8008e30 <__swrite+0x1e>
 8008e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e28:	2302      	movs	r3, #2
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f000 f83c 	bl	8008ea8 <_lseek_r>
 8008e30:	89a3      	ldrh	r3, [r4, #12]
 8008e32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e3a:	81a3      	strh	r3, [r4, #12]
 8008e3c:	4632      	mov	r2, r6
 8008e3e:	463b      	mov	r3, r7
 8008e40:	4628      	mov	r0, r5
 8008e42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e46:	f000 b853 	b.w	8008ef0 <_write_r>

08008e4a <__sseek>:
 8008e4a:	b510      	push	{r4, lr}
 8008e4c:	460c      	mov	r4, r1
 8008e4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e52:	f000 f829 	bl	8008ea8 <_lseek_r>
 8008e56:	1c43      	adds	r3, r0, #1
 8008e58:	89a3      	ldrh	r3, [r4, #12]
 8008e5a:	bf15      	itete	ne
 8008e5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008e5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008e62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008e66:	81a3      	strheq	r3, [r4, #12]
 8008e68:	bf18      	it	ne
 8008e6a:	81a3      	strhne	r3, [r4, #12]
 8008e6c:	bd10      	pop	{r4, pc}

08008e6e <__sclose>:
 8008e6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e72:	f000 b809 	b.w	8008e88 <_close_r>

08008e76 <memset>:
 8008e76:	4402      	add	r2, r0
 8008e78:	4603      	mov	r3, r0
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d100      	bne.n	8008e80 <memset+0xa>
 8008e7e:	4770      	bx	lr
 8008e80:	f803 1b01 	strb.w	r1, [r3], #1
 8008e84:	e7f9      	b.n	8008e7a <memset+0x4>
	...

08008e88 <_close_r>:
 8008e88:	b538      	push	{r3, r4, r5, lr}
 8008e8a:	4d06      	ldr	r5, [pc, #24]	@ (8008ea4 <_close_r+0x1c>)
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	4604      	mov	r4, r0
 8008e90:	4608      	mov	r0, r1
 8008e92:	602b      	str	r3, [r5, #0]
 8008e94:	f7f9 fc37 	bl	8002706 <_close>
 8008e98:	1c43      	adds	r3, r0, #1
 8008e9a:	d102      	bne.n	8008ea2 <_close_r+0x1a>
 8008e9c:	682b      	ldr	r3, [r5, #0]
 8008e9e:	b103      	cbz	r3, 8008ea2 <_close_r+0x1a>
 8008ea0:	6023      	str	r3, [r4, #0]
 8008ea2:	bd38      	pop	{r3, r4, r5, pc}
 8008ea4:	240003ac 	.word	0x240003ac

08008ea8 <_lseek_r>:
 8008ea8:	b538      	push	{r3, r4, r5, lr}
 8008eaa:	4d07      	ldr	r5, [pc, #28]	@ (8008ec8 <_lseek_r+0x20>)
 8008eac:	4604      	mov	r4, r0
 8008eae:	4608      	mov	r0, r1
 8008eb0:	4611      	mov	r1, r2
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	602a      	str	r2, [r5, #0]
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	f7f9 fc4c 	bl	8002754 <_lseek>
 8008ebc:	1c43      	adds	r3, r0, #1
 8008ebe:	d102      	bne.n	8008ec6 <_lseek_r+0x1e>
 8008ec0:	682b      	ldr	r3, [r5, #0]
 8008ec2:	b103      	cbz	r3, 8008ec6 <_lseek_r+0x1e>
 8008ec4:	6023      	str	r3, [r4, #0]
 8008ec6:	bd38      	pop	{r3, r4, r5, pc}
 8008ec8:	240003ac 	.word	0x240003ac

08008ecc <_read_r>:
 8008ecc:	b538      	push	{r3, r4, r5, lr}
 8008ece:	4d07      	ldr	r5, [pc, #28]	@ (8008eec <_read_r+0x20>)
 8008ed0:	4604      	mov	r4, r0
 8008ed2:	4608      	mov	r0, r1
 8008ed4:	4611      	mov	r1, r2
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	602a      	str	r2, [r5, #0]
 8008eda:	461a      	mov	r2, r3
 8008edc:	f7f9 fbda 	bl	8002694 <_read>
 8008ee0:	1c43      	adds	r3, r0, #1
 8008ee2:	d102      	bne.n	8008eea <_read_r+0x1e>
 8008ee4:	682b      	ldr	r3, [r5, #0]
 8008ee6:	b103      	cbz	r3, 8008eea <_read_r+0x1e>
 8008ee8:	6023      	str	r3, [r4, #0]
 8008eea:	bd38      	pop	{r3, r4, r5, pc}
 8008eec:	240003ac 	.word	0x240003ac

08008ef0 <_write_r>:
 8008ef0:	b538      	push	{r3, r4, r5, lr}
 8008ef2:	4d07      	ldr	r5, [pc, #28]	@ (8008f10 <_write_r+0x20>)
 8008ef4:	4604      	mov	r4, r0
 8008ef6:	4608      	mov	r0, r1
 8008ef8:	4611      	mov	r1, r2
 8008efa:	2200      	movs	r2, #0
 8008efc:	602a      	str	r2, [r5, #0]
 8008efe:	461a      	mov	r2, r3
 8008f00:	f7f9 fbe5 	bl	80026ce <_write>
 8008f04:	1c43      	adds	r3, r0, #1
 8008f06:	d102      	bne.n	8008f0e <_write_r+0x1e>
 8008f08:	682b      	ldr	r3, [r5, #0]
 8008f0a:	b103      	cbz	r3, 8008f0e <_write_r+0x1e>
 8008f0c:	6023      	str	r3, [r4, #0]
 8008f0e:	bd38      	pop	{r3, r4, r5, pc}
 8008f10:	240003ac 	.word	0x240003ac

08008f14 <__errno>:
 8008f14:	4b01      	ldr	r3, [pc, #4]	@ (8008f1c <__errno+0x8>)
 8008f16:	6818      	ldr	r0, [r3, #0]
 8008f18:	4770      	bx	lr
 8008f1a:	bf00      	nop
 8008f1c:	24000038 	.word	0x24000038

08008f20 <__libc_init_array>:
 8008f20:	b570      	push	{r4, r5, r6, lr}
 8008f22:	4d0d      	ldr	r5, [pc, #52]	@ (8008f58 <__libc_init_array+0x38>)
 8008f24:	4c0d      	ldr	r4, [pc, #52]	@ (8008f5c <__libc_init_array+0x3c>)
 8008f26:	1b64      	subs	r4, r4, r5
 8008f28:	10a4      	asrs	r4, r4, #2
 8008f2a:	2600      	movs	r6, #0
 8008f2c:	42a6      	cmp	r6, r4
 8008f2e:	d109      	bne.n	8008f44 <__libc_init_array+0x24>
 8008f30:	4d0b      	ldr	r5, [pc, #44]	@ (8008f60 <__libc_init_array+0x40>)
 8008f32:	4c0c      	ldr	r4, [pc, #48]	@ (8008f64 <__libc_init_array+0x44>)
 8008f34:	f000 fdb6 	bl	8009aa4 <_init>
 8008f38:	1b64      	subs	r4, r4, r5
 8008f3a:	10a4      	asrs	r4, r4, #2
 8008f3c:	2600      	movs	r6, #0
 8008f3e:	42a6      	cmp	r6, r4
 8008f40:	d105      	bne.n	8008f4e <__libc_init_array+0x2e>
 8008f42:	bd70      	pop	{r4, r5, r6, pc}
 8008f44:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f48:	4798      	blx	r3
 8008f4a:	3601      	adds	r6, #1
 8008f4c:	e7ee      	b.n	8008f2c <__libc_init_array+0xc>
 8008f4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f52:	4798      	blx	r3
 8008f54:	3601      	adds	r6, #1
 8008f56:	e7f2      	b.n	8008f3e <__libc_init_array+0x1e>
 8008f58:	0800b36c 	.word	0x0800b36c
 8008f5c:	0800b36c 	.word	0x0800b36c
 8008f60:	0800b36c 	.word	0x0800b36c
 8008f64:	0800b370 	.word	0x0800b370

08008f68 <__retarget_lock_init_recursive>:
 8008f68:	4770      	bx	lr

08008f6a <__retarget_lock_acquire_recursive>:
 8008f6a:	4770      	bx	lr

08008f6c <__retarget_lock_release_recursive>:
 8008f6c:	4770      	bx	lr
	...

08008f70 <_free_r>:
 8008f70:	b538      	push	{r3, r4, r5, lr}
 8008f72:	4605      	mov	r5, r0
 8008f74:	2900      	cmp	r1, #0
 8008f76:	d041      	beq.n	8008ffc <_free_r+0x8c>
 8008f78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f7c:	1f0c      	subs	r4, r1, #4
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	bfb8      	it	lt
 8008f82:	18e4      	addlt	r4, r4, r3
 8008f84:	f000 f8e0 	bl	8009148 <__malloc_lock>
 8008f88:	4a1d      	ldr	r2, [pc, #116]	@ (8009000 <_free_r+0x90>)
 8008f8a:	6813      	ldr	r3, [r2, #0]
 8008f8c:	b933      	cbnz	r3, 8008f9c <_free_r+0x2c>
 8008f8e:	6063      	str	r3, [r4, #4]
 8008f90:	6014      	str	r4, [r2, #0]
 8008f92:	4628      	mov	r0, r5
 8008f94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f98:	f000 b8dc 	b.w	8009154 <__malloc_unlock>
 8008f9c:	42a3      	cmp	r3, r4
 8008f9e:	d908      	bls.n	8008fb2 <_free_r+0x42>
 8008fa0:	6820      	ldr	r0, [r4, #0]
 8008fa2:	1821      	adds	r1, r4, r0
 8008fa4:	428b      	cmp	r3, r1
 8008fa6:	bf01      	itttt	eq
 8008fa8:	6819      	ldreq	r1, [r3, #0]
 8008faa:	685b      	ldreq	r3, [r3, #4]
 8008fac:	1809      	addeq	r1, r1, r0
 8008fae:	6021      	streq	r1, [r4, #0]
 8008fb0:	e7ed      	b.n	8008f8e <_free_r+0x1e>
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	b10b      	cbz	r3, 8008fbc <_free_r+0x4c>
 8008fb8:	42a3      	cmp	r3, r4
 8008fba:	d9fa      	bls.n	8008fb2 <_free_r+0x42>
 8008fbc:	6811      	ldr	r1, [r2, #0]
 8008fbe:	1850      	adds	r0, r2, r1
 8008fc0:	42a0      	cmp	r0, r4
 8008fc2:	d10b      	bne.n	8008fdc <_free_r+0x6c>
 8008fc4:	6820      	ldr	r0, [r4, #0]
 8008fc6:	4401      	add	r1, r0
 8008fc8:	1850      	adds	r0, r2, r1
 8008fca:	4283      	cmp	r3, r0
 8008fcc:	6011      	str	r1, [r2, #0]
 8008fce:	d1e0      	bne.n	8008f92 <_free_r+0x22>
 8008fd0:	6818      	ldr	r0, [r3, #0]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	6053      	str	r3, [r2, #4]
 8008fd6:	4408      	add	r0, r1
 8008fd8:	6010      	str	r0, [r2, #0]
 8008fda:	e7da      	b.n	8008f92 <_free_r+0x22>
 8008fdc:	d902      	bls.n	8008fe4 <_free_r+0x74>
 8008fde:	230c      	movs	r3, #12
 8008fe0:	602b      	str	r3, [r5, #0]
 8008fe2:	e7d6      	b.n	8008f92 <_free_r+0x22>
 8008fe4:	6820      	ldr	r0, [r4, #0]
 8008fe6:	1821      	adds	r1, r4, r0
 8008fe8:	428b      	cmp	r3, r1
 8008fea:	bf04      	itt	eq
 8008fec:	6819      	ldreq	r1, [r3, #0]
 8008fee:	685b      	ldreq	r3, [r3, #4]
 8008ff0:	6063      	str	r3, [r4, #4]
 8008ff2:	bf04      	itt	eq
 8008ff4:	1809      	addeq	r1, r1, r0
 8008ff6:	6021      	streq	r1, [r4, #0]
 8008ff8:	6054      	str	r4, [r2, #4]
 8008ffa:	e7ca      	b.n	8008f92 <_free_r+0x22>
 8008ffc:	bd38      	pop	{r3, r4, r5, pc}
 8008ffe:	bf00      	nop
 8009000:	240003b8 	.word	0x240003b8

08009004 <sbrk_aligned>:
 8009004:	b570      	push	{r4, r5, r6, lr}
 8009006:	4e0f      	ldr	r6, [pc, #60]	@ (8009044 <sbrk_aligned+0x40>)
 8009008:	460c      	mov	r4, r1
 800900a:	6831      	ldr	r1, [r6, #0]
 800900c:	4605      	mov	r5, r0
 800900e:	b911      	cbnz	r1, 8009016 <sbrk_aligned+0x12>
 8009010:	f000 fcb4 	bl	800997c <_sbrk_r>
 8009014:	6030      	str	r0, [r6, #0]
 8009016:	4621      	mov	r1, r4
 8009018:	4628      	mov	r0, r5
 800901a:	f000 fcaf 	bl	800997c <_sbrk_r>
 800901e:	1c43      	adds	r3, r0, #1
 8009020:	d103      	bne.n	800902a <sbrk_aligned+0x26>
 8009022:	f04f 34ff 	mov.w	r4, #4294967295
 8009026:	4620      	mov	r0, r4
 8009028:	bd70      	pop	{r4, r5, r6, pc}
 800902a:	1cc4      	adds	r4, r0, #3
 800902c:	f024 0403 	bic.w	r4, r4, #3
 8009030:	42a0      	cmp	r0, r4
 8009032:	d0f8      	beq.n	8009026 <sbrk_aligned+0x22>
 8009034:	1a21      	subs	r1, r4, r0
 8009036:	4628      	mov	r0, r5
 8009038:	f000 fca0 	bl	800997c <_sbrk_r>
 800903c:	3001      	adds	r0, #1
 800903e:	d1f2      	bne.n	8009026 <sbrk_aligned+0x22>
 8009040:	e7ef      	b.n	8009022 <sbrk_aligned+0x1e>
 8009042:	bf00      	nop
 8009044:	240003b4 	.word	0x240003b4

08009048 <_malloc_r>:
 8009048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800904c:	1ccd      	adds	r5, r1, #3
 800904e:	f025 0503 	bic.w	r5, r5, #3
 8009052:	3508      	adds	r5, #8
 8009054:	2d0c      	cmp	r5, #12
 8009056:	bf38      	it	cc
 8009058:	250c      	movcc	r5, #12
 800905a:	2d00      	cmp	r5, #0
 800905c:	4606      	mov	r6, r0
 800905e:	db01      	blt.n	8009064 <_malloc_r+0x1c>
 8009060:	42a9      	cmp	r1, r5
 8009062:	d904      	bls.n	800906e <_malloc_r+0x26>
 8009064:	230c      	movs	r3, #12
 8009066:	6033      	str	r3, [r6, #0]
 8009068:	2000      	movs	r0, #0
 800906a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800906e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009144 <_malloc_r+0xfc>
 8009072:	f000 f869 	bl	8009148 <__malloc_lock>
 8009076:	f8d8 3000 	ldr.w	r3, [r8]
 800907a:	461c      	mov	r4, r3
 800907c:	bb44      	cbnz	r4, 80090d0 <_malloc_r+0x88>
 800907e:	4629      	mov	r1, r5
 8009080:	4630      	mov	r0, r6
 8009082:	f7ff ffbf 	bl	8009004 <sbrk_aligned>
 8009086:	1c43      	adds	r3, r0, #1
 8009088:	4604      	mov	r4, r0
 800908a:	d158      	bne.n	800913e <_malloc_r+0xf6>
 800908c:	f8d8 4000 	ldr.w	r4, [r8]
 8009090:	4627      	mov	r7, r4
 8009092:	2f00      	cmp	r7, #0
 8009094:	d143      	bne.n	800911e <_malloc_r+0xd6>
 8009096:	2c00      	cmp	r4, #0
 8009098:	d04b      	beq.n	8009132 <_malloc_r+0xea>
 800909a:	6823      	ldr	r3, [r4, #0]
 800909c:	4639      	mov	r1, r7
 800909e:	4630      	mov	r0, r6
 80090a0:	eb04 0903 	add.w	r9, r4, r3
 80090a4:	f000 fc6a 	bl	800997c <_sbrk_r>
 80090a8:	4581      	cmp	r9, r0
 80090aa:	d142      	bne.n	8009132 <_malloc_r+0xea>
 80090ac:	6821      	ldr	r1, [r4, #0]
 80090ae:	1a6d      	subs	r5, r5, r1
 80090b0:	4629      	mov	r1, r5
 80090b2:	4630      	mov	r0, r6
 80090b4:	f7ff ffa6 	bl	8009004 <sbrk_aligned>
 80090b8:	3001      	adds	r0, #1
 80090ba:	d03a      	beq.n	8009132 <_malloc_r+0xea>
 80090bc:	6823      	ldr	r3, [r4, #0]
 80090be:	442b      	add	r3, r5
 80090c0:	6023      	str	r3, [r4, #0]
 80090c2:	f8d8 3000 	ldr.w	r3, [r8]
 80090c6:	685a      	ldr	r2, [r3, #4]
 80090c8:	bb62      	cbnz	r2, 8009124 <_malloc_r+0xdc>
 80090ca:	f8c8 7000 	str.w	r7, [r8]
 80090ce:	e00f      	b.n	80090f0 <_malloc_r+0xa8>
 80090d0:	6822      	ldr	r2, [r4, #0]
 80090d2:	1b52      	subs	r2, r2, r5
 80090d4:	d420      	bmi.n	8009118 <_malloc_r+0xd0>
 80090d6:	2a0b      	cmp	r2, #11
 80090d8:	d917      	bls.n	800910a <_malloc_r+0xc2>
 80090da:	1961      	adds	r1, r4, r5
 80090dc:	42a3      	cmp	r3, r4
 80090de:	6025      	str	r5, [r4, #0]
 80090e0:	bf18      	it	ne
 80090e2:	6059      	strne	r1, [r3, #4]
 80090e4:	6863      	ldr	r3, [r4, #4]
 80090e6:	bf08      	it	eq
 80090e8:	f8c8 1000 	streq.w	r1, [r8]
 80090ec:	5162      	str	r2, [r4, r5]
 80090ee:	604b      	str	r3, [r1, #4]
 80090f0:	4630      	mov	r0, r6
 80090f2:	f000 f82f 	bl	8009154 <__malloc_unlock>
 80090f6:	f104 000b 	add.w	r0, r4, #11
 80090fa:	1d23      	adds	r3, r4, #4
 80090fc:	f020 0007 	bic.w	r0, r0, #7
 8009100:	1ac2      	subs	r2, r0, r3
 8009102:	bf1c      	itt	ne
 8009104:	1a1b      	subne	r3, r3, r0
 8009106:	50a3      	strne	r3, [r4, r2]
 8009108:	e7af      	b.n	800906a <_malloc_r+0x22>
 800910a:	6862      	ldr	r2, [r4, #4]
 800910c:	42a3      	cmp	r3, r4
 800910e:	bf0c      	ite	eq
 8009110:	f8c8 2000 	streq.w	r2, [r8]
 8009114:	605a      	strne	r2, [r3, #4]
 8009116:	e7eb      	b.n	80090f0 <_malloc_r+0xa8>
 8009118:	4623      	mov	r3, r4
 800911a:	6864      	ldr	r4, [r4, #4]
 800911c:	e7ae      	b.n	800907c <_malloc_r+0x34>
 800911e:	463c      	mov	r4, r7
 8009120:	687f      	ldr	r7, [r7, #4]
 8009122:	e7b6      	b.n	8009092 <_malloc_r+0x4a>
 8009124:	461a      	mov	r2, r3
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	42a3      	cmp	r3, r4
 800912a:	d1fb      	bne.n	8009124 <_malloc_r+0xdc>
 800912c:	2300      	movs	r3, #0
 800912e:	6053      	str	r3, [r2, #4]
 8009130:	e7de      	b.n	80090f0 <_malloc_r+0xa8>
 8009132:	230c      	movs	r3, #12
 8009134:	6033      	str	r3, [r6, #0]
 8009136:	4630      	mov	r0, r6
 8009138:	f000 f80c 	bl	8009154 <__malloc_unlock>
 800913c:	e794      	b.n	8009068 <_malloc_r+0x20>
 800913e:	6005      	str	r5, [r0, #0]
 8009140:	e7d6      	b.n	80090f0 <_malloc_r+0xa8>
 8009142:	bf00      	nop
 8009144:	240003b8 	.word	0x240003b8

08009148 <__malloc_lock>:
 8009148:	4801      	ldr	r0, [pc, #4]	@ (8009150 <__malloc_lock+0x8>)
 800914a:	f7ff bf0e 	b.w	8008f6a <__retarget_lock_acquire_recursive>
 800914e:	bf00      	nop
 8009150:	240003b0 	.word	0x240003b0

08009154 <__malloc_unlock>:
 8009154:	4801      	ldr	r0, [pc, #4]	@ (800915c <__malloc_unlock+0x8>)
 8009156:	f7ff bf09 	b.w	8008f6c <__retarget_lock_release_recursive>
 800915a:	bf00      	nop
 800915c:	240003b0 	.word	0x240003b0

08009160 <__sfputc_r>:
 8009160:	6893      	ldr	r3, [r2, #8]
 8009162:	3b01      	subs	r3, #1
 8009164:	2b00      	cmp	r3, #0
 8009166:	b410      	push	{r4}
 8009168:	6093      	str	r3, [r2, #8]
 800916a:	da08      	bge.n	800917e <__sfputc_r+0x1e>
 800916c:	6994      	ldr	r4, [r2, #24]
 800916e:	42a3      	cmp	r3, r4
 8009170:	db01      	blt.n	8009176 <__sfputc_r+0x16>
 8009172:	290a      	cmp	r1, #10
 8009174:	d103      	bne.n	800917e <__sfputc_r+0x1e>
 8009176:	f85d 4b04 	ldr.w	r4, [sp], #4
 800917a:	f000 bb6b 	b.w	8009854 <__swbuf_r>
 800917e:	6813      	ldr	r3, [r2, #0]
 8009180:	1c58      	adds	r0, r3, #1
 8009182:	6010      	str	r0, [r2, #0]
 8009184:	7019      	strb	r1, [r3, #0]
 8009186:	4608      	mov	r0, r1
 8009188:	f85d 4b04 	ldr.w	r4, [sp], #4
 800918c:	4770      	bx	lr

0800918e <__sfputs_r>:
 800918e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009190:	4606      	mov	r6, r0
 8009192:	460f      	mov	r7, r1
 8009194:	4614      	mov	r4, r2
 8009196:	18d5      	adds	r5, r2, r3
 8009198:	42ac      	cmp	r4, r5
 800919a:	d101      	bne.n	80091a0 <__sfputs_r+0x12>
 800919c:	2000      	movs	r0, #0
 800919e:	e007      	b.n	80091b0 <__sfputs_r+0x22>
 80091a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091a4:	463a      	mov	r2, r7
 80091a6:	4630      	mov	r0, r6
 80091a8:	f7ff ffda 	bl	8009160 <__sfputc_r>
 80091ac:	1c43      	adds	r3, r0, #1
 80091ae:	d1f3      	bne.n	8009198 <__sfputs_r+0xa>
 80091b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080091b4 <_vfiprintf_r>:
 80091b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091b8:	460d      	mov	r5, r1
 80091ba:	b09d      	sub	sp, #116	@ 0x74
 80091bc:	4614      	mov	r4, r2
 80091be:	4698      	mov	r8, r3
 80091c0:	4606      	mov	r6, r0
 80091c2:	b118      	cbz	r0, 80091cc <_vfiprintf_r+0x18>
 80091c4:	6a03      	ldr	r3, [r0, #32]
 80091c6:	b90b      	cbnz	r3, 80091cc <_vfiprintf_r+0x18>
 80091c8:	f7ff fdca 	bl	8008d60 <__sinit>
 80091cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091ce:	07d9      	lsls	r1, r3, #31
 80091d0:	d405      	bmi.n	80091de <_vfiprintf_r+0x2a>
 80091d2:	89ab      	ldrh	r3, [r5, #12]
 80091d4:	059a      	lsls	r2, r3, #22
 80091d6:	d402      	bmi.n	80091de <_vfiprintf_r+0x2a>
 80091d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091da:	f7ff fec6 	bl	8008f6a <__retarget_lock_acquire_recursive>
 80091de:	89ab      	ldrh	r3, [r5, #12]
 80091e0:	071b      	lsls	r3, r3, #28
 80091e2:	d501      	bpl.n	80091e8 <_vfiprintf_r+0x34>
 80091e4:	692b      	ldr	r3, [r5, #16]
 80091e6:	b99b      	cbnz	r3, 8009210 <_vfiprintf_r+0x5c>
 80091e8:	4629      	mov	r1, r5
 80091ea:	4630      	mov	r0, r6
 80091ec:	f000 fb70 	bl	80098d0 <__swsetup_r>
 80091f0:	b170      	cbz	r0, 8009210 <_vfiprintf_r+0x5c>
 80091f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091f4:	07dc      	lsls	r4, r3, #31
 80091f6:	d504      	bpl.n	8009202 <_vfiprintf_r+0x4e>
 80091f8:	f04f 30ff 	mov.w	r0, #4294967295
 80091fc:	b01d      	add	sp, #116	@ 0x74
 80091fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009202:	89ab      	ldrh	r3, [r5, #12]
 8009204:	0598      	lsls	r0, r3, #22
 8009206:	d4f7      	bmi.n	80091f8 <_vfiprintf_r+0x44>
 8009208:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800920a:	f7ff feaf 	bl	8008f6c <__retarget_lock_release_recursive>
 800920e:	e7f3      	b.n	80091f8 <_vfiprintf_r+0x44>
 8009210:	2300      	movs	r3, #0
 8009212:	9309      	str	r3, [sp, #36]	@ 0x24
 8009214:	2320      	movs	r3, #32
 8009216:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800921a:	f8cd 800c 	str.w	r8, [sp, #12]
 800921e:	2330      	movs	r3, #48	@ 0x30
 8009220:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80093d0 <_vfiprintf_r+0x21c>
 8009224:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009228:	f04f 0901 	mov.w	r9, #1
 800922c:	4623      	mov	r3, r4
 800922e:	469a      	mov	sl, r3
 8009230:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009234:	b10a      	cbz	r2, 800923a <_vfiprintf_r+0x86>
 8009236:	2a25      	cmp	r2, #37	@ 0x25
 8009238:	d1f9      	bne.n	800922e <_vfiprintf_r+0x7a>
 800923a:	ebba 0b04 	subs.w	fp, sl, r4
 800923e:	d00b      	beq.n	8009258 <_vfiprintf_r+0xa4>
 8009240:	465b      	mov	r3, fp
 8009242:	4622      	mov	r2, r4
 8009244:	4629      	mov	r1, r5
 8009246:	4630      	mov	r0, r6
 8009248:	f7ff ffa1 	bl	800918e <__sfputs_r>
 800924c:	3001      	adds	r0, #1
 800924e:	f000 80a7 	beq.w	80093a0 <_vfiprintf_r+0x1ec>
 8009252:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009254:	445a      	add	r2, fp
 8009256:	9209      	str	r2, [sp, #36]	@ 0x24
 8009258:	f89a 3000 	ldrb.w	r3, [sl]
 800925c:	2b00      	cmp	r3, #0
 800925e:	f000 809f 	beq.w	80093a0 <_vfiprintf_r+0x1ec>
 8009262:	2300      	movs	r3, #0
 8009264:	f04f 32ff 	mov.w	r2, #4294967295
 8009268:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800926c:	f10a 0a01 	add.w	sl, sl, #1
 8009270:	9304      	str	r3, [sp, #16]
 8009272:	9307      	str	r3, [sp, #28]
 8009274:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009278:	931a      	str	r3, [sp, #104]	@ 0x68
 800927a:	4654      	mov	r4, sl
 800927c:	2205      	movs	r2, #5
 800927e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009282:	4853      	ldr	r0, [pc, #332]	@ (80093d0 <_vfiprintf_r+0x21c>)
 8009284:	f7f7 f82c 	bl	80002e0 <memchr>
 8009288:	9a04      	ldr	r2, [sp, #16]
 800928a:	b9d8      	cbnz	r0, 80092c4 <_vfiprintf_r+0x110>
 800928c:	06d1      	lsls	r1, r2, #27
 800928e:	bf44      	itt	mi
 8009290:	2320      	movmi	r3, #32
 8009292:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009296:	0713      	lsls	r3, r2, #28
 8009298:	bf44      	itt	mi
 800929a:	232b      	movmi	r3, #43	@ 0x2b
 800929c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092a0:	f89a 3000 	ldrb.w	r3, [sl]
 80092a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80092a6:	d015      	beq.n	80092d4 <_vfiprintf_r+0x120>
 80092a8:	9a07      	ldr	r2, [sp, #28]
 80092aa:	4654      	mov	r4, sl
 80092ac:	2000      	movs	r0, #0
 80092ae:	f04f 0c0a 	mov.w	ip, #10
 80092b2:	4621      	mov	r1, r4
 80092b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092b8:	3b30      	subs	r3, #48	@ 0x30
 80092ba:	2b09      	cmp	r3, #9
 80092bc:	d94b      	bls.n	8009356 <_vfiprintf_r+0x1a2>
 80092be:	b1b0      	cbz	r0, 80092ee <_vfiprintf_r+0x13a>
 80092c0:	9207      	str	r2, [sp, #28]
 80092c2:	e014      	b.n	80092ee <_vfiprintf_r+0x13a>
 80092c4:	eba0 0308 	sub.w	r3, r0, r8
 80092c8:	fa09 f303 	lsl.w	r3, r9, r3
 80092cc:	4313      	orrs	r3, r2
 80092ce:	9304      	str	r3, [sp, #16]
 80092d0:	46a2      	mov	sl, r4
 80092d2:	e7d2      	b.n	800927a <_vfiprintf_r+0xc6>
 80092d4:	9b03      	ldr	r3, [sp, #12]
 80092d6:	1d19      	adds	r1, r3, #4
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	9103      	str	r1, [sp, #12]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	bfbb      	ittet	lt
 80092e0:	425b      	neglt	r3, r3
 80092e2:	f042 0202 	orrlt.w	r2, r2, #2
 80092e6:	9307      	strge	r3, [sp, #28]
 80092e8:	9307      	strlt	r3, [sp, #28]
 80092ea:	bfb8      	it	lt
 80092ec:	9204      	strlt	r2, [sp, #16]
 80092ee:	7823      	ldrb	r3, [r4, #0]
 80092f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80092f2:	d10a      	bne.n	800930a <_vfiprintf_r+0x156>
 80092f4:	7863      	ldrb	r3, [r4, #1]
 80092f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80092f8:	d132      	bne.n	8009360 <_vfiprintf_r+0x1ac>
 80092fa:	9b03      	ldr	r3, [sp, #12]
 80092fc:	1d1a      	adds	r2, r3, #4
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	9203      	str	r2, [sp, #12]
 8009302:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009306:	3402      	adds	r4, #2
 8009308:	9305      	str	r3, [sp, #20]
 800930a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80093e0 <_vfiprintf_r+0x22c>
 800930e:	7821      	ldrb	r1, [r4, #0]
 8009310:	2203      	movs	r2, #3
 8009312:	4650      	mov	r0, sl
 8009314:	f7f6 ffe4 	bl	80002e0 <memchr>
 8009318:	b138      	cbz	r0, 800932a <_vfiprintf_r+0x176>
 800931a:	9b04      	ldr	r3, [sp, #16]
 800931c:	eba0 000a 	sub.w	r0, r0, sl
 8009320:	2240      	movs	r2, #64	@ 0x40
 8009322:	4082      	lsls	r2, r0
 8009324:	4313      	orrs	r3, r2
 8009326:	3401      	adds	r4, #1
 8009328:	9304      	str	r3, [sp, #16]
 800932a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800932e:	4829      	ldr	r0, [pc, #164]	@ (80093d4 <_vfiprintf_r+0x220>)
 8009330:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009334:	2206      	movs	r2, #6
 8009336:	f7f6 ffd3 	bl	80002e0 <memchr>
 800933a:	2800      	cmp	r0, #0
 800933c:	d03f      	beq.n	80093be <_vfiprintf_r+0x20a>
 800933e:	4b26      	ldr	r3, [pc, #152]	@ (80093d8 <_vfiprintf_r+0x224>)
 8009340:	bb1b      	cbnz	r3, 800938a <_vfiprintf_r+0x1d6>
 8009342:	9b03      	ldr	r3, [sp, #12]
 8009344:	3307      	adds	r3, #7
 8009346:	f023 0307 	bic.w	r3, r3, #7
 800934a:	3308      	adds	r3, #8
 800934c:	9303      	str	r3, [sp, #12]
 800934e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009350:	443b      	add	r3, r7
 8009352:	9309      	str	r3, [sp, #36]	@ 0x24
 8009354:	e76a      	b.n	800922c <_vfiprintf_r+0x78>
 8009356:	fb0c 3202 	mla	r2, ip, r2, r3
 800935a:	460c      	mov	r4, r1
 800935c:	2001      	movs	r0, #1
 800935e:	e7a8      	b.n	80092b2 <_vfiprintf_r+0xfe>
 8009360:	2300      	movs	r3, #0
 8009362:	3401      	adds	r4, #1
 8009364:	9305      	str	r3, [sp, #20]
 8009366:	4619      	mov	r1, r3
 8009368:	f04f 0c0a 	mov.w	ip, #10
 800936c:	4620      	mov	r0, r4
 800936e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009372:	3a30      	subs	r2, #48	@ 0x30
 8009374:	2a09      	cmp	r2, #9
 8009376:	d903      	bls.n	8009380 <_vfiprintf_r+0x1cc>
 8009378:	2b00      	cmp	r3, #0
 800937a:	d0c6      	beq.n	800930a <_vfiprintf_r+0x156>
 800937c:	9105      	str	r1, [sp, #20]
 800937e:	e7c4      	b.n	800930a <_vfiprintf_r+0x156>
 8009380:	fb0c 2101 	mla	r1, ip, r1, r2
 8009384:	4604      	mov	r4, r0
 8009386:	2301      	movs	r3, #1
 8009388:	e7f0      	b.n	800936c <_vfiprintf_r+0x1b8>
 800938a:	ab03      	add	r3, sp, #12
 800938c:	9300      	str	r3, [sp, #0]
 800938e:	462a      	mov	r2, r5
 8009390:	4b12      	ldr	r3, [pc, #72]	@ (80093dc <_vfiprintf_r+0x228>)
 8009392:	a904      	add	r1, sp, #16
 8009394:	4630      	mov	r0, r6
 8009396:	f3af 8000 	nop.w
 800939a:	4607      	mov	r7, r0
 800939c:	1c78      	adds	r0, r7, #1
 800939e:	d1d6      	bne.n	800934e <_vfiprintf_r+0x19a>
 80093a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093a2:	07d9      	lsls	r1, r3, #31
 80093a4:	d405      	bmi.n	80093b2 <_vfiprintf_r+0x1fe>
 80093a6:	89ab      	ldrh	r3, [r5, #12]
 80093a8:	059a      	lsls	r2, r3, #22
 80093aa:	d402      	bmi.n	80093b2 <_vfiprintf_r+0x1fe>
 80093ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093ae:	f7ff fddd 	bl	8008f6c <__retarget_lock_release_recursive>
 80093b2:	89ab      	ldrh	r3, [r5, #12]
 80093b4:	065b      	lsls	r3, r3, #25
 80093b6:	f53f af1f 	bmi.w	80091f8 <_vfiprintf_r+0x44>
 80093ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80093bc:	e71e      	b.n	80091fc <_vfiprintf_r+0x48>
 80093be:	ab03      	add	r3, sp, #12
 80093c0:	9300      	str	r3, [sp, #0]
 80093c2:	462a      	mov	r2, r5
 80093c4:	4b05      	ldr	r3, [pc, #20]	@ (80093dc <_vfiprintf_r+0x228>)
 80093c6:	a904      	add	r1, sp, #16
 80093c8:	4630      	mov	r0, r6
 80093ca:	f000 f879 	bl	80094c0 <_printf_i>
 80093ce:	e7e4      	b.n	800939a <_vfiprintf_r+0x1e6>
 80093d0:	0800b330 	.word	0x0800b330
 80093d4:	0800b33a 	.word	0x0800b33a
 80093d8:	00000000 	.word	0x00000000
 80093dc:	0800918f 	.word	0x0800918f
 80093e0:	0800b336 	.word	0x0800b336

080093e4 <_printf_common>:
 80093e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093e8:	4616      	mov	r6, r2
 80093ea:	4698      	mov	r8, r3
 80093ec:	688a      	ldr	r2, [r1, #8]
 80093ee:	690b      	ldr	r3, [r1, #16]
 80093f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80093f4:	4293      	cmp	r3, r2
 80093f6:	bfb8      	it	lt
 80093f8:	4613      	movlt	r3, r2
 80093fa:	6033      	str	r3, [r6, #0]
 80093fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009400:	4607      	mov	r7, r0
 8009402:	460c      	mov	r4, r1
 8009404:	b10a      	cbz	r2, 800940a <_printf_common+0x26>
 8009406:	3301      	adds	r3, #1
 8009408:	6033      	str	r3, [r6, #0]
 800940a:	6823      	ldr	r3, [r4, #0]
 800940c:	0699      	lsls	r1, r3, #26
 800940e:	bf42      	ittt	mi
 8009410:	6833      	ldrmi	r3, [r6, #0]
 8009412:	3302      	addmi	r3, #2
 8009414:	6033      	strmi	r3, [r6, #0]
 8009416:	6825      	ldr	r5, [r4, #0]
 8009418:	f015 0506 	ands.w	r5, r5, #6
 800941c:	d106      	bne.n	800942c <_printf_common+0x48>
 800941e:	f104 0a19 	add.w	sl, r4, #25
 8009422:	68e3      	ldr	r3, [r4, #12]
 8009424:	6832      	ldr	r2, [r6, #0]
 8009426:	1a9b      	subs	r3, r3, r2
 8009428:	42ab      	cmp	r3, r5
 800942a:	dc26      	bgt.n	800947a <_printf_common+0x96>
 800942c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009430:	6822      	ldr	r2, [r4, #0]
 8009432:	3b00      	subs	r3, #0
 8009434:	bf18      	it	ne
 8009436:	2301      	movne	r3, #1
 8009438:	0692      	lsls	r2, r2, #26
 800943a:	d42b      	bmi.n	8009494 <_printf_common+0xb0>
 800943c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009440:	4641      	mov	r1, r8
 8009442:	4638      	mov	r0, r7
 8009444:	47c8      	blx	r9
 8009446:	3001      	adds	r0, #1
 8009448:	d01e      	beq.n	8009488 <_printf_common+0xa4>
 800944a:	6823      	ldr	r3, [r4, #0]
 800944c:	6922      	ldr	r2, [r4, #16]
 800944e:	f003 0306 	and.w	r3, r3, #6
 8009452:	2b04      	cmp	r3, #4
 8009454:	bf02      	ittt	eq
 8009456:	68e5      	ldreq	r5, [r4, #12]
 8009458:	6833      	ldreq	r3, [r6, #0]
 800945a:	1aed      	subeq	r5, r5, r3
 800945c:	68a3      	ldr	r3, [r4, #8]
 800945e:	bf0c      	ite	eq
 8009460:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009464:	2500      	movne	r5, #0
 8009466:	4293      	cmp	r3, r2
 8009468:	bfc4      	itt	gt
 800946a:	1a9b      	subgt	r3, r3, r2
 800946c:	18ed      	addgt	r5, r5, r3
 800946e:	2600      	movs	r6, #0
 8009470:	341a      	adds	r4, #26
 8009472:	42b5      	cmp	r5, r6
 8009474:	d11a      	bne.n	80094ac <_printf_common+0xc8>
 8009476:	2000      	movs	r0, #0
 8009478:	e008      	b.n	800948c <_printf_common+0xa8>
 800947a:	2301      	movs	r3, #1
 800947c:	4652      	mov	r2, sl
 800947e:	4641      	mov	r1, r8
 8009480:	4638      	mov	r0, r7
 8009482:	47c8      	blx	r9
 8009484:	3001      	adds	r0, #1
 8009486:	d103      	bne.n	8009490 <_printf_common+0xac>
 8009488:	f04f 30ff 	mov.w	r0, #4294967295
 800948c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009490:	3501      	adds	r5, #1
 8009492:	e7c6      	b.n	8009422 <_printf_common+0x3e>
 8009494:	18e1      	adds	r1, r4, r3
 8009496:	1c5a      	adds	r2, r3, #1
 8009498:	2030      	movs	r0, #48	@ 0x30
 800949a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800949e:	4422      	add	r2, r4
 80094a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80094a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80094a8:	3302      	adds	r3, #2
 80094aa:	e7c7      	b.n	800943c <_printf_common+0x58>
 80094ac:	2301      	movs	r3, #1
 80094ae:	4622      	mov	r2, r4
 80094b0:	4641      	mov	r1, r8
 80094b2:	4638      	mov	r0, r7
 80094b4:	47c8      	blx	r9
 80094b6:	3001      	adds	r0, #1
 80094b8:	d0e6      	beq.n	8009488 <_printf_common+0xa4>
 80094ba:	3601      	adds	r6, #1
 80094bc:	e7d9      	b.n	8009472 <_printf_common+0x8e>
	...

080094c0 <_printf_i>:
 80094c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094c4:	7e0f      	ldrb	r7, [r1, #24]
 80094c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80094c8:	2f78      	cmp	r7, #120	@ 0x78
 80094ca:	4691      	mov	r9, r2
 80094cc:	4680      	mov	r8, r0
 80094ce:	460c      	mov	r4, r1
 80094d0:	469a      	mov	sl, r3
 80094d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80094d6:	d807      	bhi.n	80094e8 <_printf_i+0x28>
 80094d8:	2f62      	cmp	r7, #98	@ 0x62
 80094da:	d80a      	bhi.n	80094f2 <_printf_i+0x32>
 80094dc:	2f00      	cmp	r7, #0
 80094de:	f000 80d1 	beq.w	8009684 <_printf_i+0x1c4>
 80094e2:	2f58      	cmp	r7, #88	@ 0x58
 80094e4:	f000 80b8 	beq.w	8009658 <_printf_i+0x198>
 80094e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80094ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80094f0:	e03a      	b.n	8009568 <_printf_i+0xa8>
 80094f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80094f6:	2b15      	cmp	r3, #21
 80094f8:	d8f6      	bhi.n	80094e8 <_printf_i+0x28>
 80094fa:	a101      	add	r1, pc, #4	@ (adr r1, 8009500 <_printf_i+0x40>)
 80094fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009500:	08009559 	.word	0x08009559
 8009504:	0800956d 	.word	0x0800956d
 8009508:	080094e9 	.word	0x080094e9
 800950c:	080094e9 	.word	0x080094e9
 8009510:	080094e9 	.word	0x080094e9
 8009514:	080094e9 	.word	0x080094e9
 8009518:	0800956d 	.word	0x0800956d
 800951c:	080094e9 	.word	0x080094e9
 8009520:	080094e9 	.word	0x080094e9
 8009524:	080094e9 	.word	0x080094e9
 8009528:	080094e9 	.word	0x080094e9
 800952c:	0800966b 	.word	0x0800966b
 8009530:	08009597 	.word	0x08009597
 8009534:	08009625 	.word	0x08009625
 8009538:	080094e9 	.word	0x080094e9
 800953c:	080094e9 	.word	0x080094e9
 8009540:	0800968d 	.word	0x0800968d
 8009544:	080094e9 	.word	0x080094e9
 8009548:	08009597 	.word	0x08009597
 800954c:	080094e9 	.word	0x080094e9
 8009550:	080094e9 	.word	0x080094e9
 8009554:	0800962d 	.word	0x0800962d
 8009558:	6833      	ldr	r3, [r6, #0]
 800955a:	1d1a      	adds	r2, r3, #4
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	6032      	str	r2, [r6, #0]
 8009560:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009564:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009568:	2301      	movs	r3, #1
 800956a:	e09c      	b.n	80096a6 <_printf_i+0x1e6>
 800956c:	6833      	ldr	r3, [r6, #0]
 800956e:	6820      	ldr	r0, [r4, #0]
 8009570:	1d19      	adds	r1, r3, #4
 8009572:	6031      	str	r1, [r6, #0]
 8009574:	0606      	lsls	r6, r0, #24
 8009576:	d501      	bpl.n	800957c <_printf_i+0xbc>
 8009578:	681d      	ldr	r5, [r3, #0]
 800957a:	e003      	b.n	8009584 <_printf_i+0xc4>
 800957c:	0645      	lsls	r5, r0, #25
 800957e:	d5fb      	bpl.n	8009578 <_printf_i+0xb8>
 8009580:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009584:	2d00      	cmp	r5, #0
 8009586:	da03      	bge.n	8009590 <_printf_i+0xd0>
 8009588:	232d      	movs	r3, #45	@ 0x2d
 800958a:	426d      	negs	r5, r5
 800958c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009590:	4858      	ldr	r0, [pc, #352]	@ (80096f4 <_printf_i+0x234>)
 8009592:	230a      	movs	r3, #10
 8009594:	e011      	b.n	80095ba <_printf_i+0xfa>
 8009596:	6821      	ldr	r1, [r4, #0]
 8009598:	6833      	ldr	r3, [r6, #0]
 800959a:	0608      	lsls	r0, r1, #24
 800959c:	f853 5b04 	ldr.w	r5, [r3], #4
 80095a0:	d402      	bmi.n	80095a8 <_printf_i+0xe8>
 80095a2:	0649      	lsls	r1, r1, #25
 80095a4:	bf48      	it	mi
 80095a6:	b2ad      	uxthmi	r5, r5
 80095a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80095aa:	4852      	ldr	r0, [pc, #328]	@ (80096f4 <_printf_i+0x234>)
 80095ac:	6033      	str	r3, [r6, #0]
 80095ae:	bf14      	ite	ne
 80095b0:	230a      	movne	r3, #10
 80095b2:	2308      	moveq	r3, #8
 80095b4:	2100      	movs	r1, #0
 80095b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80095ba:	6866      	ldr	r6, [r4, #4]
 80095bc:	60a6      	str	r6, [r4, #8]
 80095be:	2e00      	cmp	r6, #0
 80095c0:	db05      	blt.n	80095ce <_printf_i+0x10e>
 80095c2:	6821      	ldr	r1, [r4, #0]
 80095c4:	432e      	orrs	r6, r5
 80095c6:	f021 0104 	bic.w	r1, r1, #4
 80095ca:	6021      	str	r1, [r4, #0]
 80095cc:	d04b      	beq.n	8009666 <_printf_i+0x1a6>
 80095ce:	4616      	mov	r6, r2
 80095d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80095d4:	fb03 5711 	mls	r7, r3, r1, r5
 80095d8:	5dc7      	ldrb	r7, [r0, r7]
 80095da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80095de:	462f      	mov	r7, r5
 80095e0:	42bb      	cmp	r3, r7
 80095e2:	460d      	mov	r5, r1
 80095e4:	d9f4      	bls.n	80095d0 <_printf_i+0x110>
 80095e6:	2b08      	cmp	r3, #8
 80095e8:	d10b      	bne.n	8009602 <_printf_i+0x142>
 80095ea:	6823      	ldr	r3, [r4, #0]
 80095ec:	07df      	lsls	r7, r3, #31
 80095ee:	d508      	bpl.n	8009602 <_printf_i+0x142>
 80095f0:	6923      	ldr	r3, [r4, #16]
 80095f2:	6861      	ldr	r1, [r4, #4]
 80095f4:	4299      	cmp	r1, r3
 80095f6:	bfde      	ittt	le
 80095f8:	2330      	movle	r3, #48	@ 0x30
 80095fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80095fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009602:	1b92      	subs	r2, r2, r6
 8009604:	6122      	str	r2, [r4, #16]
 8009606:	f8cd a000 	str.w	sl, [sp]
 800960a:	464b      	mov	r3, r9
 800960c:	aa03      	add	r2, sp, #12
 800960e:	4621      	mov	r1, r4
 8009610:	4640      	mov	r0, r8
 8009612:	f7ff fee7 	bl	80093e4 <_printf_common>
 8009616:	3001      	adds	r0, #1
 8009618:	d14a      	bne.n	80096b0 <_printf_i+0x1f0>
 800961a:	f04f 30ff 	mov.w	r0, #4294967295
 800961e:	b004      	add	sp, #16
 8009620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009624:	6823      	ldr	r3, [r4, #0]
 8009626:	f043 0320 	orr.w	r3, r3, #32
 800962a:	6023      	str	r3, [r4, #0]
 800962c:	4832      	ldr	r0, [pc, #200]	@ (80096f8 <_printf_i+0x238>)
 800962e:	2778      	movs	r7, #120	@ 0x78
 8009630:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009634:	6823      	ldr	r3, [r4, #0]
 8009636:	6831      	ldr	r1, [r6, #0]
 8009638:	061f      	lsls	r7, r3, #24
 800963a:	f851 5b04 	ldr.w	r5, [r1], #4
 800963e:	d402      	bmi.n	8009646 <_printf_i+0x186>
 8009640:	065f      	lsls	r7, r3, #25
 8009642:	bf48      	it	mi
 8009644:	b2ad      	uxthmi	r5, r5
 8009646:	6031      	str	r1, [r6, #0]
 8009648:	07d9      	lsls	r1, r3, #31
 800964a:	bf44      	itt	mi
 800964c:	f043 0320 	orrmi.w	r3, r3, #32
 8009650:	6023      	strmi	r3, [r4, #0]
 8009652:	b11d      	cbz	r5, 800965c <_printf_i+0x19c>
 8009654:	2310      	movs	r3, #16
 8009656:	e7ad      	b.n	80095b4 <_printf_i+0xf4>
 8009658:	4826      	ldr	r0, [pc, #152]	@ (80096f4 <_printf_i+0x234>)
 800965a:	e7e9      	b.n	8009630 <_printf_i+0x170>
 800965c:	6823      	ldr	r3, [r4, #0]
 800965e:	f023 0320 	bic.w	r3, r3, #32
 8009662:	6023      	str	r3, [r4, #0]
 8009664:	e7f6      	b.n	8009654 <_printf_i+0x194>
 8009666:	4616      	mov	r6, r2
 8009668:	e7bd      	b.n	80095e6 <_printf_i+0x126>
 800966a:	6833      	ldr	r3, [r6, #0]
 800966c:	6825      	ldr	r5, [r4, #0]
 800966e:	6961      	ldr	r1, [r4, #20]
 8009670:	1d18      	adds	r0, r3, #4
 8009672:	6030      	str	r0, [r6, #0]
 8009674:	062e      	lsls	r6, r5, #24
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	d501      	bpl.n	800967e <_printf_i+0x1be>
 800967a:	6019      	str	r1, [r3, #0]
 800967c:	e002      	b.n	8009684 <_printf_i+0x1c4>
 800967e:	0668      	lsls	r0, r5, #25
 8009680:	d5fb      	bpl.n	800967a <_printf_i+0x1ba>
 8009682:	8019      	strh	r1, [r3, #0]
 8009684:	2300      	movs	r3, #0
 8009686:	6123      	str	r3, [r4, #16]
 8009688:	4616      	mov	r6, r2
 800968a:	e7bc      	b.n	8009606 <_printf_i+0x146>
 800968c:	6833      	ldr	r3, [r6, #0]
 800968e:	1d1a      	adds	r2, r3, #4
 8009690:	6032      	str	r2, [r6, #0]
 8009692:	681e      	ldr	r6, [r3, #0]
 8009694:	6862      	ldr	r2, [r4, #4]
 8009696:	2100      	movs	r1, #0
 8009698:	4630      	mov	r0, r6
 800969a:	f7f6 fe21 	bl	80002e0 <memchr>
 800969e:	b108      	cbz	r0, 80096a4 <_printf_i+0x1e4>
 80096a0:	1b80      	subs	r0, r0, r6
 80096a2:	6060      	str	r0, [r4, #4]
 80096a4:	6863      	ldr	r3, [r4, #4]
 80096a6:	6123      	str	r3, [r4, #16]
 80096a8:	2300      	movs	r3, #0
 80096aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096ae:	e7aa      	b.n	8009606 <_printf_i+0x146>
 80096b0:	6923      	ldr	r3, [r4, #16]
 80096b2:	4632      	mov	r2, r6
 80096b4:	4649      	mov	r1, r9
 80096b6:	4640      	mov	r0, r8
 80096b8:	47d0      	blx	sl
 80096ba:	3001      	adds	r0, #1
 80096bc:	d0ad      	beq.n	800961a <_printf_i+0x15a>
 80096be:	6823      	ldr	r3, [r4, #0]
 80096c0:	079b      	lsls	r3, r3, #30
 80096c2:	d413      	bmi.n	80096ec <_printf_i+0x22c>
 80096c4:	68e0      	ldr	r0, [r4, #12]
 80096c6:	9b03      	ldr	r3, [sp, #12]
 80096c8:	4298      	cmp	r0, r3
 80096ca:	bfb8      	it	lt
 80096cc:	4618      	movlt	r0, r3
 80096ce:	e7a6      	b.n	800961e <_printf_i+0x15e>
 80096d0:	2301      	movs	r3, #1
 80096d2:	4632      	mov	r2, r6
 80096d4:	4649      	mov	r1, r9
 80096d6:	4640      	mov	r0, r8
 80096d8:	47d0      	blx	sl
 80096da:	3001      	adds	r0, #1
 80096dc:	d09d      	beq.n	800961a <_printf_i+0x15a>
 80096de:	3501      	adds	r5, #1
 80096e0:	68e3      	ldr	r3, [r4, #12]
 80096e2:	9903      	ldr	r1, [sp, #12]
 80096e4:	1a5b      	subs	r3, r3, r1
 80096e6:	42ab      	cmp	r3, r5
 80096e8:	dcf2      	bgt.n	80096d0 <_printf_i+0x210>
 80096ea:	e7eb      	b.n	80096c4 <_printf_i+0x204>
 80096ec:	2500      	movs	r5, #0
 80096ee:	f104 0619 	add.w	r6, r4, #25
 80096f2:	e7f5      	b.n	80096e0 <_printf_i+0x220>
 80096f4:	0800b341 	.word	0x0800b341
 80096f8:	0800b352 	.word	0x0800b352

080096fc <__sflush_r>:
 80096fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009704:	0716      	lsls	r6, r2, #28
 8009706:	4605      	mov	r5, r0
 8009708:	460c      	mov	r4, r1
 800970a:	d454      	bmi.n	80097b6 <__sflush_r+0xba>
 800970c:	684b      	ldr	r3, [r1, #4]
 800970e:	2b00      	cmp	r3, #0
 8009710:	dc02      	bgt.n	8009718 <__sflush_r+0x1c>
 8009712:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009714:	2b00      	cmp	r3, #0
 8009716:	dd48      	ble.n	80097aa <__sflush_r+0xae>
 8009718:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800971a:	2e00      	cmp	r6, #0
 800971c:	d045      	beq.n	80097aa <__sflush_r+0xae>
 800971e:	2300      	movs	r3, #0
 8009720:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009724:	682f      	ldr	r7, [r5, #0]
 8009726:	6a21      	ldr	r1, [r4, #32]
 8009728:	602b      	str	r3, [r5, #0]
 800972a:	d030      	beq.n	800978e <__sflush_r+0x92>
 800972c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800972e:	89a3      	ldrh	r3, [r4, #12]
 8009730:	0759      	lsls	r1, r3, #29
 8009732:	d505      	bpl.n	8009740 <__sflush_r+0x44>
 8009734:	6863      	ldr	r3, [r4, #4]
 8009736:	1ad2      	subs	r2, r2, r3
 8009738:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800973a:	b10b      	cbz	r3, 8009740 <__sflush_r+0x44>
 800973c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800973e:	1ad2      	subs	r2, r2, r3
 8009740:	2300      	movs	r3, #0
 8009742:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009744:	6a21      	ldr	r1, [r4, #32]
 8009746:	4628      	mov	r0, r5
 8009748:	47b0      	blx	r6
 800974a:	1c43      	adds	r3, r0, #1
 800974c:	89a3      	ldrh	r3, [r4, #12]
 800974e:	d106      	bne.n	800975e <__sflush_r+0x62>
 8009750:	6829      	ldr	r1, [r5, #0]
 8009752:	291d      	cmp	r1, #29
 8009754:	d82b      	bhi.n	80097ae <__sflush_r+0xb2>
 8009756:	4a2a      	ldr	r2, [pc, #168]	@ (8009800 <__sflush_r+0x104>)
 8009758:	40ca      	lsrs	r2, r1
 800975a:	07d6      	lsls	r6, r2, #31
 800975c:	d527      	bpl.n	80097ae <__sflush_r+0xb2>
 800975e:	2200      	movs	r2, #0
 8009760:	6062      	str	r2, [r4, #4]
 8009762:	04d9      	lsls	r1, r3, #19
 8009764:	6922      	ldr	r2, [r4, #16]
 8009766:	6022      	str	r2, [r4, #0]
 8009768:	d504      	bpl.n	8009774 <__sflush_r+0x78>
 800976a:	1c42      	adds	r2, r0, #1
 800976c:	d101      	bne.n	8009772 <__sflush_r+0x76>
 800976e:	682b      	ldr	r3, [r5, #0]
 8009770:	b903      	cbnz	r3, 8009774 <__sflush_r+0x78>
 8009772:	6560      	str	r0, [r4, #84]	@ 0x54
 8009774:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009776:	602f      	str	r7, [r5, #0]
 8009778:	b1b9      	cbz	r1, 80097aa <__sflush_r+0xae>
 800977a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800977e:	4299      	cmp	r1, r3
 8009780:	d002      	beq.n	8009788 <__sflush_r+0x8c>
 8009782:	4628      	mov	r0, r5
 8009784:	f7ff fbf4 	bl	8008f70 <_free_r>
 8009788:	2300      	movs	r3, #0
 800978a:	6363      	str	r3, [r4, #52]	@ 0x34
 800978c:	e00d      	b.n	80097aa <__sflush_r+0xae>
 800978e:	2301      	movs	r3, #1
 8009790:	4628      	mov	r0, r5
 8009792:	47b0      	blx	r6
 8009794:	4602      	mov	r2, r0
 8009796:	1c50      	adds	r0, r2, #1
 8009798:	d1c9      	bne.n	800972e <__sflush_r+0x32>
 800979a:	682b      	ldr	r3, [r5, #0]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d0c6      	beq.n	800972e <__sflush_r+0x32>
 80097a0:	2b1d      	cmp	r3, #29
 80097a2:	d001      	beq.n	80097a8 <__sflush_r+0xac>
 80097a4:	2b16      	cmp	r3, #22
 80097a6:	d11e      	bne.n	80097e6 <__sflush_r+0xea>
 80097a8:	602f      	str	r7, [r5, #0]
 80097aa:	2000      	movs	r0, #0
 80097ac:	e022      	b.n	80097f4 <__sflush_r+0xf8>
 80097ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097b2:	b21b      	sxth	r3, r3
 80097b4:	e01b      	b.n	80097ee <__sflush_r+0xf2>
 80097b6:	690f      	ldr	r7, [r1, #16]
 80097b8:	2f00      	cmp	r7, #0
 80097ba:	d0f6      	beq.n	80097aa <__sflush_r+0xae>
 80097bc:	0793      	lsls	r3, r2, #30
 80097be:	680e      	ldr	r6, [r1, #0]
 80097c0:	bf08      	it	eq
 80097c2:	694b      	ldreq	r3, [r1, #20]
 80097c4:	600f      	str	r7, [r1, #0]
 80097c6:	bf18      	it	ne
 80097c8:	2300      	movne	r3, #0
 80097ca:	eba6 0807 	sub.w	r8, r6, r7
 80097ce:	608b      	str	r3, [r1, #8]
 80097d0:	f1b8 0f00 	cmp.w	r8, #0
 80097d4:	dde9      	ble.n	80097aa <__sflush_r+0xae>
 80097d6:	6a21      	ldr	r1, [r4, #32]
 80097d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80097da:	4643      	mov	r3, r8
 80097dc:	463a      	mov	r2, r7
 80097de:	4628      	mov	r0, r5
 80097e0:	47b0      	blx	r6
 80097e2:	2800      	cmp	r0, #0
 80097e4:	dc08      	bgt.n	80097f8 <__sflush_r+0xfc>
 80097e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097ee:	81a3      	strh	r3, [r4, #12]
 80097f0:	f04f 30ff 	mov.w	r0, #4294967295
 80097f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097f8:	4407      	add	r7, r0
 80097fa:	eba8 0800 	sub.w	r8, r8, r0
 80097fe:	e7e7      	b.n	80097d0 <__sflush_r+0xd4>
 8009800:	20400001 	.word	0x20400001

08009804 <_fflush_r>:
 8009804:	b538      	push	{r3, r4, r5, lr}
 8009806:	690b      	ldr	r3, [r1, #16]
 8009808:	4605      	mov	r5, r0
 800980a:	460c      	mov	r4, r1
 800980c:	b913      	cbnz	r3, 8009814 <_fflush_r+0x10>
 800980e:	2500      	movs	r5, #0
 8009810:	4628      	mov	r0, r5
 8009812:	bd38      	pop	{r3, r4, r5, pc}
 8009814:	b118      	cbz	r0, 800981e <_fflush_r+0x1a>
 8009816:	6a03      	ldr	r3, [r0, #32]
 8009818:	b90b      	cbnz	r3, 800981e <_fflush_r+0x1a>
 800981a:	f7ff faa1 	bl	8008d60 <__sinit>
 800981e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d0f3      	beq.n	800980e <_fflush_r+0xa>
 8009826:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009828:	07d0      	lsls	r0, r2, #31
 800982a:	d404      	bmi.n	8009836 <_fflush_r+0x32>
 800982c:	0599      	lsls	r1, r3, #22
 800982e:	d402      	bmi.n	8009836 <_fflush_r+0x32>
 8009830:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009832:	f7ff fb9a 	bl	8008f6a <__retarget_lock_acquire_recursive>
 8009836:	4628      	mov	r0, r5
 8009838:	4621      	mov	r1, r4
 800983a:	f7ff ff5f 	bl	80096fc <__sflush_r>
 800983e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009840:	07da      	lsls	r2, r3, #31
 8009842:	4605      	mov	r5, r0
 8009844:	d4e4      	bmi.n	8009810 <_fflush_r+0xc>
 8009846:	89a3      	ldrh	r3, [r4, #12]
 8009848:	059b      	lsls	r3, r3, #22
 800984a:	d4e1      	bmi.n	8009810 <_fflush_r+0xc>
 800984c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800984e:	f7ff fb8d 	bl	8008f6c <__retarget_lock_release_recursive>
 8009852:	e7dd      	b.n	8009810 <_fflush_r+0xc>

08009854 <__swbuf_r>:
 8009854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009856:	460e      	mov	r6, r1
 8009858:	4614      	mov	r4, r2
 800985a:	4605      	mov	r5, r0
 800985c:	b118      	cbz	r0, 8009866 <__swbuf_r+0x12>
 800985e:	6a03      	ldr	r3, [r0, #32]
 8009860:	b90b      	cbnz	r3, 8009866 <__swbuf_r+0x12>
 8009862:	f7ff fa7d 	bl	8008d60 <__sinit>
 8009866:	69a3      	ldr	r3, [r4, #24]
 8009868:	60a3      	str	r3, [r4, #8]
 800986a:	89a3      	ldrh	r3, [r4, #12]
 800986c:	071a      	lsls	r2, r3, #28
 800986e:	d501      	bpl.n	8009874 <__swbuf_r+0x20>
 8009870:	6923      	ldr	r3, [r4, #16]
 8009872:	b943      	cbnz	r3, 8009886 <__swbuf_r+0x32>
 8009874:	4621      	mov	r1, r4
 8009876:	4628      	mov	r0, r5
 8009878:	f000 f82a 	bl	80098d0 <__swsetup_r>
 800987c:	b118      	cbz	r0, 8009886 <__swbuf_r+0x32>
 800987e:	f04f 37ff 	mov.w	r7, #4294967295
 8009882:	4638      	mov	r0, r7
 8009884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009886:	6823      	ldr	r3, [r4, #0]
 8009888:	6922      	ldr	r2, [r4, #16]
 800988a:	1a98      	subs	r0, r3, r2
 800988c:	6963      	ldr	r3, [r4, #20]
 800988e:	b2f6      	uxtb	r6, r6
 8009890:	4283      	cmp	r3, r0
 8009892:	4637      	mov	r7, r6
 8009894:	dc05      	bgt.n	80098a2 <__swbuf_r+0x4e>
 8009896:	4621      	mov	r1, r4
 8009898:	4628      	mov	r0, r5
 800989a:	f7ff ffb3 	bl	8009804 <_fflush_r>
 800989e:	2800      	cmp	r0, #0
 80098a0:	d1ed      	bne.n	800987e <__swbuf_r+0x2a>
 80098a2:	68a3      	ldr	r3, [r4, #8]
 80098a4:	3b01      	subs	r3, #1
 80098a6:	60a3      	str	r3, [r4, #8]
 80098a8:	6823      	ldr	r3, [r4, #0]
 80098aa:	1c5a      	adds	r2, r3, #1
 80098ac:	6022      	str	r2, [r4, #0]
 80098ae:	701e      	strb	r6, [r3, #0]
 80098b0:	6962      	ldr	r2, [r4, #20]
 80098b2:	1c43      	adds	r3, r0, #1
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d004      	beq.n	80098c2 <__swbuf_r+0x6e>
 80098b8:	89a3      	ldrh	r3, [r4, #12]
 80098ba:	07db      	lsls	r3, r3, #31
 80098bc:	d5e1      	bpl.n	8009882 <__swbuf_r+0x2e>
 80098be:	2e0a      	cmp	r6, #10
 80098c0:	d1df      	bne.n	8009882 <__swbuf_r+0x2e>
 80098c2:	4621      	mov	r1, r4
 80098c4:	4628      	mov	r0, r5
 80098c6:	f7ff ff9d 	bl	8009804 <_fflush_r>
 80098ca:	2800      	cmp	r0, #0
 80098cc:	d0d9      	beq.n	8009882 <__swbuf_r+0x2e>
 80098ce:	e7d6      	b.n	800987e <__swbuf_r+0x2a>

080098d0 <__swsetup_r>:
 80098d0:	b538      	push	{r3, r4, r5, lr}
 80098d2:	4b29      	ldr	r3, [pc, #164]	@ (8009978 <__swsetup_r+0xa8>)
 80098d4:	4605      	mov	r5, r0
 80098d6:	6818      	ldr	r0, [r3, #0]
 80098d8:	460c      	mov	r4, r1
 80098da:	b118      	cbz	r0, 80098e4 <__swsetup_r+0x14>
 80098dc:	6a03      	ldr	r3, [r0, #32]
 80098de:	b90b      	cbnz	r3, 80098e4 <__swsetup_r+0x14>
 80098e0:	f7ff fa3e 	bl	8008d60 <__sinit>
 80098e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098e8:	0719      	lsls	r1, r3, #28
 80098ea:	d422      	bmi.n	8009932 <__swsetup_r+0x62>
 80098ec:	06da      	lsls	r2, r3, #27
 80098ee:	d407      	bmi.n	8009900 <__swsetup_r+0x30>
 80098f0:	2209      	movs	r2, #9
 80098f2:	602a      	str	r2, [r5, #0]
 80098f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098f8:	81a3      	strh	r3, [r4, #12]
 80098fa:	f04f 30ff 	mov.w	r0, #4294967295
 80098fe:	e033      	b.n	8009968 <__swsetup_r+0x98>
 8009900:	0758      	lsls	r0, r3, #29
 8009902:	d512      	bpl.n	800992a <__swsetup_r+0x5a>
 8009904:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009906:	b141      	cbz	r1, 800991a <__swsetup_r+0x4a>
 8009908:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800990c:	4299      	cmp	r1, r3
 800990e:	d002      	beq.n	8009916 <__swsetup_r+0x46>
 8009910:	4628      	mov	r0, r5
 8009912:	f7ff fb2d 	bl	8008f70 <_free_r>
 8009916:	2300      	movs	r3, #0
 8009918:	6363      	str	r3, [r4, #52]	@ 0x34
 800991a:	89a3      	ldrh	r3, [r4, #12]
 800991c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009920:	81a3      	strh	r3, [r4, #12]
 8009922:	2300      	movs	r3, #0
 8009924:	6063      	str	r3, [r4, #4]
 8009926:	6923      	ldr	r3, [r4, #16]
 8009928:	6023      	str	r3, [r4, #0]
 800992a:	89a3      	ldrh	r3, [r4, #12]
 800992c:	f043 0308 	orr.w	r3, r3, #8
 8009930:	81a3      	strh	r3, [r4, #12]
 8009932:	6923      	ldr	r3, [r4, #16]
 8009934:	b94b      	cbnz	r3, 800994a <__swsetup_r+0x7a>
 8009936:	89a3      	ldrh	r3, [r4, #12]
 8009938:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800993c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009940:	d003      	beq.n	800994a <__swsetup_r+0x7a>
 8009942:	4621      	mov	r1, r4
 8009944:	4628      	mov	r0, r5
 8009946:	f000 f84f 	bl	80099e8 <__smakebuf_r>
 800994a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800994e:	f013 0201 	ands.w	r2, r3, #1
 8009952:	d00a      	beq.n	800996a <__swsetup_r+0x9a>
 8009954:	2200      	movs	r2, #0
 8009956:	60a2      	str	r2, [r4, #8]
 8009958:	6962      	ldr	r2, [r4, #20]
 800995a:	4252      	negs	r2, r2
 800995c:	61a2      	str	r2, [r4, #24]
 800995e:	6922      	ldr	r2, [r4, #16]
 8009960:	b942      	cbnz	r2, 8009974 <__swsetup_r+0xa4>
 8009962:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009966:	d1c5      	bne.n	80098f4 <__swsetup_r+0x24>
 8009968:	bd38      	pop	{r3, r4, r5, pc}
 800996a:	0799      	lsls	r1, r3, #30
 800996c:	bf58      	it	pl
 800996e:	6962      	ldrpl	r2, [r4, #20]
 8009970:	60a2      	str	r2, [r4, #8]
 8009972:	e7f4      	b.n	800995e <__swsetup_r+0x8e>
 8009974:	2000      	movs	r0, #0
 8009976:	e7f7      	b.n	8009968 <__swsetup_r+0x98>
 8009978:	24000038 	.word	0x24000038

0800997c <_sbrk_r>:
 800997c:	b538      	push	{r3, r4, r5, lr}
 800997e:	4d06      	ldr	r5, [pc, #24]	@ (8009998 <_sbrk_r+0x1c>)
 8009980:	2300      	movs	r3, #0
 8009982:	4604      	mov	r4, r0
 8009984:	4608      	mov	r0, r1
 8009986:	602b      	str	r3, [r5, #0]
 8009988:	f7f8 fef2 	bl	8002770 <_sbrk>
 800998c:	1c43      	adds	r3, r0, #1
 800998e:	d102      	bne.n	8009996 <_sbrk_r+0x1a>
 8009990:	682b      	ldr	r3, [r5, #0]
 8009992:	b103      	cbz	r3, 8009996 <_sbrk_r+0x1a>
 8009994:	6023      	str	r3, [r4, #0]
 8009996:	bd38      	pop	{r3, r4, r5, pc}
 8009998:	240003ac 	.word	0x240003ac

0800999c <__swhatbuf_r>:
 800999c:	b570      	push	{r4, r5, r6, lr}
 800999e:	460c      	mov	r4, r1
 80099a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099a4:	2900      	cmp	r1, #0
 80099a6:	b096      	sub	sp, #88	@ 0x58
 80099a8:	4615      	mov	r5, r2
 80099aa:	461e      	mov	r6, r3
 80099ac:	da0d      	bge.n	80099ca <__swhatbuf_r+0x2e>
 80099ae:	89a3      	ldrh	r3, [r4, #12]
 80099b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80099b4:	f04f 0100 	mov.w	r1, #0
 80099b8:	bf14      	ite	ne
 80099ba:	2340      	movne	r3, #64	@ 0x40
 80099bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80099c0:	2000      	movs	r0, #0
 80099c2:	6031      	str	r1, [r6, #0]
 80099c4:	602b      	str	r3, [r5, #0]
 80099c6:	b016      	add	sp, #88	@ 0x58
 80099c8:	bd70      	pop	{r4, r5, r6, pc}
 80099ca:	466a      	mov	r2, sp
 80099cc:	f000 f848 	bl	8009a60 <_fstat_r>
 80099d0:	2800      	cmp	r0, #0
 80099d2:	dbec      	blt.n	80099ae <__swhatbuf_r+0x12>
 80099d4:	9901      	ldr	r1, [sp, #4]
 80099d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80099da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80099de:	4259      	negs	r1, r3
 80099e0:	4159      	adcs	r1, r3
 80099e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80099e6:	e7eb      	b.n	80099c0 <__swhatbuf_r+0x24>

080099e8 <__smakebuf_r>:
 80099e8:	898b      	ldrh	r3, [r1, #12]
 80099ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099ec:	079d      	lsls	r5, r3, #30
 80099ee:	4606      	mov	r6, r0
 80099f0:	460c      	mov	r4, r1
 80099f2:	d507      	bpl.n	8009a04 <__smakebuf_r+0x1c>
 80099f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80099f8:	6023      	str	r3, [r4, #0]
 80099fa:	6123      	str	r3, [r4, #16]
 80099fc:	2301      	movs	r3, #1
 80099fe:	6163      	str	r3, [r4, #20]
 8009a00:	b003      	add	sp, #12
 8009a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a04:	ab01      	add	r3, sp, #4
 8009a06:	466a      	mov	r2, sp
 8009a08:	f7ff ffc8 	bl	800999c <__swhatbuf_r>
 8009a0c:	9f00      	ldr	r7, [sp, #0]
 8009a0e:	4605      	mov	r5, r0
 8009a10:	4639      	mov	r1, r7
 8009a12:	4630      	mov	r0, r6
 8009a14:	f7ff fb18 	bl	8009048 <_malloc_r>
 8009a18:	b948      	cbnz	r0, 8009a2e <__smakebuf_r+0x46>
 8009a1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a1e:	059a      	lsls	r2, r3, #22
 8009a20:	d4ee      	bmi.n	8009a00 <__smakebuf_r+0x18>
 8009a22:	f023 0303 	bic.w	r3, r3, #3
 8009a26:	f043 0302 	orr.w	r3, r3, #2
 8009a2a:	81a3      	strh	r3, [r4, #12]
 8009a2c:	e7e2      	b.n	80099f4 <__smakebuf_r+0xc>
 8009a2e:	89a3      	ldrh	r3, [r4, #12]
 8009a30:	6020      	str	r0, [r4, #0]
 8009a32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a36:	81a3      	strh	r3, [r4, #12]
 8009a38:	9b01      	ldr	r3, [sp, #4]
 8009a3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009a3e:	b15b      	cbz	r3, 8009a58 <__smakebuf_r+0x70>
 8009a40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a44:	4630      	mov	r0, r6
 8009a46:	f000 f81d 	bl	8009a84 <_isatty_r>
 8009a4a:	b128      	cbz	r0, 8009a58 <__smakebuf_r+0x70>
 8009a4c:	89a3      	ldrh	r3, [r4, #12]
 8009a4e:	f023 0303 	bic.w	r3, r3, #3
 8009a52:	f043 0301 	orr.w	r3, r3, #1
 8009a56:	81a3      	strh	r3, [r4, #12]
 8009a58:	89a3      	ldrh	r3, [r4, #12]
 8009a5a:	431d      	orrs	r5, r3
 8009a5c:	81a5      	strh	r5, [r4, #12]
 8009a5e:	e7cf      	b.n	8009a00 <__smakebuf_r+0x18>

08009a60 <_fstat_r>:
 8009a60:	b538      	push	{r3, r4, r5, lr}
 8009a62:	4d07      	ldr	r5, [pc, #28]	@ (8009a80 <_fstat_r+0x20>)
 8009a64:	2300      	movs	r3, #0
 8009a66:	4604      	mov	r4, r0
 8009a68:	4608      	mov	r0, r1
 8009a6a:	4611      	mov	r1, r2
 8009a6c:	602b      	str	r3, [r5, #0]
 8009a6e:	f7f8 fe56 	bl	800271e <_fstat>
 8009a72:	1c43      	adds	r3, r0, #1
 8009a74:	d102      	bne.n	8009a7c <_fstat_r+0x1c>
 8009a76:	682b      	ldr	r3, [r5, #0]
 8009a78:	b103      	cbz	r3, 8009a7c <_fstat_r+0x1c>
 8009a7a:	6023      	str	r3, [r4, #0]
 8009a7c:	bd38      	pop	{r3, r4, r5, pc}
 8009a7e:	bf00      	nop
 8009a80:	240003ac 	.word	0x240003ac

08009a84 <_isatty_r>:
 8009a84:	b538      	push	{r3, r4, r5, lr}
 8009a86:	4d06      	ldr	r5, [pc, #24]	@ (8009aa0 <_isatty_r+0x1c>)
 8009a88:	2300      	movs	r3, #0
 8009a8a:	4604      	mov	r4, r0
 8009a8c:	4608      	mov	r0, r1
 8009a8e:	602b      	str	r3, [r5, #0]
 8009a90:	f7f8 fe55 	bl	800273e <_isatty>
 8009a94:	1c43      	adds	r3, r0, #1
 8009a96:	d102      	bne.n	8009a9e <_isatty_r+0x1a>
 8009a98:	682b      	ldr	r3, [r5, #0]
 8009a9a:	b103      	cbz	r3, 8009a9e <_isatty_r+0x1a>
 8009a9c:	6023      	str	r3, [r4, #0]
 8009a9e:	bd38      	pop	{r3, r4, r5, pc}
 8009aa0:	240003ac 	.word	0x240003ac

08009aa4 <_init>:
 8009aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aa6:	bf00      	nop
 8009aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aaa:	bc08      	pop	{r3}
 8009aac:	469e      	mov	lr, r3
 8009aae:	4770      	bx	lr

08009ab0 <_fini>:
 8009ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ab2:	bf00      	nop
 8009ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ab6:	bc08      	pop	{r3}
 8009ab8:	469e      	mov	lr, r3
 8009aba:	4770      	bx	lr
