
STM_to_CC1201.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f0c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001cc8  080081ac  080081ac  000091ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009e74  08009e74  0000ae74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009e7c  08009e7c  0000ae7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009e80  08009e80  0000ae80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  24000000  08009e84  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000334  24000088  08009f0c  0000b088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240003bc  08009f0c  0000b3bc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b088  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015b9f  00000000  00000000  0000b0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c90  00000000  00000000  00020c55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f28  00000000  00000000  000238e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b9c  00000000  00000000  00024810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000384e5  00000000  00000000  000253ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016416  00000000  00000000  0005d891  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015eecc  00000000  00000000  00073ca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d2b73  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000045e8  00000000  00000000  001d2bb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000051  00000000  00000000  001d71a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008194 	.word	0x08008194

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	08008194 	.word	0x08008194

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <CC1201_Nop>:
{
    return CC1201_SendStrobe(CC1201_STROBE_WOR_RESET, status_byte);
}

HAL_StatusTypeDef CC1201_Nop(uint8_t *status_byte)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    printf("[DEBUG] Entered CC1201_Nop function\n\r");
 80006b4:	4809      	ldr	r0, [pc, #36]	@ (80006dc <CC1201_Nop+0x30>)
 80006b6:	f006 ff01 	bl	80074bc <iprintf>
    HAL_StatusTypeDef result = CC1201_SendStrobe(CC1201_STROBE_NOP, status_byte);
 80006ba:	6879      	ldr	r1, [r7, #4]
 80006bc:	203d      	movs	r0, #61	@ 0x3d
 80006be:	f000 f811 	bl	80006e4 <CC1201_SendStrobe>
 80006c2:	4603      	mov	r3, r0
 80006c4:	73fb      	strb	r3, [r7, #15]
    printf("[DEBUG] CC1201_Nop about to return: %d\n\r", result);
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	4619      	mov	r1, r3
 80006ca:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <CC1201_Nop+0x34>)
 80006cc:	f006 fef6 	bl	80074bc <iprintf>
    return result;
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	08008208 	.word	0x08008208
 80006e0:	08008230 	.word	0x08008230

080006e4 <CC1201_SendStrobe>:
 * @param status_byte Pointer to a uint8_t where the status byte received from the CC1201 will be stored.
 *                    Can be NULL if the status byte is not needed.
 * @return HAL_StatusTypeDef Status of the SPI transmission (HAL_OK on success).
 */
HAL_StatusTypeDef CC1201_SendStrobe(uint8_t strobe_command, uint8_t *status_byte)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af02      	add	r7, sp, #8
 80006ea:	4603      	mov	r3, r0
 80006ec:	6039      	str	r1, [r7, #0]
 80006ee:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;
    uint8_t rx_data;

    printf("    [DEBUG] SendStrobe called with command 0x%02X\n\r", strobe_command);
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	4619      	mov	r1, r3
 80006f4:	4830      	ldr	r0, [pc, #192]	@ (80007b8 <CC1201_SendStrobe+0xd4>)
 80006f6:	f006 fee1 	bl	80074bc <iprintf>

    // Debug: Check CS pin before transaction
    printf("  Strobe 0x%02X: CS before=", strobe_command);
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	4619      	mov	r1, r3
 80006fe:	482f      	ldr	r0, [pc, #188]	@ (80007bc <CC1201_SendStrobe+0xd8>)
 8000700:	f006 fedc 	bl	80074bc <iprintf>
    printf("%s", HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN) == GPIO_PIN_SET ? "HIGH" : "LOW");
 8000704:	2110      	movs	r1, #16
 8000706:	482e      	ldr	r0, [pc, #184]	@ (80007c0 <CC1201_SendStrobe+0xdc>)
 8000708:	f001 ffac 	bl	8002664 <HAL_GPIO_ReadPin>
 800070c:	4603      	mov	r3, r0
 800070e:	2b01      	cmp	r3, #1
 8000710:	d101      	bne.n	8000716 <CC1201_SendStrobe+0x32>
 8000712:	4b2c      	ldr	r3, [pc, #176]	@ (80007c4 <CC1201_SendStrobe+0xe0>)
 8000714:	e000      	b.n	8000718 <CC1201_SendStrobe+0x34>
 8000716:	4b2c      	ldr	r3, [pc, #176]	@ (80007c8 <CC1201_SendStrobe+0xe4>)
 8000718:	4619      	mov	r1, r3
 800071a:	482c      	ldr	r0, [pc, #176]	@ (80007cc <CC1201_SendStrobe+0xe8>)
 800071c:	f006 fece 	bl	80074bc <iprintf>

    printf("    [DEBUG] About to pull CS low...\n\r");
 8000720:	482b      	ldr	r0, [pc, #172]	@ (80007d0 <CC1201_SendStrobe+0xec>)
 8000722:	f006 fecb 	bl	80074bc <iprintf>
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET); // Pull CS low
 8000726:	2200      	movs	r2, #0
 8000728:	2110      	movs	r1, #16
 800072a:	4825      	ldr	r0, [pc, #148]	@ (80007c0 <CC1201_SendStrobe+0xdc>)
 800072c:	f001 ffb2 	bl	8002694 <HAL_GPIO_WritePin>
    
    // Debug: Check CS pin during transaction
    printf(", CS during=");
 8000730:	4828      	ldr	r0, [pc, #160]	@ (80007d4 <CC1201_SendStrobe+0xf0>)
 8000732:	f006 fec3 	bl	80074bc <iprintf>
    printf("%s", HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN) == GPIO_PIN_SET ? "HIGH" : "LOW");
 8000736:	2110      	movs	r1, #16
 8000738:	4821      	ldr	r0, [pc, #132]	@ (80007c0 <CC1201_SendStrobe+0xdc>)
 800073a:	f001 ff93 	bl	8002664 <HAL_GPIO_ReadPin>
 800073e:	4603      	mov	r3, r0
 8000740:	2b01      	cmp	r3, #1
 8000742:	d101      	bne.n	8000748 <CC1201_SendStrobe+0x64>
 8000744:	4b1f      	ldr	r3, [pc, #124]	@ (80007c4 <CC1201_SendStrobe+0xe0>)
 8000746:	e000      	b.n	800074a <CC1201_SendStrobe+0x66>
 8000748:	4b1f      	ldr	r3, [pc, #124]	@ (80007c8 <CC1201_SendStrobe+0xe4>)
 800074a:	4619      	mov	r1, r3
 800074c:	481f      	ldr	r0, [pc, #124]	@ (80007cc <CC1201_SendStrobe+0xe8>)
 800074e:	f006 feb5 	bl	80074bc <iprintf>
    
    printf("    [DEBUG] About to start SPI transaction...\n\r");
 8000752:	4821      	ldr	r0, [pc, #132]	@ (80007d8 <CC1201_SendStrobe+0xf4>)
 8000754:	f006 feb2 	bl	80074bc <iprintf>
    // Small delay to ensure CS is stable
    HAL_Delay(1);
 8000758:	2001      	movs	r0, #1
 800075a:	f001 f971 	bl	8001a40 <HAL_Delay>

    status = HAL_SPI_TransmitReceive(&CC1201_SPI_HANDLE, &strobe_command, &rx_data, 1, HAL_MAX_DELAY); // Transmit strobe command and receive status
 800075e:	f107 020e 	add.w	r2, r7, #14
 8000762:	1df9      	adds	r1, r7, #7
 8000764:	f04f 33ff 	mov.w	r3, #4294967295
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	2301      	movs	r3, #1
 800076c:	481b      	ldr	r0, [pc, #108]	@ (80007dc <CC1201_SendStrobe+0xf8>)
 800076e:	f004 ff35 	bl	80055dc <HAL_SPI_TransmitReceive>
 8000772:	4603      	mov	r3, r0
 8000774:	73fb      	strb	r3, [r7, #15]

    printf("    [DEBUG] SPI transaction complete, pulling CS high...\n\r");
 8000776:	481a      	ldr	r0, [pc, #104]	@ (80007e0 <CC1201_SendStrobe+0xfc>)
 8000778:	f006 fea0 	bl	80074bc <iprintf>
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET); // Pull CS high
 800077c:	2201      	movs	r2, #1
 800077e:	2110      	movs	r1, #16
 8000780:	480f      	ldr	r0, [pc, #60]	@ (80007c0 <CC1201_SendStrobe+0xdc>)
 8000782:	f001 ff87 	bl	8002694 <HAL_GPIO_WritePin>

    // Debug output
    printf(", CS after=HIGH, RX=0x%02X, HAL=%d\n\r", rx_data, status);
 8000786:	7bbb      	ldrb	r3, [r7, #14]
 8000788:	4619      	mov	r1, r3
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	461a      	mov	r2, r3
 800078e:	4815      	ldr	r0, [pc, #84]	@ (80007e4 <CC1201_SendStrobe+0x100>)
 8000790:	f006 fe94 	bl	80074bc <iprintf>
    printf("    [DEBUG] SendStrobe complete\n\r");
 8000794:	4814      	ldr	r0, [pc, #80]	@ (80007e8 <CC1201_SendStrobe+0x104>)
 8000796:	f006 fe91 	bl	80074bc <iprintf>

    if (status == HAL_OK) {
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d105      	bne.n	80007ac <CC1201_SendStrobe+0xc8>
        if (status_byte != NULL) {
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d002      	beq.n	80007ac <CC1201_SendStrobe+0xc8>
            *status_byte = rx_data;
 80007a6:	7bba      	ldrb	r2, [r7, #14]
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	701a      	strb	r2, [r3, #0]
        }
    }
    return status;
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	0800825c 	.word	0x0800825c
 80007bc:	08008290 	.word	0x08008290
 80007c0:	58021000 	.word	0x58021000
 80007c4:	080082ac 	.word	0x080082ac
 80007c8:	080082b4 	.word	0x080082b4
 80007cc:	080082b8 	.word	0x080082b8
 80007d0:	080082bc 	.word	0x080082bc
 80007d4:	080082e4 	.word	0x080082e4
 80007d8:	080082f4 	.word	0x080082f4
 80007dc:	240000b8 	.word	0x240000b8
 80007e0:	08008324 	.word	0x08008324
 80007e4:	08008360 	.word	0x08008360
 80007e8:	08008388 	.word	0x08008388

080007ec <test_GPIO_pins>:
    printf("\n🎉 COMPREHENSIVE TEST SEQUENCE COMPLETE! 🎉\n\r");
    printf("==============================================\n\r");
}

// Function to test GPIO pin states
void test_GPIO_pins(void) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
    printf("=== GPIO Pin Test ===\n\r");
 80007f2:	4831      	ldr	r0, [pc, #196]	@ (80008b8 <test_GPIO_pins+0xcc>)
 80007f4:	f006 fe62 	bl	80074bc <iprintf>
    
    // Test CS pin
    printf("CS Pin (PE4): ");
 80007f8:	4830      	ldr	r0, [pc, #192]	@ (80008bc <test_GPIO_pins+0xd0>)
 80007fa:	f006 fe5f 	bl	80074bc <iprintf>
    GPIO_PinState cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 80007fe:	2110      	movs	r1, #16
 8000800:	482f      	ldr	r0, [pc, #188]	@ (80008c0 <test_GPIO_pins+0xd4>)
 8000802:	f001 ff2f 	bl	8002664 <HAL_GPIO_ReadPin>
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
    printf("%s\n\r", cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	2b01      	cmp	r3, #1
 800080e:	d101      	bne.n	8000814 <test_GPIO_pins+0x28>
 8000810:	4b2c      	ldr	r3, [pc, #176]	@ (80008c4 <test_GPIO_pins+0xd8>)
 8000812:	e000      	b.n	8000816 <test_GPIO_pins+0x2a>
 8000814:	4b2c      	ldr	r3, [pc, #176]	@ (80008c8 <test_GPIO_pins+0xdc>)
 8000816:	4619      	mov	r1, r3
 8000818:	482c      	ldr	r0, [pc, #176]	@ (80008cc <test_GPIO_pins+0xe0>)
 800081a:	f006 fe4f 	bl	80074bc <iprintf>
    
    // Toggle CS pin to test control
    printf("Toggling CS pin...\n\r");
 800081e:	482c      	ldr	r0, [pc, #176]	@ (80008d0 <test_GPIO_pins+0xe4>)
 8000820:	f006 fe4c 	bl	80074bc <iprintf>
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_RESET);
 8000824:	2200      	movs	r2, #0
 8000826:	2110      	movs	r1, #16
 8000828:	4825      	ldr	r0, [pc, #148]	@ (80008c0 <test_GPIO_pins+0xd4>)
 800082a:	f001 ff33 	bl	8002694 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800082e:	2064      	movs	r0, #100	@ 0x64
 8000830:	f001 f906 	bl	8001a40 <HAL_Delay>
    cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 8000834:	2110      	movs	r1, #16
 8000836:	4822      	ldr	r0, [pc, #136]	@ (80008c0 <test_GPIO_pins+0xd4>)
 8000838:	f001 ff14 	bl	8002664 <HAL_GPIO_ReadPin>
 800083c:	4603      	mov	r3, r0
 800083e:	71fb      	strb	r3, [r7, #7]
    printf("CS Pin after LOW: %s\n\r", cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d101      	bne.n	800084a <test_GPIO_pins+0x5e>
 8000846:	4b1f      	ldr	r3, [pc, #124]	@ (80008c4 <test_GPIO_pins+0xd8>)
 8000848:	e000      	b.n	800084c <test_GPIO_pins+0x60>
 800084a:	4b1f      	ldr	r3, [pc, #124]	@ (80008c8 <test_GPIO_pins+0xdc>)
 800084c:	4619      	mov	r1, r3
 800084e:	4821      	ldr	r0, [pc, #132]	@ (80008d4 <test_GPIO_pins+0xe8>)
 8000850:	f006 fe34 	bl	80074bc <iprintf>
    
    HAL_GPIO_WritePin(CC1201_CS_PORT, CC1201_CS_PIN, GPIO_PIN_SET);
 8000854:	2201      	movs	r2, #1
 8000856:	2110      	movs	r1, #16
 8000858:	4819      	ldr	r0, [pc, #100]	@ (80008c0 <test_GPIO_pins+0xd4>)
 800085a:	f001 ff1b 	bl	8002694 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800085e:	2064      	movs	r0, #100	@ 0x64
 8000860:	f001 f8ee 	bl	8001a40 <HAL_Delay>
    cs_state = HAL_GPIO_ReadPin(CC1201_CS_PORT, CC1201_CS_PIN);
 8000864:	2110      	movs	r1, #16
 8000866:	4816      	ldr	r0, [pc, #88]	@ (80008c0 <test_GPIO_pins+0xd4>)
 8000868:	f001 fefc 	bl	8002664 <HAL_GPIO_ReadPin>
 800086c:	4603      	mov	r3, r0
 800086e:	71fb      	strb	r3, [r7, #7]
    printf("CS Pin after HIGH: %s\n\r", cs_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d101      	bne.n	800087a <test_GPIO_pins+0x8e>
 8000876:	4b13      	ldr	r3, [pc, #76]	@ (80008c4 <test_GPIO_pins+0xd8>)
 8000878:	e000      	b.n	800087c <test_GPIO_pins+0x90>
 800087a:	4b13      	ldr	r3, [pc, #76]	@ (80008c8 <test_GPIO_pins+0xdc>)
 800087c:	4619      	mov	r1, r3
 800087e:	4816      	ldr	r0, [pc, #88]	@ (80008d8 <test_GPIO_pins+0xec>)
 8000880:	f006 fe1c 	bl	80074bc <iprintf>
    
    // Test INT pin
    printf("INT Pin (PD4): ");
 8000884:	4815      	ldr	r0, [pc, #84]	@ (80008dc <test_GPIO_pins+0xf0>)
 8000886:	f006 fe19 	bl	80074bc <iprintf>
    GPIO_PinState int_state = HAL_GPIO_ReadPin(CC1201_INT_PORT, CC1201_INT_PIN);
 800088a:	2110      	movs	r1, #16
 800088c:	4814      	ldr	r0, [pc, #80]	@ (80008e0 <test_GPIO_pins+0xf4>)
 800088e:	f001 fee9 	bl	8002664 <HAL_GPIO_ReadPin>
 8000892:	4603      	mov	r3, r0
 8000894:	71bb      	strb	r3, [r7, #6]
    printf("%s\n\r", int_state == GPIO_PIN_SET ? "HIGH" : "LOW");
 8000896:	79bb      	ldrb	r3, [r7, #6]
 8000898:	2b01      	cmp	r3, #1
 800089a:	d101      	bne.n	80008a0 <test_GPIO_pins+0xb4>
 800089c:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <test_GPIO_pins+0xd8>)
 800089e:	e000      	b.n	80008a2 <test_GPIO_pins+0xb6>
 80008a0:	4b09      	ldr	r3, [pc, #36]	@ (80008c8 <test_GPIO_pins+0xdc>)
 80008a2:	4619      	mov	r1, r3
 80008a4:	4809      	ldr	r0, [pc, #36]	@ (80008cc <test_GPIO_pins+0xe0>)
 80008a6:	f006 fe09 	bl	80074bc <iprintf>
    
    printf("===================\n\r");
 80008aa:	480e      	ldr	r0, [pc, #56]	@ (80008e4 <test_GPIO_pins+0xf8>)
 80008ac:	f006 fe06 	bl	80074bc <iprintf>
}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	08009394 	.word	0x08009394
 80008bc:	080093ac 	.word	0x080093ac
 80008c0:	58021000 	.word	0x58021000
 80008c4:	080093bc 	.word	0x080093bc
 80008c8:	080093c4 	.word	0x080093c4
 80008cc:	080093c8 	.word	0x080093c8
 80008d0:	080093d0 	.word	0x080093d0
 80008d4:	080093e8 	.word	0x080093e8
 80008d8:	08009400 	.word	0x08009400
 80008dc:	08009418 	.word	0x08009418
 80008e0:	58020c00 	.word	0x58020c00
 80008e4:	08009428 	.word	0x08009428

080008e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80008ee:	f000 fa99 	bl	8000e24 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f2:	f001 f813 	bl	800191c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f6:	f000 f8f1 	bl	8000adc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fa:	f000 fa19 	bl	8000d30 <MX_GPIO_Init>
  MX_SPI4_Init();
 80008fe:	f000 f9c1 	bl	8000c84 <MX_SPI4_Init>
  MX_SPI2_Init();
 8000902:	f000 f969 	bl	8000bd8 <MX_SPI2_Init>
  // CC1201 testing will be done after UART is initialized

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000906:	2000      	movs	r0, #0
 8000908:	f000 fdb2 	bl	8001470 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 800090c:	2001      	movs	r0, #1
 800090e:	f000 fdaf 	bl	8001470 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000912:	2002      	movs	r0, #2
 8000914:	f000 fdac 	bl	8001470 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000918:	2101      	movs	r1, #1
 800091a:	2000      	movs	r0, #0
 800091c:	f000 fe9c 	bl	8001658 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000920:	4b5e      	ldr	r3, [pc, #376]	@ (8000a9c <main+0x1b4>)
 8000922:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000926:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000928:	4b5c      	ldr	r3, [pc, #368]	@ (8000a9c <main+0x1b4>)
 800092a:	2200      	movs	r2, #0
 800092c:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800092e:	4b5b      	ldr	r3, [pc, #364]	@ (8000a9c <main+0x1b4>)
 8000930:	2200      	movs	r2, #0
 8000932:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000934:	4b59      	ldr	r3, [pc, #356]	@ (8000a9c <main+0x1b4>)
 8000936:	2200      	movs	r2, #0
 8000938:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800093a:	4b58      	ldr	r3, [pc, #352]	@ (8000a9c <main+0x1b4>)
 800093c:	2200      	movs	r2, #0
 800093e:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000940:	4956      	ldr	r1, [pc, #344]	@ (8000a9c <main+0x1b4>)
 8000942:	2000      	movs	r0, #0
 8000944:	f000 ff0c 	bl	8001760 <BSP_COM_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <main+0x6a>
  {
    Error_Handler();
 800094e:	f000 faa9 	bl	8000ea4 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8000952:	4853      	ldr	r0, [pc, #332]	@ (8000aa0 <main+0x1b8>)
 8000954:	f006 fdb2 	bl	80074bc <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8000958:	2000      	movs	r0, #0
 800095a:	f000 fdff 	bl	800155c <BSP_LED_On>
  BSP_LED_On(LED_YELLOW);
 800095e:	2001      	movs	r0, #1
 8000960:	f000 fdfc 	bl	800155c <BSP_LED_On>
  BSP_LED_On(LED_RED);
 8000964:	2002      	movs	r0, #2
 8000966:	f000 fdf9 	bl	800155c <BSP_LED_On>
  
  // Now that UART is initialized, start CC1201 testing
  printf("\n=== CC1201 COMMUNICATION SYSTEM STARTUP ===\n\r");
 800096a:	484e      	ldr	r0, [pc, #312]	@ (8000aa4 <main+0x1bc>)
 800096c:	f006 fda6 	bl	80074bc <iprintf>
  
  // Test GPIO pins first
  test_GPIO_pins();
 8000970:	f7ff ff3c 	bl	80007ec <test_GPIO_pins>
  
  // Simple test instead of full initialization
  printf("Starting simple CC1201 test...\n\r");
 8000974:	484c      	ldr	r0, [pc, #304]	@ (8000aa8 <main+0x1c0>)
 8000976:	f006 fda1 	bl	80074bc <iprintf>
  HAL_Delay(100);
 800097a:	2064      	movs	r0, #100	@ 0x64
 800097c:	f001 f860 	bl	8001a40 <HAL_Delay>
  
  printf("Test 1: Creating status byte variable...\n\r");
 8000980:	484a      	ldr	r0, [pc, #296]	@ (8000aac <main+0x1c4>)
 8000982:	f006 fd9b 	bl	80074bc <iprintf>
  uint8_t test_status = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	713b      	strb	r3, [r7, #4]
  
  printf("Test 2: About to call CC1201_Nop...\n\r");
 800098a:	4849      	ldr	r0, [pc, #292]	@ (8000ab0 <main+0x1c8>)
 800098c:	f006 fd96 	bl	80074bc <iprintf>
  HAL_StatusTypeDef nop_result = CC1201_Nop(&test_status);
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff fe8a 	bl	80006ac <CC1201_Nop>
 8000998:	4603      	mov	r3, r0
 800099a:	71fb      	strb	r3, [r7, #7]
  
  printf("Test 3: NOP returned - HAL: %d, Status: 0x%02X\n\r", nop_result, test_status);
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	793a      	ldrb	r2, [r7, #4]
 80009a0:	4619      	mov	r1, r3
 80009a2:	4844      	ldr	r0, [pc, #272]	@ (8000ab4 <main+0x1cc>)
 80009a4:	f006 fd8a 	bl	80074bc <iprintf>
  
  if (nop_result == HAL_OK) {
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d109      	bne.n	80009c2 <main+0xda>
      printf("Basic CC1201 communication working!\n\r");
 80009ae:	4842      	ldr	r0, [pc, #264]	@ (8000ab8 <main+0x1d0>)
 80009b0:	f006 fd84 	bl	80074bc <iprintf>
      BSP_LED_Off(LED_RED);
 80009b4:	2002      	movs	r0, #2
 80009b6:	f000 fdfb 	bl	80015b0 <BSP_LED_Off>
      BSP_LED_On(LED_GREEN);
 80009ba:	2000      	movs	r0, #0
 80009bc:	f000 fdce 	bl	800155c <BSP_LED_On>
 80009c0:	e008      	b.n	80009d4 <main+0xec>
  } else {
      printf("CC1201 communication failed!\n\r");
 80009c2:	483e      	ldr	r0, [pc, #248]	@ (8000abc <main+0x1d4>)
 80009c4:	f006 fd7a 	bl	80074bc <iprintf>
      BSP_LED_Off(LED_GREEN);
 80009c8:	2000      	movs	r0, #0
 80009ca:	f000 fdf1 	bl	80015b0 <BSP_LED_Off>
      BSP_LED_On(LED_RED);
 80009ce:	2002      	movs	r0, #2
 80009d0:	f000 fdc4 	bl	800155c <BSP_LED_On>

  /* USER CODE END BSP */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t last_test = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]
  uint32_t test_counter = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	60bb      	str	r3, [r7, #8]
  
  printf("\n🚀 STARTING SIMPLE CC1201 TEST MODE 🚀\n\r");
 80009dc:	4838      	ldr	r0, [pc, #224]	@ (8000ac0 <main+0x1d8>)
 80009de:	f006 fd6d 	bl	80074bc <iprintf>
  
  while (1)
  {

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 80009e2:	4b38      	ldr	r3, [pc, #224]	@ (8000ac4 <main+0x1dc>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d11c      	bne.n	8000a24 <main+0x13c>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 80009ea:	4b36      	ldr	r3, [pc, #216]	@ (8000ac4 <main+0x1dc>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle leds ---- */
      BSP_LED_Toggle(LED_GREEN);
 80009f0:	2000      	movs	r0, #0
 80009f2:	f000 fe07 	bl	8001604 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_YELLOW);
 80009f6:	2001      	movs	r0, #1
 80009f8:	f000 fe04 	bl	8001604 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_RED);
 80009fc:	2002      	movs	r0, #2
 80009fe:	f000 fe01 	bl	8001604 <BSP_LED_Toggle>

      /* ..... Perform your action ..... */
      printf("\n[BUTTON] Manual test triggered...\n\r");
 8000a02:	4831      	ldr	r0, [pc, #196]	@ (8000ac8 <main+0x1e0>)
 8000a04:	f006 fd5a 	bl	80074bc <iprintf>
      uint8_t button_status = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef button_result = CC1201_Nop(&button_status);
 8000a0c:	1cfb      	adds	r3, r7, #3
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fe4c 	bl	80006ac <CC1201_Nop>
 8000a14:	4603      	mov	r3, r0
 8000a16:	71bb      	strb	r3, [r7, #6]
      printf("Button test - HAL: %d, Status: 0x%02X\n\r", button_result, button_status);
 8000a18:	79bb      	ldrb	r3, [r7, #6]
 8000a1a:	78fa      	ldrb	r2, [r7, #3]
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	482b      	ldr	r0, [pc, #172]	@ (8000acc <main+0x1e4>)
 8000a20:	f006 fd4c 	bl	80074bc <iprintf>
    }
    
    // Simple periodic test every 5 seconds
    if (HAL_GetTick() - last_test > 5000) {
 8000a24:	f001 f800 	bl	8001a28 <HAL_GetTick>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d92e      	bls.n	8000a94 <main+0x1ac>
      printf("[%lu] Test %lu: ", HAL_GetTick(), ++test_counter);
 8000a36:	f000 fff7 	bl	8001a28 <HAL_GetTick>
 8000a3a:	4601      	mov	r1, r0
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	4822      	ldr	r0, [pc, #136]	@ (8000ad0 <main+0x1e8>)
 8000a46:	f006 fd39 	bl	80074bc <iprintf>
      
      uint8_t status_byte = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	70bb      	strb	r3, [r7, #2]
      HAL_StatusTypeDef hal_status = CC1201_Nop(&status_byte);
 8000a4e:	1cbb      	adds	r3, r7, #2
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff fe2b 	bl	80006ac <CC1201_Nop>
 8000a56:	4603      	mov	r3, r0
 8000a58:	717b      	strb	r3, [r7, #5]
      
      if (hal_status == HAL_OK) {
 8000a5a:	797b      	ldrb	r3, [r7, #5]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d10b      	bne.n	8000a78 <main+0x190>
        printf("OK - Status: 0x%02X\n\r", status_byte);
 8000a60:	78bb      	ldrb	r3, [r7, #2]
 8000a62:	4619      	mov	r1, r3
 8000a64:	481b      	ldr	r0, [pc, #108]	@ (8000ad4 <main+0x1ec>)
 8000a66:	f006 fd29 	bl	80074bc <iprintf>
        BSP_LED_On(LED_GREEN);
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f000 fd76 	bl	800155c <BSP_LED_On>
        BSP_LED_Off(LED_RED);
 8000a70:	2002      	movs	r0, #2
 8000a72:	f000 fd9d 	bl	80015b0 <BSP_LED_Off>
 8000a76:	e00a      	b.n	8000a8e <main+0x1a6>
      } else {
        printf("FAILED - HAL: %d\n\r", hal_status);
 8000a78:	797b      	ldrb	r3, [r7, #5]
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4816      	ldr	r0, [pc, #88]	@ (8000ad8 <main+0x1f0>)
 8000a7e:	f006 fd1d 	bl	80074bc <iprintf>
        BSP_LED_Off(LED_GREEN);
 8000a82:	2000      	movs	r0, #0
 8000a84:	f000 fd94 	bl	80015b0 <BSP_LED_Off>
        BSP_LED_On(LED_RED);
 8000a88:	2002      	movs	r0, #2
 8000a8a:	f000 fd67 	bl	800155c <BSP_LED_On>
      }
      
      last_test = HAL_GetTick();
 8000a8e:	f000 ffcb 	bl	8001a28 <HAL_GetTick>
 8000a92:	60f8      	str	r0, [r7, #12]
    }
    
    HAL_Delay(100);
 8000a94:	2064      	movs	r0, #100	@ 0x64
 8000a96:	f000 ffd3 	bl	8001a40 <HAL_Delay>
    if (BspButtonState == BUTTON_PRESSED)
 8000a9a:	e7a2      	b.n	80009e2 <main+0xfa>
 8000a9c:	240000a4 	.word	0x240000a4
 8000aa0:	08009b8c 	.word	0x08009b8c
 8000aa4:	08009ba8 	.word	0x08009ba8
 8000aa8:	08009bd8 	.word	0x08009bd8
 8000aac:	08009bfc 	.word	0x08009bfc
 8000ab0:	08009c28 	.word	0x08009c28
 8000ab4:	08009c50 	.word	0x08009c50
 8000ab8:	08009c84 	.word	0x08009c84
 8000abc:	08009cac 	.word	0x08009cac
 8000ac0:	08009ccc 	.word	0x08009ccc
 8000ac4:	240000b4 	.word	0x240000b4
 8000ac8:	08009cfc 	.word	0x08009cfc
 8000acc:	08009d24 	.word	0x08009d24
 8000ad0:	08009d4c 	.word	0x08009d4c
 8000ad4:	08009d60 	.word	0x08009d60
 8000ad8:	08009d78 	.word	0x08009d78

08000adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b09c      	sub	sp, #112	@ 0x70
 8000ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae6:	224c      	movs	r2, #76	@ 0x4c
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f006 fd3b 	bl	8007566 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	2220      	movs	r2, #32
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f006 fd35 	bl	8007566 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000afc:	2002      	movs	r0, #2
 8000afe:	f001 fdfd 	bl	80026fc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b02:	2300      	movs	r3, #0
 8000b04:	603b      	str	r3, [r7, #0]
 8000b06:	4b32      	ldr	r3, [pc, #200]	@ (8000bd0 <SystemClock_Config+0xf4>)
 8000b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b0a:	4a31      	ldr	r2, [pc, #196]	@ (8000bd0 <SystemClock_Config+0xf4>)
 8000b0c:	f023 0301 	bic.w	r3, r3, #1
 8000b10:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000b12:	4b2f      	ldr	r3, [pc, #188]	@ (8000bd0 <SystemClock_Config+0xf4>)
 8000b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	4b2d      	ldr	r3, [pc, #180]	@ (8000bd4 <SystemClock_Config+0xf8>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b24:	4a2b      	ldr	r2, [pc, #172]	@ (8000bd4 <SystemClock_Config+0xf8>)
 8000b26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b2a:	6193      	str	r3, [r2, #24]
 8000b2c:	4b29      	ldr	r3, [pc, #164]	@ (8000bd4 <SystemClock_Config+0xf8>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b34:	603b      	str	r3, [r7, #0]
 8000b36:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b38:	bf00      	nop
 8000b3a:	4b26      	ldr	r3, [pc, #152]	@ (8000bd4 <SystemClock_Config+0xf8>)
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b46:	d1f8      	bne.n	8000b3a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b50:	2340      	movs	r3, #64	@ 0x40
 8000b52:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b54:	2302      	movs	r3, #2
 8000b56:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b5c:	2304      	movs	r3, #4
 8000b5e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b60:	230a      	movs	r3, #10
 8000b62:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b64:	2302      	movs	r3, #2
 8000b66:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b70:	230c      	movs	r3, #12
 8000b72:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000b74:	2302      	movs	r3, #2
 8000b76:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b80:	4618      	mov	r0, r3
 8000b82:	f001 fdf5 	bl	8002770 <HAL_RCC_OscConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000b8c:	f000 f98a 	bl	8000ea4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b90:	233f      	movs	r3, #63	@ 0x3f
 8000b92:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ba8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f002 fa34 	bl	8003024 <HAL_RCC_ClockConfig>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000bc2:	f000 f96f 	bl	8000ea4 <Error_Handler>
  }
}
 8000bc6:	bf00      	nop
 8000bc8:	3770      	adds	r7, #112	@ 0x70
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	58000400 	.word	0x58000400
 8000bd4:	58024800 	.word	0x58024800

08000bd8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000bdc:	4b27      	ldr	r3, [pc, #156]	@ (8000c7c <MX_SPI2_Init+0xa4>)
 8000bde:	4a28      	ldr	r2, [pc, #160]	@ (8000c80 <MX_SPI2_Init+0xa8>)
 8000be0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000be2:	4b26      	ldr	r3, [pc, #152]	@ (8000c7c <MX_SPI2_Init+0xa4>)
 8000be4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000be8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000bea:	4b24      	ldr	r3, [pc, #144]	@ (8000c7c <MX_SPI2_Init+0xa4>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000bf0:	4b22      	ldr	r3, [pc, #136]	@ (8000c7c <MX_SPI2_Init+0xa4>)
 8000bf2:	2203      	movs	r2, #3
 8000bf4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bf6:	4b21      	ldr	r3, [pc, #132]	@ (8000c7c <MX_SPI2_Init+0xa4>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bfc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c7c <MX_SPI2_Init+0xa4>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000c02:	4b1e      	ldr	r3, [pc, #120]	@ (8000c7c <MX_SPI2_Init+0xa4>)
 8000c04:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000c08:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c7c <MX_SPI2_Init+0xa4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c10:	4b1a      	ldr	r3, [pc, #104]	@ (8000c7c <MX_SPI2_Init+0xa4>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c16:	4b19      	ldr	r3, [pc, #100]	@ (8000c7c <MX_SPI2_Init+0xa4>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c1c:	4b17      	ldr	r3, [pc, #92]	@ (8000c7c <MX_SPI2_Init+0xa4>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000c22:	4b16      	ldr	r3, [pc, #88]	@ (8000c7c <MX_SPI2_Init+0xa4>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c28:	4b14      	ldr	r3, [pc, #80]	@ (8000c7c <MX_SPI2_Init+0xa4>)
 8000c2a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c2e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c30:	4b12      	ldr	r3, [pc, #72]	@ (8000c7c <MX_SPI2_Init+0xa4>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c36:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <MX_SPI2_Init+0xa4>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <MX_SPI2_Init+0xa4>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <MX_SPI2_Init+0xa4>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <MX_SPI2_Init+0xa4>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c7c <MX_SPI2_Init+0xa4>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c54:	4b09      	ldr	r3, [pc, #36]	@ (8000c7c <MX_SPI2_Init+0xa4>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c5a:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <MX_SPI2_Init+0xa4>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c60:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <MX_SPI2_Init+0xa4>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c66:	4805      	ldr	r0, [pc, #20]	@ (8000c7c <MX_SPI2_Init+0xa4>)
 8000c68:	f004 fb94 	bl	8005394 <HAL_SPI_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000c72:	f000 f917 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	240000b8 	.word	0x240000b8
 8000c80:	40003800 	.word	0x40003800

08000c84 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000c88:	4b27      	ldr	r3, [pc, #156]	@ (8000d28 <MX_SPI4_Init+0xa4>)
 8000c8a:	4a28      	ldr	r2, [pc, #160]	@ (8000d2c <MX_SPI4_Init+0xa8>)
 8000c8c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000c8e:	4b26      	ldr	r3, [pc, #152]	@ (8000d28 <MX_SPI4_Init+0xa4>)
 8000c90:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000c94:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000c96:	4b24      	ldr	r3, [pc, #144]	@ (8000d28 <MX_SPI4_Init+0xa4>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c9c:	4b22      	ldr	r3, [pc, #136]	@ (8000d28 <MX_SPI4_Init+0xa4>)
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ca2:	4b21      	ldr	r3, [pc, #132]	@ (8000d28 <MX_SPI4_Init+0xa4>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ca8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d28 <MX_SPI4_Init+0xa4>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000cae:	4b1e      	ldr	r3, [pc, #120]	@ (8000d28 <MX_SPI4_Init+0xa4>)
 8000cb0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000cb4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d28 <MX_SPI4_Init+0xa4>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cbc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d28 <MX_SPI4_Init+0xa4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cc2:	4b19      	ldr	r3, [pc, #100]	@ (8000d28 <MX_SPI4_Init+0xa4>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cc8:	4b17      	ldr	r3, [pc, #92]	@ (8000d28 <MX_SPI4_Init+0xa4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000cce:	4b16      	ldr	r3, [pc, #88]	@ (8000d28 <MX_SPI4_Init+0xa4>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cd4:	4b14      	ldr	r3, [pc, #80]	@ (8000d28 <MX_SPI4_Init+0xa4>)
 8000cd6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cda:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000cdc:	4b12      	ldr	r3, [pc, #72]	@ (8000d28 <MX_SPI4_Init+0xa4>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ce2:	4b11      	ldr	r3, [pc, #68]	@ (8000d28 <MX_SPI4_Init+0xa4>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d28 <MX_SPI4_Init+0xa4>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cee:	4b0e      	ldr	r3, [pc, #56]	@ (8000d28 <MX_SPI4_Init+0xa4>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d28 <MX_SPI4_Init+0xa4>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000d28 <MX_SPI4_Init+0xa4>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d00:	4b09      	ldr	r3, [pc, #36]	@ (8000d28 <MX_SPI4_Init+0xa4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d06:	4b08      	ldr	r3, [pc, #32]	@ (8000d28 <MX_SPI4_Init+0xa4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d0c:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <MX_SPI4_Init+0xa4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000d12:	4805      	ldr	r0, [pc, #20]	@ (8000d28 <MX_SPI4_Init+0xa4>)
 8000d14:	f004 fb3e 	bl	8005394 <HAL_SPI_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000d1e:	f000 f8c1 	bl	8000ea4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	24000140 	.word	0x24000140
 8000d2c:	40013400 	.word	0x40013400

08000d30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08c      	sub	sp, #48	@ 0x30
 8000d34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d36:	f107 031c 	add.w	r3, r7, #28
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
 8000d44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d46:	4b35      	ldr	r3, [pc, #212]	@ (8000e1c <MX_GPIO_Init+0xec>)
 8000d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d4c:	4a33      	ldr	r2, [pc, #204]	@ (8000e1c <MX_GPIO_Init+0xec>)
 8000d4e:	f043 0310 	orr.w	r3, r3, #16
 8000d52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d56:	4b31      	ldr	r3, [pc, #196]	@ (8000e1c <MX_GPIO_Init+0xec>)
 8000d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d5c:	f003 0310 	and.w	r3, r3, #16
 8000d60:	61bb      	str	r3, [r7, #24]
 8000d62:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d64:	4b2d      	ldr	r3, [pc, #180]	@ (8000e1c <MX_GPIO_Init+0xec>)
 8000d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d6a:	4a2c      	ldr	r2, [pc, #176]	@ (8000e1c <MX_GPIO_Init+0xec>)
 8000d6c:	f043 0304 	orr.w	r3, r3, #4
 8000d70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d74:	4b29      	ldr	r3, [pc, #164]	@ (8000e1c <MX_GPIO_Init+0xec>)
 8000d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7a:	f003 0304 	and.w	r3, r3, #4
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d82:	4b26      	ldr	r3, [pc, #152]	@ (8000e1c <MX_GPIO_Init+0xec>)
 8000d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d88:	4a24      	ldr	r2, [pc, #144]	@ (8000e1c <MX_GPIO_Init+0xec>)
 8000d8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d92:	4b22      	ldr	r3, [pc, #136]	@ (8000e1c <MX_GPIO_Init+0xec>)
 8000d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da0:	4b1e      	ldr	r3, [pc, #120]	@ (8000e1c <MX_GPIO_Init+0xec>)
 8000da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da6:	4a1d      	ldr	r2, [pc, #116]	@ (8000e1c <MX_GPIO_Init+0xec>)
 8000da8:	f043 0302 	orr.w	r3, r3, #2
 8000dac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000db0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e1c <MX_GPIO_Init+0xec>)
 8000db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	4b17      	ldr	r3, [pc, #92]	@ (8000e1c <MX_GPIO_Init+0xec>)
 8000dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc4:	4a15      	ldr	r2, [pc, #84]	@ (8000e1c <MX_GPIO_Init+0xec>)
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dce:	4b13      	ldr	r3, [pc, #76]	@ (8000e1c <MX_GPIO_Init+0xec>)
 8000dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8000e1c <MX_GPIO_Init+0xec>)
 8000dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de2:	4a0e      	ldr	r2, [pc, #56]	@ (8000e1c <MX_GPIO_Init+0xec>)
 8000de4:	f043 0308 	orr.w	r3, r3, #8
 8000de8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dec:	4b0b      	ldr	r3, [pc, #44]	@ (8000e1c <MX_GPIO_Init+0xec>)
 8000dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df2:	f003 0308 	and.w	r3, r3, #8
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000dfa:	2310      	movs	r3, #16
 8000dfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dfe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e08:	f107 031c 	add.w	r3, r7, #28
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4804      	ldr	r0, [pc, #16]	@ (8000e20 <MX_GPIO_Init+0xf0>)
 8000e10:	f001 fa78 	bl	8002304 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e14:	bf00      	nop
 8000e16:	3730      	adds	r7, #48	@ 0x30
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	58024400 	.word	0x58024400
 8000e20:	58020c00 	.word	0x58020c00

08000e24 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000e36:	f000 ff43 	bl	8001cc0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000e46:	231f      	movs	r3, #31
 8000e48:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000e4a:	2387      	movs	r3, #135	@ 0x87
 8000e4c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000e52:	2300      	movs	r3, #0
 8000e54:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000e56:	2301      	movs	r3, #1
 8000e58:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e66:	463b      	mov	r3, r7
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f000 ff61 	bl	8001d30 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000e6e:	2004      	movs	r0, #4
 8000e70:	f000 ff3e 	bl	8001cf0 <HAL_MPU_Enable>

}
 8000e74:	bf00      	nop
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d102      	bne.n	8000e92 <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8000e8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ea0 <BSP_PB_Callback+0x24>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	601a      	str	r2, [r3, #0]
  }
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	240000b4 	.word	0x240000b4

08000ea4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea8:	b672      	cpsid	i
}
 8000eaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <Error_Handler+0x8>

08000eb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee0 <HAL_MspInit+0x30>)
 8000eb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ebc:	4a08      	ldr	r2, [pc, #32]	@ (8000ee0 <HAL_MspInit+0x30>)
 8000ebe:	f043 0302 	orr.w	r3, r3, #2
 8000ec2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ec6:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <HAL_MspInit+0x30>)
 8000ec8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ecc:	f003 0302 	and.w	r3, r3, #2
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	58024400 	.word	0x58024400

08000ee4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b0bc      	sub	sp, #240	@ 0xf0
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000efc:	f107 0318 	add.w	r3, r7, #24
 8000f00:	22c0      	movs	r2, #192	@ 0xc0
 8000f02:	2100      	movs	r1, #0
 8000f04:	4618      	mov	r0, r3
 8000f06:	f006 fb2e 	bl	8007566 <memset>
  if(hspi->Instance==SPI2)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a69      	ldr	r2, [pc, #420]	@ (80010b4 <HAL_SPI_MspInit+0x1d0>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d164      	bne.n	8000fde <HAL_SPI_MspInit+0xfa>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000f14:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f18:	f04f 0300 	mov.w	r3, #0
 8000f1c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f24:	f107 0318 	add.w	r3, r7, #24
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f002 fc07 	bl	800373c <HAL_RCCEx_PeriphCLKConfig>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000f34:	f7ff ffb6 	bl	8000ea4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f38:	4b5f      	ldr	r3, [pc, #380]	@ (80010b8 <HAL_SPI_MspInit+0x1d4>)
 8000f3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f3e:	4a5e      	ldr	r2, [pc, #376]	@ (80010b8 <HAL_SPI_MspInit+0x1d4>)
 8000f40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f44:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f48:	4b5b      	ldr	r3, [pc, #364]	@ (80010b8 <HAL_SPI_MspInit+0x1d4>)
 8000f4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f56:	4b58      	ldr	r3, [pc, #352]	@ (80010b8 <HAL_SPI_MspInit+0x1d4>)
 8000f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f5c:	4a56      	ldr	r2, [pc, #344]	@ (80010b8 <HAL_SPI_MspInit+0x1d4>)
 8000f5e:	f043 0302 	orr.w	r3, r3, #2
 8000f62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f66:	4b54      	ldr	r3, [pc, #336]	@ (80010b8 <HAL_SPI_MspInit+0x1d4>)
 8000f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f6c:	f003 0302 	and.w	r3, r3, #2
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	693b      	ldr	r3, [r7, #16]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f78:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f82:	2301      	movs	r3, #1
 8000f84:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f8e:	2305      	movs	r3, #5
 8000f90:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f94:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4848      	ldr	r0, [pc, #288]	@ (80010bc <HAL_SPI_MspInit+0x1d8>)
 8000f9c:	f001 f9b2 	bl	8002304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000fa0:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000fa4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fba:	2305      	movs	r3, #5
 8000fbc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	483d      	ldr	r0, [pc, #244]	@ (80010bc <HAL_SPI_MspInit+0x1d8>)
 8000fc8:	f001 f99c 	bl	8002304 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2100      	movs	r1, #0
 8000fd0:	2024      	movs	r0, #36	@ 0x24
 8000fd2:	f000 fe40 	bl	8001c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000fd6:	2024      	movs	r0, #36	@ 0x24
 8000fd8:	f000 fe57 	bl	8001c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8000fdc:	e066      	b.n	80010ac <HAL_SPI_MspInit+0x1c8>
  else if(hspi->Instance==SPI4)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a37      	ldr	r2, [pc, #220]	@ (80010c0 <HAL_SPI_MspInit+0x1dc>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d161      	bne.n	80010ac <HAL_SPI_MspInit+0x1c8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8000fe8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fec:	f04f 0300 	mov.w	r3, #0
 8000ff0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ff8:	f107 0318 	add.w	r3, r7, #24
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f002 fb9d 	bl	800373c <HAL_RCCEx_PeriphCLKConfig>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <HAL_SPI_MspInit+0x128>
      Error_Handler();
 8001008:	f7ff ff4c 	bl	8000ea4 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800100c:	4b2a      	ldr	r3, [pc, #168]	@ (80010b8 <HAL_SPI_MspInit+0x1d4>)
 800100e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001012:	4a29      	ldr	r2, [pc, #164]	@ (80010b8 <HAL_SPI_MspInit+0x1d4>)
 8001014:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001018:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800101c:	4b26      	ldr	r3, [pc, #152]	@ (80010b8 <HAL_SPI_MspInit+0x1d4>)
 800101e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001022:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800102a:	4b23      	ldr	r3, [pc, #140]	@ (80010b8 <HAL_SPI_MspInit+0x1d4>)
 800102c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001030:	4a21      	ldr	r2, [pc, #132]	@ (80010b8 <HAL_SPI_MspInit+0x1d4>)
 8001032:	f043 0310 	orr.w	r3, r3, #16
 8001036:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800103a:	4b1f      	ldr	r3, [pc, #124]	@ (80010b8 <HAL_SPI_MspInit+0x1d4>)
 800103c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001040:	f003 0310 	and.w	r3, r3, #16
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001048:	2364      	movs	r3, #100	@ 0x64
 800104a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001060:	2305      	movs	r3, #5
 8001062:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001066:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800106a:	4619      	mov	r1, r3
 800106c:	4815      	ldr	r0, [pc, #84]	@ (80010c4 <HAL_SPI_MspInit+0x1e0>)
 800106e:	f001 f949 	bl	8002304 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001072:	2310      	movs	r3, #16
 8001074:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001078:	2302      	movs	r3, #2
 800107a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800107e:	2301      	movs	r3, #1
 8001080:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	2300      	movs	r3, #0
 8001086:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800108a:	2305      	movs	r3, #5
 800108c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001090:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001094:	4619      	mov	r1, r3
 8001096:	480b      	ldr	r0, [pc, #44]	@ (80010c4 <HAL_SPI_MspInit+0x1e0>)
 8001098:	f001 f934 	bl	8002304 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800109c:	2200      	movs	r2, #0
 800109e:	2100      	movs	r1, #0
 80010a0:	2054      	movs	r0, #84	@ 0x54
 80010a2:	f000 fdd8 	bl	8001c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80010a6:	2054      	movs	r0, #84	@ 0x54
 80010a8:	f000 fdef 	bl	8001c8a <HAL_NVIC_EnableIRQ>
}
 80010ac:	bf00      	nop
 80010ae:	37f0      	adds	r7, #240	@ 0xf0
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40003800 	.word	0x40003800
 80010b8:	58024400 	.word	0x58024400
 80010bc:	58020400 	.word	0x58020400
 80010c0:	40013400 	.word	0x40013400
 80010c4:	58021000 	.word	0x58021000

080010c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <NMI_Handler+0x4>

080010d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d4:	bf00      	nop
 80010d6:	e7fd      	b.n	80010d4 <HardFault_Handler+0x4>

080010d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <MemManage_Handler+0x4>

080010e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <BusFault_Handler+0x4>

080010e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <UsageFault_Handler+0x4>

080010f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800111e:	f000 fc6f 	bl	8001a00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800112c:	4802      	ldr	r0, [pc, #8]	@ (8001138 <SPI2_IRQHandler+0x10>)
 800112e:	f004 fd8f 	bl	8005c50 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	240000b8 	.word	0x240000b8

0800113c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001140:	2000      	movs	r0, #0
 8001142:	f000 fafb 	bl	800173c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001150:	4802      	ldr	r0, [pc, #8]	@ (800115c <SPI4_IRQHandler+0x10>)
 8001152:	f004 fd7d 	bl	8005c50 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	24000140 	.word	0x24000140

08001160 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
 8001170:	e00a      	b.n	8001188 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001172:	f3af 8000 	nop.w
 8001176:	4601      	mov	r1, r0
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	1c5a      	adds	r2, r3, #1
 800117c:	60ba      	str	r2, [r7, #8]
 800117e:	b2ca      	uxtb	r2, r1
 8001180:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	3301      	adds	r3, #1
 8001186:	617b      	str	r3, [r7, #20]
 8001188:	697a      	ldr	r2, [r7, #20]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	429a      	cmp	r2, r3
 800118e:	dbf0      	blt.n	8001172 <_read+0x12>
  }

  return len;
 8001190:	687b      	ldr	r3, [r7, #4]
}
 8001192:	4618      	mov	r0, r3
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b086      	sub	sp, #24
 800119e:	af00      	add	r7, sp, #0
 80011a0:	60f8      	str	r0, [r7, #12]
 80011a2:	60b9      	str	r1, [r7, #8]
 80011a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	e009      	b.n	80011c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	1c5a      	adds	r2, r3, #1
 80011b0:	60ba      	str	r2, [r7, #8]
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 fb35 	bl	8001824 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	3301      	adds	r3, #1
 80011be:	617b      	str	r3, [r7, #20]
 80011c0:	697a      	ldr	r2, [r7, #20]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	dbf1      	blt.n	80011ac <_write+0x12>
  }
  return len;
 80011c8:	687b      	ldr	r3, [r7, #4]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <_close>:

int _close(int file)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011ea:	b480      	push	{r7}
 80011ec:	b083      	sub	sp, #12
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011fa:	605a      	str	r2, [r3, #4]
  return 0;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <_isatty>:

int _isatty(int file)
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001212:	2301      	movs	r3, #1
}
 8001214:	4618      	mov	r0, r3
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3714      	adds	r7, #20
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
	...

0800123c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001244:	4a14      	ldr	r2, [pc, #80]	@ (8001298 <_sbrk+0x5c>)
 8001246:	4b15      	ldr	r3, [pc, #84]	@ (800129c <_sbrk+0x60>)
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001250:	4b13      	ldr	r3, [pc, #76]	@ (80012a0 <_sbrk+0x64>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d102      	bne.n	800125e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001258:	4b11      	ldr	r3, [pc, #68]	@ (80012a0 <_sbrk+0x64>)
 800125a:	4a12      	ldr	r2, [pc, #72]	@ (80012a4 <_sbrk+0x68>)
 800125c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800125e:	4b10      	ldr	r3, [pc, #64]	@ (80012a0 <_sbrk+0x64>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4413      	add	r3, r2
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	429a      	cmp	r2, r3
 800126a:	d207      	bcs.n	800127c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800126c:	f006 f9ca 	bl	8007604 <__errno>
 8001270:	4603      	mov	r3, r0
 8001272:	220c      	movs	r2, #12
 8001274:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
 800127a:	e009      	b.n	8001290 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800127c:	4b08      	ldr	r3, [pc, #32]	@ (80012a0 <_sbrk+0x64>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001282:	4b07      	ldr	r3, [pc, #28]	@ (80012a0 <_sbrk+0x64>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	4a05      	ldr	r2, [pc, #20]	@ (80012a0 <_sbrk+0x64>)
 800128c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800128e:	68fb      	ldr	r3, [r7, #12]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	24080000 	.word	0x24080000
 800129c:	00000400 	.word	0x00000400
 80012a0:	240001c8 	.word	0x240001c8
 80012a4:	240003c0 	.word	0x240003c0

080012a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012ac:	4b43      	ldr	r3, [pc, #268]	@ (80013bc <SystemInit+0x114>)
 80012ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012b2:	4a42      	ldr	r2, [pc, #264]	@ (80013bc <SystemInit+0x114>)
 80012b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012bc:	4b40      	ldr	r3, [pc, #256]	@ (80013c0 <SystemInit+0x118>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 030f 	and.w	r3, r3, #15
 80012c4:	2b06      	cmp	r3, #6
 80012c6:	d807      	bhi.n	80012d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012c8:	4b3d      	ldr	r3, [pc, #244]	@ (80013c0 <SystemInit+0x118>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f023 030f 	bic.w	r3, r3, #15
 80012d0:	4a3b      	ldr	r2, [pc, #236]	@ (80013c0 <SystemInit+0x118>)
 80012d2:	f043 0307 	orr.w	r3, r3, #7
 80012d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80012d8:	4b3a      	ldr	r3, [pc, #232]	@ (80013c4 <SystemInit+0x11c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a39      	ldr	r2, [pc, #228]	@ (80013c4 <SystemInit+0x11c>)
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012e4:	4b37      	ldr	r3, [pc, #220]	@ (80013c4 <SystemInit+0x11c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80012ea:	4b36      	ldr	r3, [pc, #216]	@ (80013c4 <SystemInit+0x11c>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	4935      	ldr	r1, [pc, #212]	@ (80013c4 <SystemInit+0x11c>)
 80012f0:	4b35      	ldr	r3, [pc, #212]	@ (80013c8 <SystemInit+0x120>)
 80012f2:	4013      	ands	r3, r2
 80012f4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012f6:	4b32      	ldr	r3, [pc, #200]	@ (80013c0 <SystemInit+0x118>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d007      	beq.n	8001312 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001302:	4b2f      	ldr	r3, [pc, #188]	@ (80013c0 <SystemInit+0x118>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f023 030f 	bic.w	r3, r3, #15
 800130a:	4a2d      	ldr	r2, [pc, #180]	@ (80013c0 <SystemInit+0x118>)
 800130c:	f043 0307 	orr.w	r3, r3, #7
 8001310:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001312:	4b2c      	ldr	r3, [pc, #176]	@ (80013c4 <SystemInit+0x11c>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001318:	4b2a      	ldr	r3, [pc, #168]	@ (80013c4 <SystemInit+0x11c>)
 800131a:	2200      	movs	r2, #0
 800131c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800131e:	4b29      	ldr	r3, [pc, #164]	@ (80013c4 <SystemInit+0x11c>)
 8001320:	2200      	movs	r2, #0
 8001322:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001324:	4b27      	ldr	r3, [pc, #156]	@ (80013c4 <SystemInit+0x11c>)
 8001326:	4a29      	ldr	r2, [pc, #164]	@ (80013cc <SystemInit+0x124>)
 8001328:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800132a:	4b26      	ldr	r3, [pc, #152]	@ (80013c4 <SystemInit+0x11c>)
 800132c:	4a28      	ldr	r2, [pc, #160]	@ (80013d0 <SystemInit+0x128>)
 800132e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001330:	4b24      	ldr	r3, [pc, #144]	@ (80013c4 <SystemInit+0x11c>)
 8001332:	4a28      	ldr	r2, [pc, #160]	@ (80013d4 <SystemInit+0x12c>)
 8001334:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001336:	4b23      	ldr	r3, [pc, #140]	@ (80013c4 <SystemInit+0x11c>)
 8001338:	2200      	movs	r2, #0
 800133a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800133c:	4b21      	ldr	r3, [pc, #132]	@ (80013c4 <SystemInit+0x11c>)
 800133e:	4a25      	ldr	r2, [pc, #148]	@ (80013d4 <SystemInit+0x12c>)
 8001340:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001342:	4b20      	ldr	r3, [pc, #128]	@ (80013c4 <SystemInit+0x11c>)
 8001344:	2200      	movs	r2, #0
 8001346:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001348:	4b1e      	ldr	r3, [pc, #120]	@ (80013c4 <SystemInit+0x11c>)
 800134a:	4a22      	ldr	r2, [pc, #136]	@ (80013d4 <SystemInit+0x12c>)
 800134c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800134e:	4b1d      	ldr	r3, [pc, #116]	@ (80013c4 <SystemInit+0x11c>)
 8001350:	2200      	movs	r2, #0
 8001352:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001354:	4b1b      	ldr	r3, [pc, #108]	@ (80013c4 <SystemInit+0x11c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a1a      	ldr	r2, [pc, #104]	@ (80013c4 <SystemInit+0x11c>)
 800135a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800135e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001360:	4b18      	ldr	r3, [pc, #96]	@ (80013c4 <SystemInit+0x11c>)
 8001362:	2200      	movs	r2, #0
 8001364:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001366:	4b1c      	ldr	r3, [pc, #112]	@ (80013d8 <SystemInit+0x130>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	4b1c      	ldr	r3, [pc, #112]	@ (80013dc <SystemInit+0x134>)
 800136c:	4013      	ands	r3, r2
 800136e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001372:	d202      	bcs.n	800137a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001374:	4b1a      	ldr	r3, [pc, #104]	@ (80013e0 <SystemInit+0x138>)
 8001376:	2201      	movs	r2, #1
 8001378:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800137a:	4b12      	ldr	r3, [pc, #72]	@ (80013c4 <SystemInit+0x11c>)
 800137c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001380:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d113      	bne.n	80013b0 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001388:	4b0e      	ldr	r3, [pc, #56]	@ (80013c4 <SystemInit+0x11c>)
 800138a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800138e:	4a0d      	ldr	r2, [pc, #52]	@ (80013c4 <SystemInit+0x11c>)
 8001390:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001394:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001398:	4b12      	ldr	r3, [pc, #72]	@ (80013e4 <SystemInit+0x13c>)
 800139a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800139e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80013a0:	4b08      	ldr	r3, [pc, #32]	@ (80013c4 <SystemInit+0x11c>)
 80013a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80013a6:	4a07      	ldr	r2, [pc, #28]	@ (80013c4 <SystemInit+0x11c>)
 80013a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80013ac:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000ed00 	.word	0xe000ed00
 80013c0:	52002000 	.word	0x52002000
 80013c4:	58024400 	.word	0x58024400
 80013c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80013cc:	02020200 	.word	0x02020200
 80013d0:	01ff0000 	.word	0x01ff0000
 80013d4:	01010280 	.word	0x01010280
 80013d8:	5c001000 	.word	0x5c001000
 80013dc:	ffff0000 	.word	0xffff0000
 80013e0:	51008108 	.word	0x51008108
 80013e4:	52004000 	.word	0x52004000

080013e8 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80013ec:	4b09      	ldr	r3, [pc, #36]	@ (8001414 <ExitRun0Mode+0x2c>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	4a08      	ldr	r2, [pc, #32]	@ (8001414 <ExitRun0Mode+0x2c>)
 80013f2:	f043 0302 	orr.w	r3, r3, #2
 80013f6:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80013f8:	bf00      	nop
 80013fa:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <ExitRun0Mode+0x2c>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0f9      	beq.n	80013fa <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001406:	bf00      	nop
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	58024800 	.word	0x58024800

08001418 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001418:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001454 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800141c:	f7ff ffe4 	bl	80013e8 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001420:	f7ff ff42 	bl	80012a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001424:	480c      	ldr	r0, [pc, #48]	@ (8001458 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001426:	490d      	ldr	r1, [pc, #52]	@ (800145c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001428:	4a0d      	ldr	r2, [pc, #52]	@ (8001460 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800142a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800142c:	e002      	b.n	8001434 <LoopCopyDataInit>

0800142e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800142e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001430:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001432:	3304      	adds	r3, #4

08001434 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001434:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001436:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001438:	d3f9      	bcc.n	800142e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800143a:	4a0a      	ldr	r2, [pc, #40]	@ (8001464 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800143c:	4c0a      	ldr	r4, [pc, #40]	@ (8001468 <LoopFillZerobss+0x22>)
  movs r3, #0
 800143e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001440:	e001      	b.n	8001446 <LoopFillZerobss>

08001442 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001442:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001444:	3204      	adds	r2, #4

08001446 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001446:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001448:	d3fb      	bcc.n	8001442 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800144a:	f006 f8e1 	bl	8007610 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800144e:	f7ff fa4b 	bl	80008e8 <main>
  bx  lr
 8001452:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001454:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001458:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800145c:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8001460:	08009e84 	.word	0x08009e84
  ldr r2, =_sbss
 8001464:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 8001468:	240003bc 	.word	0x240003bc

0800146c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800146c:	e7fe      	b.n	800146c <ADC3_IRQHandler>
	...

08001470 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08c      	sub	sp, #48	@ 0x30
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800147a:	2300      	movs	r3, #0
 800147c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d009      	beq.n	8001498 <BSP_LED_Init+0x28>
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d006      	beq.n	8001498 <BSP_LED_Init+0x28>
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	2b02      	cmp	r3, #2
 800148e:	d003      	beq.n	8001498 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001490:	f06f 0301 	mvn.w	r3, #1
 8001494:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001496:	e055      	b.n	8001544 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d10f      	bne.n	80014be <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 800149e:	4b2c      	ldr	r3, [pc, #176]	@ (8001550 <BSP_LED_Init+0xe0>)
 80014a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014a4:	4a2a      	ldr	r2, [pc, #168]	@ (8001550 <BSP_LED_Init+0xe0>)
 80014a6:	f043 0302 	orr.w	r3, r3, #2
 80014aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014ae:	4b28      	ldr	r3, [pc, #160]	@ (8001550 <BSP_LED_Init+0xe0>)
 80014b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	e021      	b.n	8001502 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d10f      	bne.n	80014e4 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80014c4:	4b22      	ldr	r3, [pc, #136]	@ (8001550 <BSP_LED_Init+0xe0>)
 80014c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ca:	4a21      	ldr	r2, [pc, #132]	@ (8001550 <BSP_LED_Init+0xe0>)
 80014cc:	f043 0310 	orr.w	r3, r3, #16
 80014d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001550 <BSP_LED_Init+0xe0>)
 80014d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014da:	f003 0310 	and.w	r3, r3, #16
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	e00e      	b.n	8001502 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80014e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001550 <BSP_LED_Init+0xe0>)
 80014e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ea:	4a19      	ldr	r2, [pc, #100]	@ (8001550 <BSP_LED_Init+0xe0>)
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014f4:	4b16      	ldr	r3, [pc, #88]	@ (8001550 <BSP_LED_Init+0xe0>)
 80014f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	4a13      	ldr	r2, [pc, #76]	@ (8001554 <BSP_LED_Init+0xe4>)
 8001506:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800150a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800150c:	2301      	movs	r3, #1
 800150e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001514:	2303      	movs	r3, #3
 8001516:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	4a0f      	ldr	r2, [pc, #60]	@ (8001558 <BSP_LED_Init+0xe8>)
 800151c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001520:	f107 0218 	add.w	r2, r7, #24
 8001524:	4611      	mov	r1, r2
 8001526:	4618      	mov	r0, r3
 8001528:	f000 feec 	bl	8002304 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	4a0a      	ldr	r2, [pc, #40]	@ (8001558 <BSP_LED_Init+0xe8>)
 8001530:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	4a07      	ldr	r2, [pc, #28]	@ (8001554 <BSP_LED_Init+0xe4>)
 8001538:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800153c:	2200      	movs	r2, #0
 800153e:	4619      	mov	r1, r3
 8001540:	f001 f8a8 	bl	8002694 <HAL_GPIO_WritePin>
  }

  return ret;
 8001544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001546:	4618      	mov	r0, r3
 8001548:	3730      	adds	r7, #48	@ 0x30
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	58024400 	.word	0x58024400
 8001554:	08009e1c 	.word	0x08009e1c
 8001558:	2400000c 	.word	0x2400000c

0800155c <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d009      	beq.n	8001584 <BSP_LED_On+0x28>
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d006      	beq.n	8001584 <BSP_LED_On+0x28>
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	2b02      	cmp	r3, #2
 800157a:	d003      	beq.n	8001584 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800157c:	f06f 0301 	mvn.w	r3, #1
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	e00b      	b.n	800159c <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	4a08      	ldr	r2, [pc, #32]	@ (80015a8 <BSP_LED_On+0x4c>)
 8001588:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	4a07      	ldr	r2, [pc, #28]	@ (80015ac <BSP_LED_On+0x50>)
 8001590:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001594:	2201      	movs	r2, #1
 8001596:	4619      	mov	r1, r3
 8001598:	f001 f87c 	bl	8002694 <HAL_GPIO_WritePin>
  }

  return ret;
 800159c:	68fb      	ldr	r3, [r7, #12]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	2400000c 	.word	0x2400000c
 80015ac:	08009e1c 	.word	0x08009e1c

080015b0 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d009      	beq.n	80015d8 <BSP_LED_Off+0x28>
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d006      	beq.n	80015d8 <BSP_LED_Off+0x28>
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d003      	beq.n	80015d8 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80015d0:	f06f 0301 	mvn.w	r3, #1
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	e00b      	b.n	80015f0 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	4a08      	ldr	r2, [pc, #32]	@ (80015fc <BSP_LED_Off+0x4c>)
 80015dc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	4a07      	ldr	r2, [pc, #28]	@ (8001600 <BSP_LED_Off+0x50>)
 80015e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015e8:	2200      	movs	r2, #0
 80015ea:	4619      	mov	r1, r3
 80015ec:	f001 f852 	bl	8002694 <HAL_GPIO_WritePin>
  }

  return ret;
 80015f0:	68fb      	ldr	r3, [r7, #12]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	2400000c 	.word	0x2400000c
 8001600:	08009e1c 	.word	0x08009e1c

08001604 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d009      	beq.n	800162c <BSP_LED_Toggle+0x28>
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d006      	beq.n	800162c <BSP_LED_Toggle+0x28>
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	2b02      	cmp	r3, #2
 8001622:	d003      	beq.n	800162c <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001624:	f06f 0301 	mvn.w	r3, #1
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	e00b      	b.n	8001644 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	4a08      	ldr	r2, [pc, #32]	@ (8001650 <BSP_LED_Toggle+0x4c>)
 8001630:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	4907      	ldr	r1, [pc, #28]	@ (8001654 <BSP_LED_Toggle+0x50>)
 8001638:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800163c:	4619      	mov	r1, r3
 800163e:	4610      	mov	r0, r2
 8001640:	f001 f841 	bl	80026c6 <HAL_GPIO_TogglePin>
  }

  return ret;
 8001644:	68fb      	ldr	r3, [r7, #12]
}
 8001646:	4618      	mov	r0, r3
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	2400000c 	.word	0x2400000c
 8001654:	08009e1c 	.word	0x08009e1c

08001658 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	460a      	mov	r2, r1
 8001662:	71fb      	strb	r3, [r7, #7]
 8001664:	4613      	mov	r3, r2
 8001666:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001668:	4b2e      	ldr	r3, [pc, #184]	@ (8001724 <BSP_PB_Init+0xcc>)
 800166a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800166e:	4a2d      	ldr	r2, [pc, #180]	@ (8001724 <BSP_PB_Init+0xcc>)
 8001670:	f043 0304 	orr.w	r3, r3, #4
 8001674:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001678:	4b2a      	ldr	r3, [pc, #168]	@ (8001724 <BSP_PB_Init+0xcc>)
 800167a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800167e:	f003 0304 	and.w	r3, r3, #4
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001686:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800168a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800168c:	2302      	movs	r3, #2
 800168e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001690:	2302      	movs	r3, #2
 8001692:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001694:	79bb      	ldrb	r3, [r7, #6]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10c      	bne.n	80016b4 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	4a21      	ldr	r2, [pc, #132]	@ (8001728 <BSP_PB_Init+0xd0>)
 80016a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a6:	f107 020c 	add.w	r2, r7, #12
 80016aa:	4611      	mov	r1, r2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f000 fe29 	bl	8002304 <HAL_GPIO_Init>
 80016b2:	e031      	b.n	8001718 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80016b4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016b8:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	4a1a      	ldr	r2, [pc, #104]	@ (8001728 <BSP_PB_Init+0xd0>)
 80016be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c2:	f107 020c 	add.w	r2, r7, #12
 80016c6:	4611      	mov	r1, r2
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 fe1b 	bl	8002304 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	4a16      	ldr	r2, [pc, #88]	@ (800172c <BSP_PB_Init+0xd4>)
 80016d4:	441a      	add	r2, r3
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	4915      	ldr	r1, [pc, #84]	@ (8001730 <BSP_PB_Init+0xd8>)
 80016da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80016de:	4619      	mov	r1, r3
 80016e0:	4610      	mov	r0, r2
 80016e2:	f000 fdca 	bl	800227a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	4a10      	ldr	r2, [pc, #64]	@ (800172c <BSP_PB_Init+0xd4>)
 80016ec:	1898      	adds	r0, r3, r2
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	4a10      	ldr	r2, [pc, #64]	@ (8001734 <BSP_PB_Init+0xdc>)
 80016f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f6:	461a      	mov	r2, r3
 80016f8:	2100      	movs	r1, #0
 80016fa:	f000 fd9f 	bl	800223c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80016fe:	2028      	movs	r0, #40	@ 0x28
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	4a0d      	ldr	r2, [pc, #52]	@ (8001738 <BSP_PB_Init+0xe0>)
 8001704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001708:	2200      	movs	r2, #0
 800170a:	4619      	mov	r1, r3
 800170c:	f000 faa3 	bl	8001c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001710:	2328      	movs	r3, #40	@ 0x28
 8001712:	4618      	mov	r0, r3
 8001714:	f000 fab9 	bl	8001c8a <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3720      	adds	r7, #32
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	58024400 	.word	0x58024400
 8001728:	24000018 	.word	0x24000018
 800172c:	240001cc 	.word	0x240001cc
 8001730:	08009e24 	.word	0x08009e24
 8001734:	2400001c 	.word	0x2400001c
 8001738:	24000020 	.word	0x24000020

0800173c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	4a04      	ldr	r2, [pc, #16]	@ (800175c <BSP_PB_IRQHandler+0x20>)
 800174c:	4413      	add	r3, r2
 800174e:	4618      	mov	r0, r3
 8001750:	f000 fda8 	bl	80022a4 <HAL_EXTI_IRQHandler>
}
 8001754:	bf00      	nop
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	240001cc 	.word	0x240001cc

08001760 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	6039      	str	r1, [r7, #0]
 800176a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001776:	f06f 0301 	mvn.w	r3, #1
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	e018      	b.n	80017b0 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	2294      	movs	r2, #148	@ 0x94
 8001782:	fb02 f303 	mul.w	r3, r2, r3
 8001786:	4a0d      	ldr	r2, [pc, #52]	@ (80017bc <BSP_COM_Init+0x5c>)
 8001788:	4413      	add	r3, r2
 800178a:	4618      	mov	r0, r3
 800178c:	f000 f86e 	bl	800186c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	2294      	movs	r2, #148	@ 0x94
 8001794:	fb02 f303 	mul.w	r3, r2, r3
 8001798:	4a08      	ldr	r2, [pc, #32]	@ (80017bc <BSP_COM_Init+0x5c>)
 800179a:	4413      	add	r3, r2
 800179c:	6839      	ldr	r1, [r7, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 f80e 	bl	80017c0 <MX_USART3_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d002      	beq.n	80017b0 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80017aa:	f06f 0303 	mvn.w	r3, #3
 80017ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80017b0:	68fb      	ldr	r3, [r7, #12]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	240001d4 	.word	0x240001d4

080017c0 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80017ca:	4b15      	ldr	r3, [pc, #84]	@ (8001820 <MX_USART3_Init+0x60>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	220c      	movs	r2, #12
 80017de:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	895b      	ldrh	r3, [r3, #10]
 80017e4:	461a      	mov	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	891b      	ldrh	r3, [r3, #8]
 80017f6:	461a      	mov	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	899b      	ldrh	r3, [r3, #12]
 8001800:	461a      	mov	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800180c:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f004 fd21 	bl	8006256 <HAL_UART_Init>
 8001814:	4603      	mov	r3, r0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	24000008 	.word	0x24000008

08001824 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 800182c:	4b09      	ldr	r3, [pc, #36]	@ (8001854 <__io_putchar+0x30>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	461a      	mov	r2, r3
 8001832:	2394      	movs	r3, #148	@ 0x94
 8001834:	fb02 f303 	mul.w	r3, r2, r3
 8001838:	4a07      	ldr	r2, [pc, #28]	@ (8001858 <__io_putchar+0x34>)
 800183a:	1898      	adds	r0, r3, r2
 800183c:	1d39      	adds	r1, r7, #4
 800183e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001842:	2201      	movs	r2, #1
 8001844:	f004 fd61 	bl	800630a <HAL_UART_Transmit>
  return ch;
 8001848:	687b      	ldr	r3, [r7, #4]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	24000268 	.word	0x24000268
 8001858:	240001d4 	.word	0x240001d4

0800185c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001860:	2000      	movs	r0, #0
 8001862:	f7ff fb0b 	bl	8000e7c <BSP_PB_Callback>
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
	...

0800186c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08a      	sub	sp, #40	@ 0x28
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001874:	4b27      	ldr	r3, [pc, #156]	@ (8001914 <COM1_MspInit+0xa8>)
 8001876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800187a:	4a26      	ldr	r2, [pc, #152]	@ (8001914 <COM1_MspInit+0xa8>)
 800187c:	f043 0308 	orr.w	r3, r3, #8
 8001880:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001884:	4b23      	ldr	r3, [pc, #140]	@ (8001914 <COM1_MspInit+0xa8>)
 8001886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001892:	4b20      	ldr	r3, [pc, #128]	@ (8001914 <COM1_MspInit+0xa8>)
 8001894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001898:	4a1e      	ldr	r2, [pc, #120]	@ (8001914 <COM1_MspInit+0xa8>)
 800189a:	f043 0308 	orr.w	r3, r3, #8
 800189e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001914 <COM1_MspInit+0xa8>)
 80018a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018a8:	f003 0308 	and.w	r3, r3, #8
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80018b0:	4b18      	ldr	r3, [pc, #96]	@ (8001914 <COM1_MspInit+0xa8>)
 80018b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018b6:	4a17      	ldr	r2, [pc, #92]	@ (8001914 <COM1_MspInit+0xa8>)
 80018b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018bc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80018c0:	4b14      	ldr	r3, [pc, #80]	@ (8001914 <COM1_MspInit+0xa8>)
 80018c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 80018ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018d2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80018d4:	2302      	movs	r3, #2
 80018d6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80018d8:	2302      	movs	r3, #2
 80018da:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80018dc:	2301      	movs	r3, #1
 80018de:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80018e0:	2307      	movs	r3, #7
 80018e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	4619      	mov	r1, r3
 80018ea:	480b      	ldr	r0, [pc, #44]	@ (8001918 <COM1_MspInit+0xac>)
 80018ec:	f000 fd0a 	bl	8002304 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80018f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018f4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80018f6:	2302      	movs	r3, #2
 80018f8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80018fa:	2307      	movs	r3, #7
 80018fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80018fe:	f107 0314 	add.w	r3, r7, #20
 8001902:	4619      	mov	r1, r3
 8001904:	4804      	ldr	r0, [pc, #16]	@ (8001918 <COM1_MspInit+0xac>)
 8001906:	f000 fcfd 	bl	8002304 <HAL_GPIO_Init>
}
 800190a:	bf00      	nop
 800190c:	3728      	adds	r7, #40	@ 0x28
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	58024400 	.word	0x58024400
 8001918:	58020c00 	.word	0x58020c00

0800191c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001922:	2003      	movs	r0, #3
 8001924:	f000 f98c 	bl	8001c40 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001928:	f001 fd32 	bl	8003390 <HAL_RCC_GetSysClockFreq>
 800192c:	4602      	mov	r2, r0
 800192e:	4b15      	ldr	r3, [pc, #84]	@ (8001984 <HAL_Init+0x68>)
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	0a1b      	lsrs	r3, r3, #8
 8001934:	f003 030f 	and.w	r3, r3, #15
 8001938:	4913      	ldr	r1, [pc, #76]	@ (8001988 <HAL_Init+0x6c>)
 800193a:	5ccb      	ldrb	r3, [r1, r3]
 800193c:	f003 031f 	and.w	r3, r3, #31
 8001940:	fa22 f303 	lsr.w	r3, r2, r3
 8001944:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001946:	4b0f      	ldr	r3, [pc, #60]	@ (8001984 <HAL_Init+0x68>)
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	4a0e      	ldr	r2, [pc, #56]	@ (8001988 <HAL_Init+0x6c>)
 8001950:	5cd3      	ldrb	r3, [r2, r3]
 8001952:	f003 031f 	and.w	r3, r3, #31
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	fa22 f303 	lsr.w	r3, r2, r3
 800195c:	4a0b      	ldr	r2, [pc, #44]	@ (800198c <HAL_Init+0x70>)
 800195e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001960:	4a0b      	ldr	r2, [pc, #44]	@ (8001990 <HAL_Init+0x74>)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001966:	2000      	movs	r0, #0
 8001968:	f000 f814 	bl	8001994 <HAL_InitTick>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e002      	b.n	800197c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001976:	f7ff fa9b 	bl	8000eb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	58024400 	.word	0x58024400
 8001988:	08009e0c 	.word	0x08009e0c
 800198c:	24000004 	.word	0x24000004
 8001990:	24000000 	.word	0x24000000

08001994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800199c:	4b15      	ldr	r3, [pc, #84]	@ (80019f4 <HAL_InitTick+0x60>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e021      	b.n	80019ec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80019a8:	4b13      	ldr	r3, [pc, #76]	@ (80019f8 <HAL_InitTick+0x64>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b11      	ldr	r3, [pc, #68]	@ (80019f4 <HAL_InitTick+0x60>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	4619      	mov	r1, r3
 80019b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 f971 	bl	8001ca6 <HAL_SYSTICK_Config>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e00e      	b.n	80019ec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b0f      	cmp	r3, #15
 80019d2:	d80a      	bhi.n	80019ea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d4:	2200      	movs	r2, #0
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	f04f 30ff 	mov.w	r0, #4294967295
 80019dc:	f000 f93b 	bl	8001c56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019e0:	4a06      	ldr	r2, [pc, #24]	@ (80019fc <HAL_InitTick+0x68>)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	e000      	b.n	80019ec <HAL_InitTick+0x58>
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	24000028 	.word	0x24000028
 80019f8:	24000000 	.word	0x24000000
 80019fc:	24000024 	.word	0x24000024

08001a00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a04:	4b06      	ldr	r3, [pc, #24]	@ (8001a20 <HAL_IncTick+0x20>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <HAL_IncTick+0x24>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4413      	add	r3, r2
 8001a10:	4a04      	ldr	r2, [pc, #16]	@ (8001a24 <HAL_IncTick+0x24>)
 8001a12:	6013      	str	r3, [r2, #0]
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	24000028 	.word	0x24000028
 8001a24:	2400026c 	.word	0x2400026c

08001a28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a2c:	4b03      	ldr	r3, [pc, #12]	@ (8001a3c <HAL_GetTick+0x14>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	2400026c 	.word	0x2400026c

08001a40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a48:	f7ff ffee 	bl	8001a28 <HAL_GetTick>
 8001a4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a58:	d005      	beq.n	8001a66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a84 <HAL_Delay+0x44>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4413      	add	r3, r2
 8001a64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a66:	bf00      	nop
 8001a68:	f7ff ffde 	bl	8001a28 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d8f7      	bhi.n	8001a68 <HAL_Delay+0x28>
  {
  }
}
 8001a78:	bf00      	nop
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	24000028 	.word	0x24000028

08001a88 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a8c:	4b03      	ldr	r3, [pc, #12]	@ (8001a9c <HAL_GetREVID+0x14>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	0c1b      	lsrs	r3, r3, #16
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	5c001000 	.word	0x5c001000

08001aa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae0 <__NVIC_SetPriorityGrouping+0x40>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ab6:	68ba      	ldr	r2, [r7, #8]
 8001ab8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001abc:	4013      	ands	r3, r2
 8001abe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ac8:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ace:	4a04      	ldr	r2, [pc, #16]	@ (8001ae0 <__NVIC_SetPriorityGrouping+0x40>)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	60d3      	str	r3, [r2, #12]
}
 8001ad4:	bf00      	nop
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	e000ed00 	.word	0xe000ed00
 8001ae4:	05fa0000 	.word	0x05fa0000

08001ae8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aec:	4b04      	ldr	r3, [pc, #16]	@ (8001b00 <__NVIC_GetPriorityGrouping+0x18>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	0a1b      	lsrs	r3, r3, #8
 8001af2:	f003 0307 	and.w	r3, r3, #7
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	db0b      	blt.n	8001b2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b16:	88fb      	ldrh	r3, [r7, #6]
 8001b18:	f003 021f 	and.w	r2, r3, #31
 8001b1c:	4907      	ldr	r1, [pc, #28]	@ (8001b3c <__NVIC_EnableIRQ+0x38>)
 8001b1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b22:	095b      	lsrs	r3, r3, #5
 8001b24:	2001      	movs	r0, #1
 8001b26:	fa00 f202 	lsl.w	r2, r0, r2
 8001b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	e000e100 	.word	0xe000e100

08001b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	6039      	str	r1, [r7, #0]
 8001b4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	db0a      	blt.n	8001b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	490c      	ldr	r1, [pc, #48]	@ (8001b8c <__NVIC_SetPriority+0x4c>)
 8001b5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b5e:	0112      	lsls	r2, r2, #4
 8001b60:	b2d2      	uxtb	r2, r2
 8001b62:	440b      	add	r3, r1
 8001b64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b68:	e00a      	b.n	8001b80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	4908      	ldr	r1, [pc, #32]	@ (8001b90 <__NVIC_SetPriority+0x50>)
 8001b70:	88fb      	ldrh	r3, [r7, #6]
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	3b04      	subs	r3, #4
 8001b78:	0112      	lsls	r2, r2, #4
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	761a      	strb	r2, [r3, #24]
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	e000e100 	.word	0xe000e100
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b089      	sub	sp, #36	@ 0x24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f1c3 0307 	rsb	r3, r3, #7
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	bf28      	it	cs
 8001bb2:	2304      	movcs	r3, #4
 8001bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	3304      	adds	r3, #4
 8001bba:	2b06      	cmp	r3, #6
 8001bbc:	d902      	bls.n	8001bc4 <NVIC_EncodePriority+0x30>
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3b03      	subs	r3, #3
 8001bc2:	e000      	b.n	8001bc6 <NVIC_EncodePriority+0x32>
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43da      	mvns	r2, r3
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	401a      	ands	r2, r3
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	fa01 f303 	lsl.w	r3, r1, r3
 8001be6:	43d9      	mvns	r1, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bec:	4313      	orrs	r3, r2
         );
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3724      	adds	r7, #36	@ 0x24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
	...

08001bfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c0c:	d301      	bcc.n	8001c12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e00f      	b.n	8001c32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c12:	4a0a      	ldr	r2, [pc, #40]	@ (8001c3c <SysTick_Config+0x40>)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c1a:	210f      	movs	r1, #15
 8001c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c20:	f7ff ff8e 	bl	8001b40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c24:	4b05      	ldr	r3, [pc, #20]	@ (8001c3c <SysTick_Config+0x40>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c2a:	4b04      	ldr	r3, [pc, #16]	@ (8001c3c <SysTick_Config+0x40>)
 8001c2c:	2207      	movs	r2, #7
 8001c2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	e000e010 	.word	0xe000e010

08001c40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff ff29 	bl	8001aa0 <__NVIC_SetPriorityGrouping>
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b086      	sub	sp, #24
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	60b9      	str	r1, [r7, #8]
 8001c60:	607a      	str	r2, [r7, #4]
 8001c62:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c64:	f7ff ff40 	bl	8001ae8 <__NVIC_GetPriorityGrouping>
 8001c68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	68b9      	ldr	r1, [r7, #8]
 8001c6e:	6978      	ldr	r0, [r7, #20]
 8001c70:	f7ff ff90 	bl	8001b94 <NVIC_EncodePriority>
 8001c74:	4602      	mov	r2, r0
 8001c76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff5f 	bl	8001b40 <__NVIC_SetPriority>
}
 8001c82:	bf00      	nop
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	4603      	mov	r3, r0
 8001c92:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ff33 	bl	8001b04 <__NVIC_EnableIRQ>
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff ffa4 	bl	8001bfc <SysTick_Config>
 8001cb4:	4603      	mov	r3, r0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001cc4:	f3bf 8f5f 	dmb	sy
}
 8001cc8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001cca:	4b07      	ldr	r3, [pc, #28]	@ (8001ce8 <HAL_MPU_Disable+0x28>)
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cce:	4a06      	ldr	r2, [pc, #24]	@ (8001ce8 <HAL_MPU_Disable+0x28>)
 8001cd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cd4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001cd6:	4b05      	ldr	r3, [pc, #20]	@ (8001cec <HAL_MPU_Disable+0x2c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	605a      	str	r2, [r3, #4]
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	e000ed00 	.word	0xe000ed00
 8001cec:	e000ed90 	.word	0xe000ed90

08001cf0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001cf8:	4a0b      	ldr	r2, [pc, #44]	@ (8001d28 <HAL_MPU_Enable+0x38>)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001d02:	4b0a      	ldr	r3, [pc, #40]	@ (8001d2c <HAL_MPU_Enable+0x3c>)
 8001d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d06:	4a09      	ldr	r2, [pc, #36]	@ (8001d2c <HAL_MPU_Enable+0x3c>)
 8001d08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d0c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001d0e:	f3bf 8f4f 	dsb	sy
}
 8001d12:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d14:	f3bf 8f6f 	isb	sy
}
 8001d18:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	e000ed90 	.word	0xe000ed90
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	785a      	ldrb	r2, [r3, #1]
 8001d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dac <HAL_MPU_ConfigRegion+0x7c>)
 8001d3e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001d40:	4b1a      	ldr	r3, [pc, #104]	@ (8001dac <HAL_MPU_ConfigRegion+0x7c>)
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	4a19      	ldr	r2, [pc, #100]	@ (8001dac <HAL_MPU_ConfigRegion+0x7c>)
 8001d46:	f023 0301 	bic.w	r3, r3, #1
 8001d4a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001d4c:	4a17      	ldr	r2, [pc, #92]	@ (8001dac <HAL_MPU_ConfigRegion+0x7c>)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	7b1b      	ldrb	r3, [r3, #12]
 8001d58:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	7adb      	ldrb	r3, [r3, #11]
 8001d5e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d60:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	7a9b      	ldrb	r3, [r3, #10]
 8001d66:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d68:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	7b5b      	ldrb	r3, [r3, #13]
 8001d6e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d70:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	7b9b      	ldrb	r3, [r3, #14]
 8001d76:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d78:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	7bdb      	ldrb	r3, [r3, #15]
 8001d7e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d80:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	7a5b      	ldrb	r3, [r3, #9]
 8001d86:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d88:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	7a1b      	ldrb	r3, [r3, #8]
 8001d8e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d90:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	7812      	ldrb	r2, [r2, #0]
 8001d96:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d98:	4a04      	ldr	r2, [pc, #16]	@ (8001dac <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d9a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d9c:	6113      	str	r3, [r2, #16]
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	e000ed90 	.word	0xe000ed90

08001db0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e237      	b.n	8002232 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d004      	beq.n	8001dd8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2280      	movs	r2, #128	@ 0x80
 8001dd2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e22c      	b.n	8002232 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a5c      	ldr	r2, [pc, #368]	@ (8001f50 <HAL_DMA_Abort_IT+0x1a0>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d04a      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a5b      	ldr	r2, [pc, #364]	@ (8001f54 <HAL_DMA_Abort_IT+0x1a4>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d045      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a59      	ldr	r2, [pc, #356]	@ (8001f58 <HAL_DMA_Abort_IT+0x1a8>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d040      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a58      	ldr	r2, [pc, #352]	@ (8001f5c <HAL_DMA_Abort_IT+0x1ac>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d03b      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a56      	ldr	r2, [pc, #344]	@ (8001f60 <HAL_DMA_Abort_IT+0x1b0>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d036      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a55      	ldr	r2, [pc, #340]	@ (8001f64 <HAL_DMA_Abort_IT+0x1b4>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d031      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a53      	ldr	r2, [pc, #332]	@ (8001f68 <HAL_DMA_Abort_IT+0x1b8>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d02c      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a52      	ldr	r2, [pc, #328]	@ (8001f6c <HAL_DMA_Abort_IT+0x1bc>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d027      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a50      	ldr	r2, [pc, #320]	@ (8001f70 <HAL_DMA_Abort_IT+0x1c0>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d022      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a4f      	ldr	r2, [pc, #316]	@ (8001f74 <HAL_DMA_Abort_IT+0x1c4>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d01d      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a4d      	ldr	r2, [pc, #308]	@ (8001f78 <HAL_DMA_Abort_IT+0x1c8>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d018      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a4c      	ldr	r2, [pc, #304]	@ (8001f7c <HAL_DMA_Abort_IT+0x1cc>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d013      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a4a      	ldr	r2, [pc, #296]	@ (8001f80 <HAL_DMA_Abort_IT+0x1d0>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d00e      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a49      	ldr	r2, [pc, #292]	@ (8001f84 <HAL_DMA_Abort_IT+0x1d4>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d009      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a47      	ldr	r2, [pc, #284]	@ (8001f88 <HAL_DMA_Abort_IT+0x1d8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d004      	beq.n	8001e78 <HAL_DMA_Abort_IT+0xc8>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a46      	ldr	r2, [pc, #280]	@ (8001f8c <HAL_DMA_Abort_IT+0x1dc>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d101      	bne.n	8001e7c <HAL_DMA_Abort_IT+0xcc>
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e000      	b.n	8001e7e <HAL_DMA_Abort_IT+0xce>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f000 8086 	beq.w	8001f90 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2204      	movs	r2, #4
 8001e88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a2f      	ldr	r2, [pc, #188]	@ (8001f50 <HAL_DMA_Abort_IT+0x1a0>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d04a      	beq.n	8001f2c <HAL_DMA_Abort_IT+0x17c>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a2e      	ldr	r2, [pc, #184]	@ (8001f54 <HAL_DMA_Abort_IT+0x1a4>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d045      	beq.n	8001f2c <HAL_DMA_Abort_IT+0x17c>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a2c      	ldr	r2, [pc, #176]	@ (8001f58 <HAL_DMA_Abort_IT+0x1a8>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d040      	beq.n	8001f2c <HAL_DMA_Abort_IT+0x17c>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a2b      	ldr	r2, [pc, #172]	@ (8001f5c <HAL_DMA_Abort_IT+0x1ac>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d03b      	beq.n	8001f2c <HAL_DMA_Abort_IT+0x17c>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a29      	ldr	r2, [pc, #164]	@ (8001f60 <HAL_DMA_Abort_IT+0x1b0>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d036      	beq.n	8001f2c <HAL_DMA_Abort_IT+0x17c>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a28      	ldr	r2, [pc, #160]	@ (8001f64 <HAL_DMA_Abort_IT+0x1b4>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d031      	beq.n	8001f2c <HAL_DMA_Abort_IT+0x17c>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a26      	ldr	r2, [pc, #152]	@ (8001f68 <HAL_DMA_Abort_IT+0x1b8>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d02c      	beq.n	8001f2c <HAL_DMA_Abort_IT+0x17c>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a25      	ldr	r2, [pc, #148]	@ (8001f6c <HAL_DMA_Abort_IT+0x1bc>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d027      	beq.n	8001f2c <HAL_DMA_Abort_IT+0x17c>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a23      	ldr	r2, [pc, #140]	@ (8001f70 <HAL_DMA_Abort_IT+0x1c0>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d022      	beq.n	8001f2c <HAL_DMA_Abort_IT+0x17c>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a22      	ldr	r2, [pc, #136]	@ (8001f74 <HAL_DMA_Abort_IT+0x1c4>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d01d      	beq.n	8001f2c <HAL_DMA_Abort_IT+0x17c>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a20      	ldr	r2, [pc, #128]	@ (8001f78 <HAL_DMA_Abort_IT+0x1c8>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d018      	beq.n	8001f2c <HAL_DMA_Abort_IT+0x17c>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a1f      	ldr	r2, [pc, #124]	@ (8001f7c <HAL_DMA_Abort_IT+0x1cc>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d013      	beq.n	8001f2c <HAL_DMA_Abort_IT+0x17c>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a1d      	ldr	r2, [pc, #116]	@ (8001f80 <HAL_DMA_Abort_IT+0x1d0>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d00e      	beq.n	8001f2c <HAL_DMA_Abort_IT+0x17c>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a1c      	ldr	r2, [pc, #112]	@ (8001f84 <HAL_DMA_Abort_IT+0x1d4>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d009      	beq.n	8001f2c <HAL_DMA_Abort_IT+0x17c>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a1a      	ldr	r2, [pc, #104]	@ (8001f88 <HAL_DMA_Abort_IT+0x1d8>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d004      	beq.n	8001f2c <HAL_DMA_Abort_IT+0x17c>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a19      	ldr	r2, [pc, #100]	@ (8001f8c <HAL_DMA_Abort_IT+0x1dc>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d108      	bne.n	8001f3e <HAL_DMA_Abort_IT+0x18e>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0201 	bic.w	r2, r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	e178      	b.n	8002230 <HAL_DMA_Abort_IT+0x480>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0201 	bic.w	r2, r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	e16f      	b.n	8002230 <HAL_DMA_Abort_IT+0x480>
 8001f50:	40020010 	.word	0x40020010
 8001f54:	40020028 	.word	0x40020028
 8001f58:	40020040 	.word	0x40020040
 8001f5c:	40020058 	.word	0x40020058
 8001f60:	40020070 	.word	0x40020070
 8001f64:	40020088 	.word	0x40020088
 8001f68:	400200a0 	.word	0x400200a0
 8001f6c:	400200b8 	.word	0x400200b8
 8001f70:	40020410 	.word	0x40020410
 8001f74:	40020428 	.word	0x40020428
 8001f78:	40020440 	.word	0x40020440
 8001f7c:	40020458 	.word	0x40020458
 8001f80:	40020470 	.word	0x40020470
 8001f84:	40020488 	.word	0x40020488
 8001f88:	400204a0 	.word	0x400204a0
 8001f8c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 020e 	bic.w	r2, r2, #14
 8001f9e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a6c      	ldr	r2, [pc, #432]	@ (8002158 <HAL_DMA_Abort_IT+0x3a8>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d04a      	beq.n	8002040 <HAL_DMA_Abort_IT+0x290>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a6b      	ldr	r2, [pc, #428]	@ (800215c <HAL_DMA_Abort_IT+0x3ac>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d045      	beq.n	8002040 <HAL_DMA_Abort_IT+0x290>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a69      	ldr	r2, [pc, #420]	@ (8002160 <HAL_DMA_Abort_IT+0x3b0>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d040      	beq.n	8002040 <HAL_DMA_Abort_IT+0x290>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a68      	ldr	r2, [pc, #416]	@ (8002164 <HAL_DMA_Abort_IT+0x3b4>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d03b      	beq.n	8002040 <HAL_DMA_Abort_IT+0x290>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a66      	ldr	r2, [pc, #408]	@ (8002168 <HAL_DMA_Abort_IT+0x3b8>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d036      	beq.n	8002040 <HAL_DMA_Abort_IT+0x290>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a65      	ldr	r2, [pc, #404]	@ (800216c <HAL_DMA_Abort_IT+0x3bc>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d031      	beq.n	8002040 <HAL_DMA_Abort_IT+0x290>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a63      	ldr	r2, [pc, #396]	@ (8002170 <HAL_DMA_Abort_IT+0x3c0>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d02c      	beq.n	8002040 <HAL_DMA_Abort_IT+0x290>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a62      	ldr	r2, [pc, #392]	@ (8002174 <HAL_DMA_Abort_IT+0x3c4>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d027      	beq.n	8002040 <HAL_DMA_Abort_IT+0x290>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a60      	ldr	r2, [pc, #384]	@ (8002178 <HAL_DMA_Abort_IT+0x3c8>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d022      	beq.n	8002040 <HAL_DMA_Abort_IT+0x290>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a5f      	ldr	r2, [pc, #380]	@ (800217c <HAL_DMA_Abort_IT+0x3cc>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d01d      	beq.n	8002040 <HAL_DMA_Abort_IT+0x290>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a5d      	ldr	r2, [pc, #372]	@ (8002180 <HAL_DMA_Abort_IT+0x3d0>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d018      	beq.n	8002040 <HAL_DMA_Abort_IT+0x290>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a5c      	ldr	r2, [pc, #368]	@ (8002184 <HAL_DMA_Abort_IT+0x3d4>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d013      	beq.n	8002040 <HAL_DMA_Abort_IT+0x290>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a5a      	ldr	r2, [pc, #360]	@ (8002188 <HAL_DMA_Abort_IT+0x3d8>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d00e      	beq.n	8002040 <HAL_DMA_Abort_IT+0x290>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a59      	ldr	r2, [pc, #356]	@ (800218c <HAL_DMA_Abort_IT+0x3dc>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d009      	beq.n	8002040 <HAL_DMA_Abort_IT+0x290>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a57      	ldr	r2, [pc, #348]	@ (8002190 <HAL_DMA_Abort_IT+0x3e0>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d004      	beq.n	8002040 <HAL_DMA_Abort_IT+0x290>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a56      	ldr	r2, [pc, #344]	@ (8002194 <HAL_DMA_Abort_IT+0x3e4>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d108      	bne.n	8002052 <HAL_DMA_Abort_IT+0x2a2>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0201 	bic.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	e007      	b.n	8002062 <HAL_DMA_Abort_IT+0x2b2>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 0201 	bic.w	r2, r2, #1
 8002060:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a3c      	ldr	r2, [pc, #240]	@ (8002158 <HAL_DMA_Abort_IT+0x3a8>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d072      	beq.n	8002152 <HAL_DMA_Abort_IT+0x3a2>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a3a      	ldr	r2, [pc, #232]	@ (800215c <HAL_DMA_Abort_IT+0x3ac>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d06d      	beq.n	8002152 <HAL_DMA_Abort_IT+0x3a2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a39      	ldr	r2, [pc, #228]	@ (8002160 <HAL_DMA_Abort_IT+0x3b0>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d068      	beq.n	8002152 <HAL_DMA_Abort_IT+0x3a2>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a37      	ldr	r2, [pc, #220]	@ (8002164 <HAL_DMA_Abort_IT+0x3b4>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d063      	beq.n	8002152 <HAL_DMA_Abort_IT+0x3a2>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a36      	ldr	r2, [pc, #216]	@ (8002168 <HAL_DMA_Abort_IT+0x3b8>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d05e      	beq.n	8002152 <HAL_DMA_Abort_IT+0x3a2>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a34      	ldr	r2, [pc, #208]	@ (800216c <HAL_DMA_Abort_IT+0x3bc>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d059      	beq.n	8002152 <HAL_DMA_Abort_IT+0x3a2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a33      	ldr	r2, [pc, #204]	@ (8002170 <HAL_DMA_Abort_IT+0x3c0>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d054      	beq.n	8002152 <HAL_DMA_Abort_IT+0x3a2>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a31      	ldr	r2, [pc, #196]	@ (8002174 <HAL_DMA_Abort_IT+0x3c4>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d04f      	beq.n	8002152 <HAL_DMA_Abort_IT+0x3a2>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a30      	ldr	r2, [pc, #192]	@ (8002178 <HAL_DMA_Abort_IT+0x3c8>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d04a      	beq.n	8002152 <HAL_DMA_Abort_IT+0x3a2>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a2e      	ldr	r2, [pc, #184]	@ (800217c <HAL_DMA_Abort_IT+0x3cc>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d045      	beq.n	8002152 <HAL_DMA_Abort_IT+0x3a2>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a2d      	ldr	r2, [pc, #180]	@ (8002180 <HAL_DMA_Abort_IT+0x3d0>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d040      	beq.n	8002152 <HAL_DMA_Abort_IT+0x3a2>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a2b      	ldr	r2, [pc, #172]	@ (8002184 <HAL_DMA_Abort_IT+0x3d4>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d03b      	beq.n	8002152 <HAL_DMA_Abort_IT+0x3a2>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a2a      	ldr	r2, [pc, #168]	@ (8002188 <HAL_DMA_Abort_IT+0x3d8>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d036      	beq.n	8002152 <HAL_DMA_Abort_IT+0x3a2>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a28      	ldr	r2, [pc, #160]	@ (800218c <HAL_DMA_Abort_IT+0x3dc>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d031      	beq.n	8002152 <HAL_DMA_Abort_IT+0x3a2>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a27      	ldr	r2, [pc, #156]	@ (8002190 <HAL_DMA_Abort_IT+0x3e0>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d02c      	beq.n	8002152 <HAL_DMA_Abort_IT+0x3a2>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a25      	ldr	r2, [pc, #148]	@ (8002194 <HAL_DMA_Abort_IT+0x3e4>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d027      	beq.n	8002152 <HAL_DMA_Abort_IT+0x3a2>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a24      	ldr	r2, [pc, #144]	@ (8002198 <HAL_DMA_Abort_IT+0x3e8>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d022      	beq.n	8002152 <HAL_DMA_Abort_IT+0x3a2>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a22      	ldr	r2, [pc, #136]	@ (800219c <HAL_DMA_Abort_IT+0x3ec>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d01d      	beq.n	8002152 <HAL_DMA_Abort_IT+0x3a2>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a21      	ldr	r2, [pc, #132]	@ (80021a0 <HAL_DMA_Abort_IT+0x3f0>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d018      	beq.n	8002152 <HAL_DMA_Abort_IT+0x3a2>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a1f      	ldr	r2, [pc, #124]	@ (80021a4 <HAL_DMA_Abort_IT+0x3f4>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d013      	beq.n	8002152 <HAL_DMA_Abort_IT+0x3a2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a1e      	ldr	r2, [pc, #120]	@ (80021a8 <HAL_DMA_Abort_IT+0x3f8>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d00e      	beq.n	8002152 <HAL_DMA_Abort_IT+0x3a2>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a1c      	ldr	r2, [pc, #112]	@ (80021ac <HAL_DMA_Abort_IT+0x3fc>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d009      	beq.n	8002152 <HAL_DMA_Abort_IT+0x3a2>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a1b      	ldr	r2, [pc, #108]	@ (80021b0 <HAL_DMA_Abort_IT+0x400>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d004      	beq.n	8002152 <HAL_DMA_Abort_IT+0x3a2>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a19      	ldr	r2, [pc, #100]	@ (80021b4 <HAL_DMA_Abort_IT+0x404>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d132      	bne.n	80021b8 <HAL_DMA_Abort_IT+0x408>
 8002152:	2301      	movs	r3, #1
 8002154:	e031      	b.n	80021ba <HAL_DMA_Abort_IT+0x40a>
 8002156:	bf00      	nop
 8002158:	40020010 	.word	0x40020010
 800215c:	40020028 	.word	0x40020028
 8002160:	40020040 	.word	0x40020040
 8002164:	40020058 	.word	0x40020058
 8002168:	40020070 	.word	0x40020070
 800216c:	40020088 	.word	0x40020088
 8002170:	400200a0 	.word	0x400200a0
 8002174:	400200b8 	.word	0x400200b8
 8002178:	40020410 	.word	0x40020410
 800217c:	40020428 	.word	0x40020428
 8002180:	40020440 	.word	0x40020440
 8002184:	40020458 	.word	0x40020458
 8002188:	40020470 	.word	0x40020470
 800218c:	40020488 	.word	0x40020488
 8002190:	400204a0 	.word	0x400204a0
 8002194:	400204b8 	.word	0x400204b8
 8002198:	58025408 	.word	0x58025408
 800219c:	5802541c 	.word	0x5802541c
 80021a0:	58025430 	.word	0x58025430
 80021a4:	58025444 	.word	0x58025444
 80021a8:	58025458 	.word	0x58025458
 80021ac:	5802546c 	.word	0x5802546c
 80021b0:	58025480 	.word	0x58025480
 80021b4:	58025494 	.word	0x58025494
 80021b8:	2300      	movs	r3, #0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d028      	beq.n	8002210 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021cc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d8:	f003 031f 	and.w	r3, r3, #31
 80021dc:	2201      	movs	r2, #1
 80021de:	409a      	lsls	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80021ec:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00c      	beq.n	8002210 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002200:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002204:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800220e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop

0800223c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800223c:	b480      	push	{r7}
 800223e:	b087      	sub	sp, #28
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	460b      	mov	r3, r1
 8002246:	607a      	str	r2, [r7, #4]
 8002248:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800224a:	2300      	movs	r3, #0
 800224c:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e00a      	b.n	800226e <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8002258:	7afb      	ldrb	r3, [r7, #11]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d103      	bne.n	8002266 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	605a      	str	r2, [r3, #4]
      break;
 8002264:	e002      	b.n	800226c <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	75fb      	strb	r3, [r7, #23]
      break;
 800226a:	bf00      	nop
  }

  return status;
 800226c:	7dfb      	ldrb	r3, [r7, #23]
}
 800226e:	4618      	mov	r0, r3
 8002270:	371c      	adds	r7, #28
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
 8002282:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e003      	b.n	8002296 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002294:	2300      	movs	r3, #0
  }
}
 8002296:	4618      	mov	r0, r3
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
	...

080022a4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	0c1b      	lsrs	r3, r3, #16
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 031f 	and.w	r3, r3, #31
 80022c0:	2201      	movs	r2, #1
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	011a      	lsls	r2, r3, #4
 80022cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002300 <HAL_EXTI_IRQHandler+0x5c>)
 80022ce:	4413      	add	r3, r2
 80022d0:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4013      	ands	r3, r2
 80022da:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d009      	beq.n	80022f6 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d002      	beq.n	80022f6 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	4798      	blx	r3
    }
  }
}
 80022f6:	bf00      	nop
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	58000088 	.word	0x58000088

08002304 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002304:	b480      	push	{r7}
 8002306:	b089      	sub	sp, #36	@ 0x24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002312:	4b89      	ldr	r3, [pc, #548]	@ (8002538 <HAL_GPIO_Init+0x234>)
 8002314:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002316:	e194      	b.n	8002642 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	2101      	movs	r1, #1
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	fa01 f303 	lsl.w	r3, r1, r3
 8002324:	4013      	ands	r3, r2
 8002326:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 8186 	beq.w	800263c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 0303 	and.w	r3, r3, #3
 8002338:	2b01      	cmp	r3, #1
 800233a:	d005      	beq.n	8002348 <HAL_GPIO_Init+0x44>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d130      	bne.n	80023aa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	2203      	movs	r2, #3
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	68da      	ldr	r2, [r3, #12]
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4313      	orrs	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800237e:	2201      	movs	r2, #1
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43db      	mvns	r3, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4013      	ands	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	091b      	lsrs	r3, r3, #4
 8002394:	f003 0201 	and.w	r2, r3, #1
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	2b03      	cmp	r3, #3
 80023b4:	d017      	beq.n	80023e6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	2203      	movs	r2, #3
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4313      	orrs	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d123      	bne.n	800243a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	08da      	lsrs	r2, r3, #3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3208      	adds	r2, #8
 80023fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	220f      	movs	r2, #15
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4013      	ands	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	691a      	ldr	r2, [r3, #16]
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4313      	orrs	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	08da      	lsrs	r2, r3, #3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3208      	adds	r2, #8
 8002434:	69b9      	ldr	r1, [r7, #24]
 8002436:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	2203      	movs	r2, #3
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43db      	mvns	r3, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4013      	ands	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f003 0203 	and.w	r2, r3, #3
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4313      	orrs	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 80e0 	beq.w	800263c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247c:	4b2f      	ldr	r3, [pc, #188]	@ (800253c <HAL_GPIO_Init+0x238>)
 800247e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002482:	4a2e      	ldr	r2, [pc, #184]	@ (800253c <HAL_GPIO_Init+0x238>)
 8002484:	f043 0302 	orr.w	r3, r3, #2
 8002488:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800248c:	4b2b      	ldr	r3, [pc, #172]	@ (800253c <HAL_GPIO_Init+0x238>)
 800248e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800249a:	4a29      	ldr	r2, [pc, #164]	@ (8002540 <HAL_GPIO_Init+0x23c>)
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	089b      	lsrs	r3, r3, #2
 80024a0:	3302      	adds	r3, #2
 80024a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	220f      	movs	r2, #15
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a20      	ldr	r2, [pc, #128]	@ (8002544 <HAL_GPIO_Init+0x240>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d052      	beq.n	800256c <HAL_GPIO_Init+0x268>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a1f      	ldr	r2, [pc, #124]	@ (8002548 <HAL_GPIO_Init+0x244>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d031      	beq.n	8002532 <HAL_GPIO_Init+0x22e>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a1e      	ldr	r2, [pc, #120]	@ (800254c <HAL_GPIO_Init+0x248>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d02b      	beq.n	800252e <HAL_GPIO_Init+0x22a>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002550 <HAL_GPIO_Init+0x24c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d025      	beq.n	800252a <HAL_GPIO_Init+0x226>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a1c      	ldr	r2, [pc, #112]	@ (8002554 <HAL_GPIO_Init+0x250>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d01f      	beq.n	8002526 <HAL_GPIO_Init+0x222>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002558 <HAL_GPIO_Init+0x254>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d019      	beq.n	8002522 <HAL_GPIO_Init+0x21e>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a1a      	ldr	r2, [pc, #104]	@ (800255c <HAL_GPIO_Init+0x258>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d013      	beq.n	800251e <HAL_GPIO_Init+0x21a>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a19      	ldr	r2, [pc, #100]	@ (8002560 <HAL_GPIO_Init+0x25c>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d00d      	beq.n	800251a <HAL_GPIO_Init+0x216>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a18      	ldr	r2, [pc, #96]	@ (8002564 <HAL_GPIO_Init+0x260>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d007      	beq.n	8002516 <HAL_GPIO_Init+0x212>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a17      	ldr	r2, [pc, #92]	@ (8002568 <HAL_GPIO_Init+0x264>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d101      	bne.n	8002512 <HAL_GPIO_Init+0x20e>
 800250e:	2309      	movs	r3, #9
 8002510:	e02d      	b.n	800256e <HAL_GPIO_Init+0x26a>
 8002512:	230a      	movs	r3, #10
 8002514:	e02b      	b.n	800256e <HAL_GPIO_Init+0x26a>
 8002516:	2308      	movs	r3, #8
 8002518:	e029      	b.n	800256e <HAL_GPIO_Init+0x26a>
 800251a:	2307      	movs	r3, #7
 800251c:	e027      	b.n	800256e <HAL_GPIO_Init+0x26a>
 800251e:	2306      	movs	r3, #6
 8002520:	e025      	b.n	800256e <HAL_GPIO_Init+0x26a>
 8002522:	2305      	movs	r3, #5
 8002524:	e023      	b.n	800256e <HAL_GPIO_Init+0x26a>
 8002526:	2304      	movs	r3, #4
 8002528:	e021      	b.n	800256e <HAL_GPIO_Init+0x26a>
 800252a:	2303      	movs	r3, #3
 800252c:	e01f      	b.n	800256e <HAL_GPIO_Init+0x26a>
 800252e:	2302      	movs	r3, #2
 8002530:	e01d      	b.n	800256e <HAL_GPIO_Init+0x26a>
 8002532:	2301      	movs	r3, #1
 8002534:	e01b      	b.n	800256e <HAL_GPIO_Init+0x26a>
 8002536:	bf00      	nop
 8002538:	58000080 	.word	0x58000080
 800253c:	58024400 	.word	0x58024400
 8002540:	58000400 	.word	0x58000400
 8002544:	58020000 	.word	0x58020000
 8002548:	58020400 	.word	0x58020400
 800254c:	58020800 	.word	0x58020800
 8002550:	58020c00 	.word	0x58020c00
 8002554:	58021000 	.word	0x58021000
 8002558:	58021400 	.word	0x58021400
 800255c:	58021800 	.word	0x58021800
 8002560:	58021c00 	.word	0x58021c00
 8002564:	58022000 	.word	0x58022000
 8002568:	58022400 	.word	0x58022400
 800256c:	2300      	movs	r3, #0
 800256e:	69fa      	ldr	r2, [r7, #28]
 8002570:	f002 0203 	and.w	r2, r2, #3
 8002574:	0092      	lsls	r2, r2, #2
 8002576:	4093      	lsls	r3, r2
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800257e:	4938      	ldr	r1, [pc, #224]	@ (8002660 <HAL_GPIO_Init+0x35c>)
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	089b      	lsrs	r3, r3, #2
 8002584:	3302      	adds	r3, #2
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800258c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	43db      	mvns	r3, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4013      	ands	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80025b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80025ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	43db      	mvns	r3, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4013      	ands	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80025e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4313      	orrs	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	43db      	mvns	r3, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4013      	ands	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	4313      	orrs	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	3301      	adds	r3, #1
 8002640:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	fa22 f303 	lsr.w	r3, r2, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	f47f ae63 	bne.w	8002318 <HAL_GPIO_Init+0x14>
  }
}
 8002652:	bf00      	nop
 8002654:	bf00      	nop
 8002656:	3724      	adds	r7, #36	@ 0x24
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	58000400 	.word	0x58000400

08002664 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	460b      	mov	r3, r1
 800266e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691a      	ldr	r2, [r3, #16]
 8002674:	887b      	ldrh	r3, [r7, #2]
 8002676:	4013      	ands	r3, r2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d002      	beq.n	8002682 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800267c:	2301      	movs	r3, #1
 800267e:	73fb      	strb	r3, [r7, #15]
 8002680:	e001      	b.n	8002686 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002682:	2300      	movs	r3, #0
 8002684:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002686:	7bfb      	ldrb	r3, [r7, #15]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	807b      	strh	r3, [r7, #2]
 80026a0:	4613      	mov	r3, r2
 80026a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026a4:	787b      	ldrb	r3, [r7, #1]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026aa:	887a      	ldrh	r2, [r7, #2]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80026b0:	e003      	b.n	80026ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80026b2:	887b      	ldrh	r3, [r7, #2]
 80026b4:	041a      	lsls	r2, r3, #16
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	619a      	str	r2, [r3, #24]
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b085      	sub	sp, #20
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
 80026ce:	460b      	mov	r3, r1
 80026d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026d8:	887a      	ldrh	r2, [r7, #2]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	4013      	ands	r3, r2
 80026de:	041a      	lsls	r2, r3, #16
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	43d9      	mvns	r1, r3
 80026e4:	887b      	ldrh	r3, [r7, #2]
 80026e6:	400b      	ands	r3, r1
 80026e8:	431a      	orrs	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	619a      	str	r2, [r3, #24]
}
 80026ee:	bf00      	nop
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
	...

080026fc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002704:	4b19      	ldr	r3, [pc, #100]	@ (800276c <HAL_PWREx_ConfigSupply+0x70>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b04      	cmp	r3, #4
 800270e:	d00a      	beq.n	8002726 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002710:	4b16      	ldr	r3, [pc, #88]	@ (800276c <HAL_PWREx_ConfigSupply+0x70>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	429a      	cmp	r2, r3
 800271c:	d001      	beq.n	8002722 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e01f      	b.n	8002762 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002722:	2300      	movs	r3, #0
 8002724:	e01d      	b.n	8002762 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002726:	4b11      	ldr	r3, [pc, #68]	@ (800276c <HAL_PWREx_ConfigSupply+0x70>)
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	f023 0207 	bic.w	r2, r3, #7
 800272e:	490f      	ldr	r1, [pc, #60]	@ (800276c <HAL_PWREx_ConfigSupply+0x70>)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4313      	orrs	r3, r2
 8002734:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002736:	f7ff f977 	bl	8001a28 <HAL_GetTick>
 800273a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800273c:	e009      	b.n	8002752 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800273e:	f7ff f973 	bl	8001a28 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800274c:	d901      	bls.n	8002752 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e007      	b.n	8002762 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002752:	4b06      	ldr	r3, [pc, #24]	@ (800276c <HAL_PWREx_ConfigSupply+0x70>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800275a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800275e:	d1ee      	bne.n	800273e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	58024800 	.word	0x58024800

08002770 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08c      	sub	sp, #48	@ 0x30
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d102      	bne.n	8002784 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	f000 bc48 	b.w	8003014 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 8088 	beq.w	80028a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002792:	4b99      	ldr	r3, [pc, #612]	@ (80029f8 <HAL_RCC_OscConfig+0x288>)
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800279a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800279c:	4b96      	ldr	r3, [pc, #600]	@ (80029f8 <HAL_RCC_OscConfig+0x288>)
 800279e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80027a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027a4:	2b10      	cmp	r3, #16
 80027a6:	d007      	beq.n	80027b8 <HAL_RCC_OscConfig+0x48>
 80027a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027aa:	2b18      	cmp	r3, #24
 80027ac:	d111      	bne.n	80027d2 <HAL_RCC_OscConfig+0x62>
 80027ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027b0:	f003 0303 	and.w	r3, r3, #3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d10c      	bne.n	80027d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b8:	4b8f      	ldr	r3, [pc, #572]	@ (80029f8 <HAL_RCC_OscConfig+0x288>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d06d      	beq.n	80028a0 <HAL_RCC_OscConfig+0x130>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d169      	bne.n	80028a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	f000 bc21 	b.w	8003014 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027da:	d106      	bne.n	80027ea <HAL_RCC_OscConfig+0x7a>
 80027dc:	4b86      	ldr	r3, [pc, #536]	@ (80029f8 <HAL_RCC_OscConfig+0x288>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a85      	ldr	r2, [pc, #532]	@ (80029f8 <HAL_RCC_OscConfig+0x288>)
 80027e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027e6:	6013      	str	r3, [r2, #0]
 80027e8:	e02e      	b.n	8002848 <HAL_RCC_OscConfig+0xd8>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10c      	bne.n	800280c <HAL_RCC_OscConfig+0x9c>
 80027f2:	4b81      	ldr	r3, [pc, #516]	@ (80029f8 <HAL_RCC_OscConfig+0x288>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a80      	ldr	r2, [pc, #512]	@ (80029f8 <HAL_RCC_OscConfig+0x288>)
 80027f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	4b7e      	ldr	r3, [pc, #504]	@ (80029f8 <HAL_RCC_OscConfig+0x288>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a7d      	ldr	r2, [pc, #500]	@ (80029f8 <HAL_RCC_OscConfig+0x288>)
 8002804:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	e01d      	b.n	8002848 <HAL_RCC_OscConfig+0xd8>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002814:	d10c      	bne.n	8002830 <HAL_RCC_OscConfig+0xc0>
 8002816:	4b78      	ldr	r3, [pc, #480]	@ (80029f8 <HAL_RCC_OscConfig+0x288>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a77      	ldr	r2, [pc, #476]	@ (80029f8 <HAL_RCC_OscConfig+0x288>)
 800281c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002820:	6013      	str	r3, [r2, #0]
 8002822:	4b75      	ldr	r3, [pc, #468]	@ (80029f8 <HAL_RCC_OscConfig+0x288>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a74      	ldr	r2, [pc, #464]	@ (80029f8 <HAL_RCC_OscConfig+0x288>)
 8002828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800282c:	6013      	str	r3, [r2, #0]
 800282e:	e00b      	b.n	8002848 <HAL_RCC_OscConfig+0xd8>
 8002830:	4b71      	ldr	r3, [pc, #452]	@ (80029f8 <HAL_RCC_OscConfig+0x288>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a70      	ldr	r2, [pc, #448]	@ (80029f8 <HAL_RCC_OscConfig+0x288>)
 8002836:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800283a:	6013      	str	r3, [r2, #0]
 800283c:	4b6e      	ldr	r3, [pc, #440]	@ (80029f8 <HAL_RCC_OscConfig+0x288>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a6d      	ldr	r2, [pc, #436]	@ (80029f8 <HAL_RCC_OscConfig+0x288>)
 8002842:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002846:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d013      	beq.n	8002878 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002850:	f7ff f8ea 	bl	8001a28 <HAL_GetTick>
 8002854:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002858:	f7ff f8e6 	bl	8001a28 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b64      	cmp	r3, #100	@ 0x64
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e3d4      	b.n	8003014 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800286a:	4b63      	ldr	r3, [pc, #396]	@ (80029f8 <HAL_RCC_OscConfig+0x288>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0f0      	beq.n	8002858 <HAL_RCC_OscConfig+0xe8>
 8002876:	e014      	b.n	80028a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002878:	f7ff f8d6 	bl	8001a28 <HAL_GetTick>
 800287c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002880:	f7ff f8d2 	bl	8001a28 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b64      	cmp	r3, #100	@ 0x64
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e3c0      	b.n	8003014 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002892:	4b59      	ldr	r3, [pc, #356]	@ (80029f8 <HAL_RCC_OscConfig+0x288>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f0      	bne.n	8002880 <HAL_RCC_OscConfig+0x110>
 800289e:	e000      	b.n	80028a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 80ca 	beq.w	8002a44 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028b0:	4b51      	ldr	r3, [pc, #324]	@ (80029f8 <HAL_RCC_OscConfig+0x288>)
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028b8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028ba:	4b4f      	ldr	r3, [pc, #316]	@ (80029f8 <HAL_RCC_OscConfig+0x288>)
 80028bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028be:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80028c0:	6a3b      	ldr	r3, [r7, #32]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d007      	beq.n	80028d6 <HAL_RCC_OscConfig+0x166>
 80028c6:	6a3b      	ldr	r3, [r7, #32]
 80028c8:	2b18      	cmp	r3, #24
 80028ca:	d156      	bne.n	800297a <HAL_RCC_OscConfig+0x20a>
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	f003 0303 	and.w	r3, r3, #3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d151      	bne.n	800297a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028d6:	4b48      	ldr	r3, [pc, #288]	@ (80029f8 <HAL_RCC_OscConfig+0x288>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d005      	beq.n	80028ee <HAL_RCC_OscConfig+0x17e>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e392      	b.n	8003014 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80028ee:	4b42      	ldr	r3, [pc, #264]	@ (80029f8 <HAL_RCC_OscConfig+0x288>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f023 0219 	bic.w	r2, r3, #25
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	493f      	ldr	r1, [pc, #252]	@ (80029f8 <HAL_RCC_OscConfig+0x288>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002900:	f7ff f892 	bl	8001a28 <HAL_GetTick>
 8002904:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002908:	f7ff f88e 	bl	8001a28 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e37c      	b.n	8003014 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800291a:	4b37      	ldr	r3, [pc, #220]	@ (80029f8 <HAL_RCC_OscConfig+0x288>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002926:	f7ff f8af 	bl	8001a88 <HAL_GetREVID>
 800292a:	4603      	mov	r3, r0
 800292c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002930:	4293      	cmp	r3, r2
 8002932:	d817      	bhi.n	8002964 <HAL_RCC_OscConfig+0x1f4>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	2b40      	cmp	r3, #64	@ 0x40
 800293a:	d108      	bne.n	800294e <HAL_RCC_OscConfig+0x1de>
 800293c:	4b2e      	ldr	r3, [pc, #184]	@ (80029f8 <HAL_RCC_OscConfig+0x288>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002944:	4a2c      	ldr	r2, [pc, #176]	@ (80029f8 <HAL_RCC_OscConfig+0x288>)
 8002946:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800294a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800294c:	e07a      	b.n	8002a44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294e:	4b2a      	ldr	r3, [pc, #168]	@ (80029f8 <HAL_RCC_OscConfig+0x288>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	031b      	lsls	r3, r3, #12
 800295c:	4926      	ldr	r1, [pc, #152]	@ (80029f8 <HAL_RCC_OscConfig+0x288>)
 800295e:	4313      	orrs	r3, r2
 8002960:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002962:	e06f      	b.n	8002a44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002964:	4b24      	ldr	r3, [pc, #144]	@ (80029f8 <HAL_RCC_OscConfig+0x288>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	061b      	lsls	r3, r3, #24
 8002972:	4921      	ldr	r1, [pc, #132]	@ (80029f8 <HAL_RCC_OscConfig+0x288>)
 8002974:	4313      	orrs	r3, r2
 8002976:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002978:	e064      	b.n	8002a44 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d047      	beq.n	8002a12 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002982:	4b1d      	ldr	r3, [pc, #116]	@ (80029f8 <HAL_RCC_OscConfig+0x288>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f023 0219 	bic.w	r2, r3, #25
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	491a      	ldr	r1, [pc, #104]	@ (80029f8 <HAL_RCC_OscConfig+0x288>)
 8002990:	4313      	orrs	r3, r2
 8002992:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002994:	f7ff f848 	bl	8001a28 <HAL_GetTick>
 8002998:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800299c:	f7ff f844 	bl	8001a28 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e332      	b.n	8003014 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029ae:	4b12      	ldr	r3, [pc, #72]	@ (80029f8 <HAL_RCC_OscConfig+0x288>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0304 	and.w	r3, r3, #4
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0f0      	beq.n	800299c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ba:	f7ff f865 	bl	8001a88 <HAL_GetREVID>
 80029be:	4603      	mov	r3, r0
 80029c0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d819      	bhi.n	80029fc <HAL_RCC_OscConfig+0x28c>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	2b40      	cmp	r3, #64	@ 0x40
 80029ce:	d108      	bne.n	80029e2 <HAL_RCC_OscConfig+0x272>
 80029d0:	4b09      	ldr	r3, [pc, #36]	@ (80029f8 <HAL_RCC_OscConfig+0x288>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80029d8:	4a07      	ldr	r2, [pc, #28]	@ (80029f8 <HAL_RCC_OscConfig+0x288>)
 80029da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029de:	6053      	str	r3, [r2, #4]
 80029e0:	e030      	b.n	8002a44 <HAL_RCC_OscConfig+0x2d4>
 80029e2:	4b05      	ldr	r3, [pc, #20]	@ (80029f8 <HAL_RCC_OscConfig+0x288>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	031b      	lsls	r3, r3, #12
 80029f0:	4901      	ldr	r1, [pc, #4]	@ (80029f8 <HAL_RCC_OscConfig+0x288>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	604b      	str	r3, [r1, #4]
 80029f6:	e025      	b.n	8002a44 <HAL_RCC_OscConfig+0x2d4>
 80029f8:	58024400 	.word	0x58024400
 80029fc:	4b9a      	ldr	r3, [pc, #616]	@ (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	061b      	lsls	r3, r3, #24
 8002a0a:	4997      	ldr	r1, [pc, #604]	@ (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	604b      	str	r3, [r1, #4]
 8002a10:	e018      	b.n	8002a44 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a12:	4b95      	ldr	r3, [pc, #596]	@ (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a94      	ldr	r2, [pc, #592]	@ (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002a18:	f023 0301 	bic.w	r3, r3, #1
 8002a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1e:	f7ff f803 	bl	8001a28 <HAL_GetTick>
 8002a22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a26:	f7fe ffff 	bl	8001a28 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e2ed      	b.n	8003014 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a38:	4b8b      	ldr	r3, [pc, #556]	@ (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1f0      	bne.n	8002a26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0310 	and.w	r3, r3, #16
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 80a9 	beq.w	8002ba4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a52:	4b85      	ldr	r3, [pc, #532]	@ (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a5a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a5c:	4b82      	ldr	r3, [pc, #520]	@ (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a60:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d007      	beq.n	8002a78 <HAL_RCC_OscConfig+0x308>
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	2b18      	cmp	r3, #24
 8002a6c:	d13a      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x374>
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	f003 0303 	and.w	r3, r3, #3
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d135      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a78:	4b7b      	ldr	r3, [pc, #492]	@ (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <HAL_RCC_OscConfig+0x320>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	2b80      	cmp	r3, #128	@ 0x80
 8002a8a:	d001      	beq.n	8002a90 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e2c1      	b.n	8003014 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a90:	f7fe fffa 	bl	8001a88 <HAL_GetREVID>
 8002a94:	4603      	mov	r3, r0
 8002a96:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d817      	bhi.n	8002ace <HAL_RCC_OscConfig+0x35e>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	2b20      	cmp	r3, #32
 8002aa4:	d108      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x348>
 8002aa6:	4b70      	ldr	r3, [pc, #448]	@ (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002aae:	4a6e      	ldr	r2, [pc, #440]	@ (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002ab0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002ab4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ab6:	e075      	b.n	8002ba4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ab8:	4b6b      	ldr	r3, [pc, #428]	@ (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	069b      	lsls	r3, r3, #26
 8002ac6:	4968      	ldr	r1, [pc, #416]	@ (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002acc:	e06a      	b.n	8002ba4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ace:	4b66      	ldr	r3, [pc, #408]	@ (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	061b      	lsls	r3, r3, #24
 8002adc:	4962      	ldr	r1, [pc, #392]	@ (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ae2:	e05f      	b.n	8002ba4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d042      	beq.n	8002b72 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002aec:	4b5e      	ldr	r3, [pc, #376]	@ (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a5d      	ldr	r2, [pc, #372]	@ (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002af2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002af6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af8:	f7fe ff96 	bl	8001a28 <HAL_GetTick>
 8002afc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002b00:	f7fe ff92 	bl	8001a28 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e280      	b.n	8003014 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b12:	4b55      	ldr	r3, [pc, #340]	@ (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0f0      	beq.n	8002b00 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b1e:	f7fe ffb3 	bl	8001a88 <HAL_GetREVID>
 8002b22:	4603      	mov	r3, r0
 8002b24:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d817      	bhi.n	8002b5c <HAL_RCC_OscConfig+0x3ec>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	2b20      	cmp	r3, #32
 8002b32:	d108      	bne.n	8002b46 <HAL_RCC_OscConfig+0x3d6>
 8002b34:	4b4c      	ldr	r3, [pc, #304]	@ (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002b3c:	4a4a      	ldr	r2, [pc, #296]	@ (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002b3e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002b42:	6053      	str	r3, [r2, #4]
 8002b44:	e02e      	b.n	8002ba4 <HAL_RCC_OscConfig+0x434>
 8002b46:	4b48      	ldr	r3, [pc, #288]	@ (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	069b      	lsls	r3, r3, #26
 8002b54:	4944      	ldr	r1, [pc, #272]	@ (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	604b      	str	r3, [r1, #4]
 8002b5a:	e023      	b.n	8002ba4 <HAL_RCC_OscConfig+0x434>
 8002b5c:	4b42      	ldr	r3, [pc, #264]	@ (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	061b      	lsls	r3, r3, #24
 8002b6a:	493f      	ldr	r1, [pc, #252]	@ (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	60cb      	str	r3, [r1, #12]
 8002b70:	e018      	b.n	8002ba4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002b72:	4b3d      	ldr	r3, [pc, #244]	@ (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a3c      	ldr	r2, [pc, #240]	@ (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002b78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7e:	f7fe ff53 	bl	8001a28 <HAL_GetTick>
 8002b82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b84:	e008      	b.n	8002b98 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002b86:	f7fe ff4f 	bl	8001a28 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e23d      	b.n	8003014 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b98:	4b33      	ldr	r3, [pc, #204]	@ (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1f0      	bne.n	8002b86 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0308 	and.w	r3, r3, #8
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d036      	beq.n	8002c1e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d019      	beq.n	8002bec <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bb8:	4b2b      	ldr	r3, [pc, #172]	@ (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002bba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bbc:	4a2a      	ldr	r2, [pc, #168]	@ (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002bbe:	f043 0301 	orr.w	r3, r3, #1
 8002bc2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc4:	f7fe ff30 	bl	8001a28 <HAL_GetTick>
 8002bc8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bcc:	f7fe ff2c 	bl	8001a28 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e21a      	b.n	8003014 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bde:	4b22      	ldr	r3, [pc, #136]	@ (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002be0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCC_OscConfig+0x45c>
 8002bea:	e018      	b.n	8002c1e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bec:	4b1e      	ldr	r3, [pc, #120]	@ (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002bee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bf0:	4a1d      	ldr	r2, [pc, #116]	@ (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002bf2:	f023 0301 	bic.w	r3, r3, #1
 8002bf6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf8:	f7fe ff16 	bl	8001a28 <HAL_GetTick>
 8002bfc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c00:	f7fe ff12 	bl	8001a28 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e200      	b.n	8003014 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c12:	4b15      	ldr	r3, [pc, #84]	@ (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002c14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f0      	bne.n	8002c00 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0320 	and.w	r3, r3, #32
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d039      	beq.n	8002c9e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d01c      	beq.n	8002c6c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c32:	4b0d      	ldr	r3, [pc, #52]	@ (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a0c      	ldr	r2, [pc, #48]	@ (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002c38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c3c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c3e:	f7fe fef3 	bl	8001a28 <HAL_GetTick>
 8002c42:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c46:	f7fe feef 	bl	8001a28 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e1dd      	b.n	8003014 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c58:	4b03      	ldr	r3, [pc, #12]	@ (8002c68 <HAL_RCC_OscConfig+0x4f8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0f0      	beq.n	8002c46 <HAL_RCC_OscConfig+0x4d6>
 8002c64:	e01b      	b.n	8002c9e <HAL_RCC_OscConfig+0x52e>
 8002c66:	bf00      	nop
 8002c68:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c6c:	4b9b      	ldr	r3, [pc, #620]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a9a      	ldr	r2, [pc, #616]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002c72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c76:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c78:	f7fe fed6 	bl	8001a28 <HAL_GetTick>
 8002c7c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c80:	f7fe fed2 	bl	8001a28 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e1c0      	b.n	8003014 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c92:	4b92      	ldr	r3, [pc, #584]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0304 	and.w	r3, r3, #4
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f000 8081 	beq.w	8002dae <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002cac:	4b8c      	ldr	r3, [pc, #560]	@ (8002ee0 <HAL_RCC_OscConfig+0x770>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a8b      	ldr	r2, [pc, #556]	@ (8002ee0 <HAL_RCC_OscConfig+0x770>)
 8002cb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cb8:	f7fe feb6 	bl	8001a28 <HAL_GetTick>
 8002cbc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cc0:	f7fe feb2 	bl	8001a28 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b64      	cmp	r3, #100	@ 0x64
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e1a0      	b.n	8003014 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cd2:	4b83      	ldr	r3, [pc, #524]	@ (8002ee0 <HAL_RCC_OscConfig+0x770>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d106      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x584>
 8002ce6:	4b7d      	ldr	r3, [pc, #500]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cea:	4a7c      	ldr	r2, [pc, #496]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cf2:	e02d      	b.n	8002d50 <HAL_RCC_OscConfig+0x5e0>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10c      	bne.n	8002d16 <HAL_RCC_OscConfig+0x5a6>
 8002cfc:	4b77      	ldr	r3, [pc, #476]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d00:	4a76      	ldr	r2, [pc, #472]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002d02:	f023 0301 	bic.w	r3, r3, #1
 8002d06:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d08:	4b74      	ldr	r3, [pc, #464]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d0c:	4a73      	ldr	r2, [pc, #460]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002d0e:	f023 0304 	bic.w	r3, r3, #4
 8002d12:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d14:	e01c      	b.n	8002d50 <HAL_RCC_OscConfig+0x5e0>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	2b05      	cmp	r3, #5
 8002d1c:	d10c      	bne.n	8002d38 <HAL_RCC_OscConfig+0x5c8>
 8002d1e:	4b6f      	ldr	r3, [pc, #444]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d22:	4a6e      	ldr	r2, [pc, #440]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002d24:	f043 0304 	orr.w	r3, r3, #4
 8002d28:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d2a:	4b6c      	ldr	r3, [pc, #432]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d2e:	4a6b      	ldr	r2, [pc, #428]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002d30:	f043 0301 	orr.w	r3, r3, #1
 8002d34:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d36:	e00b      	b.n	8002d50 <HAL_RCC_OscConfig+0x5e0>
 8002d38:	4b68      	ldr	r3, [pc, #416]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d3c:	4a67      	ldr	r2, [pc, #412]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002d3e:	f023 0301 	bic.w	r3, r3, #1
 8002d42:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d44:	4b65      	ldr	r3, [pc, #404]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d48:	4a64      	ldr	r2, [pc, #400]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002d4a:	f023 0304 	bic.w	r3, r3, #4
 8002d4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d015      	beq.n	8002d84 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d58:	f7fe fe66 	bl	8001a28 <HAL_GetTick>
 8002d5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d5e:	e00a      	b.n	8002d76 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d60:	f7fe fe62 	bl	8001a28 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e14e      	b.n	8003014 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d76:	4b59      	ldr	r3, [pc, #356]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0ee      	beq.n	8002d60 <HAL_RCC_OscConfig+0x5f0>
 8002d82:	e014      	b.n	8002dae <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d84:	f7fe fe50 	bl	8001a28 <HAL_GetTick>
 8002d88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d8a:	e00a      	b.n	8002da2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d8c:	f7fe fe4c 	bl	8001a28 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e138      	b.n	8003014 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002da2:	4b4e      	ldr	r3, [pc, #312]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1ee      	bne.n	8002d8c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 812d 	beq.w	8003012 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002db8:	4b48      	ldr	r3, [pc, #288]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002dc0:	2b18      	cmp	r3, #24
 8002dc2:	f000 80bd 	beq.w	8002f40 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	f040 809e 	bne.w	8002f0c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd0:	4b42      	ldr	r3, [pc, #264]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a41      	ldr	r2, [pc, #260]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002dd6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ddc:	f7fe fe24 	bl	8001a28 <HAL_GetTick>
 8002de0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de4:	f7fe fe20 	bl	8001a28 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e10e      	b.n	8003014 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002df6:	4b39      	ldr	r3, [pc, #228]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f0      	bne.n	8002de4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e02:	4b36      	ldr	r3, [pc, #216]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002e04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e06:	4b37      	ldr	r3, [pc, #220]	@ (8002ee4 <HAL_RCC_OscConfig+0x774>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002e12:	0112      	lsls	r2, r2, #4
 8002e14:	430a      	orrs	r2, r1
 8002e16:	4931      	ldr	r1, [pc, #196]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	628b      	str	r3, [r1, #40]	@ 0x28
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e20:	3b01      	subs	r3, #1
 8002e22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	025b      	lsls	r3, r3, #9
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	431a      	orrs	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e36:	3b01      	subs	r3, #1
 8002e38:	041b      	lsls	r3, r3, #16
 8002e3a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e44:	3b01      	subs	r3, #1
 8002e46:	061b      	lsls	r3, r3, #24
 8002e48:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002e4c:	4923      	ldr	r1, [pc, #140]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002e52:	4b22      	ldr	r3, [pc, #136]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e56:	4a21      	ldr	r2, [pc, #132]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002e58:	f023 0301 	bic.w	r3, r3, #1
 8002e5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e5e:	4b1f      	ldr	r3, [pc, #124]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002e60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e62:	4b21      	ldr	r3, [pc, #132]	@ (8002ee8 <HAL_RCC_OscConfig+0x778>)
 8002e64:	4013      	ands	r3, r2
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e6a:	00d2      	lsls	r2, r2, #3
 8002e6c:	491b      	ldr	r1, [pc, #108]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002e72:	4b1a      	ldr	r3, [pc, #104]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e76:	f023 020c 	bic.w	r2, r3, #12
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7e:	4917      	ldr	r1, [pc, #92]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002e84:	4b15      	ldr	r3, [pc, #84]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e88:	f023 0202 	bic.w	r2, r3, #2
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e90:	4912      	ldr	r1, [pc, #72]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002e96:	4b11      	ldr	r3, [pc, #68]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e9a:	4a10      	ldr	r2, [pc, #64]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ea0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea6:	4a0d      	ldr	r2, [pc, #52]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002ea8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002eae:	4b0b      	ldr	r3, [pc, #44]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002eb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002eb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002eba:	4b08      	ldr	r3, [pc, #32]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ebe:	4a07      	ldr	r2, [pc, #28]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002ec0:	f043 0301 	orr.w	r3, r3, #1
 8002ec4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ec6:	4b05      	ldr	r3, [pc, #20]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a04      	ldr	r2, [pc, #16]	@ (8002edc <HAL_RCC_OscConfig+0x76c>)
 8002ecc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ed0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed2:	f7fe fda9 	bl	8001a28 <HAL_GetTick>
 8002ed6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ed8:	e011      	b.n	8002efe <HAL_RCC_OscConfig+0x78e>
 8002eda:	bf00      	nop
 8002edc:	58024400 	.word	0x58024400
 8002ee0:	58024800 	.word	0x58024800
 8002ee4:	fffffc0c 	.word	0xfffffc0c
 8002ee8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eec:	f7fe fd9c 	bl	8001a28 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e08a      	b.n	8003014 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002efe:	4b47      	ldr	r3, [pc, #284]	@ (800301c <HAL_RCC_OscConfig+0x8ac>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0f0      	beq.n	8002eec <HAL_RCC_OscConfig+0x77c>
 8002f0a:	e082      	b.n	8003012 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0c:	4b43      	ldr	r3, [pc, #268]	@ (800301c <HAL_RCC_OscConfig+0x8ac>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a42      	ldr	r2, [pc, #264]	@ (800301c <HAL_RCC_OscConfig+0x8ac>)
 8002f12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f18:	f7fe fd86 	bl	8001a28 <HAL_GetTick>
 8002f1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f20:	f7fe fd82 	bl	8001a28 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e070      	b.n	8003014 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f32:	4b3a      	ldr	r3, [pc, #232]	@ (800301c <HAL_RCC_OscConfig+0x8ac>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1f0      	bne.n	8002f20 <HAL_RCC_OscConfig+0x7b0>
 8002f3e:	e068      	b.n	8003012 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002f40:	4b36      	ldr	r3, [pc, #216]	@ (800301c <HAL_RCC_OscConfig+0x8ac>)
 8002f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f44:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002f46:	4b35      	ldr	r3, [pc, #212]	@ (800301c <HAL_RCC_OscConfig+0x8ac>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d031      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	f003 0203 	and.w	r2, r3, #3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d12a      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	091b      	lsrs	r3, r3, #4
 8002f66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d122      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d11a      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	0a5b      	lsrs	r3, r3, #9
 8002f86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f8e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d111      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	0c1b      	lsrs	r3, r3, #16
 8002f98:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fa0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d108      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	0e1b      	lsrs	r3, r3, #24
 8002faa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fb2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d001      	beq.n	8002fbc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e02b      	b.n	8003014 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002fbc:	4b17      	ldr	r3, [pc, #92]	@ (800301c <HAL_RCC_OscConfig+0x8ac>)
 8002fbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fc0:	08db      	lsrs	r3, r3, #3
 8002fc2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002fc6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d01f      	beq.n	8003012 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002fd2:	4b12      	ldr	r3, [pc, #72]	@ (800301c <HAL_RCC_OscConfig+0x8ac>)
 8002fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd6:	4a11      	ldr	r2, [pc, #68]	@ (800301c <HAL_RCC_OscConfig+0x8ac>)
 8002fd8:	f023 0301 	bic.w	r3, r3, #1
 8002fdc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fde:	f7fe fd23 	bl	8001a28 <HAL_GetTick>
 8002fe2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002fe4:	bf00      	nop
 8002fe6:	f7fe fd1f 	bl	8001a28 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d0f9      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800301c <HAL_RCC_OscConfig+0x8ac>)
 8002ff4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8003020 <HAL_RCC_OscConfig+0x8b0>)
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ffe:	00d2      	lsls	r2, r2, #3
 8003000:	4906      	ldr	r1, [pc, #24]	@ (800301c <HAL_RCC_OscConfig+0x8ac>)
 8003002:	4313      	orrs	r3, r2
 8003004:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003006:	4b05      	ldr	r3, [pc, #20]	@ (800301c <HAL_RCC_OscConfig+0x8ac>)
 8003008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800300a:	4a04      	ldr	r2, [pc, #16]	@ (800301c <HAL_RCC_OscConfig+0x8ac>)
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3730      	adds	r7, #48	@ 0x30
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	58024400 	.word	0x58024400
 8003020:	ffff0007 	.word	0xffff0007

08003024 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e19c      	b.n	8003372 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003038:	4b8a      	ldr	r3, [pc, #552]	@ (8003264 <HAL_RCC_ClockConfig+0x240>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 030f 	and.w	r3, r3, #15
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	429a      	cmp	r2, r3
 8003044:	d910      	bls.n	8003068 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003046:	4b87      	ldr	r3, [pc, #540]	@ (8003264 <HAL_RCC_ClockConfig+0x240>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f023 020f 	bic.w	r2, r3, #15
 800304e:	4985      	ldr	r1, [pc, #532]	@ (8003264 <HAL_RCC_ClockConfig+0x240>)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	4313      	orrs	r3, r2
 8003054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003056:	4b83      	ldr	r3, [pc, #524]	@ (8003264 <HAL_RCC_ClockConfig+0x240>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	429a      	cmp	r2, r3
 8003062:	d001      	beq.n	8003068 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e184      	b.n	8003372 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	d010      	beq.n	8003096 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691a      	ldr	r2, [r3, #16]
 8003078:	4b7b      	ldr	r3, [pc, #492]	@ (8003268 <HAL_RCC_ClockConfig+0x244>)
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003080:	429a      	cmp	r2, r3
 8003082:	d908      	bls.n	8003096 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003084:	4b78      	ldr	r3, [pc, #480]	@ (8003268 <HAL_RCC_ClockConfig+0x244>)
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	4975      	ldr	r1, [pc, #468]	@ (8003268 <HAL_RCC_ClockConfig+0x244>)
 8003092:	4313      	orrs	r3, r2
 8003094:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d010      	beq.n	80030c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	695a      	ldr	r2, [r3, #20]
 80030a6:	4b70      	ldr	r3, [pc, #448]	@ (8003268 <HAL_RCC_ClockConfig+0x244>)
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d908      	bls.n	80030c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80030b2:	4b6d      	ldr	r3, [pc, #436]	@ (8003268 <HAL_RCC_ClockConfig+0x244>)
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	496a      	ldr	r1, [pc, #424]	@ (8003268 <HAL_RCC_ClockConfig+0x244>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0310 	and.w	r3, r3, #16
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d010      	beq.n	80030f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	699a      	ldr	r2, [r3, #24]
 80030d4:	4b64      	ldr	r3, [pc, #400]	@ (8003268 <HAL_RCC_ClockConfig+0x244>)
 80030d6:	69db      	ldr	r3, [r3, #28]
 80030d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80030dc:	429a      	cmp	r2, r3
 80030de:	d908      	bls.n	80030f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80030e0:	4b61      	ldr	r3, [pc, #388]	@ (8003268 <HAL_RCC_ClockConfig+0x244>)
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	495e      	ldr	r1, [pc, #376]	@ (8003268 <HAL_RCC_ClockConfig+0x244>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0320 	and.w	r3, r3, #32
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d010      	beq.n	8003120 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69da      	ldr	r2, [r3, #28]
 8003102:	4b59      	ldr	r3, [pc, #356]	@ (8003268 <HAL_RCC_ClockConfig+0x244>)
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800310a:	429a      	cmp	r2, r3
 800310c:	d908      	bls.n	8003120 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800310e:	4b56      	ldr	r3, [pc, #344]	@ (8003268 <HAL_RCC_ClockConfig+0x244>)
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	4953      	ldr	r1, [pc, #332]	@ (8003268 <HAL_RCC_ClockConfig+0x244>)
 800311c:	4313      	orrs	r3, r2
 800311e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d010      	beq.n	800314e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68da      	ldr	r2, [r3, #12]
 8003130:	4b4d      	ldr	r3, [pc, #308]	@ (8003268 <HAL_RCC_ClockConfig+0x244>)
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	f003 030f 	and.w	r3, r3, #15
 8003138:	429a      	cmp	r2, r3
 800313a:	d908      	bls.n	800314e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800313c:	4b4a      	ldr	r3, [pc, #296]	@ (8003268 <HAL_RCC_ClockConfig+0x244>)
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	f023 020f 	bic.w	r2, r3, #15
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	4947      	ldr	r1, [pc, #284]	@ (8003268 <HAL_RCC_ClockConfig+0x244>)
 800314a:	4313      	orrs	r3, r2
 800314c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d055      	beq.n	8003206 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800315a:	4b43      	ldr	r3, [pc, #268]	@ (8003268 <HAL_RCC_ClockConfig+0x244>)
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	4940      	ldr	r1, [pc, #256]	@ (8003268 <HAL_RCC_ClockConfig+0x244>)
 8003168:	4313      	orrs	r3, r2
 800316a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2b02      	cmp	r3, #2
 8003172:	d107      	bne.n	8003184 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003174:	4b3c      	ldr	r3, [pc, #240]	@ (8003268 <HAL_RCC_ClockConfig+0x244>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d121      	bne.n	80031c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e0f6      	b.n	8003372 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b03      	cmp	r3, #3
 800318a:	d107      	bne.n	800319c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800318c:	4b36      	ldr	r3, [pc, #216]	@ (8003268 <HAL_RCC_ClockConfig+0x244>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d115      	bne.n	80031c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e0ea      	b.n	8003372 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d107      	bne.n	80031b4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031a4:	4b30      	ldr	r3, [pc, #192]	@ (8003268 <HAL_RCC_ClockConfig+0x244>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d109      	bne.n	80031c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e0de      	b.n	8003372 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031b4:	4b2c      	ldr	r3, [pc, #176]	@ (8003268 <HAL_RCC_ClockConfig+0x244>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e0d6      	b.n	8003372 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031c4:	4b28      	ldr	r3, [pc, #160]	@ (8003268 <HAL_RCC_ClockConfig+0x244>)
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	f023 0207 	bic.w	r2, r3, #7
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	4925      	ldr	r1, [pc, #148]	@ (8003268 <HAL_RCC_ClockConfig+0x244>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031d6:	f7fe fc27 	bl	8001a28 <HAL_GetTick>
 80031da:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031dc:	e00a      	b.n	80031f4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031de:	f7fe fc23 	bl	8001a28 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e0be      	b.n	8003372 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f4:	4b1c      	ldr	r3, [pc, #112]	@ (8003268 <HAL_RCC_ClockConfig+0x244>)
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	429a      	cmp	r2, r3
 8003204:	d1eb      	bne.n	80031de <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d010      	beq.n	8003234 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68da      	ldr	r2, [r3, #12]
 8003216:	4b14      	ldr	r3, [pc, #80]	@ (8003268 <HAL_RCC_ClockConfig+0x244>)
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	f003 030f 	and.w	r3, r3, #15
 800321e:	429a      	cmp	r2, r3
 8003220:	d208      	bcs.n	8003234 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003222:	4b11      	ldr	r3, [pc, #68]	@ (8003268 <HAL_RCC_ClockConfig+0x244>)
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	f023 020f 	bic.w	r2, r3, #15
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	490e      	ldr	r1, [pc, #56]	@ (8003268 <HAL_RCC_ClockConfig+0x244>)
 8003230:	4313      	orrs	r3, r2
 8003232:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003234:	4b0b      	ldr	r3, [pc, #44]	@ (8003264 <HAL_RCC_ClockConfig+0x240>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 030f 	and.w	r3, r3, #15
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d214      	bcs.n	800326c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003242:	4b08      	ldr	r3, [pc, #32]	@ (8003264 <HAL_RCC_ClockConfig+0x240>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f023 020f 	bic.w	r2, r3, #15
 800324a:	4906      	ldr	r1, [pc, #24]	@ (8003264 <HAL_RCC_ClockConfig+0x240>)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	4313      	orrs	r3, r2
 8003250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003252:	4b04      	ldr	r3, [pc, #16]	@ (8003264 <HAL_RCC_ClockConfig+0x240>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	429a      	cmp	r2, r3
 800325e:	d005      	beq.n	800326c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e086      	b.n	8003372 <HAL_RCC_ClockConfig+0x34e>
 8003264:	52002000 	.word	0x52002000
 8003268:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b00      	cmp	r3, #0
 8003276:	d010      	beq.n	800329a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691a      	ldr	r2, [r3, #16]
 800327c:	4b3f      	ldr	r3, [pc, #252]	@ (800337c <HAL_RCC_ClockConfig+0x358>)
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003284:	429a      	cmp	r2, r3
 8003286:	d208      	bcs.n	800329a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003288:	4b3c      	ldr	r3, [pc, #240]	@ (800337c <HAL_RCC_ClockConfig+0x358>)
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	4939      	ldr	r1, [pc, #228]	@ (800337c <HAL_RCC_ClockConfig+0x358>)
 8003296:	4313      	orrs	r3, r2
 8003298:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0308 	and.w	r3, r3, #8
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d010      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	695a      	ldr	r2, [r3, #20]
 80032aa:	4b34      	ldr	r3, [pc, #208]	@ (800337c <HAL_RCC_ClockConfig+0x358>)
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d208      	bcs.n	80032c8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80032b6:	4b31      	ldr	r3, [pc, #196]	@ (800337c <HAL_RCC_ClockConfig+0x358>)
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	492e      	ldr	r1, [pc, #184]	@ (800337c <HAL_RCC_ClockConfig+0x358>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0310 	and.w	r3, r3, #16
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d010      	beq.n	80032f6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	699a      	ldr	r2, [r3, #24]
 80032d8:	4b28      	ldr	r3, [pc, #160]	@ (800337c <HAL_RCC_ClockConfig+0x358>)
 80032da:	69db      	ldr	r3, [r3, #28]
 80032dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d208      	bcs.n	80032f6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80032e4:	4b25      	ldr	r3, [pc, #148]	@ (800337c <HAL_RCC_ClockConfig+0x358>)
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	4922      	ldr	r1, [pc, #136]	@ (800337c <HAL_RCC_ClockConfig+0x358>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0320 	and.w	r3, r3, #32
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d010      	beq.n	8003324 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69da      	ldr	r2, [r3, #28]
 8003306:	4b1d      	ldr	r3, [pc, #116]	@ (800337c <HAL_RCC_ClockConfig+0x358>)
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800330e:	429a      	cmp	r2, r3
 8003310:	d208      	bcs.n	8003324 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003312:	4b1a      	ldr	r3, [pc, #104]	@ (800337c <HAL_RCC_ClockConfig+0x358>)
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	4917      	ldr	r1, [pc, #92]	@ (800337c <HAL_RCC_ClockConfig+0x358>)
 8003320:	4313      	orrs	r3, r2
 8003322:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003324:	f000 f834 	bl	8003390 <HAL_RCC_GetSysClockFreq>
 8003328:	4602      	mov	r2, r0
 800332a:	4b14      	ldr	r3, [pc, #80]	@ (800337c <HAL_RCC_ClockConfig+0x358>)
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	0a1b      	lsrs	r3, r3, #8
 8003330:	f003 030f 	and.w	r3, r3, #15
 8003334:	4912      	ldr	r1, [pc, #72]	@ (8003380 <HAL_RCC_ClockConfig+0x35c>)
 8003336:	5ccb      	ldrb	r3, [r1, r3]
 8003338:	f003 031f 	and.w	r3, r3, #31
 800333c:	fa22 f303 	lsr.w	r3, r2, r3
 8003340:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003342:	4b0e      	ldr	r3, [pc, #56]	@ (800337c <HAL_RCC_ClockConfig+0x358>)
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	4a0d      	ldr	r2, [pc, #52]	@ (8003380 <HAL_RCC_ClockConfig+0x35c>)
 800334c:	5cd3      	ldrb	r3, [r2, r3]
 800334e:	f003 031f 	and.w	r3, r3, #31
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	fa22 f303 	lsr.w	r3, r2, r3
 8003358:	4a0a      	ldr	r2, [pc, #40]	@ (8003384 <HAL_RCC_ClockConfig+0x360>)
 800335a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800335c:	4a0a      	ldr	r2, [pc, #40]	@ (8003388 <HAL_RCC_ClockConfig+0x364>)
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003362:	4b0a      	ldr	r3, [pc, #40]	@ (800338c <HAL_RCC_ClockConfig+0x368>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f7fe fb14 	bl	8001994 <HAL_InitTick>
 800336c:	4603      	mov	r3, r0
 800336e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003370:	7bfb      	ldrb	r3, [r7, #15]
}
 8003372:	4618      	mov	r0, r3
 8003374:	3718      	adds	r7, #24
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	58024400 	.word	0x58024400
 8003380:	08009e0c 	.word	0x08009e0c
 8003384:	24000004 	.word	0x24000004
 8003388:	24000000 	.word	0x24000000
 800338c:	24000024 	.word	0x24000024

08003390 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003390:	b480      	push	{r7}
 8003392:	b089      	sub	sp, #36	@ 0x24
 8003394:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003396:	4bb3      	ldr	r3, [pc, #716]	@ (8003664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800339e:	2b18      	cmp	r3, #24
 80033a0:	f200 8155 	bhi.w	800364e <HAL_RCC_GetSysClockFreq+0x2be>
 80033a4:	a201      	add	r2, pc, #4	@ (adr r2, 80033ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80033a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033aa:	bf00      	nop
 80033ac:	08003411 	.word	0x08003411
 80033b0:	0800364f 	.word	0x0800364f
 80033b4:	0800364f 	.word	0x0800364f
 80033b8:	0800364f 	.word	0x0800364f
 80033bc:	0800364f 	.word	0x0800364f
 80033c0:	0800364f 	.word	0x0800364f
 80033c4:	0800364f 	.word	0x0800364f
 80033c8:	0800364f 	.word	0x0800364f
 80033cc:	08003437 	.word	0x08003437
 80033d0:	0800364f 	.word	0x0800364f
 80033d4:	0800364f 	.word	0x0800364f
 80033d8:	0800364f 	.word	0x0800364f
 80033dc:	0800364f 	.word	0x0800364f
 80033e0:	0800364f 	.word	0x0800364f
 80033e4:	0800364f 	.word	0x0800364f
 80033e8:	0800364f 	.word	0x0800364f
 80033ec:	0800343d 	.word	0x0800343d
 80033f0:	0800364f 	.word	0x0800364f
 80033f4:	0800364f 	.word	0x0800364f
 80033f8:	0800364f 	.word	0x0800364f
 80033fc:	0800364f 	.word	0x0800364f
 8003400:	0800364f 	.word	0x0800364f
 8003404:	0800364f 	.word	0x0800364f
 8003408:	0800364f 	.word	0x0800364f
 800340c:	08003443 	.word	0x08003443
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003410:	4b94      	ldr	r3, [pc, #592]	@ (8003664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0320 	and.w	r3, r3, #32
 8003418:	2b00      	cmp	r3, #0
 800341a:	d009      	beq.n	8003430 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800341c:	4b91      	ldr	r3, [pc, #580]	@ (8003664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	08db      	lsrs	r3, r3, #3
 8003422:	f003 0303 	and.w	r3, r3, #3
 8003426:	4a90      	ldr	r2, [pc, #576]	@ (8003668 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003428:	fa22 f303 	lsr.w	r3, r2, r3
 800342c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800342e:	e111      	b.n	8003654 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003430:	4b8d      	ldr	r3, [pc, #564]	@ (8003668 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003432:	61bb      	str	r3, [r7, #24]
      break;
 8003434:	e10e      	b.n	8003654 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003436:	4b8d      	ldr	r3, [pc, #564]	@ (800366c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003438:	61bb      	str	r3, [r7, #24]
      break;
 800343a:	e10b      	b.n	8003654 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800343c:	4b8c      	ldr	r3, [pc, #560]	@ (8003670 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800343e:	61bb      	str	r3, [r7, #24]
      break;
 8003440:	e108      	b.n	8003654 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003442:	4b88      	ldr	r3, [pc, #544]	@ (8003664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800344c:	4b85      	ldr	r3, [pc, #532]	@ (8003664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800344e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003450:	091b      	lsrs	r3, r3, #4
 8003452:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003456:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003458:	4b82      	ldr	r3, [pc, #520]	@ (8003664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800345a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003462:	4b80      	ldr	r3, [pc, #512]	@ (8003664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003466:	08db      	lsrs	r3, r3, #3
 8003468:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	fb02 f303 	mul.w	r3, r2, r3
 8003472:	ee07 3a90 	vmov	s15, r3
 8003476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800347a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 80e1 	beq.w	8003648 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	2b02      	cmp	r3, #2
 800348a:	f000 8083 	beq.w	8003594 <HAL_RCC_GetSysClockFreq+0x204>
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2b02      	cmp	r3, #2
 8003492:	f200 80a1 	bhi.w	80035d8 <HAL_RCC_GetSysClockFreq+0x248>
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <HAL_RCC_GetSysClockFreq+0x114>
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d056      	beq.n	8003550 <HAL_RCC_GetSysClockFreq+0x1c0>
 80034a2:	e099      	b.n	80035d8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034a4:	4b6f      	ldr	r3, [pc, #444]	@ (8003664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0320 	and.w	r3, r3, #32
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d02d      	beq.n	800350c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80034b0:	4b6c      	ldr	r3, [pc, #432]	@ (8003664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	08db      	lsrs	r3, r3, #3
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	4a6b      	ldr	r2, [pc, #428]	@ (8003668 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80034bc:	fa22 f303 	lsr.w	r3, r2, r3
 80034c0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	ee07 3a90 	vmov	s15, r3
 80034c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	ee07 3a90 	vmov	s15, r3
 80034d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034da:	4b62      	ldr	r3, [pc, #392]	@ (8003664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034e2:	ee07 3a90 	vmov	s15, r3
 80034e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80034ee:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003674 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003506:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800350a:	e087      	b.n	800361c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	ee07 3a90 	vmov	s15, r3
 8003512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003516:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003678 <HAL_RCC_GetSysClockFreq+0x2e8>
 800351a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800351e:	4b51      	ldr	r3, [pc, #324]	@ (8003664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003526:	ee07 3a90 	vmov	s15, r3
 800352a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800352e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003532:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003674 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800353a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800353e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800354a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800354e:	e065      	b.n	800361c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	ee07 3a90 	vmov	s15, r3
 8003556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800355a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800367c <HAL_RCC_GetSysClockFreq+0x2ec>
 800355e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003562:	4b40      	ldr	r3, [pc, #256]	@ (8003664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800356a:	ee07 3a90 	vmov	s15, r3
 800356e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003572:	ed97 6a02 	vldr	s12, [r7, #8]
 8003576:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003674 <HAL_RCC_GetSysClockFreq+0x2e4>
 800357a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800357e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003582:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800358a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800358e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003592:	e043      	b.n	800361c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	ee07 3a90 	vmov	s15, r3
 800359a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800359e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003680 <HAL_RCC_GetSysClockFreq+0x2f0>
 80035a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035a6:	4b2f      	ldr	r3, [pc, #188]	@ (8003664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ae:	ee07 3a90 	vmov	s15, r3
 80035b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80035ba:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003674 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80035ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80035d6:	e021      	b.n	800361c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	ee07 3a90 	vmov	s15, r3
 80035de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035e2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800367c <HAL_RCC_GetSysClockFreq+0x2ec>
 80035e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035f2:	ee07 3a90 	vmov	s15, r3
 80035f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80035fe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003674 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800360a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800360e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003616:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800361a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800361c:	4b11      	ldr	r3, [pc, #68]	@ (8003664 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800361e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003620:	0a5b      	lsrs	r3, r3, #9
 8003622:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003626:	3301      	adds	r3, #1
 8003628:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	ee07 3a90 	vmov	s15, r3
 8003630:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003634:	edd7 6a07 	vldr	s13, [r7, #28]
 8003638:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800363c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003640:	ee17 3a90 	vmov	r3, s15
 8003644:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003646:	e005      	b.n	8003654 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003648:	2300      	movs	r3, #0
 800364a:	61bb      	str	r3, [r7, #24]
      break;
 800364c:	e002      	b.n	8003654 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800364e:	4b07      	ldr	r3, [pc, #28]	@ (800366c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003650:	61bb      	str	r3, [r7, #24]
      break;
 8003652:	bf00      	nop
  }

  return sysclockfreq;
 8003654:	69bb      	ldr	r3, [r7, #24]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3724      	adds	r7, #36	@ 0x24
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	58024400 	.word	0x58024400
 8003668:	03d09000 	.word	0x03d09000
 800366c:	003d0900 	.word	0x003d0900
 8003670:	017d7840 	.word	0x017d7840
 8003674:	46000000 	.word	0x46000000
 8003678:	4c742400 	.word	0x4c742400
 800367c:	4a742400 	.word	0x4a742400
 8003680:	4bbebc20 	.word	0x4bbebc20

08003684 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800368a:	f7ff fe81 	bl	8003390 <HAL_RCC_GetSysClockFreq>
 800368e:	4602      	mov	r2, r0
 8003690:	4b10      	ldr	r3, [pc, #64]	@ (80036d4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	0a1b      	lsrs	r3, r3, #8
 8003696:	f003 030f 	and.w	r3, r3, #15
 800369a:	490f      	ldr	r1, [pc, #60]	@ (80036d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800369c:	5ccb      	ldrb	r3, [r1, r3]
 800369e:	f003 031f 	and.w	r3, r3, #31
 80036a2:	fa22 f303 	lsr.w	r3, r2, r3
 80036a6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036a8:	4b0a      	ldr	r3, [pc, #40]	@ (80036d4 <HAL_RCC_GetHCLKFreq+0x50>)
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	f003 030f 	and.w	r3, r3, #15
 80036b0:	4a09      	ldr	r2, [pc, #36]	@ (80036d8 <HAL_RCC_GetHCLKFreq+0x54>)
 80036b2:	5cd3      	ldrb	r3, [r2, r3]
 80036b4:	f003 031f 	and.w	r3, r3, #31
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	fa22 f303 	lsr.w	r3, r2, r3
 80036be:	4a07      	ldr	r2, [pc, #28]	@ (80036dc <HAL_RCC_GetHCLKFreq+0x58>)
 80036c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80036c2:	4a07      	ldr	r2, [pc, #28]	@ (80036e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80036c8:	4b04      	ldr	r3, [pc, #16]	@ (80036dc <HAL_RCC_GetHCLKFreq+0x58>)
 80036ca:	681b      	ldr	r3, [r3, #0]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	58024400 	.word	0x58024400
 80036d8:	08009e0c 	.word	0x08009e0c
 80036dc:	24000004 	.word	0x24000004
 80036e0:	24000000 	.word	0x24000000

080036e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80036e8:	f7ff ffcc 	bl	8003684 <HAL_RCC_GetHCLKFreq>
 80036ec:	4602      	mov	r2, r0
 80036ee:	4b06      	ldr	r3, [pc, #24]	@ (8003708 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	091b      	lsrs	r3, r3, #4
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	4904      	ldr	r1, [pc, #16]	@ (800370c <HAL_RCC_GetPCLK1Freq+0x28>)
 80036fa:	5ccb      	ldrb	r3, [r1, r3]
 80036fc:	f003 031f 	and.w	r3, r3, #31
 8003700:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003704:	4618      	mov	r0, r3
 8003706:	bd80      	pop	{r7, pc}
 8003708:	58024400 	.word	0x58024400
 800370c:	08009e0c 	.word	0x08009e0c

08003710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003714:	f7ff ffb6 	bl	8003684 <HAL_RCC_GetHCLKFreq>
 8003718:	4602      	mov	r2, r0
 800371a:	4b06      	ldr	r3, [pc, #24]	@ (8003734 <HAL_RCC_GetPCLK2Freq+0x24>)
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	0a1b      	lsrs	r3, r3, #8
 8003720:	f003 0307 	and.w	r3, r3, #7
 8003724:	4904      	ldr	r1, [pc, #16]	@ (8003738 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003726:	5ccb      	ldrb	r3, [r1, r3]
 8003728:	f003 031f 	and.w	r3, r3, #31
 800372c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003730:	4618      	mov	r0, r3
 8003732:	bd80      	pop	{r7, pc}
 8003734:	58024400 	.word	0x58024400
 8003738:	08009e0c 	.word	0x08009e0c

0800373c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800373c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003740:	b0ca      	sub	sp, #296	@ 0x128
 8003742:	af00      	add	r7, sp, #0
 8003744:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003748:	2300      	movs	r3, #0
 800374a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800374e:	2300      	movs	r3, #0
 8003750:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003760:	2500      	movs	r5, #0
 8003762:	ea54 0305 	orrs.w	r3, r4, r5
 8003766:	d049      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800376c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800376e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003772:	d02f      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003774:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003778:	d828      	bhi.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800377a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800377e:	d01a      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003780:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003784:	d822      	bhi.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800378a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800378e:	d007      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003790:	e01c      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003792:	4bb8      	ldr	r3, [pc, #736]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003796:	4ab7      	ldr	r2, [pc, #732]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003798:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800379c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800379e:	e01a      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a4:	3308      	adds	r3, #8
 80037a6:	2102      	movs	r1, #2
 80037a8:	4618      	mov	r0, r3
 80037aa:	f001 fc8f 	bl	80050cc <RCCEx_PLL2_Config>
 80037ae:	4603      	mov	r3, r0
 80037b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80037b4:	e00f      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ba:	3328      	adds	r3, #40	@ 0x28
 80037bc:	2102      	movs	r1, #2
 80037be:	4618      	mov	r0, r3
 80037c0:	f001 fd36 	bl	8005230 <RCCEx_PLL3_Config>
 80037c4:	4603      	mov	r3, r0
 80037c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80037ca:	e004      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037d2:	e000      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80037d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10a      	bne.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80037de:	4ba5      	ldr	r3, [pc, #660]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037e2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80037e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037ec:	4aa1      	ldr	r2, [pc, #644]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037ee:	430b      	orrs	r3, r1
 80037f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80037f2:	e003      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80037fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003804:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003808:	f04f 0900 	mov.w	r9, #0
 800380c:	ea58 0309 	orrs.w	r3, r8, r9
 8003810:	d047      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003818:	2b04      	cmp	r3, #4
 800381a:	d82a      	bhi.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800381c:	a201      	add	r2, pc, #4	@ (adr r2, 8003824 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800381e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003822:	bf00      	nop
 8003824:	08003839 	.word	0x08003839
 8003828:	08003847 	.word	0x08003847
 800382c:	0800385d 	.word	0x0800385d
 8003830:	0800387b 	.word	0x0800387b
 8003834:	0800387b 	.word	0x0800387b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003838:	4b8e      	ldr	r3, [pc, #568]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800383a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800383c:	4a8d      	ldr	r2, [pc, #564]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800383e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003842:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003844:	e01a      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800384a:	3308      	adds	r3, #8
 800384c:	2100      	movs	r1, #0
 800384e:	4618      	mov	r0, r3
 8003850:	f001 fc3c 	bl	80050cc <RCCEx_PLL2_Config>
 8003854:	4603      	mov	r3, r0
 8003856:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800385a:	e00f      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800385c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003860:	3328      	adds	r3, #40	@ 0x28
 8003862:	2100      	movs	r1, #0
 8003864:	4618      	mov	r0, r3
 8003866:	f001 fce3 	bl	8005230 <RCCEx_PLL3_Config>
 800386a:	4603      	mov	r3, r0
 800386c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003870:	e004      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003878:	e000      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800387a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800387c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10a      	bne.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003884:	4b7b      	ldr	r3, [pc, #492]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003886:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003888:	f023 0107 	bic.w	r1, r3, #7
 800388c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003892:	4a78      	ldr	r2, [pc, #480]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003894:	430b      	orrs	r3, r1
 8003896:	6513      	str	r3, [r2, #80]	@ 0x50
 8003898:	e003      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800389a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800389e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80038a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038aa:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80038ae:	f04f 0b00 	mov.w	fp, #0
 80038b2:	ea5a 030b 	orrs.w	r3, sl, fp
 80038b6:	d04c      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80038b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038c2:	d030      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80038c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038c8:	d829      	bhi.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80038ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80038cc:	d02d      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80038ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80038d0:	d825      	bhi.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80038d2:	2b80      	cmp	r3, #128	@ 0x80
 80038d4:	d018      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80038d6:	2b80      	cmp	r3, #128	@ 0x80
 80038d8:	d821      	bhi.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d002      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80038de:	2b40      	cmp	r3, #64	@ 0x40
 80038e0:	d007      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80038e2:	e01c      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038e4:	4b63      	ldr	r3, [pc, #396]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e8:	4a62      	ldr	r2, [pc, #392]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80038f0:	e01c      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f6:	3308      	adds	r3, #8
 80038f8:	2100      	movs	r1, #0
 80038fa:	4618      	mov	r0, r3
 80038fc:	f001 fbe6 	bl	80050cc <RCCEx_PLL2_Config>
 8003900:	4603      	mov	r3, r0
 8003902:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003906:	e011      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800390c:	3328      	adds	r3, #40	@ 0x28
 800390e:	2100      	movs	r1, #0
 8003910:	4618      	mov	r0, r3
 8003912:	f001 fc8d 	bl	8005230 <RCCEx_PLL3_Config>
 8003916:	4603      	mov	r3, r0
 8003918:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800391c:	e006      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003924:	e002      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003926:	bf00      	nop
 8003928:	e000      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800392a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800392c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10a      	bne.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003934:	4b4f      	ldr	r3, [pc, #316]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003936:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003938:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800393c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003942:	4a4c      	ldr	r2, [pc, #304]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003944:	430b      	orrs	r3, r1
 8003946:	6513      	str	r3, [r2, #80]	@ 0x50
 8003948:	e003      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800394a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800394e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800395e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003962:	2300      	movs	r3, #0
 8003964:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003968:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800396c:	460b      	mov	r3, r1
 800396e:	4313      	orrs	r3, r2
 8003970:	d053      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003976:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800397a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800397e:	d035      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003980:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003984:	d82e      	bhi.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003986:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800398a:	d031      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800398c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003990:	d828      	bhi.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003992:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003996:	d01a      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003998:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800399c:	d822      	bhi.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80039a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039a6:	d007      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80039a8:	e01c      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039aa:	4b32      	ldr	r3, [pc, #200]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ae:	4a31      	ldr	r2, [pc, #196]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039b6:	e01c      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039bc:	3308      	adds	r3, #8
 80039be:	2100      	movs	r1, #0
 80039c0:	4618      	mov	r0, r3
 80039c2:	f001 fb83 	bl	80050cc <RCCEx_PLL2_Config>
 80039c6:	4603      	mov	r3, r0
 80039c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80039cc:	e011      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d2:	3328      	adds	r3, #40	@ 0x28
 80039d4:	2100      	movs	r1, #0
 80039d6:	4618      	mov	r0, r3
 80039d8:	f001 fc2a 	bl	8005230 <RCCEx_PLL3_Config>
 80039dc:	4603      	mov	r3, r0
 80039de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039e2:	e006      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039ea:	e002      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80039ec:	bf00      	nop
 80039ee:	e000      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80039f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10b      	bne.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80039fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039fe:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003a0a:	4a1a      	ldr	r2, [pc, #104]	@ (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a0c:	430b      	orrs	r3, r1
 8003a0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a10:	e003      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a22:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003a26:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003a30:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003a34:	460b      	mov	r3, r1
 8003a36:	4313      	orrs	r3, r2
 8003a38:	d056      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a3e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003a42:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a46:	d038      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003a48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a4c:	d831      	bhi.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a4e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a52:	d034      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003a54:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a58:	d82b      	bhi.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a5e:	d01d      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003a60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a64:	d825      	bhi.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d006      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003a6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a6e:	d00a      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003a70:	e01f      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a72:	bf00      	nop
 8003a74:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a78:	4ba2      	ldr	r3, [pc, #648]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7c:	4aa1      	ldr	r2, [pc, #644]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a84:	e01c      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a8a:	3308      	adds	r3, #8
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f001 fb1c 	bl	80050cc <RCCEx_PLL2_Config>
 8003a94:	4603      	mov	r3, r0
 8003a96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003a9a:	e011      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa0:	3328      	adds	r3, #40	@ 0x28
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f001 fbc3 	bl	8005230 <RCCEx_PLL3_Config>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ab0:	e006      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ab8:	e002      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003aba:	bf00      	nop
 8003abc:	e000      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003abe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ac0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10b      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003ac8:	4b8e      	ldr	r3, [pc, #568]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003acc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003ad8:	4a8a      	ldr	r2, [pc, #552]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ada:	430b      	orrs	r3, r1
 8003adc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ade:	e003      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ae4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003af4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003af8:	2300      	movs	r3, #0
 8003afa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003afe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003b02:	460b      	mov	r3, r1
 8003b04:	4313      	orrs	r3, r2
 8003b06:	d03a      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b0e:	2b30      	cmp	r3, #48	@ 0x30
 8003b10:	d01f      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003b12:	2b30      	cmp	r3, #48	@ 0x30
 8003b14:	d819      	bhi.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003b16:	2b20      	cmp	r3, #32
 8003b18:	d00c      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003b1a:	2b20      	cmp	r3, #32
 8003b1c:	d815      	bhi.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d019      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003b22:	2b10      	cmp	r3, #16
 8003b24:	d111      	bne.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b26:	4b77      	ldr	r3, [pc, #476]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b2a:	4a76      	ldr	r2, [pc, #472]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003b32:	e011      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b38:	3308      	adds	r3, #8
 8003b3a:	2102      	movs	r1, #2
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f001 fac5 	bl	80050cc <RCCEx_PLL2_Config>
 8003b42:	4603      	mov	r3, r0
 8003b44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003b48:	e006      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b50:	e002      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003b52:	bf00      	nop
 8003b54:	e000      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003b56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10a      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b60:	4b68      	ldr	r3, [pc, #416]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b64:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b6e:	4a65      	ldr	r2, [pc, #404]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b70:	430b      	orrs	r3, r1
 8003b72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b74:	e003      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b86:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003b8a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003b8e:	2300      	movs	r3, #0
 8003b90:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003b94:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	d051      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ba2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ba4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ba8:	d035      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003baa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bae:	d82e      	bhi.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003bb0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003bb4:	d031      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003bb6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003bba:	d828      	bhi.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003bbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bc0:	d01a      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003bc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bc6:	d822      	bhi.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003bcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bd0:	d007      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003bd2:	e01c      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bd4:	4b4b      	ldr	r3, [pc, #300]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd8:	4a4a      	ldr	r2, [pc, #296]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003be0:	e01c      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be6:	3308      	adds	r3, #8
 8003be8:	2100      	movs	r1, #0
 8003bea:	4618      	mov	r0, r3
 8003bec:	f001 fa6e 	bl	80050cc <RCCEx_PLL2_Config>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003bf6:	e011      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bfc:	3328      	adds	r3, #40	@ 0x28
 8003bfe:	2100      	movs	r1, #0
 8003c00:	4618      	mov	r0, r3
 8003c02:	f001 fb15 	bl	8005230 <RCCEx_PLL3_Config>
 8003c06:	4603      	mov	r3, r0
 8003c08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c0c:	e006      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c14:	e002      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003c16:	bf00      	nop
 8003c18:	e000      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003c1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10a      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003c24:	4b37      	ldr	r3, [pc, #220]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c28:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c32:	4a34      	ldr	r2, [pc, #208]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c34:	430b      	orrs	r3, r1
 8003c36:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c38:	e003      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003c4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003c52:	2300      	movs	r3, #0
 8003c54:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003c58:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	d056      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c6c:	d033      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003c6e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c72:	d82c      	bhi.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c74:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c78:	d02f      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003c7a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c7e:	d826      	bhi.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c80:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c84:	d02b      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003c86:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c8a:	d820      	bhi.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c90:	d012      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003c92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c96:	d81a      	bhi.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d022      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003c9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ca0:	d115      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca6:	3308      	adds	r3, #8
 8003ca8:	2101      	movs	r1, #1
 8003caa:	4618      	mov	r0, r3
 8003cac:	f001 fa0e 	bl	80050cc <RCCEx_PLL2_Config>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003cb6:	e015      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cbc:	3328      	adds	r3, #40	@ 0x28
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f001 fab5 	bl	8005230 <RCCEx_PLL3_Config>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ccc:	e00a      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cd4:	e006      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003cd6:	bf00      	nop
 8003cd8:	e004      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003cda:	bf00      	nop
 8003cdc:	e002      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003cde:	bf00      	nop
 8003ce0:	e000      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ce2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ce4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10d      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003cec:	4b05      	ldr	r3, [pc, #20]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cf0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cfa:	4a02      	ldr	r2, [pc, #8]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cfc:	430b      	orrs	r3, r1
 8003cfe:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d00:	e006      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003d02:	bf00      	nop
 8003d04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d18:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003d20:	2300      	movs	r3, #0
 8003d22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003d26:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	d055      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003d38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d3c:	d033      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003d3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d42:	d82c      	bhi.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d48:	d02f      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d4e:	d826      	bhi.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d50:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003d54:	d02b      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003d56:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003d5a:	d820      	bhi.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d60:	d012      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003d62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d66:	d81a      	bhi.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d022      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003d6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d70:	d115      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d76:	3308      	adds	r3, #8
 8003d78:	2101      	movs	r1, #1
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f001 f9a6 	bl	80050cc <RCCEx_PLL2_Config>
 8003d80:	4603      	mov	r3, r0
 8003d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003d86:	e015      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d8c:	3328      	adds	r3, #40	@ 0x28
 8003d8e:	2101      	movs	r1, #1
 8003d90:	4618      	mov	r0, r3
 8003d92:	f001 fa4d 	bl	8005230 <RCCEx_PLL3_Config>
 8003d96:	4603      	mov	r3, r0
 8003d98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003d9c:	e00a      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003da4:	e006      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003da6:	bf00      	nop
 8003da8:	e004      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003daa:	bf00      	nop
 8003dac:	e002      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003dae:	bf00      	nop
 8003db0:	e000      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003db2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003db4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10b      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003dbc:	4ba3      	ldr	r3, [pc, #652]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003dcc:	4a9f      	ldr	r2, [pc, #636]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dce:	430b      	orrs	r3, r1
 8003dd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dd2:	e003      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003de8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003dec:	2300      	movs	r3, #0
 8003dee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003df2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003df6:	460b      	mov	r3, r1
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	d037      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e06:	d00e      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003e08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e0c:	d816      	bhi.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d018      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003e12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e16:	d111      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e18:	4b8c      	ldr	r3, [pc, #560]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e1c:	4a8b      	ldr	r2, [pc, #556]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003e24:	e00f      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e2a:	3308      	adds	r3, #8
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f001 f94c 	bl	80050cc <RCCEx_PLL2_Config>
 8003e34:	4603      	mov	r3, r0
 8003e36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003e3a:	e004      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e42:	e000      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003e44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10a      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e4e:	4b7f      	ldr	r3, [pc, #508]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e52:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e5c:	4a7b      	ldr	r2, [pc, #492]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e5e:	430b      	orrs	r3, r1
 8003e60:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e62:	e003      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e74:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003e78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003e82:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003e86:	460b      	mov	r3, r1
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	d039      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e92:	2b03      	cmp	r3, #3
 8003e94:	d81c      	bhi.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003e96:	a201      	add	r2, pc, #4	@ (adr r2, 8003e9c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9c:	08003ed9 	.word	0x08003ed9
 8003ea0:	08003ead 	.word	0x08003ead
 8003ea4:	08003ebb 	.word	0x08003ebb
 8003ea8:	08003ed9 	.word	0x08003ed9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eac:	4b67      	ldr	r3, [pc, #412]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb0:	4a66      	ldr	r2, [pc, #408]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003eb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003eb8:	e00f      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ebe:	3308      	adds	r3, #8
 8003ec0:	2102      	movs	r1, #2
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f001 f902 	bl	80050cc <RCCEx_PLL2_Config>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003ece:	e004      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ed6:	e000      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003ed8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10a      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003ee2:	4b5a      	ldr	r3, [pc, #360]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ee6:	f023 0103 	bic.w	r1, r3, #3
 8003eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ef0:	4a56      	ldr	r2, [pc, #344]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ef2:	430b      	orrs	r3, r1
 8003ef4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ef6:	e003      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003efc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f08:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003f0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f10:	2300      	movs	r3, #0
 8003f12:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f16:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	f000 809f 	beq.w	8004060 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f22:	4b4b      	ldr	r3, [pc, #300]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a4a      	ldr	r2, [pc, #296]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003f28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f2e:	f7fd fd7b 	bl	8001a28 <HAL_GetTick>
 8003f32:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f36:	e00b      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f38:	f7fd fd76 	bl	8001a28 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b64      	cmp	r3, #100	@ 0x64
 8003f46:	d903      	bls.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f4e:	e005      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f50:	4b3f      	ldr	r3, [pc, #252]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0ed      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003f5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d179      	bne.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003f64:	4b39      	ldr	r3, [pc, #228]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f66:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f6c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f70:	4053      	eors	r3, r2
 8003f72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d015      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f7a:	4b34      	ldr	r3, [pc, #208]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f82:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f86:	4b31      	ldr	r3, [pc, #196]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f8a:	4a30      	ldr	r2, [pc, #192]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f90:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f92:	4b2e      	ldr	r3, [pc, #184]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f96:	4a2d      	ldr	r2, [pc, #180]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f9c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003f9e:	4a2b      	ldr	r2, [pc, #172]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fa0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003fa4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003faa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003fae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fb2:	d118      	bne.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb4:	f7fd fd38 	bl	8001a28 <HAL_GetTick>
 8003fb8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fbc:	e00d      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fbe:	f7fd fd33 	bl	8001a28 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003fc8:	1ad2      	subs	r2, r2, r3
 8003fca:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d903      	bls.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003fd8:	e005      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fda:	4b1c      	ldr	r3, [pc, #112]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0eb      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d129      	bne.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ff6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ffa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ffe:	d10e      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004000:	4b12      	ldr	r3, [pc, #72]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800400c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004010:	091a      	lsrs	r2, r3, #4
 8004012:	4b10      	ldr	r3, [pc, #64]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004014:	4013      	ands	r3, r2
 8004016:	4a0d      	ldr	r2, [pc, #52]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004018:	430b      	orrs	r3, r1
 800401a:	6113      	str	r3, [r2, #16]
 800401c:	e005      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800401e:	4b0b      	ldr	r3, [pc, #44]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	4a0a      	ldr	r2, [pc, #40]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004024:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004028:	6113      	str	r3, [r2, #16]
 800402a:	4b08      	ldr	r3, [pc, #32]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800402c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800402e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004032:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800403a:	4a04      	ldr	r2, [pc, #16]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800403c:	430b      	orrs	r3, r1
 800403e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004040:	e00e      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004042:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004046:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800404a:	e009      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800404c:	58024400 	.word	0x58024400
 8004050:	58024800 	.word	0x58024800
 8004054:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004058:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800405c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004068:	f002 0301 	and.w	r3, r2, #1
 800406c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004070:	2300      	movs	r3, #0
 8004072:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004076:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800407a:	460b      	mov	r3, r1
 800407c:	4313      	orrs	r3, r2
 800407e:	f000 8089 	beq.w	8004194 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004086:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004088:	2b28      	cmp	r3, #40	@ 0x28
 800408a:	d86b      	bhi.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800408c:	a201      	add	r2, pc, #4	@ (adr r2, 8004094 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800408e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004092:	bf00      	nop
 8004094:	0800416d 	.word	0x0800416d
 8004098:	08004165 	.word	0x08004165
 800409c:	08004165 	.word	0x08004165
 80040a0:	08004165 	.word	0x08004165
 80040a4:	08004165 	.word	0x08004165
 80040a8:	08004165 	.word	0x08004165
 80040ac:	08004165 	.word	0x08004165
 80040b0:	08004165 	.word	0x08004165
 80040b4:	08004139 	.word	0x08004139
 80040b8:	08004165 	.word	0x08004165
 80040bc:	08004165 	.word	0x08004165
 80040c0:	08004165 	.word	0x08004165
 80040c4:	08004165 	.word	0x08004165
 80040c8:	08004165 	.word	0x08004165
 80040cc:	08004165 	.word	0x08004165
 80040d0:	08004165 	.word	0x08004165
 80040d4:	0800414f 	.word	0x0800414f
 80040d8:	08004165 	.word	0x08004165
 80040dc:	08004165 	.word	0x08004165
 80040e0:	08004165 	.word	0x08004165
 80040e4:	08004165 	.word	0x08004165
 80040e8:	08004165 	.word	0x08004165
 80040ec:	08004165 	.word	0x08004165
 80040f0:	08004165 	.word	0x08004165
 80040f4:	0800416d 	.word	0x0800416d
 80040f8:	08004165 	.word	0x08004165
 80040fc:	08004165 	.word	0x08004165
 8004100:	08004165 	.word	0x08004165
 8004104:	08004165 	.word	0x08004165
 8004108:	08004165 	.word	0x08004165
 800410c:	08004165 	.word	0x08004165
 8004110:	08004165 	.word	0x08004165
 8004114:	0800416d 	.word	0x0800416d
 8004118:	08004165 	.word	0x08004165
 800411c:	08004165 	.word	0x08004165
 8004120:	08004165 	.word	0x08004165
 8004124:	08004165 	.word	0x08004165
 8004128:	08004165 	.word	0x08004165
 800412c:	08004165 	.word	0x08004165
 8004130:	08004165 	.word	0x08004165
 8004134:	0800416d 	.word	0x0800416d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800413c:	3308      	adds	r3, #8
 800413e:	2101      	movs	r1, #1
 8004140:	4618      	mov	r0, r3
 8004142:	f000 ffc3 	bl	80050cc <RCCEx_PLL2_Config>
 8004146:	4603      	mov	r3, r0
 8004148:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800414c:	e00f      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800414e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004152:	3328      	adds	r3, #40	@ 0x28
 8004154:	2101      	movs	r1, #1
 8004156:	4618      	mov	r0, r3
 8004158:	f001 f86a 	bl	8005230 <RCCEx_PLL3_Config>
 800415c:	4603      	mov	r3, r0
 800415e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004162:	e004      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800416a:	e000      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800416c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800416e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10a      	bne.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004176:	4bbf      	ldr	r3, [pc, #764]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800417a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800417e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004182:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004184:	4abb      	ldr	r2, [pc, #748]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004186:	430b      	orrs	r3, r1
 8004188:	6553      	str	r3, [r2, #84]	@ 0x54
 800418a:	e003      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800418c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004190:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419c:	f002 0302 	and.w	r3, r2, #2
 80041a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80041a4:	2300      	movs	r3, #0
 80041a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80041aa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80041ae:	460b      	mov	r3, r1
 80041b0:	4313      	orrs	r3, r2
 80041b2:	d041      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80041b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041ba:	2b05      	cmp	r3, #5
 80041bc:	d824      	bhi.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80041be:	a201      	add	r2, pc, #4	@ (adr r2, 80041c4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80041c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c4:	08004211 	.word	0x08004211
 80041c8:	080041dd 	.word	0x080041dd
 80041cc:	080041f3 	.word	0x080041f3
 80041d0:	08004211 	.word	0x08004211
 80041d4:	08004211 	.word	0x08004211
 80041d8:	08004211 	.word	0x08004211
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041e0:	3308      	adds	r3, #8
 80041e2:	2101      	movs	r1, #1
 80041e4:	4618      	mov	r0, r3
 80041e6:	f000 ff71 	bl	80050cc <RCCEx_PLL2_Config>
 80041ea:	4603      	mov	r3, r0
 80041ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80041f0:	e00f      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041f6:	3328      	adds	r3, #40	@ 0x28
 80041f8:	2101      	movs	r1, #1
 80041fa:	4618      	mov	r0, r3
 80041fc:	f001 f818 	bl	8005230 <RCCEx_PLL3_Config>
 8004200:	4603      	mov	r3, r0
 8004202:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004206:	e004      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800420e:	e000      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004210:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004212:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10a      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800421a:	4b96      	ldr	r3, [pc, #600]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800421c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800421e:	f023 0107 	bic.w	r1, r3, #7
 8004222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004226:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004228:	4a92      	ldr	r2, [pc, #584]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800422a:	430b      	orrs	r3, r1
 800422c:	6553      	str	r3, [r2, #84]	@ 0x54
 800422e:	e003      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004230:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004234:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800423c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004240:	f002 0304 	and.w	r3, r2, #4
 8004244:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004248:	2300      	movs	r3, #0
 800424a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800424e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004252:	460b      	mov	r3, r1
 8004254:	4313      	orrs	r3, r2
 8004256:	d044      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800425c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004260:	2b05      	cmp	r3, #5
 8004262:	d825      	bhi.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004264:	a201      	add	r2, pc, #4	@ (adr r2, 800426c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426a:	bf00      	nop
 800426c:	080042b9 	.word	0x080042b9
 8004270:	08004285 	.word	0x08004285
 8004274:	0800429b 	.word	0x0800429b
 8004278:	080042b9 	.word	0x080042b9
 800427c:	080042b9 	.word	0x080042b9
 8004280:	080042b9 	.word	0x080042b9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004288:	3308      	adds	r3, #8
 800428a:	2101      	movs	r1, #1
 800428c:	4618      	mov	r0, r3
 800428e:	f000 ff1d 	bl	80050cc <RCCEx_PLL2_Config>
 8004292:	4603      	mov	r3, r0
 8004294:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004298:	e00f      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800429a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800429e:	3328      	adds	r3, #40	@ 0x28
 80042a0:	2101      	movs	r1, #1
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 ffc4 	bl	8005230 <RCCEx_PLL3_Config>
 80042a8:	4603      	mov	r3, r0
 80042aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80042ae:	e004      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042b6:	e000      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80042b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10b      	bne.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042c2:	4b6c      	ldr	r3, [pc, #432]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042c6:	f023 0107 	bic.w	r1, r3, #7
 80042ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042d2:	4a68      	ldr	r2, [pc, #416]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042d4:	430b      	orrs	r3, r1
 80042d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80042d8:	e003      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ea:	f002 0320 	and.w	r3, r2, #32
 80042ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80042f2:	2300      	movs	r3, #0
 80042f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80042f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80042fc:	460b      	mov	r3, r1
 80042fe:	4313      	orrs	r3, r2
 8004300:	d055      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800430a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800430e:	d033      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004310:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004314:	d82c      	bhi.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004316:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800431a:	d02f      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800431c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004320:	d826      	bhi.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004322:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004326:	d02b      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004328:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800432c:	d820      	bhi.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800432e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004332:	d012      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004334:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004338:	d81a      	bhi.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800433a:	2b00      	cmp	r3, #0
 800433c:	d022      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800433e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004342:	d115      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004348:	3308      	adds	r3, #8
 800434a:	2100      	movs	r1, #0
 800434c:	4618      	mov	r0, r3
 800434e:	f000 febd 	bl	80050cc <RCCEx_PLL2_Config>
 8004352:	4603      	mov	r3, r0
 8004354:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004358:	e015      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800435a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800435e:	3328      	adds	r3, #40	@ 0x28
 8004360:	2102      	movs	r1, #2
 8004362:	4618      	mov	r0, r3
 8004364:	f000 ff64 	bl	8005230 <RCCEx_PLL3_Config>
 8004368:	4603      	mov	r3, r0
 800436a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800436e:	e00a      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004376:	e006      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004378:	bf00      	nop
 800437a:	e004      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800437c:	bf00      	nop
 800437e:	e002      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004380:	bf00      	nop
 8004382:	e000      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004384:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004386:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10b      	bne.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800438e:	4b39      	ldr	r3, [pc, #228]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004392:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800439a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800439e:	4a35      	ldr	r2, [pc, #212]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043a0:	430b      	orrs	r3, r1
 80043a2:	6553      	str	r3, [r2, #84]	@ 0x54
 80043a4:	e003      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80043ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80043ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80043be:	2300      	movs	r3, #0
 80043c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80043c4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80043c8:	460b      	mov	r3, r1
 80043ca:	4313      	orrs	r3, r2
 80043cc:	d058      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80043ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043d6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80043da:	d033      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80043dc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80043e0:	d82c      	bhi.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80043e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043e6:	d02f      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80043e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043ec:	d826      	bhi.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80043ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043f2:	d02b      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80043f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043f8:	d820      	bhi.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80043fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043fe:	d012      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004400:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004404:	d81a      	bhi.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004406:	2b00      	cmp	r3, #0
 8004408:	d022      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800440a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800440e:	d115      	bne.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004414:	3308      	adds	r3, #8
 8004416:	2100      	movs	r1, #0
 8004418:	4618      	mov	r0, r3
 800441a:	f000 fe57 	bl	80050cc <RCCEx_PLL2_Config>
 800441e:	4603      	mov	r3, r0
 8004420:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004424:	e015      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800442a:	3328      	adds	r3, #40	@ 0x28
 800442c:	2102      	movs	r1, #2
 800442e:	4618      	mov	r0, r3
 8004430:	f000 fefe 	bl	8005230 <RCCEx_PLL3_Config>
 8004434:	4603      	mov	r3, r0
 8004436:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800443a:	e00a      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004442:	e006      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004444:	bf00      	nop
 8004446:	e004      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004448:	bf00      	nop
 800444a:	e002      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800444c:	bf00      	nop
 800444e:	e000      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004450:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004452:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10e      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800445a:	4b06      	ldr	r3, [pc, #24]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800445c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800445e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004466:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800446a:	4a02      	ldr	r2, [pc, #8]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800446c:	430b      	orrs	r3, r1
 800446e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004470:	e006      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004472:	bf00      	nop
 8004474:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004478:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800447c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004488:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800448c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004490:	2300      	movs	r3, #0
 8004492:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004496:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800449a:	460b      	mov	r3, r1
 800449c:	4313      	orrs	r3, r2
 800449e:	d055      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80044a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80044a8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80044ac:	d033      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80044ae:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80044b2:	d82c      	bhi.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80044b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044b8:	d02f      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80044ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044be:	d826      	bhi.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80044c0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80044c4:	d02b      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80044c6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80044ca:	d820      	bhi.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80044cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044d0:	d012      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80044d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044d6:	d81a      	bhi.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d022      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80044dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044e0:	d115      	bne.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e6:	3308      	adds	r3, #8
 80044e8:	2100      	movs	r1, #0
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 fdee 	bl	80050cc <RCCEx_PLL2_Config>
 80044f0:	4603      	mov	r3, r0
 80044f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80044f6:	e015      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044fc:	3328      	adds	r3, #40	@ 0x28
 80044fe:	2102      	movs	r1, #2
 8004500:	4618      	mov	r0, r3
 8004502:	f000 fe95 	bl	8005230 <RCCEx_PLL3_Config>
 8004506:	4603      	mov	r3, r0
 8004508:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800450c:	e00a      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004514:	e006      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004516:	bf00      	nop
 8004518:	e004      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800451a:	bf00      	nop
 800451c:	e002      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800451e:	bf00      	nop
 8004520:	e000      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004522:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004524:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10b      	bne.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800452c:	4ba1      	ldr	r3, [pc, #644]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800452e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004530:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004538:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800453c:	4a9d      	ldr	r2, [pc, #628]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800453e:	430b      	orrs	r3, r1
 8004540:	6593      	str	r3, [r2, #88]	@ 0x58
 8004542:	e003      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004544:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004548:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800454c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004554:	f002 0308 	and.w	r3, r2, #8
 8004558:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800455c:	2300      	movs	r3, #0
 800455e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004562:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004566:	460b      	mov	r3, r1
 8004568:	4313      	orrs	r3, r2
 800456a:	d01e      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800456c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004570:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004574:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004578:	d10c      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800457a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800457e:	3328      	adds	r3, #40	@ 0x28
 8004580:	2102      	movs	r1, #2
 8004582:	4618      	mov	r0, r3
 8004584:	f000 fe54 	bl	8005230 <RCCEx_PLL3_Config>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d002      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004594:	4b87      	ldr	r3, [pc, #540]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004598:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800459c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045a4:	4a83      	ldr	r2, [pc, #524]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045a6:	430b      	orrs	r3, r1
 80045a8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80045aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b2:	f002 0310 	and.w	r3, r2, #16
 80045b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80045ba:	2300      	movs	r3, #0
 80045bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80045c0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80045c4:	460b      	mov	r3, r1
 80045c6:	4313      	orrs	r3, r2
 80045c8:	d01e      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80045ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045d6:	d10c      	bne.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80045d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045dc:	3328      	adds	r3, #40	@ 0x28
 80045de:	2102      	movs	r1, #2
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 fe25 	bl	8005230 <RCCEx_PLL3_Config>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d002      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045f2:	4b70      	ldr	r3, [pc, #448]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80045fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004602:	4a6c      	ldr	r2, [pc, #432]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004604:	430b      	orrs	r3, r1
 8004606:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800460c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004610:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004614:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004618:	2300      	movs	r3, #0
 800461a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800461e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004622:	460b      	mov	r3, r1
 8004624:	4313      	orrs	r3, r2
 8004626:	d03e      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800462c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004630:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004634:	d022      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004636:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800463a:	d81b      	bhi.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800463c:	2b00      	cmp	r3, #0
 800463e:	d003      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004640:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004644:	d00b      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004646:	e015      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800464c:	3308      	adds	r3, #8
 800464e:	2100      	movs	r1, #0
 8004650:	4618      	mov	r0, r3
 8004652:	f000 fd3b 	bl	80050cc <RCCEx_PLL2_Config>
 8004656:	4603      	mov	r3, r0
 8004658:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800465c:	e00f      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800465e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004662:	3328      	adds	r3, #40	@ 0x28
 8004664:	2102      	movs	r1, #2
 8004666:	4618      	mov	r0, r3
 8004668:	f000 fde2 	bl	8005230 <RCCEx_PLL3_Config>
 800466c:	4603      	mov	r3, r0
 800466e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004672:	e004      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800467a:	e000      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800467c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800467e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10b      	bne.n	800469e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004686:	4b4b      	ldr	r3, [pc, #300]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800468a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800468e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004692:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004696:	4a47      	ldr	r2, [pc, #284]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004698:	430b      	orrs	r3, r1
 800469a:	6593      	str	r3, [r2, #88]	@ 0x58
 800469c:	e003      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800469e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80046a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ae:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80046b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80046b4:	2300      	movs	r3, #0
 80046b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80046b8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80046bc:	460b      	mov	r3, r1
 80046be:	4313      	orrs	r3, r2
 80046c0:	d03b      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80046c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80046ce:	d01f      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80046d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80046d4:	d818      	bhi.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80046d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046da:	d003      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80046dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046e0:	d007      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80046e2:	e011      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046e4:	4b33      	ldr	r3, [pc, #204]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e8:	4a32      	ldr	r2, [pc, #200]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80046f0:	e00f      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046f6:	3328      	adds	r3, #40	@ 0x28
 80046f8:	2101      	movs	r1, #1
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 fd98 	bl	8005230 <RCCEx_PLL3_Config>
 8004700:	4603      	mov	r3, r0
 8004702:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004706:	e004      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800470e:	e000      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004710:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004712:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10b      	bne.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800471a:	4b26      	ldr	r3, [pc, #152]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800471c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800471e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800472a:	4a22      	ldr	r2, [pc, #136]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800472c:	430b      	orrs	r3, r1
 800472e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004730:	e003      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004732:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004736:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800473a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800473e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004742:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004746:	673b      	str	r3, [r7, #112]	@ 0x70
 8004748:	2300      	movs	r3, #0
 800474a:	677b      	str	r3, [r7, #116]	@ 0x74
 800474c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004750:	460b      	mov	r3, r1
 8004752:	4313      	orrs	r3, r2
 8004754:	d034      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800475a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004764:	d007      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004766:	e011      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004768:	4b12      	ldr	r3, [pc, #72]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800476a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476c:	4a11      	ldr	r2, [pc, #68]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800476e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004772:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004774:	e00e      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800477a:	3308      	adds	r3, #8
 800477c:	2102      	movs	r1, #2
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fca4 	bl	80050cc <RCCEx_PLL2_Config>
 8004784:	4603      	mov	r3, r0
 8004786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800478a:	e003      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004792:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004794:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10d      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800479c:	4b05      	ldr	r3, [pc, #20]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800479e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047a0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80047a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047aa:	4a02      	ldr	r2, [pc, #8]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047ac:	430b      	orrs	r3, r1
 80047ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80047b0:	e006      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80047b2:	bf00      	nop
 80047b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80047c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80047cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047ce:	2300      	movs	r3, #0
 80047d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80047d2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80047d6:	460b      	mov	r3, r1
 80047d8:	4313      	orrs	r3, r2
 80047da:	d00c      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80047dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047e0:	3328      	adds	r3, #40	@ 0x28
 80047e2:	2102      	movs	r1, #2
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 fd23 	bl	8005230 <RCCEx_PLL3_Config>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d002      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80047f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004802:	663b      	str	r3, [r7, #96]	@ 0x60
 8004804:	2300      	movs	r3, #0
 8004806:	667b      	str	r3, [r7, #100]	@ 0x64
 8004808:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800480c:	460b      	mov	r3, r1
 800480e:	4313      	orrs	r3, r2
 8004810:	d038      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004816:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800481a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800481e:	d018      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004820:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004824:	d811      	bhi.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004826:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800482a:	d014      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800482c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004830:	d80b      	bhi.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004832:	2b00      	cmp	r3, #0
 8004834:	d011      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004836:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800483a:	d106      	bne.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800483c:	4bc3      	ldr	r3, [pc, #780]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800483e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004840:	4ac2      	ldr	r2, [pc, #776]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004842:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004846:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004848:	e008      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004850:	e004      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004852:	bf00      	nop
 8004854:	e002      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004856:	bf00      	nop
 8004858:	e000      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800485a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800485c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10b      	bne.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004864:	4bb9      	ldr	r3, [pc, #740]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004868:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800486c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004870:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004874:	4ab5      	ldr	r2, [pc, #724]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004876:	430b      	orrs	r3, r1
 8004878:	6553      	str	r3, [r2, #84]	@ 0x54
 800487a:	e003      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800487c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004880:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004890:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004892:	2300      	movs	r3, #0
 8004894:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004896:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800489a:	460b      	mov	r3, r1
 800489c:	4313      	orrs	r3, r2
 800489e:	d009      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048a0:	4baa      	ldr	r3, [pc, #680]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048a4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80048a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048ae:	4aa7      	ldr	r2, [pc, #668]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048b0:	430b      	orrs	r3, r1
 80048b2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80048b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048bc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80048c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80048c2:	2300      	movs	r3, #0
 80048c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80048c6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80048ca:	460b      	mov	r3, r1
 80048cc:	4313      	orrs	r3, r2
 80048ce:	d00a      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80048d0:	4b9e      	ldr	r3, [pc, #632]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80048d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80048e0:	4a9a      	ldr	r2, [pc, #616]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048e2:	430b      	orrs	r3, r1
 80048e4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ee:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80048f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048f4:	2300      	movs	r3, #0
 80048f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048f8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80048fc:	460b      	mov	r3, r1
 80048fe:	4313      	orrs	r3, r2
 8004900:	d009      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004902:	4b92      	ldr	r3, [pc, #584]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004904:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004906:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800490a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800490e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004910:	4a8e      	ldr	r2, [pc, #568]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004912:	430b      	orrs	r3, r1
 8004914:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800491a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004922:	643b      	str	r3, [r7, #64]	@ 0x40
 8004924:	2300      	movs	r3, #0
 8004926:	647b      	str	r3, [r7, #68]	@ 0x44
 8004928:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800492c:	460b      	mov	r3, r1
 800492e:	4313      	orrs	r3, r2
 8004930:	d00e      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004932:	4b86      	ldr	r3, [pc, #536]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	4a85      	ldr	r2, [pc, #532]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004938:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800493c:	6113      	str	r3, [r2, #16]
 800493e:	4b83      	ldr	r3, [pc, #524]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004940:	6919      	ldr	r1, [r3, #16]
 8004942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004946:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800494a:	4a80      	ldr	r2, [pc, #512]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800494c:	430b      	orrs	r3, r1
 800494e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004958:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800495c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800495e:	2300      	movs	r3, #0
 8004960:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004962:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004966:	460b      	mov	r3, r1
 8004968:	4313      	orrs	r3, r2
 800496a:	d009      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800496c:	4b77      	ldr	r3, [pc, #476]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800496e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004970:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800497a:	4a74      	ldr	r2, [pc, #464]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800497c:	430b      	orrs	r3, r1
 800497e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004988:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800498c:	633b      	str	r3, [r7, #48]	@ 0x30
 800498e:	2300      	movs	r3, #0
 8004990:	637b      	str	r3, [r7, #52]	@ 0x34
 8004992:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004996:	460b      	mov	r3, r1
 8004998:	4313      	orrs	r3, r2
 800499a:	d00a      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800499c:	4b6b      	ldr	r3, [pc, #428]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800499e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049a0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80049a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049ac:	4a67      	ldr	r2, [pc, #412]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049ae:	430b      	orrs	r3, r1
 80049b0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80049b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ba:	2100      	movs	r1, #0
 80049bc:	62b9      	str	r1, [r7, #40]	@ 0x28
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049c4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80049c8:	460b      	mov	r3, r1
 80049ca:	4313      	orrs	r3, r2
 80049cc:	d011      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d2:	3308      	adds	r3, #8
 80049d4:	2100      	movs	r1, #0
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 fb78 	bl	80050cc <RCCEx_PLL2_Config>
 80049dc:	4603      	mov	r3, r0
 80049de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80049e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80049f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fa:	2100      	movs	r1, #0
 80049fc:	6239      	str	r1, [r7, #32]
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a04:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004a08:	460b      	mov	r3, r1
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	d011      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a12:	3308      	adds	r3, #8
 8004a14:	2101      	movs	r1, #1
 8004a16:	4618      	mov	r0, r3
 8004a18:	f000 fb58 	bl	80050cc <RCCEx_PLL2_Config>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004a22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	61b9      	str	r1, [r7, #24]
 8004a3e:	f003 0304 	and.w	r3, r3, #4
 8004a42:	61fb      	str	r3, [r7, #28]
 8004a44:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004a48:	460b      	mov	r3, r1
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	d011      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a52:	3308      	adds	r3, #8
 8004a54:	2102      	movs	r1, #2
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 fb38 	bl	80050cc <RCCEx_PLL2_Config>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004a62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	6139      	str	r1, [r7, #16]
 8004a7e:	f003 0308 	and.w	r3, r3, #8
 8004a82:	617b      	str	r3, [r7, #20]
 8004a84:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004a88:	460b      	mov	r3, r1
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	d011      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a92:	3328      	adds	r3, #40	@ 0x28
 8004a94:	2100      	movs	r1, #0
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 fbca 	bl	8005230 <RCCEx_PLL3_Config>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004aa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aba:	2100      	movs	r1, #0
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	f003 0310 	and.w	r3, r3, #16
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004ac8:	460b      	mov	r3, r1
 8004aca:	4313      	orrs	r3, r2
 8004acc:	d011      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ad2:	3328      	adds	r3, #40	@ 0x28
 8004ad4:	2101      	movs	r1, #1
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f000 fbaa 	bl	8005230 <RCCEx_PLL3_Config>
 8004adc:	4603      	mov	r3, r0
 8004ade:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004ae2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d003      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afa:	2100      	movs	r1, #0
 8004afc:	6039      	str	r1, [r7, #0]
 8004afe:	f003 0320 	and.w	r3, r3, #32
 8004b02:	607b      	str	r3, [r7, #4]
 8004b04:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004b08:	460b      	mov	r3, r1
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	d011      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b12:	3328      	adds	r3, #40	@ 0x28
 8004b14:	2102      	movs	r1, #2
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 fb8a 	bl	8005230 <RCCEx_PLL3_Config>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004b22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004b32:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	e000      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004b46:	46bd      	mov	sp, r7
 8004b48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b4c:	58024400 	.word	0x58024400

08004b50 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004b54:	f7fe fd96 	bl	8003684 <HAL_RCC_GetHCLKFreq>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	4b06      	ldr	r3, [pc, #24]	@ (8004b74 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	091b      	lsrs	r3, r3, #4
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	4904      	ldr	r1, [pc, #16]	@ (8004b78 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004b66:	5ccb      	ldrb	r3, [r1, r3]
 8004b68:	f003 031f 	and.w	r3, r3, #31
 8004b6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	58024400 	.word	0x58024400
 8004b78:	08009e0c 	.word	0x08009e0c

08004b7c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b089      	sub	sp, #36	@ 0x24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b84:	4ba1      	ldr	r3, [pc, #644]	@ (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b88:	f003 0303 	and.w	r3, r3, #3
 8004b8c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004b8e:	4b9f      	ldr	r3, [pc, #636]	@ (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b92:	0b1b      	lsrs	r3, r3, #12
 8004b94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b98:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004b9a:	4b9c      	ldr	r3, [pc, #624]	@ (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b9e:	091b      	lsrs	r3, r3, #4
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004ba6:	4b99      	ldr	r3, [pc, #612]	@ (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004baa:	08db      	lsrs	r3, r3, #3
 8004bac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	fb02 f303 	mul.w	r3, r2, r3
 8004bb6:	ee07 3a90 	vmov	s15, r3
 8004bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bbe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 8111 	beq.w	8004dec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	f000 8083 	beq.w	8004cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	f200 80a1 	bhi.w	8004d1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d003      	beq.n	8004be8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d056      	beq.n	8004c94 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004be6:	e099      	b.n	8004d1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004be8:	4b88      	ldr	r3, [pc, #544]	@ (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0320 	and.w	r3, r3, #32
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d02d      	beq.n	8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004bf4:	4b85      	ldr	r3, [pc, #532]	@ (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	08db      	lsrs	r3, r3, #3
 8004bfa:	f003 0303 	and.w	r3, r3, #3
 8004bfe:	4a84      	ldr	r2, [pc, #528]	@ (8004e10 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004c00:	fa22 f303 	lsr.w	r3, r2, r3
 8004c04:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	ee07 3a90 	vmov	s15, r3
 8004c0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	ee07 3a90 	vmov	s15, r3
 8004c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c1e:	4b7b      	ldr	r3, [pc, #492]	@ (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c26:	ee07 3a90 	vmov	s15, r3
 8004c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c32:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004e14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c4a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004c4e:	e087      	b.n	8004d60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	ee07 3a90 	vmov	s15, r3
 8004c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c5a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004e18 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c62:	4b6a      	ldr	r3, [pc, #424]	@ (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c6a:	ee07 3a90 	vmov	s15, r3
 8004c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c72:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c76:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004e14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c92:	e065      	b.n	8004d60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	ee07 3a90 	vmov	s15, r3
 8004c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c9e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004e1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ca6:	4b59      	ldr	r3, [pc, #356]	@ (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cae:	ee07 3a90 	vmov	s15, r3
 8004cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004e14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cd6:	e043      	b.n	8004d60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	ee07 3a90 	vmov	s15, r3
 8004cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ce2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004e20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cea:	4b48      	ldr	r3, [pc, #288]	@ (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cf2:	ee07 3a90 	vmov	s15, r3
 8004cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cfe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004e14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d1a:	e021      	b.n	8004d60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	ee07 3a90 	vmov	s15, r3
 8004d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d26:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004e1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d2e:	4b37      	ldr	r3, [pc, #220]	@ (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d36:	ee07 3a90 	vmov	s15, r3
 8004d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d42:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004e14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d5e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004d60:	4b2a      	ldr	r3, [pc, #168]	@ (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d64:	0a5b      	lsrs	r3, r3, #9
 8004d66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d6a:	ee07 3a90 	vmov	s15, r3
 8004d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d86:	ee17 2a90 	vmov	r2, s15
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004d8e:	4b1f      	ldr	r3, [pc, #124]	@ (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d92:	0c1b      	lsrs	r3, r3, #16
 8004d94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d98:	ee07 3a90 	vmov	s15, r3
 8004d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004da0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004da4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004da8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004db0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004db4:	ee17 2a90 	vmov	r2, s15
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004dbc:	4b13      	ldr	r3, [pc, #76]	@ (8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dc0:	0e1b      	lsrs	r3, r3, #24
 8004dc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dc6:	ee07 3a90 	vmov	s15, r3
 8004dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004dd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004de2:	ee17 2a90 	vmov	r2, s15
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004dea:	e008      	b.n	8004dfe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	609a      	str	r2, [r3, #8]
}
 8004dfe:	bf00      	nop
 8004e00:	3724      	adds	r7, #36	@ 0x24
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	58024400 	.word	0x58024400
 8004e10:	03d09000 	.word	0x03d09000
 8004e14:	46000000 	.word	0x46000000
 8004e18:	4c742400 	.word	0x4c742400
 8004e1c:	4a742400 	.word	0x4a742400
 8004e20:	4bbebc20 	.word	0x4bbebc20

08004e24 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b089      	sub	sp, #36	@ 0x24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e2c:	4ba1      	ldr	r3, [pc, #644]	@ (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e30:	f003 0303 	and.w	r3, r3, #3
 8004e34:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004e36:	4b9f      	ldr	r3, [pc, #636]	@ (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e3a:	0d1b      	lsrs	r3, r3, #20
 8004e3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e40:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004e42:	4b9c      	ldr	r3, [pc, #624]	@ (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e46:	0a1b      	lsrs	r3, r3, #8
 8004e48:	f003 0301 	and.w	r3, r3, #1
 8004e4c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004e4e:	4b99      	ldr	r3, [pc, #612]	@ (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e52:	08db      	lsrs	r3, r3, #3
 8004e54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	fb02 f303 	mul.w	r3, r2, r3
 8004e5e:	ee07 3a90 	vmov	s15, r3
 8004e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 8111 	beq.w	8005094 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	f000 8083 	beq.w	8004f80 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	f200 80a1 	bhi.w	8004fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d003      	beq.n	8004e90 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d056      	beq.n	8004f3c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004e8e:	e099      	b.n	8004fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e90:	4b88      	ldr	r3, [pc, #544]	@ (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0320 	and.w	r3, r3, #32
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d02d      	beq.n	8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e9c:	4b85      	ldr	r3, [pc, #532]	@ (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	08db      	lsrs	r3, r3, #3
 8004ea2:	f003 0303 	and.w	r3, r3, #3
 8004ea6:	4a84      	ldr	r2, [pc, #528]	@ (80050b8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8004eac:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	ee07 3a90 	vmov	s15, r3
 8004eb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	ee07 3a90 	vmov	s15, r3
 8004ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ec6:	4b7b      	ldr	r3, [pc, #492]	@ (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ece:	ee07 3a90 	vmov	s15, r3
 8004ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ed6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eda:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80050bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ee6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ef2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004ef6:	e087      	b.n	8005008 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	ee07 3a90 	vmov	s15, r3
 8004efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f02:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80050c0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f0a:	4b6a      	ldr	r3, [pc, #424]	@ (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f12:	ee07 3a90 	vmov	s15, r3
 8004f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f1e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80050bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f3a:	e065      	b.n	8005008 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	ee07 3a90 	vmov	s15, r3
 8004f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f46:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80050c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f4e:	4b59      	ldr	r3, [pc, #356]	@ (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f56:	ee07 3a90 	vmov	s15, r3
 8004f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f62:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80050bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f7e:	e043      	b.n	8005008 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	ee07 3a90 	vmov	s15, r3
 8004f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f8a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80050c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f92:	4b48      	ldr	r3, [pc, #288]	@ (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f9a:	ee07 3a90 	vmov	s15, r3
 8004f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fa6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80050bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fc2:	e021      	b.n	8005008 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	ee07 3a90 	vmov	s15, r3
 8004fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80050c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fd6:	4b37      	ldr	r3, [pc, #220]	@ (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fde:	ee07 3a90 	vmov	s15, r3
 8004fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fe6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80050bc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ff6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005002:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005006:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005008:	4b2a      	ldr	r3, [pc, #168]	@ (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800500a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500c:	0a5b      	lsrs	r3, r3, #9
 800500e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005012:	ee07 3a90 	vmov	s15, r3
 8005016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800501a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800501e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005022:	edd7 6a07 	vldr	s13, [r7, #28]
 8005026:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800502a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800502e:	ee17 2a90 	vmov	r2, s15
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005036:	4b1f      	ldr	r3, [pc, #124]	@ (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800503a:	0c1b      	lsrs	r3, r3, #16
 800503c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005040:	ee07 3a90 	vmov	s15, r3
 8005044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005048:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800504c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005050:	edd7 6a07 	vldr	s13, [r7, #28]
 8005054:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005058:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800505c:	ee17 2a90 	vmov	r2, s15
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005064:	4b13      	ldr	r3, [pc, #76]	@ (80050b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005068:	0e1b      	lsrs	r3, r3, #24
 800506a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800506e:	ee07 3a90 	vmov	s15, r3
 8005072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005076:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800507a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800507e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005082:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005086:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800508a:	ee17 2a90 	vmov	r2, s15
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005092:	e008      	b.n	80050a6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	609a      	str	r2, [r3, #8]
}
 80050a6:	bf00      	nop
 80050a8:	3724      	adds	r7, #36	@ 0x24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	58024400 	.word	0x58024400
 80050b8:	03d09000 	.word	0x03d09000
 80050bc:	46000000 	.word	0x46000000
 80050c0:	4c742400 	.word	0x4c742400
 80050c4:	4a742400 	.word	0x4a742400
 80050c8:	4bbebc20 	.word	0x4bbebc20

080050cc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050d6:	2300      	movs	r3, #0
 80050d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050da:	4b53      	ldr	r3, [pc, #332]	@ (8005228 <RCCEx_PLL2_Config+0x15c>)
 80050dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050de:	f003 0303 	and.w	r3, r3, #3
 80050e2:	2b03      	cmp	r3, #3
 80050e4:	d101      	bne.n	80050ea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e099      	b.n	800521e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80050ea:	4b4f      	ldr	r3, [pc, #316]	@ (8005228 <RCCEx_PLL2_Config+0x15c>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a4e      	ldr	r2, [pc, #312]	@ (8005228 <RCCEx_PLL2_Config+0x15c>)
 80050f0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80050f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050f6:	f7fc fc97 	bl	8001a28 <HAL_GetTick>
 80050fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050fc:	e008      	b.n	8005110 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80050fe:	f7fc fc93 	bl	8001a28 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b02      	cmp	r3, #2
 800510a:	d901      	bls.n	8005110 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e086      	b.n	800521e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005110:	4b45      	ldr	r3, [pc, #276]	@ (8005228 <RCCEx_PLL2_Config+0x15c>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1f0      	bne.n	80050fe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800511c:	4b42      	ldr	r3, [pc, #264]	@ (8005228 <RCCEx_PLL2_Config+0x15c>)
 800511e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005120:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	031b      	lsls	r3, r3, #12
 800512a:	493f      	ldr	r1, [pc, #252]	@ (8005228 <RCCEx_PLL2_Config+0x15c>)
 800512c:	4313      	orrs	r3, r2
 800512e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	3b01      	subs	r3, #1
 8005136:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	3b01      	subs	r3, #1
 8005140:	025b      	lsls	r3, r3, #9
 8005142:	b29b      	uxth	r3, r3
 8005144:	431a      	orrs	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	3b01      	subs	r3, #1
 800514c:	041b      	lsls	r3, r3, #16
 800514e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005152:	431a      	orrs	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	3b01      	subs	r3, #1
 800515a:	061b      	lsls	r3, r3, #24
 800515c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005160:	4931      	ldr	r1, [pc, #196]	@ (8005228 <RCCEx_PLL2_Config+0x15c>)
 8005162:	4313      	orrs	r3, r2
 8005164:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005166:	4b30      	ldr	r3, [pc, #192]	@ (8005228 <RCCEx_PLL2_Config+0x15c>)
 8005168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800516a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	492d      	ldr	r1, [pc, #180]	@ (8005228 <RCCEx_PLL2_Config+0x15c>)
 8005174:	4313      	orrs	r3, r2
 8005176:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005178:	4b2b      	ldr	r3, [pc, #172]	@ (8005228 <RCCEx_PLL2_Config+0x15c>)
 800517a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800517c:	f023 0220 	bic.w	r2, r3, #32
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	4928      	ldr	r1, [pc, #160]	@ (8005228 <RCCEx_PLL2_Config+0x15c>)
 8005186:	4313      	orrs	r3, r2
 8005188:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800518a:	4b27      	ldr	r3, [pc, #156]	@ (8005228 <RCCEx_PLL2_Config+0x15c>)
 800518c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800518e:	4a26      	ldr	r2, [pc, #152]	@ (8005228 <RCCEx_PLL2_Config+0x15c>)
 8005190:	f023 0310 	bic.w	r3, r3, #16
 8005194:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005196:	4b24      	ldr	r3, [pc, #144]	@ (8005228 <RCCEx_PLL2_Config+0x15c>)
 8005198:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800519a:	4b24      	ldr	r3, [pc, #144]	@ (800522c <RCCEx_PLL2_Config+0x160>)
 800519c:	4013      	ands	r3, r2
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	69d2      	ldr	r2, [r2, #28]
 80051a2:	00d2      	lsls	r2, r2, #3
 80051a4:	4920      	ldr	r1, [pc, #128]	@ (8005228 <RCCEx_PLL2_Config+0x15c>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80051aa:	4b1f      	ldr	r3, [pc, #124]	@ (8005228 <RCCEx_PLL2_Config+0x15c>)
 80051ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ae:	4a1e      	ldr	r2, [pc, #120]	@ (8005228 <RCCEx_PLL2_Config+0x15c>)
 80051b0:	f043 0310 	orr.w	r3, r3, #16
 80051b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d106      	bne.n	80051ca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80051bc:	4b1a      	ldr	r3, [pc, #104]	@ (8005228 <RCCEx_PLL2_Config+0x15c>)
 80051be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c0:	4a19      	ldr	r2, [pc, #100]	@ (8005228 <RCCEx_PLL2_Config+0x15c>)
 80051c2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80051c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80051c8:	e00f      	b.n	80051ea <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d106      	bne.n	80051de <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80051d0:	4b15      	ldr	r3, [pc, #84]	@ (8005228 <RCCEx_PLL2_Config+0x15c>)
 80051d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d4:	4a14      	ldr	r2, [pc, #80]	@ (8005228 <RCCEx_PLL2_Config+0x15c>)
 80051d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80051dc:	e005      	b.n	80051ea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80051de:	4b12      	ldr	r3, [pc, #72]	@ (8005228 <RCCEx_PLL2_Config+0x15c>)
 80051e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e2:	4a11      	ldr	r2, [pc, #68]	@ (8005228 <RCCEx_PLL2_Config+0x15c>)
 80051e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80051e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80051ea:	4b0f      	ldr	r3, [pc, #60]	@ (8005228 <RCCEx_PLL2_Config+0x15c>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a0e      	ldr	r2, [pc, #56]	@ (8005228 <RCCEx_PLL2_Config+0x15c>)
 80051f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80051f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051f6:	f7fc fc17 	bl	8001a28 <HAL_GetTick>
 80051fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80051fc:	e008      	b.n	8005210 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80051fe:	f7fc fc13 	bl	8001a28 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	2b02      	cmp	r3, #2
 800520a:	d901      	bls.n	8005210 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e006      	b.n	800521e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005210:	4b05      	ldr	r3, [pc, #20]	@ (8005228 <RCCEx_PLL2_Config+0x15c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d0f0      	beq.n	80051fe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800521c:	7bfb      	ldrb	r3, [r7, #15]
}
 800521e:	4618      	mov	r0, r3
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	58024400 	.word	0x58024400
 800522c:	ffff0007 	.word	0xffff0007

08005230 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800523a:	2300      	movs	r3, #0
 800523c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800523e:	4b53      	ldr	r3, [pc, #332]	@ (800538c <RCCEx_PLL3_Config+0x15c>)
 8005240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005242:	f003 0303 	and.w	r3, r3, #3
 8005246:	2b03      	cmp	r3, #3
 8005248:	d101      	bne.n	800524e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e099      	b.n	8005382 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800524e:	4b4f      	ldr	r3, [pc, #316]	@ (800538c <RCCEx_PLL3_Config+0x15c>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a4e      	ldr	r2, [pc, #312]	@ (800538c <RCCEx_PLL3_Config+0x15c>)
 8005254:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005258:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800525a:	f7fc fbe5 	bl	8001a28 <HAL_GetTick>
 800525e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005260:	e008      	b.n	8005274 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005262:	f7fc fbe1 	bl	8001a28 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	2b02      	cmp	r3, #2
 800526e:	d901      	bls.n	8005274 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e086      	b.n	8005382 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005274:	4b45      	ldr	r3, [pc, #276]	@ (800538c <RCCEx_PLL3_Config+0x15c>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1f0      	bne.n	8005262 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005280:	4b42      	ldr	r3, [pc, #264]	@ (800538c <RCCEx_PLL3_Config+0x15c>)
 8005282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005284:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	051b      	lsls	r3, r3, #20
 800528e:	493f      	ldr	r1, [pc, #252]	@ (800538c <RCCEx_PLL3_Config+0x15c>)
 8005290:	4313      	orrs	r3, r2
 8005292:	628b      	str	r3, [r1, #40]	@ 0x28
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	3b01      	subs	r3, #1
 800529a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	3b01      	subs	r3, #1
 80052a4:	025b      	lsls	r3, r3, #9
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	431a      	orrs	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	3b01      	subs	r3, #1
 80052b0:	041b      	lsls	r3, r3, #16
 80052b2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80052b6:	431a      	orrs	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	3b01      	subs	r3, #1
 80052be:	061b      	lsls	r3, r3, #24
 80052c0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80052c4:	4931      	ldr	r1, [pc, #196]	@ (800538c <RCCEx_PLL3_Config+0x15c>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80052ca:	4b30      	ldr	r3, [pc, #192]	@ (800538c <RCCEx_PLL3_Config+0x15c>)
 80052cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	492d      	ldr	r1, [pc, #180]	@ (800538c <RCCEx_PLL3_Config+0x15c>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80052dc:	4b2b      	ldr	r3, [pc, #172]	@ (800538c <RCCEx_PLL3_Config+0x15c>)
 80052de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	4928      	ldr	r1, [pc, #160]	@ (800538c <RCCEx_PLL3_Config+0x15c>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80052ee:	4b27      	ldr	r3, [pc, #156]	@ (800538c <RCCEx_PLL3_Config+0x15c>)
 80052f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f2:	4a26      	ldr	r2, [pc, #152]	@ (800538c <RCCEx_PLL3_Config+0x15c>)
 80052f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80052fa:	4b24      	ldr	r3, [pc, #144]	@ (800538c <RCCEx_PLL3_Config+0x15c>)
 80052fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052fe:	4b24      	ldr	r3, [pc, #144]	@ (8005390 <RCCEx_PLL3_Config+0x160>)
 8005300:	4013      	ands	r3, r2
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	69d2      	ldr	r2, [r2, #28]
 8005306:	00d2      	lsls	r2, r2, #3
 8005308:	4920      	ldr	r1, [pc, #128]	@ (800538c <RCCEx_PLL3_Config+0x15c>)
 800530a:	4313      	orrs	r3, r2
 800530c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800530e:	4b1f      	ldr	r3, [pc, #124]	@ (800538c <RCCEx_PLL3_Config+0x15c>)
 8005310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005312:	4a1e      	ldr	r2, [pc, #120]	@ (800538c <RCCEx_PLL3_Config+0x15c>)
 8005314:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005318:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d106      	bne.n	800532e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005320:	4b1a      	ldr	r3, [pc, #104]	@ (800538c <RCCEx_PLL3_Config+0x15c>)
 8005322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005324:	4a19      	ldr	r2, [pc, #100]	@ (800538c <RCCEx_PLL3_Config+0x15c>)
 8005326:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800532a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800532c:	e00f      	b.n	800534e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d106      	bne.n	8005342 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005334:	4b15      	ldr	r3, [pc, #84]	@ (800538c <RCCEx_PLL3_Config+0x15c>)
 8005336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005338:	4a14      	ldr	r2, [pc, #80]	@ (800538c <RCCEx_PLL3_Config+0x15c>)
 800533a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800533e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005340:	e005      	b.n	800534e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005342:	4b12      	ldr	r3, [pc, #72]	@ (800538c <RCCEx_PLL3_Config+0x15c>)
 8005344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005346:	4a11      	ldr	r2, [pc, #68]	@ (800538c <RCCEx_PLL3_Config+0x15c>)
 8005348:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800534c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800534e:	4b0f      	ldr	r3, [pc, #60]	@ (800538c <RCCEx_PLL3_Config+0x15c>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a0e      	ldr	r2, [pc, #56]	@ (800538c <RCCEx_PLL3_Config+0x15c>)
 8005354:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005358:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800535a:	f7fc fb65 	bl	8001a28 <HAL_GetTick>
 800535e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005360:	e008      	b.n	8005374 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005362:	f7fc fb61 	bl	8001a28 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	2b02      	cmp	r3, #2
 800536e:	d901      	bls.n	8005374 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e006      	b.n	8005382 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005374:	4b05      	ldr	r3, [pc, #20]	@ (800538c <RCCEx_PLL3_Config+0x15c>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d0f0      	beq.n	8005362 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005380:	7bfb      	ldrb	r3, [r7, #15]
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	58024400 	.word	0x58024400
 8005390:	ffff0007 	.word	0xffff0007

08005394 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e10f      	b.n	80055c6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a87      	ldr	r2, [pc, #540]	@ (80055d0 <HAL_SPI_Init+0x23c>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d00f      	beq.n	80053d6 <HAL_SPI_Init+0x42>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a86      	ldr	r2, [pc, #536]	@ (80055d4 <HAL_SPI_Init+0x240>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d00a      	beq.n	80053d6 <HAL_SPI_Init+0x42>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a84      	ldr	r2, [pc, #528]	@ (80055d8 <HAL_SPI_Init+0x244>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d005      	beq.n	80053d6 <HAL_SPI_Init+0x42>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	2b0f      	cmp	r3, #15
 80053d0:	d901      	bls.n	80053d6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e0f7      	b.n	80055c6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 ff22 	bl	8006220 <SPI_GetPacketSize>
 80053dc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a7b      	ldr	r2, [pc, #492]	@ (80055d0 <HAL_SPI_Init+0x23c>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d00c      	beq.n	8005402 <HAL_SPI_Init+0x6e>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a79      	ldr	r2, [pc, #484]	@ (80055d4 <HAL_SPI_Init+0x240>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d007      	beq.n	8005402 <HAL_SPI_Init+0x6e>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a78      	ldr	r2, [pc, #480]	@ (80055d8 <HAL_SPI_Init+0x244>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d002      	beq.n	8005402 <HAL_SPI_Init+0x6e>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2b08      	cmp	r3, #8
 8005400:	d811      	bhi.n	8005426 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005406:	4a72      	ldr	r2, [pc, #456]	@ (80055d0 <HAL_SPI_Init+0x23c>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d009      	beq.n	8005420 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a70      	ldr	r2, [pc, #448]	@ (80055d4 <HAL_SPI_Init+0x240>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d004      	beq.n	8005420 <HAL_SPI_Init+0x8c>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a6f      	ldr	r2, [pc, #444]	@ (80055d8 <HAL_SPI_Init+0x244>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d104      	bne.n	800542a <HAL_SPI_Init+0x96>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2b10      	cmp	r3, #16
 8005424:	d901      	bls.n	800542a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e0cd      	b.n	80055c6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d106      	bne.n	8005444 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7fb fd50 	bl	8000ee4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f022 0201 	bic.w	r2, r2, #1
 800545a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8005466:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005470:	d119      	bne.n	80054a6 <HAL_SPI_Init+0x112>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800547a:	d103      	bne.n	8005484 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005480:	2b00      	cmp	r3, #0
 8005482:	d008      	beq.n	8005496 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005488:	2b00      	cmp	r3, #0
 800548a:	d10c      	bne.n	80054a6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005490:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005494:	d107      	bne.n	80054a6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80054a4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00f      	beq.n	80054d2 <HAL_SPI_Init+0x13e>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	2b06      	cmp	r3, #6
 80054b8:	d90b      	bls.n	80054d2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	430a      	orrs	r2, r1
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	e007      	b.n	80054e2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80054e0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	69da      	ldr	r2, [r3, #28]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ea:	431a      	orrs	r2, r3
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	431a      	orrs	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054f4:	ea42 0103 	orr.w	r1, r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68da      	ldr	r2, [r3, #12]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	430a      	orrs	r2, r1
 8005502:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800550c:	431a      	orrs	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005512:	431a      	orrs	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	431a      	orrs	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	431a      	orrs	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	431a      	orrs	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	431a      	orrs	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	431a      	orrs	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005536:	431a      	orrs	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	431a      	orrs	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005542:	ea42 0103 	orr.w	r1, r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d113      	bne.n	8005582 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800556c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005580:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f022 0201 	bic.w	r2, r2, #1
 8005590:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00a      	beq.n	80055b4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	430a      	orrs	r2, r1
 80055b2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	40013000 	.word	0x40013000
 80055d4:	40003800 	.word	0x40003800
 80055d8:	40003c00 	.word	0x40003c00

080055dc <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b08e      	sub	sp, #56	@ 0x38
 80055e0:	af02      	add	r7, sp, #8
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
 80055e8:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	3320      	adds	r3, #32
 80055f0:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	3330      	adds	r3, #48	@ 0x30
 80055f8:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055fe:	095b      	lsrs	r3, r3, #5
 8005600:	b29b      	uxth	r3, r3
 8005602:	3301      	adds	r3, #1
 8005604:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005606:	f7fc fa0f 	bl	8001a28 <HAL_GetTick>
 800560a:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800560c:	887b      	ldrh	r3, [r7, #2]
 800560e:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8005610:	887b      	ldrh	r3, [r7, #2]
 8005612:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b01      	cmp	r3, #1
 800561e:	d001      	beq.n	8005624 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8005620:	2302      	movs	r3, #2
 8005622:	e310      	b.n	8005c46 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d005      	beq.n	8005636 <HAL_SPI_TransmitReceive+0x5a>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d002      	beq.n	8005636 <HAL_SPI_TransmitReceive+0x5a>
 8005630:	887b      	ldrh	r3, [r7, #2]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e305      	b.n	8005c46 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005640:	2b01      	cmp	r3, #1
 8005642:	d101      	bne.n	8005648 <HAL_SPI_TransmitReceive+0x6c>
 8005644:	2302      	movs	r3, #2
 8005646:	e2fe      	b.n	8005c46 <HAL_SPI_TransmitReceive+0x66a>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2205      	movs	r2, #5
 8005654:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	887a      	ldrh	r2, [r7, #2]
 800566a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	887a      	ldrh	r2, [r7, #2]
 8005672:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	887a      	ldrh	r2, [r7, #2]
 8005680:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	887a      	ldrh	r2, [r7, #2]
 8005688:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 80056a6:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a70      	ldr	r2, [pc, #448]	@ (8005870 <HAL_SPI_TransmitReceive+0x294>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d009      	beq.n	80056c6 <HAL_SPI_TransmitReceive+0xea>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a6f      	ldr	r2, [pc, #444]	@ (8005874 <HAL_SPI_TransmitReceive+0x298>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d004      	beq.n	80056c6 <HAL_SPI_TransmitReceive+0xea>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a6d      	ldr	r2, [pc, #436]	@ (8005878 <HAL_SPI_TransmitReceive+0x29c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d102      	bne.n	80056cc <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 80056c6:	2310      	movs	r3, #16
 80056c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056ca:	e001      	b.n	80056d0 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 80056cc:	2308      	movs	r3, #8
 80056ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685a      	ldr	r2, [r3, #4]
 80056d6:	4b69      	ldr	r3, [pc, #420]	@ (800587c <HAL_SPI_TransmitReceive+0x2a0>)
 80056d8:	4013      	ands	r3, r2
 80056da:	8879      	ldrh	r1, [r7, #2]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	6812      	ldr	r2, [r2, #0]
 80056e0:	430b      	orrs	r3, r1
 80056e2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f042 0201 	orr.w	r2, r2, #1
 80056f2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056fc:	d107      	bne.n	800570e <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800570c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	2b0f      	cmp	r3, #15
 8005714:	f240 80a2 	bls.w	800585c <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8005718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800571a:	089b      	lsrs	r3, r3, #2
 800571c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800571e:	e094      	b.n	800584a <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	f003 0302 	and.w	r3, r3, #2
 800572a:	2b02      	cmp	r3, #2
 800572c:	d120      	bne.n	8005770 <HAL_SPI_TransmitReceive+0x194>
 800572e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005730:	2b00      	cmp	r3, #0
 8005732:	d01d      	beq.n	8005770 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005734:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005736:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800573a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800573c:	429a      	cmp	r2, r3
 800573e:	d217      	bcs.n	8005770 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6812      	ldr	r2, [r2, #0]
 800574a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005750:	1d1a      	adds	r2, r3, #4
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800575c:	b29b      	uxth	r3, r3
 800575e:	3b01      	subs	r3, #1
 8005760:	b29a      	uxth	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800576e:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005778:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800577a:	2b00      	cmp	r3, #0
 800577c:	d065      	beq.n	800584a <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	695b      	ldr	r3, [r3, #20]
 8005784:	f003 0301 	and.w	r3, r3, #1
 8005788:	2b01      	cmp	r3, #1
 800578a:	d118      	bne.n	80057be <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005794:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005796:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800579c:	1d1a      	adds	r2, r3, #4
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	3b01      	subs	r3, #1
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80057ba:	853b      	strh	r3, [r7, #40]	@ 0x28
 80057bc:	e045      	b.n	800584a <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80057be:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80057c0:	8bfb      	ldrh	r3, [r7, #30]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d21d      	bcs.n	8005802 <HAL_SPI_TransmitReceive+0x226>
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d018      	beq.n	8005802 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057d8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80057da:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057e0:	1d1a      	adds	r2, r3, #4
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	3b01      	subs	r3, #1
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80057fe:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005800:	e023      	b.n	800584a <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005802:	f7fc f911 	bl	8001a28 <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800580e:	429a      	cmp	r2, r3
 8005810:	d803      	bhi.n	800581a <HAL_SPI_TransmitReceive+0x23e>
 8005812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005818:	d102      	bne.n	8005820 <HAL_SPI_TransmitReceive+0x244>
 800581a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800581c:	2b00      	cmp	r3, #0
 800581e:	d114      	bne.n	800584a <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f000 fc2f 	bl	8006084 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800582c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e1fd      	b.n	8005c46 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800584a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800584c:	2b00      	cmp	r3, #0
 800584e:	f47f af67 	bne.w	8005720 <HAL_SPI_TransmitReceive+0x144>
 8005852:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005854:	2b00      	cmp	r3, #0
 8005856:	f47f af63 	bne.w	8005720 <HAL_SPI_TransmitReceive+0x144>
 800585a:	e1ce      	b.n	8005bfa <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	2b07      	cmp	r3, #7
 8005862:	f240 81c2 	bls.w	8005bea <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8005866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005868:	085b      	lsrs	r3, r3, #1
 800586a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800586c:	e0c9      	b.n	8005a02 <HAL_SPI_TransmitReceive+0x426>
 800586e:	bf00      	nop
 8005870:	40013000 	.word	0x40013000
 8005874:	40003800 	.word	0x40003800
 8005878:	40003c00 	.word	0x40003c00
 800587c:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	f003 0302 	and.w	r3, r3, #2
 800588a:	2b02      	cmp	r3, #2
 800588c:	d11f      	bne.n	80058ce <HAL_SPI_TransmitReceive+0x2f2>
 800588e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005890:	2b00      	cmp	r3, #0
 8005892:	d01c      	beq.n	80058ce <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005894:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005896:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800589a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800589c:	429a      	cmp	r2, r3
 800589e:	d216      	bcs.n	80058ce <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058a4:	881a      	ldrh	r2, [r3, #0]
 80058a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a8:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058ae:	1c9a      	adds	r2, r3, #2
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	3b01      	subs	r3, #1
 80058be:	b29a      	uxth	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80058cc:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80058d6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f000 8092 	beq.w	8005a02 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d118      	bne.n	800591e <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058f0:	6a3a      	ldr	r2, [r7, #32]
 80058f2:	8812      	ldrh	r2, [r2, #0]
 80058f4:	b292      	uxth	r2, r2
 80058f6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058fc:	1c9a      	adds	r2, r3, #2
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005908:	b29b      	uxth	r3, r3
 800590a:	3b01      	subs	r3, #1
 800590c:	b29a      	uxth	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800591a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800591c:	e071      	b.n	8005a02 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800591e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005920:	8bfb      	ldrh	r3, [r7, #30]
 8005922:	429a      	cmp	r2, r3
 8005924:	d228      	bcs.n	8005978 <HAL_SPI_TransmitReceive+0x39c>
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d023      	beq.n	8005978 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005934:	6a3a      	ldr	r2, [r7, #32]
 8005936:	8812      	ldrh	r2, [r2, #0]
 8005938:	b292      	uxth	r2, r2
 800593a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005940:	1c9a      	adds	r2, r3, #2
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800594a:	6a3a      	ldr	r2, [r7, #32]
 800594c:	8812      	ldrh	r2, [r2, #0]
 800594e:	b292      	uxth	r2, r2
 8005950:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005956:	1c9a      	adds	r2, r3, #2
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005962:	b29b      	uxth	r3, r3
 8005964:	3b02      	subs	r3, #2
 8005966:	b29a      	uxth	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005974:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005976:	e044      	b.n	8005a02 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8005978:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800597a:	2b01      	cmp	r3, #1
 800597c:	d11d      	bne.n	80059ba <HAL_SPI_TransmitReceive+0x3de>
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d018      	beq.n	80059ba <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800598c:	6a3a      	ldr	r2, [r7, #32]
 800598e:	8812      	ldrh	r2, [r2, #0]
 8005990:	b292      	uxth	r2, r2
 8005992:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005998:	1c9a      	adds	r2, r3, #2
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	3b01      	subs	r3, #1
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80059b6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80059b8:	e023      	b.n	8005a02 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059ba:	f7fc f835 	bl	8001a28 <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d803      	bhi.n	80059d2 <HAL_SPI_TransmitReceive+0x3f6>
 80059ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d0:	d102      	bne.n	80059d8 <HAL_SPI_TransmitReceive+0x3fc>
 80059d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d114      	bne.n	8005a02 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f000 fb53 	bl	8006084 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059e4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e121      	b.n	8005c46 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005a02:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f47f af3b 	bne.w	8005880 <HAL_SPI_TransmitReceive+0x2a4>
 8005a0a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f47f af37 	bne.w	8005880 <HAL_SPI_TransmitReceive+0x2a4>
 8005a12:	e0f2      	b.n	8005bfa <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	f003 0302 	and.w	r3, r3, #2
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d121      	bne.n	8005a66 <HAL_SPI_TransmitReceive+0x48a>
 8005a22:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d01e      	beq.n	8005a66 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8005a28:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005a2a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8005a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a2e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d218      	bcs.n	8005a66 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	3320      	adds	r3, #32
 8005a3e:	7812      	ldrb	r2, [r2, #0]
 8005a40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a46:	1c5a      	adds	r2, r3, #1
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	3b01      	subs	r3, #1
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005a64:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8005a6e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f000 80ba 	beq.w	8005bea <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	f003 0301 	and.w	r3, r3, #1
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d11b      	bne.n	8005abc <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a90:	7812      	ldrb	r2, [r2, #0]
 8005a92:	b2d2      	uxtb	r2, r2
 8005a94:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a9a:	1c5a      	adds	r2, r3, #1
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005ab8:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005aba:	e096      	b.n	8005bea <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005abc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8005abe:	8bfb      	ldrh	r3, [r7, #30]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d24a      	bcs.n	8005b5a <HAL_SPI_TransmitReceive+0x57e>
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d045      	beq.n	8005b5a <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ada:	7812      	ldrb	r2, [r2, #0]
 8005adc:	b2d2      	uxtb	r2, r2
 8005ade:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ae4:	1c5a      	adds	r2, r3, #1
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005af6:	7812      	ldrb	r2, [r2, #0]
 8005af8:	b2d2      	uxtb	r2, r2
 8005afa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b00:	1c5a      	adds	r2, r3, #1
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b12:	7812      	ldrb	r2, [r2, #0]
 8005b14:	b2d2      	uxtb	r2, r2
 8005b16:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b1c:	1c5a      	adds	r2, r3, #1
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b2e:	7812      	ldrb	r2, [r2, #0]
 8005b30:	b2d2      	uxtb	r2, r2
 8005b32:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b38:	1c5a      	adds	r2, r3, #1
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	3b04      	subs	r3, #4
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b56:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005b58:	e047      	b.n	8005bea <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8005b5a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005b5c:	2b03      	cmp	r3, #3
 8005b5e:	d820      	bhi.n	8005ba2 <HAL_SPI_TransmitReceive+0x5c6>
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d01b      	beq.n	8005ba2 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b76:	7812      	ldrb	r2, [r2, #0]
 8005b78:	b2d2      	uxtb	r2, r2
 8005b7a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b80:	1c5a      	adds	r2, r3, #1
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b9e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005ba0:	e023      	b.n	8005bea <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ba2:	f7fb ff41 	bl	8001a28 <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d803      	bhi.n	8005bba <HAL_SPI_TransmitReceive+0x5de>
 8005bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb8:	d102      	bne.n	8005bc0 <HAL_SPI_TransmitReceive+0x5e4>
 8005bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d114      	bne.n	8005bea <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f000 fa5f 	bl	8006084 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bcc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e02d      	b.n	8005c46 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005bea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f47f af11 	bne.w	8005a14 <HAL_SPI_TransmitReceive+0x438>
 8005bf2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f47f af0d 	bne.w	8005a14 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	9300      	str	r3, [sp, #0]
 8005bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c00:	2200      	movs	r2, #0
 8005c02:	2108      	movs	r1, #8
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f000 fadd 	bl	80061c4 <SPI_WaitOnFlagUntilTimeout>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d007      	beq.n	8005c20 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c16:	f043 0220 	orr.w	r2, r3, #32
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f000 fa2f 	bl	8006084 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d001      	beq.n	8005c44 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e000      	b.n	8005c46 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8005c44:	2300      	movs	r3, #0
  }
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3730      	adds	r7, #48	@ 0x30
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop

08005c50 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b08a      	sub	sp, #40	@ 0x28
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8005c68:	6a3a      	ldr	r2, [r7, #32]
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005c82:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	3330      	adds	r3, #48	@ 0x30
 8005c8a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d010      	beq.n	8005cb8 <HAL_SPI_IRQHandler+0x68>
 8005c96:	6a3b      	ldr	r3, [r7, #32]
 8005c98:	f003 0308 	and.w	r3, r3, #8
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00b      	beq.n	8005cb8 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	699a      	ldr	r2, [r3, #24]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cae:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 f9c3 	bl	800603c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8005cb6:	e192      	b.n	8005fde <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d113      	bne.n	8005cea <HAL_SPI_IRQHandler+0x9a>
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	f003 0320 	and.w	r3, r3, #32
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10e      	bne.n	8005cea <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d009      	beq.n	8005cea <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	4798      	blx	r3
    hspi->RxISR(hspi);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	4798      	blx	r3
    handled = 1UL;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10f      	bne.n	8005d14 <HAL_SPI_IRQHandler+0xc4>
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00a      	beq.n	8005d14 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d105      	bne.n	8005d14 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	4798      	blx	r3
    handled = 1UL;
 8005d10:	2301      	movs	r3, #1
 8005d12:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	f003 0320 	and.w	r3, r3, #32
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10f      	bne.n	8005d3e <HAL_SPI_IRQHandler+0xee>
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	f003 0302 	and.w	r3, r3, #2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00a      	beq.n	8005d3e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d105      	bne.n	8005d3e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	4798      	blx	r3
    handled = 1UL;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f040 8147 	bne.w	8005fd4 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	f003 0308 	and.w	r3, r3, #8
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f000 808b 	beq.w	8005e68 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	699a      	ldr	r2, [r3, #24]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f042 0208 	orr.w	r2, r2, #8
 8005d60:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	699a      	ldr	r2, [r3, #24]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f042 0210 	orr.w	r2, r2, #16
 8005d70:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	699a      	ldr	r2, [r3, #24]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d80:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	691a      	ldr	r2, [r3, #16]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 0208 	bic.w	r2, r2, #8
 8005d90:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d13d      	bne.n	8005e1c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8005da0:	e036      	b.n	8005e10 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	2b0f      	cmp	r3, #15
 8005da8:	d90b      	bls.n	8005dc2 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005db2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005db4:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005dba:	1d1a      	adds	r2, r3, #4
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	665a      	str	r2, [r3, #100]	@ 0x64
 8005dc0:	e01d      	b.n	8005dfe <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	2b07      	cmp	r3, #7
 8005dc8:	d90b      	bls.n	8005de2 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	8812      	ldrh	r2, [r2, #0]
 8005dd2:	b292      	uxth	r2, r2
 8005dd4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005dda:	1c9a      	adds	r2, r3, #2
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	665a      	str	r2, [r3, #100]	@ 0x64
 8005de0:	e00d      	b.n	8005dfe <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005dee:	7812      	ldrb	r2, [r2, #0]
 8005df0:	b2d2      	uxtb	r2, r2
 8005df2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005df8:	1c5a      	adds	r2, r3, #1
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	3b01      	subs	r3, #1
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1c2      	bne.n	8005da2 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 f931 	bl	8006084 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d003      	beq.n	8005e3c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 f8f7 	bl	8006028 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005e3a:	e0d0      	b.n	8005fde <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8005e3c:	7cfb      	ldrb	r3, [r7, #19]
 8005e3e:	2b05      	cmp	r3, #5
 8005e40:	d103      	bne.n	8005e4a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f8e6 	bl	8006014 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8005e48:	e0c6      	b.n	8005fd8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8005e4a:	7cfb      	ldrb	r3, [r7, #19]
 8005e4c:	2b04      	cmp	r3, #4
 8005e4e:	d103      	bne.n	8005e58 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f8d5 	bl	8006000 <HAL_SPI_RxCpltCallback>
    return;
 8005e56:	e0bf      	b.n	8005fd8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8005e58:	7cfb      	ldrb	r3, [r7, #19]
 8005e5a:	2b03      	cmp	r3, #3
 8005e5c:	f040 80bc 	bne.w	8005fd8 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 f8c3 	bl	8005fec <HAL_SPI_TxCpltCallback>
    return;
 8005e66:	e0b7      	b.n	8005fd8 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f000 80b5 	beq.w	8005fde <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00f      	beq.n	8005e9e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e84:	f043 0204 	orr.w	r2, r3, #4
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	699a      	ldr	r2, [r3, #24]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e9c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00f      	beq.n	8005ec8 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005eae:	f043 0201 	orr.w	r2, r3, #1
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	699a      	ldr	r2, [r3, #24]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ec6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00f      	beq.n	8005ef2 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ed8:	f043 0208 	orr.w	r2, r3, #8
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	699a      	ldr	r2, [r3, #24]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ef0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	f003 0320 	and.w	r3, r3, #32
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00f      	beq.n	8005f1c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f02:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	699a      	ldr	r2, [r3, #24]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f042 0220 	orr.w	r2, r2, #32
 8005f1a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d05a      	beq.n	8005fdc <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 0201 	bic.w	r2, r2, #1
 8005f34:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6919      	ldr	r1, [r3, #16]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	4b28      	ldr	r3, [pc, #160]	@ (8005fe4 <HAL_SPI_IRQHandler+0x394>)
 8005f42:	400b      	ands	r3, r1
 8005f44:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005f4c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005f50:	d138      	bne.n	8005fc4 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	689a      	ldr	r2, [r3, #8]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8005f60:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d013      	beq.n	8005f92 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f6e:	4a1e      	ldr	r2, [pc, #120]	@ (8005fe8 <HAL_SPI_IRQHandler+0x398>)
 8005f70:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7fb ff1a 	bl	8001db0 <HAL_DMA_Abort_IT>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d007      	beq.n	8005f92 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f88:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d020      	beq.n	8005fdc <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f9e:	4a12      	ldr	r2, [pc, #72]	@ (8005fe8 <HAL_SPI_IRQHandler+0x398>)
 8005fa0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7fb ff02 	bl	8001db0 <HAL_DMA_Abort_IT>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d014      	beq.n	8005fdc <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fb8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005fc2:	e00b      	b.n	8005fdc <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 f82b 	bl	8006028 <HAL_SPI_ErrorCallback>
    return;
 8005fd2:	e003      	b.n	8005fdc <HAL_SPI_IRQHandler+0x38c>
    return;
 8005fd4:	bf00      	nop
 8005fd6:	e002      	b.n	8005fde <HAL_SPI_IRQHandler+0x38e>
    return;
 8005fd8:	bf00      	nop
 8005fda:	e000      	b.n	8005fde <HAL_SPI_IRQHandler+0x38e>
    return;
 8005fdc:	bf00      	nop
  }
}
 8005fde:	3728      	adds	r7, #40	@ 0x28
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	fffffc94 	.word	0xfffffc94
 8005fe8:	08006051 	.word	0x08006051

08005fec <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800605c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2200      	movs	r2, #0
 800606a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f7ff ffd6 	bl	8006028 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800607c:	bf00      	nop
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	699a      	ldr	r2, [r3, #24]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f042 0208 	orr.w	r2, r2, #8
 80060a2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	699a      	ldr	r2, [r3, #24]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f042 0210 	orr.w	r2, r2, #16
 80060b2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f022 0201 	bic.w	r2, r2, #1
 80060c2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6919      	ldr	r1, [r3, #16]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	4b3c      	ldr	r3, [pc, #240]	@ (80061c0 <SPI_CloseTransfer+0x13c>)
 80060d0:	400b      	ands	r3, r1
 80060d2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689a      	ldr	r2, [r3, #8]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80060e2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b04      	cmp	r3, #4
 80060ee:	d014      	beq.n	800611a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f003 0320 	and.w	r3, r3, #32
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00f      	beq.n	800611a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006100:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	699a      	ldr	r2, [r3, #24]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f042 0220 	orr.w	r2, r2, #32
 8006118:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b03      	cmp	r3, #3
 8006124:	d014      	beq.n	8006150 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00f      	beq.n	8006150 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006136:	f043 0204 	orr.w	r2, r3, #4
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	699a      	ldr	r2, [r3, #24]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800614e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00f      	beq.n	800617a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006160:	f043 0201 	orr.w	r2, r3, #1
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	699a      	ldr	r2, [r3, #24]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006178:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00f      	beq.n	80061a4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800618a:	f043 0208 	orr.w	r2, r3, #8
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	699a      	ldr	r2, [r3, #24]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061a2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80061b4:	bf00      	nop
 80061b6:	3714      	adds	r7, #20
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr
 80061c0:	fffffc90 	.word	0xfffffc90

080061c4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	603b      	str	r3, [r7, #0]
 80061d0:	4613      	mov	r3, r2
 80061d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80061d4:	e010      	b.n	80061f8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061d6:	f7fb fc27 	bl	8001a28 <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	683a      	ldr	r2, [r7, #0]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d803      	bhi.n	80061ee <SPI_WaitOnFlagUntilTimeout+0x2a>
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ec:	d102      	bne.n	80061f4 <SPI_WaitOnFlagUntilTimeout+0x30>
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d101      	bne.n	80061f8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80061f4:	2303      	movs	r3, #3
 80061f6:	e00f      	b.n	8006218 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	695a      	ldr	r2, [r3, #20]
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	4013      	ands	r3, r2
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	429a      	cmp	r2, r3
 8006206:	bf0c      	ite	eq
 8006208:	2301      	moveq	r3, #1
 800620a:	2300      	movne	r3, #0
 800620c:	b2db      	uxtb	r3, r3
 800620e:	461a      	mov	r2, r3
 8006210:	79fb      	ldrb	r3, [r7, #7]
 8006212:	429a      	cmp	r2, r3
 8006214:	d0df      	beq.n	80061d6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800622c:	095b      	lsrs	r3, r3, #5
 800622e:	3301      	adds	r3, #1
 8006230:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	3301      	adds	r3, #1
 8006238:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	3307      	adds	r3, #7
 800623e:	08db      	lsrs	r3, r3, #3
 8006240:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	fb02 f303 	mul.w	r3, r2, r3
}
 800624a:	4618      	mov	r0, r3
 800624c:	3714      	adds	r7, #20
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006256:	b580      	push	{r7, lr}
 8006258:	b082      	sub	sp, #8
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d101      	bne.n	8006268 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e042      	b.n	80062ee <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800626e:	2b00      	cmp	r3, #0
 8006270:	d106      	bne.n	8006280 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f83b 	bl	80062f6 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2224      	movs	r2, #36	@ 0x24
 8006284:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 0201 	bic.w	r2, r2, #1
 8006296:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800629c:	2b00      	cmp	r3, #0
 800629e:	d002      	beq.n	80062a6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 fe29 	bl	8006ef8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 f8be 	bl	8006428 <UART_SetConfig>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d101      	bne.n	80062b6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e01b      	b.n	80062ee <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80062c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689a      	ldr	r2, [r3, #8]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80062d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f042 0201 	orr.w	r2, r2, #1
 80062e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 fea8 	bl	800703c <UART_CheckIdleState>
 80062ec:	4603      	mov	r3, r0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3708      	adds	r7, #8
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80062f6:	b480      	push	{r7}
 80062f8:	b083      	sub	sp, #12
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80062fe:	bf00      	nop
 8006300:	370c      	adds	r7, #12
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800630a:	b580      	push	{r7, lr}
 800630c:	b08a      	sub	sp, #40	@ 0x28
 800630e:	af02      	add	r7, sp, #8
 8006310:	60f8      	str	r0, [r7, #12]
 8006312:	60b9      	str	r1, [r7, #8]
 8006314:	603b      	str	r3, [r7, #0]
 8006316:	4613      	mov	r3, r2
 8006318:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006320:	2b20      	cmp	r3, #32
 8006322:	d17b      	bne.n	800641c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d002      	beq.n	8006330 <HAL_UART_Transmit+0x26>
 800632a:	88fb      	ldrh	r3, [r7, #6]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d101      	bne.n	8006334 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e074      	b.n	800641e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2221      	movs	r2, #33	@ 0x21
 8006340:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006344:	f7fb fb70 	bl	8001a28 <HAL_GetTick>
 8006348:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	88fa      	ldrh	r2, [r7, #6]
 800634e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	88fa      	ldrh	r2, [r7, #6]
 8006356:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006362:	d108      	bne.n	8006376 <HAL_UART_Transmit+0x6c>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d104      	bne.n	8006376 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800636c:	2300      	movs	r3, #0
 800636e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	61bb      	str	r3, [r7, #24]
 8006374:	e003      	b.n	800637e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800637a:	2300      	movs	r3, #0
 800637c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800637e:	e030      	b.n	80063e2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	9300      	str	r3, [sp, #0]
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	2200      	movs	r2, #0
 8006388:	2180      	movs	r1, #128	@ 0x80
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f000 ff00 	bl	8007190 <UART_WaitOnFlagUntilTimeout>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d005      	beq.n	80063a2 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2220      	movs	r2, #32
 800639a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e03d      	b.n	800641e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d10b      	bne.n	80063c0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	881b      	ldrh	r3, [r3, #0]
 80063ac:	461a      	mov	r2, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063b6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	3302      	adds	r3, #2
 80063bc:	61bb      	str	r3, [r7, #24]
 80063be:	e007      	b.n	80063d0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	781a      	ldrb	r2, [r3, #0]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	3301      	adds	r3, #1
 80063ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	3b01      	subs	r3, #1
 80063da:	b29a      	uxth	r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1c8      	bne.n	8006380 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	2200      	movs	r2, #0
 80063f6:	2140      	movs	r1, #64	@ 0x40
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 fec9 	bl	8007190 <UART_WaitOnFlagUntilTimeout>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d005      	beq.n	8006410 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2220      	movs	r2, #32
 8006408:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800640c:	2303      	movs	r3, #3
 800640e:	e006      	b.n	800641e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2220      	movs	r2, #32
 8006414:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006418:	2300      	movs	r3, #0
 800641a:	e000      	b.n	800641e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800641c:	2302      	movs	r3, #2
  }
}
 800641e:	4618      	mov	r0, r3
 8006420:	3720      	adds	r7, #32
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
	...

08006428 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800642c:	b092      	sub	sp, #72	@ 0x48
 800642e:	af00      	add	r7, sp, #0
 8006430:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006432:	2300      	movs	r3, #0
 8006434:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	689a      	ldr	r2, [r3, #8]
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	431a      	orrs	r2, r3
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	431a      	orrs	r2, r3
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	69db      	ldr	r3, [r3, #28]
 800644c:	4313      	orrs	r3, r2
 800644e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	4bbe      	ldr	r3, [pc, #760]	@ (8006750 <UART_SetConfig+0x328>)
 8006458:	4013      	ands	r3, r2
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	6812      	ldr	r2, [r2, #0]
 800645e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006460:	430b      	orrs	r3, r1
 8006462:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	68da      	ldr	r2, [r3, #12]
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	430a      	orrs	r2, r1
 8006478:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4ab3      	ldr	r2, [pc, #716]	@ (8006754 <UART_SetConfig+0x32c>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d004      	beq.n	8006494 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	6a1b      	ldr	r3, [r3, #32]
 800648e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006490:	4313      	orrs	r3, r2
 8006492:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	689a      	ldr	r2, [r3, #8]
 800649a:	4baf      	ldr	r3, [pc, #700]	@ (8006758 <UART_SetConfig+0x330>)
 800649c:	4013      	ands	r3, r2
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	6812      	ldr	r2, [r2, #0]
 80064a2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80064a4:	430b      	orrs	r3, r1
 80064a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ae:	f023 010f 	bic.w	r1, r3, #15
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	430a      	orrs	r2, r1
 80064bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4aa6      	ldr	r2, [pc, #664]	@ (800675c <UART_SetConfig+0x334>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d177      	bne.n	80065b8 <UART_SetConfig+0x190>
 80064c8:	4ba5      	ldr	r3, [pc, #660]	@ (8006760 <UART_SetConfig+0x338>)
 80064ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80064d0:	2b28      	cmp	r3, #40	@ 0x28
 80064d2:	d86d      	bhi.n	80065b0 <UART_SetConfig+0x188>
 80064d4:	a201      	add	r2, pc, #4	@ (adr r2, 80064dc <UART_SetConfig+0xb4>)
 80064d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064da:	bf00      	nop
 80064dc:	08006581 	.word	0x08006581
 80064e0:	080065b1 	.word	0x080065b1
 80064e4:	080065b1 	.word	0x080065b1
 80064e8:	080065b1 	.word	0x080065b1
 80064ec:	080065b1 	.word	0x080065b1
 80064f0:	080065b1 	.word	0x080065b1
 80064f4:	080065b1 	.word	0x080065b1
 80064f8:	080065b1 	.word	0x080065b1
 80064fc:	08006589 	.word	0x08006589
 8006500:	080065b1 	.word	0x080065b1
 8006504:	080065b1 	.word	0x080065b1
 8006508:	080065b1 	.word	0x080065b1
 800650c:	080065b1 	.word	0x080065b1
 8006510:	080065b1 	.word	0x080065b1
 8006514:	080065b1 	.word	0x080065b1
 8006518:	080065b1 	.word	0x080065b1
 800651c:	08006591 	.word	0x08006591
 8006520:	080065b1 	.word	0x080065b1
 8006524:	080065b1 	.word	0x080065b1
 8006528:	080065b1 	.word	0x080065b1
 800652c:	080065b1 	.word	0x080065b1
 8006530:	080065b1 	.word	0x080065b1
 8006534:	080065b1 	.word	0x080065b1
 8006538:	080065b1 	.word	0x080065b1
 800653c:	08006599 	.word	0x08006599
 8006540:	080065b1 	.word	0x080065b1
 8006544:	080065b1 	.word	0x080065b1
 8006548:	080065b1 	.word	0x080065b1
 800654c:	080065b1 	.word	0x080065b1
 8006550:	080065b1 	.word	0x080065b1
 8006554:	080065b1 	.word	0x080065b1
 8006558:	080065b1 	.word	0x080065b1
 800655c:	080065a1 	.word	0x080065a1
 8006560:	080065b1 	.word	0x080065b1
 8006564:	080065b1 	.word	0x080065b1
 8006568:	080065b1 	.word	0x080065b1
 800656c:	080065b1 	.word	0x080065b1
 8006570:	080065b1 	.word	0x080065b1
 8006574:	080065b1 	.word	0x080065b1
 8006578:	080065b1 	.word	0x080065b1
 800657c:	080065a9 	.word	0x080065a9
 8006580:	2301      	movs	r3, #1
 8006582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006586:	e222      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006588:	2304      	movs	r3, #4
 800658a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800658e:	e21e      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006590:	2308      	movs	r3, #8
 8006592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006596:	e21a      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006598:	2310      	movs	r3, #16
 800659a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800659e:	e216      	b.n	80069ce <UART_SetConfig+0x5a6>
 80065a0:	2320      	movs	r3, #32
 80065a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065a6:	e212      	b.n	80069ce <UART_SetConfig+0x5a6>
 80065a8:	2340      	movs	r3, #64	@ 0x40
 80065aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ae:	e20e      	b.n	80069ce <UART_SetConfig+0x5a6>
 80065b0:	2380      	movs	r3, #128	@ 0x80
 80065b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065b6:	e20a      	b.n	80069ce <UART_SetConfig+0x5a6>
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a69      	ldr	r2, [pc, #420]	@ (8006764 <UART_SetConfig+0x33c>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d130      	bne.n	8006624 <UART_SetConfig+0x1fc>
 80065c2:	4b67      	ldr	r3, [pc, #412]	@ (8006760 <UART_SetConfig+0x338>)
 80065c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065c6:	f003 0307 	and.w	r3, r3, #7
 80065ca:	2b05      	cmp	r3, #5
 80065cc:	d826      	bhi.n	800661c <UART_SetConfig+0x1f4>
 80065ce:	a201      	add	r2, pc, #4	@ (adr r2, 80065d4 <UART_SetConfig+0x1ac>)
 80065d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d4:	080065ed 	.word	0x080065ed
 80065d8:	080065f5 	.word	0x080065f5
 80065dc:	080065fd 	.word	0x080065fd
 80065e0:	08006605 	.word	0x08006605
 80065e4:	0800660d 	.word	0x0800660d
 80065e8:	08006615 	.word	0x08006615
 80065ec:	2300      	movs	r3, #0
 80065ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065f2:	e1ec      	b.n	80069ce <UART_SetConfig+0x5a6>
 80065f4:	2304      	movs	r3, #4
 80065f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065fa:	e1e8      	b.n	80069ce <UART_SetConfig+0x5a6>
 80065fc:	2308      	movs	r3, #8
 80065fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006602:	e1e4      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006604:	2310      	movs	r3, #16
 8006606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800660a:	e1e0      	b.n	80069ce <UART_SetConfig+0x5a6>
 800660c:	2320      	movs	r3, #32
 800660e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006612:	e1dc      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006614:	2340      	movs	r3, #64	@ 0x40
 8006616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800661a:	e1d8      	b.n	80069ce <UART_SetConfig+0x5a6>
 800661c:	2380      	movs	r3, #128	@ 0x80
 800661e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006622:	e1d4      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a4f      	ldr	r2, [pc, #316]	@ (8006768 <UART_SetConfig+0x340>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d130      	bne.n	8006690 <UART_SetConfig+0x268>
 800662e:	4b4c      	ldr	r3, [pc, #304]	@ (8006760 <UART_SetConfig+0x338>)
 8006630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006632:	f003 0307 	and.w	r3, r3, #7
 8006636:	2b05      	cmp	r3, #5
 8006638:	d826      	bhi.n	8006688 <UART_SetConfig+0x260>
 800663a:	a201      	add	r2, pc, #4	@ (adr r2, 8006640 <UART_SetConfig+0x218>)
 800663c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006640:	08006659 	.word	0x08006659
 8006644:	08006661 	.word	0x08006661
 8006648:	08006669 	.word	0x08006669
 800664c:	08006671 	.word	0x08006671
 8006650:	08006679 	.word	0x08006679
 8006654:	08006681 	.word	0x08006681
 8006658:	2300      	movs	r3, #0
 800665a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800665e:	e1b6      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006660:	2304      	movs	r3, #4
 8006662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006666:	e1b2      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006668:	2308      	movs	r3, #8
 800666a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800666e:	e1ae      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006670:	2310      	movs	r3, #16
 8006672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006676:	e1aa      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006678:	2320      	movs	r3, #32
 800667a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800667e:	e1a6      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006680:	2340      	movs	r3, #64	@ 0x40
 8006682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006686:	e1a2      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006688:	2380      	movs	r3, #128	@ 0x80
 800668a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800668e:	e19e      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a35      	ldr	r2, [pc, #212]	@ (800676c <UART_SetConfig+0x344>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d130      	bne.n	80066fc <UART_SetConfig+0x2d4>
 800669a:	4b31      	ldr	r3, [pc, #196]	@ (8006760 <UART_SetConfig+0x338>)
 800669c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800669e:	f003 0307 	and.w	r3, r3, #7
 80066a2:	2b05      	cmp	r3, #5
 80066a4:	d826      	bhi.n	80066f4 <UART_SetConfig+0x2cc>
 80066a6:	a201      	add	r2, pc, #4	@ (adr r2, 80066ac <UART_SetConfig+0x284>)
 80066a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ac:	080066c5 	.word	0x080066c5
 80066b0:	080066cd 	.word	0x080066cd
 80066b4:	080066d5 	.word	0x080066d5
 80066b8:	080066dd 	.word	0x080066dd
 80066bc:	080066e5 	.word	0x080066e5
 80066c0:	080066ed 	.word	0x080066ed
 80066c4:	2300      	movs	r3, #0
 80066c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ca:	e180      	b.n	80069ce <UART_SetConfig+0x5a6>
 80066cc:	2304      	movs	r3, #4
 80066ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066d2:	e17c      	b.n	80069ce <UART_SetConfig+0x5a6>
 80066d4:	2308      	movs	r3, #8
 80066d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066da:	e178      	b.n	80069ce <UART_SetConfig+0x5a6>
 80066dc:	2310      	movs	r3, #16
 80066de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066e2:	e174      	b.n	80069ce <UART_SetConfig+0x5a6>
 80066e4:	2320      	movs	r3, #32
 80066e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066ea:	e170      	b.n	80069ce <UART_SetConfig+0x5a6>
 80066ec:	2340      	movs	r3, #64	@ 0x40
 80066ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066f2:	e16c      	b.n	80069ce <UART_SetConfig+0x5a6>
 80066f4:	2380      	movs	r3, #128	@ 0x80
 80066f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066fa:	e168      	b.n	80069ce <UART_SetConfig+0x5a6>
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a1b      	ldr	r2, [pc, #108]	@ (8006770 <UART_SetConfig+0x348>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d142      	bne.n	800678c <UART_SetConfig+0x364>
 8006706:	4b16      	ldr	r3, [pc, #88]	@ (8006760 <UART_SetConfig+0x338>)
 8006708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800670a:	f003 0307 	and.w	r3, r3, #7
 800670e:	2b05      	cmp	r3, #5
 8006710:	d838      	bhi.n	8006784 <UART_SetConfig+0x35c>
 8006712:	a201      	add	r2, pc, #4	@ (adr r2, 8006718 <UART_SetConfig+0x2f0>)
 8006714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006718:	08006731 	.word	0x08006731
 800671c:	08006739 	.word	0x08006739
 8006720:	08006741 	.word	0x08006741
 8006724:	08006749 	.word	0x08006749
 8006728:	08006775 	.word	0x08006775
 800672c:	0800677d 	.word	0x0800677d
 8006730:	2300      	movs	r3, #0
 8006732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006736:	e14a      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006738:	2304      	movs	r3, #4
 800673a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800673e:	e146      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006740:	2308      	movs	r3, #8
 8006742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006746:	e142      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006748:	2310      	movs	r3, #16
 800674a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800674e:	e13e      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006750:	cfff69f3 	.word	0xcfff69f3
 8006754:	58000c00 	.word	0x58000c00
 8006758:	11fff4ff 	.word	0x11fff4ff
 800675c:	40011000 	.word	0x40011000
 8006760:	58024400 	.word	0x58024400
 8006764:	40004400 	.word	0x40004400
 8006768:	40004800 	.word	0x40004800
 800676c:	40004c00 	.word	0x40004c00
 8006770:	40005000 	.word	0x40005000
 8006774:	2320      	movs	r3, #32
 8006776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800677a:	e128      	b.n	80069ce <UART_SetConfig+0x5a6>
 800677c:	2340      	movs	r3, #64	@ 0x40
 800677e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006782:	e124      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006784:	2380      	movs	r3, #128	@ 0x80
 8006786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800678a:	e120      	b.n	80069ce <UART_SetConfig+0x5a6>
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4acb      	ldr	r2, [pc, #812]	@ (8006ac0 <UART_SetConfig+0x698>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d176      	bne.n	8006884 <UART_SetConfig+0x45c>
 8006796:	4bcb      	ldr	r3, [pc, #812]	@ (8006ac4 <UART_SetConfig+0x69c>)
 8006798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800679a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800679e:	2b28      	cmp	r3, #40	@ 0x28
 80067a0:	d86c      	bhi.n	800687c <UART_SetConfig+0x454>
 80067a2:	a201      	add	r2, pc, #4	@ (adr r2, 80067a8 <UART_SetConfig+0x380>)
 80067a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a8:	0800684d 	.word	0x0800684d
 80067ac:	0800687d 	.word	0x0800687d
 80067b0:	0800687d 	.word	0x0800687d
 80067b4:	0800687d 	.word	0x0800687d
 80067b8:	0800687d 	.word	0x0800687d
 80067bc:	0800687d 	.word	0x0800687d
 80067c0:	0800687d 	.word	0x0800687d
 80067c4:	0800687d 	.word	0x0800687d
 80067c8:	08006855 	.word	0x08006855
 80067cc:	0800687d 	.word	0x0800687d
 80067d0:	0800687d 	.word	0x0800687d
 80067d4:	0800687d 	.word	0x0800687d
 80067d8:	0800687d 	.word	0x0800687d
 80067dc:	0800687d 	.word	0x0800687d
 80067e0:	0800687d 	.word	0x0800687d
 80067e4:	0800687d 	.word	0x0800687d
 80067e8:	0800685d 	.word	0x0800685d
 80067ec:	0800687d 	.word	0x0800687d
 80067f0:	0800687d 	.word	0x0800687d
 80067f4:	0800687d 	.word	0x0800687d
 80067f8:	0800687d 	.word	0x0800687d
 80067fc:	0800687d 	.word	0x0800687d
 8006800:	0800687d 	.word	0x0800687d
 8006804:	0800687d 	.word	0x0800687d
 8006808:	08006865 	.word	0x08006865
 800680c:	0800687d 	.word	0x0800687d
 8006810:	0800687d 	.word	0x0800687d
 8006814:	0800687d 	.word	0x0800687d
 8006818:	0800687d 	.word	0x0800687d
 800681c:	0800687d 	.word	0x0800687d
 8006820:	0800687d 	.word	0x0800687d
 8006824:	0800687d 	.word	0x0800687d
 8006828:	0800686d 	.word	0x0800686d
 800682c:	0800687d 	.word	0x0800687d
 8006830:	0800687d 	.word	0x0800687d
 8006834:	0800687d 	.word	0x0800687d
 8006838:	0800687d 	.word	0x0800687d
 800683c:	0800687d 	.word	0x0800687d
 8006840:	0800687d 	.word	0x0800687d
 8006844:	0800687d 	.word	0x0800687d
 8006848:	08006875 	.word	0x08006875
 800684c:	2301      	movs	r3, #1
 800684e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006852:	e0bc      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006854:	2304      	movs	r3, #4
 8006856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800685a:	e0b8      	b.n	80069ce <UART_SetConfig+0x5a6>
 800685c:	2308      	movs	r3, #8
 800685e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006862:	e0b4      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006864:	2310      	movs	r3, #16
 8006866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800686a:	e0b0      	b.n	80069ce <UART_SetConfig+0x5a6>
 800686c:	2320      	movs	r3, #32
 800686e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006872:	e0ac      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006874:	2340      	movs	r3, #64	@ 0x40
 8006876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800687a:	e0a8      	b.n	80069ce <UART_SetConfig+0x5a6>
 800687c:	2380      	movs	r3, #128	@ 0x80
 800687e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006882:	e0a4      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a8f      	ldr	r2, [pc, #572]	@ (8006ac8 <UART_SetConfig+0x6a0>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d130      	bne.n	80068f0 <UART_SetConfig+0x4c8>
 800688e:	4b8d      	ldr	r3, [pc, #564]	@ (8006ac4 <UART_SetConfig+0x69c>)
 8006890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006892:	f003 0307 	and.w	r3, r3, #7
 8006896:	2b05      	cmp	r3, #5
 8006898:	d826      	bhi.n	80068e8 <UART_SetConfig+0x4c0>
 800689a:	a201      	add	r2, pc, #4	@ (adr r2, 80068a0 <UART_SetConfig+0x478>)
 800689c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a0:	080068b9 	.word	0x080068b9
 80068a4:	080068c1 	.word	0x080068c1
 80068a8:	080068c9 	.word	0x080068c9
 80068ac:	080068d1 	.word	0x080068d1
 80068b0:	080068d9 	.word	0x080068d9
 80068b4:	080068e1 	.word	0x080068e1
 80068b8:	2300      	movs	r3, #0
 80068ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068be:	e086      	b.n	80069ce <UART_SetConfig+0x5a6>
 80068c0:	2304      	movs	r3, #4
 80068c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068c6:	e082      	b.n	80069ce <UART_SetConfig+0x5a6>
 80068c8:	2308      	movs	r3, #8
 80068ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ce:	e07e      	b.n	80069ce <UART_SetConfig+0x5a6>
 80068d0:	2310      	movs	r3, #16
 80068d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068d6:	e07a      	b.n	80069ce <UART_SetConfig+0x5a6>
 80068d8:	2320      	movs	r3, #32
 80068da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068de:	e076      	b.n	80069ce <UART_SetConfig+0x5a6>
 80068e0:	2340      	movs	r3, #64	@ 0x40
 80068e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068e6:	e072      	b.n	80069ce <UART_SetConfig+0x5a6>
 80068e8:	2380      	movs	r3, #128	@ 0x80
 80068ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ee:	e06e      	b.n	80069ce <UART_SetConfig+0x5a6>
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a75      	ldr	r2, [pc, #468]	@ (8006acc <UART_SetConfig+0x6a4>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d130      	bne.n	800695c <UART_SetConfig+0x534>
 80068fa:	4b72      	ldr	r3, [pc, #456]	@ (8006ac4 <UART_SetConfig+0x69c>)
 80068fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068fe:	f003 0307 	and.w	r3, r3, #7
 8006902:	2b05      	cmp	r3, #5
 8006904:	d826      	bhi.n	8006954 <UART_SetConfig+0x52c>
 8006906:	a201      	add	r2, pc, #4	@ (adr r2, 800690c <UART_SetConfig+0x4e4>)
 8006908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690c:	08006925 	.word	0x08006925
 8006910:	0800692d 	.word	0x0800692d
 8006914:	08006935 	.word	0x08006935
 8006918:	0800693d 	.word	0x0800693d
 800691c:	08006945 	.word	0x08006945
 8006920:	0800694d 	.word	0x0800694d
 8006924:	2300      	movs	r3, #0
 8006926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800692a:	e050      	b.n	80069ce <UART_SetConfig+0x5a6>
 800692c:	2304      	movs	r3, #4
 800692e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006932:	e04c      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006934:	2308      	movs	r3, #8
 8006936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800693a:	e048      	b.n	80069ce <UART_SetConfig+0x5a6>
 800693c:	2310      	movs	r3, #16
 800693e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006942:	e044      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006944:	2320      	movs	r3, #32
 8006946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800694a:	e040      	b.n	80069ce <UART_SetConfig+0x5a6>
 800694c:	2340      	movs	r3, #64	@ 0x40
 800694e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006952:	e03c      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006954:	2380      	movs	r3, #128	@ 0x80
 8006956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800695a:	e038      	b.n	80069ce <UART_SetConfig+0x5a6>
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a5b      	ldr	r2, [pc, #364]	@ (8006ad0 <UART_SetConfig+0x6a8>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d130      	bne.n	80069c8 <UART_SetConfig+0x5a0>
 8006966:	4b57      	ldr	r3, [pc, #348]	@ (8006ac4 <UART_SetConfig+0x69c>)
 8006968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800696a:	f003 0307 	and.w	r3, r3, #7
 800696e:	2b05      	cmp	r3, #5
 8006970:	d826      	bhi.n	80069c0 <UART_SetConfig+0x598>
 8006972:	a201      	add	r2, pc, #4	@ (adr r2, 8006978 <UART_SetConfig+0x550>)
 8006974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006978:	08006991 	.word	0x08006991
 800697c:	08006999 	.word	0x08006999
 8006980:	080069a1 	.word	0x080069a1
 8006984:	080069a9 	.word	0x080069a9
 8006988:	080069b1 	.word	0x080069b1
 800698c:	080069b9 	.word	0x080069b9
 8006990:	2302      	movs	r3, #2
 8006992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006996:	e01a      	b.n	80069ce <UART_SetConfig+0x5a6>
 8006998:	2304      	movs	r3, #4
 800699a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800699e:	e016      	b.n	80069ce <UART_SetConfig+0x5a6>
 80069a0:	2308      	movs	r3, #8
 80069a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069a6:	e012      	b.n	80069ce <UART_SetConfig+0x5a6>
 80069a8:	2310      	movs	r3, #16
 80069aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ae:	e00e      	b.n	80069ce <UART_SetConfig+0x5a6>
 80069b0:	2320      	movs	r3, #32
 80069b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069b6:	e00a      	b.n	80069ce <UART_SetConfig+0x5a6>
 80069b8:	2340      	movs	r3, #64	@ 0x40
 80069ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069be:	e006      	b.n	80069ce <UART_SetConfig+0x5a6>
 80069c0:	2380      	movs	r3, #128	@ 0x80
 80069c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069c6:	e002      	b.n	80069ce <UART_SetConfig+0x5a6>
 80069c8:	2380      	movs	r3, #128	@ 0x80
 80069ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a3f      	ldr	r2, [pc, #252]	@ (8006ad0 <UART_SetConfig+0x6a8>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	f040 80f8 	bne.w	8006bca <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80069da:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80069de:	2b20      	cmp	r3, #32
 80069e0:	dc46      	bgt.n	8006a70 <UART_SetConfig+0x648>
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	f2c0 8082 	blt.w	8006aec <UART_SetConfig+0x6c4>
 80069e8:	3b02      	subs	r3, #2
 80069ea:	2b1e      	cmp	r3, #30
 80069ec:	d87e      	bhi.n	8006aec <UART_SetConfig+0x6c4>
 80069ee:	a201      	add	r2, pc, #4	@ (adr r2, 80069f4 <UART_SetConfig+0x5cc>)
 80069f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f4:	08006a77 	.word	0x08006a77
 80069f8:	08006aed 	.word	0x08006aed
 80069fc:	08006a7f 	.word	0x08006a7f
 8006a00:	08006aed 	.word	0x08006aed
 8006a04:	08006aed 	.word	0x08006aed
 8006a08:	08006aed 	.word	0x08006aed
 8006a0c:	08006a8f 	.word	0x08006a8f
 8006a10:	08006aed 	.word	0x08006aed
 8006a14:	08006aed 	.word	0x08006aed
 8006a18:	08006aed 	.word	0x08006aed
 8006a1c:	08006aed 	.word	0x08006aed
 8006a20:	08006aed 	.word	0x08006aed
 8006a24:	08006aed 	.word	0x08006aed
 8006a28:	08006aed 	.word	0x08006aed
 8006a2c:	08006a9f 	.word	0x08006a9f
 8006a30:	08006aed 	.word	0x08006aed
 8006a34:	08006aed 	.word	0x08006aed
 8006a38:	08006aed 	.word	0x08006aed
 8006a3c:	08006aed 	.word	0x08006aed
 8006a40:	08006aed 	.word	0x08006aed
 8006a44:	08006aed 	.word	0x08006aed
 8006a48:	08006aed 	.word	0x08006aed
 8006a4c:	08006aed 	.word	0x08006aed
 8006a50:	08006aed 	.word	0x08006aed
 8006a54:	08006aed 	.word	0x08006aed
 8006a58:	08006aed 	.word	0x08006aed
 8006a5c:	08006aed 	.word	0x08006aed
 8006a60:	08006aed 	.word	0x08006aed
 8006a64:	08006aed 	.word	0x08006aed
 8006a68:	08006aed 	.word	0x08006aed
 8006a6c:	08006adf 	.word	0x08006adf
 8006a70:	2b40      	cmp	r3, #64	@ 0x40
 8006a72:	d037      	beq.n	8006ae4 <UART_SetConfig+0x6bc>
 8006a74:	e03a      	b.n	8006aec <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006a76:	f7fe f86b 	bl	8004b50 <HAL_RCCEx_GetD3PCLK1Freq>
 8006a7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006a7c:	e03c      	b.n	8006af8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7fe f87a 	bl	8004b7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a8c:	e034      	b.n	8006af8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a8e:	f107 0318 	add.w	r3, r7, #24
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7fe f9c6 	bl	8004e24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a9c:	e02c      	b.n	8006af8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a9e:	4b09      	ldr	r3, [pc, #36]	@ (8006ac4 <UART_SetConfig+0x69c>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0320 	and.w	r3, r3, #32
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d016      	beq.n	8006ad8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006aaa:	4b06      	ldr	r3, [pc, #24]	@ (8006ac4 <UART_SetConfig+0x69c>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	08db      	lsrs	r3, r3, #3
 8006ab0:	f003 0303 	and.w	r3, r3, #3
 8006ab4:	4a07      	ldr	r2, [pc, #28]	@ (8006ad4 <UART_SetConfig+0x6ac>)
 8006ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8006aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006abc:	e01c      	b.n	8006af8 <UART_SetConfig+0x6d0>
 8006abe:	bf00      	nop
 8006ac0:	40011400 	.word	0x40011400
 8006ac4:	58024400 	.word	0x58024400
 8006ac8:	40007800 	.word	0x40007800
 8006acc:	40007c00 	.word	0x40007c00
 8006ad0:	58000c00 	.word	0x58000c00
 8006ad4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006ad8:	4b9d      	ldr	r3, [pc, #628]	@ (8006d50 <UART_SetConfig+0x928>)
 8006ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006adc:	e00c      	b.n	8006af8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006ade:	4b9d      	ldr	r3, [pc, #628]	@ (8006d54 <UART_SetConfig+0x92c>)
 8006ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ae2:	e009      	b.n	8006af8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ae4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006aea:	e005      	b.n	8006af8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006aec:	2300      	movs	r3, #0
 8006aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006af6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006af8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f000 81de 	beq.w	8006ebc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b04:	4a94      	ldr	r2, [pc, #592]	@ (8006d58 <UART_SetConfig+0x930>)
 8006b06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b12:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	685a      	ldr	r2, [r3, #4]
 8006b18:	4613      	mov	r3, r2
 8006b1a:	005b      	lsls	r3, r3, #1
 8006b1c:	4413      	add	r3, r2
 8006b1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d305      	bcc.n	8006b30 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d903      	bls.n	8006b38 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006b36:	e1c1      	b.n	8006ebc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	60bb      	str	r3, [r7, #8]
 8006b3e:	60fa      	str	r2, [r7, #12]
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b44:	4a84      	ldr	r2, [pc, #528]	@ (8006d58 <UART_SetConfig+0x930>)
 8006b46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	603b      	str	r3, [r7, #0]
 8006b50:	607a      	str	r2, [r7, #4]
 8006b52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b5a:	f7f9 fc11 	bl	8000380 <__aeabi_uldivmod>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	460b      	mov	r3, r1
 8006b62:	4610      	mov	r0, r2
 8006b64:	4619      	mov	r1, r3
 8006b66:	f04f 0200 	mov.w	r2, #0
 8006b6a:	f04f 0300 	mov.w	r3, #0
 8006b6e:	020b      	lsls	r3, r1, #8
 8006b70:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006b74:	0202      	lsls	r2, r0, #8
 8006b76:	6979      	ldr	r1, [r7, #20]
 8006b78:	6849      	ldr	r1, [r1, #4]
 8006b7a:	0849      	lsrs	r1, r1, #1
 8006b7c:	2000      	movs	r0, #0
 8006b7e:	460c      	mov	r4, r1
 8006b80:	4605      	mov	r5, r0
 8006b82:	eb12 0804 	adds.w	r8, r2, r4
 8006b86:	eb43 0905 	adc.w	r9, r3, r5
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	469a      	mov	sl, r3
 8006b92:	4693      	mov	fp, r2
 8006b94:	4652      	mov	r2, sl
 8006b96:	465b      	mov	r3, fp
 8006b98:	4640      	mov	r0, r8
 8006b9a:	4649      	mov	r1, r9
 8006b9c:	f7f9 fbf0 	bl	8000380 <__aeabi_uldivmod>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006baa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bae:	d308      	bcc.n	8006bc2 <UART_SetConfig+0x79a>
 8006bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bb6:	d204      	bcs.n	8006bc2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006bbe:	60da      	str	r2, [r3, #12]
 8006bc0:	e17c      	b.n	8006ebc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006bc8:	e178      	b.n	8006ebc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bd2:	f040 80c5 	bne.w	8006d60 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006bd6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006bda:	2b20      	cmp	r3, #32
 8006bdc:	dc48      	bgt.n	8006c70 <UART_SetConfig+0x848>
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	db7b      	blt.n	8006cda <UART_SetConfig+0x8b2>
 8006be2:	2b20      	cmp	r3, #32
 8006be4:	d879      	bhi.n	8006cda <UART_SetConfig+0x8b2>
 8006be6:	a201      	add	r2, pc, #4	@ (adr r2, 8006bec <UART_SetConfig+0x7c4>)
 8006be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bec:	08006c77 	.word	0x08006c77
 8006bf0:	08006c7f 	.word	0x08006c7f
 8006bf4:	08006cdb 	.word	0x08006cdb
 8006bf8:	08006cdb 	.word	0x08006cdb
 8006bfc:	08006c87 	.word	0x08006c87
 8006c00:	08006cdb 	.word	0x08006cdb
 8006c04:	08006cdb 	.word	0x08006cdb
 8006c08:	08006cdb 	.word	0x08006cdb
 8006c0c:	08006c97 	.word	0x08006c97
 8006c10:	08006cdb 	.word	0x08006cdb
 8006c14:	08006cdb 	.word	0x08006cdb
 8006c18:	08006cdb 	.word	0x08006cdb
 8006c1c:	08006cdb 	.word	0x08006cdb
 8006c20:	08006cdb 	.word	0x08006cdb
 8006c24:	08006cdb 	.word	0x08006cdb
 8006c28:	08006cdb 	.word	0x08006cdb
 8006c2c:	08006ca7 	.word	0x08006ca7
 8006c30:	08006cdb 	.word	0x08006cdb
 8006c34:	08006cdb 	.word	0x08006cdb
 8006c38:	08006cdb 	.word	0x08006cdb
 8006c3c:	08006cdb 	.word	0x08006cdb
 8006c40:	08006cdb 	.word	0x08006cdb
 8006c44:	08006cdb 	.word	0x08006cdb
 8006c48:	08006cdb 	.word	0x08006cdb
 8006c4c:	08006cdb 	.word	0x08006cdb
 8006c50:	08006cdb 	.word	0x08006cdb
 8006c54:	08006cdb 	.word	0x08006cdb
 8006c58:	08006cdb 	.word	0x08006cdb
 8006c5c:	08006cdb 	.word	0x08006cdb
 8006c60:	08006cdb 	.word	0x08006cdb
 8006c64:	08006cdb 	.word	0x08006cdb
 8006c68:	08006cdb 	.word	0x08006cdb
 8006c6c:	08006ccd 	.word	0x08006ccd
 8006c70:	2b40      	cmp	r3, #64	@ 0x40
 8006c72:	d02e      	beq.n	8006cd2 <UART_SetConfig+0x8aa>
 8006c74:	e031      	b.n	8006cda <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c76:	f7fc fd35 	bl	80036e4 <HAL_RCC_GetPCLK1Freq>
 8006c7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006c7c:	e033      	b.n	8006ce6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c7e:	f7fc fd47 	bl	8003710 <HAL_RCC_GetPCLK2Freq>
 8006c82:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006c84:	e02f      	b.n	8006ce6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7fd ff76 	bl	8004b7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c94:	e027      	b.n	8006ce6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c96:	f107 0318 	add.w	r3, r7, #24
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fe f8c2 	bl	8004e24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ca4:	e01f      	b.n	8006ce6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ca6:	4b2d      	ldr	r3, [pc, #180]	@ (8006d5c <UART_SetConfig+0x934>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 0320 	and.w	r3, r3, #32
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d009      	beq.n	8006cc6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006cb2:	4b2a      	ldr	r3, [pc, #168]	@ (8006d5c <UART_SetConfig+0x934>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	08db      	lsrs	r3, r3, #3
 8006cb8:	f003 0303 	and.w	r3, r3, #3
 8006cbc:	4a24      	ldr	r2, [pc, #144]	@ (8006d50 <UART_SetConfig+0x928>)
 8006cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8006cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006cc4:	e00f      	b.n	8006ce6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006cc6:	4b22      	ldr	r3, [pc, #136]	@ (8006d50 <UART_SetConfig+0x928>)
 8006cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cca:	e00c      	b.n	8006ce6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006ccc:	4b21      	ldr	r3, [pc, #132]	@ (8006d54 <UART_SetConfig+0x92c>)
 8006cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cd0:	e009      	b.n	8006ce6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cd8:	e005      	b.n	8006ce6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006ce4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f000 80e7 	beq.w	8006ebc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf2:	4a19      	ldr	r2, [pc, #100]	@ (8006d58 <UART_SetConfig+0x930>)
 8006cf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d00:	005a      	lsls	r2, r3, #1
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	085b      	lsrs	r3, r3, #1
 8006d08:	441a      	add	r2, r3
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d12:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d16:	2b0f      	cmp	r3, #15
 8006d18:	d916      	bls.n	8006d48 <UART_SetConfig+0x920>
 8006d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d20:	d212      	bcs.n	8006d48 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	f023 030f 	bic.w	r3, r3, #15
 8006d2a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d2e:	085b      	lsrs	r3, r3, #1
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	f003 0307 	and.w	r3, r3, #7
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006d44:	60da      	str	r2, [r3, #12]
 8006d46:	e0b9      	b.n	8006ebc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006d4e:	e0b5      	b.n	8006ebc <UART_SetConfig+0xa94>
 8006d50:	03d09000 	.word	0x03d09000
 8006d54:	003d0900 	.word	0x003d0900
 8006d58:	08009e28 	.word	0x08009e28
 8006d5c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d60:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006d64:	2b20      	cmp	r3, #32
 8006d66:	dc49      	bgt.n	8006dfc <UART_SetConfig+0x9d4>
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	db7c      	blt.n	8006e66 <UART_SetConfig+0xa3e>
 8006d6c:	2b20      	cmp	r3, #32
 8006d6e:	d87a      	bhi.n	8006e66 <UART_SetConfig+0xa3e>
 8006d70:	a201      	add	r2, pc, #4	@ (adr r2, 8006d78 <UART_SetConfig+0x950>)
 8006d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d76:	bf00      	nop
 8006d78:	08006e03 	.word	0x08006e03
 8006d7c:	08006e0b 	.word	0x08006e0b
 8006d80:	08006e67 	.word	0x08006e67
 8006d84:	08006e67 	.word	0x08006e67
 8006d88:	08006e13 	.word	0x08006e13
 8006d8c:	08006e67 	.word	0x08006e67
 8006d90:	08006e67 	.word	0x08006e67
 8006d94:	08006e67 	.word	0x08006e67
 8006d98:	08006e23 	.word	0x08006e23
 8006d9c:	08006e67 	.word	0x08006e67
 8006da0:	08006e67 	.word	0x08006e67
 8006da4:	08006e67 	.word	0x08006e67
 8006da8:	08006e67 	.word	0x08006e67
 8006dac:	08006e67 	.word	0x08006e67
 8006db0:	08006e67 	.word	0x08006e67
 8006db4:	08006e67 	.word	0x08006e67
 8006db8:	08006e33 	.word	0x08006e33
 8006dbc:	08006e67 	.word	0x08006e67
 8006dc0:	08006e67 	.word	0x08006e67
 8006dc4:	08006e67 	.word	0x08006e67
 8006dc8:	08006e67 	.word	0x08006e67
 8006dcc:	08006e67 	.word	0x08006e67
 8006dd0:	08006e67 	.word	0x08006e67
 8006dd4:	08006e67 	.word	0x08006e67
 8006dd8:	08006e67 	.word	0x08006e67
 8006ddc:	08006e67 	.word	0x08006e67
 8006de0:	08006e67 	.word	0x08006e67
 8006de4:	08006e67 	.word	0x08006e67
 8006de8:	08006e67 	.word	0x08006e67
 8006dec:	08006e67 	.word	0x08006e67
 8006df0:	08006e67 	.word	0x08006e67
 8006df4:	08006e67 	.word	0x08006e67
 8006df8:	08006e59 	.word	0x08006e59
 8006dfc:	2b40      	cmp	r3, #64	@ 0x40
 8006dfe:	d02e      	beq.n	8006e5e <UART_SetConfig+0xa36>
 8006e00:	e031      	b.n	8006e66 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e02:	f7fc fc6f 	bl	80036e4 <HAL_RCC_GetPCLK1Freq>
 8006e06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006e08:	e033      	b.n	8006e72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e0a:	f7fc fc81 	bl	8003710 <HAL_RCC_GetPCLK2Freq>
 8006e0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006e10:	e02f      	b.n	8006e72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7fd feb0 	bl	8004b7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e20:	e027      	b.n	8006e72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e22:	f107 0318 	add.w	r3, r7, #24
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7fd fffc 	bl	8004e24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e30:	e01f      	b.n	8006e72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e32:	4b2d      	ldr	r3, [pc, #180]	@ (8006ee8 <UART_SetConfig+0xac0>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0320 	and.w	r3, r3, #32
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d009      	beq.n	8006e52 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006e3e:	4b2a      	ldr	r3, [pc, #168]	@ (8006ee8 <UART_SetConfig+0xac0>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	08db      	lsrs	r3, r3, #3
 8006e44:	f003 0303 	and.w	r3, r3, #3
 8006e48:	4a28      	ldr	r2, [pc, #160]	@ (8006eec <UART_SetConfig+0xac4>)
 8006e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006e50:	e00f      	b.n	8006e72 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006e52:	4b26      	ldr	r3, [pc, #152]	@ (8006eec <UART_SetConfig+0xac4>)
 8006e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e56:	e00c      	b.n	8006e72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006e58:	4b25      	ldr	r3, [pc, #148]	@ (8006ef0 <UART_SetConfig+0xac8>)
 8006e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e5c:	e009      	b.n	8006e72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e64:	e005      	b.n	8006e72 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006e66:	2300      	movs	r3, #0
 8006e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006e70:	bf00      	nop
    }

    if (pclk != 0U)
 8006e72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d021      	beq.n	8006ebc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e7c:	4a1d      	ldr	r2, [pc, #116]	@ (8006ef4 <UART_SetConfig+0xacc>)
 8006e7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e82:	461a      	mov	r2, r3
 8006e84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e86:	fbb3 f2f2 	udiv	r2, r3, r2
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	085b      	lsrs	r3, r3, #1
 8006e90:	441a      	add	r2, r3
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e9a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e9e:	2b0f      	cmp	r3, #15
 8006ea0:	d909      	bls.n	8006eb6 <UART_SetConfig+0xa8e>
 8006ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ea8:	d205      	bcs.n	8006eb6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	60da      	str	r2, [r3, #12]
 8006eb4:	e002      	b.n	8006ebc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006ed8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3748      	adds	r7, #72	@ 0x48
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ee6:	bf00      	nop
 8006ee8:	58024400 	.word	0x58024400
 8006eec:	03d09000 	.word	0x03d09000
 8006ef0:	003d0900 	.word	0x003d0900
 8006ef4:	08009e28 	.word	0x08009e28

08006ef8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f04:	f003 0308 	and.w	r3, r3, #8
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d00a      	beq.n	8006f22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	430a      	orrs	r2, r1
 8006f20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f26:	f003 0301 	and.w	r3, r3, #1
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00a      	beq.n	8006f44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	430a      	orrs	r2, r1
 8006f42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f48:	f003 0302 	and.w	r3, r3, #2
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00a      	beq.n	8006f66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	430a      	orrs	r2, r1
 8006f64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f6a:	f003 0304 	and.w	r3, r3, #4
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00a      	beq.n	8006f88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	430a      	orrs	r2, r1
 8006f86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f8c:	f003 0310 	and.w	r3, r3, #16
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d00a      	beq.n	8006faa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	430a      	orrs	r2, r1
 8006fa8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fae:	f003 0320 	and.w	r3, r3, #32
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00a      	beq.n	8006fcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	430a      	orrs	r2, r1
 8006fca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d01a      	beq.n	800700e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	430a      	orrs	r2, r1
 8006fec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ff2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ff6:	d10a      	bne.n	800700e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	430a      	orrs	r2, r1
 800700c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00a      	beq.n	8007030 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	430a      	orrs	r2, r1
 800702e:	605a      	str	r2, [r3, #4]
  }
}
 8007030:	bf00      	nop
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b098      	sub	sp, #96	@ 0x60
 8007040:	af02      	add	r7, sp, #8
 8007042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800704c:	f7fa fcec 	bl	8001a28 <HAL_GetTick>
 8007050:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0308 	and.w	r3, r3, #8
 800705c:	2b08      	cmp	r3, #8
 800705e:	d12f      	bne.n	80070c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007060:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007068:	2200      	movs	r2, #0
 800706a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f88e 	bl	8007190 <UART_WaitOnFlagUntilTimeout>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d022      	beq.n	80070c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007082:	e853 3f00 	ldrex	r3, [r3]
 8007086:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800708a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800708e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	461a      	mov	r2, r3
 8007096:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007098:	647b      	str	r3, [r7, #68]	@ 0x44
 800709a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800709e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070a0:	e841 2300 	strex	r3, r2, [r1]
 80070a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80070a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d1e6      	bne.n	800707a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2220      	movs	r2, #32
 80070b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070bc:	2303      	movs	r3, #3
 80070be:	e063      	b.n	8007188 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 0304 	and.w	r3, r3, #4
 80070ca:	2b04      	cmp	r3, #4
 80070cc:	d149      	bne.n	8007162 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80070d2:	9300      	str	r3, [sp, #0]
 80070d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070d6:	2200      	movs	r2, #0
 80070d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f857 	bl	8007190 <UART_WaitOnFlagUntilTimeout>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d03c      	beq.n	8007162 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f0:	e853 3f00 	ldrex	r3, [r3]
 80070f4:	623b      	str	r3, [r7, #32]
   return(result);
 80070f6:	6a3b      	ldr	r3, [r7, #32]
 80070f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	461a      	mov	r2, r3
 8007104:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007106:	633b      	str	r3, [r7, #48]	@ 0x30
 8007108:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800710c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800710e:	e841 2300 	strex	r3, r2, [r1]
 8007112:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007116:	2b00      	cmp	r3, #0
 8007118:	d1e6      	bne.n	80070e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	3308      	adds	r3, #8
 8007120:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	e853 3f00 	ldrex	r3, [r3]
 8007128:	60fb      	str	r3, [r7, #12]
   return(result);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f023 0301 	bic.w	r3, r3, #1
 8007130:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	3308      	adds	r3, #8
 8007138:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800713a:	61fa      	str	r2, [r7, #28]
 800713c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713e:	69b9      	ldr	r1, [r7, #24]
 8007140:	69fa      	ldr	r2, [r7, #28]
 8007142:	e841 2300 	strex	r3, r2, [r1]
 8007146:	617b      	str	r3, [r7, #20]
   return(result);
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d1e5      	bne.n	800711a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2220      	movs	r2, #32
 8007152:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800715e:	2303      	movs	r3, #3
 8007160:	e012      	b.n	8007188 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2220      	movs	r2, #32
 8007166:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2220      	movs	r2, #32
 800716e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	3758      	adds	r7, #88	@ 0x58
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	603b      	str	r3, [r7, #0]
 800719c:	4613      	mov	r3, r2
 800719e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071a0:	e04f      	b.n	8007242 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a8:	d04b      	beq.n	8007242 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071aa:	f7fa fc3d 	bl	8001a28 <HAL_GetTick>
 80071ae:	4602      	mov	r2, r0
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	69ba      	ldr	r2, [r7, #24]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d302      	bcc.n	80071c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d101      	bne.n	80071c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80071c0:	2303      	movs	r3, #3
 80071c2:	e04e      	b.n	8007262 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 0304 	and.w	r3, r3, #4
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d037      	beq.n	8007242 <UART_WaitOnFlagUntilTimeout+0xb2>
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	2b80      	cmp	r3, #128	@ 0x80
 80071d6:	d034      	beq.n	8007242 <UART_WaitOnFlagUntilTimeout+0xb2>
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	2b40      	cmp	r3, #64	@ 0x40
 80071dc:	d031      	beq.n	8007242 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	69db      	ldr	r3, [r3, #28]
 80071e4:	f003 0308 	and.w	r3, r3, #8
 80071e8:	2b08      	cmp	r3, #8
 80071ea:	d110      	bne.n	800720e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2208      	movs	r2, #8
 80071f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f000 f839 	bl	800726c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2208      	movs	r2, #8
 80071fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2200      	movs	r2, #0
 8007206:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e029      	b.n	8007262 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	69db      	ldr	r3, [r3, #28]
 8007214:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007218:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800721c:	d111      	bne.n	8007242 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007226:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007228:	68f8      	ldr	r0, [r7, #12]
 800722a:	f000 f81f 	bl	800726c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2220      	movs	r2, #32
 8007232:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2200      	movs	r2, #0
 800723a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800723e:	2303      	movs	r3, #3
 8007240:	e00f      	b.n	8007262 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	69da      	ldr	r2, [r3, #28]
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	4013      	ands	r3, r2
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	429a      	cmp	r2, r3
 8007250:	bf0c      	ite	eq
 8007252:	2301      	moveq	r3, #1
 8007254:	2300      	movne	r3, #0
 8007256:	b2db      	uxtb	r3, r3
 8007258:	461a      	mov	r2, r3
 800725a:	79fb      	ldrb	r3, [r7, #7]
 800725c:	429a      	cmp	r2, r3
 800725e:	d0a0      	beq.n	80071a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
	...

0800726c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800726c:	b480      	push	{r7}
 800726e:	b095      	sub	sp, #84	@ 0x54
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800727c:	e853 3f00 	ldrex	r3, [r3]
 8007280:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007284:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007288:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	461a      	mov	r2, r3
 8007290:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007292:	643b      	str	r3, [r7, #64]	@ 0x40
 8007294:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007296:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007298:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800729a:	e841 2300 	strex	r3, r2, [r1]
 800729e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80072a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1e6      	bne.n	8007274 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	3308      	adds	r3, #8
 80072ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ae:	6a3b      	ldr	r3, [r7, #32]
 80072b0:	e853 3f00 	ldrex	r3, [r3]
 80072b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80072b6:	69fa      	ldr	r2, [r7, #28]
 80072b8:	4b1e      	ldr	r3, [pc, #120]	@ (8007334 <UART_EndRxTransfer+0xc8>)
 80072ba:	4013      	ands	r3, r2
 80072bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	3308      	adds	r3, #8
 80072c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80072c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80072c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80072cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072ce:	e841 2300 	strex	r3, r2, [r1]
 80072d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80072d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1e5      	bne.n	80072a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d118      	bne.n	8007314 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	e853 3f00 	ldrex	r3, [r3]
 80072ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	f023 0310 	bic.w	r3, r3, #16
 80072f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	461a      	mov	r2, r3
 80072fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007300:	61bb      	str	r3, [r7, #24]
 8007302:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007304:	6979      	ldr	r1, [r7, #20]
 8007306:	69ba      	ldr	r2, [r7, #24]
 8007308:	e841 2300 	strex	r3, r2, [r1]
 800730c:	613b      	str	r3, [r7, #16]
   return(result);
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1e6      	bne.n	80072e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2220      	movs	r2, #32
 8007318:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007328:	bf00      	nop
 800732a:	3754      	adds	r7, #84	@ 0x54
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr
 8007334:	effffffe 	.word	0xeffffffe

08007338 <std>:
 8007338:	2300      	movs	r3, #0
 800733a:	b510      	push	{r4, lr}
 800733c:	4604      	mov	r4, r0
 800733e:	e9c0 3300 	strd	r3, r3, [r0]
 8007342:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007346:	6083      	str	r3, [r0, #8]
 8007348:	8181      	strh	r1, [r0, #12]
 800734a:	6643      	str	r3, [r0, #100]	@ 0x64
 800734c:	81c2      	strh	r2, [r0, #14]
 800734e:	6183      	str	r3, [r0, #24]
 8007350:	4619      	mov	r1, r3
 8007352:	2208      	movs	r2, #8
 8007354:	305c      	adds	r0, #92	@ 0x5c
 8007356:	f000 f906 	bl	8007566 <memset>
 800735a:	4b0d      	ldr	r3, [pc, #52]	@ (8007390 <std+0x58>)
 800735c:	6263      	str	r3, [r4, #36]	@ 0x24
 800735e:	4b0d      	ldr	r3, [pc, #52]	@ (8007394 <std+0x5c>)
 8007360:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007362:	4b0d      	ldr	r3, [pc, #52]	@ (8007398 <std+0x60>)
 8007364:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007366:	4b0d      	ldr	r3, [pc, #52]	@ (800739c <std+0x64>)
 8007368:	6323      	str	r3, [r4, #48]	@ 0x30
 800736a:	4b0d      	ldr	r3, [pc, #52]	@ (80073a0 <std+0x68>)
 800736c:	6224      	str	r4, [r4, #32]
 800736e:	429c      	cmp	r4, r3
 8007370:	d006      	beq.n	8007380 <std+0x48>
 8007372:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007376:	4294      	cmp	r4, r2
 8007378:	d002      	beq.n	8007380 <std+0x48>
 800737a:	33d0      	adds	r3, #208	@ 0xd0
 800737c:	429c      	cmp	r4, r3
 800737e:	d105      	bne.n	800738c <std+0x54>
 8007380:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007388:	f000 b966 	b.w	8007658 <__retarget_lock_init_recursive>
 800738c:	bd10      	pop	{r4, pc}
 800738e:	bf00      	nop
 8007390:	080074e1 	.word	0x080074e1
 8007394:	08007503 	.word	0x08007503
 8007398:	0800753b 	.word	0x0800753b
 800739c:	0800755f 	.word	0x0800755f
 80073a0:	24000270 	.word	0x24000270

080073a4 <stdio_exit_handler>:
 80073a4:	4a02      	ldr	r2, [pc, #8]	@ (80073b0 <stdio_exit_handler+0xc>)
 80073a6:	4903      	ldr	r1, [pc, #12]	@ (80073b4 <stdio_exit_handler+0x10>)
 80073a8:	4803      	ldr	r0, [pc, #12]	@ (80073b8 <stdio_exit_handler+0x14>)
 80073aa:	f000 b869 	b.w	8007480 <_fwalk_sglue>
 80073ae:	bf00      	nop
 80073b0:	2400002c 	.word	0x2400002c
 80073b4:	08007ef5 	.word	0x08007ef5
 80073b8:	2400003c 	.word	0x2400003c

080073bc <cleanup_stdio>:
 80073bc:	6841      	ldr	r1, [r0, #4]
 80073be:	4b0c      	ldr	r3, [pc, #48]	@ (80073f0 <cleanup_stdio+0x34>)
 80073c0:	4299      	cmp	r1, r3
 80073c2:	b510      	push	{r4, lr}
 80073c4:	4604      	mov	r4, r0
 80073c6:	d001      	beq.n	80073cc <cleanup_stdio+0x10>
 80073c8:	f000 fd94 	bl	8007ef4 <_fflush_r>
 80073cc:	68a1      	ldr	r1, [r4, #8]
 80073ce:	4b09      	ldr	r3, [pc, #36]	@ (80073f4 <cleanup_stdio+0x38>)
 80073d0:	4299      	cmp	r1, r3
 80073d2:	d002      	beq.n	80073da <cleanup_stdio+0x1e>
 80073d4:	4620      	mov	r0, r4
 80073d6:	f000 fd8d 	bl	8007ef4 <_fflush_r>
 80073da:	68e1      	ldr	r1, [r4, #12]
 80073dc:	4b06      	ldr	r3, [pc, #24]	@ (80073f8 <cleanup_stdio+0x3c>)
 80073de:	4299      	cmp	r1, r3
 80073e0:	d004      	beq.n	80073ec <cleanup_stdio+0x30>
 80073e2:	4620      	mov	r0, r4
 80073e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073e8:	f000 bd84 	b.w	8007ef4 <_fflush_r>
 80073ec:	bd10      	pop	{r4, pc}
 80073ee:	bf00      	nop
 80073f0:	24000270 	.word	0x24000270
 80073f4:	240002d8 	.word	0x240002d8
 80073f8:	24000340 	.word	0x24000340

080073fc <global_stdio_init.part.0>:
 80073fc:	b510      	push	{r4, lr}
 80073fe:	4b0b      	ldr	r3, [pc, #44]	@ (800742c <global_stdio_init.part.0+0x30>)
 8007400:	4c0b      	ldr	r4, [pc, #44]	@ (8007430 <global_stdio_init.part.0+0x34>)
 8007402:	4a0c      	ldr	r2, [pc, #48]	@ (8007434 <global_stdio_init.part.0+0x38>)
 8007404:	601a      	str	r2, [r3, #0]
 8007406:	4620      	mov	r0, r4
 8007408:	2200      	movs	r2, #0
 800740a:	2104      	movs	r1, #4
 800740c:	f7ff ff94 	bl	8007338 <std>
 8007410:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007414:	2201      	movs	r2, #1
 8007416:	2109      	movs	r1, #9
 8007418:	f7ff ff8e 	bl	8007338 <std>
 800741c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007420:	2202      	movs	r2, #2
 8007422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007426:	2112      	movs	r1, #18
 8007428:	f7ff bf86 	b.w	8007338 <std>
 800742c:	240003a8 	.word	0x240003a8
 8007430:	24000270 	.word	0x24000270
 8007434:	080073a5 	.word	0x080073a5

08007438 <__sfp_lock_acquire>:
 8007438:	4801      	ldr	r0, [pc, #4]	@ (8007440 <__sfp_lock_acquire+0x8>)
 800743a:	f000 b90e 	b.w	800765a <__retarget_lock_acquire_recursive>
 800743e:	bf00      	nop
 8007440:	240003b1 	.word	0x240003b1

08007444 <__sfp_lock_release>:
 8007444:	4801      	ldr	r0, [pc, #4]	@ (800744c <__sfp_lock_release+0x8>)
 8007446:	f000 b909 	b.w	800765c <__retarget_lock_release_recursive>
 800744a:	bf00      	nop
 800744c:	240003b1 	.word	0x240003b1

08007450 <__sinit>:
 8007450:	b510      	push	{r4, lr}
 8007452:	4604      	mov	r4, r0
 8007454:	f7ff fff0 	bl	8007438 <__sfp_lock_acquire>
 8007458:	6a23      	ldr	r3, [r4, #32]
 800745a:	b11b      	cbz	r3, 8007464 <__sinit+0x14>
 800745c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007460:	f7ff bff0 	b.w	8007444 <__sfp_lock_release>
 8007464:	4b04      	ldr	r3, [pc, #16]	@ (8007478 <__sinit+0x28>)
 8007466:	6223      	str	r3, [r4, #32]
 8007468:	4b04      	ldr	r3, [pc, #16]	@ (800747c <__sinit+0x2c>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1f5      	bne.n	800745c <__sinit+0xc>
 8007470:	f7ff ffc4 	bl	80073fc <global_stdio_init.part.0>
 8007474:	e7f2      	b.n	800745c <__sinit+0xc>
 8007476:	bf00      	nop
 8007478:	080073bd 	.word	0x080073bd
 800747c:	240003a8 	.word	0x240003a8

08007480 <_fwalk_sglue>:
 8007480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007484:	4607      	mov	r7, r0
 8007486:	4688      	mov	r8, r1
 8007488:	4614      	mov	r4, r2
 800748a:	2600      	movs	r6, #0
 800748c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007490:	f1b9 0901 	subs.w	r9, r9, #1
 8007494:	d505      	bpl.n	80074a2 <_fwalk_sglue+0x22>
 8007496:	6824      	ldr	r4, [r4, #0]
 8007498:	2c00      	cmp	r4, #0
 800749a:	d1f7      	bne.n	800748c <_fwalk_sglue+0xc>
 800749c:	4630      	mov	r0, r6
 800749e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074a2:	89ab      	ldrh	r3, [r5, #12]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d907      	bls.n	80074b8 <_fwalk_sglue+0x38>
 80074a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80074ac:	3301      	adds	r3, #1
 80074ae:	d003      	beq.n	80074b8 <_fwalk_sglue+0x38>
 80074b0:	4629      	mov	r1, r5
 80074b2:	4638      	mov	r0, r7
 80074b4:	47c0      	blx	r8
 80074b6:	4306      	orrs	r6, r0
 80074b8:	3568      	adds	r5, #104	@ 0x68
 80074ba:	e7e9      	b.n	8007490 <_fwalk_sglue+0x10>

080074bc <iprintf>:
 80074bc:	b40f      	push	{r0, r1, r2, r3}
 80074be:	b507      	push	{r0, r1, r2, lr}
 80074c0:	4906      	ldr	r1, [pc, #24]	@ (80074dc <iprintf+0x20>)
 80074c2:	ab04      	add	r3, sp, #16
 80074c4:	6808      	ldr	r0, [r1, #0]
 80074c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80074ca:	6881      	ldr	r1, [r0, #8]
 80074cc:	9301      	str	r3, [sp, #4]
 80074ce:	f000 f9e9 	bl	80078a4 <_vfiprintf_r>
 80074d2:	b003      	add	sp, #12
 80074d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80074d8:	b004      	add	sp, #16
 80074da:	4770      	bx	lr
 80074dc:	24000038 	.word	0x24000038

080074e0 <__sread>:
 80074e0:	b510      	push	{r4, lr}
 80074e2:	460c      	mov	r4, r1
 80074e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074e8:	f000 f868 	bl	80075bc <_read_r>
 80074ec:	2800      	cmp	r0, #0
 80074ee:	bfab      	itete	ge
 80074f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80074f2:	89a3      	ldrhlt	r3, [r4, #12]
 80074f4:	181b      	addge	r3, r3, r0
 80074f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80074fa:	bfac      	ite	ge
 80074fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80074fe:	81a3      	strhlt	r3, [r4, #12]
 8007500:	bd10      	pop	{r4, pc}

08007502 <__swrite>:
 8007502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007506:	461f      	mov	r7, r3
 8007508:	898b      	ldrh	r3, [r1, #12]
 800750a:	05db      	lsls	r3, r3, #23
 800750c:	4605      	mov	r5, r0
 800750e:	460c      	mov	r4, r1
 8007510:	4616      	mov	r6, r2
 8007512:	d505      	bpl.n	8007520 <__swrite+0x1e>
 8007514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007518:	2302      	movs	r3, #2
 800751a:	2200      	movs	r2, #0
 800751c:	f000 f83c 	bl	8007598 <_lseek_r>
 8007520:	89a3      	ldrh	r3, [r4, #12]
 8007522:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007526:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800752a:	81a3      	strh	r3, [r4, #12]
 800752c:	4632      	mov	r2, r6
 800752e:	463b      	mov	r3, r7
 8007530:	4628      	mov	r0, r5
 8007532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007536:	f000 b853 	b.w	80075e0 <_write_r>

0800753a <__sseek>:
 800753a:	b510      	push	{r4, lr}
 800753c:	460c      	mov	r4, r1
 800753e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007542:	f000 f829 	bl	8007598 <_lseek_r>
 8007546:	1c43      	adds	r3, r0, #1
 8007548:	89a3      	ldrh	r3, [r4, #12]
 800754a:	bf15      	itete	ne
 800754c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800754e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007552:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007556:	81a3      	strheq	r3, [r4, #12]
 8007558:	bf18      	it	ne
 800755a:	81a3      	strhne	r3, [r4, #12]
 800755c:	bd10      	pop	{r4, pc}

0800755e <__sclose>:
 800755e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007562:	f000 b809 	b.w	8007578 <_close_r>

08007566 <memset>:
 8007566:	4402      	add	r2, r0
 8007568:	4603      	mov	r3, r0
 800756a:	4293      	cmp	r3, r2
 800756c:	d100      	bne.n	8007570 <memset+0xa>
 800756e:	4770      	bx	lr
 8007570:	f803 1b01 	strb.w	r1, [r3], #1
 8007574:	e7f9      	b.n	800756a <memset+0x4>
	...

08007578 <_close_r>:
 8007578:	b538      	push	{r3, r4, r5, lr}
 800757a:	4d06      	ldr	r5, [pc, #24]	@ (8007594 <_close_r+0x1c>)
 800757c:	2300      	movs	r3, #0
 800757e:	4604      	mov	r4, r0
 8007580:	4608      	mov	r0, r1
 8007582:	602b      	str	r3, [r5, #0]
 8007584:	f7f9 fe25 	bl	80011d2 <_close>
 8007588:	1c43      	adds	r3, r0, #1
 800758a:	d102      	bne.n	8007592 <_close_r+0x1a>
 800758c:	682b      	ldr	r3, [r5, #0]
 800758e:	b103      	cbz	r3, 8007592 <_close_r+0x1a>
 8007590:	6023      	str	r3, [r4, #0]
 8007592:	bd38      	pop	{r3, r4, r5, pc}
 8007594:	240003ac 	.word	0x240003ac

08007598 <_lseek_r>:
 8007598:	b538      	push	{r3, r4, r5, lr}
 800759a:	4d07      	ldr	r5, [pc, #28]	@ (80075b8 <_lseek_r+0x20>)
 800759c:	4604      	mov	r4, r0
 800759e:	4608      	mov	r0, r1
 80075a0:	4611      	mov	r1, r2
 80075a2:	2200      	movs	r2, #0
 80075a4:	602a      	str	r2, [r5, #0]
 80075a6:	461a      	mov	r2, r3
 80075a8:	f7f9 fe3a 	bl	8001220 <_lseek>
 80075ac:	1c43      	adds	r3, r0, #1
 80075ae:	d102      	bne.n	80075b6 <_lseek_r+0x1e>
 80075b0:	682b      	ldr	r3, [r5, #0]
 80075b2:	b103      	cbz	r3, 80075b6 <_lseek_r+0x1e>
 80075b4:	6023      	str	r3, [r4, #0]
 80075b6:	bd38      	pop	{r3, r4, r5, pc}
 80075b8:	240003ac 	.word	0x240003ac

080075bc <_read_r>:
 80075bc:	b538      	push	{r3, r4, r5, lr}
 80075be:	4d07      	ldr	r5, [pc, #28]	@ (80075dc <_read_r+0x20>)
 80075c0:	4604      	mov	r4, r0
 80075c2:	4608      	mov	r0, r1
 80075c4:	4611      	mov	r1, r2
 80075c6:	2200      	movs	r2, #0
 80075c8:	602a      	str	r2, [r5, #0]
 80075ca:	461a      	mov	r2, r3
 80075cc:	f7f9 fdc8 	bl	8001160 <_read>
 80075d0:	1c43      	adds	r3, r0, #1
 80075d2:	d102      	bne.n	80075da <_read_r+0x1e>
 80075d4:	682b      	ldr	r3, [r5, #0]
 80075d6:	b103      	cbz	r3, 80075da <_read_r+0x1e>
 80075d8:	6023      	str	r3, [r4, #0]
 80075da:	bd38      	pop	{r3, r4, r5, pc}
 80075dc:	240003ac 	.word	0x240003ac

080075e0 <_write_r>:
 80075e0:	b538      	push	{r3, r4, r5, lr}
 80075e2:	4d07      	ldr	r5, [pc, #28]	@ (8007600 <_write_r+0x20>)
 80075e4:	4604      	mov	r4, r0
 80075e6:	4608      	mov	r0, r1
 80075e8:	4611      	mov	r1, r2
 80075ea:	2200      	movs	r2, #0
 80075ec:	602a      	str	r2, [r5, #0]
 80075ee:	461a      	mov	r2, r3
 80075f0:	f7f9 fdd3 	bl	800119a <_write>
 80075f4:	1c43      	adds	r3, r0, #1
 80075f6:	d102      	bne.n	80075fe <_write_r+0x1e>
 80075f8:	682b      	ldr	r3, [r5, #0]
 80075fa:	b103      	cbz	r3, 80075fe <_write_r+0x1e>
 80075fc:	6023      	str	r3, [r4, #0]
 80075fe:	bd38      	pop	{r3, r4, r5, pc}
 8007600:	240003ac 	.word	0x240003ac

08007604 <__errno>:
 8007604:	4b01      	ldr	r3, [pc, #4]	@ (800760c <__errno+0x8>)
 8007606:	6818      	ldr	r0, [r3, #0]
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	24000038 	.word	0x24000038

08007610 <__libc_init_array>:
 8007610:	b570      	push	{r4, r5, r6, lr}
 8007612:	4d0d      	ldr	r5, [pc, #52]	@ (8007648 <__libc_init_array+0x38>)
 8007614:	4c0d      	ldr	r4, [pc, #52]	@ (800764c <__libc_init_array+0x3c>)
 8007616:	1b64      	subs	r4, r4, r5
 8007618:	10a4      	asrs	r4, r4, #2
 800761a:	2600      	movs	r6, #0
 800761c:	42a6      	cmp	r6, r4
 800761e:	d109      	bne.n	8007634 <__libc_init_array+0x24>
 8007620:	4d0b      	ldr	r5, [pc, #44]	@ (8007650 <__libc_init_array+0x40>)
 8007622:	4c0c      	ldr	r4, [pc, #48]	@ (8007654 <__libc_init_array+0x44>)
 8007624:	f000 fdb6 	bl	8008194 <_init>
 8007628:	1b64      	subs	r4, r4, r5
 800762a:	10a4      	asrs	r4, r4, #2
 800762c:	2600      	movs	r6, #0
 800762e:	42a6      	cmp	r6, r4
 8007630:	d105      	bne.n	800763e <__libc_init_array+0x2e>
 8007632:	bd70      	pop	{r4, r5, r6, pc}
 8007634:	f855 3b04 	ldr.w	r3, [r5], #4
 8007638:	4798      	blx	r3
 800763a:	3601      	adds	r6, #1
 800763c:	e7ee      	b.n	800761c <__libc_init_array+0xc>
 800763e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007642:	4798      	blx	r3
 8007644:	3601      	adds	r6, #1
 8007646:	e7f2      	b.n	800762e <__libc_init_array+0x1e>
 8007648:	08009e7c 	.word	0x08009e7c
 800764c:	08009e7c 	.word	0x08009e7c
 8007650:	08009e7c 	.word	0x08009e7c
 8007654:	08009e80 	.word	0x08009e80

08007658 <__retarget_lock_init_recursive>:
 8007658:	4770      	bx	lr

0800765a <__retarget_lock_acquire_recursive>:
 800765a:	4770      	bx	lr

0800765c <__retarget_lock_release_recursive>:
 800765c:	4770      	bx	lr
	...

08007660 <_free_r>:
 8007660:	b538      	push	{r3, r4, r5, lr}
 8007662:	4605      	mov	r5, r0
 8007664:	2900      	cmp	r1, #0
 8007666:	d041      	beq.n	80076ec <_free_r+0x8c>
 8007668:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800766c:	1f0c      	subs	r4, r1, #4
 800766e:	2b00      	cmp	r3, #0
 8007670:	bfb8      	it	lt
 8007672:	18e4      	addlt	r4, r4, r3
 8007674:	f000 f8e0 	bl	8007838 <__malloc_lock>
 8007678:	4a1d      	ldr	r2, [pc, #116]	@ (80076f0 <_free_r+0x90>)
 800767a:	6813      	ldr	r3, [r2, #0]
 800767c:	b933      	cbnz	r3, 800768c <_free_r+0x2c>
 800767e:	6063      	str	r3, [r4, #4]
 8007680:	6014      	str	r4, [r2, #0]
 8007682:	4628      	mov	r0, r5
 8007684:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007688:	f000 b8dc 	b.w	8007844 <__malloc_unlock>
 800768c:	42a3      	cmp	r3, r4
 800768e:	d908      	bls.n	80076a2 <_free_r+0x42>
 8007690:	6820      	ldr	r0, [r4, #0]
 8007692:	1821      	adds	r1, r4, r0
 8007694:	428b      	cmp	r3, r1
 8007696:	bf01      	itttt	eq
 8007698:	6819      	ldreq	r1, [r3, #0]
 800769a:	685b      	ldreq	r3, [r3, #4]
 800769c:	1809      	addeq	r1, r1, r0
 800769e:	6021      	streq	r1, [r4, #0]
 80076a0:	e7ed      	b.n	800767e <_free_r+0x1e>
 80076a2:	461a      	mov	r2, r3
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	b10b      	cbz	r3, 80076ac <_free_r+0x4c>
 80076a8:	42a3      	cmp	r3, r4
 80076aa:	d9fa      	bls.n	80076a2 <_free_r+0x42>
 80076ac:	6811      	ldr	r1, [r2, #0]
 80076ae:	1850      	adds	r0, r2, r1
 80076b0:	42a0      	cmp	r0, r4
 80076b2:	d10b      	bne.n	80076cc <_free_r+0x6c>
 80076b4:	6820      	ldr	r0, [r4, #0]
 80076b6:	4401      	add	r1, r0
 80076b8:	1850      	adds	r0, r2, r1
 80076ba:	4283      	cmp	r3, r0
 80076bc:	6011      	str	r1, [r2, #0]
 80076be:	d1e0      	bne.n	8007682 <_free_r+0x22>
 80076c0:	6818      	ldr	r0, [r3, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	6053      	str	r3, [r2, #4]
 80076c6:	4408      	add	r0, r1
 80076c8:	6010      	str	r0, [r2, #0]
 80076ca:	e7da      	b.n	8007682 <_free_r+0x22>
 80076cc:	d902      	bls.n	80076d4 <_free_r+0x74>
 80076ce:	230c      	movs	r3, #12
 80076d0:	602b      	str	r3, [r5, #0]
 80076d2:	e7d6      	b.n	8007682 <_free_r+0x22>
 80076d4:	6820      	ldr	r0, [r4, #0]
 80076d6:	1821      	adds	r1, r4, r0
 80076d8:	428b      	cmp	r3, r1
 80076da:	bf04      	itt	eq
 80076dc:	6819      	ldreq	r1, [r3, #0]
 80076de:	685b      	ldreq	r3, [r3, #4]
 80076e0:	6063      	str	r3, [r4, #4]
 80076e2:	bf04      	itt	eq
 80076e4:	1809      	addeq	r1, r1, r0
 80076e6:	6021      	streq	r1, [r4, #0]
 80076e8:	6054      	str	r4, [r2, #4]
 80076ea:	e7ca      	b.n	8007682 <_free_r+0x22>
 80076ec:	bd38      	pop	{r3, r4, r5, pc}
 80076ee:	bf00      	nop
 80076f0:	240003b8 	.word	0x240003b8

080076f4 <sbrk_aligned>:
 80076f4:	b570      	push	{r4, r5, r6, lr}
 80076f6:	4e0f      	ldr	r6, [pc, #60]	@ (8007734 <sbrk_aligned+0x40>)
 80076f8:	460c      	mov	r4, r1
 80076fa:	6831      	ldr	r1, [r6, #0]
 80076fc:	4605      	mov	r5, r0
 80076fe:	b911      	cbnz	r1, 8007706 <sbrk_aligned+0x12>
 8007700:	f000 fcb4 	bl	800806c <_sbrk_r>
 8007704:	6030      	str	r0, [r6, #0]
 8007706:	4621      	mov	r1, r4
 8007708:	4628      	mov	r0, r5
 800770a:	f000 fcaf 	bl	800806c <_sbrk_r>
 800770e:	1c43      	adds	r3, r0, #1
 8007710:	d103      	bne.n	800771a <sbrk_aligned+0x26>
 8007712:	f04f 34ff 	mov.w	r4, #4294967295
 8007716:	4620      	mov	r0, r4
 8007718:	bd70      	pop	{r4, r5, r6, pc}
 800771a:	1cc4      	adds	r4, r0, #3
 800771c:	f024 0403 	bic.w	r4, r4, #3
 8007720:	42a0      	cmp	r0, r4
 8007722:	d0f8      	beq.n	8007716 <sbrk_aligned+0x22>
 8007724:	1a21      	subs	r1, r4, r0
 8007726:	4628      	mov	r0, r5
 8007728:	f000 fca0 	bl	800806c <_sbrk_r>
 800772c:	3001      	adds	r0, #1
 800772e:	d1f2      	bne.n	8007716 <sbrk_aligned+0x22>
 8007730:	e7ef      	b.n	8007712 <sbrk_aligned+0x1e>
 8007732:	bf00      	nop
 8007734:	240003b4 	.word	0x240003b4

08007738 <_malloc_r>:
 8007738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800773c:	1ccd      	adds	r5, r1, #3
 800773e:	f025 0503 	bic.w	r5, r5, #3
 8007742:	3508      	adds	r5, #8
 8007744:	2d0c      	cmp	r5, #12
 8007746:	bf38      	it	cc
 8007748:	250c      	movcc	r5, #12
 800774a:	2d00      	cmp	r5, #0
 800774c:	4606      	mov	r6, r0
 800774e:	db01      	blt.n	8007754 <_malloc_r+0x1c>
 8007750:	42a9      	cmp	r1, r5
 8007752:	d904      	bls.n	800775e <_malloc_r+0x26>
 8007754:	230c      	movs	r3, #12
 8007756:	6033      	str	r3, [r6, #0]
 8007758:	2000      	movs	r0, #0
 800775a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800775e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007834 <_malloc_r+0xfc>
 8007762:	f000 f869 	bl	8007838 <__malloc_lock>
 8007766:	f8d8 3000 	ldr.w	r3, [r8]
 800776a:	461c      	mov	r4, r3
 800776c:	bb44      	cbnz	r4, 80077c0 <_malloc_r+0x88>
 800776e:	4629      	mov	r1, r5
 8007770:	4630      	mov	r0, r6
 8007772:	f7ff ffbf 	bl	80076f4 <sbrk_aligned>
 8007776:	1c43      	adds	r3, r0, #1
 8007778:	4604      	mov	r4, r0
 800777a:	d158      	bne.n	800782e <_malloc_r+0xf6>
 800777c:	f8d8 4000 	ldr.w	r4, [r8]
 8007780:	4627      	mov	r7, r4
 8007782:	2f00      	cmp	r7, #0
 8007784:	d143      	bne.n	800780e <_malloc_r+0xd6>
 8007786:	2c00      	cmp	r4, #0
 8007788:	d04b      	beq.n	8007822 <_malloc_r+0xea>
 800778a:	6823      	ldr	r3, [r4, #0]
 800778c:	4639      	mov	r1, r7
 800778e:	4630      	mov	r0, r6
 8007790:	eb04 0903 	add.w	r9, r4, r3
 8007794:	f000 fc6a 	bl	800806c <_sbrk_r>
 8007798:	4581      	cmp	r9, r0
 800779a:	d142      	bne.n	8007822 <_malloc_r+0xea>
 800779c:	6821      	ldr	r1, [r4, #0]
 800779e:	1a6d      	subs	r5, r5, r1
 80077a0:	4629      	mov	r1, r5
 80077a2:	4630      	mov	r0, r6
 80077a4:	f7ff ffa6 	bl	80076f4 <sbrk_aligned>
 80077a8:	3001      	adds	r0, #1
 80077aa:	d03a      	beq.n	8007822 <_malloc_r+0xea>
 80077ac:	6823      	ldr	r3, [r4, #0]
 80077ae:	442b      	add	r3, r5
 80077b0:	6023      	str	r3, [r4, #0]
 80077b2:	f8d8 3000 	ldr.w	r3, [r8]
 80077b6:	685a      	ldr	r2, [r3, #4]
 80077b8:	bb62      	cbnz	r2, 8007814 <_malloc_r+0xdc>
 80077ba:	f8c8 7000 	str.w	r7, [r8]
 80077be:	e00f      	b.n	80077e0 <_malloc_r+0xa8>
 80077c0:	6822      	ldr	r2, [r4, #0]
 80077c2:	1b52      	subs	r2, r2, r5
 80077c4:	d420      	bmi.n	8007808 <_malloc_r+0xd0>
 80077c6:	2a0b      	cmp	r2, #11
 80077c8:	d917      	bls.n	80077fa <_malloc_r+0xc2>
 80077ca:	1961      	adds	r1, r4, r5
 80077cc:	42a3      	cmp	r3, r4
 80077ce:	6025      	str	r5, [r4, #0]
 80077d0:	bf18      	it	ne
 80077d2:	6059      	strne	r1, [r3, #4]
 80077d4:	6863      	ldr	r3, [r4, #4]
 80077d6:	bf08      	it	eq
 80077d8:	f8c8 1000 	streq.w	r1, [r8]
 80077dc:	5162      	str	r2, [r4, r5]
 80077de:	604b      	str	r3, [r1, #4]
 80077e0:	4630      	mov	r0, r6
 80077e2:	f000 f82f 	bl	8007844 <__malloc_unlock>
 80077e6:	f104 000b 	add.w	r0, r4, #11
 80077ea:	1d23      	adds	r3, r4, #4
 80077ec:	f020 0007 	bic.w	r0, r0, #7
 80077f0:	1ac2      	subs	r2, r0, r3
 80077f2:	bf1c      	itt	ne
 80077f4:	1a1b      	subne	r3, r3, r0
 80077f6:	50a3      	strne	r3, [r4, r2]
 80077f8:	e7af      	b.n	800775a <_malloc_r+0x22>
 80077fa:	6862      	ldr	r2, [r4, #4]
 80077fc:	42a3      	cmp	r3, r4
 80077fe:	bf0c      	ite	eq
 8007800:	f8c8 2000 	streq.w	r2, [r8]
 8007804:	605a      	strne	r2, [r3, #4]
 8007806:	e7eb      	b.n	80077e0 <_malloc_r+0xa8>
 8007808:	4623      	mov	r3, r4
 800780a:	6864      	ldr	r4, [r4, #4]
 800780c:	e7ae      	b.n	800776c <_malloc_r+0x34>
 800780e:	463c      	mov	r4, r7
 8007810:	687f      	ldr	r7, [r7, #4]
 8007812:	e7b6      	b.n	8007782 <_malloc_r+0x4a>
 8007814:	461a      	mov	r2, r3
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	42a3      	cmp	r3, r4
 800781a:	d1fb      	bne.n	8007814 <_malloc_r+0xdc>
 800781c:	2300      	movs	r3, #0
 800781e:	6053      	str	r3, [r2, #4]
 8007820:	e7de      	b.n	80077e0 <_malloc_r+0xa8>
 8007822:	230c      	movs	r3, #12
 8007824:	6033      	str	r3, [r6, #0]
 8007826:	4630      	mov	r0, r6
 8007828:	f000 f80c 	bl	8007844 <__malloc_unlock>
 800782c:	e794      	b.n	8007758 <_malloc_r+0x20>
 800782e:	6005      	str	r5, [r0, #0]
 8007830:	e7d6      	b.n	80077e0 <_malloc_r+0xa8>
 8007832:	bf00      	nop
 8007834:	240003b8 	.word	0x240003b8

08007838 <__malloc_lock>:
 8007838:	4801      	ldr	r0, [pc, #4]	@ (8007840 <__malloc_lock+0x8>)
 800783a:	f7ff bf0e 	b.w	800765a <__retarget_lock_acquire_recursive>
 800783e:	bf00      	nop
 8007840:	240003b0 	.word	0x240003b0

08007844 <__malloc_unlock>:
 8007844:	4801      	ldr	r0, [pc, #4]	@ (800784c <__malloc_unlock+0x8>)
 8007846:	f7ff bf09 	b.w	800765c <__retarget_lock_release_recursive>
 800784a:	bf00      	nop
 800784c:	240003b0 	.word	0x240003b0

08007850 <__sfputc_r>:
 8007850:	6893      	ldr	r3, [r2, #8]
 8007852:	3b01      	subs	r3, #1
 8007854:	2b00      	cmp	r3, #0
 8007856:	b410      	push	{r4}
 8007858:	6093      	str	r3, [r2, #8]
 800785a:	da08      	bge.n	800786e <__sfputc_r+0x1e>
 800785c:	6994      	ldr	r4, [r2, #24]
 800785e:	42a3      	cmp	r3, r4
 8007860:	db01      	blt.n	8007866 <__sfputc_r+0x16>
 8007862:	290a      	cmp	r1, #10
 8007864:	d103      	bne.n	800786e <__sfputc_r+0x1e>
 8007866:	f85d 4b04 	ldr.w	r4, [sp], #4
 800786a:	f000 bb6b 	b.w	8007f44 <__swbuf_r>
 800786e:	6813      	ldr	r3, [r2, #0]
 8007870:	1c58      	adds	r0, r3, #1
 8007872:	6010      	str	r0, [r2, #0]
 8007874:	7019      	strb	r1, [r3, #0]
 8007876:	4608      	mov	r0, r1
 8007878:	f85d 4b04 	ldr.w	r4, [sp], #4
 800787c:	4770      	bx	lr

0800787e <__sfputs_r>:
 800787e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007880:	4606      	mov	r6, r0
 8007882:	460f      	mov	r7, r1
 8007884:	4614      	mov	r4, r2
 8007886:	18d5      	adds	r5, r2, r3
 8007888:	42ac      	cmp	r4, r5
 800788a:	d101      	bne.n	8007890 <__sfputs_r+0x12>
 800788c:	2000      	movs	r0, #0
 800788e:	e007      	b.n	80078a0 <__sfputs_r+0x22>
 8007890:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007894:	463a      	mov	r2, r7
 8007896:	4630      	mov	r0, r6
 8007898:	f7ff ffda 	bl	8007850 <__sfputc_r>
 800789c:	1c43      	adds	r3, r0, #1
 800789e:	d1f3      	bne.n	8007888 <__sfputs_r+0xa>
 80078a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080078a4 <_vfiprintf_r>:
 80078a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a8:	460d      	mov	r5, r1
 80078aa:	b09d      	sub	sp, #116	@ 0x74
 80078ac:	4614      	mov	r4, r2
 80078ae:	4698      	mov	r8, r3
 80078b0:	4606      	mov	r6, r0
 80078b2:	b118      	cbz	r0, 80078bc <_vfiprintf_r+0x18>
 80078b4:	6a03      	ldr	r3, [r0, #32]
 80078b6:	b90b      	cbnz	r3, 80078bc <_vfiprintf_r+0x18>
 80078b8:	f7ff fdca 	bl	8007450 <__sinit>
 80078bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078be:	07d9      	lsls	r1, r3, #31
 80078c0:	d405      	bmi.n	80078ce <_vfiprintf_r+0x2a>
 80078c2:	89ab      	ldrh	r3, [r5, #12]
 80078c4:	059a      	lsls	r2, r3, #22
 80078c6:	d402      	bmi.n	80078ce <_vfiprintf_r+0x2a>
 80078c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80078ca:	f7ff fec6 	bl	800765a <__retarget_lock_acquire_recursive>
 80078ce:	89ab      	ldrh	r3, [r5, #12]
 80078d0:	071b      	lsls	r3, r3, #28
 80078d2:	d501      	bpl.n	80078d8 <_vfiprintf_r+0x34>
 80078d4:	692b      	ldr	r3, [r5, #16]
 80078d6:	b99b      	cbnz	r3, 8007900 <_vfiprintf_r+0x5c>
 80078d8:	4629      	mov	r1, r5
 80078da:	4630      	mov	r0, r6
 80078dc:	f000 fb70 	bl	8007fc0 <__swsetup_r>
 80078e0:	b170      	cbz	r0, 8007900 <_vfiprintf_r+0x5c>
 80078e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078e4:	07dc      	lsls	r4, r3, #31
 80078e6:	d504      	bpl.n	80078f2 <_vfiprintf_r+0x4e>
 80078e8:	f04f 30ff 	mov.w	r0, #4294967295
 80078ec:	b01d      	add	sp, #116	@ 0x74
 80078ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078f2:	89ab      	ldrh	r3, [r5, #12]
 80078f4:	0598      	lsls	r0, r3, #22
 80078f6:	d4f7      	bmi.n	80078e8 <_vfiprintf_r+0x44>
 80078f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80078fa:	f7ff feaf 	bl	800765c <__retarget_lock_release_recursive>
 80078fe:	e7f3      	b.n	80078e8 <_vfiprintf_r+0x44>
 8007900:	2300      	movs	r3, #0
 8007902:	9309      	str	r3, [sp, #36]	@ 0x24
 8007904:	2320      	movs	r3, #32
 8007906:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800790a:	f8cd 800c 	str.w	r8, [sp, #12]
 800790e:	2330      	movs	r3, #48	@ 0x30
 8007910:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007ac0 <_vfiprintf_r+0x21c>
 8007914:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007918:	f04f 0901 	mov.w	r9, #1
 800791c:	4623      	mov	r3, r4
 800791e:	469a      	mov	sl, r3
 8007920:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007924:	b10a      	cbz	r2, 800792a <_vfiprintf_r+0x86>
 8007926:	2a25      	cmp	r2, #37	@ 0x25
 8007928:	d1f9      	bne.n	800791e <_vfiprintf_r+0x7a>
 800792a:	ebba 0b04 	subs.w	fp, sl, r4
 800792e:	d00b      	beq.n	8007948 <_vfiprintf_r+0xa4>
 8007930:	465b      	mov	r3, fp
 8007932:	4622      	mov	r2, r4
 8007934:	4629      	mov	r1, r5
 8007936:	4630      	mov	r0, r6
 8007938:	f7ff ffa1 	bl	800787e <__sfputs_r>
 800793c:	3001      	adds	r0, #1
 800793e:	f000 80a7 	beq.w	8007a90 <_vfiprintf_r+0x1ec>
 8007942:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007944:	445a      	add	r2, fp
 8007946:	9209      	str	r2, [sp, #36]	@ 0x24
 8007948:	f89a 3000 	ldrb.w	r3, [sl]
 800794c:	2b00      	cmp	r3, #0
 800794e:	f000 809f 	beq.w	8007a90 <_vfiprintf_r+0x1ec>
 8007952:	2300      	movs	r3, #0
 8007954:	f04f 32ff 	mov.w	r2, #4294967295
 8007958:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800795c:	f10a 0a01 	add.w	sl, sl, #1
 8007960:	9304      	str	r3, [sp, #16]
 8007962:	9307      	str	r3, [sp, #28]
 8007964:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007968:	931a      	str	r3, [sp, #104]	@ 0x68
 800796a:	4654      	mov	r4, sl
 800796c:	2205      	movs	r2, #5
 800796e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007972:	4853      	ldr	r0, [pc, #332]	@ (8007ac0 <_vfiprintf_r+0x21c>)
 8007974:	f7f8 fcb4 	bl	80002e0 <memchr>
 8007978:	9a04      	ldr	r2, [sp, #16]
 800797a:	b9d8      	cbnz	r0, 80079b4 <_vfiprintf_r+0x110>
 800797c:	06d1      	lsls	r1, r2, #27
 800797e:	bf44      	itt	mi
 8007980:	2320      	movmi	r3, #32
 8007982:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007986:	0713      	lsls	r3, r2, #28
 8007988:	bf44      	itt	mi
 800798a:	232b      	movmi	r3, #43	@ 0x2b
 800798c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007990:	f89a 3000 	ldrb.w	r3, [sl]
 8007994:	2b2a      	cmp	r3, #42	@ 0x2a
 8007996:	d015      	beq.n	80079c4 <_vfiprintf_r+0x120>
 8007998:	9a07      	ldr	r2, [sp, #28]
 800799a:	4654      	mov	r4, sl
 800799c:	2000      	movs	r0, #0
 800799e:	f04f 0c0a 	mov.w	ip, #10
 80079a2:	4621      	mov	r1, r4
 80079a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079a8:	3b30      	subs	r3, #48	@ 0x30
 80079aa:	2b09      	cmp	r3, #9
 80079ac:	d94b      	bls.n	8007a46 <_vfiprintf_r+0x1a2>
 80079ae:	b1b0      	cbz	r0, 80079de <_vfiprintf_r+0x13a>
 80079b0:	9207      	str	r2, [sp, #28]
 80079b2:	e014      	b.n	80079de <_vfiprintf_r+0x13a>
 80079b4:	eba0 0308 	sub.w	r3, r0, r8
 80079b8:	fa09 f303 	lsl.w	r3, r9, r3
 80079bc:	4313      	orrs	r3, r2
 80079be:	9304      	str	r3, [sp, #16]
 80079c0:	46a2      	mov	sl, r4
 80079c2:	e7d2      	b.n	800796a <_vfiprintf_r+0xc6>
 80079c4:	9b03      	ldr	r3, [sp, #12]
 80079c6:	1d19      	adds	r1, r3, #4
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	9103      	str	r1, [sp, #12]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	bfbb      	ittet	lt
 80079d0:	425b      	neglt	r3, r3
 80079d2:	f042 0202 	orrlt.w	r2, r2, #2
 80079d6:	9307      	strge	r3, [sp, #28]
 80079d8:	9307      	strlt	r3, [sp, #28]
 80079da:	bfb8      	it	lt
 80079dc:	9204      	strlt	r2, [sp, #16]
 80079de:	7823      	ldrb	r3, [r4, #0]
 80079e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80079e2:	d10a      	bne.n	80079fa <_vfiprintf_r+0x156>
 80079e4:	7863      	ldrb	r3, [r4, #1]
 80079e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80079e8:	d132      	bne.n	8007a50 <_vfiprintf_r+0x1ac>
 80079ea:	9b03      	ldr	r3, [sp, #12]
 80079ec:	1d1a      	adds	r2, r3, #4
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	9203      	str	r2, [sp, #12]
 80079f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80079f6:	3402      	adds	r4, #2
 80079f8:	9305      	str	r3, [sp, #20]
 80079fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007ad0 <_vfiprintf_r+0x22c>
 80079fe:	7821      	ldrb	r1, [r4, #0]
 8007a00:	2203      	movs	r2, #3
 8007a02:	4650      	mov	r0, sl
 8007a04:	f7f8 fc6c 	bl	80002e0 <memchr>
 8007a08:	b138      	cbz	r0, 8007a1a <_vfiprintf_r+0x176>
 8007a0a:	9b04      	ldr	r3, [sp, #16]
 8007a0c:	eba0 000a 	sub.w	r0, r0, sl
 8007a10:	2240      	movs	r2, #64	@ 0x40
 8007a12:	4082      	lsls	r2, r0
 8007a14:	4313      	orrs	r3, r2
 8007a16:	3401      	adds	r4, #1
 8007a18:	9304      	str	r3, [sp, #16]
 8007a1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a1e:	4829      	ldr	r0, [pc, #164]	@ (8007ac4 <_vfiprintf_r+0x220>)
 8007a20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007a24:	2206      	movs	r2, #6
 8007a26:	f7f8 fc5b 	bl	80002e0 <memchr>
 8007a2a:	2800      	cmp	r0, #0
 8007a2c:	d03f      	beq.n	8007aae <_vfiprintf_r+0x20a>
 8007a2e:	4b26      	ldr	r3, [pc, #152]	@ (8007ac8 <_vfiprintf_r+0x224>)
 8007a30:	bb1b      	cbnz	r3, 8007a7a <_vfiprintf_r+0x1d6>
 8007a32:	9b03      	ldr	r3, [sp, #12]
 8007a34:	3307      	adds	r3, #7
 8007a36:	f023 0307 	bic.w	r3, r3, #7
 8007a3a:	3308      	adds	r3, #8
 8007a3c:	9303      	str	r3, [sp, #12]
 8007a3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a40:	443b      	add	r3, r7
 8007a42:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a44:	e76a      	b.n	800791c <_vfiprintf_r+0x78>
 8007a46:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a4a:	460c      	mov	r4, r1
 8007a4c:	2001      	movs	r0, #1
 8007a4e:	e7a8      	b.n	80079a2 <_vfiprintf_r+0xfe>
 8007a50:	2300      	movs	r3, #0
 8007a52:	3401      	adds	r4, #1
 8007a54:	9305      	str	r3, [sp, #20]
 8007a56:	4619      	mov	r1, r3
 8007a58:	f04f 0c0a 	mov.w	ip, #10
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a62:	3a30      	subs	r2, #48	@ 0x30
 8007a64:	2a09      	cmp	r2, #9
 8007a66:	d903      	bls.n	8007a70 <_vfiprintf_r+0x1cc>
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d0c6      	beq.n	80079fa <_vfiprintf_r+0x156>
 8007a6c:	9105      	str	r1, [sp, #20]
 8007a6e:	e7c4      	b.n	80079fa <_vfiprintf_r+0x156>
 8007a70:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a74:	4604      	mov	r4, r0
 8007a76:	2301      	movs	r3, #1
 8007a78:	e7f0      	b.n	8007a5c <_vfiprintf_r+0x1b8>
 8007a7a:	ab03      	add	r3, sp, #12
 8007a7c:	9300      	str	r3, [sp, #0]
 8007a7e:	462a      	mov	r2, r5
 8007a80:	4b12      	ldr	r3, [pc, #72]	@ (8007acc <_vfiprintf_r+0x228>)
 8007a82:	a904      	add	r1, sp, #16
 8007a84:	4630      	mov	r0, r6
 8007a86:	f3af 8000 	nop.w
 8007a8a:	4607      	mov	r7, r0
 8007a8c:	1c78      	adds	r0, r7, #1
 8007a8e:	d1d6      	bne.n	8007a3e <_vfiprintf_r+0x19a>
 8007a90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a92:	07d9      	lsls	r1, r3, #31
 8007a94:	d405      	bmi.n	8007aa2 <_vfiprintf_r+0x1fe>
 8007a96:	89ab      	ldrh	r3, [r5, #12]
 8007a98:	059a      	lsls	r2, r3, #22
 8007a9a:	d402      	bmi.n	8007aa2 <_vfiprintf_r+0x1fe>
 8007a9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a9e:	f7ff fddd 	bl	800765c <__retarget_lock_release_recursive>
 8007aa2:	89ab      	ldrh	r3, [r5, #12]
 8007aa4:	065b      	lsls	r3, r3, #25
 8007aa6:	f53f af1f 	bmi.w	80078e8 <_vfiprintf_r+0x44>
 8007aaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007aac:	e71e      	b.n	80078ec <_vfiprintf_r+0x48>
 8007aae:	ab03      	add	r3, sp, #12
 8007ab0:	9300      	str	r3, [sp, #0]
 8007ab2:	462a      	mov	r2, r5
 8007ab4:	4b05      	ldr	r3, [pc, #20]	@ (8007acc <_vfiprintf_r+0x228>)
 8007ab6:	a904      	add	r1, sp, #16
 8007ab8:	4630      	mov	r0, r6
 8007aba:	f000 f879 	bl	8007bb0 <_printf_i>
 8007abe:	e7e4      	b.n	8007a8a <_vfiprintf_r+0x1e6>
 8007ac0:	08009e40 	.word	0x08009e40
 8007ac4:	08009e4a 	.word	0x08009e4a
 8007ac8:	00000000 	.word	0x00000000
 8007acc:	0800787f 	.word	0x0800787f
 8007ad0:	08009e46 	.word	0x08009e46

08007ad4 <_printf_common>:
 8007ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ad8:	4616      	mov	r6, r2
 8007ada:	4698      	mov	r8, r3
 8007adc:	688a      	ldr	r2, [r1, #8]
 8007ade:	690b      	ldr	r3, [r1, #16]
 8007ae0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	bfb8      	it	lt
 8007ae8:	4613      	movlt	r3, r2
 8007aea:	6033      	str	r3, [r6, #0]
 8007aec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007af0:	4607      	mov	r7, r0
 8007af2:	460c      	mov	r4, r1
 8007af4:	b10a      	cbz	r2, 8007afa <_printf_common+0x26>
 8007af6:	3301      	adds	r3, #1
 8007af8:	6033      	str	r3, [r6, #0]
 8007afa:	6823      	ldr	r3, [r4, #0]
 8007afc:	0699      	lsls	r1, r3, #26
 8007afe:	bf42      	ittt	mi
 8007b00:	6833      	ldrmi	r3, [r6, #0]
 8007b02:	3302      	addmi	r3, #2
 8007b04:	6033      	strmi	r3, [r6, #0]
 8007b06:	6825      	ldr	r5, [r4, #0]
 8007b08:	f015 0506 	ands.w	r5, r5, #6
 8007b0c:	d106      	bne.n	8007b1c <_printf_common+0x48>
 8007b0e:	f104 0a19 	add.w	sl, r4, #25
 8007b12:	68e3      	ldr	r3, [r4, #12]
 8007b14:	6832      	ldr	r2, [r6, #0]
 8007b16:	1a9b      	subs	r3, r3, r2
 8007b18:	42ab      	cmp	r3, r5
 8007b1a:	dc26      	bgt.n	8007b6a <_printf_common+0x96>
 8007b1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007b20:	6822      	ldr	r2, [r4, #0]
 8007b22:	3b00      	subs	r3, #0
 8007b24:	bf18      	it	ne
 8007b26:	2301      	movne	r3, #1
 8007b28:	0692      	lsls	r2, r2, #26
 8007b2a:	d42b      	bmi.n	8007b84 <_printf_common+0xb0>
 8007b2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007b30:	4641      	mov	r1, r8
 8007b32:	4638      	mov	r0, r7
 8007b34:	47c8      	blx	r9
 8007b36:	3001      	adds	r0, #1
 8007b38:	d01e      	beq.n	8007b78 <_printf_common+0xa4>
 8007b3a:	6823      	ldr	r3, [r4, #0]
 8007b3c:	6922      	ldr	r2, [r4, #16]
 8007b3e:	f003 0306 	and.w	r3, r3, #6
 8007b42:	2b04      	cmp	r3, #4
 8007b44:	bf02      	ittt	eq
 8007b46:	68e5      	ldreq	r5, [r4, #12]
 8007b48:	6833      	ldreq	r3, [r6, #0]
 8007b4a:	1aed      	subeq	r5, r5, r3
 8007b4c:	68a3      	ldr	r3, [r4, #8]
 8007b4e:	bf0c      	ite	eq
 8007b50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b54:	2500      	movne	r5, #0
 8007b56:	4293      	cmp	r3, r2
 8007b58:	bfc4      	itt	gt
 8007b5a:	1a9b      	subgt	r3, r3, r2
 8007b5c:	18ed      	addgt	r5, r5, r3
 8007b5e:	2600      	movs	r6, #0
 8007b60:	341a      	adds	r4, #26
 8007b62:	42b5      	cmp	r5, r6
 8007b64:	d11a      	bne.n	8007b9c <_printf_common+0xc8>
 8007b66:	2000      	movs	r0, #0
 8007b68:	e008      	b.n	8007b7c <_printf_common+0xa8>
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	4652      	mov	r2, sl
 8007b6e:	4641      	mov	r1, r8
 8007b70:	4638      	mov	r0, r7
 8007b72:	47c8      	blx	r9
 8007b74:	3001      	adds	r0, #1
 8007b76:	d103      	bne.n	8007b80 <_printf_common+0xac>
 8007b78:	f04f 30ff 	mov.w	r0, #4294967295
 8007b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b80:	3501      	adds	r5, #1
 8007b82:	e7c6      	b.n	8007b12 <_printf_common+0x3e>
 8007b84:	18e1      	adds	r1, r4, r3
 8007b86:	1c5a      	adds	r2, r3, #1
 8007b88:	2030      	movs	r0, #48	@ 0x30
 8007b8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007b8e:	4422      	add	r2, r4
 8007b90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007b94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007b98:	3302      	adds	r3, #2
 8007b9a:	e7c7      	b.n	8007b2c <_printf_common+0x58>
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	4622      	mov	r2, r4
 8007ba0:	4641      	mov	r1, r8
 8007ba2:	4638      	mov	r0, r7
 8007ba4:	47c8      	blx	r9
 8007ba6:	3001      	adds	r0, #1
 8007ba8:	d0e6      	beq.n	8007b78 <_printf_common+0xa4>
 8007baa:	3601      	adds	r6, #1
 8007bac:	e7d9      	b.n	8007b62 <_printf_common+0x8e>
	...

08007bb0 <_printf_i>:
 8007bb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bb4:	7e0f      	ldrb	r7, [r1, #24]
 8007bb6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007bb8:	2f78      	cmp	r7, #120	@ 0x78
 8007bba:	4691      	mov	r9, r2
 8007bbc:	4680      	mov	r8, r0
 8007bbe:	460c      	mov	r4, r1
 8007bc0:	469a      	mov	sl, r3
 8007bc2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007bc6:	d807      	bhi.n	8007bd8 <_printf_i+0x28>
 8007bc8:	2f62      	cmp	r7, #98	@ 0x62
 8007bca:	d80a      	bhi.n	8007be2 <_printf_i+0x32>
 8007bcc:	2f00      	cmp	r7, #0
 8007bce:	f000 80d1 	beq.w	8007d74 <_printf_i+0x1c4>
 8007bd2:	2f58      	cmp	r7, #88	@ 0x58
 8007bd4:	f000 80b8 	beq.w	8007d48 <_printf_i+0x198>
 8007bd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007bdc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007be0:	e03a      	b.n	8007c58 <_printf_i+0xa8>
 8007be2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007be6:	2b15      	cmp	r3, #21
 8007be8:	d8f6      	bhi.n	8007bd8 <_printf_i+0x28>
 8007bea:	a101      	add	r1, pc, #4	@ (adr r1, 8007bf0 <_printf_i+0x40>)
 8007bec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007bf0:	08007c49 	.word	0x08007c49
 8007bf4:	08007c5d 	.word	0x08007c5d
 8007bf8:	08007bd9 	.word	0x08007bd9
 8007bfc:	08007bd9 	.word	0x08007bd9
 8007c00:	08007bd9 	.word	0x08007bd9
 8007c04:	08007bd9 	.word	0x08007bd9
 8007c08:	08007c5d 	.word	0x08007c5d
 8007c0c:	08007bd9 	.word	0x08007bd9
 8007c10:	08007bd9 	.word	0x08007bd9
 8007c14:	08007bd9 	.word	0x08007bd9
 8007c18:	08007bd9 	.word	0x08007bd9
 8007c1c:	08007d5b 	.word	0x08007d5b
 8007c20:	08007c87 	.word	0x08007c87
 8007c24:	08007d15 	.word	0x08007d15
 8007c28:	08007bd9 	.word	0x08007bd9
 8007c2c:	08007bd9 	.word	0x08007bd9
 8007c30:	08007d7d 	.word	0x08007d7d
 8007c34:	08007bd9 	.word	0x08007bd9
 8007c38:	08007c87 	.word	0x08007c87
 8007c3c:	08007bd9 	.word	0x08007bd9
 8007c40:	08007bd9 	.word	0x08007bd9
 8007c44:	08007d1d 	.word	0x08007d1d
 8007c48:	6833      	ldr	r3, [r6, #0]
 8007c4a:	1d1a      	adds	r2, r3, #4
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	6032      	str	r2, [r6, #0]
 8007c50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e09c      	b.n	8007d96 <_printf_i+0x1e6>
 8007c5c:	6833      	ldr	r3, [r6, #0]
 8007c5e:	6820      	ldr	r0, [r4, #0]
 8007c60:	1d19      	adds	r1, r3, #4
 8007c62:	6031      	str	r1, [r6, #0]
 8007c64:	0606      	lsls	r6, r0, #24
 8007c66:	d501      	bpl.n	8007c6c <_printf_i+0xbc>
 8007c68:	681d      	ldr	r5, [r3, #0]
 8007c6a:	e003      	b.n	8007c74 <_printf_i+0xc4>
 8007c6c:	0645      	lsls	r5, r0, #25
 8007c6e:	d5fb      	bpl.n	8007c68 <_printf_i+0xb8>
 8007c70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007c74:	2d00      	cmp	r5, #0
 8007c76:	da03      	bge.n	8007c80 <_printf_i+0xd0>
 8007c78:	232d      	movs	r3, #45	@ 0x2d
 8007c7a:	426d      	negs	r5, r5
 8007c7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c80:	4858      	ldr	r0, [pc, #352]	@ (8007de4 <_printf_i+0x234>)
 8007c82:	230a      	movs	r3, #10
 8007c84:	e011      	b.n	8007caa <_printf_i+0xfa>
 8007c86:	6821      	ldr	r1, [r4, #0]
 8007c88:	6833      	ldr	r3, [r6, #0]
 8007c8a:	0608      	lsls	r0, r1, #24
 8007c8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007c90:	d402      	bmi.n	8007c98 <_printf_i+0xe8>
 8007c92:	0649      	lsls	r1, r1, #25
 8007c94:	bf48      	it	mi
 8007c96:	b2ad      	uxthmi	r5, r5
 8007c98:	2f6f      	cmp	r7, #111	@ 0x6f
 8007c9a:	4852      	ldr	r0, [pc, #328]	@ (8007de4 <_printf_i+0x234>)
 8007c9c:	6033      	str	r3, [r6, #0]
 8007c9e:	bf14      	ite	ne
 8007ca0:	230a      	movne	r3, #10
 8007ca2:	2308      	moveq	r3, #8
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007caa:	6866      	ldr	r6, [r4, #4]
 8007cac:	60a6      	str	r6, [r4, #8]
 8007cae:	2e00      	cmp	r6, #0
 8007cb0:	db05      	blt.n	8007cbe <_printf_i+0x10e>
 8007cb2:	6821      	ldr	r1, [r4, #0]
 8007cb4:	432e      	orrs	r6, r5
 8007cb6:	f021 0104 	bic.w	r1, r1, #4
 8007cba:	6021      	str	r1, [r4, #0]
 8007cbc:	d04b      	beq.n	8007d56 <_printf_i+0x1a6>
 8007cbe:	4616      	mov	r6, r2
 8007cc0:	fbb5 f1f3 	udiv	r1, r5, r3
 8007cc4:	fb03 5711 	mls	r7, r3, r1, r5
 8007cc8:	5dc7      	ldrb	r7, [r0, r7]
 8007cca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007cce:	462f      	mov	r7, r5
 8007cd0:	42bb      	cmp	r3, r7
 8007cd2:	460d      	mov	r5, r1
 8007cd4:	d9f4      	bls.n	8007cc0 <_printf_i+0x110>
 8007cd6:	2b08      	cmp	r3, #8
 8007cd8:	d10b      	bne.n	8007cf2 <_printf_i+0x142>
 8007cda:	6823      	ldr	r3, [r4, #0]
 8007cdc:	07df      	lsls	r7, r3, #31
 8007cde:	d508      	bpl.n	8007cf2 <_printf_i+0x142>
 8007ce0:	6923      	ldr	r3, [r4, #16]
 8007ce2:	6861      	ldr	r1, [r4, #4]
 8007ce4:	4299      	cmp	r1, r3
 8007ce6:	bfde      	ittt	le
 8007ce8:	2330      	movle	r3, #48	@ 0x30
 8007cea:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007cee:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007cf2:	1b92      	subs	r2, r2, r6
 8007cf4:	6122      	str	r2, [r4, #16]
 8007cf6:	f8cd a000 	str.w	sl, [sp]
 8007cfa:	464b      	mov	r3, r9
 8007cfc:	aa03      	add	r2, sp, #12
 8007cfe:	4621      	mov	r1, r4
 8007d00:	4640      	mov	r0, r8
 8007d02:	f7ff fee7 	bl	8007ad4 <_printf_common>
 8007d06:	3001      	adds	r0, #1
 8007d08:	d14a      	bne.n	8007da0 <_printf_i+0x1f0>
 8007d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d0e:	b004      	add	sp, #16
 8007d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d14:	6823      	ldr	r3, [r4, #0]
 8007d16:	f043 0320 	orr.w	r3, r3, #32
 8007d1a:	6023      	str	r3, [r4, #0]
 8007d1c:	4832      	ldr	r0, [pc, #200]	@ (8007de8 <_printf_i+0x238>)
 8007d1e:	2778      	movs	r7, #120	@ 0x78
 8007d20:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007d24:	6823      	ldr	r3, [r4, #0]
 8007d26:	6831      	ldr	r1, [r6, #0]
 8007d28:	061f      	lsls	r7, r3, #24
 8007d2a:	f851 5b04 	ldr.w	r5, [r1], #4
 8007d2e:	d402      	bmi.n	8007d36 <_printf_i+0x186>
 8007d30:	065f      	lsls	r7, r3, #25
 8007d32:	bf48      	it	mi
 8007d34:	b2ad      	uxthmi	r5, r5
 8007d36:	6031      	str	r1, [r6, #0]
 8007d38:	07d9      	lsls	r1, r3, #31
 8007d3a:	bf44      	itt	mi
 8007d3c:	f043 0320 	orrmi.w	r3, r3, #32
 8007d40:	6023      	strmi	r3, [r4, #0]
 8007d42:	b11d      	cbz	r5, 8007d4c <_printf_i+0x19c>
 8007d44:	2310      	movs	r3, #16
 8007d46:	e7ad      	b.n	8007ca4 <_printf_i+0xf4>
 8007d48:	4826      	ldr	r0, [pc, #152]	@ (8007de4 <_printf_i+0x234>)
 8007d4a:	e7e9      	b.n	8007d20 <_printf_i+0x170>
 8007d4c:	6823      	ldr	r3, [r4, #0]
 8007d4e:	f023 0320 	bic.w	r3, r3, #32
 8007d52:	6023      	str	r3, [r4, #0]
 8007d54:	e7f6      	b.n	8007d44 <_printf_i+0x194>
 8007d56:	4616      	mov	r6, r2
 8007d58:	e7bd      	b.n	8007cd6 <_printf_i+0x126>
 8007d5a:	6833      	ldr	r3, [r6, #0]
 8007d5c:	6825      	ldr	r5, [r4, #0]
 8007d5e:	6961      	ldr	r1, [r4, #20]
 8007d60:	1d18      	adds	r0, r3, #4
 8007d62:	6030      	str	r0, [r6, #0]
 8007d64:	062e      	lsls	r6, r5, #24
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	d501      	bpl.n	8007d6e <_printf_i+0x1be>
 8007d6a:	6019      	str	r1, [r3, #0]
 8007d6c:	e002      	b.n	8007d74 <_printf_i+0x1c4>
 8007d6e:	0668      	lsls	r0, r5, #25
 8007d70:	d5fb      	bpl.n	8007d6a <_printf_i+0x1ba>
 8007d72:	8019      	strh	r1, [r3, #0]
 8007d74:	2300      	movs	r3, #0
 8007d76:	6123      	str	r3, [r4, #16]
 8007d78:	4616      	mov	r6, r2
 8007d7a:	e7bc      	b.n	8007cf6 <_printf_i+0x146>
 8007d7c:	6833      	ldr	r3, [r6, #0]
 8007d7e:	1d1a      	adds	r2, r3, #4
 8007d80:	6032      	str	r2, [r6, #0]
 8007d82:	681e      	ldr	r6, [r3, #0]
 8007d84:	6862      	ldr	r2, [r4, #4]
 8007d86:	2100      	movs	r1, #0
 8007d88:	4630      	mov	r0, r6
 8007d8a:	f7f8 faa9 	bl	80002e0 <memchr>
 8007d8e:	b108      	cbz	r0, 8007d94 <_printf_i+0x1e4>
 8007d90:	1b80      	subs	r0, r0, r6
 8007d92:	6060      	str	r0, [r4, #4]
 8007d94:	6863      	ldr	r3, [r4, #4]
 8007d96:	6123      	str	r3, [r4, #16]
 8007d98:	2300      	movs	r3, #0
 8007d9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d9e:	e7aa      	b.n	8007cf6 <_printf_i+0x146>
 8007da0:	6923      	ldr	r3, [r4, #16]
 8007da2:	4632      	mov	r2, r6
 8007da4:	4649      	mov	r1, r9
 8007da6:	4640      	mov	r0, r8
 8007da8:	47d0      	blx	sl
 8007daa:	3001      	adds	r0, #1
 8007dac:	d0ad      	beq.n	8007d0a <_printf_i+0x15a>
 8007dae:	6823      	ldr	r3, [r4, #0]
 8007db0:	079b      	lsls	r3, r3, #30
 8007db2:	d413      	bmi.n	8007ddc <_printf_i+0x22c>
 8007db4:	68e0      	ldr	r0, [r4, #12]
 8007db6:	9b03      	ldr	r3, [sp, #12]
 8007db8:	4298      	cmp	r0, r3
 8007dba:	bfb8      	it	lt
 8007dbc:	4618      	movlt	r0, r3
 8007dbe:	e7a6      	b.n	8007d0e <_printf_i+0x15e>
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	4632      	mov	r2, r6
 8007dc4:	4649      	mov	r1, r9
 8007dc6:	4640      	mov	r0, r8
 8007dc8:	47d0      	blx	sl
 8007dca:	3001      	adds	r0, #1
 8007dcc:	d09d      	beq.n	8007d0a <_printf_i+0x15a>
 8007dce:	3501      	adds	r5, #1
 8007dd0:	68e3      	ldr	r3, [r4, #12]
 8007dd2:	9903      	ldr	r1, [sp, #12]
 8007dd4:	1a5b      	subs	r3, r3, r1
 8007dd6:	42ab      	cmp	r3, r5
 8007dd8:	dcf2      	bgt.n	8007dc0 <_printf_i+0x210>
 8007dda:	e7eb      	b.n	8007db4 <_printf_i+0x204>
 8007ddc:	2500      	movs	r5, #0
 8007dde:	f104 0619 	add.w	r6, r4, #25
 8007de2:	e7f5      	b.n	8007dd0 <_printf_i+0x220>
 8007de4:	08009e51 	.word	0x08009e51
 8007de8:	08009e62 	.word	0x08009e62

08007dec <__sflush_r>:
 8007dec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007df4:	0716      	lsls	r6, r2, #28
 8007df6:	4605      	mov	r5, r0
 8007df8:	460c      	mov	r4, r1
 8007dfa:	d454      	bmi.n	8007ea6 <__sflush_r+0xba>
 8007dfc:	684b      	ldr	r3, [r1, #4]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	dc02      	bgt.n	8007e08 <__sflush_r+0x1c>
 8007e02:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	dd48      	ble.n	8007e9a <__sflush_r+0xae>
 8007e08:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e0a:	2e00      	cmp	r6, #0
 8007e0c:	d045      	beq.n	8007e9a <__sflush_r+0xae>
 8007e0e:	2300      	movs	r3, #0
 8007e10:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007e14:	682f      	ldr	r7, [r5, #0]
 8007e16:	6a21      	ldr	r1, [r4, #32]
 8007e18:	602b      	str	r3, [r5, #0]
 8007e1a:	d030      	beq.n	8007e7e <__sflush_r+0x92>
 8007e1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007e1e:	89a3      	ldrh	r3, [r4, #12]
 8007e20:	0759      	lsls	r1, r3, #29
 8007e22:	d505      	bpl.n	8007e30 <__sflush_r+0x44>
 8007e24:	6863      	ldr	r3, [r4, #4]
 8007e26:	1ad2      	subs	r2, r2, r3
 8007e28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007e2a:	b10b      	cbz	r3, 8007e30 <__sflush_r+0x44>
 8007e2c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007e2e:	1ad2      	subs	r2, r2, r3
 8007e30:	2300      	movs	r3, #0
 8007e32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e34:	6a21      	ldr	r1, [r4, #32]
 8007e36:	4628      	mov	r0, r5
 8007e38:	47b0      	blx	r6
 8007e3a:	1c43      	adds	r3, r0, #1
 8007e3c:	89a3      	ldrh	r3, [r4, #12]
 8007e3e:	d106      	bne.n	8007e4e <__sflush_r+0x62>
 8007e40:	6829      	ldr	r1, [r5, #0]
 8007e42:	291d      	cmp	r1, #29
 8007e44:	d82b      	bhi.n	8007e9e <__sflush_r+0xb2>
 8007e46:	4a2a      	ldr	r2, [pc, #168]	@ (8007ef0 <__sflush_r+0x104>)
 8007e48:	40ca      	lsrs	r2, r1
 8007e4a:	07d6      	lsls	r6, r2, #31
 8007e4c:	d527      	bpl.n	8007e9e <__sflush_r+0xb2>
 8007e4e:	2200      	movs	r2, #0
 8007e50:	6062      	str	r2, [r4, #4]
 8007e52:	04d9      	lsls	r1, r3, #19
 8007e54:	6922      	ldr	r2, [r4, #16]
 8007e56:	6022      	str	r2, [r4, #0]
 8007e58:	d504      	bpl.n	8007e64 <__sflush_r+0x78>
 8007e5a:	1c42      	adds	r2, r0, #1
 8007e5c:	d101      	bne.n	8007e62 <__sflush_r+0x76>
 8007e5e:	682b      	ldr	r3, [r5, #0]
 8007e60:	b903      	cbnz	r3, 8007e64 <__sflush_r+0x78>
 8007e62:	6560      	str	r0, [r4, #84]	@ 0x54
 8007e64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e66:	602f      	str	r7, [r5, #0]
 8007e68:	b1b9      	cbz	r1, 8007e9a <__sflush_r+0xae>
 8007e6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e6e:	4299      	cmp	r1, r3
 8007e70:	d002      	beq.n	8007e78 <__sflush_r+0x8c>
 8007e72:	4628      	mov	r0, r5
 8007e74:	f7ff fbf4 	bl	8007660 <_free_r>
 8007e78:	2300      	movs	r3, #0
 8007e7a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e7c:	e00d      	b.n	8007e9a <__sflush_r+0xae>
 8007e7e:	2301      	movs	r3, #1
 8007e80:	4628      	mov	r0, r5
 8007e82:	47b0      	blx	r6
 8007e84:	4602      	mov	r2, r0
 8007e86:	1c50      	adds	r0, r2, #1
 8007e88:	d1c9      	bne.n	8007e1e <__sflush_r+0x32>
 8007e8a:	682b      	ldr	r3, [r5, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d0c6      	beq.n	8007e1e <__sflush_r+0x32>
 8007e90:	2b1d      	cmp	r3, #29
 8007e92:	d001      	beq.n	8007e98 <__sflush_r+0xac>
 8007e94:	2b16      	cmp	r3, #22
 8007e96:	d11e      	bne.n	8007ed6 <__sflush_r+0xea>
 8007e98:	602f      	str	r7, [r5, #0]
 8007e9a:	2000      	movs	r0, #0
 8007e9c:	e022      	b.n	8007ee4 <__sflush_r+0xf8>
 8007e9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ea2:	b21b      	sxth	r3, r3
 8007ea4:	e01b      	b.n	8007ede <__sflush_r+0xf2>
 8007ea6:	690f      	ldr	r7, [r1, #16]
 8007ea8:	2f00      	cmp	r7, #0
 8007eaa:	d0f6      	beq.n	8007e9a <__sflush_r+0xae>
 8007eac:	0793      	lsls	r3, r2, #30
 8007eae:	680e      	ldr	r6, [r1, #0]
 8007eb0:	bf08      	it	eq
 8007eb2:	694b      	ldreq	r3, [r1, #20]
 8007eb4:	600f      	str	r7, [r1, #0]
 8007eb6:	bf18      	it	ne
 8007eb8:	2300      	movne	r3, #0
 8007eba:	eba6 0807 	sub.w	r8, r6, r7
 8007ebe:	608b      	str	r3, [r1, #8]
 8007ec0:	f1b8 0f00 	cmp.w	r8, #0
 8007ec4:	dde9      	ble.n	8007e9a <__sflush_r+0xae>
 8007ec6:	6a21      	ldr	r1, [r4, #32]
 8007ec8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007eca:	4643      	mov	r3, r8
 8007ecc:	463a      	mov	r2, r7
 8007ece:	4628      	mov	r0, r5
 8007ed0:	47b0      	blx	r6
 8007ed2:	2800      	cmp	r0, #0
 8007ed4:	dc08      	bgt.n	8007ee8 <__sflush_r+0xfc>
 8007ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ede:	81a3      	strh	r3, [r4, #12]
 8007ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ee8:	4407      	add	r7, r0
 8007eea:	eba8 0800 	sub.w	r8, r8, r0
 8007eee:	e7e7      	b.n	8007ec0 <__sflush_r+0xd4>
 8007ef0:	20400001 	.word	0x20400001

08007ef4 <_fflush_r>:
 8007ef4:	b538      	push	{r3, r4, r5, lr}
 8007ef6:	690b      	ldr	r3, [r1, #16]
 8007ef8:	4605      	mov	r5, r0
 8007efa:	460c      	mov	r4, r1
 8007efc:	b913      	cbnz	r3, 8007f04 <_fflush_r+0x10>
 8007efe:	2500      	movs	r5, #0
 8007f00:	4628      	mov	r0, r5
 8007f02:	bd38      	pop	{r3, r4, r5, pc}
 8007f04:	b118      	cbz	r0, 8007f0e <_fflush_r+0x1a>
 8007f06:	6a03      	ldr	r3, [r0, #32]
 8007f08:	b90b      	cbnz	r3, 8007f0e <_fflush_r+0x1a>
 8007f0a:	f7ff faa1 	bl	8007450 <__sinit>
 8007f0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d0f3      	beq.n	8007efe <_fflush_r+0xa>
 8007f16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007f18:	07d0      	lsls	r0, r2, #31
 8007f1a:	d404      	bmi.n	8007f26 <_fflush_r+0x32>
 8007f1c:	0599      	lsls	r1, r3, #22
 8007f1e:	d402      	bmi.n	8007f26 <_fflush_r+0x32>
 8007f20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f22:	f7ff fb9a 	bl	800765a <__retarget_lock_acquire_recursive>
 8007f26:	4628      	mov	r0, r5
 8007f28:	4621      	mov	r1, r4
 8007f2a:	f7ff ff5f 	bl	8007dec <__sflush_r>
 8007f2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f30:	07da      	lsls	r2, r3, #31
 8007f32:	4605      	mov	r5, r0
 8007f34:	d4e4      	bmi.n	8007f00 <_fflush_r+0xc>
 8007f36:	89a3      	ldrh	r3, [r4, #12]
 8007f38:	059b      	lsls	r3, r3, #22
 8007f3a:	d4e1      	bmi.n	8007f00 <_fflush_r+0xc>
 8007f3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f3e:	f7ff fb8d 	bl	800765c <__retarget_lock_release_recursive>
 8007f42:	e7dd      	b.n	8007f00 <_fflush_r+0xc>

08007f44 <__swbuf_r>:
 8007f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f46:	460e      	mov	r6, r1
 8007f48:	4614      	mov	r4, r2
 8007f4a:	4605      	mov	r5, r0
 8007f4c:	b118      	cbz	r0, 8007f56 <__swbuf_r+0x12>
 8007f4e:	6a03      	ldr	r3, [r0, #32]
 8007f50:	b90b      	cbnz	r3, 8007f56 <__swbuf_r+0x12>
 8007f52:	f7ff fa7d 	bl	8007450 <__sinit>
 8007f56:	69a3      	ldr	r3, [r4, #24]
 8007f58:	60a3      	str	r3, [r4, #8]
 8007f5a:	89a3      	ldrh	r3, [r4, #12]
 8007f5c:	071a      	lsls	r2, r3, #28
 8007f5e:	d501      	bpl.n	8007f64 <__swbuf_r+0x20>
 8007f60:	6923      	ldr	r3, [r4, #16]
 8007f62:	b943      	cbnz	r3, 8007f76 <__swbuf_r+0x32>
 8007f64:	4621      	mov	r1, r4
 8007f66:	4628      	mov	r0, r5
 8007f68:	f000 f82a 	bl	8007fc0 <__swsetup_r>
 8007f6c:	b118      	cbz	r0, 8007f76 <__swbuf_r+0x32>
 8007f6e:	f04f 37ff 	mov.w	r7, #4294967295
 8007f72:	4638      	mov	r0, r7
 8007f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f76:	6823      	ldr	r3, [r4, #0]
 8007f78:	6922      	ldr	r2, [r4, #16]
 8007f7a:	1a98      	subs	r0, r3, r2
 8007f7c:	6963      	ldr	r3, [r4, #20]
 8007f7e:	b2f6      	uxtb	r6, r6
 8007f80:	4283      	cmp	r3, r0
 8007f82:	4637      	mov	r7, r6
 8007f84:	dc05      	bgt.n	8007f92 <__swbuf_r+0x4e>
 8007f86:	4621      	mov	r1, r4
 8007f88:	4628      	mov	r0, r5
 8007f8a:	f7ff ffb3 	bl	8007ef4 <_fflush_r>
 8007f8e:	2800      	cmp	r0, #0
 8007f90:	d1ed      	bne.n	8007f6e <__swbuf_r+0x2a>
 8007f92:	68a3      	ldr	r3, [r4, #8]
 8007f94:	3b01      	subs	r3, #1
 8007f96:	60a3      	str	r3, [r4, #8]
 8007f98:	6823      	ldr	r3, [r4, #0]
 8007f9a:	1c5a      	adds	r2, r3, #1
 8007f9c:	6022      	str	r2, [r4, #0]
 8007f9e:	701e      	strb	r6, [r3, #0]
 8007fa0:	6962      	ldr	r2, [r4, #20]
 8007fa2:	1c43      	adds	r3, r0, #1
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d004      	beq.n	8007fb2 <__swbuf_r+0x6e>
 8007fa8:	89a3      	ldrh	r3, [r4, #12]
 8007faa:	07db      	lsls	r3, r3, #31
 8007fac:	d5e1      	bpl.n	8007f72 <__swbuf_r+0x2e>
 8007fae:	2e0a      	cmp	r6, #10
 8007fb0:	d1df      	bne.n	8007f72 <__swbuf_r+0x2e>
 8007fb2:	4621      	mov	r1, r4
 8007fb4:	4628      	mov	r0, r5
 8007fb6:	f7ff ff9d 	bl	8007ef4 <_fflush_r>
 8007fba:	2800      	cmp	r0, #0
 8007fbc:	d0d9      	beq.n	8007f72 <__swbuf_r+0x2e>
 8007fbe:	e7d6      	b.n	8007f6e <__swbuf_r+0x2a>

08007fc0 <__swsetup_r>:
 8007fc0:	b538      	push	{r3, r4, r5, lr}
 8007fc2:	4b29      	ldr	r3, [pc, #164]	@ (8008068 <__swsetup_r+0xa8>)
 8007fc4:	4605      	mov	r5, r0
 8007fc6:	6818      	ldr	r0, [r3, #0]
 8007fc8:	460c      	mov	r4, r1
 8007fca:	b118      	cbz	r0, 8007fd4 <__swsetup_r+0x14>
 8007fcc:	6a03      	ldr	r3, [r0, #32]
 8007fce:	b90b      	cbnz	r3, 8007fd4 <__swsetup_r+0x14>
 8007fd0:	f7ff fa3e 	bl	8007450 <__sinit>
 8007fd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fd8:	0719      	lsls	r1, r3, #28
 8007fda:	d422      	bmi.n	8008022 <__swsetup_r+0x62>
 8007fdc:	06da      	lsls	r2, r3, #27
 8007fde:	d407      	bmi.n	8007ff0 <__swsetup_r+0x30>
 8007fe0:	2209      	movs	r2, #9
 8007fe2:	602a      	str	r2, [r5, #0]
 8007fe4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fe8:	81a3      	strh	r3, [r4, #12]
 8007fea:	f04f 30ff 	mov.w	r0, #4294967295
 8007fee:	e033      	b.n	8008058 <__swsetup_r+0x98>
 8007ff0:	0758      	lsls	r0, r3, #29
 8007ff2:	d512      	bpl.n	800801a <__swsetup_r+0x5a>
 8007ff4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ff6:	b141      	cbz	r1, 800800a <__swsetup_r+0x4a>
 8007ff8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ffc:	4299      	cmp	r1, r3
 8007ffe:	d002      	beq.n	8008006 <__swsetup_r+0x46>
 8008000:	4628      	mov	r0, r5
 8008002:	f7ff fb2d 	bl	8007660 <_free_r>
 8008006:	2300      	movs	r3, #0
 8008008:	6363      	str	r3, [r4, #52]	@ 0x34
 800800a:	89a3      	ldrh	r3, [r4, #12]
 800800c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008010:	81a3      	strh	r3, [r4, #12]
 8008012:	2300      	movs	r3, #0
 8008014:	6063      	str	r3, [r4, #4]
 8008016:	6923      	ldr	r3, [r4, #16]
 8008018:	6023      	str	r3, [r4, #0]
 800801a:	89a3      	ldrh	r3, [r4, #12]
 800801c:	f043 0308 	orr.w	r3, r3, #8
 8008020:	81a3      	strh	r3, [r4, #12]
 8008022:	6923      	ldr	r3, [r4, #16]
 8008024:	b94b      	cbnz	r3, 800803a <__swsetup_r+0x7a>
 8008026:	89a3      	ldrh	r3, [r4, #12]
 8008028:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800802c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008030:	d003      	beq.n	800803a <__swsetup_r+0x7a>
 8008032:	4621      	mov	r1, r4
 8008034:	4628      	mov	r0, r5
 8008036:	f000 f84f 	bl	80080d8 <__smakebuf_r>
 800803a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800803e:	f013 0201 	ands.w	r2, r3, #1
 8008042:	d00a      	beq.n	800805a <__swsetup_r+0x9a>
 8008044:	2200      	movs	r2, #0
 8008046:	60a2      	str	r2, [r4, #8]
 8008048:	6962      	ldr	r2, [r4, #20]
 800804a:	4252      	negs	r2, r2
 800804c:	61a2      	str	r2, [r4, #24]
 800804e:	6922      	ldr	r2, [r4, #16]
 8008050:	b942      	cbnz	r2, 8008064 <__swsetup_r+0xa4>
 8008052:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008056:	d1c5      	bne.n	8007fe4 <__swsetup_r+0x24>
 8008058:	bd38      	pop	{r3, r4, r5, pc}
 800805a:	0799      	lsls	r1, r3, #30
 800805c:	bf58      	it	pl
 800805e:	6962      	ldrpl	r2, [r4, #20]
 8008060:	60a2      	str	r2, [r4, #8]
 8008062:	e7f4      	b.n	800804e <__swsetup_r+0x8e>
 8008064:	2000      	movs	r0, #0
 8008066:	e7f7      	b.n	8008058 <__swsetup_r+0x98>
 8008068:	24000038 	.word	0x24000038

0800806c <_sbrk_r>:
 800806c:	b538      	push	{r3, r4, r5, lr}
 800806e:	4d06      	ldr	r5, [pc, #24]	@ (8008088 <_sbrk_r+0x1c>)
 8008070:	2300      	movs	r3, #0
 8008072:	4604      	mov	r4, r0
 8008074:	4608      	mov	r0, r1
 8008076:	602b      	str	r3, [r5, #0]
 8008078:	f7f9 f8e0 	bl	800123c <_sbrk>
 800807c:	1c43      	adds	r3, r0, #1
 800807e:	d102      	bne.n	8008086 <_sbrk_r+0x1a>
 8008080:	682b      	ldr	r3, [r5, #0]
 8008082:	b103      	cbz	r3, 8008086 <_sbrk_r+0x1a>
 8008084:	6023      	str	r3, [r4, #0]
 8008086:	bd38      	pop	{r3, r4, r5, pc}
 8008088:	240003ac 	.word	0x240003ac

0800808c <__swhatbuf_r>:
 800808c:	b570      	push	{r4, r5, r6, lr}
 800808e:	460c      	mov	r4, r1
 8008090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008094:	2900      	cmp	r1, #0
 8008096:	b096      	sub	sp, #88	@ 0x58
 8008098:	4615      	mov	r5, r2
 800809a:	461e      	mov	r6, r3
 800809c:	da0d      	bge.n	80080ba <__swhatbuf_r+0x2e>
 800809e:	89a3      	ldrh	r3, [r4, #12]
 80080a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80080a4:	f04f 0100 	mov.w	r1, #0
 80080a8:	bf14      	ite	ne
 80080aa:	2340      	movne	r3, #64	@ 0x40
 80080ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80080b0:	2000      	movs	r0, #0
 80080b2:	6031      	str	r1, [r6, #0]
 80080b4:	602b      	str	r3, [r5, #0]
 80080b6:	b016      	add	sp, #88	@ 0x58
 80080b8:	bd70      	pop	{r4, r5, r6, pc}
 80080ba:	466a      	mov	r2, sp
 80080bc:	f000 f848 	bl	8008150 <_fstat_r>
 80080c0:	2800      	cmp	r0, #0
 80080c2:	dbec      	blt.n	800809e <__swhatbuf_r+0x12>
 80080c4:	9901      	ldr	r1, [sp, #4]
 80080c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80080ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80080ce:	4259      	negs	r1, r3
 80080d0:	4159      	adcs	r1, r3
 80080d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80080d6:	e7eb      	b.n	80080b0 <__swhatbuf_r+0x24>

080080d8 <__smakebuf_r>:
 80080d8:	898b      	ldrh	r3, [r1, #12]
 80080da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080dc:	079d      	lsls	r5, r3, #30
 80080de:	4606      	mov	r6, r0
 80080e0:	460c      	mov	r4, r1
 80080e2:	d507      	bpl.n	80080f4 <__smakebuf_r+0x1c>
 80080e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80080e8:	6023      	str	r3, [r4, #0]
 80080ea:	6123      	str	r3, [r4, #16]
 80080ec:	2301      	movs	r3, #1
 80080ee:	6163      	str	r3, [r4, #20]
 80080f0:	b003      	add	sp, #12
 80080f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080f4:	ab01      	add	r3, sp, #4
 80080f6:	466a      	mov	r2, sp
 80080f8:	f7ff ffc8 	bl	800808c <__swhatbuf_r>
 80080fc:	9f00      	ldr	r7, [sp, #0]
 80080fe:	4605      	mov	r5, r0
 8008100:	4639      	mov	r1, r7
 8008102:	4630      	mov	r0, r6
 8008104:	f7ff fb18 	bl	8007738 <_malloc_r>
 8008108:	b948      	cbnz	r0, 800811e <__smakebuf_r+0x46>
 800810a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800810e:	059a      	lsls	r2, r3, #22
 8008110:	d4ee      	bmi.n	80080f0 <__smakebuf_r+0x18>
 8008112:	f023 0303 	bic.w	r3, r3, #3
 8008116:	f043 0302 	orr.w	r3, r3, #2
 800811a:	81a3      	strh	r3, [r4, #12]
 800811c:	e7e2      	b.n	80080e4 <__smakebuf_r+0xc>
 800811e:	89a3      	ldrh	r3, [r4, #12]
 8008120:	6020      	str	r0, [r4, #0]
 8008122:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008126:	81a3      	strh	r3, [r4, #12]
 8008128:	9b01      	ldr	r3, [sp, #4]
 800812a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800812e:	b15b      	cbz	r3, 8008148 <__smakebuf_r+0x70>
 8008130:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008134:	4630      	mov	r0, r6
 8008136:	f000 f81d 	bl	8008174 <_isatty_r>
 800813a:	b128      	cbz	r0, 8008148 <__smakebuf_r+0x70>
 800813c:	89a3      	ldrh	r3, [r4, #12]
 800813e:	f023 0303 	bic.w	r3, r3, #3
 8008142:	f043 0301 	orr.w	r3, r3, #1
 8008146:	81a3      	strh	r3, [r4, #12]
 8008148:	89a3      	ldrh	r3, [r4, #12]
 800814a:	431d      	orrs	r5, r3
 800814c:	81a5      	strh	r5, [r4, #12]
 800814e:	e7cf      	b.n	80080f0 <__smakebuf_r+0x18>

08008150 <_fstat_r>:
 8008150:	b538      	push	{r3, r4, r5, lr}
 8008152:	4d07      	ldr	r5, [pc, #28]	@ (8008170 <_fstat_r+0x20>)
 8008154:	2300      	movs	r3, #0
 8008156:	4604      	mov	r4, r0
 8008158:	4608      	mov	r0, r1
 800815a:	4611      	mov	r1, r2
 800815c:	602b      	str	r3, [r5, #0]
 800815e:	f7f9 f844 	bl	80011ea <_fstat>
 8008162:	1c43      	adds	r3, r0, #1
 8008164:	d102      	bne.n	800816c <_fstat_r+0x1c>
 8008166:	682b      	ldr	r3, [r5, #0]
 8008168:	b103      	cbz	r3, 800816c <_fstat_r+0x1c>
 800816a:	6023      	str	r3, [r4, #0]
 800816c:	bd38      	pop	{r3, r4, r5, pc}
 800816e:	bf00      	nop
 8008170:	240003ac 	.word	0x240003ac

08008174 <_isatty_r>:
 8008174:	b538      	push	{r3, r4, r5, lr}
 8008176:	4d06      	ldr	r5, [pc, #24]	@ (8008190 <_isatty_r+0x1c>)
 8008178:	2300      	movs	r3, #0
 800817a:	4604      	mov	r4, r0
 800817c:	4608      	mov	r0, r1
 800817e:	602b      	str	r3, [r5, #0]
 8008180:	f7f9 f843 	bl	800120a <_isatty>
 8008184:	1c43      	adds	r3, r0, #1
 8008186:	d102      	bne.n	800818e <_isatty_r+0x1a>
 8008188:	682b      	ldr	r3, [r5, #0]
 800818a:	b103      	cbz	r3, 800818e <_isatty_r+0x1a>
 800818c:	6023      	str	r3, [r4, #0]
 800818e:	bd38      	pop	{r3, r4, r5, pc}
 8008190:	240003ac 	.word	0x240003ac

08008194 <_init>:
 8008194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008196:	bf00      	nop
 8008198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800819a:	bc08      	pop	{r3}
 800819c:	469e      	mov	lr, r3
 800819e:	4770      	bx	lr

080081a0 <_fini>:
 80081a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081a2:	bf00      	nop
 80081a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081a6:	bc08      	pop	{r3}
 80081a8:	469e      	mov	lr, r3
 80081aa:	4770      	bx	lr
